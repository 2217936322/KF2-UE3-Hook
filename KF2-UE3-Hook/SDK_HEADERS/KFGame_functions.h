/*
#############################################################################################
# Killing Floor 2 (1.8787) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: KFGame_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function KFGame.KFAnimNotify_AkEvent_IfActiveMGTarget.CanPlayAkEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UKFAnimNotify_AkEvent_IfActiveMGTarget::eventCanPlayAkEvent ( )
{
	static UFunction* pFnCanPlayAkEvent = NULL;

	if ( ! pFnCanPlayAkEvent )
		pFnCanPlayAkEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_AkEvent_IfActiveMGTarget.CanPlayAkEvent" );

	UKFAnimNotify_AkEvent_IfActiveMGTarget_eventCanPlayAkEvent_Parms CanPlayAkEvent_Parms;

	this->ProcessEvent ( pFnCanPlayAkEvent, &CanPlayAkEvent_Parms, NULL );
};

// Function KFGame.KFCheatManager.ForceUpdateDiscordPresence
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ForceUpdateDiscordPresence ( )
{
	static UFunction* pFnForceUpdateDiscordPresence = NULL;

	if ( ! pFnForceUpdateDiscordPresence )
		pFnForceUpdateDiscordPresence = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ForceUpdateDiscordPresence" );

	UKFCheatManager_execForceUpdateDiscordPresence_Parms ForceUpdateDiscordPresence_Parms;

	this->ProcessEvent ( pFnForceUpdateDiscordPresence, &ForceUpdateDiscordPresence_Parms, NULL );
};

// Function KFGame.KFCheatManager.ActivateAllPickups
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ActivateAllPickups ( )
{
	static UFunction* pFnActivateAllPickups = NULL;

	if ( ! pFnActivateAllPickups )
		pFnActivateAllPickups = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ActivateAllPickups" );

	UKFCheatManager_execActivateAllPickups_Parms ActivateAllPickups_Parms;

	this->ProcessEvent ( pFnActivateAllPickups, &ActivateAllPickups_Parms, NULL );
};

// Function KFGame.KFCheatManager.ForceNextObjective
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ForceNextObjective ( )
{
	static UFunction* pFnForceNextObjective = NULL;

	if ( ! pFnForceNextObjective )
		pFnForceNextObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ForceNextObjective" );

	UKFCheatManager_execForceNextObjective_Parms ForceNextObjective_Parms;

	this->ProcessEvent ( pFnForceNextObjective, &ForceNextObjective_Parms, NULL );
};

// Function KFGame.KFCheatManager.ForceOutbreakWave
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ForceOutbreakWave ( )
{
	static UFunction* pFnForceOutbreakWave = NULL;

	if ( ! pFnForceOutbreakWave )
		pFnForceOutbreakWave = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ForceOutbreakWave" );

	UKFCheatManager_execForceOutbreakWave_Parms ForceOutbreakWave_Parms;

	this->ProcessEvent ( pFnForceOutbreakWave, &ForceOutbreakWave_Parms, NULL );
};

// Function KFGame.KFCheatManager.ForceSpecialWave
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ForceSpecialWave ( )
{
	static UFunction* pFnForceSpecialWave = NULL;

	if ( ! pFnForceSpecialWave )
		pFnForceSpecialWave = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ForceSpecialWave" );

	UKFCheatManager_execForceSpecialWave_Parms ForceSpecialWave_Parms;

	this->ProcessEvent ( pFnForceSpecialWave, &ForceSpecialWave_Parms, NULL );
};

// Function KFGame.KFCheatManager.UpgradeWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::UpgradeWeapon ( )
{
	static UFunction* pFnUpgradeWeapon = NULL;

	if ( ! pFnUpgradeWeapon )
		pFnUpgradeWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.UpgradeWeapon" );

	UKFCheatManager_execUpgradeWeapon_Parms UpgradeWeapon_Parms;

	this->ProcessEvent ( pFnUpgradeWeapon, &UpgradeWeapon_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetMissionObjectiveVisible
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetMissionObjectiveVisible ( )
{
	static UFunction* pFnSetMissionObjectiveVisible = NULL;

	if ( ! pFnSetMissionObjectiveVisible )
		pFnSetMissionObjectiveVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetMissionObjectiveVisible" );

	UKFCheatManager_execSetMissionObjectiveVisible_Parms SetMissionObjectiveVisible_Parms;

	this->ProcessEvent ( pFnSetMissionObjectiveVisible, &SetMissionObjectiveVisible_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetMissionFailState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetMissionFailState ( )
{
	static UFunction* pFnSetMissionFailState = NULL;

	if ( ! pFnSetMissionFailState )
		pFnSetMissionFailState = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetMissionFailState" );

	UKFCheatManager_execSetMissionFailState_Parms SetMissionFailState_Parms;

	this->ProcessEvent ( pFnSetMissionFailState, &SetMissionFailState_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetMissionObjectiveActive
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetMissionObjectiveActive ( )
{
	static UFunction* pFnSetMissionObjectiveActive = NULL;

	if ( ! pFnSetMissionObjectiveActive )
		pFnSetMissionObjectiveActive = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetMissionObjectiveActive" );

	UKFCheatManager_execSetMissionObjectiveActive_Parms SetMissionObjectiveActive_Parms;

	this->ProcessEvent ( pFnSetMissionObjectiveActive, &SetMissionObjectiveActive_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetMissionObjectiveProgress
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetMissionObjectiveProgress ( )
{
	static UFunction* pFnSetMissionObjectiveProgress = NULL;

	if ( ! pFnSetMissionObjectiveProgress )
		pFnSetMissionObjectiveProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetMissionObjectiveProgress" );

	UKFCheatManager_execSetMissionObjectiveProgress_Parms SetMissionObjectiveProgress_Parms;

	this->ProcessEvent ( pFnSetMissionObjectiveProgress, &SetMissionObjectiveProgress_Parms, NULL );
};

// Function KFGame.KFCheatManager.LedRestoreLighting
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LedRestoreLighting ( )
{
	static UFunction* pFnLedRestoreLighting = NULL;

	if ( ! pFnLedRestoreLighting )
		pFnLedRestoreLighting = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LedRestoreLighting" );

	UKFCheatManager_execLedRestoreLighting_Parms LedRestoreLighting_Parms;

	this->ProcessEvent ( pFnLedRestoreLighting, &LedRestoreLighting_Parms, NULL );
};

// Function KFGame.KFCheatManager.LedStopEffects
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LedStopEffects ( )
{
	static UFunction* pFnLedStopEffects = NULL;

	if ( ! pFnLedStopEffects )
		pFnLedStopEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LedStopEffects" );

	UKFCheatManager_execLedStopEffects_Parms LedStopEffects_Parms;

	this->ProcessEvent ( pFnLedStopEffects, &LedStopEffects_Parms, NULL );
};

// Function KFGame.KFCheatManager.LEDPulseLighting
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LEDPulseLighting ( )
{
	static UFunction* pFnLEDPulseLighting = NULL;

	if ( ! pFnLEDPulseLighting )
		pFnLEDPulseLighting = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LEDPulseLighting" );

	UKFCheatManager_execLEDPulseLighting_Parms LEDPulseLighting_Parms;

	this->ProcessEvent ( pFnLEDPulseLighting, &LEDPulseLighting_Parms, NULL );
};

// Function KFGame.KFCheatManager.LEDSetFlashingRBG
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LEDSetFlashingRBG ( )
{
	static UFunction* pFnLEDSetFlashingRBG = NULL;

	if ( ! pFnLEDSetFlashingRBG )
		pFnLEDSetFlashingRBG = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LEDSetFlashingRBG" );

	UKFCheatManager_execLEDSetFlashingRBG_Parms LEDSetFlashingRBG_Parms;

	this->ProcessEvent ( pFnLEDSetFlashingRBG, &LEDSetFlashingRBG_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetLEDRGB
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetLEDRGB ( )
{
	static UFunction* pFnSetLEDRGB = NULL;

	if ( ! pFnSetLEDRGB )
		pFnSetLEDRGB = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetLEDRGB" );

	UKFCheatManager_execSetLEDRGB_Parms SetLEDRGB_Parms;

	this->ProcessEvent ( pFnSetLEDRGB, &SetLEDRGB_Parms, NULL );
};

// Function KFGame.KFCheatManager.InitLEDEffects
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::InitLEDEffects ( )
{
	static UFunction* pFnInitLEDEffects = NULL;

	if ( ! pFnInitLEDEffects )
		pFnInitLEDEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.InitLEDEffects" );

	UKFCheatManager_execInitLEDEffects_Parms InitLEDEffects_Parms;

	this->ProcessEvent ( pFnInitLEDEffects, &InitLEDEffects_Parms, NULL );
};

// Function KFGame.KFCheatManager.ForceMixerScene
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ForceMixerScene ( )
{
	static UFunction* pFnForceMixerScene = NULL;

	if ( ! pFnForceMixerScene )
		pFnForceMixerScene = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ForceMixerScene" );

	UKFCheatManager_execForceMixerScene_Parms ForceMixerScene_Parms;

	this->ProcessEvent ( pFnForceMixerScene, &ForceMixerScene_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestMixerButton
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestMixerButton ( )
{
	static UFunction* pFnTestMixerButton = NULL;

	if ( ! pFnTestMixerButton )
		pFnTestMixerButton = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestMixerButton" );

	UKFCheatManager_execTestMixerButton_Parms TestMixerButton_Parms;

	this->ProcessEvent ( pFnTestMixerButton, &TestMixerButton_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestGaveAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestGaveAmmo ( )
{
	static UFunction* pFnTestGaveAmmo = NULL;

	if ( ! pFnTestGaveAmmo )
		pFnTestGaveAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestGaveAmmo" );

	UKFCheatManager_execTestGaveAmmo_Parms TestGaveAmmo_Parms;

	this->ProcessEvent ( pFnTestGaveAmmo, &TestGaveAmmo_Parms, NULL );
};

// Function KFGame.KFCheatManager.StopMixer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::StopMixer ( )
{
	static UFunction* pFnStopMixer = NULL;

	if ( ! pFnStopMixer )
		pFnStopMixer = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.StopMixer" );

	UKFCheatManager_execStopMixer_Parms StopMixer_Parms;

	this->ProcessEvent ( pFnStopMixer, &StopMixer_Parms, NULL );
};

// Function KFGame.KFCheatManager.StartMixer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::StartMixer ( )
{
	static UFunction* pFnStartMixer = NULL;

	if ( ! pFnStartMixer )
		pFnStartMixer = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.StartMixer" );

	UKFCheatManager_execStartMixer_Parms StartMixer_Parms;

	this->ProcessEvent ( pFnStartMixer, &StartMixer_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugSetSafeFrame
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugSetSafeFrame ( )
{
	static UFunction* pFnDebugSetSafeFrame = NULL;

	if ( ! pFnDebugSetSafeFrame )
		pFnDebugSetSafeFrame = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugSetSafeFrame" );

	UKFCheatManager_execDebugSetSafeFrame_Parms DebugSetSafeFrame_Parms;

	this->ProcessEvent ( pFnDebugSetSafeFrame, &DebugSetSafeFrame_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugEndGameRewards
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugEndGameRewards ( )
{
	static UFunction* pFnDebugEndGameRewards = NULL;

	if ( ! pFnDebugEndGameRewards )
		pFnDebugEndGameRewards = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugEndGameRewards" );

	UKFCheatManager_execDebugEndGameRewards_Parms DebugEndGameRewards_Parms;

	this->ProcessEvent ( pFnDebugEndGameRewards, &DebugEndGameRewards_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetTitleDataValueForKey
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GetTitleDataValueForKey ( )
{
	static UFunction* pFnGetTitleDataValueForKey = NULL;

	if ( ! pFnGetTitleDataValueForKey )
		pFnGetTitleDataValueForKey = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetTitleDataValueForKey" );

	UKFCheatManager_execGetTitleDataValueForKey_Parms GetTitleDataValueForKey_Parms;

	this->ProcessEvent ( pFnGetTitleDataValueForKey, &GetTitleDataValueForKey_Parms, NULL );
};

// Function KFGame.KFCheatManager.OnTitleDataRead
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::OnTitleDataRead ( )
{
	static UFunction* pFnOnTitleDataRead = NULL;

	if ( ! pFnOnTitleDataRead )
		pFnOnTitleDataRead = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OnTitleDataRead" );

	UKFCheatManager_execOnTitleDataRead_Parms OnTitleDataRead_Parms;

	this->ProcessEvent ( pFnOnTitleDataRead, &OnTitleDataRead_Parms, NULL );
};

// Function KFGame.KFCheatManager.ReadPlayfabTitleData
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ReadPlayfabTitleData ( )
{
	static UFunction* pFnReadPlayfabTitleData = NULL;

	if ( ! pFnReadPlayfabTitleData )
		pFnReadPlayfabTitleData = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ReadPlayfabTitleData" );

	UKFCheatManager_execReadPlayfabTitleData_Parms ReadPlayfabTitleData_Parms;

	this->ProcessEvent ( pFnReadPlayfabTitleData, &ReadPlayfabTitleData_Parms, NULL );
};

// Function KFGame.KFCheatManager.RefreshXboxInventory
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::RefreshXboxInventory ( )
{
	static UFunction* pFnRefreshXboxInventory = NULL;

	if ( ! pFnRefreshXboxInventory )
		pFnRefreshXboxInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.RefreshXboxInventory" );

	UKFCheatManager_execRefreshXboxInventory_Parms RefreshXboxInventory_Parms;

	this->ProcessEvent ( pFnRefreshXboxInventory, &RefreshXboxInventory_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpStoreCatalog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpStoreCatalog ( )
{
	static UFunction* pFnDumpStoreCatalog = NULL;

	if ( ! pFnDumpStoreCatalog )
		pFnDumpStoreCatalog = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpStoreCatalog" );

	UKFCheatManager_execDumpStoreCatalog_Parms DumpStoreCatalog_Parms;

	this->ProcessEvent ( pFnDumpStoreCatalog, &DumpStoreCatalog_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpFullCatalog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpFullCatalog ( )
{
	static UFunction* pFnDumpFullCatalog = NULL;

	if ( ! pFnDumpFullCatalog )
		pFnDumpFullCatalog = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpFullCatalog" );

	UKFCheatManager_execDumpFullCatalog_Parms DumpFullCatalog_Parms;

	this->ProcessEvent ( pFnDumpFullCatalog, &DumpFullCatalog_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpSubscriptions
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpSubscriptions ( )
{
	static UFunction* pFnDumpSubscriptions = NULL;

	if ( ! pFnDumpSubscriptions )
		pFnDumpSubscriptions = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpSubscriptions" );

	UKFCheatManager_execDumpSubscriptions_Parms DumpSubscriptions_Parms;

	this->ProcessEvent ( pFnDumpSubscriptions, &DumpSubscriptions_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpConsumables
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpConsumables ( )
{
	static UFunction* pFnDumpConsumables = NULL;

	if ( ! pFnDumpConsumables )
		pFnDumpConsumables = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpConsumables" );

	UKFCheatManager_execDumpConsumables_Parms DumpConsumables_Parms;

	this->ProcessEvent ( pFnDumpConsumables, &DumpConsumables_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpDurables
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpDurables ( )
{
	static UFunction* pFnDumpDurables = NULL;

	if ( ! pFnDumpDurables )
		pFnDumpDurables = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpDurables" );

	UKFCheatManager_execDumpDurables_Parms DumpDurables_Parms;

	this->ProcessEvent ( pFnDumpDurables, &DumpDurables_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpApplicationProducts
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpApplicationProducts ( )
{
	static UFunction* pFnDumpApplicationProducts = NULL;

	if ( ! pFnDumpApplicationProducts )
		pFnDumpApplicationProducts = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpApplicationProducts" );

	UKFCheatManager_execDumpApplicationProducts_Parms DumpApplicationProducts_Parms;

	this->ProcessEvent ( pFnDumpApplicationProducts, &DumpApplicationProducts_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpGameProducts
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpGameProducts ( )
{
	static UFunction* pFnDumpGameProducts = NULL;

	if ( ! pFnDumpGameProducts )
		pFnDumpGameProducts = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpGameProducts" );

	UKFCheatManager_execDumpGameProducts_Parms DumpGameProducts_Parms;

	this->ProcessEvent ( pFnDumpGameProducts, &DumpGameProducts_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowXboxStoreUI
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowXboxStoreUI ( )
{
	static UFunction* pFnShowXboxStoreUI = NULL;

	if ( ! pFnShowXboxStoreUI )
		pFnShowXboxStoreUI = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowXboxStoreUI" );

	UKFCheatManager_execShowXboxStoreUI_Parms ShowXboxStoreUI_Parms;

	this->ProcessEvent ( pFnShowXboxStoreUI, &ShowXboxStoreUI_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowXboxProductDetails
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowXboxProductDetails ( )
{
	static UFunction* pFnShowXboxProductDetails = NULL;

	if ( ! pFnShowXboxProductDetails )
		pFnShowXboxProductDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowXboxProductDetails" );

	UKFCheatManager_execShowXboxProductDetails_Parms ShowXboxProductDetails_Parms;

	this->ProcessEvent ( pFnShowXboxProductDetails, &ShowXboxProductDetails_Parms, NULL );
};

// Function KFGame.KFCheatManager.DeleteXboxSaveData
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DeleteXboxSaveData ( )
{
	static UFunction* pFnDeleteXboxSaveData = NULL;

	if ( ! pFnDeleteXboxSaveData )
		pFnDeleteXboxSaveData = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DeleteXboxSaveData" );

	UKFCheatManager_execDeleteXboxSaveData_Parms DeleteXboxSaveData_Parms;

	this->ProcessEvent ( pFnDeleteXboxSaveData, &DeleteXboxSaveData_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestTutorialRewards
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestTutorialRewards ( )
{
	static UFunction* pFnTestTutorialRewards = NULL;

	if ( ! pFnTestTutorialRewards )
		pFnTestTutorialRewards = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestTutorialRewards" );

	UKFCheatManager_execTestTutorialRewards_Parms TestTutorialRewards_Parms;

	this->ProcessEvent ( pFnTestTutorialRewards, &TestTutorialRewards_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugConsumeEntitlements
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugConsumeEntitlements ( )
{
	static UFunction* pFnDebugConsumeEntitlements = NULL;

	if ( ! pFnDebugConsumeEntitlements )
		pFnDebugConsumeEntitlements = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugConsumeEntitlements" );

	UKFCheatManager_execDebugConsumeEntitlements_Parms DebugConsumeEntitlements_Parms;

	this->ProcessEvent ( pFnDebugConsumeEntitlements, &DebugConsumeEntitlements_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugGrantItem
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugGrantItem ( )
{
	static UFunction* pFnDebugGrantItem = NULL;

	if ( ! pFnDebugGrantItem )
		pFnDebugGrantItem = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugGrantItem" );

	UKFCheatManager_execDebugGrantItem_Parms DebugGrantItem_Parms;

	this->ProcessEvent ( pFnDebugGrantItem, &DebugGrantItem_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugRemoveCurrency
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugRemoveCurrency ( )
{
	static UFunction* pFnDebugRemoveCurrency = NULL;

	if ( ! pFnDebugRemoveCurrency )
		pFnDebugRemoveCurrency = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugRemoveCurrency" );

	UKFCheatManager_execDebugRemoveCurrency_Parms DebugRemoveCurrency_Parms;

	this->ProcessEvent ( pFnDebugRemoveCurrency, &DebugRemoveCurrency_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugAddCurrency
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugAddCurrency ( )
{
	static UFunction* pFnDebugAddCurrency = NULL;

	if ( ! pFnDebugAddCurrency )
		pFnDebugAddCurrency = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugAddCurrency" );

	UKFCheatManager_execDebugAddCurrency_Parms DebugAddCurrency_Parms;

	this->ProcessEvent ( pFnDebugAddCurrency, &DebugAddCurrency_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugRetrieveInternalData
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugRetrieveInternalData ( )
{
	static UFunction* pFnDebugRetrieveInternalData = NULL;

	if ( ! pFnDebugRetrieveInternalData )
		pFnDebugRetrieveInternalData = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugRetrieveInternalData" );

	UKFCheatManager_execDebugRetrieveInternalData_Parms DebugRetrieveInternalData_Parms;

	this->ProcessEvent ( pFnDebugRetrieveInternalData, &DebugRetrieveInternalData_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugUpdateServerData
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugUpdateServerData ( )
{
	static UFunction* pFnDebugUpdateServerData = NULL;

	if ( ! pFnDebugUpdateServerData )
		pFnDebugUpdateServerData = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugUpdateServerData" );

	UKFCheatManager_execDebugUpdateServerData_Parms DebugUpdateServerData_Parms;

	this->ProcessEvent ( pFnDebugUpdateServerData, &DebugUpdateServerData_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugUpdateInternalData
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugUpdateInternalData ( )
{
	static UFunction* pFnDebugUpdateInternalData = NULL;

	if ( ! pFnDebugUpdateInternalData )
		pFnDebugUpdateInternalData = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugUpdateInternalData" );

	UKFCheatManager_execDebugUpdateInternalData_Parms DebugUpdateInternalData_Parms;

	this->ProcessEvent ( pFnDebugUpdateInternalData, &DebugUpdateInternalData_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpExchangeRules
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpExchangeRules ( )
{
	static UFunction* pFnDumpExchangeRules = NULL;

	if ( ! pFnDumpExchangeRules )
		pFnDumpExchangeRules = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpExchangeRules" );

	UKFCheatManager_execDumpExchangeRules_Parms DumpExchangeRules_Parms;

	this->ProcessEvent ( pFnDumpExchangeRules, &DumpExchangeRules_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpInventory
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpInventory ( )
{
	static UFunction* pFnDumpInventory = NULL;

	if ( ! pFnDumpInventory )
		pFnDumpInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpInventory" );

	UKFCheatManager_execDumpInventory_Parms DumpInventory_Parms;

	this->ProcessEvent ( pFnDumpInventory, &DumpInventory_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpItemDefinitions
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpItemDefinitions ( )
{
	static UFunction* pFnDumpItemDefinitions = NULL;

	if ( ! pFnDumpItemDefinitions )
		pFnDumpItemDefinitions = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpItemDefinitions" );

	UKFCheatManager_execDumpItemDefinitions_Parms DumpItemDefinitions_Parms;

	this->ProcessEvent ( pFnDumpItemDefinitions, &DumpItemDefinitions_Parms, NULL );
};

// Function KFGame.KFCheatManager.UnlockContainer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::UnlockContainer ( )
{
	static UFunction* pFnUnlockContainer = NULL;

	if ( ! pFnUnlockContainer )
		pFnUnlockContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.UnlockContainer" );

	UKFCheatManager_execUnlockContainer_Parms UnlockContainer_Parms;

	this->ProcessEvent ( pFnUnlockContainer, &UnlockContainer_Parms, NULL );
};

// Function KFGame.KFCheatManager.OnPlayfabInventoryReadComplete
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::OnPlayfabInventoryReadComplete ( )
{
	static UFunction* pFnOnPlayfabInventoryReadComplete = NULL;

	if ( ! pFnOnPlayfabInventoryReadComplete )
		pFnOnPlayfabInventoryReadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OnPlayfabInventoryReadComplete" );

	UKFCheatManager_execOnPlayfabInventoryReadComplete_Parms OnPlayfabInventoryReadComplete_Parms;

	this->ProcessEvent ( pFnOnPlayfabInventoryReadComplete, &OnPlayfabInventoryReadComplete_Parms, NULL );
};

// Function KFGame.KFCheatManager.ReadPFUserInventory
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ReadPFUserInventory ( )
{
	static UFunction* pFnReadPFUserInventory = NULL;

	if ( ! pFnReadPFUserInventory )
		pFnReadPFUserInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ReadPFUserInventory" );

	UKFCheatManager_execReadPFUserInventory_Parms ReadPFUserInventory_Parms;

	this->ProcessEvent ( pFnReadPFUserInventory, &ReadPFUserInventory_Parms, NULL );
};

// Function KFGame.KFCheatManager.OnPlayfabStoreReadComplete
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::OnPlayfabStoreReadComplete ( )
{
	static UFunction* pFnOnPlayfabStoreReadComplete = NULL;

	if ( ! pFnOnPlayfabStoreReadComplete )
		pFnOnPlayfabStoreReadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OnPlayfabStoreReadComplete" );

	UKFCheatManager_execOnPlayfabStoreReadComplete_Parms OnPlayfabStoreReadComplete_Parms;

	this->ProcessEvent ( pFnOnPlayfabStoreReadComplete, &OnPlayfabStoreReadComplete_Parms, NULL );
};

// Function KFGame.KFCheatManager.ReadPFStoreData
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ReadPFStoreData ( )
{
	static UFunction* pFnReadPFStoreData = NULL;

	if ( ! pFnReadPFStoreData )
		pFnReadPFStoreData = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ReadPFStoreData" );

	UKFCheatManager_execReadPFStoreData_Parms ReadPFStoreData_Parms;

	this->ProcessEvent ( pFnReadPFStoreData, &ReadPFStoreData_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetMatchmakingRegion
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetMatchmakingRegion ( )
{
	static UFunction* pFnSetMatchmakingRegion = NULL;

	if ( ! pFnSetMatchmakingRegion )
		pFnSetMatchmakingRegion = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetMatchmakingRegion" );

	UKFCheatManager_execSetMatchmakingRegion_Parms SetMatchmakingRegion_Parms;

	this->ProcessEvent ( pFnSetMatchmakingRegion, &SetMatchmakingRegion_Parms, NULL );
};

// Function KFGame.KFCheatManager.OnServerStarted
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::OnServerStarted ( )
{
	static UFunction* pFnOnServerStarted = NULL;

	if ( ! pFnOnServerStarted )
		pFnOnServerStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OnServerStarted" );

	UKFCheatManager_execOnServerStarted_Parms OnServerStarted_Parms;

	this->ProcessEvent ( pFnOnServerStarted, &OnServerStarted_Parms, NULL );
};

// Function KFGame.KFCheatManager.StartupServer
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::StartupServer ( )
{
	static UFunction* pFnStartupServer = NULL;

	if ( ! pFnStartupServer )
		pFnStartupServer = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.StartupServer" );

	UKFCheatManager_execStartupServer_Parms StartupServer_Parms;

	this->ProcessEvent ( pFnStartupServer, &StartupServer_Parms, NULL );
};

// Function KFGame.KFCheatManager.OnQueryServerInfoComplete
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::OnQueryServerInfoComplete ( )
{
	static UFunction* pFnOnQueryServerInfoComplete = NULL;

	if ( ! pFnOnQueryServerInfoComplete )
		pFnOnQueryServerInfoComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OnQueryServerInfoComplete" );

	UKFCheatManager_execOnQueryServerInfoComplete_Parms OnQueryServerInfoComplete_Parms;

	this->ProcessEvent ( pFnOnQueryServerInfoComplete, &OnQueryServerInfoComplete_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestServerInfoQuery
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestServerInfoQuery ( )
{
	static UFunction* pFnTestServerInfoQuery = NULL;

	if ( ! pFnTestServerInfoQuery )
		pFnTestServerInfoQuery = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestServerInfoQuery" );

	UKFCheatManager_execTestServerInfoQuery_Parms TestServerInfoQuery_Parms;

	this->ProcessEvent ( pFnTestServerInfoQuery, &TestServerInfoQuery_Parms, NULL );
};

// Function KFGame.KFCheatManager.OnFindOnlinePlayfabGamesComplete
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::OnFindOnlinePlayfabGamesComplete ( )
{
	static UFunction* pFnOnFindOnlinePlayfabGamesComplete = NULL;

	if ( ! pFnOnFindOnlinePlayfabGamesComplete )
		pFnOnFindOnlinePlayfabGamesComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OnFindOnlinePlayfabGamesComplete" );

	UKFCheatManager_execOnFindOnlinePlayfabGamesComplete_Parms OnFindOnlinePlayfabGamesComplete_Parms;

	this->ProcessEvent ( pFnOnFindOnlinePlayfabGamesComplete, &OnFindOnlinePlayfabGamesComplete_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestPlayfabGameSearch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestPlayfabGameSearch ( )
{
	static UFunction* pFnTestPlayfabGameSearch = NULL;

	if ( ! pFnTestPlayfabGameSearch )
		pFnTestPlayfabGameSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestPlayfabGameSearch" );

	UKFCheatManager_execTestPlayfabGameSearch_Parms TestPlayfabGameSearch_Parms;

	this->ProcessEvent ( pFnTestPlayfabGameSearch, &TestPlayfabGameSearch_Parms, NULL );
};

// Function KFGame.KFCheatManager.OnLoginComplete
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::OnLoginComplete ( )
{
	static UFunction* pFnOnLoginComplete = NULL;

	if ( ! pFnOnLoginComplete )
		pFnOnLoginComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OnLoginComplete" );

	UKFCheatManager_execOnLoginComplete_Parms OnLoginComplete_Parms;

	this->ProcessEvent ( pFnOnLoginComplete, &OnLoginComplete_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestLogin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestLogin ( )
{
	static UFunction* pFnTestLogin = NULL;

	if ( ! pFnTestLogin )
		pFnTestLogin = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestLogin" );

	UKFCheatManager_execTestLogin_Parms TestLogin_Parms;

	this->ProcessEvent ( pFnTestLogin, &TestLogin_Parms, NULL );
};

// Function KFGame.KFCheatManager.LoginSelf
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LoginSelf ( )
{
	static UFunction* pFnLoginSelf = NULL;

	if ( ! pFnLoginSelf )
		pFnLoginSelf = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LoginSelf" );

	UKFCheatManager_execLoginSelf_Parms LoginSelf_Parms;

	this->ProcessEvent ( pFnLoginSelf, &LoginSelf_Parms, NULL );
};

// Function KFGame.KFCheatManager.Hats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Hats ( )
{
	static UFunction* pFnHats = NULL;

	if ( ! pFnHats )
		pFnHats = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Hats" );

	UKFCheatManager_execHats_Parms Hats_Parms;

	this->ProcessEvent ( pFnHats, &Hats_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowPostRoundMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowPostRoundMenu ( )
{
	static UFunction* pFnShowPostRoundMenu = NULL;

	if ( ! pFnShowPostRoundMenu )
		pFnShowPostRoundMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowPostRoundMenu" );

	UKFCheatManager_execShowPostRoundMenu_Parms ShowPostRoundMenu_Parms;

	this->ProcessEvent ( pFnShowPostRoundMenu, &ShowPostRoundMenu_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnHumanPawnV
// [0x00824202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnHumanPawnV ( )
{
	static UFunction* pFnSpawnHumanPawnV = NULL;

	if ( ! pFnSpawnHumanPawnV )
		pFnSpawnHumanPawnV = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnHumanPawnV" );

	UKFCheatManager_execSpawnHumanPawnV_Parms SpawnHumanPawnV_Parms;

	this->ProcessEvent ( pFnSpawnHumanPawnV, &SpawnHumanPawnV_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestGrapple
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestGrapple ( )
{
	static UFunction* pFnTestGrapple = NULL;

	if ( ! pFnTestGrapple )
		pFnTestGrapple = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestGrapple" );

	UKFCheatManager_execTestGrapple_Parms TestGrapple_Parms;

	this->ProcessEvent ( pFnTestGrapple, &TestGrapple_Parms, NULL );
};

// Function KFGame.KFCheatManager.DemiGod
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DemiGod ( )
{
	static UFunction* pFnDemiGod = NULL;

	if ( ! pFnDemiGod )
		pFnDemiGod = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DemiGod" );

	UKFCheatManager_execDemiGod_Parms DemiGod_Parms;

	this->ProcessEvent ( pFnDemiGod, &DemiGod_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetWeaponSkin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetWeaponSkin ( )
{
	static UFunction* pFnSetWeaponSkin = NULL;

	if ( ! pFnSetWeaponSkin )
		pFnSetWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetWeaponSkin" );

	UKFCheatManager_execSetWeaponSkin_Parms SetWeaponSkin_Parms;

	this->ProcessEvent ( pFnSetWeaponSkin, &SetWeaponSkin_Parms, NULL );
};

// Function KFGame.KFCheatManager.WeaponGotoState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::WeaponGotoState ( )
{
	static UFunction* pFnWeaponGotoState = NULL;

	if ( ! pFnWeaponGotoState )
		pFnWeaponGotoState = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.WeaponGotoState" );

	UKFCheatManager_execWeaponGotoState_Parms WeaponGotoState_Parms;

	this->ProcessEvent ( pFnWeaponGotoState, &WeaponGotoState_Parms, NULL );
};

// Function KFGame.KFCheatManager.RespawnSpectators
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::RespawnSpectators ( )
{
	static UFunction* pFnRespawnSpectators = NULL;

	if ( ! pFnRespawnSpectators )
		pFnRespawnSpectators = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.RespawnSpectators" );

	UKFCheatManager_execRespawnSpectators_Parms RespawnSpectators_Parms;

	this->ProcessEvent ( pFnRespawnSpectators, &RespawnSpectators_Parms, NULL );
};

// Function KFGame.KFCheatManager.LogServerMovementVars
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LogServerMovementVars ( )
{
	static UFunction* pFnLogServerMovementVars = NULL;

	if ( ! pFnLogServerMovementVars )
		pFnLogServerMovementVars = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LogServerMovementVars" );

	UKFCheatManager_execLogServerMovementVars_Parms LogServerMovementVars_Parms;

	this->ProcessEvent ( pFnLogServerMovementVars, &LogServerMovementVars_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleVisibilityView
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleVisibilityView ( )
{
	static UFunction* pFnToggleVisibilityView = NULL;

	if ( ! pFnToggleVisibilityView )
		pFnToggleVisibilityView = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleVisibilityView" );

	UKFCheatManager_execToggleVisibilityView_Parms ToggleVisibilityView_Parms;

	this->ProcessEvent ( pFnToggleVisibilityView, &ToggleVisibilityView_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleRelevancyView
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleRelevancyView ( )
{
	static UFunction* pFnToggleRelevancyView = NULL;

	if ( ! pFnToggleRelevancyView )
		pFnToggleRelevancyView = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleRelevancyView" );

	UKFCheatManager_execToggleRelevancyView_Parms ToggleRelevancyView_Parms;

	this->ProcessEvent ( pFnToggleRelevancyView, &ToggleRelevancyView_Parms, NULL );
};

// Function KFGame.KFCheatManager.LogStatValue
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LogStatValue ( )
{
	static UFunction* pFnLogStatValue = NULL;

	if ( ! pFnLogStatValue )
		pFnLogStatValue = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LogStatValue" );

	UKFCheatManager_execLogStatValue_Parms LogStatValue_Parms;

	this->ProcessEvent ( pFnLogStatValue, &LogStatValue_Parms, NULL );
};

// Function KFGame.KFCheatManager.LogItemPickups
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LogItemPickups ( )
{
	static UFunction* pFnLogItemPickups = NULL;

	if ( ! pFnLogItemPickups )
		pFnLogItemPickups = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LogItemPickups" );

	UKFCheatManager_execLogItemPickups_Parms LogItemPickups_Parms;

	this->ProcessEvent ( pFnLogItemPickups, &LogItemPickups_Parms, NULL );
};

// Function KFGame.KFCheatManager.LogAmmoPickups
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LogAmmoPickups ( )
{
	static UFunction* pFnLogAmmoPickups = NULL;

	if ( ! pFnLogAmmoPickups )
		pFnLogAmmoPickups = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LogAmmoPickups" );

	UKFCheatManager_execLogAmmoPickups_Parms LogAmmoPickups_Parms;

	this->ProcessEvent ( pFnLogAmmoPickups, &LogAmmoPickups_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowKFGameVersion
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowKFGameVersion ( )
{
	static UFunction* pFnShowKFGameVersion = NULL;

	if ( ! pFnShowKFGameVersion )
		pFnShowKFGameVersion = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowKFGameVersion" );

	UKFCheatManager_execShowKFGameVersion_Parms ShowKFGameVersion_Parms;

	this->ProcessEvent ( pFnShowKFGameVersion, &ShowKFGameVersion_Parms, NULL );
};

// Function KFGame.KFCheatManager.DBJump
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DBJump ( )
{
	static UFunction* pFnDBJump = NULL;

	if ( ! pFnDBJump )
		pFnDBJump = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DBJump" );

	UKFCheatManager_execDBJump_Parms DBJump_Parms;

	this->ProcessEvent ( pFnDBJump, &DBJump_Parms, NULL );
};

// Function KFGame.KFCheatManager.ClearFakeDramaEvent
// [0x00020102] 
// Parameters infos:

void UKFCheatManager::ClearFakeDramaEvent ( )
{
	static UFunction* pFnClearFakeDramaEvent = NULL;

	if ( ! pFnClearFakeDramaEvent )
		pFnClearFakeDramaEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ClearFakeDramaEvent" );

	UKFCheatManager_execClearFakeDramaEvent_Parms ClearFakeDramaEvent_Parms;

	this->ProcessEvent ( pFnClearFakeDramaEvent, &ClearFakeDramaEvent_Parms, NULL );
};

// Function KFGame.KFCheatManager.FakeDramaEvent
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FakeDramaEvent ( )
{
	static UFunction* pFnFakeDramaEvent = NULL;

	if ( ! pFnFakeDramaEvent )
		pFnFakeDramaEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FakeDramaEvent" );

	UKFCheatManager_execFakeDramaEvent_Parms FakeDramaEvent_Parms;

	this->ProcessEvent ( pFnFakeDramaEvent, &FakeDramaEvent_Parms, NULL );
};

// Function KFGame.KFCheatManager.ZedTimeTest
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ZedTimeTest ( )
{
	static UFunction* pFnZedTimeTest = NULL;

	if ( ! pFnZedTimeTest )
		pFnZedTimeTest = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ZedTimeTest" );

	UKFCheatManager_execZedTimeTest_Parms ZedTimeTest_Parms;

	this->ProcessEvent ( pFnZedTimeTest, &ZedTimeTest_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestFalloffDamage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestFalloffDamage ( )
{
	static UFunction* pFnTestFalloffDamage = NULL;

	if ( ! pFnTestFalloffDamage )
		pFnTestFalloffDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestFalloffDamage" );

	UKFCheatManager_execTestFalloffDamage_Parms TestFalloffDamage_Parms;

	this->ProcessEvent ( pFnTestFalloffDamage, &TestFalloffDamage_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetCurrentPerkXP
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GetCurrentPerkXP ( )
{
	static UFunction* pFnGetCurrentPerkXP = NULL;

	if ( ! pFnGetCurrentPerkXP )
		pFnGetCurrentPerkXP = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetCurrentPerkXP" );

	UKFCheatManager_execGetCurrentPerkXP_Parms GetCurrentPerkXP_Parms;

	this->ProcessEvent ( pFnGetCurrentPerkXP, &GetCurrentPerkXP_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowLevelUpPopUp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowLevelUpPopUp ( )
{
	static UFunction* pFnShowLevelUpPopUp = NULL;

	if ( ! pFnShowLevelUpPopUp )
		pFnShowLevelUpPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowLevelUpPopUp" );

	UKFCheatManager_execShowLevelUpPopUp_Parms ShowLevelUpPopUp_Parms;

	this->ProcessEvent ( pFnShowLevelUpPopUp, &ShowLevelUpPopUp_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestGameSearch
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestGameSearch ( )
{
	static UFunction* pFnTestGameSearch = NULL;

	if ( ! pFnTestGameSearch )
		pFnTestGameSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestGameSearch" );

	UKFCheatManager_execTestGameSearch_Parms TestGameSearch_Parms;

	this->ProcessEvent ( pFnTestGameSearch, &TestGameSearch_Parms, NULL );
};

// Function KFGame.KFCheatManager.Chris
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Chris ( )
{
	static UFunction* pFnChris = NULL;

	if ( ! pFnChris )
		pFnChris = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Chris" );

	UKFCheatManager_execChris_Parms Chris_Parms;

	this->ProcessEvent ( pFnChris, &Chris_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowMeleeCollision
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowMeleeCollision ( )
{
	static UFunction* pFnShowMeleeCollision = NULL;

	if ( ! pFnShowMeleeCollision )
		pFnShowMeleeCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowMeleeCollision" );

	UKFCheatManager_execShowMeleeCollision_Parms ShowMeleeCollision_Parms;

	this->ProcessEvent ( pFnShowMeleeCollision, &ShowMeleeCollision_Parms, NULL );
};

// Function KFGame.KFCheatManager.LaunchChunks
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LaunchChunks ( )
{
	static UFunction* pFnLaunchChunks = NULL;

	if ( ! pFnLaunchChunks )
		pFnLaunchChunks = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LaunchChunks" );

	UKFCheatManager_execLaunchChunks_Parms LaunchChunks_Parms;

	this->ProcessEvent ( pFnLaunchChunks, &LaunchChunks_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetNadeRadiusDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetNadeRadiusDebug ( )
{
	static UFunction* pFnSetNadeRadiusDebug = NULL;

	if ( ! pFnSetNadeRadiusDebug )
		pFnSetNadeRadiusDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetNadeRadiusDebug" );

	UKFCheatManager_execSetNadeRadiusDebug_Parms SetNadeRadiusDebug_Parms;

	this->ProcessEvent ( pFnSetNadeRadiusDebug, &SetNadeRadiusDebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.TurnOnAIArenaLight
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TurnOnAIArenaLight ( )
{
	static UFunction* pFnTurnOnAIArenaLight = NULL;

	if ( ! pFnTurnOnAIArenaLight )
		pFnTurnOnAIArenaLight = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TurnOnAIArenaLight" );

	UKFCheatManager_execTurnOnAIArenaLight_Parms TurnOnAIArenaLight_Parms;

	this->ProcessEvent ( pFnTurnOnAIArenaLight, &TurnOnAIArenaLight_Parms, NULL );
};

// Function KFGame.KFCheatManager.ConvertFOV
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ConvertFOV ( )
{
	static UFunction* pFnConvertFOV = NULL;

	if ( ! pFnConvertFOV )
		pFnConvertFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ConvertFOV" );

	UKFCheatManager_execConvertFOV_Parms ConvertFOV_Parms;

	this->ProcessEvent ( pFnConvertFOV, &ConvertFOV_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetLivingPlayers
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetLivingPlayers ( )
{
	static UFunction* pFnSetLivingPlayers = NULL;

	if ( ! pFnSetLivingPlayers )
		pFnSetLivingPlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetLivingPlayers" );

	UKFCheatManager_execSetLivingPlayers_Parms SetLivingPlayers_Parms;

	this->ProcessEvent ( pFnSetLivingPlayers, &SetLivingPlayers_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleAIDefaultsLog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleAIDefaultsLog ( )
{
	static UFunction* pFnToggleAIDefaultsLog = NULL;

	if ( ! pFnToggleAIDefaultsLog )
		pFnToggleAIDefaultsLog = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleAIDefaultsLog" );

	UKFCheatManager_execToggleAIDefaultsLog_Parms ToggleAIDefaultsLog_Parms;

	this->ProcessEvent ( pFnToggleAIDefaultsLog, &ToggleAIDefaultsLog_Parms, NULL );
};

// Function KFGame.KFCheatManager.DisableAtkAnimDifficultyScaling
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DisableAtkAnimDifficultyScaling ( )
{
	static UFunction* pFnDisableAtkAnimDifficultyScaling = NULL;

	if ( ! pFnDisableAtkAnimDifficultyScaling )
		pFnDisableAtkAnimDifficultyScaling = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DisableAtkAnimDifficultyScaling" );

	UKFCheatManager_execDisableAtkAnimDifficultyScaling_Parms DisableAtkAnimDifficultyScaling_Parms;

	this->ProcessEvent ( pFnDisableAtkAnimDifficultyScaling, &DisableAtkAnimDifficultyScaling_Parms, NULL );
};

// Function KFGame.KFCheatManager.EnableAtkAnimDifficultyScaling
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::EnableAtkAnimDifficultyScaling ( )
{
	static UFunction* pFnEnableAtkAnimDifficultyScaling = NULL;

	if ( ! pFnEnableAtkAnimDifficultyScaling )
		pFnEnableAtkAnimDifficultyScaling = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.EnableAtkAnimDifficultyScaling" );

	UKFCheatManager_execEnableAtkAnimDifficultyScaling_Parms EnableAtkAnimDifficultyScaling_Parms;

	this->ProcessEvent ( pFnEnableAtkAnimDifficultyScaling, &EnableAtkAnimDifficultyScaling_Parms, NULL );
};

// Function KFGame.KFCheatManager.CameraPuke
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::CameraPuke ( )
{
	static UFunction* pFnCameraPuke = NULL;

	if ( ! pFnCameraPuke )
		pFnCameraPuke = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.CameraPuke" );

	UKFCheatManager_execCameraPuke_Parms CameraPuke_Parms;

	this->ProcessEvent ( pFnCameraPuke, &CameraPuke_Parms, NULL );
};

// Function KFGame.KFCheatManager.HeadShotPing
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HeadShotPing ( )
{
	static UFunction* pFnHeadShotPing = NULL;

	if ( ! pFnHeadShotPing )
		pFnHeadShotPing = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HeadShotPing" );

	UKFCheatManager_execHeadShotPing_Parms HeadShotPing_Parms;

	this->ProcessEvent ( pFnHeadShotPing, &HeadShotPing_Parms, NULL );
};

// Function KFGame.KFCheatManager.CameraBlood
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::CameraBlood ( )
{
	static UFunction* pFnCameraBlood = NULL;

	if ( ! pFnCameraBlood )
		pFnCameraBlood = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.CameraBlood" );

	UKFCheatManager_execCameraBlood_Parms CameraBlood_Parms;

	this->ProcessEvent ( pFnCameraBlood, &CameraBlood_Parms, NULL );
};

// Function KFGame.KFCheatManager.EndRound
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::EndRound ( )
{
	static UFunction* pFnEndRound = NULL;

	if ( ! pFnEndRound )
		pFnEndRound = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.EndRound" );

	UKFCheatManager_execEndRound_Parms EndRound_Parms;

	this->ProcessEvent ( pFnEndRound, &EndRound_Parms, NULL );
};

// Function KFGame.KFCheatManager.ClearCorpses
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ClearCorpses ( )
{
	static UFunction* pFnClearCorpses = NULL;

	if ( ! pFnClearCorpses )
		pFnClearCorpses = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ClearCorpses" );

	UKFCheatManager_execClearCorpses_Parms ClearCorpses_Parms;

	this->ProcessEvent ( pFnClearCorpses, &ClearCorpses_Parms, NULL );
};

// Function KFGame.KFCheatManager.ClearSplatters
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ClearSplatters ( )
{
	static UFunction* pFnClearSplatters = NULL;

	if ( ! pFnClearSplatters )
		pFnClearSplatters = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ClearSplatters" );

	UKFCheatManager_execClearSplatters_Parms ClearSplatters_Parms;

	this->ProcessEvent ( pFnClearSplatters, &ClearSplatters_Parms, NULL );
};

// Function KFGame.KFCheatManager.DoSplatterFire
// [0x00820002] 
// Parameters infos:

void UKFCheatManager::DoSplatterFire ( )
{
	static UFunction* pFnDoSplatterFire = NULL;

	if ( ! pFnDoSplatterFire )
		pFnDoSplatterFire = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DoSplatterFire" );

	UKFCheatManager_execDoSplatterFire_Parms DoSplatterFire_Parms;

	this->ProcessEvent ( pFnDoSplatterFire, &DoSplatterFire_Parms, NULL );
};

// Function KFGame.KFCheatManager.StopSplatterFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::StopSplatterFire ( )
{
	static UFunction* pFnStopSplatterFire = NULL;

	if ( ! pFnStopSplatterFire )
		pFnStopSplatterFire = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.StopSplatterFire" );

	UKFCheatManager_execStopSplatterFire_Parms StopSplatterFire_Parms;

	this->ProcessEvent ( pFnStopSplatterFire, &StopSplatterFire_Parms, NULL );
};

// Function KFGame.KFCheatManager.SplatterFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SplatterFire ( )
{
	static UFunction* pFnSplatterFire = NULL;

	if ( ! pFnSplatterFire )
		pFnSplatterFire = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SplatterFire" );

	UKFCheatManager_execSplatterFire_Parms SplatterFire_Parms;

	this->ProcessEvent ( pFnSplatterFire, &SplatterFire_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleSplatterGun
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleSplatterGun ( )
{
	static UFunction* pFnToggleSplatterGun = NULL;

	if ( ! pFnToggleSplatterGun )
		pFnToggleSplatterGun = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleSplatterGun" );

	UKFCheatManager_execToggleSplatterGun_Parms ToggleSplatterGun_Parms;

	this->ProcessEvent ( pFnToggleSplatterGun, &ToggleSplatterGun_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetDebugSceneView
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetDebugSceneView ( )
{
	static UFunction* pFnSetDebugSceneView = NULL;

	if ( ! pFnSetDebugSceneView )
		pFnSetDebugSceneView = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetDebugSceneView" );

	UKFCheatManager_execSetDebugSceneView_Parms SetDebugSceneView_Parms;

	this->ProcessEvent ( pFnSetDebugSceneView, &SetDebugSceneView_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetDebugSceneViewMode
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::SetDebugSceneViewMode ( )
{
	static UFunction* pFnSetDebugSceneViewMode = NULL;

	if ( ! pFnSetDebugSceneViewMode )
		pFnSetDebugSceneViewMode = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetDebugSceneViewMode" );

	UKFCheatManager_execSetDebugSceneViewMode_Parms SetDebugSceneViewMode_Parms;

	this->ProcessEvent ( pFnSetDebugSceneViewMode, &SetDebugSceneViewMode_Parms, NULL );
};

// Function KFGame.KFCheatManager.PauseDebugSceneUpdate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PauseDebugSceneUpdate ( )
{
	static UFunction* pFnPauseDebugSceneUpdate = NULL;

	if ( ! pFnPauseDebugSceneUpdate )
		pFnPauseDebugSceneUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PauseDebugSceneUpdate" );

	UKFCheatManager_execPauseDebugSceneUpdate_Parms PauseDebugSceneUpdate_Parms;

	this->ProcessEvent ( pFnPauseDebugSceneUpdate, &PauseDebugSceneUpdate_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleDebugSceneOrbit
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleDebugSceneOrbit ( )
{
	static UFunction* pFnToggleDebugSceneOrbit = NULL;

	if ( ! pFnToggleDebugSceneOrbit )
		pFnToggleDebugSceneOrbit = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleDebugSceneOrbit" );

	UKFCheatManager_execToggleDebugSceneOrbit_Parms ToggleDebugSceneOrbit_Parms;

	this->ProcessEvent ( pFnToggleDebugSceneOrbit, &ToggleDebugSceneOrbit_Parms, NULL );
};

// Function KFGame.KFCheatManager.DestroyDebugScene
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::DestroyDebugScene ( )
{
	static UFunction* pFnDestroyDebugScene = NULL;

	if ( ! pFnDestroyDebugScene )
		pFnDestroyDebugScene = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DestroyDebugScene" );

	UKFCheatManager_execDestroyDebugScene_Parms DestroyDebugScene_Parms;

	this->ProcessEvent ( pFnDestroyDebugScene, &DestroyDebugScene_Parms, NULL );
};

// Function KFGame.KFCheatManager.FocusOff
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FocusOff ( )
{
	static UFunction* pFnFocusOff = NULL;

	if ( ! pFnFocusOff )
		pFnFocusOff = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FocusOff" );

	UKFCheatManager_execFocusOff_Parms FocusOff_Parms;

	this->ProcessEvent ( pFnFocusOff, &FocusOff_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetFocus
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetFocus ( )
{
	static UFunction* pFnAISetFocus = NULL;

	if ( ! pFnAISetFocus )
		pFnAISetFocus = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetFocus" );

	UKFCheatManager_execAISetFocus_Parms AISetFocus_Parms;

	this->ProcessEvent ( pFnAISetFocus, &AISetFocus_Parms, NULL );
};

// Function KFGame.KFCheatManager.AILockDesiredRotation
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AILockDesiredRotation ( )
{
	static UFunction* pFnAILockDesiredRotation = NULL;

	if ( ! pFnAILockDesiredRotation )
		pFnAILockDesiredRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AILockDesiredRotation" );

	UKFCheatManager_execAILockDesiredRotation_Parms AILockDesiredRotation_Parms;

	this->ProcessEvent ( pFnAILockDesiredRotation, &AILockDesiredRotation_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIUnlockDesiredRotation
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIUnlockDesiredRotation ( )
{
	static UFunction* pFnAIUnlockDesiredRotation = NULL;

	if ( ! pFnAIUnlockDesiredRotation )
		pFnAIUnlockDesiredRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIUnlockDesiredRotation" );

	UKFCheatManager_execAIUnlockDesiredRotation_Parms AIUnlockDesiredRotation_Parms;

	this->ProcessEvent ( pFnAIUnlockDesiredRotation, &AIUnlockDesiredRotation_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIClearFocus
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIClearFocus ( )
{
	static UFunction* pFnAIClearFocus = NULL;

	if ( ! pFnAIClearFocus )
		pFnAIClearFocus = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIClearFocus" );

	UKFCheatManager_execAIClearFocus_Parms AIClearFocus_Parms;

	this->ProcessEvent ( pFnAIClearFocus, &AIClearFocus_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetFocalPoint
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetFocalPoint ( )
{
	static UFunction* pFnAISetFocalPoint = NULL;

	if ( ! pFnAISetFocalPoint )
		pFnAISetFocalPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetFocalPoint" );

	UKFCheatManager_execAISetFocalPoint_Parms AISetFocalPoint_Parms;

	this->ProcessEvent ( pFnAISetFocalPoint, &AISetFocalPoint_Parms, NULL );
};

// Function KFGame.KFCheatManager.ResetDoors
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ResetDoors ( )
{
	static UFunction* pFnResetDoors = NULL;

	if ( ! pFnResetDoors )
		pFnResetDoors = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ResetDoors" );

	UKFCheatManager_execResetDoors_Parms ResetDoors_Parms;

	this->ProcessEvent ( pFnResetDoors, &ResetDoors_Parms, NULL );
};

// Function KFGame.KFCheatManager.ResetLevel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ResetLevel ( )
{
	static UFunction* pFnResetLevel = NULL;

	if ( ! pFnResetLevel )
		pFnResetLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ResetLevel" );

	UKFCheatManager_execResetLevel_Parms ResetLevel_Parms;

	this->ProcessEvent ( pFnResetLevel, &ResetLevel_Parms, NULL );
};

// Function KFGame.KFCheatManager.DestroyDoors
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DestroyDoors ( )
{
	static UFunction* pFnDestroyDoors = NULL;

	if ( ! pFnDestroyDoors )
		pFnDestroyDoors = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DestroyDoors" );

	UKFCheatManager_execDestroyDoors_Parms DestroyDoors_Parms;

	this->ProcessEvent ( pFnDestroyDoors, &DestroyDoors_Parms, NULL );
};

// Function KFGame.KFCheatManager.WeldDoors
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::WeldDoors ( )
{
	static UFunction* pFnWeldDoors = NULL;

	if ( ! pFnWeldDoors )
		pFnWeldDoors = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.WeldDoors" );

	UKFCheatManager_execWeldDoors_Parms WeldDoors_Parms;

	this->ProcessEvent ( pFnWeldDoors, &WeldDoors_Parms, NULL );
};

// Function KFGame.KFCheatManager.InitDebugScene
// [0x00024002] 
// Parameters infos:

void UKFCheatManager::InitDebugScene ( )
{
	static UFunction* pFnInitDebugScene = NULL;

	if ( ! pFnInitDebugScene )
		pFnInitDebugScene = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.InitDebugScene" );

	UKFCheatManager_execInitDebugScene_Parms InitDebugScene_Parms;

	this->ProcessEvent ( pFnInitDebugScene, &InitDebugScene_Parms, NULL );
};

// Function KFGame.KFCheatManager.FocusOn
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FocusOn ( )
{
	static UFunction* pFnFocusOn = NULL;

	if ( ! pFnFocusOn )
		pFnFocusOn = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FocusOn" );

	UKFCheatManager_execFocusOn_Parms FocusOn_Parms;

	this->ProcessEvent ( pFnFocusOn, &FocusOn_Parms, NULL );
};

// Function KFGame.KFCheatManager.FocusOnZed
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FocusOnZed ( )
{
	static UFunction* pFnFocusOnZed = NULL;

	if ( ! pFnFocusOnZed )
		pFnFocusOnZed = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FocusOnZed" );

	UKFCheatManager_execFocusOnZed_Parms FocusOnZed_Parms;

	this->ProcessEvent ( pFnFocusOnZed, &FocusOnZed_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnBloatTest
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnBloatTest ( )
{
	static UFunction* pFnSpawnBloatTest = NULL;

	if ( ! pFnSpawnBloatTest )
		pFnSpawnBloatTest = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnBloatTest" );

	UKFCheatManager_execSpawnBloatTest_Parms SpawnBloatTest_Parms;

	this->ProcessEvent ( pFnSpawnBloatTest, &SpawnBloatTest_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnTest
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnTest ( )
{
	static UFunction* pFnSpawnTest = NULL;

	if ( ! pFnSpawnTest )
		pFnSpawnTest = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnTest" );

	UKFCheatManager_execSpawnTest_Parms SpawnTest_Parms;

	this->ProcessEvent ( pFnSpawnTest, &SpawnTest_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetSpawnVolumeMinDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetSpawnVolumeMinDebug ( )
{
	static UFunction* pFnSetSpawnVolumeMinDebug = NULL;

	if ( ! pFnSetSpawnVolumeMinDebug )
		pFnSetSpawnVolumeMinDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetSpawnVolumeMinDebug" );

	UKFCheatManager_execSetSpawnVolumeMinDebug_Parms SetSpawnVolumeMinDebug_Parms;

	this->ProcessEvent ( pFnSetSpawnVolumeMinDebug, &SetSpawnVolumeMinDebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetSpawnVolumeDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetSpawnVolumeDebug ( )
{
	static UFunction* pFnSetSpawnVolumeDebug = NULL;

	if ( ! pFnSetSpawnVolumeDebug )
		pFnSetSpawnVolumeDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetSpawnVolumeDebug" );

	UKFCheatManager_execSetSpawnVolumeDebug_Parms SetSpawnVolumeDebug_Parms;

	this->ProcessEvent ( pFnSetSpawnVolumeDebug, &SetSpawnVolumeDebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestSpawnVolume
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestSpawnVolume ( )
{
	static UFunction* pFnTestSpawnVolume = NULL;

	if ( ! pFnTestSpawnVolume )
		pFnTestSpawnVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestSpawnVolume" );

	UKFCheatManager_execTestSpawnVolume_Parms TestSpawnVolume_Parms;

	this->ProcessEvent ( pFnTestSpawnVolume, &TestSpawnVolume_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestPortalActive
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestPortalActive ( )
{
	static UFunction* pFnTestPortalActive = NULL;

	if ( ! pFnTestPortalActive )
		pFnTestPortalActive = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestPortalActive" );

	UKFCheatManager_execTestPortalActive_Parms TestPortalActive_Parms;

	this->ProcessEvent ( pFnTestPortalActive, &TestPortalActive_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestPortalAll
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestPortalAll ( )
{
	static UFunction* pFnTestPortalAll = NULL;

	if ( ! pFnTestPortalAll )
		pFnTestPortalAll = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestPortalAll" );

	UKFCheatManager_execTestPortalAll_Parms TestPortalAll_Parms;

	this->ProcessEvent ( pFnTestPortalAll, &TestPortalAll_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestPortalNearby
// [0x00824202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestPortalNearby ( )
{
	static UFunction* pFnTestPortalNearby = NULL;

	if ( ! pFnTestPortalNearby )
		pFnTestPortalNearby = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestPortalNearby" );

	UKFCheatManager_execTestPortalNearby_Parms TestPortalNearby_Parms;

	this->ProcessEvent ( pFnTestPortalNearby, &TestPortalNearby_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetRandomClotType
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::GetRandomClotType ( )
{
	static UFunction* pFnGetRandomClotType = NULL;

	if ( ! pFnGetRandomClotType )
		pFnGetRandomClotType = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetRandomClotType" );

	UKFCheatManager_execGetRandomClotType_Parms GetRandomClotType_Parms;

	this->ProcessEvent ( pFnGetRandomClotType, &GetRandomClotType_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnZedLODs
// [0x00820302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnZedLODs ( )
{
	static UFunction* pFnSpawnZedLODs = NULL;

	if ( ! pFnSpawnZedLODs )
		pFnSpawnZedLODs = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnZedLODs" );

	UKFCheatManager_execSpawnZedLODs_Parms SpawnZedLODs_Parms;

	this->ProcessEvent ( pFnSpawnZedLODs, &SpawnZedLODs_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnZedGroup
// [0x00824302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnZedGroup ( )
{
	static UFunction* pFnSpawnZedGroup = NULL;

	if ( ! pFnSpawnZedGroup )
		pFnSpawnZedGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnZedGroup" );

	UKFCheatManager_execSpawnZedGroup_Parms SpawnZedGroup_Parms;

	this->ProcessEvent ( pFnSpawnZedGroup, &SpawnZedGroup_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnZedAIGroup
// [0x00824302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnZedAIGroup ( )
{
	static UFunction* pFnSpawnZedAIGroup = NULL;

	if ( ! pFnSpawnZedAIGroup )
		pFnSpawnZedAIGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnZedAIGroup" );

	UKFCheatManager_execSpawnZedAIGroup_Parms SpawnZedAIGroup_Parms;

	this->ProcessEvent ( pFnSpawnZedAIGroup, &SpawnZedAIGroup_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnZed
// [0x00824302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnZed ( )
{
	static UFunction* pFnSpawnZed = NULL;

	if ( ! pFnSpawnZed )
		pFnSpawnZed = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnZed" );

	UKFCheatManager_execSpawnZed_Parms SpawnZed_Parms;

	this->ProcessEvent ( pFnSpawnZed, &SpawnZed_Parms, NULL );
};

// Function KFGame.KFCheatManager.KillBots
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::KillBots ( )
{
	static UFunction* pFnKillBots = NULL;

	if ( ! pFnKillBots )
		pFnKillBots = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.KillBots" );

	UKFCheatManager_execKillBots_Parms KillBots_Parms;

	this->ProcessEvent ( pFnKillBots, &KillBots_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnHumanPawn
// [0x00824202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnHumanPawn ( )
{
	static UFunction* pFnSpawnHumanPawn = NULL;

	if ( ! pFnSpawnHumanPawn )
		pFnSpawnHumanPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnHumanPawn" );

	UKFCheatManager_execSpawnHumanPawn_Parms SpawnHumanPawn_Parms;

	this->ProcessEvent ( pFnSpawnHumanPawn, &SpawnHumanPawn_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetAITypeByName
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFCheatManager::GetAITypeByName ( )
{
	static UFunction* pFnGetAITypeByName = NULL;

	if ( ! pFnGetAITypeByName )
		pFnGetAITypeByName = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetAITypeByName" );

	UKFCheatManager_execGetAITypeByName_Parms GetAITypeByName_Parms;

	pFnGetAITypeByName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAITypeByName, &GetAITypeByName_Parms, NULL );

	pFnGetAITypeByName->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.LoadMonsterByName
// [0x00024002] 
// Parameters infos:

void UKFCheatManager::LoadMonsterByName ( )
{
	static UFunction* pFnLoadMonsterByName = NULL;

	if ( ! pFnLoadMonsterByName )
		pFnLoadMonsterByName = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LoadMonsterByName" );

	UKFCheatManager_execLoadMonsterByName_Parms LoadMonsterByName_Parms;

	this->ProcessEvent ( pFnLoadMonsterByName, &LoadMonsterByName_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetBossNum
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetBossNum ( )
{
	static UFunction* pFnSetBossNum = NULL;

	if ( ! pFnSetBossNum )
		pFnSetBossNum = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetBossNum" );

	UKFCheatManager_execSetBossNum_Parms SetBossNum_Parms;

	this->ProcessEvent ( pFnSetBossNum, &SetBossNum_Parms, NULL );
};

// Function KFGame.KFCheatManager.GoHumanV
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GoHumanV ( )
{
	static UFunction* pFnGoHumanV = NULL;

	if ( ! pFnGoHumanV )
		pFnGoHumanV = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GoHumanV" );

	UKFCheatManager_execGoHumanV_Parms GoHumanV_Parms;

	this->ProcessEvent ( pFnGoHumanV, &GoHumanV_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnZedV
// [0x00824202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnZedV ( )
{
	static UFunction* pFnSpawnZedV = NULL;

	if ( ! pFnSpawnZedV )
		pFnSpawnZedV = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnZedV" );

	UKFCheatManager_execSpawnZedV_Parms SpawnZedV_Parms;

	this->ProcessEvent ( pFnSpawnZedV, &SpawnZedV_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnZedVC
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnZedVC ( )
{
	static UFunction* pFnSpawnZedVC = NULL;

	if ( ! pFnSpawnZedVC )
		pFnSpawnZedVC = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnZedVC" );

	UKFCheatManager_execSpawnZedVC_Parms SpawnZedVC_Parms;

	this->ProcessEvent ( pFnSpawnZedVC, &SpawnZedVC_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnAIZed
// [0x00024102] 
// Parameters infos:

void UKFCheatManager::SpawnAIZed ( )
{
	static UFunction* pFnSpawnAIZed = NULL;

	if ( ! pFnSpawnAIZed )
		pFnSpawnAIZed = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnAIZed" );

	UKFCheatManager_execSpawnAIZed_Parms SpawnAIZed_Parms;

	this->ProcessEvent ( pFnSpawnAIZed, &SpawnAIZed_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIShowAttackAnims
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIShowAttackAnims ( )
{
	static UFunction* pFnAIShowAttackAnims = NULL;

	if ( ! pFnAIShowAttackAnims )
		pFnAIShowAttackAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIShowAttackAnims" );

	UKFCheatManager_execAIShowAttackAnims_Parms AIShowAttackAnims_Parms;

	this->ProcessEvent ( pFnAIShowAttackAnims, &AIShowAttackAnims_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnDebugAI
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnDebugAI ( )
{
	static UFunction* pFnSpawnDebugAI = NULL;

	if ( ! pFnSpawnDebugAI )
		pFnSpawnDebugAI = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnDebugAI" );

	UKFCheatManager_execSpawnDebugAI_Parms SpawnDebugAI_Parms;

	this->ProcessEvent ( pFnSpawnDebugAI, &SpawnDebugAI_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnAIV
// [0x00824202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnAIV ( )
{
	static UFunction* pFnSpawnAIV = NULL;

	if ( ! pFnSpawnAIV )
		pFnSpawnAIV = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnAIV" );

	UKFCheatManager_execSpawnAIV_Parms SpawnAIV_Parms;

	this->ProcessEvent ( pFnSpawnAIV, &SpawnAIV_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnAI
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnAI ( )
{
	static UFunction* pFnSpawnAI = NULL;

	if ( ! pFnSpawnAI )
		pFnSpawnAI = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnAI" );

	UKFCheatManager_execSpawnAI_Parms SpawnAI_Parms;

	this->ProcessEvent ( pFnSpawnAI, &SpawnAI_Parms, NULL );
};

// Function KFGame.KFCheatManager.BurnValTest
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::BurnValTest ( )
{
	static UFunction* pFnBurnValTest = NULL;

	if ( ! pFnBurnValTest )
		pFnBurnValTest = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.BurnValTest" );

	UKFCheatManager_execBurnValTest_Parms BurnValTest_Parms;

	this->ProcessEvent ( pFnBurnValTest, &BurnValTest_Parms, NULL );
};

// Function KFGame.KFCheatManager.EMPValTest
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::EMPValTest ( )
{
	static UFunction* pFnEMPValTest = NULL;

	if ( ! pFnEMPValTest )
		pFnEMPValTest = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.EMPValTest" );

	UKFCheatManager_execEMPValTest_Parms EMPValTest_Parms;

	this->ProcessEvent ( pFnEMPValTest, &EMPValTest_Parms, NULL );
};

// Function KFGame.KFCheatManager.EMPWander
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::EMPWander ( )
{
	static UFunction* pFnEMPWander = NULL;

	if ( ! pFnEMPWander )
		pFnEMPWander = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.EMPWander" );

	UKFCheatManager_execEMPWander_Parms EMPWander_Parms;

	this->ProcessEvent ( pFnEMPWander, &EMPWander_Parms, NULL );
};

// Function KFGame.KFCheatManager.PlayStunned
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PlayStunned ( )
{
	static UFunction* pFnPlayStunned = NULL;

	if ( ! pFnPlayStunned )
		pFnPlayStunned = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PlayStunned" );

	UKFCheatManager_execPlayStunned_Parms PlayStunned_Parms;

	this->ProcessEvent ( pFnPlayStunned, &PlayStunned_Parms, NULL );
};

// Function KFGame.KFCheatManager.PlayKnockdown
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PlayKnockdown ( )
{
	static UFunction* pFnPlayKnockdown = NULL;

	if ( ! pFnPlayKnockdown )
		pFnPlayKnockdown = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PlayKnockdown" );

	UKFCheatManager_execPlayKnockdown_Parms PlayKnockdown_Parms;

	this->ProcessEvent ( pFnPlayKnockdown, &PlayKnockdown_Parms, NULL );
};

// Function KFGame.KFCheatManager.PlayTaunt
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PlayTaunt ( )
{
	static UFunction* pFnPlayTaunt = NULL;

	if ( ! pFnPlayTaunt )
		pFnPlayTaunt = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PlayTaunt" );

	UKFCheatManager_execPlayTaunt_Parms PlayTaunt_Parms;

	this->ProcessEvent ( pFnPlayTaunt, &PlayTaunt_Parms, NULL );
};

// Function KFGame.KFCheatManager.PlayRandomStumble
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PlayRandomStumble ( )
{
	static UFunction* pFnPlayRandomStumble = NULL;

	if ( ! pFnPlayRandomStumble )
		pFnPlayRandomStumble = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PlayRandomStumble" );

	UKFCheatManager_execPlayRandomStumble_Parms PlayRandomStumble_Parms;

	this->ProcessEvent ( pFnPlayRandomStumble, &PlayRandomStumble_Parms, NULL );
};

// Function KFGame.KFCheatManager.EnableLivingGore
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::EnableLivingGore ( )
{
	static UFunction* pFnEnableLivingGore = NULL;

	if ( ! pFnEnableLivingGore )
		pFnEnableLivingGore = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.EnableLivingGore" );

	UKFCheatManager_execEnableLivingGore_Parms EnableLivingGore_Parms;

	this->ProcessEvent ( pFnEnableLivingGore, &EnableLivingGore_Parms, NULL );
};

// Function KFGame.KFCheatManager.CrippleZed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::CrippleZed ( )
{
	static UFunction* pFnCrippleZed = NULL;

	if ( ! pFnCrippleZed )
		pFnCrippleZed = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.CrippleZed" );

	UKFCheatManager_execCrippleZed_Parms CrippleZed_Parms;

	this->ProcessEvent ( pFnCrippleZed, &CrippleZed_Parms, NULL );
};

// Function KFGame.KFCheatManager.CrippleZeds
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::CrippleZeds ( )
{
	static UFunction* pFnCrippleZeds = NULL;

	if ( ! pFnCrippleZeds )
		pFnCrippleZeds = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.CrippleZeds" );

	UKFCheatManager_execCrippleZeds_Parms CrippleZeds_Parms;

	this->ProcessEvent ( pFnCrippleZeds, &CrippleZeds_Parms, NULL );
};

// Function KFGame.KFCheatManager.InjureZedArm
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::InjureZedArm ( )
{
	static UFunction* pFnInjureZedArm = NULL;

	if ( ! pFnInjureZedArm )
		pFnInjureZedArm = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.InjureZedArm" );

	UKFCheatManager_execInjureZedArm_Parms InjureZedArm_Parms;

	this->ProcessEvent ( pFnInjureZedArm, &InjureZedArm_Parms, NULL );
};

// Function KFGame.KFCheatManager.AILookAtMe
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AILookAtMe ( )
{
	static UFunction* pFnAILookAtMe = NULL;

	if ( ! pFnAILookAtMe )
		pFnAILookAtMe = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AILookAtMe" );

	UKFCheatManager_execAILookAtMe_Parms AILookAtMe_Parms;

	this->ProcessEvent ( pFnAILookAtMe, &AILookAtMe_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetInUseCost
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetInUseCost ( )
{
	static UFunction* pFnAISetInUseCost = NULL;

	if ( ! pFnAISetInUseCost )
		pFnAISetInUseCost = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetInUseCost" );

	UKFCheatManager_execAISetInUseCost_Parms AISetInUseCost_Parms;

	this->ProcessEvent ( pFnAISetInUseCost, &AISetInUseCost_Parms, NULL );
};

// Function KFGame.KFCheatManager.BigZedMode
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::BigZedMode ( )
{
	static UFunction* pFnBigZedMode = NULL;

	if ( ! pFnBigZedMode )
		pFnBigZedMode = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.BigZedMode" );

	UKFCheatManager_execBigZedMode_Parms BigZedMode_Parms;

	this->ProcessEvent ( pFnBigZedMode, &BigZedMode_Parms, NULL );
};

// Function KFGame.KFCheatManager.BigHeadMode
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::BigHeadMode ( )
{
	static UFunction* pFnBigHeadMode = NULL;

	if ( ! pFnBigHeadMode )
		pFnBigHeadMode = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.BigHeadMode" );

	UKFCheatManager_execBigHeadMode_Parms BigHeadMode_Parms;

	this->ProcessEvent ( pFnBigHeadMode, &BigHeadMode_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestSpecDist
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestSpecDist ( )
{
	static UFunction* pFnTestSpecDist = NULL;

	if ( ! pFnTestSpecDist )
		pFnTestSpecDist = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestSpecDist" );

	UKFCheatManager_execTestSpecDist_Parms TestSpecDist_Parms;

	this->ProcessEvent ( pFnTestSpecDist, &TestSpecDist_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpAICommands
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpAICommands ( )
{
	static UFunction* pFnDumpAICommands = NULL;

	if ( ! pFnDumpAICommands )
		pFnDumpAICommands = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpAICommands" );

	UKFCheatManager_execDumpAICommands_Parms DumpAICommands_Parms;

	this->ProcessEvent ( pFnDumpAICommands, &DumpAICommands_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugLOS
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugLOS ( )
{
	static UFunction* pFnAIDebugLOS = NULL;

	if ( ! pFnAIDebugLOS )
		pFnAIDebugLOS = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugLOS" );

	UKFCheatManager_execAIDebugLOS_Parms AIDebugLOS_Parms;

	this->ProcessEvent ( pFnAIDebugLOS, &AIDebugLOS_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowCrawlerPath
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowCrawlerPath ( )
{
	static UFunction* pFnShowCrawlerPath = NULL;

	if ( ! pFnShowCrawlerPath )
		pFnShowCrawlerPath = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowCrawlerPath" );

	UKFCheatManager_execShowCrawlerPath_Parms ShowCrawlerPath_Parms;

	this->ProcessEvent ( pFnShowCrawlerPath, &ShowCrawlerPath_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIRage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIRage ( )
{
	static UFunction* pFnAIRage = NULL;

	if ( ! pFnAIRage )
		pFnAIRage = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIRage" );

	UKFCheatManager_execAIRage_Parms AIRage_Parms;

	this->ProcessEvent ( pFnAIRage, &AIRage_Parms, NULL );
};

// Function KFGame.KFCheatManager.KillZeds
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::KillZeds ( )
{
	static UFunction* pFnKillZeds = NULL;

	if ( ! pFnKillZeds )
		pFnKillZeds = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.KillZeds" );

	UKFCheatManager_execKillZeds_Parms KillZeds_Parms;

	this->ProcessEvent ( pFnKillZeds, &KillZeds_Parms, NULL );
};

// Function KFGame.KFCheatManager.KillOtherZeds
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::KillOtherZeds ( )
{
	static UFunction* pFnKillOtherZeds = NULL;

	if ( ! pFnKillOtherZeds )
		pFnKillOtherZeds = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.KillOtherZeds" );

	UKFCheatManager_execKillOtherZeds_Parms KillOtherZeds_Parms;

	this->ProcessEvent ( pFnKillOtherZeds, &KillOtherZeds_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpReachSpecs
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpReachSpecs ( )
{
	static UFunction* pFnDumpReachSpecs = NULL;

	if ( ! pFnDumpReachSpecs )
		pFnDumpReachSpecs = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpReachSpecs" );

	UKFCheatManager_execDumpReachSpecs_Parms DumpReachSpecs_Parms;

	this->ProcessEvent ( pFnDumpReachSpecs, &DumpReachSpecs_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugEnemy
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugEnemy ( )
{
	static UFunction* pFnAIDebugEnemy = NULL;

	if ( ! pFnAIDebugEnemy )
		pFnAIDebugEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugEnemy" );

	UKFCheatManager_execAIDebugEnemy_Parms AIDebugEnemy_Parms;

	this->ProcessEvent ( pFnAIDebugEnemy, &AIDebugEnemy_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetDebugColorA
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetDebugColorA ( )
{
	static UFunction* pFnAISetDebugColorA = NULL;

	if ( ! pFnAISetDebugColorA )
		pFnAISetDebugColorA = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetDebugColorA" );

	UKFCheatManager_execAISetDebugColorA_Parms AISetDebugColorA_Parms;

	this->ProcessEvent ( pFnAISetDebugColorA, &AISetDebugColorA_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetDebugColorB
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetDebugColorB ( )
{
	static UFunction* pFnAISetDebugColorB = NULL;

	if ( ! pFnAISetDebugColorB )
		pFnAISetDebugColorB = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetDebugColorB" );

	UKFCheatManager_execAISetDebugColorB_Parms AISetDebugColorB_Parms;

	this->ProcessEvent ( pFnAISetDebugColorB, &AISetDebugColorB_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetDebugColorG
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetDebugColorG ( )
{
	static UFunction* pFnAISetDebugColorG = NULL;

	if ( ! pFnAISetDebugColorG )
		pFnAISetDebugColorG = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetDebugColorG" );

	UKFCheatManager_execAISetDebugColorG_Parms AISetDebugColorG_Parms;

	this->ProcessEvent ( pFnAISetDebugColorG, &AISetDebugColorG_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetDebugColorR
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetDebugColorR ( )
{
	static UFunction* pFnAISetDebugColorR = NULL;

	if ( ! pFnAISetDebugColorR )
		pFnAISetDebugColorR = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetDebugColorR" );

	UKFCheatManager_execAISetDebugColorR_Parms AISetDebugColorR_Parms;

	this->ProcessEvent ( pFnAISetDebugColorR, &AISetDebugColorR_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetDebugColor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetDebugColor ( )
{
	static UFunction* pFnAISetDebugColor = NULL;

	if ( ! pFnAISetDebugColor )
		pFnAISetDebugColor = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetDebugColor" );

	UKFCheatManager_execAISetDebugColor_Parms AISetDebugColor_Parms;

	this->ProcessEvent ( pFnAISetDebugColor, &AISetDebugColor_Parms, NULL );
};

// Function KFGame.KFCheatManager.AITestHansGrab
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AITestHansGrab ( )
{
	static UFunction* pFnAITestHansGrab = NULL;

	if ( ! pFnAITestHansGrab )
		pFnAITestHansGrab = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AITestHansGrab" );

	UKFCheatManager_execAITestHansGrab_Parms AITestHansGrab_Parms;

	this->ProcessEvent ( pFnAITestHansGrab, &AITestHansGrab_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIHansGrenade
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIHansGrenade ( )
{
	static UFunction* pFnAIHansGrenade = NULL;

	if ( ! pFnAIHansGrenade )
		pFnAIHansGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIHansGrenade" );

	UKFCheatManager_execAIHansGrenade_Parms AIHansGrenade_Parms;

	this->ProcessEvent ( pFnAIHansGrenade, &AIHansGrenade_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIHansTestGrenadeTrajectory
// [0x00824202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIHansTestGrenadeTrajectory ( )
{
	static UFunction* pFnAIHansTestGrenadeTrajectory = NULL;

	if ( ! pFnAIHansTestGrenadeTrajectory )
		pFnAIHansTestGrenadeTrajectory = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIHansTestGrenadeTrajectory" );

	UKFCheatManager_execAIHansTestGrenadeTrajectory_Parms AIHansTestGrenadeTrajectory_Parms;

	this->ProcessEvent ( pFnAIHansTestGrenadeTrajectory, &AIHansTestGrenadeTrajectory_Parms, NULL );
};

// Function KFGame.KFCheatManager.AITestGrab
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AITestGrab ( )
{
	static UFunction* pFnAITestGrab = NULL;

	if ( ! pFnAITestGrab )
		pFnAITestGrab = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AITestGrab" );

	UKFCheatManager_execAITestGrab_Parms AITestGrab_Parms;

	this->ProcessEvent ( pFnAITestGrab, &AITestGrab_Parms, NULL );
};

// Function KFGame.KFCheatManager.AITestCrawlerAttack
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AITestCrawlerAttack ( )
{
	static UFunction* pFnAITestCrawlerAttack = NULL;

	if ( ! pFnAITestCrawlerAttack )
		pFnAITestCrawlerAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AITestCrawlerAttack" );

	UKFCheatManager_execAITestCrawlerAttack_Parms AITestCrawlerAttack_Parms;

	this->ProcessEvent ( pFnAITestCrawlerAttack, &AITestCrawlerAttack_Parms, NULL );
};

// Function KFGame.KFCheatManager.AITestCrawlers
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AITestCrawlers ( )
{
	static UFunction* pFnAITestCrawlers = NULL;

	if ( ! pFnAITestCrawlers )
		pFnAITestCrawlers = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AITestCrawlers" );

	UKFCheatManager_execAITestCrawlers_Parms AITestCrawlers_Parms;

	this->ProcessEvent ( pFnAITestCrawlers, &AITestCrawlers_Parms, NULL );
};

// Function KFGame.KFCheatManager.AITestCrawler
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AITestCrawler ( )
{
	static UFunction* pFnAITestCrawler = NULL;

	if ( ! pFnAITestCrawler )
		pFnAITestCrawler = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AITestCrawler" );

	UKFCheatManager_execAITestCrawler_Parms AITestCrawler_Parms;

	this->ProcessEvent ( pFnAITestCrawler, &AITestCrawler_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugCrawler
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugCrawler ( )
{
	static UFunction* pFnAIDebugCrawler = NULL;

	if ( ! pFnAIDebugCrawler )
		pFnAIDebugCrawler = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugCrawler" );

	UKFCheatManager_execAIDebugCrawler_Parms AIDebugCrawler_Parms;

	this->ProcessEvent ( pFnAIDebugCrawler, &AIDebugCrawler_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIPathTo
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIPathTo ( )
{
	static UFunction* pFnAIPathTo = NULL;

	if ( ! pFnAIPathTo )
		pFnAIPathTo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIPathTo" );

	UKFCheatManager_execAIPathTo_Parms AIPathTo_Parms;

	this->ProcessEvent ( pFnAIPathTo, &AIPathTo_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDisableMeleeEvents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDisableMeleeEvents ( )
{
	static UFunction* pFnAIDisableMeleeEvents = NULL;

	if ( ! pFnAIDisableMeleeEvents )
		pFnAIDisableMeleeEvents = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDisableMeleeEvents" );

	UKFCheatManager_execAIDisableMeleeEvents_Parms AIDisableMeleeEvents_Parms;

	this->ProcessEvent ( pFnAIDisableMeleeEvents, &AIDisableMeleeEvents_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIEnableMeleeEvents
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIEnableMeleeEvents ( )
{
	static UFunction* pFnAIEnableMeleeEvents = NULL;

	if ( ! pFnAIEnableMeleeEvents )
		pFnAIEnableMeleeEvents = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIEnableMeleeEvents" );

	UKFCheatManager_execAIEnableMeleeEvents_Parms AIEnableMeleeEvents_Parms;

	this->ProcessEvent ( pFnAIEnableMeleeEvents, &AIEnableMeleeEvents_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIMoveToMeAsEnemy
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIMoveToMeAsEnemy ( )
{
	static UFunction* pFnAIMoveToMeAsEnemy = NULL;

	if ( ! pFnAIMoveToMeAsEnemy )
		pFnAIMoveToMeAsEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIMoveToMeAsEnemy" );

	UKFCheatManager_execAIMoveToMeAsEnemy_Parms AIMoveToMeAsEnemy_Parms;

	this->ProcessEvent ( pFnAIMoveToMeAsEnemy, &AIMoveToMeAsEnemy_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowPathnodes
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowPathnodes ( )
{
	static UFunction* pFnShowPathnodes = NULL;

	if ( ! pFnShowPathnodes )
		pFnShowPathnodes = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowPathnodes" );

	UKFCheatManager_execShowPathnodes_Parms ShowPathnodes_Parms;

	this->ProcessEvent ( pFnShowPathnodes, &ShowPathnodes_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowBlockedPathnodes
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowBlockedPathnodes ( )
{
	static UFunction* pFnShowBlockedPathnodes = NULL;

	if ( ! pFnShowBlockedPathnodes )
		pFnShowBlockedPathnodes = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowBlockedPathnodes" );

	UKFCheatManager_execShowBlockedPathnodes_Parms ShowBlockedPathnodes_Parms;

	this->ProcessEvent ( pFnShowBlockedPathnodes, &ShowBlockedPathnodes_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISummonZeds
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISummonZeds ( )
{
	static UFunction* pFnAISummonZeds = NULL;

	if ( ! pFnAISummonZeds )
		pFnAISummonZeds = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISummonZeds" );

	UKFCheatManager_execAISummonZeds_Parms AISummonZeds_Parms;

	this->ProcessEvent ( pFnAISummonZeds, &AISummonZeds_Parms, NULL );
};

// Function KFGame.KFCheatManager.HansGas
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HansGas ( )
{
	static UFunction* pFnHansGas = NULL;

	if ( ! pFnHansGas )
		pFnHansGas = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HansGas" );

	UKFCheatManager_execHansGas_Parms HansGas_Parms;

	this->ProcessEvent ( pFnHansGas, &HansGas_Parms, NULL );
};

// Function KFGame.KFCheatManager.HansNextPhase
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HansNextPhase ( )
{
	static UFunction* pFnHansNextPhase = NULL;

	if ( ! pFnHansNextPhase )
		pFnHansNextPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HansNextPhase" );

	UKFCheatManager_execHansNextPhase_Parms HansNextPhase_Parms;

	this->ProcessEvent ( pFnHansNextPhase, &HansNextPhase_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugNextPhase
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugNextPhase ( )
{
	static UFunction* pFnDebugNextPhase = NULL;

	if ( ! pFnDebugNextPhase )
		pFnDebugNextPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugNextPhase" );

	UKFCheatManager_execDebugNextPhase_Parms DebugNextPhase_Parms;

	this->ProcessEvent ( pFnDebugNextPhase, &DebugNextPhase_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIPlayTaunt
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIPlayTaunt ( )
{
	static UFunction* pFnAIPlayTaunt = NULL;

	if ( ! pFnAIPlayTaunt )
		pFnAIPlayTaunt = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIPlayTaunt" );

	UKFCheatManager_execAIPlayTaunt_Parms AIPlayTaunt_Parms;

	this->ProcessEvent ( pFnAIPlayTaunt, &AIPlayTaunt_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIShowLitNodes
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIShowLitNodes ( )
{
	static UFunction* pFnAIShowLitNodes = NULL;

	if ( ! pFnAIShowLitNodes )
		pFnAIShowLitNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIShowLitNodes" );

	UKFCheatManager_execAIShowLitNodes_Parms AIShowLitNodes_Parms;

	this->ProcessEvent ( pFnAIShowLitNodes, &AIShowLitNodes_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIShowForcedSpecs
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIShowForcedSpecs ( )
{
	static UFunction* pFnAIShowForcedSpecs = NULL;

	if ( ! pFnAIShowForcedSpecs )
		pFnAIShowForcedSpecs = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIShowForcedSpecs" );

	UKFCheatManager_execAIShowForcedSpecs_Parms AIShowForcedSpecs_Parms;

	this->ProcessEvent ( pFnAIShowForcedSpecs, &AIShowForcedSpecs_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIShowFloorToWallNodes
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIShowFloorToWallNodes ( )
{
	static UFunction* pFnAIShowFloorToWallNodes = NULL;

	if ( ! pFnAIShowFloorToWallNodes )
		pFnAIShowFloorToWallNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIShowFloorToWallNodes" );

	UKFCheatManager_execAIShowFloorToWallNodes_Parms AIShowFloorToWallNodes_Parms;

	this->ProcessEvent ( pFnAIShowFloorToWallNodes, &AIShowFloorToWallNodes_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIShowDropDowns
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIShowDropDowns ( )
{
	static UFunction* pFnAIShowDropDowns = NULL;

	if ( ! pFnAIShowDropDowns )
		pFnAIShowDropDowns = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIShowDropDowns" );

	UKFCheatManager_execAIShowDropDowns_Parms AIShowDropDowns_Parms;

	this->ProcessEvent ( pFnAIShowDropDowns, &AIShowDropDowns_Parms, NULL );
};

// Function KFGame.KFCheatManager.ClearDebugLines
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ClearDebugLines ( )
{
	static UFunction* pFnClearDebugLines = NULL;

	if ( ! pFnClearDebugLines )
		pFnClearDebugLines = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ClearDebugLines" );

	UKFCheatManager_execClearDebugLines_Parms ClearDebugLines_Parms;

	this->ProcessEvent ( pFnClearDebugLines, &ClearDebugLines_Parms, NULL );
};

// Function KFGame.KFCheatManager.KFDL
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::KFDL ( )
{
	static UFunction* pFnKFDL = NULL;

	if ( ! pFnKFDL )
		pFnKFDL = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.KFDL" );

	UKFCheatManager_execKFDL_Parms KFDL_Parms;

	this->ProcessEvent ( pFnKFDL, &KFDL_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleKFDebugLines
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleKFDebugLines ( )
{
	static UFunction* pFnToggleKFDebugLines = NULL;

	if ( ! pFnToggleKFDebugLines )
		pFnToggleKFDebugLines = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleKFDebugLines" );

	UKFCheatManager_execToggleKFDebugLines_Parms ToggleKFDebugLines_Parms;

	this->ProcessEvent ( pFnToggleKFDebugLines, &ToggleKFDebugLines_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIToggleTurnInPlace
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIToggleTurnInPlace ( )
{
	static UFunction* pFnAIToggleTurnInPlace = NULL;

	if ( ! pFnAIToggleTurnInPlace )
		pFnAIToggleTurnInPlace = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIToggleTurnInPlace" );

	UKFCheatManager_execAIToggleTurnInPlace_Parms AIToggleTurnInPlace_Parms;

	this->ProcessEvent ( pFnAIToggleTurnInPlace, &AIToggleTurnInPlace_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugTurnInPlace
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugTurnInPlace ( )
{
	static UFunction* pFnAIDebugTurnInPlace = NULL;

	if ( ! pFnAIDebugTurnInPlace )
		pFnAIDebugTurnInPlace = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugTurnInPlace" );

	UKFCheatManager_execAIDebugTurnInPlace_Parms AIDebugTurnInPlace_Parms;

	this->ProcessEvent ( pFnAIDebugTurnInPlace, &AIDebugTurnInPlace_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetDebugAIController
// [0x00024002] 
// Parameters infos:

void UKFCheatManager::GetDebugAIController ( )
{
	static UFunction* pFnGetDebugAIController = NULL;

	if ( ! pFnGetDebugAIController )
		pFnGetDebugAIController = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetDebugAIController" );

	UKFCheatManager_execGetDebugAIController_Parms GetDebugAIController_Parms;

	this->ProcessEvent ( pFnGetDebugAIController, &GetDebugAIController_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestScreamEffect
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestScreamEffect ( )
{
	static UFunction* pFnTestScreamEffect = NULL;

	if ( ! pFnTestScreamEffect )
		pFnTestScreamEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestScreamEffect" );

	UKFCheatManager_execTestScreamEffect_Parms TestScreamEffect_Parms;

	this->ProcessEvent ( pFnTestScreamEffect, &TestScreamEffect_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIToggleHeadTracking
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIToggleHeadTracking ( )
{
	static UFunction* pFnAIToggleHeadTracking = NULL;

	if ( ! pFnAIToggleHeadTracking )
		pFnAIToggleHeadTracking = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIToggleHeadTracking" );

	UKFCheatManager_execAIToggleHeadTracking_Parms AIToggleHeadTracking_Parms;

	this->ProcessEvent ( pFnAIToggleHeadTracking, &AIToggleHeadTracking_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIEnableBump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIEnableBump ( )
{
	static UFunction* pFnAIEnableBump = NULL;

	if ( ! pFnAIEnableBump )
		pFnAIEnableBump = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIEnableBump" );

	UKFCheatManager_execAIEnableBump_Parms AIEnableBump_Parms;

	this->ProcessEvent ( pFnAIEnableBump, &AIEnableBump_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDisableBump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDisableBump ( )
{
	static UFunction* pFnAIDisableBump = NULL;

	if ( ! pFnAIDisableBump )
		pFnAIDisableBump = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDisableBump" );

	UKFCheatManager_execAIDisableBump_Parms AIDisableBump_Parms;

	this->ProcessEvent ( pFnAIDisableBump, &AIDisableBump_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetYawRate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GetYawRate ( )
{
	static UFunction* pFnGetYawRate = NULL;

	if ( ! pFnGetYawRate )
		pFnGetYawRate = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetYawRate" );

	UKFCheatManager_execGetYawRate_Parms GetYawRate_Parms;

	this->ProcessEvent ( pFnGetYawRate, &GetYawRate_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetCanAttack
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetCanAttack ( )
{
	static UFunction* pFnAISetCanAttack = NULL;

	if ( ! pFnAISetCanAttack )
		pFnAISetCanAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetCanAttack" );

	UKFCheatManager_execAISetCanAttack_Parms AISetCanAttack_Parms;

	this->ProcessEvent ( pFnAISetCanAttack, &AISetCanAttack_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetEnemyToMe
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetEnemyToMe ( )
{
	static UFunction* pFnAISetEnemyToMe = NULL;

	if ( ! pFnAISetEnemyToMe )
		pFnAISetEnemyToMe = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetEnemyToMe" );

	UKFCheatManager_execAISetEnemyToMe_Parms AISetEnemyToMe_Parms;

	this->ProcessEvent ( pFnAISetEnemyToMe, &AISetEnemyToMe_Parms, NULL );
};

// Function KFGame.KFCheatManager.MarkLocation
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::MarkLocation ( )
{
	static UFunction* pFnMarkLocation = NULL;

	if ( ! pFnMarkLocation )
		pFnMarkLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.MarkLocation" );

	UKFCheatManager_execMarkLocation_Parms MarkLocation_Parms;

	this->ProcessEvent ( pFnMarkLocation, &MarkLocation_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetDebugAICommand
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::GetDebugAICommand ( )
{
	static UFunction* pFnGetDebugAICommand = NULL;

	if ( ! pFnGetDebugAICommand )
		pFnGetDebugAICommand = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetDebugAICommand" );

	UKFCheatManager_execGetDebugAICommand_Parms GetDebugAICommand_Parms;

	this->ProcessEvent ( pFnGetDebugAICommand, &GetDebugAICommand_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIShowDebug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIShowDebug ( )
{
	static UFunction* pFnAIShowDebug = NULL;

	if ( ! pFnAIShowDebug )
		pFnAIShowDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIShowDebug" );

	UKFCheatManager_execAIShowDebug_Parms AIShowDebug_Parms;

	this->ProcessEvent ( pFnAIShowDebug, &AIShowDebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIShowNames
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIShowNames ( )
{
	static UFunction* pFnAIShowNames = NULL;

	if ( ! pFnAIShowNames )
		pFnAIShowNames = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIShowNames" );

	UKFCheatManager_execAIShowNames_Parms AIShowNames_Parms;

	this->ProcessEvent ( pFnAIShowNames, &AIShowNames_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowAiDebugText
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowAiDebugText ( )
{
	static UFunction* pFnShowAiDebugText = NULL;

	if ( ! pFnShowAiDebugText )
		pFnShowAiDebugText = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowAiDebugText" );

	UKFCheatManager_execShowAiDebugText_Parms ShowAiDebugText_Parms;

	this->ProcessEvent ( pFnShowAiDebugText, &ShowAiDebugText_Parms, NULL );
};

// Function KFGame.KFCheatManager.TAND
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TAND ( )
{
	static UFunction* pFnTAND = NULL;

	if ( ! pFnTAND )
		pFnTAND = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TAND" );

	UKFCheatManager_execTAND_Parms TAND_Parms;

	this->ProcessEvent ( pFnTAND, &TAND_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetNPCDebugCategory
// [0x00024102] 
// Parameters infos:

void UKFCheatManager::SetNPCDebugCategory ( )
{
	static UFunction* pFnSetNPCDebugCategory = NULL;

	if ( ! pFnSetNPCDebugCategory )
		pFnSetNPCDebugCategory = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetNPCDebugCategory" );

	UKFCheatManager_execSetNPCDebugCategory_Parms SetNPCDebugCategory_Parms;

	this->ProcessEvent ( pFnSetNPCDebugCategory, &SetNPCDebugCategory_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetAllNPCDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetAllNPCDebug ( )
{
	static UFunction* pFnSetAllNPCDebug = NULL;

	if ( ! pFnSetAllNPCDebug )
		pFnSetAllNPCDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetAllNPCDebug" );

	UKFCheatManager_execSetAllNPCDebug_Parms SetAllNPCDebug_Parms;

	this->ProcessEvent ( pFnSetAllNPCDebug, &SetAllNPCDebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleAllNPCDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleAllNPCDebug ( )
{
	static UFunction* pFnToggleAllNPCDebug = NULL;

	if ( ! pFnToggleAllNPCDebug )
		pFnToggleAllNPCDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleAllNPCDebug" );

	UKFCheatManager_execToggleAllNPCDebug_Parms ToggleAllNPCDebug_Parms;

	this->ProcessEvent ( pFnToggleAllNPCDebug, &ToggleAllNPCDebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowAIInfo
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowAIInfo ( )
{
	static UFunction* pFnShowAIInfo = NULL;

	if ( ! pFnShowAIInfo )
		pFnShowAIInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowAIInfo" );

	UKFCheatManager_execShowAIInfo_Parms ShowAIInfo_Parms;

	this->ProcessEvent ( pFnShowAIInfo, &ShowAIInfo_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIStepAside
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIStepAside ( )
{
	static UFunction* pFnAIStepAside = NULL;

	if ( ! pFnAIStepAside )
		pFnAIStepAside = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIStepAside" );

	UKFCheatManager_execAIStepAside_Parms AIStepAside_Parms;

	this->ProcessEvent ( pFnAIStepAside, &AIStepAside_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleNPCDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleNPCDebug ( )
{
	static UFunction* pFnToggleNPCDebug = NULL;

	if ( ! pFnToggleNPCDebug )
		pFnToggleNPCDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleNPCDebug" );

	UKFCheatManager_execToggleNPCDebug_Parms ToggleNPCDebug_Parms;

	this->ProcessEvent ( pFnToggleNPCDebug, &ToggleNPCDebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIScream
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIScream ( )
{
	static UFunction* pFnAIScream = NULL;

	if ( ! pFnAIScream )
		pFnAIScream = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIScream" );

	UKFCheatManager_execAIScream_Parms AIScream_Parms;

	this->ProcessEvent ( pFnAIScream, &AIScream_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIFPEnrage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIFPEnrage ( )
{
	static UFunction* pFnAIFPEnrage = NULL;

	if ( ! pFnAIFPEnrage )
		pFnAIFPEnrage = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIFPEnrage" );

	UKFCheatManager_execAIFPEnrage_Parms AIFPEnrage_Parms;

	this->ProcessEvent ( pFnAIFPEnrage, &AIFPEnrage_Parms, NULL );
};

// Function KFGame.KFCheatManager.FlushAILogs
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FlushAILogs ( )
{
	static UFunction* pFnFlushAILogs = NULL;

	if ( ! pFnFlushAILogs )
		pFnFlushAILogs = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FlushAILogs" );

	UKFCheatManager_execFlushAILogs_Parms FlushAILogs_Parms;

	this->ProcessEvent ( pFnFlushAILogs, &FlushAILogs_Parms, NULL );
};

// Function KFGame.KFCheatManager.RemoveAIFilter
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::RemoveAIFilter ( )
{
	static UFunction* pFnRemoveAIFilter = NULL;

	if ( ! pFnRemoveAIFilter )
		pFnRemoveAIFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.RemoveAIFilter" );

	UKFCheatManager_execRemoveAIFilter_Parms RemoveAIFilter_Parms;

	this->ProcessEvent ( pFnRemoveAIFilter, &RemoveAIFilter_Parms, NULL );
};

// Function KFGame.KFCheatManager.AddAIFilter
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AddAIFilter ( )
{
	static UFunction* pFnAddAIFilter = NULL;

	if ( ! pFnAddAIFilter )
		pFnAddAIFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AddAIFilter" );

	UKFCheatManager_execAddAIFilter_Parms AddAIFilter_Parms;

	this->ProcessEvent ( pFnAddAIFilter, &AddAIFilter_Parms, NULL );
};

// Function KFGame.KFCheatManager.EnterZedVictoryState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::EnterZedVictoryState ( )
{
	static UFunction* pFnEnterZedVictoryState = NULL;

	if ( ! pFnEnterZedVictoryState )
		pFnEnterZedVictoryState = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.EnterZedVictoryState" );

	UKFCheatManager_execEnterZedVictoryState_Parms EnterZedVictoryState_Parms;

	this->ProcessEvent ( pFnEnterZedVictoryState, &EnterZedVictoryState_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIFPRoam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIFPRoam ( )
{
	static UFunction* pFnAIFPRoam = NULL;

	if ( ! pFnAIFPRoam )
		pFnAIFPRoam = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIFPRoam" );

	UKFCheatManager_execAIFPRoam_Parms AIFPRoam_Parms;

	this->ProcessEvent ( pFnAIFPRoam, &AIFPRoam_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIHide_Debug
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIHide_Debug ( )
{
	static UFunction* pFnAIHide_Debug = NULL;

	if ( ! pFnAIHide_Debug )
		pFnAIHide_Debug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIHide_Debug" );

	UKFCheatManager_execAIHide_Debug_Parms AIHide_Debug_Parms;

	this->ProcessEvent ( pFnAIHide_Debug, &AIHide_Debug_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIMoveForward
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIMoveForward ( )
{
	static UFunction* pFnAIMoveForward = NULL;

	if ( ! pFnAIMoveForward )
		pFnAIMoveForward = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIMoveForward" );

	UKFCheatManager_execAIMoveForward_Parms AIMoveForward_Parms;

	this->ProcessEvent ( pFnAIMoveForward, &AIMoveForward_Parms, NULL );
};

// Function KFGame.KFCheatManager.TeleportPawnToCamera
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TeleportPawnToCamera ( )
{
	static UFunction* pFnTeleportPawnToCamera = NULL;

	if ( ! pFnTeleportPawnToCamera )
		pFnTeleportPawnToCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TeleportPawnToCamera" );

	UKFCheatManager_execTeleportPawnToCamera_Parms TeleportPawnToCamera_Parms;

	this->ProcessEvent ( pFnTeleportPawnToCamera, &TeleportPawnToCamera_Parms, NULL );
};

// Function KFGame.KFCheatManager.ViewZed
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ViewZed ( )
{
	static UFunction* pFnViewZed = NULL;

	if ( ! pFnViewZed )
		pFnViewZed = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ViewZed" );

	UKFCheatManager_execViewZed_Parms ViewZed_Parms;

	this->ProcessEvent ( pFnViewZed, &ViewZed_Parms, NULL );
};

// Function KFGame.KFCheatManager.ViewSelf
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ViewSelf ( )
{
	static UFunction* pFnViewSelf = NULL;

	if ( ! pFnViewSelf )
		pFnViewSelf = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ViewSelf" );

	UKFCheatManager_execViewSelf_Parms ViewSelf_Parms;

	this->ProcessEvent ( pFnViewSelf, &ViewSelf_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpInfoForAI
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpInfoForAI ( )
{
	static UFunction* pFnDumpInfoForAI = NULL;

	if ( ! pFnDumpInfoForAI )
		pFnDumpInfoForAI = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpInfoForAI" );

	UKFCheatManager_execDumpInfoForAI_Parms DumpInfoForAI_Parms;

	this->ProcessEvent ( pFnDumpInfoForAI, &DumpInfoForAI_Parms, NULL );
};

// Function KFGame.KFCheatManager.EnableDebugCamera
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::EnableDebugCamera ( )
{
	static UFunction* pFnEnableDebugCamera = NULL;

	if ( ! pFnEnableDebugCamera )
		pFnEnableDebugCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.EnableDebugCamera" );

	UKFCheatManager_execEnableDebugCamera_Parms EnableDebugCamera_Parms;

	this->ProcessEvent ( pFnEnableDebugCamera, &EnableDebugCamera_Parms, NULL );
};

// Function KFGame.KFCheatManager.TDC
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TDC ( )
{
	static UFunction* pFnTDC = NULL;

	if ( ! pFnTDC )
		pFnTDC = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TDC" );

	UKFCheatManager_execTDC_Parms TDC_Parms;

	this->ProcessEvent ( pFnTDC, &TDC_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleDebugCamera
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleDebugCamera ( )
{
	static UFunction* pFnToggleDebugCamera = NULL;

	if ( ! pFnToggleDebugCamera )
		pFnToggleDebugCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleDebugCamera" );

	UKFCheatManager_execToggleDebugCamera_Parms ToggleDebugCamera_Parms;

	this->ProcessEvent ( pFnToggleDebugCamera, &ToggleDebugCamera_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetKFMPFromAim
// [0x00024002] 
// Parameters infos:

void UKFCheatManager::GetKFMPFromAim ( )
{
	static UFunction* pFnGetKFMPFromAim = NULL;

	if ( ! pFnGetKFMPFromAim )
		pFnGetKFMPFromAim = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetKFMPFromAim" );

	UKFCheatManager_execGetKFMPFromAim_Parms GetKFMPFromAim_Parms;

	this->ProcessEvent ( pFnGetKFMPFromAim, &GetKFMPFromAim_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetKFAICFromAim
// [0x00024002] 
// Parameters infos:

void UKFCheatManager::GetKFAICFromAim ( )
{
	static UFunction* pFnGetKFAICFromAim = NULL;

	if ( ! pFnGetKFAICFromAim )
		pFnGetKFAICFromAim = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetKFAICFromAim" );

	UKFCheatManager_execGetKFAICFromAim_Parms GetKFAICFromAim_Parms;

	this->ProcessEvent ( pFnGetKFAICFromAim, &GetKFAICFromAim_Parms, NULL );
};

// Function KFGame.KFCheatManager.CheckReachSpecs
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::CheckReachSpecs ( )
{
	static UFunction* pFnCheckReachSpecs = NULL;

	if ( ! pFnCheckReachSpecs )
		pFnCheckReachSpecs = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.CheckReachSpecs" );

	UKFCheatManager_execCheckReachSpecs_Parms CheckReachSpecs_Parms;

	this->ProcessEvent ( pFnCheckReachSpecs, &CheckReachSpecs_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleShowDestructibleNavigationDebugArtifacts
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleShowDestructibleNavigationDebugArtifacts ( )
{
	static UFunction* pFnToggleShowDestructibleNavigationDebugArtifacts = NULL;

	if ( ! pFnToggleShowDestructibleNavigationDebugArtifacts )
		pFnToggleShowDestructibleNavigationDebugArtifacts = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleShowDestructibleNavigationDebugArtifacts" );

	UKFCheatManager_execToggleShowDestructibleNavigationDebugArtifacts_Parms ToggleShowDestructibleNavigationDebugArtifacts_Parms;

	this->ProcessEvent ( pFnToggleShowDestructibleNavigationDebugArtifacts, &ToggleShowDestructibleNavigationDebugArtifacts_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleShowDoorNavigationDebugArtifacts
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleShowDoorNavigationDebugArtifacts ( )
{
	static UFunction* pFnToggleShowDoorNavigationDebugArtifacts = NULL;

	if ( ! pFnToggleShowDoorNavigationDebugArtifacts )
		pFnToggleShowDoorNavigationDebugArtifacts = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleShowDoorNavigationDebugArtifacts" );

	UKFCheatManager_execToggleShowDoorNavigationDebugArtifacts_Parms ToggleShowDoorNavigationDebugArtifacts_Parms;

	this->ProcessEvent ( pFnToggleShowDoorNavigationDebugArtifacts, &ToggleShowDoorNavigationDebugArtifacts_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleShowLeapDownDebugArtifacts
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleShowLeapDownDebugArtifacts ( )
{
	static UFunction* pFnToggleShowLeapDownDebugArtifacts = NULL;

	if ( ! pFnToggleShowLeapDownDebugArtifacts )
		pFnToggleShowLeapDownDebugArtifacts = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleShowLeapDownDebugArtifacts" );

	UKFCheatManager_execToggleShowLeapDownDebugArtifacts_Parms ToggleShowLeapDownDebugArtifacts_Parms;

	this->ProcessEvent ( pFnToggleShowLeapDownDebugArtifacts, &ToggleShowLeapDownDebugArtifacts_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleShowHighDetailCombatMovementDebugInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleShowHighDetailCombatMovementDebugInfo ( )
{
	static UFunction* pFnToggleShowHighDetailCombatMovementDebugInfo = NULL;

	if ( ! pFnToggleShowHighDetailCombatMovementDebugInfo )
		pFnToggleShowHighDetailCombatMovementDebugInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleShowHighDetailCombatMovementDebugInfo" );

	UKFCheatManager_execToggleShowHighDetailCombatMovementDebugInfo_Parms ToggleShowHighDetailCombatMovementDebugInfo_Parms;

	this->ProcessEvent ( pFnToggleShowHighDetailCombatMovementDebugInfo, &ToggleShowHighDetailCombatMovementDebugInfo_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState ( )
{
	static UFunction* pFnToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState = NULL;

	if ( ! pFnToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState )
		pFnToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState" );

	UKFCheatManager_execToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState_Parms ToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState_Parms;

	this->ProcessEvent ( pFnToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState, &ToggleShowCollisionRadiusForReducedZedOnZedPinchPointCollisionState_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleShowMovePointsDebugInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleShowMovePointsDebugInfo ( )
{
	static UFunction* pFnToggleShowMovePointsDebugInfo = NULL;

	if ( ! pFnToggleShowMovePointsDebugInfo )
		pFnToggleShowMovePointsDebugInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleShowMovePointsDebugInfo" );

	UKFCheatManager_execToggleShowMovePointsDebugInfo_Parms ToggleShowMovePointsDebugInfo_Parms;

	this->ProcessEvent ( pFnToggleShowMovePointsDebugInfo, &ToggleShowMovePointsDebugInfo_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleShowVisualStuckZedDebugInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleShowVisualStuckZedDebugInfo ( )
{
	static UFunction* pFnToggleShowVisualStuckZedDebugInfo = NULL;

	if ( ! pFnToggleShowVisualStuckZedDebugInfo )
		pFnToggleShowVisualStuckZedDebugInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleShowVisualStuckZedDebugInfo" );

	UKFCheatManager_execToggleShowVisualStuckZedDebugInfo_Parms ToggleShowVisualStuckZedDebugInfo_Parms;

	this->ProcessEvent ( pFnToggleShowVisualStuckZedDebugInfo, &ToggleShowVisualStuckZedDebugInfo_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowAIStuckNpcsToggle
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowAIStuckNpcsToggle ( )
{
	static UFunction* pFnShowAIStuckNpcsToggle = NULL;

	if ( ! pFnShowAIStuckNpcsToggle )
		pFnShowAIStuckNpcsToggle = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowAIStuckNpcsToggle" );

	UKFCheatManager_execShowAIStuckNpcsToggle_Parms ShowAIStuckNpcsToggle_Parms;

	this->ProcessEvent ( pFnShowAIStuckNpcsToggle, &ShowAIStuckNpcsToggle_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugStepAside
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugStepAside ( )
{
	static UFunction* pFnAIDebugStepAside = NULL;

	if ( ! pFnAIDebugStepAside )
		pFnAIDebugStepAside = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugStepAside" );

	UKFCheatManager_execAIDebugStepAside_Parms AIDebugStepAside_Parms;

	this->ProcessEvent ( pFnAIDebugStepAside, &AIDebugStepAside_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugSteering
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugSteering ( )
{
	static UFunction* pFnAIDebugSteering = NULL;

	if ( ! pFnAIDebugSteering )
		pFnAIDebugSteering = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugSteering" );

	UKFCheatManager_execAIDebugSteering_Parms AIDebugSteering_Parms;

	this->ProcessEvent ( pFnAIDebugSteering, &AIDebugSteering_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIWander
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIWander ( )
{
	static UFunction* pFnAIWander = NULL;

	if ( ! pFnAIWander )
		pFnAIWander = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIWander" );

	UKFCheatManager_execAIWander_Parms AIWander_Parms;

	this->ProcessEvent ( pFnAIWander, &AIWander_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIFlee
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIFlee ( )
{
	static UFunction* pFnAIFlee = NULL;

	if ( ! pFnAIFlee )
		pFnAIFlee = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIFlee" );

	UKFCheatManager_execAIFlee_Parms AIFlee_Parms;

	this->ProcessEvent ( pFnAIFlee, &AIFlee_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebug
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebug ( )
{
	static UFunction* pFnAIDebug = NULL;

	if ( ! pFnAIDebug )
		pFnAIDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebug" );

	UKFCheatManager_execAIDebug_Parms AIDebug_Parms;

	this->ProcessEvent ( pFnAIDebug, &AIDebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.HideDebugStrikeRanges
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HideDebugStrikeRanges ( )
{
	static UFunction* pFnHideDebugStrikeRanges = NULL;

	if ( ! pFnHideDebugStrikeRanges )
		pFnHideDebugStrikeRanges = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HideDebugStrikeRanges" );

	UKFCheatManager_execHideDebugStrikeRanges_Parms HideDebugStrikeRanges_Parms;

	this->ProcessEvent ( pFnHideDebugStrikeRanges, &HideDebugStrikeRanges_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowDebugStrikeRanges
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowDebugStrikeRanges ( )
{
	static UFunction* pFnShowDebugStrikeRanges = NULL;

	if ( ! pFnShowDebugStrikeRanges )
		pFnShowDebugStrikeRanges = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowDebugStrikeRanges" );

	UKFCheatManager_execShowDebugStrikeRanges_Parms ShowDebugStrikeRanges_Parms;

	this->ProcessEvent ( pFnShowDebugStrikeRanges, &ShowDebugStrikeRanges_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugMode
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugMode ( )
{
	static UFunction* pFnAIDebugMode = NULL;

	if ( ! pFnAIDebugMode )
		pFnAIDebugMode = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugMode" );

	UKFCheatManager_execAIDebugMode_Parms AIDebugMode_Parms;

	this->ProcessEvent ( pFnAIDebugMode, &AIDebugMode_Parms, NULL );
};

// Function KFGame.KFCheatManager.PathInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PathInfo ( )
{
	static UFunction* pFnPathInfo = NULL;

	if ( ! pFnPathInfo )
		pFnPathInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PathInfo" );

	UKFCheatManager_execPathInfo_Parms PathInfo_Parms;

	this->ProcessEvent ( pFnPathInfo, &PathInfo_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetSightRadius
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetSightRadius ( )
{
	static UFunction* pFnAISetSightRadius = NULL;

	if ( ! pFnAISetSightRadius )
		pFnAISetSightRadius = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetSightRadius" );

	UKFCheatManager_execAISetSightRadius_Parms AISetSightRadius_Parms;

	this->ProcessEvent ( pFnAISetSightRadius, &AISetSightRadius_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugVision
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugVision ( )
{
	static UFunction* pFnAIDebugVision = NULL;

	if ( ! pFnAIDebugVision )
		pFnAIDebugVision = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugVision" );

	UKFCheatManager_execAIDebugVision_Parms AIDebugVision_Parms;

	this->ProcessEvent ( pFnAIDebugVision, &AIDebugVision_Parms, NULL );
};

// Function KFGame.KFCheatManager.AISetPeriph
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AISetPeriph ( )
{
	static UFunction* pFnAISetPeriph = NULL;

	if ( ! pFnAISetPeriph )
		pFnAISetPeriph = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AISetPeriph" );

	UKFCheatManager_execAISetPeriph_Parms AISetPeriph_Parms;

	this->ProcessEvent ( pFnAISetPeriph, &AISetPeriph_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowDebugNodes
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowDebugNodes ( )
{
	static UFunction* pFnShowDebugNodes = NULL;

	if ( ! pFnShowDebugNodes )
		pFnShowDebugNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowDebugNodes" );

	UKFCheatManager_execShowDebugNodes_Parms ShowDebugNodes_Parms;

	this->ProcessEvent ( pFnShowDebugNodes, &ShowDebugNodes_Parms, NULL );
};

// Function KFGame.KFCheatManager.GotoDebugNode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GotoDebugNode ( )
{
	static UFunction* pFnGotoDebugNode = NULL;

	if ( ! pFnGotoDebugNode )
		pFnGotoDebugNode = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GotoDebugNode" );

	UKFCheatManager_execGotoDebugNode_Parms GotoDebugNode_Parms;

	this->ProcessEvent ( pFnGotoDebugNode, &GotoDebugNode_Parms, NULL );
};

// Function KFGame.KFCheatManager.DumpDebugNodes
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DumpDebugNodes ( )
{
	static UFunction* pFnDumpDebugNodes = NULL;

	if ( ! pFnDumpDebugNodes )
		pFnDumpDebugNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DumpDebugNodes" );

	UKFCheatManager_execDumpDebugNodes_Parms DumpDebugNodes_Parms;

	this->ProcessEvent ( pFnDumpDebugNodes, &DumpDebugNodes_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowReachSpecsFor
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowReachSpecsFor ( )
{
	static UFunction* pFnShowReachSpecsFor = NULL;

	if ( ! pFnShowReachSpecsFor )
		pFnShowReachSpecsFor = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowReachSpecsFor" );

	UKFCheatManager_execShowReachSpecsFor_Parms ShowReachSpecsFor_Parms;

	this->ProcessEvent ( pFnShowReachSpecsFor, &ShowReachSpecsFor_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowBlockedPaths
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowBlockedPaths ( )
{
	static UFunction* pFnShowBlockedPaths = NULL;

	if ( ! pFnShowBlockedPaths )
		pFnShowBlockedPaths = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowBlockedPaths" );

	UKFCheatManager_execShowBlockedPaths_Parms ShowBlockedPaths_Parms;

	this->ProcessEvent ( pFnShowBlockedPaths, &ShowBlockedPaths_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIHeadlessWander
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIHeadlessWander ( )
{
	static UFunction* pFnAIHeadlessWander = NULL;

	if ( ! pFnAIHeadlessWander )
		pFnAIHeadlessWander = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIHeadlessWander" );

	UKFCheatManager_execAIHeadlessWander_Parms AIHeadlessWander_Parms;

	this->ProcessEvent ( pFnAIHeadlessWander, &AIHeadlessWander_Parms, NULL );
};

// Function KFGame.KFCheatManager.Puke
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Puke ( )
{
	static UFunction* pFnPuke = NULL;

	if ( ! pFnPuke )
		pFnPuke = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Puke" );

	UKFCheatManager_execPuke_Parms Puke_Parms;

	this->ProcessEvent ( pFnPuke, &Puke_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIDebugFloor
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIDebugFloor ( )
{
	static UFunction* pFnAIDebugFloor = NULL;

	if ( ! pFnAIDebugFloor )
		pFnAIDebugFloor = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIDebugFloor" );

	UKFCheatManager_execAIDebugFloor_Parms AIDebugFloor_Parms;

	this->ProcessEvent ( pFnAIDebugFloor, &AIDebugFloor_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIShowAnchor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIShowAnchor ( )
{
	static UFunction* pFnAIShowAnchor = NULL;

	if ( ! pFnAIShowAnchor )
		pFnAIShowAnchor = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIShowAnchor" );

	UKFCheatManager_execAIShowAnchor_Parms AIShowAnchor_Parms;

	this->ProcessEvent ( pFnAIShowAnchor, &AIShowAnchor_Parms, NULL );
};

// Function KFGame.KFCheatManager.SlasherTauntTimer
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::SlasherTauntTimer ( )
{
	static UFunction* pFnSlasherTauntTimer = NULL;

	if ( ! pFnSlasherTauntTimer )
		pFnSlasherTauntTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SlasherTauntTimer" );

	UKFCheatManager_execSlasherTauntTimer_Parms SlasherTauntTimer_Parms;

	this->ProcessEvent ( pFnSlasherTauntTimer, &SlasherTauntTimer_Parms, NULL );
};

// Function KFGame.KFCheatManager.ZedTauntTimer
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::ZedTauntTimer ( )
{
	static UFunction* pFnZedTauntTimer = NULL;

	if ( ! pFnZedTauntTimer )
		pFnZedTauntTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ZedTauntTimer" );

	UKFCheatManager_execZedTauntTimer_Parms ZedTauntTimer_Parms;

	this->ProcessEvent ( pFnZedTauntTimer, &ZedTauntTimer_Parms, NULL );
};

// Function KFGame.KFCheatManager.SlasherTaunt
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SlasherTaunt ( )
{
	static UFunction* pFnSlasherTaunt = NULL;

	if ( ! pFnSlasherTaunt )
		pFnSlasherTaunt = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SlasherTaunt" );

	UKFCheatManager_execSlasherTaunt_Parms SlasherTaunt_Parms;

	this->ProcessEvent ( pFnSlasherTaunt, &SlasherTaunt_Parms, NULL );
};

// Function KFGame.KFCheatManager.AllZedsTaunt
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AllZedsTaunt ( )
{
	static UFunction* pFnAllZedsTaunt = NULL;

	if ( ! pFnAllZedsTaunt )
		pFnAllZedsTaunt = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AllZedsTaunt" );

	UKFCheatManager_execAllZedsTaunt_Parms AllZedsTaunt_Parms;

	this->ProcessEvent ( pFnAllZedsTaunt, &AllZedsTaunt_Parms, NULL );
};

// Function KFGame.KFCheatManager.DrawLineFromNPC
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DrawLineFromNPC ( )
{
	static UFunction* pFnDrawLineFromNPC = NULL;

	if ( ! pFnDrawLineFromNPC )
		pFnDrawLineFromNPC = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DrawLineFromNPC" );

	UKFCheatManager_execDrawLineFromNPC_Parms DrawLineFromNPC_Parms;

	this->ProcessEvent ( pFnDrawLineFromNPC, &DrawLineFromNPC_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIHuskFlamethrower
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIHuskFlamethrower ( )
{
	static UFunction* pFnAIHuskFlamethrower = NULL;

	if ( ! pFnAIHuskFlamethrower )
		pFnAIHuskFlamethrower = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIHuskFlamethrower" );

	UKFCheatManager_execAIHuskFlamethrower_Parms AIHuskFlamethrower_Parms;

	this->ProcessEvent ( pFnAIHuskFlamethrower, &AIHuskFlamethrower_Parms, NULL );
};

// Function KFGame.KFCheatManager.AIHelp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AIHelp ( )
{
	static UFunction* pFnAIHelp = NULL;

	if ( ! pFnAIHelp )
		pFnAIHelp = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AIHelp" );

	UKFCheatManager_execAIHelp_Parms AIHelp_Parms;

	this->ProcessEvent ( pFnAIHelp, &AIHelp_Parms, NULL );
};

// Function KFGame.KFCheatManager.GoToActor
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GoToActor ( )
{
	static UFunction* pFnGoToActor = NULL;

	if ( ! pFnGoToActor )
		pFnGoToActor = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GoToActor" );

	UKFCheatManager_execGoToActor_Parms GoToActor_Parms;

	this->ProcessEvent ( pFnGoToActor, &GoToActor_Parms, NULL );
};

// Function KFGame.KFCheatManager.FPDL
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FPDL ( )
{
	static UFunction* pFnFPDL = NULL;

	if ( ! pFnFPDL )
		pFnFPDL = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FPDL" );

	UKFCheatManager_execFPDL_Parms FPDL_Parms;

	this->ProcessEvent ( pFnFPDL, &FPDL_Parms, NULL );
};

// Function KFGame.KFCheatManager.OpenTraderMenu
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::OpenTraderMenu ( )
{
	static UFunction* pFnOpenTraderMenu = NULL;

	if ( ! pFnOpenTraderMenu )
		pFnOpenTraderMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OpenTraderMenu" );

	UKFCheatManager_execOpenTraderMenu_Parms OpenTraderMenu_Parms;

	this->ProcessEvent ( pFnOpenTraderMenu, &OpenTraderMenu_Parms, NULL );
};

// Function KFGame.KFCheatManager.OpenTraderNext
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::OpenTraderNext ( )
{
	static UFunction* pFnOpenTraderNext = NULL;

	if ( ! pFnOpenTraderNext )
		pFnOpenTraderNext = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OpenTraderNext" );

	UKFCheatManager_execOpenTraderNext_Parms OpenTraderNext_Parms;

	this->ProcessEvent ( pFnOpenTraderNext, &OpenTraderNext_Parms, NULL );
};

// Function KFGame.KFCheatManager.OpenTrader
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::OpenTrader ( )
{
	static UFunction* pFnOpenTrader = NULL;

	if ( ! pFnOpenTrader )
		pFnOpenTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OpenTrader" );

	UKFCheatManager_execOpenTrader_Parms OpenTrader_Parms;

	this->ProcessEvent ( pFnOpenTrader, &OpenTrader_Parms, NULL );
};

// Function KFGame.KFCheatManager.HideTraderPath
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HideTraderPath ( )
{
	static UFunction* pFnHideTraderPath = NULL;

	if ( ! pFnHideTraderPath )
		pFnHideTraderPath = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HideTraderPath" );

	UKFCheatManager_execHideTraderPath_Parms HideTraderPath_Parms;

	this->ProcessEvent ( pFnHideTraderPath, &HideTraderPath_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowTraderPath
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowTraderPath ( )
{
	static UFunction* pFnShowTraderPath = NULL;

	if ( ! pFnShowTraderPath )
		pFnShowTraderPath = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowTraderPath" );

	UKFCheatManager_execShowTraderPath_Parms ShowTraderPath_Parms;

	this->ProcessEvent ( pFnShowTraderPath, &ShowTraderPath_Parms, NULL );
};

// Function KFGame.KFCheatManager.GoRecoil
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GoRecoil ( )
{
	static UFunction* pFnGoRecoil = NULL;

	if ( ! pFnGoRecoil )
		pFnGoRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GoRecoil" );

	UKFCheatManager_execGoRecoil_Parms GoRecoil_Parms;

	this->ProcessEvent ( pFnGoRecoil, &GoRecoil_Parms, NULL );
};

// Function KFGame.KFCheatManager.NoRecoil
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::NoRecoil ( )
{
	static UFunction* pFnNoRecoil = NULL;

	if ( ! pFnNoRecoil )
		pFnNoRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.NoRecoil" );

	UKFCheatManager_execNoRecoil_Parms NoRecoil_Parms;

	this->ProcessEvent ( pFnNoRecoil, &NoRecoil_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetISMeshCompScale
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetISMeshCompScale ( )
{
	static UFunction* pFnSetISMeshCompScale = NULL;

	if ( ! pFnSetISMeshCompScale )
		pFnSetISMeshCompScale = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetISMeshCompScale" );

	UKFCheatManager_execSetISMeshCompScale_Parms SetISMeshCompScale_Parms;

	this->ProcessEvent ( pFnSetISMeshCompScale, &SetISMeshCompScale_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetIronIdleAnims
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetIronIdleAnims ( )
{
	static UFunction* pFnSetIronIdleAnims = NULL;

	if ( ! pFnSetIronIdleAnims )
		pFnSetIronIdleAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetIronIdleAnims" );

	UKFCheatManager_execSetIronIdleAnims_Parms SetIronIdleAnims_Parms;

	this->ProcessEvent ( pFnSetIronIdleAnims, &SetIronIdleAnims_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetDebugRecoil3d
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetDebugRecoil3d ( )
{
	static UFunction* pFnSetDebugRecoil3d = NULL;

	if ( ! pFnSetDebugRecoil3d )
		pFnSetDebugRecoil3d = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetDebugRecoil3d" );

	UKFCheatManager_execSetDebugRecoil3d_Parms SetDebugRecoil3d_Parms;

	this->ProcessEvent ( pFnSetDebugRecoil3d, &SetDebugRecoil3d_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleWeapCanPause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleWeapCanPause ( )
{
	static UFunction* pFnToggleWeapCanPause = NULL;

	if ( ! pFnToggleWeapCanPause )
		pFnToggleWeapCanPause = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleWeapCanPause" );

	UKFCheatManager_execToggleWeapCanPause_Parms ToggleWeapCanPause_Parms;

	this->ProcessEvent ( pFnToggleWeapCanPause, &ToggleWeapCanPause_Parms, NULL );
};

// Function KFGame.KFCheatManager.NoAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::NoAmmo ( )
{
	static UFunction* pFnNoAmmo = NULL;

	if ( ! pFnNoAmmo )
		pFnNoAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.NoAmmo" );

	UKFCheatManager_execNoAmmo_Parms NoAmmo_Parms;

	this->ProcessEvent ( pFnNoAmmo, &NoAmmo_Parms, NULL );
};

// Function KFGame.KFCheatManager.UberAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::UberAmmo ( )
{
	static UFunction* pFnUberAmmo = NULL;

	if ( ! pFnUberAmmo )
		pFnUberAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.UberAmmo" );

	UKFCheatManager_execUberAmmo_Parms UberAmmo_Parms;

	this->ProcessEvent ( pFnUberAmmo, &UberAmmo_Parms, NULL );
};

// Function KFGame.KFCheatManager.AllAmmo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AllAmmo ( )
{
	static UFunction* pFnAllAmmo = NULL;

	if ( ! pFnAllAmmo )
		pFnAllAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AllAmmo" );

	UKFCheatManager_execAllAmmo_Parms AllAmmo_Parms;

	this->ProcessEvent ( pFnAllAmmo, &AllAmmo_Parms, NULL );
};

// Function KFGame.KFCheatManager.KillFlares
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::KillFlares ( )
{
	static UFunction* pFnKillFlares = NULL;

	if ( ! pFnKillFlares )
		pFnKillFlares = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.KillFlares" );

	UKFCheatManager_execKillFlares_Parms KillFlares_Parms;

	this->ProcessEvent ( pFnKillFlares, &KillFlares_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnFlare
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnFlare ( )
{
	static UFunction* pFnSpawnFlare = NULL;

	if ( ! pFnSpawnFlare )
		pFnSpawnFlare = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnFlare" );

	UKFCheatManager_execSpawnFlare_Parms SpawnFlare_Parms;

	this->ProcessEvent ( pFnSpawnFlare, &SpawnFlare_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestHitZones
// [0x00820302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestHitZones ( )
{
	static UFunction* pFnTestHitZones = NULL;

	if ( ! pFnTestHitZones )
		pFnTestHitZones = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestHitZones" );

	UKFCheatManager_execTestHitZones_Parms TestHitZones_Parms;

	this->ProcessEvent ( pFnTestHitZones, &TestHitZones_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpamShellEject
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpamShellEject ( )
{
	static UFunction* pFnSpamShellEject = NULL;

	if ( ! pFnSpamShellEject )
		pFnSpamShellEject = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpamShellEject" );

	UKFCheatManager_execSpamShellEject_Parms SpamShellEject_Parms;

	this->ProcessEvent ( pFnSpamShellEject, &SpamShellEject_Parms, NULL );
};

// Function KFGame.KFCheatManager.PlayShellEject
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PlayShellEject ( )
{
	static UFunction* pFnPlayShellEject = NULL;

	if ( ! pFnPlayShellEject )
		pFnPlayShellEject = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PlayShellEject" );

	UKFCheatManager_execPlayShellEject_Parms PlayShellEject_Parms;

	this->ProcessEvent ( pFnPlayShellEject, &PlayShellEject_Parms, NULL );
};

// Function KFGame.KFCheatManager.PlayMuzzleFlash
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PlayMuzzleFlash ( )
{
	static UFunction* pFnPlayMuzzleFlash = NULL;

	if ( ! pFnPlayMuzzleFlash )
		pFnPlayMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PlayMuzzleFlash" );

	UKFCheatManager_execPlayMuzzleFlash_Parms PlayMuzzleFlash_Parms;

	this->ProcessEvent ( pFnPlayMuzzleFlash, &PlayMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFCheatManager.ArmorMe
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ArmorMe ( )
{
	static UFunction* pFnArmorMe = NULL;

	if ( ! pFnArmorMe )
		pFnArmorMe = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ArmorMe" );

	UKFCheatManager_execArmorMe_Parms ArmorMe_Parms;

	this->ProcessEvent ( pFnArmorMe, &ArmorMe_Parms, NULL );
};

// Function KFGame.KFCheatManager.HealMe
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HealMe ( )
{
	static UFunction* pFnHealMe = NULL;

	if ( ! pFnHealMe )
		pFnHealMe = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HealMe" );

	UKFCheatManager_execHealMe_Parms HealMe_Parms;

	this->ProcessEvent ( pFnHealMe, &HealMe_Parms, NULL );
};

// Function KFGame.KFCheatManager.DoTMe
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DoTMe ( )
{
	static UFunction* pFnDoTMe = NULL;

	if ( ! pFnDoTMe )
		pFnDoTMe = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DoTMe" );

	UKFCheatManager_execDoTMe_Parms DoTMe_Parms;

	this->ProcessEvent ( pFnDoTMe, &DoTMe_Parms, NULL );
};

// Function KFGame.KFCheatManager.HurtMe
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HurtMe ( )
{
	static UFunction* pFnHurtMe = NULL;

	if ( ! pFnHurtMe )
		pFnHurtMe = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HurtMe" );

	UKFCheatManager_execHurtMe_Parms HurtMe_Parms;

	this->ProcessEvent ( pFnHurtMe, &HurtMe_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShoppingSpree
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShoppingSpree ( )
{
	static UFunction* pFnShoppingSpree = NULL;

	if ( ! pFnShoppingSpree )
		pFnShoppingSpree = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShoppingSpree" );

	UKFCheatManager_execShoppingSpree_Parms ShoppingSpree_Parms;

	this->ProcessEvent ( pFnShoppingSpree, &ShoppingSpree_Parms, NULL );
};

// Function KFGame.KFCheatManager.DoshMe
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DoshMe ( )
{
	static UFunction* pFnDoshMe = NULL;

	if ( ! pFnDoshMe )
		pFnDoshMe = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DoshMe" );

	UKFCheatManager_execDoshMe_Parms DoshMe_Parms;

	this->ProcessEvent ( pFnDoshMe, &DoshMe_Parms, NULL );
};

// Function KFGame.KFCheatManager.ImRich
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ImRich ( )
{
	static UFunction* pFnImRich = NULL;

	if ( ! pFnImRich )
		pFnImRich = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ImRich" );

	UKFCheatManager_execImRich_Parms ImRich_Parms;

	this->ProcessEvent ( pFnImRich, &ImRich_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestCheat
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestCheat ( )
{
	static UFunction* pFnTestCheat = NULL;

	if ( ! pFnTestCheat )
		pFnTestCheat = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestCheat" );

	UKFCheatManager_execTestCheat_Parms TestCheat_Parms;

	this->ProcessEvent ( pFnTestCheat, &TestCheat_Parms, NULL );
};

// Function KFGame.KFCheatManager.DramaEvent
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DramaEvent ( )
{
	static UFunction* pFnDramaEvent = NULL;

	if ( ! pFnDramaEvent )
		pFnDramaEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DramaEvent" );

	UKFCheatManager_execDramaEvent_Parms DramaEvent_Parms;

	this->ProcessEvent ( pFnDramaEvent, &DramaEvent_Parms, NULL );
};

// Function KFGame.KFCheatManager.RestoreWeaponCameraAnimScale
// [0x00020102] 
// Parameters infos:

void UKFCheatManager::RestoreWeaponCameraAnimScale ( )
{
	static UFunction* pFnRestoreWeaponCameraAnimScale = NULL;

	if ( ! pFnRestoreWeaponCameraAnimScale )
		pFnRestoreWeaponCameraAnimScale = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.RestoreWeaponCameraAnimScale" );

	UKFCheatManager_execRestoreWeaponCameraAnimScale_Parms RestoreWeaponCameraAnimScale_Parms;

	this->ProcessEvent ( pFnRestoreWeaponCameraAnimScale, &RestoreWeaponCameraAnimScale_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetWeaponCameraAnimScale
// [0x00020102] 
// Parameters infos:

void UKFCheatManager::SetWeaponCameraAnimScale ( )
{
	static UFunction* pFnSetWeaponCameraAnimScale = NULL;

	if ( ! pFnSetWeaponCameraAnimScale )
		pFnSetWeaponCameraAnimScale = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetWeaponCameraAnimScale" );

	UKFCheatManager_execSetWeaponCameraAnimScale_Parms SetWeaponCameraAnimScale_Parms;

	this->ProcessEvent ( pFnSetWeaponCameraAnimScale, &SetWeaponCameraAnimScale_Parms, NULL );
};

// Function KFGame.KFCheatManager.RestoreShootCameraAnims
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::RestoreShootCameraAnims ( )
{
	static UFunction* pFnRestoreShootCameraAnims = NULL;

	if ( ! pFnRestoreShootCameraAnims )
		pFnRestoreShootCameraAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.RestoreShootCameraAnims" );

	UKFCheatManager_execRestoreShootCameraAnims_Parms RestoreShootCameraAnims_Parms;

	this->ProcessEvent ( pFnRestoreShootCameraAnims, &RestoreShootCameraAnims_Parms, NULL );
};

// Function KFGame.KFCheatManager.ScaleShootCameraAnims
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ScaleShootCameraAnims ( )
{
	static UFunction* pFnScaleShootCameraAnims = NULL;

	if ( ! pFnScaleShootCameraAnims )
		pFnScaleShootCameraAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ScaleShootCameraAnims" );

	UKFCheatManager_execScaleShootCameraAnims_Parms ScaleShootCameraAnims_Parms;

	this->ProcessEvent ( pFnScaleShootCameraAnims, &ScaleShootCameraAnims_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowHands
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowHands ( )
{
	static UFunction* pFnShowHands = NULL;

	if ( ! pFnShowHands )
		pFnShowHands = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowHands" );

	UKFCheatManager_execShowHands_Parms ShowHands_Parms;

	this->ProcessEvent ( pFnShowHands, &ShowHands_Parms, NULL );
};

// Function KFGame.KFCheatManager.BackgroundBlur
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::BackgroundBlur ( )
{
	static UFunction* pFnBackgroundBlur = NULL;

	if ( ! pFnBackgroundBlur )
		pFnBackgroundBlur = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.BackgroundBlur" );

	UKFCheatManager_execBackgroundBlur_Parms BackgroundBlur_Parms;

	this->ProcessEvent ( pFnBackgroundBlur, &BackgroundBlur_Parms, NULL );
};

// Function KFGame.KFCheatManager.ShowDownloadPopup
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ShowDownloadPopup ( )
{
	static UFunction* pFnShowDownloadPopup = NULL;

	if ( ! pFnShowDownloadPopup )
		pFnShowDownloadPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ShowDownloadPopup" );

	UKFCheatManager_execShowDownloadPopup_Parms ShowDownloadPopup_Parms;

	this->ProcessEvent ( pFnShowDownloadPopup, &ShowDownloadPopup_Parms, NULL );
};

// Function KFGame.KFCheatManager.CustomDOF
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::CustomDOF ( )
{
	static UFunction* pFnCustomDOF = NULL;

	if ( ! pFnCustomDOF )
		pFnCustomDOF = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.CustomDOF" );

	UKFCheatManager_execCustomDOF_Parms CustomDOF_Parms;

	this->ProcessEvent ( pFnCustomDOF, &CustomDOF_Parms, NULL );
};

// Function KFGame.KFCheatManager.QuickDOF
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::QuickDOF ( )
{
	static UFunction* pFnQuickDOF = NULL;

	if ( ! pFnQuickDOF )
		pFnQuickDOF = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.QuickDOF" );

	UKFCheatManager_execQuickDOF_Parms QuickDOF_Parms;

	this->ProcessEvent ( pFnQuickDOF, &QuickDOF_Parms, NULL );
};

// Function KFGame.KFCheatManager.WeapFOV
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::WeapFOV ( )
{
	static UFunction* pFnWeapFOV = NULL;

	if ( ! pFnWeapFOV )
		pFnWeapFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.WeapFOV" );

	UKFCheatManager_execWeapFOV_Parms WeapFOV_Parms;

	this->ProcessEvent ( pFnWeapFOV, &WeapFOV_Parms, NULL );
};

// Function KFGame.KFCheatManager.KillRecoil
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::KillRecoil ( )
{
	static UFunction* pFnKillRecoil = NULL;

	if ( ! pFnKillRecoil )
		pFnKillRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.KillRecoil" );

	UKFCheatManager_execKillRecoil_Parms KillRecoil_Parms;

	this->ProcessEvent ( pFnKillRecoil, &KillRecoil_Parms, NULL );
};

// Function KFGame.KFCheatManager.AllWeapons
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AllWeapons ( )
{
	static UFunction* pFnAllWeapons = NULL;

	if ( ! pFnAllWeapons )
		pFnAllWeapons = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AllWeapons" );

	UKFCheatManager_execAllWeapons_Parms AllWeapons_Parms;

	this->ProcessEvent ( pFnAllWeapons, &AllWeapons_Parms, NULL );
};

// Function KFGame.KFCheatManager.Surv
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Surv ( )
{
	static UFunction* pFnSurv = NULL;

	if ( ! pFnSurv )
		pFnSurv = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Surv" );

	UKFCheatManager_execSurv_Parms Surv_Parms;

	this->ProcessEvent ( pFnSurv, &Surv_Parms, NULL );
};

// Function KFGame.KFCheatManager.SMG
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SMG ( )
{
	static UFunction* pFnSMG = NULL;

	if ( ! pFnSMG )
		pFnSMG = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SMG" );

	UKFCheatManager_execSMG_Parms SMG_Parms;

	this->ProcessEvent ( pFnSMG, &SMG_Parms, NULL );
};

// Function KFGame.KFCheatManager.Swat
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Swat ( )
{
	static UFunction* pFnSwat = NULL;

	if ( ! pFnSwat )
		pFnSwat = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Swat" );

	UKFCheatManager_execSwat_Parms Swat_Parms;

	this->ProcessEvent ( pFnSwat, &Swat_Parms, NULL );
};

// Function KFGame.KFCheatManager.Sharpshooter
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Sharpshooter ( )
{
	static UFunction* pFnSharpshooter = NULL;

	if ( ! pFnSharpshooter )
		pFnSharpshooter = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Sharpshooter" );

	UKFCheatManager_execSharpshooter_Parms Sharpshooter_Parms;

	this->ProcessEvent ( pFnSharpshooter, &Sharpshooter_Parms, NULL );
};

// Function KFGame.KFCheatManager.Rifle
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Rifle ( )
{
	static UFunction* pFnRifle = NULL;

	if ( ! pFnRifle )
		pFnRifle = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Rifle" );

	UKFCheatManager_execRifle_Parms Rifle_Parms;

	this->ProcessEvent ( pFnRifle, &Rifle_Parms, NULL );
};

// Function KFGame.KFCheatManager.Firebug
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Firebug ( )
{
	static UFunction* pFnFirebug = NULL;

	if ( ! pFnFirebug )
		pFnFirebug = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Firebug" );

	UKFCheatManager_execFirebug_Parms Firebug_Parms;

	this->ProcessEvent ( pFnFirebug, &Firebug_Parms, NULL );
};

// Function KFGame.KFCheatManager.Flame
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Flame ( )
{
	static UFunction* pFnFlame = NULL;

	if ( ! pFnFlame )
		pFnFlame = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Flame" );

	UKFCheatManager_execFlame_Parms Flame_Parms;

	this->ProcessEvent ( pFnFlame, &Flame_Parms, NULL );
};

// Function KFGame.KFCheatManager.Medic
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Medic ( )
{
	static UFunction* pFnMedic = NULL;

	if ( ! pFnMedic )
		pFnMedic = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Medic" );

	UKFCheatManager_execMedic_Parms Medic_Parms;

	this->ProcessEvent ( pFnMedic, &Medic_Parms, NULL );
};

// Function KFGame.KFCheatManager.Demo
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Demo ( )
{
	static UFunction* pFnDemo = NULL;

	if ( ! pFnDemo )
		pFnDemo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Demo" );

	UKFCheatManager_execDemo_Parms Demo_Parms;

	this->ProcessEvent ( pFnDemo, &Demo_Parms, NULL );
};

// Function KFGame.KFCheatManager.Summer
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Summer ( )
{
	static UFunction* pFnSummer = NULL;

	if ( ! pFnSummer )
		pFnSummer = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Summer" );

	UKFCheatManager_execSummer_Parms Summer_Parms;

	this->ProcessEvent ( pFnSummer, &Summer_Parms, NULL );
};

// Function KFGame.KFCheatManager.March
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::March ( )
{
	static UFunction* pFnMarch = NULL;

	if ( ! pFnMarch )
		pFnMarch = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.March" );

	UKFCheatManager_execMarch_Parms March_Parms;

	this->ProcessEvent ( pFnMarch, &March_Parms, NULL );
};

// Function KFGame.KFCheatManager.ScopeFOV
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ScopeFOV ( )
{
	static UFunction* pFnScopeFOV = NULL;

	if ( ! pFnScopeFOV )
		pFnScopeFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ScopeFOV" );

	UKFCheatManager_execScopeFOV_Parms ScopeFOV_Parms;

	this->ProcessEvent ( pFnScopeFOV, &ScopeFOV_Parms, NULL );
};

// Function KFGame.KFCheatManager.Scope
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Scope ( )
{
	static UFunction* pFnScope = NULL;

	if ( ! pFnScope )
		pFnScope = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Scope" );

	UKFCheatManager_execScope_Parms Scope_Parms;

	this->ProcessEvent ( pFnScope, &Scope_Parms, NULL );
};

// Function KFGame.KFCheatManager.Assault
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Assault ( )
{
	static UFunction* pFnAssault = NULL;

	if ( ! pFnAssault )
		pFnAssault = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Assault" );

	UKFCheatManager_execAssault_Parms Assault_Parms;

	this->ProcessEvent ( pFnAssault, &Assault_Parms, NULL );
};

// Function KFGame.KFCheatManager.Melee
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Melee ( )
{
	static UFunction* pFnMelee = NULL;

	if ( ! pFnMelee )
		pFnMelee = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Melee" );

	UKFCheatManager_execMelee_Parms Melee_Parms;

	this->ProcessEvent ( pFnMelee, &Melee_Parms, NULL );
};

// Function KFGame.KFCheatManager.Nails
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Nails ( )
{
	static UFunction* pFnNails = NULL;

	if ( ! pFnNails )
		pFnNails = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Nails" );

	UKFCheatManager_execNails_Parms Nails_Parms;

	this->ProcessEvent ( pFnNails, &Nails_Parms, NULL );
};

// Function KFGame.KFCheatManager.Berserk
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Berserk ( )
{
	static UFunction* pFnBerserk = NULL;

	if ( ! pFnBerserk )
		pFnBerserk = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Berserk" );

	UKFCheatManager_execBerserk_Parms Berserk_Parms;

	this->ProcessEvent ( pFnBerserk, &Berserk_Parms, NULL );
};

// Function KFGame.KFCheatManager.DummyWeapon
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DummyWeapon ( )
{
	static UFunction* pFnDummyWeapon = NULL;

	if ( ! pFnDummyWeapon )
		pFnDummyWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DummyWeapon" );

	UKFCheatManager_execDummyWeapon_Parms DummyWeapon_Parms;

	this->ProcessEvent ( pFnDummyWeapon, &DummyWeapon_Parms, NULL );
};

// Function KFGame.KFCheatManager.Singles
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Singles ( )
{
	static UFunction* pFnSingles = NULL;

	if ( ! pFnSingles )
		pFnSingles = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Singles" );

	UKFCheatManager_execSingles_Parms Singles_Parms;

	this->ProcessEvent ( pFnSingles, &Singles_Parms, NULL );
};

// Function KFGame.KFCheatManager.Dualies
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Dualies ( )
{
	static UFunction* pFnDualies = NULL;

	if ( ! pFnDualies )
		pFnDualies = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Dualies" );

	UKFCheatManager_execDualies_Parms Dualies_Parms;

	this->ProcessEvent ( pFnDualies, &Dualies_Parms, NULL );
};

// Function KFGame.KFCheatManager.Pistols
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Pistols ( )
{
	static UFunction* pFnPistols = NULL;

	if ( ! pFnPistols )
		pFnPistols = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Pistols" );

	UKFCheatManager_execPistols_Parms Pistols_Parms;

	this->ProcessEvent ( pFnPistols, &Pistols_Parms, NULL );
};

// Function KFGame.KFCheatManager.MKB
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::MKB ( )
{
	static UFunction* pFnMKB = NULL;

	if ( ! pFnMKB )
		pFnMKB = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.MKB" );

	UKFCheatManager_execMKB_Parms MKB_Parms;

	this->ProcessEvent ( pFnMKB, &MKB_Parms, NULL );
};

// Function KFGame.KFCheatManager.Shotty
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::Shotty ( )
{
	static UFunction* pFnShotty = NULL;

	if ( ! pFnShotty )
		pFnShotty = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.Shotty" );

	UKFCheatManager_execShotty_Parms Shotty_Parms;

	this->ProcessEvent ( pFnShotty, &Shotty_Parms, NULL );
};

// Function KFGame.KFCheatManager.GiveWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GiveWeapon ( )
{
	static UFunction* pFnGiveWeapon = NULL;

	if ( ! pFnGiveWeapon )
		pFnGiveWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GiveWeapon" );

	UKFCheatManager_execGiveWeapon_Parms GiveWeapon_Parms;

	this->ProcessEvent ( pFnGiveWeapon, &GiveWeapon_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetPadVolume
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetPadVolume ( )
{
	static UFunction* pFnSetPadVolume = NULL;

	if ( ! pFnSetPadVolume )
		pFnSetPadVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetPadVolume" );

	UKFCheatManager_execSetPadVolume_Parms SetPadVolume_Parms;

	this->ProcessEvent ( pFnSetPadVolume, &SetPadVolume_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetMusicVolume
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetMusicVolume ( )
{
	static UFunction* pFnSetMusicVolume = NULL;

	if ( ! pFnSetMusicVolume )
		pFnSetMusicVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetMusicVolume" );

	UKFCheatManager_execSetMusicVolume_Parms SetMusicVolume_Parms;

	this->ProcessEvent ( pFnSetMusicVolume, &SetMusicVolume_Parms, NULL );
};

// Function KFGame.KFCheatManager.NextTrack
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::NextTrack ( )
{
	static UFunction* pFnNextTrack = NULL;

	if ( ! pFnNextTrack )
		pFnNextTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.NextTrack" );

	UKFCheatManager_execNextTrack_Parms NextTrack_Parms;

	this->ProcessEvent ( pFnNextTrack, &NextTrack_Parms, NULL );
};

// Function KFGame.KFCheatManager.FlameDebugDamage3P
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FlameDebugDamage3P ( )
{
	static UFunction* pFnFlameDebugDamage3P = NULL;

	if ( ! pFnFlameDebugDamage3P )
		pFnFlameDebugDamage3P = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FlameDebugDamage3P" );

	UKFCheatManager_execFlameDebugDamage3P_Parms FlameDebugDamage3P_Parms;

	this->ProcessEvent ( pFnFlameDebugDamage3P, &FlameDebugDamage3P_Parms, NULL );
};

// Function KFGame.KFCheatManager.FlameDebugFX3P
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FlameDebugFX3P ( )
{
	static UFunction* pFnFlameDebugFX3P = NULL;

	if ( ! pFnFlameDebugFX3P )
		pFnFlameDebugFX3P = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FlameDebugFX3P" );

	UKFCheatManager_execFlameDebugFX3P_Parms FlameDebugFX3P_Parms;

	this->ProcessEvent ( pFnFlameDebugFX3P, &FlameDebugFX3P_Parms, NULL );
};

// Function KFGame.KFCheatManager.FlameDebugFX
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FlameDebugFX ( )
{
	static UFunction* pFnFlameDebugFX = NULL;

	if ( ! pFnFlameDebugFX )
		pFnFlameDebugFX = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FlameDebugFX" );

	UKFCheatManager_execFlameDebugFX_Parms FlameDebugFX_Parms;

	this->ProcessEvent ( pFnFlameDebugFX, &FlameDebugFX_Parms, NULL );
};

// Function KFGame.KFCheatManager.FlameDebugDamage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FlameDebugDamage ( )
{
	static UFunction* pFnFlameDebugDamage = NULL;

	if ( ! pFnFlameDebugDamage )
		pFnFlameDebugDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FlameDebugDamage" );

	UKFCheatManager_execFlameDebugDamage_Parms FlameDebugDamage_Parms;

	this->ProcessEvent ( pFnFlameDebugDamage, &FlameDebugDamage_Parms, NULL );
};

// Function KFGame.KFCheatManager.FlameSetComplex
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::FlameSetComplex ( )
{
	static UFunction* pFnFlameSetComplex = NULL;

	if ( ! pFnFlameSetComplex )
		pFnFlameSetComplex = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FlameSetComplex" );

	UKFCheatManager_execFlameSetComplex_Parms FlameSetComplex_Parms;

	this->ProcessEvent ( pFnFlameSetComplex, &FlameSetComplex_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleCrosshair
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleCrosshair ( )
{
	static UFunction* pFnToggleCrosshair = NULL;

	if ( ! pFnToggleCrosshair )
		pFnToggleCrosshair = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleCrosshair" );

	UKFCheatManager_execToggleCrosshair_Parms ToggleCrosshair_Parms;

	this->ProcessEvent ( pFnToggleCrosshair, &ToggleCrosshair_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleForceCrosshair
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleForceCrosshair ( )
{
	static UFunction* pFnToggleForceCrosshair = NULL;

	if ( ! pFnToggleForceCrosshair )
		pFnToggleForceCrosshair = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleForceCrosshair" );

	UKFCheatManager_execToggleForceCrosshair_Parms ToggleForceCrosshair_Parms;

	this->ProcessEvent ( pFnToggleForceCrosshair, &ToggleForceCrosshair_Parms, NULL );
};

// Function KFGame.KFCheatManager.DebugShowVoteKick
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DebugShowVoteKick ( )
{
	static UFunction* pFnDebugShowVoteKick = NULL;

	if ( ! pFnDebugShowVoteKick )
		pFnDebugShowVoteKick = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DebugShowVoteKick" );

	UKFCheatManager_execDebugShowVoteKick_Parms DebugShowVoteKick_Parms;

	this->ProcessEvent ( pFnDebugShowVoteKick, &DebugShowVoteKick_Parms, NULL );
};

// Function KFGame.KFCheatManager.RequestSkipTraderTimer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::RequestSkipTraderTimer ( )
{
	static UFunction* pFnRequestSkipTraderTimer = NULL;

	if ( ! pFnRequestSkipTraderTimer )
		pFnRequestSkipTraderTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.RequestSkipTraderTimer" );

	UKFCheatManager_execRequestSkipTraderTimer_Parms RequestSkipTraderTimer_Parms;

	this->ProcessEvent ( pFnRequestSkipTraderTimer, &RequestSkipTraderTimer_Parms, NULL );
};

// Function KFGame.KFCheatManager.HideMenus
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HideMenus ( )
{
	static UFunction* pFnHideMenus = NULL;

	if ( ! pFnHideMenus )
		pFnHideMenus = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HideMenus" );

	UKFCheatManager_execHideMenus_Parms HideMenus_Parms;

	this->ProcessEvent ( pFnHideMenus, &HideMenus_Parms, NULL );
};

// Function KFGame.KFCheatManager.GoSpread
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::GoSpread ( )
{
	static UFunction* pFnGoSpread = NULL;

	if ( ! pFnGoSpread )
		pFnGoSpread = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GoSpread" );

	UKFCheatManager_execGoSpread_Parms GoSpread_Parms;

	this->ProcessEvent ( pFnGoSpread, &GoSpread_Parms, NULL );
};

// Function KFGame.KFCheatManager.NoSpread
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::NoSpread ( )
{
	static UFunction* pFnNoSpread = NULL;

	if ( ! pFnNoSpread )
		pFnNoSpread = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.NoSpread" );

	UKFCheatManager_execNoSpread_Parms NoSpread_Parms;

	this->ProcessEvent ( pFnNoSpread, &NoSpread_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetPauseMonsterAnims
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetPauseMonsterAnims ( )
{
	static UFunction* pFnSetPauseMonsterAnims = NULL;

	if ( ! pFnSetPauseMonsterAnims )
		pFnSetPauseMonsterAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetPauseMonsterAnims" );

	UKFCheatManager_execSetPauseMonsterAnims_Parms SetPauseMonsterAnims_Parms;

	this->ProcessEvent ( pFnSetPauseMonsterAnims, &SetPauseMonsterAnims_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestWeaponAnim
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestWeaponAnim ( )
{
	static UFunction* pFnTestWeaponAnim = NULL;

	if ( ! pFnTestWeaponAnim )
		pFnTestWeaponAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestWeaponAnim" );

	UKFCheatManager_execTestWeaponAnim_Parms TestWeaponAnim_Parms;

	this->ProcessEvent ( pFnTestWeaponAnim, &TestWeaponAnim_Parms, NULL );
};

// Function KFGame.KFCheatManager.FreezeWeapAnimUpdate
// [0x00020102] 
// Parameters infos:

void UKFCheatManager::FreezeWeapAnimUpdate ( )
{
	static UFunction* pFnFreezeWeapAnimUpdate = NULL;

	if ( ! pFnFreezeWeapAnimUpdate )
		pFnFreezeWeapAnimUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FreezeWeapAnimUpdate" );

	UKFCheatManager_execFreezeWeapAnimUpdate_Parms FreezeWeapAnimUpdate_Parms;

	this->ProcessEvent ( pFnFreezeWeapAnimUpdate, &FreezeWeapAnimUpdate_Parms, NULL );
};

// Function KFGame.KFCheatManager.WeapForceIdle
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::WeapForceIdle ( )
{
	static UFunction* pFnWeapForceIdle = NULL;

	if ( ! pFnWeapForceIdle )
		pFnWeapForceIdle = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.WeapForceIdle" );

	UKFCheatManager_execWeapForceIdle_Parms WeapForceIdle_Parms;

	this->ProcessEvent ( pFnWeapForceIdle, &WeapForceIdle_Parms, NULL );
};

// Function KFGame.KFCheatManager.HansGunsAway
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HansGunsAway ( )
{
	static UFunction* pFnHansGunsAway = NULL;

	if ( ! pFnHansGunsAway )
		pFnHansGunsAway = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HansGunsAway" );

	UKFCheatManager_execHansGunsAway_Parms HansGunsAway_Parms;

	this->ProcessEvent ( pFnHansGunsAway, &HansGunsAway_Parms, NULL );
};

// Function KFGame.KFCheatManager.HansGunsOut
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::HansGunsOut ( )
{
	static UFunction* pFnHansGunsOut = NULL;

	if ( ! pFnHansGunsOut )
		pFnHansGunsOut = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.HansGunsOut" );

	UKFCheatManager_execHansGunsOut_Parms HansGunsOut_Parms;

	this->ProcessEvent ( pFnHansGunsOut, &HansGunsOut_Parms, NULL );
};

// Function KFGame.KFCheatManager.SpawnGunModel
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SpawnGunModel ( )
{
	static UFunction* pFnSpawnGunModel = NULL;

	if ( ! pFnSpawnGunModel )
		pFnSpawnGunModel = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SpawnGunModel" );

	UKFCheatManager_execSpawnGunModel_Parms SpawnGunModel_Parms;

	this->ProcessEvent ( pFnSpawnGunModel, &SpawnGunModel_Parms, NULL );
};

// Function KFGame.KFCheatManager.LogAllWaves
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LogAllWaves ( )
{
	static UFunction* pFnLogAllWaves = NULL;

	if ( ! pFnLogAllWaves )
		pFnLogAllWaves = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LogAllWaves" );

	UKFCheatManager_execLogAllWaves_Parms LogAllWaves_Parms;

	this->ProcessEvent ( pFnLogAllWaves, &LogAllWaves_Parms, NULL );
};

// Function KFGame.KFCheatManager.LogCurrentWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::LogCurrentWave ( )
{
	static UFunction* pFnLogCurrentWave = NULL;

	if ( ! pFnLogCurrentWave )
		pFnLogCurrentWave = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.LogCurrentWave" );

	UKFCheatManager_execLogCurrentWave_Parms LogCurrentWave_Parms;

	this->ProcessEvent ( pFnLogCurrentWave, &LogCurrentWave_Parms, NULL );
};

// Function KFGame.KFCheatManager.ZedStuck
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ZedStuck ( )
{
	static UFunction* pFnZedStuck = NULL;

	if ( ! pFnZedStuck )
		pFnZedStuck = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ZedStuck" );

	UKFCheatManager_execZedStuck_Parms ZedStuck_Parms;

	this->ProcessEvent ( pFnZedStuck, &ZedStuck_Parms, NULL );
};

// Function KFGame.KFCheatManager.ZedTeleport
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ZedTeleport ( )
{
	static UFunction* pFnZedTeleport = NULL;

	if ( ! pFnZedTeleport )
		pFnZedTeleport = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ZedTeleport" );

	UKFCheatManager_execZedTeleport_Parms ZedTeleport_Parms;

	this->ProcessEvent ( pFnZedTeleport, &ZedTeleport_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleFrustration
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleFrustration ( )
{
	static UFunction* pFnToggleFrustration = NULL;

	if ( ! pFnToggleFrustration )
		pFnToggleFrustration = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleFrustration" );

	UKFCheatManager_execToggleFrustration_Parms ToggleFrustration_Parms;

	this->ProcessEvent ( pFnToggleFrustration, &ToggleFrustration_Parms, NULL );
};

// Function KFGame.KFCheatManager.ToggleZedsIgnoreMe
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::ToggleZedsIgnoreMe ( )
{
	static UFunction* pFnToggleZedsIgnoreMe = NULL;

	if ( ! pFnToggleZedsIgnoreMe )
		pFnToggleZedsIgnoreMe = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ToggleZedsIgnoreMe" );

	UKFCheatManager_execToggleZedsIgnoreMe_Parms ToggleZedsIgnoreMe_Parms;

	this->ProcessEvent ( pFnToggleZedsIgnoreMe, &ToggleZedsIgnoreMe_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetChar
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetChar ( )
{
	static UFunction* pFnSetChar = NULL;

	if ( ! pFnSetChar )
		pFnSetChar = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetChar" );

	UKFCheatManager_execSetChar_Parms SetChar_Parms;

	this->ProcessEvent ( pFnSetChar, &SetChar_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetInflate
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetInflate ( )
{
	static UFunction* pFnSetInflate = NULL;

	if ( ! pFnSetInflate )
		pFnSetInflate = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetInflate" );

	UKFCheatManager_execSetInflate_Parms SetInflate_Parms;

	this->ProcessEvent ( pFnSetInflate, &SetInflate_Parms, NULL );
};

// Function KFGame.KFCheatManager.StopBurnFX
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::StopBurnFX ( )
{
	static UFunction* pFnStopBurnFX = NULL;

	if ( ! pFnStopBurnFX )
		pFnStopBurnFX = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.StopBurnFX" );

	UKFCheatManager_execStopBurnFX_Parms StopBurnFX_Parms;

	this->ProcessEvent ( pFnStopBurnFX, &StopBurnFX_Parms, NULL );
};

// Function KFGame.KFCheatManager.BurnFX
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::BurnFX ( )
{
	static UFunction* pFnBurnFX = NULL;

	if ( ! pFnBurnFX )
		pFnBurnFX = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.BurnFX" );

	UKFCheatManager_execBurnFX_Parms BurnFX_Parms;

	this->ProcessEvent ( pFnBurnFX, &BurnFX_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestNukeGrenade
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestNukeGrenade ( )
{
	static UFunction* pFnTestNukeGrenade = NULL;

	if ( ! pFnTestNukeGrenade )
		pFnTestNukeGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestNukeGrenade" );

	UKFCheatManager_execTestNukeGrenade_Parms TestNukeGrenade_Parms;

	this->ProcessEvent ( pFnTestNukeGrenade, &TestNukeGrenade_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestConcussiveGrenade
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestConcussiveGrenade ( )
{
	static UFunction* pFnTestConcussiveGrenade = NULL;

	if ( ! pFnTestConcussiveGrenade )
		pFnTestConcussiveGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestConcussiveGrenade" );

	UKFCheatManager_execTestConcussiveGrenade_Parms TestConcussiveGrenade_Parms;

	this->ProcessEvent ( pFnTestConcussiveGrenade, &TestConcussiveGrenade_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestGrenade
// [0x00824202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestGrenade ( )
{
	static UFunction* pFnTestGrenade = NULL;

	if ( ! pFnTestGrenade )
		pFnTestGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestGrenade" );

	UKFCheatManager_execTestGrenade_Parms TestGrenade_Parms;

	this->ProcessEvent ( pFnTestGrenade, &TestGrenade_Parms, NULL );
};

// Function KFGame.KFCheatManager.FireAgain
// [0x00020102] 
// Parameters infos:

void UKFCheatManager::FireAgain ( )
{
	static UFunction* pFnFireAgain = NULL;

	if ( ! pFnFireAgain )
		pFnFireAgain = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FireAgain" );

	UKFCheatManager_execFireAgain_Parms FireAgain_Parms;

	this->ProcessEvent ( pFnFireAgain, &FireAgain_Parms, NULL );
};

// Function KFGame.KFCheatManager.StopAutoFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::StopAutoFire ( )
{
	static UFunction* pFnStopAutoFire = NULL;

	if ( ! pFnStopAutoFire )
		pFnStopAutoFire = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.StopAutoFire" );

	UKFCheatManager_execStopAutoFire_Parms StopAutoFire_Parms;

	this->ProcessEvent ( pFnStopAutoFire, &StopAutoFire_Parms, NULL );
};

// Function KFGame.KFCheatManager.AutoFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::AutoFire ( )
{
	static UFunction* pFnAutoFire = NULL;

	if ( ! pFnAutoFire )
		pFnAutoFire = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AutoFire" );

	UKFCheatManager_execAutoFire_Parms AutoFire_Parms;

	this->ProcessEvent ( pFnAutoFire, &AutoFire_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestLocalMessage
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestLocalMessage ( )
{
	static UFunction* pFnTestLocalMessage = NULL;

	if ( ! pFnTestLocalMessage )
		pFnTestLocalMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestLocalMessage" );

	UKFCheatManager_execTestLocalMessage_Parms TestLocalMessage_Parms;

	this->ProcessEvent ( pFnTestLocalMessage, &TestLocalMessage_Parms, NULL );
};

// Function KFGame.KFCheatManager.PrintOutCharacterCosmeticInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PrintOutCharacterCosmeticInfo ( )
{
	static UFunction* pFnPrintOutCharacterCosmeticInfo = NULL;

	if ( ! pFnPrintOutCharacterCosmeticInfo )
		pFnPrintOutCharacterCosmeticInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PrintOutCharacterCosmeticInfo" );

	UKFCheatManager_execPrintOutCharacterCosmeticInfo_Parms PrintOutCharacterCosmeticInfo_Parms;

	this->ProcessEvent ( pFnPrintOutCharacterCosmeticInfo, &PrintOutCharacterCosmeticInfo_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetCharacterAttachment
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetCharacterAttachment ( )
{
	static UFunction* pFnSetCharacterAttachment = NULL;

	if ( ! pFnSetCharacterAttachment )
		pFnSetCharacterAttachment = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetCharacterAttachment" );

	UKFCheatManager_execSetCharacterAttachment_Parms SetCharacterAttachment_Parms;

	this->ProcessEvent ( pFnSetCharacterAttachment, &SetCharacterAttachment_Parms, NULL );
};

// Function KFGame.KFCheatManager.MakeFakePopUp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::MakeFakePopUp ( )
{
	static UFunction* pFnMakeFakePopUp = NULL;

	if ( ! pFnMakeFakePopUp )
		pFnMakeFakePopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.MakeFakePopUp" );

	UKFCheatManager_execMakeFakePopUp_Parms MakeFakePopUp_Parms;

	this->ProcessEvent ( pFnMakeFakePopUp, &MakeFakePopUp_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestNumbPrompts
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestNumbPrompts ( )
{
	static UFunction* pFnTestNumbPrompts = NULL;

	if ( ! pFnTestNumbPrompts )
		pFnTestNumbPrompts = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestNumbPrompts" );

	UKFCheatManager_execTestNumbPrompts_Parms TestNumbPrompts_Parms;

	this->ProcessEvent ( pFnTestNumbPrompts, &TestNumbPrompts_Parms, NULL );
};

// Function KFGame.KFCheatManager.TestSongInfoWidget
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::TestSongInfoWidget ( )
{
	static UFunction* pFnTestSongInfoWidget = NULL;

	if ( ! pFnTestSongInfoWidget )
		pFnTestSongInfoWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.TestSongInfoWidget" );

	UKFCheatManager_execTestSongInfoWidget_Parms TestSongInfoWidget_Parms;

	this->ProcessEvent ( pFnTestSongInfoWidget, &TestSongInfoWidget_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetIISText
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetIISText ( )
{
	static UFunction* pFnSetIISText = NULL;

	if ( ! pFnSetIISText )
		pFnSetIISText = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetIISText" );

	UKFCheatManager_execSetIISText_Parms SetIISText_Parms;

	this->ProcessEvent ( pFnSetIISText, &SetIISText_Parms, NULL );
};

// Function KFGame.KFCheatManager.OpenIIS
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::OpenIIS ( )
{
	static UFunction* pFnOpenIIS = NULL;

	if ( ! pFnOpenIIS )
		pFnOpenIIS = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OpenIIS" );

	UKFCheatManager_execOpenIIS_Parms OpenIIS_Parms;

	this->ProcessEvent ( pFnOpenIIS, &OpenIIS_Parms, NULL );
};

// Function KFGame.KFCheatManager.CloseScreenSizeMovie
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::CloseScreenSizeMovie ( )
{
	static UFunction* pFnCloseScreenSizeMovie = NULL;

	if ( ! pFnCloseScreenSizeMovie )
		pFnCloseScreenSizeMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.CloseScreenSizeMovie" );

	UKFCheatManager_execCloseScreenSizeMovie_Parms CloseScreenSizeMovie_Parms;

	this->ProcessEvent ( pFnCloseScreenSizeMovie, &CloseScreenSizeMovie_Parms, NULL );
};

// Function KFGame.KFCheatManager.OpenScreenSizeMovie
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::OpenScreenSizeMovie ( )
{
	static UFunction* pFnOpenScreenSizeMovie = NULL;

	if ( ! pFnOpenScreenSizeMovie )
		pFnOpenScreenSizeMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.OpenScreenSizeMovie" );

	UKFCheatManager_execOpenScreenSizeMovie_Parms OpenScreenSizeMovie_Parms;

	this->ProcessEvent ( pFnOpenScreenSizeMovie, &OpenScreenSizeMovie_Parms, NULL );
};

// Function KFGame.KFCheatManager.DisplayFreeTrialOverPopUp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DisplayFreeTrialOverPopUp ( )
{
	static UFunction* pFnDisplayFreeTrialOverPopUp = NULL;

	if ( ! pFnDisplayFreeTrialOverPopUp )
		pFnDisplayFreeTrialOverPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DisplayFreeTrialOverPopUp" );

	UKFCheatManager_execDisplayFreeTrialOverPopUp_Parms DisplayFreeTrialOverPopUp_Parms;

	this->ProcessEvent ( pFnDisplayFreeTrialOverPopUp, &DisplayFreeTrialOverPopUp_Parms, NULL );
};

// Function KFGame.KFCheatManager.DisplayFreeTrialFeatureBlockedPopUp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::DisplayFreeTrialFeatureBlockedPopUp ( )
{
	static UFunction* pFnDisplayFreeTrialFeatureBlockedPopUp = NULL;

	if ( ! pFnDisplayFreeTrialFeatureBlockedPopUp )
		pFnDisplayFreeTrialFeatureBlockedPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.DisplayFreeTrialFeatureBlockedPopUp" );

	UKFCheatManager_execDisplayFreeTrialFeatureBlockedPopUp_Parms DisplayFreeTrialFeatureBlockedPopUp_Parms;

	this->ProcessEvent ( pFnDisplayFreeTrialFeatureBlockedPopUp, &DisplayFreeTrialFeatureBlockedPopUp_Parms, NULL );
};

// Function KFGame.KFCheatManager.PrintOutCurrentPrestigeInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::PrintOutCurrentPrestigeInfo ( )
{
	static UFunction* pFnPrintOutCurrentPrestigeInfo = NULL;

	if ( ! pFnPrintOutCurrentPrestigeInfo )
		pFnPrintOutCurrentPrestigeInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.PrintOutCurrentPrestigeInfo" );

	UKFCheatManager_execPrintOutCurrentPrestigeInfo_Parms PrintOutCurrentPrestigeInfo_Parms;

	this->ProcessEvent ( pFnPrintOutCurrentPrestigeInfo, &PrintOutCurrentPrestigeInfo_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetInventoryFilter
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetInventoryFilter ( )
{
	static UFunction* pFnSetInventoryFilter = NULL;

	if ( ! pFnSetInventoryFilter )
		pFnSetInventoryFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetInventoryFilter" );

	UKFCheatManager_execSetInventoryFilter_Parms SetInventoryFilter_Parms;

	this->ProcessEvent ( pFnSetInventoryFilter, &SetInventoryFilter_Parms, NULL );
};

// Function KFGame.KFCheatManager.SetFakeDownloadProgress
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFCheatManager::SetFakeDownloadProgress ( )
{
	static UFunction* pFnSetFakeDownloadProgress = NULL;

	if ( ! pFnSetFakeDownloadProgress )
		pFnSetFakeDownloadProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetFakeDownloadProgress" );

	UKFCheatManager_execSetFakeDownloadProgress_Parms SetFakeDownloadProgress_Parms;

	this->ProcessEvent ( pFnSetFakeDownloadProgress, &SetFakeDownloadProgress_Parms, NULL );
};

// Function KFGame.KFCheatManager.GetMyPawn
// [0x00020002] 
// Parameters infos:

void UKFCheatManager::GetMyPawn ( )
{
	static UFunction* pFnGetMyPawn = NULL;

	if ( ! pFnGetMyPawn )
		pFnGetMyPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GetMyPawn" );

	UKFCheatManager_execGetMyPawn_Parms GetMyPawn_Parms;

	this->ProcessEvent ( pFnGetMyPawn, &GetMyPawn_Parms, NULL );
};

// Function KFGame.KFCheatManager.GiveVaultDosh
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::GiveVaultDosh ( )
{
	static UFunction* pFnGiveVaultDosh = NULL;

	if ( ! pFnGiveVaultDosh )
		pFnGiveVaultDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.GiveVaultDosh" );

	UKFCheatManager_execGiveVaultDosh_Parms GiveVaultDosh_Parms;

	pFnGiveVaultDosh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGiveVaultDosh, &GiveVaultDosh_Parms, NULL );

	pFnGiveVaultDosh->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.ResetDailyObjectives
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::ResetDailyObjectives ( )
{
	static UFunction* pFnResetDailyObjectives = NULL;

	if ( ! pFnResetDailyObjectives )
		pFnResetDailyObjectives = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ResetDailyObjectives" );

	UKFCheatManager_execResetDailyObjectives_Parms ResetDailyObjectives_Parms;

	pFnResetDailyObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetDailyObjectives, &ResetDailyObjectives_Parms, NULL );

	pFnResetDailyObjectives->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.ForceDailyObjective
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::ForceDailyObjective ( )
{
	static UFunction* pFnForceDailyObjective = NULL;

	if ( ! pFnForceDailyObjective )
		pFnForceDailyObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ForceDailyObjective" );

	UKFCheatManager_execForceDailyObjective_Parms ForceDailyObjective_Parms;

	pFnForceDailyObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceDailyObjective, &ForceDailyObjective_Parms, NULL );

	pFnForceDailyObjective->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.MakeEmptyPackage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFCheatManager::MakeEmptyPackage ( )
{
	static UFunction* pFnMakeEmptyPackage = NULL;

	if ( ! pFnMakeEmptyPackage )
		pFnMakeEmptyPackage = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.MakeEmptyPackage" );

	UKFCheatManager_execMakeEmptyPackage_Parms MakeEmptyPackage_Parms;

	pFnMakeEmptyPackage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeEmptyPackage, &MakeEmptyPackage_Parms, NULL );

	pFnMakeEmptyPackage->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.FindTranslucencyInheritDominantShadowMaterials
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::FindTranslucencyInheritDominantShadowMaterials ( )
{
	static UFunction* pFnFindTranslucencyInheritDominantShadowMaterials = NULL;

	if ( ! pFnFindTranslucencyInheritDominantShadowMaterials )
		pFnFindTranslucencyInheritDominantShadowMaterials = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FindTranslucencyInheritDominantShadowMaterials" );

	UKFCheatManager_execFindTranslucencyInheritDominantShadowMaterials_Parms FindTranslucencyInheritDominantShadowMaterials_Parms;

	pFnFindTranslucencyInheritDominantShadowMaterials->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTranslucencyInheritDominantShadowMaterials, &FindTranslucencyInheritDominantShadowMaterials_Parms, NULL );

	pFnFindTranslucencyInheritDominantShadowMaterials->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.ReadGlobalStat
// [0x00024600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::ReadGlobalStat ( )
{
	static UFunction* pFnReadGlobalStat = NULL;

	if ( ! pFnReadGlobalStat )
		pFnReadGlobalStat = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ReadGlobalStat" );

	UKFCheatManager_execReadGlobalStat_Parms ReadGlobalStat_Parms;

	pFnReadGlobalStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReadGlobalStat, &ReadGlobalStat_Parms, NULL );

	pFnReadGlobalStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.FixupCharacterAttachmentLocalization
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::FixupCharacterAttachmentLocalization ( )
{
	static UFunction* pFnFixupCharacterAttachmentLocalization = NULL;

	if ( ! pFnFixupCharacterAttachmentLocalization )
		pFnFixupCharacterAttachmentLocalization = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.FixupCharacterAttachmentLocalization" );

	UKFCheatManager_execFixupCharacterAttachmentLocalization_Parms FixupCharacterAttachmentLocalization_Parms;

	pFnFixupCharacterAttachmentLocalization->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFixupCharacterAttachmentLocalization, &FixupCharacterAttachmentLocalization_Parms, NULL );

	pFnFixupCharacterAttachmentLocalization->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.AnalyzeCharacterAttachments
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::AnalyzeCharacterAttachments ( )
{
	static UFunction* pFnAnalyzeCharacterAttachments = NULL;

	if ( ! pFnAnalyzeCharacterAttachments )
		pFnAnalyzeCharacterAttachments = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.AnalyzeCharacterAttachments" );

	UKFCheatManager_execAnalyzeCharacterAttachments_Parms AnalyzeCharacterAttachments_Parms;

	pFnAnalyzeCharacterAttachments->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAnalyzeCharacterAttachments, &AnalyzeCharacterAttachments_Parms, NULL );

	pFnAnalyzeCharacterAttachments->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.ResetPerkLevels
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::ResetPerkLevels ( )
{
	static UFunction* pFnResetPerkLevels = NULL;

	if ( ! pFnResetPerkLevels )
		pFnResetPerkLevels = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.ResetPerkLevels" );

	UKFCheatManager_execResetPerkLevels_Parms ResetPerkLevels_Parms;

	pFnResetPerkLevels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetPerkLevels, &ResetPerkLevels_Parms, NULL );

	pFnResetPerkLevels->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.SetPerkPrestigeLevel
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::SetPerkPrestigeLevel ( )
{
	static UFunction* pFnSetPerkPrestigeLevel = NULL;

	if ( ! pFnSetPerkPrestigeLevel )
		pFnSetPerkPrestigeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetPerkPrestigeLevel" );

	UKFCheatManager_execSetPerkPrestigeLevel_Parms SetPerkPrestigeLevel_Parms;

	pFnSetPerkPrestigeLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPerkPrestigeLevel, &SetPerkPrestigeLevel_Parms, NULL );

	pFnSetPerkPrestigeLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFCheatManager.SetPerkLevel
// [0x00020601] ( FUNC_Final | FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFCheatManager::SetPerkLevel ( )
{
	static UFunction* pFnSetPerkLevel = NULL;

	if ( ! pFnSetPerkLevel )
		pFnSetPerkLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFCheatManager.SetPerkLevel" );

	UKFCheatManager_execSetPerkLevel_Parms SetPerkLevel_Parms;

	pFnSetPerkLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPerkLevel, &SetPerkLevel_Parms, NULL );

	pFnSetPerkLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.KFDebug_ClearText
// [0x00026002] 
// Parameters infos:

void AKFDebugLines::KFDebug_ClearText ( )
{
	static UFunction* pFnKFDebug_ClearText = NULL;

	if ( ! pFnKFDebug_ClearText )
		pFnKFDebug_ClearText = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.KFDebug_ClearText" );

	AKFDebugLines_execKFDebug_ClearText_Parms KFDebug_ClearText_Parms;

	this->ProcessEvent ( pFnKFDebug_ClearText, &KFDebug_ClearText_Parms, NULL );
};

// Function KFGame.KFDebugLines.KFDebug_ClearSpheres
// [0x00026002] 
// Parameters infos:

void AKFDebugLines::KFDebug_ClearSpheres ( )
{
	static UFunction* pFnKFDebug_ClearSpheres = NULL;

	if ( ! pFnKFDebug_ClearSpheres )
		pFnKFDebug_ClearSpheres = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.KFDebug_ClearSpheres" );

	AKFDebugLines_execKFDebug_ClearSpheres_Parms KFDebug_ClearSpheres_Parms;

	this->ProcessEvent ( pFnKFDebug_ClearSpheres, &KFDebug_ClearSpheres_Parms, NULL );
};

// Function KFGame.KFDebugLines.KFDebug_ClearLines
// [0x00026002] 
// Parameters infos:

void AKFDebugLines::KFDebug_ClearLines ( )
{
	static UFunction* pFnKFDebug_ClearLines = NULL;

	if ( ! pFnKFDebug_ClearLines )
		pFnKFDebug_ClearLines = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.KFDebug_ClearLines" );

	AKFDebugLines_execKFDebug_ClearLines_Parms KFDebug_ClearLines_Parms;

	this->ProcessEvent ( pFnKFDebug_ClearLines, &KFDebug_ClearLines_Parms, NULL );
};

// Function KFGame.KFDebugLines.GetDebugLines
// [0x00022002] 
// Parameters infos:

void AKFDebugLines::GetDebugLines ( )
{
	static UFunction* pFnGetDebugLines = NULL;

	if ( ! pFnGetDebugLines )
		pFnGetDebugLines = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.GetDebugLines" );

	AKFDebugLines_execGetDebugLines_Parms GetDebugLines_Parms;

	this->ProcessEvent ( pFnGetDebugLines, &GetDebugLines_Parms, NULL );
};

// Function KFGame.KFDebugLines.NewDebugSphere
// [0x00026002] 
// Parameters infos:

void AKFDebugLines::NewDebugSphere ( )
{
	static UFunction* pFnNewDebugSphere = NULL;

	if ( ! pFnNewDebugSphere )
		pFnNewDebugSphere = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.NewDebugSphere" );

	AKFDebugLines_execNewDebugSphere_Parms NewDebugSphere_Parms;

	this->ProcessEvent ( pFnNewDebugSphere, &NewDebugSphere_Parms, NULL );
};

// Function KFGame.KFDebugLines.NewDebugLineToOwner
// [0x00026002] 
// Parameters infos:

void AKFDebugLines::NewDebugLineToOwner ( )
{
	static UFunction* pFnNewDebugLineToOwner = NULL;

	if ( ! pFnNewDebugLineToOwner )
		pFnNewDebugLineToOwner = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.NewDebugLineToOwner" );

	AKFDebugLines_execNewDebugLineToOwner_Parms NewDebugLineToOwner_Parms;

	this->ProcessEvent ( pFnNewDebugLineToOwner, &NewDebugLineToOwner_Parms, NULL );
};

// Function KFGame.KFDebugLines.NewDebugLineFromOwner
// [0x00026002] 
// Parameters infos:

void AKFDebugLines::NewDebugLineFromOwner ( )
{
	static UFunction* pFnNewDebugLineFromOwner = NULL;

	if ( ! pFnNewDebugLineFromOwner )
		pFnNewDebugLineFromOwner = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.NewDebugLineFromOwner" );

	AKFDebugLines_execNewDebugLineFromOwner_Parms NewDebugLineFromOwner_Parms;

	this->ProcessEvent ( pFnNewDebugLineFromOwner, &NewDebugLineFromOwner_Parms, NULL );
};

// Function KFGame.KFDebugLines.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDebugLines::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.Destroyed" );

	AKFDebugLines_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFDebugLines.RemoveFromPostRenderList
// [0x00020002] 
// Parameters infos:

void AKFDebugLines::RemoveFromPostRenderList ( )
{
	static UFunction* pFnRemoveFromPostRenderList = NULL;

	if ( ! pFnRemoveFromPostRenderList )
		pFnRemoveFromPostRenderList = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.RemoveFromPostRenderList" );

	AKFDebugLines_execRemoveFromPostRenderList_Parms RemoveFromPostRenderList_Parms;

	this->ProcessEvent ( pFnRemoveFromPostRenderList, &RemoveFromPostRenderList_Parms, NULL );
};

// Function KFGame.KFDebugLines.AddToPostRenderList
// [0x00020002] 
// Parameters infos:

void AKFDebugLines::AddToPostRenderList ( )
{
	static UFunction* pFnAddToPostRenderList = NULL;

	if ( ! pFnAddToPostRenderList )
		pFnAddToPostRenderList = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.AddToPostRenderList" );

	AKFDebugLines_execAddToPostRenderList_Parms AddToPostRenderList_Parms;

	this->ProcessEvent ( pFnAddToPostRenderList, &AddToPostRenderList_Parms, NULL );
};

// Function KFGame.KFDebugLines.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDebugLines::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.PostBeginPlay" );

	AKFDebugLines_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFDebugLines.ClearAll
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::ClearAll ( )
{
	static UFunction* pFnClearAll = NULL;

	if ( ! pFnClearAll )
		pFnClearAll = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.ClearAll" );

	AKFDebugLines_execClearAll_Parms ClearAll_Parms;

	pFnClearAll->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAll, &ClearAll_Parms, NULL );

	pFnClearAll->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.RemoveOwnedDebugText3D
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::RemoveOwnedDebugText3D ( )
{
	static UFunction* pFnRemoveOwnedDebugText3D = NULL;

	if ( ! pFnRemoveOwnedDebugText3D )
		pFnRemoveOwnedDebugText3D = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.RemoveOwnedDebugText3D" );

	AKFDebugLines_execRemoveOwnedDebugText3D_Parms RemoveOwnedDebugText3D_Parms;

	pFnRemoveOwnedDebugText3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveOwnedDebugText3D, &RemoveOwnedDebugText3D_Parms, NULL );

	pFnRemoveOwnedDebugText3D->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.RemoveOwnedDebugSpheres
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::RemoveOwnedDebugSpheres ( )
{
	static UFunction* pFnRemoveOwnedDebugSpheres = NULL;

	if ( ! pFnRemoveOwnedDebugSpheres )
		pFnRemoveOwnedDebugSpheres = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.RemoveOwnedDebugSpheres" );

	AKFDebugLines_execRemoveOwnedDebugSpheres_Parms RemoveOwnedDebugSpheres_Parms;

	pFnRemoveOwnedDebugSpheres->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveOwnedDebugSpheres, &RemoveOwnedDebugSpheres_Parms, NULL );

	pFnRemoveOwnedDebugSpheres->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.RemoveOwnedDebugLines
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::RemoveOwnedDebugLines ( )
{
	static UFunction* pFnRemoveOwnedDebugLines = NULL;

	if ( ! pFnRemoveOwnedDebugLines )
		pFnRemoveOwnedDebugLines = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.RemoveOwnedDebugLines" );

	AKFDebugLines_execRemoveOwnedDebugLines_Parms RemoveOwnedDebugLines_Parms;

	pFnRemoveOwnedDebugLines->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveOwnedDebugLines, &RemoveOwnedDebugLines_Parms, NULL );

	pFnRemoveOwnedDebugLines->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.AddDebugText3D
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::AddDebugText3D ( )
{
	static UFunction* pFnAddDebugText3D = NULL;

	if ( ! pFnAddDebugText3D )
		pFnAddDebugText3D = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.AddDebugText3D" );

	AKFDebugLines_execAddDebugText3D_Parms AddDebugText3D_Parms;

	pFnAddDebugText3D->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDebugText3D, &AddDebugText3D_Parms, NULL );

	pFnAddDebugText3D->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.AddDebugSphere
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::AddDebugSphere ( )
{
	static UFunction* pFnAddDebugSphere = NULL;

	if ( ! pFnAddDebugSphere )
		pFnAddDebugSphere = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.AddDebugSphere" );

	AKFDebugLines_execAddDebugSphere_Parms AddDebugSphere_Parms;

	pFnAddDebugSphere->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDebugSphere, &AddDebugSphere_Parms, NULL );

	pFnAddDebugSphere->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.AddDebugLineToOwner
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::AddDebugLineToOwner ( )
{
	static UFunction* pFnAddDebugLineToOwner = NULL;

	if ( ! pFnAddDebugLineToOwner )
		pFnAddDebugLineToOwner = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.AddDebugLineToOwner" );

	AKFDebugLines_execAddDebugLineToOwner_Parms AddDebugLineToOwner_Parms;

	pFnAddDebugLineToOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDebugLineToOwner, &AddDebugLineToOwner_Parms, NULL );

	pFnAddDebugLineToOwner->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.AddDebugLineFromOwner
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::AddDebugLineFromOwner ( )
{
	static UFunction* pFnAddDebugLineFromOwner = NULL;

	if ( ! pFnAddDebugLineFromOwner )
		pFnAddDebugLineFromOwner = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.AddDebugLineFromOwner" );

	AKFDebugLines_execAddDebugLineFromOwner_Parms AddDebugLineFromOwner_Parms;

	pFnAddDebugLineFromOwner->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDebugLineFromOwner, &AddDebugLineFromOwner_Parms, NULL );

	pFnAddDebugLineFromOwner->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.AddDebugLine
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::AddDebugLine ( )
{
	static UFunction* pFnAddDebugLine = NULL;

	if ( ! pFnAddDebugLine )
		pFnAddDebugLine = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.AddDebugLine" );

	AKFDebugLines_execAddDebugLine_Parms AddDebugLine_Parms;

	pFnAddDebugLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddDebugLine, &AddDebugLine_Parms, NULL );

	pFnAddDebugLine->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.AddPawnDebugLine
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::AddPawnDebugLine ( )
{
	static UFunction* pFnAddPawnDebugLine = NULL;

	if ( ! pFnAddPawnDebugLine )
		pFnAddPawnDebugLine = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.AddPawnDebugLine" );

	AKFDebugLines_execAddPawnDebugLine_Parms AddPawnDebugLine_Parms;

	pFnAddPawnDebugLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPawnDebugLine, &AddPawnDebugLine_Parms, NULL );

	pFnAddPawnDebugLine->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugLines.NativePostRenderFor
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFDebugLines::NativePostRenderFor ( )
{
	static UFunction* pFnNativePostRenderFor = NULL;

	if ( ! pFnNativePostRenderFor )
		pFnNativePostRenderFor = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugLines.NativePostRenderFor" );

	AKFDebugLines_execNativePostRenderFor_Parms NativePostRenderFor_Parms;

	pFnNativePostRenderFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativePostRenderFor, &NativePostRenderFor_Parms, NULL );

	pFnNativePostRenderFor->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.ToggleAllDamage
// [0x00020002] 
// Parameters infos:

void AKFDestructibleActor::ToggleAllDamage ( )
{
	static UFunction* pFnToggleAllDamage = NULL;

	if ( ! pFnToggleAllDamage )
		pFnToggleAllDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.ToggleAllDamage" );

	AKFDestructibleActor_execToggleAllDamage_Parms ToggleAllDamage_Parms;

	this->ProcessEvent ( pFnToggleAllDamage, &ToggleAllDamage_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.Reset
// [0x00020102] 
// Parameters infos:

void AKFDestructibleActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.Reset" );

	AKFDestructibleActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.MoveCollidingPawns
// [0x00020000] 
// Parameters infos:

void AKFDestructibleActor::MoveCollidingPawns ( )
{
	static UFunction* pFnMoveCollidingPawns = NULL;

	if ( ! pFnMoveCollidingPawns )
		pFnMoveCollidingPawns = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.MoveCollidingPawns" );

	AKFDestructibleActor_execMoveCollidingPawns_Parms MoveCollidingPawns_Parms;

	this->ProcessEvent ( pFnMoveCollidingPawns, &MoveCollidingPawns_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.UnShutDownObject
// [0x00080902] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventUnShutDownObject ( )
{
	static UFunction* pFnUnShutDownObject = NULL;

	if ( ! pFnUnShutDownObject )
		pFnUnShutDownObject = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.UnShutDownObject" );

	AKFDestructibleActor_eventUnShutDownObject_Parms UnShutDownObject_Parms;

	this->ProcessEvent ( pFnUnShutDownObject, &UnShutDownObject_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.ShutDownSubObject
// [0x00480902] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventShutDownSubObject ( )
{
	static UFunction* pFnShutDownSubObject = NULL;

	if ( ! pFnShutDownSubObject )
		pFnShutDownSubObject = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.ShutDownSubObject" );

	AKFDestructibleActor_eventShutDownSubObject_Parms ShutDownSubObject_Parms;

	this->ProcessEvent ( pFnShutDownSubObject, &ShutDownSubObject_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.ShutDownObject
// [0x00020102] 
// Parameters infos:

void AKFDestructibleActor::ShutDownObject ( )
{
	static UFunction* pFnShutDownObject = NULL;

	if ( ! pFnShutDownObject )
		pFnShutDownObject = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.ShutDownObject" );

	AKFDestructibleActor_execShutDownObject_Parms ShutDownObject_Parms;

	this->ProcessEvent ( pFnShutDownObject, &ShutDownObject_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.DelayedShutDownObject
// [0x00080902] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventDelayedShutDownObject ( )
{
	static UFunction* pFnDelayedShutDownObject = NULL;

	if ( ! pFnDelayedShutDownObject )
		pFnDelayedShutDownObject = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.DelayedShutDownObject" );

	AKFDestructibleActor_eventDelayedShutDownObject_Parms DelayedShutDownObject_Parms;

	this->ProcessEvent ( pFnDelayedShutDownObject, &DelayedShutDownObject_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.UnDestroy
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::UnDestroy ( )
{
	static UFunction* pFnUnDestroy = NULL;

	if ( ! pFnUnDestroy )
		pFnUnDestroy = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.UnDestroy" );

	AKFDestructibleActor_execUnDestroy_Parms UnDestroy_Parms;

	pFnUnDestroy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnDestroy, &UnDestroy_Parms, NULL );

	pFnUnDestroy->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.Explosion
// [0x00C20902] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventExplosion ( )
{
	static UFunction* pFnExplosion = NULL;

	if ( ! pFnExplosion )
		pFnExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.Explosion" );

	AKFDestructibleActor_eventExplosion_Parms Explosion_Parms;

	this->ProcessEvent ( pFnExplosion, &Explosion_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.RemoveDecals
// [0x00080500] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::RemoveDecals ( )
{
	static UFunction* pFnRemoveDecals = NULL;

	if ( ! pFnRemoveDecals )
		pFnRemoveDecals = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.RemoveDecals" );

	AKFDestructibleActor_execRemoveDecals_Parms RemoveDecals_Parms;

	pFnRemoveDecals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveDecals, &RemoveDecals_Parms, NULL );

	pFnRemoveDecals->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.ApplyDamageMod
// [0x00084500] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::ApplyDamageMod ( )
{
	static UFunction* pFnApplyDamageMod = NULL;

	if ( ! pFnApplyDamageMod )
		pFnApplyDamageMod = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.ApplyDamageMod" );

	AKFDestructibleActor_execApplyDamageMod_Parms ApplyDamageMod_Parms;

	pFnApplyDamageMod->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyDamageMod, &ApplyDamageMod_Parms, NULL );

	pFnApplyDamageMod->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.SetSubObjectStaticMesh
// [0x00080500] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::SetSubObjectStaticMesh ( )
{
	static UFunction* pFnSetSubObjectStaticMesh = NULL;

	if ( ! pFnSetSubObjectStaticMesh )
		pFnSetSubObjectStaticMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.SetSubObjectStaticMesh" );

	AKFDestructibleActor_execSetSubObjectStaticMesh_Parms SetSubObjectStaticMesh_Parms;

	pFnSetSubObjectStaticMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSubObjectStaticMesh, &SetSubObjectStaticMesh_Parms, NULL );

	pFnSetSubObjectStaticMesh->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.BumpedByMonster
// [0x00020002] 
// Parameters infos:

void AKFDestructibleActor::BumpedByMonster ( )
{
	static UFunction* pFnBumpedByMonster = NULL;

	if ( ! pFnBumpedByMonster )
		pFnBumpedByMonster = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.BumpedByMonster" );

	AKFDestructibleActor_execBumpedByMonster_Parms BumpedByMonster_Parms;

	this->ProcessEvent ( pFnBumpedByMonster, &BumpedByMonster_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.TriggerDestroyedEvent
// [0x00080802] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventTriggerDestroyedEvent ( )
{
	static UFunction* pFnTriggerDestroyedEvent = NULL;

	if ( ! pFnTriggerDestroyedEvent )
		pFnTriggerDestroyedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.TriggerDestroyedEvent" );

	AKFDestructibleActor_eventTriggerDestroyedEvent_Parms TriggerDestroyedEvent_Parms;

	this->ProcessEvent ( pFnTriggerDestroyedEvent, &TriggerDestroyedEvent_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.OnDestroyed
// [0x00120000] 
// Parameters infos:

void AKFDestructibleActor::OnDestroyed ( )
{
	static UFunction* pFnOnDestroyed = NULL;

	if ( ! pFnOnDestroyed )
		pFnOnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.OnDestroyed" );

	AKFDestructibleActor_execOnDestroyed_Parms OnDestroyed_Parms;

	this->ProcessEvent ( pFnOnDestroyed, &OnDestroyed_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.ApplySplashDamage
// [0x00420800] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventApplySplashDamage ( )
{
	static UFunction* pFnApplySplashDamage = NULL;

	if ( ! pFnApplySplashDamage )
		pFnApplySplashDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.ApplySplashDamage" );

	AKFDestructibleActor_eventApplySplashDamage_Parms ApplySplashDamage_Parms;

	this->ProcessEvent ( pFnApplySplashDamage, &ApplySplashDamage_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.ValidateHitComponent
// [0x00C20002] 
// Parameters infos:

void AKFDestructibleActor::ValidateHitComponent ( )
{
	static UFunction* pFnValidateHitComponent = NULL;

	if ( ! pFnValidateHitComponent )
		pFnValidateHitComponent = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.ValidateHitComponent" );

	AKFDestructibleActor_execValidateHitComponent_Parms ValidateHitComponent_Parms;

	this->ProcessEvent ( pFnValidateHitComponent, &ValidateHitComponent_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.InstaKillFromStandardNPCBumpDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventInstaKillFromStandardNPCBumpDamage ( )
{
	static UFunction* pFnInstaKillFromStandardNPCBumpDamage = NULL;

	if ( ! pFnInstaKillFromStandardNPCBumpDamage )
		pFnInstaKillFromStandardNPCBumpDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.InstaKillFromStandardNPCBumpDamage" );

	AKFDestructibleActor_eventInstaKillFromStandardNPCBumpDamage_Parms InstaKillFromStandardNPCBumpDamage_Parms;

	this->ProcessEvent ( pFnInstaKillFromStandardNPCBumpDamage, &InstaKillFromStandardNPCBumpDamage_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.InstaKillFromLargeNPCBumpDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventInstaKillFromLargeNPCBumpDamage ( )
{
	static UFunction* pFnInstaKillFromLargeNPCBumpDamage = NULL;

	if ( ! pFnInstaKillFromLargeNPCBumpDamage )
		pFnInstaKillFromLargeNPCBumpDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.InstaKillFromLargeNPCBumpDamage" );

	AKFDestructibleActor_eventInstaKillFromLargeNPCBumpDamage_Parms InstaKillFromLargeNPCBumpDamage_Parms;

	this->ProcessEvent ( pFnInstaKillFromLargeNPCBumpDamage, &InstaKillFromLargeNPCBumpDamage_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.IsVulnerableTo
// [0x00020002] 
// Parameters infos:

void AKFDestructibleActor::IsVulnerableTo ( )
{
	static UFunction* pFnIsVulnerableTo = NULL;

	if ( ! pFnIsVulnerableTo )
		pFnIsVulnerableTo = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.IsVulnerableTo" );

	AKFDestructibleActor_execIsVulnerableTo_Parms IsVulnerableTo_Parms;

	this->ProcessEvent ( pFnIsVulnerableTo, &IsVulnerableTo_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFDestructibleActor::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.AdjustDamage" );

	AKFDestructibleActor_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.TakeDamage" );

	AKFDestructibleActor_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:

void AKFDestructibleActor::TakeRadiusDamage ( )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.TakeRadiusDamage" );

	AKFDestructibleActor_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.GetMaxHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::GetMaxHealth ( )
{
	static UFunction* pFnGetMaxHealth = NULL;

	if ( ! pFnGetMaxHealth )
		pFnGetMaxHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.GetMaxHealth" );

	AKFDestructibleActor_execGetMaxHealth_Parms GetMaxHealth_Parms;

	pFnGetMaxHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxHealth, &GetMaxHealth_Parms, NULL );

	pFnGetMaxHealth->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.GetCurrentHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::GetCurrentHealth ( )
{
	static UFunction* pFnGetCurrentHealth = NULL;

	if ( ! pFnGetCurrentHealth )
		pFnGetCurrentHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.GetCurrentHealth" );

	AKFDestructibleActor_execGetCurrentHealth_Parms GetCurrentHealth_Parms;

	pFnGetCurrentHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentHealth, &GetCurrentHealth_Parms, NULL );

	pFnGetCurrentHealth->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.HasAnyHealth
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::HasAnyHealth ( )
{
	static UFunction* pFnHasAnyHealth = NULL;

	if ( ! pFnHasAnyHealth )
		pFnHasAnyHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.HasAnyHealth" );

	AKFDestructibleActor_execHasAnyHealth_Parms HasAnyHealth_Parms;

	pFnHasAnyHealth->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasAnyHealth, &HasAnyHealth_Parms, NULL );

	pFnHasAnyHealth->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.DamageSubObject
// [0x00080400] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::DamageSubObject ( )
{
	static UFunction* pFnDamageSubObject = NULL;

	if ( ! pFnDamageSubObject )
		pFnDamageSubObject = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.DamageSubObject" );

	AKFDestructibleActor_execDamageSubObject_Parms DamageSubObject_Parms;

	pFnDamageSubObject->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDamageSubObject, &DamageSubObject_Parms, NULL );

	pFnDamageSubObject->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.PostBeginPlay" );

	AKFDestructibleActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.OneTimeInit
// [0x00080500] ( FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::OneTimeInit ( )
{
	static UFunction* pFnOneTimeInit = NULL;

	if ( ! pFnOneTimeInit )
		pFnOneTimeInit = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.OneTimeInit" );

	AKFDestructibleActor_execOneTimeInit_Parms OneTimeInit_Parms;

	pFnOneTimeInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOneTimeInit, &OneTimeInit_Parms, NULL );

	pFnOneTimeInit->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.SetupComponents
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFDestructibleActor::SetupComponents ( )
{
	static UFunction* pFnSetupComponents = NULL;

	if ( ! pFnSetupComponents )
		pFnSetupComponents = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.SetupComponents" );

	AKFDestructibleActor_execSetupComponents_Parms SetupComponents_Parms;

	pFnSetupComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupComponents, &SetupComponents_Parms, NULL );

	pFnSetupComponents->FunctionFlags |= 0x400;
};

// Function KFGame.KFDestructibleActor.UnPackDamageMod
// [0x00420102] 
// Parameters infos:

void AKFDestructibleActor::UnPackDamageMod ( )
{
	static UFunction* pFnUnPackDamageMod = NULL;

	if ( ! pFnUnPackDamageMod )
		pFnUnPackDamageMod = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.UnPackDamageMod" );

	AKFDestructibleActor_execUnPackDamageMod_Parms UnPackDamageMod_Parms;

	this->ProcessEvent ( pFnUnPackDamageMod, &UnPackDamageMod_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.PackDamageMod
// [0x00020002] 
// Parameters infos:

void AKFDestructibleActor::PackDamageMod ( )
{
	static UFunction* pFnPackDamageMod = NULL;

	if ( ! pFnPackDamageMod )
		pFnPackDamageMod = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.PackDamageMod" );

	AKFDestructibleActor_execPackDamageMod_Parms PackDamageMod_Parms;

	this->ProcessEvent ( pFnPackDamageMod, &PackDamageMod_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.ReplicateDamageMod
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventReplicateDamageMod ( )
{
	static UFunction* pFnReplicateDamageMod = NULL;

	if ( ! pFnReplicateDamageMod )
		pFnReplicateDamageMod = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.ReplicateDamageMod" );

	AKFDestructibleActor_eventReplicateDamageMod_Parms ReplicateDamageMod_Parms;

	this->ProcessEvent ( pFnReplicateDamageMod, &ReplicateDamageMod_Parms, NULL );
};

// Function KFGame.KFDestructibleActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDestructibleActor::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDestructibleActor.ReplicatedEvent" );

	AKFDestructibleActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.TryFadeOut
// [0x00020002] 
// Parameters infos:

void AKFDroppedPickup::TryFadeOut ( )
{
	static UFunction* pFnTryFadeOut = NULL;

	if ( ! pFnTryFadeOut )
		pFnTryFadeOut = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.TryFadeOut" );

	AKFDroppedPickup_execTryFadeOut_Parms TryFadeOut_Parms;

	this->ProcessEvent ( pFnTryFadeOut, &TryFadeOut_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.DisableAuthorityRBSim
// [0x00020002] 
// Parameters infos:

void AKFDroppedPickup::DisableAuthorityRBSim ( )
{
	static UFunction* pFnDisableAuthorityRBSim = NULL;

	if ( ! pFnDisableAuthorityRBSim )
		pFnDisableAuthorityRBSim = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.DisableAuthorityRBSim" );

	AKFDroppedPickup_execDisableAuthorityRBSim_Parms DisableAuthorityRBSim_Parms;

	this->ProcessEvent ( pFnDisableAuthorityRBSim, &DisableAuthorityRBSim_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.Reset
// [0x00020002] 
// Parameters infos:

void AKFDroppedPickup::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.Reset" );

	AKFDroppedPickup_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.IsTouchBlockedBy
// [0x00020102] 
// Parameters infos:

void AKFDroppedPickup::IsTouchBlockedBy ( )
{
	static UFunction* pFnIsTouchBlockedBy = NULL;

	if ( ! pFnIsTouchBlockedBy )
		pFnIsTouchBlockedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.IsTouchBlockedBy" );

	AKFDroppedPickup_execIsTouchBlockedBy_Parms IsTouchBlockedBy_Parms;

	this->ProcessEvent ( pFnIsTouchBlockedBy, &IsTouchBlockedBy_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.ValidTouch
// [0x00020000] 
// Parameters infos:

void AKFDroppedPickup::ValidTouch ( )
{
	static UFunction* pFnValidTouch = NULL;

	if ( ! pFnValidTouch )
		pFnValidTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.ValidTouch" );

	AKFDroppedPickup_execValidTouch_Parms ValidTouch_Parms;

	this->ProcessEvent ( pFnValidTouch, &ValidTouch_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.NotifyHUDofWeapon
// [0x00020002] 
// Parameters infos:

void AKFDroppedPickup::NotifyHUDofWeapon ( )
{
	static UFunction* pFnNotifyHUDofWeapon = NULL;

	if ( ! pFnNotifyHUDofWeapon )
		pFnNotifyHUDofWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.NotifyHUDofWeapon" );

	AKFDroppedPickup_execNotifyHUDofWeapon_Parms NotifyHUDofWeapon_Parms;

	this->ProcessEvent ( pFnNotifyHUDofWeapon, &NotifyHUDofWeapon_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDroppedPickup::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.Destroyed" );

	AKFDroppedPickup_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.GiveTo
// [0x00020002] 
// Parameters infos:

void AKFDroppedPickup::GiveTo ( )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.GiveTo" );

	AKFDroppedPickup_execGiveTo_Parms GiveTo_Parms;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.ReenableCollisionSounds
// [0x00020002] 
// Parameters infos:

void AKFDroppedPickup::ReenableCollisionSounds ( )
{
	static UFunction* pFnReenableCollisionSounds = NULL;

	if ( ! pFnReenableCollisionSounds )
		pFnReenableCollisionSounds = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.ReenableCollisionSounds" );

	AKFDroppedPickup_execReenableCollisionSounds_Parms ReenableCollisionSounds_Parms;

	this->ProcessEvent ( pFnReenableCollisionSounds, &ReenableCollisionSounds_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.PlayCollisionSound
// [0x00020002] 
// Parameters infos:

void AKFDroppedPickup::PlayCollisionSound ( )
{
	static UFunction* pFnPlayCollisionSound = NULL;

	if ( ! pFnPlayCollisionSound )
		pFnPlayCollisionSound = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.PlayCollisionSound" );

	AKFDroppedPickup_execPlayCollisionSound_Parms PlayCollisionSound_Parms;

	this->ProcessEvent ( pFnPlayCollisionSound, &PlayCollisionSound_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDroppedPickup::eventLanded ( )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.Landed" );

	AKFDroppedPickup_eventLanded_Parms Landed_Parms;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.RigidBodyCollision
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFDroppedPickup::eventRigidBodyCollision ( )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.RigidBodyCollision" );

	AKFDroppedPickup_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.AlignCollisionCylinder
// [0x00820103] ( FUNC_Final )
// Parameters infos:

void AKFDroppedPickup::AlignCollisionCylinder ( )
{
	static UFunction* pFnAlignCollisionCylinder = NULL;

	if ( ! pFnAlignCollisionCylinder )
		pFnAlignCollisionCylinder = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.AlignCollisionCylinder" );

	AKFDroppedPickup_execAlignCollisionCylinder_Parms AlignCollisionCylinder_Parms;

	this->ProcessEvent ( pFnAlignCollisionCylinder, &AlignCollisionCylinder_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.OnSleepRBPhysics
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDroppedPickup::eventOnSleepRBPhysics ( )
{
	static UFunction* pFnOnSleepRBPhysics = NULL;

	if ( ! pFnOnSleepRBPhysics )
		pFnOnSleepRBPhysics = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.OnSleepRBPhysics" );

	AKFDroppedPickup_eventOnSleepRBPhysics_Parms OnSleepRBPhysics_Parms;

	this->ProcessEvent ( pFnOnSleepRBPhysics, &OnSleepRBPhysics_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.AlignMeshToCylinder
// [0x00820102] 
// Parameters infos:

void AKFDroppedPickup::AlignMeshToCylinder ( )
{
	static UFunction* pFnAlignMeshToCylinder = NULL;

	if ( ! pFnAlignMeshToCylinder )
		pFnAlignMeshToCylinder = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.AlignMeshToCylinder" );

	AKFDroppedPickup_execAlignMeshToCylinder_Parms AlignMeshToCylinder_Parms;

	this->ProcessEvent ( pFnAlignMeshToCylinder, &AlignMeshToCylinder_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.GetDisplayName
// [0x00020102] 
// Parameters infos:

void AKFDroppedPickup::GetDisplayName ( )
{
	static UFunction* pFnGetDisplayName = NULL;

	if ( ! pFnGetDisplayName )
		pFnGetDisplayName = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.GetDisplayName" );

	AKFDroppedPickup_execGetDisplayName_Parms GetDisplayName_Parms;

	this->ProcessEvent ( pFnGetDisplayName, &GetDisplayName_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.SetEmptyMaterial
// [0x00020102] 
// Parameters infos:

void AKFDroppedPickup::SetEmptyMaterial ( )
{
	static UFunction* pFnSetEmptyMaterial = NULL;

	if ( ! pFnSetEmptyMaterial )
		pFnSetEmptyMaterial = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.SetEmptyMaterial" );

	AKFDroppedPickup_execSetEmptyMaterial_Parms SetEmptyMaterial_Parms;

	this->ProcessEvent ( pFnSetEmptyMaterial, &SetEmptyMaterial_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.SetUpgradedMaterial
// [0x00020102] 
// Parameters infos:

void AKFDroppedPickup::SetUpgradedMaterial ( )
{
	static UFunction* pFnSetUpgradedMaterial = NULL;

	if ( ! pFnSetUpgradedMaterial )
		pFnSetUpgradedMaterial = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.SetUpgradedMaterial" );

	AKFDroppedPickup_execSetUpgradedMaterial_Parms SetUpgradedMaterial_Parms;

	this->ProcessEvent ( pFnSetUpgradedMaterial, &SetUpgradedMaterial_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.SetPickupMesh
// [0x00020102] 
// Parameters infos:

void AKFDroppedPickup::SetPickupMesh ( )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.SetPickupMesh" );

	AKFDroppedPickup_execSetPickupMesh_Parms SetPickupMesh_Parms;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function KFGame.KFDroppedPickup.GetPickupMesh
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFDroppedPickup::GetPickupMesh ( )
{
	static UFunction* pFnGetPickupMesh = NULL;

	if ( ! pFnGetPickupMesh )
		pFnGetPickupMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup.GetPickupMesh" );

	AKFDroppedPickup_execGetPickupMesh_Parms GetPickupMesh_Parms;

	pFnGetPickupMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPickupMesh, &GetPickupMesh_Parms, NULL );

	pFnGetPickupMesh->FunctionFlags |= 0x400;
};

// Function KFGame.KFEmoteList.GetEmoteArray
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFEmoteList::GetEmoteArray ( )
{
	static UFunction* pFnGetEmoteArray = NULL;

	if ( ! pFnGetEmoteArray )
		pFnGetEmoteArray = UObject::FindObject< UFunction > ( "Function KFGame.KFEmoteList.GetEmoteArray" );

	UKFEmoteList_execGetEmoteArray_Parms GetEmoteArray_Parms;

	pFnGetEmoteArray->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEmoteArray, &GetEmoteArray_Parms, NULL );

	pFnGetEmoteArray->FunctionFlags |= 0x400;
};

// Function KFGame.KFEmoteList.RefreshCachedEmoteId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFEmoteList::RefreshCachedEmoteId ( )
{
	static UFunction* pFnRefreshCachedEmoteId = NULL;

	if ( ! pFnRefreshCachedEmoteId )
		pFnRefreshCachedEmoteId = UObject::FindObject< UFunction > ( "Function KFGame.KFEmoteList.RefreshCachedEmoteId" );

	UKFEmoteList_execRefreshCachedEmoteId_Parms RefreshCachedEmoteId_Parms;

	pFnRefreshCachedEmoteId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshCachedEmoteId, &RefreshCachedEmoteId_Parms, NULL );

	pFnRefreshCachedEmoteId->FunctionFlags |= 0x400;
};

// Function KFGame.KFEmoteList.SaveEquippedEmote
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFEmoteList::SaveEquippedEmote ( )
{
	static UFunction* pFnSaveEquippedEmote = NULL;

	if ( ! pFnSaveEquippedEmote )
		pFnSaveEquippedEmote = UObject::FindObject< UFunction > ( "Function KFGame.KFEmoteList.SaveEquippedEmote" );

	UKFEmoteList_execSaveEquippedEmote_Parms SaveEquippedEmote_Parms;

	pFnSaveEquippedEmote->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveEquippedEmote, &SaveEquippedEmote_Parms, NULL );

	pFnSaveEquippedEmote->FunctionFlags |= 0x400;
};

// Function KFGame.KFEmoteList.GetEquippedEmoteId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFEmoteList::GetEquippedEmoteId ( )
{
	static UFunction* pFnGetEquippedEmoteId = NULL;

	if ( ! pFnGetEquippedEmoteId )
		pFnGetEquippedEmoteId = UObject::FindObject< UFunction > ( "Function KFGame.KFEmoteList.GetEquippedEmoteId" );

	UKFEmoteList_execGetEquippedEmoteId_Parms GetEquippedEmoteId_Parms;

	pFnGetEquippedEmoteId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEquippedEmoteId, &GetEquippedEmoteId_Parms, NULL );

	pFnGetEquippedEmoteId->FunctionFlags |= 0x400;
};

// Function KFGame.KFEmoteList.IsEmoteEquipped
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFEmoteList::IsEmoteEquipped ( )
{
	static UFunction* pFnIsEmoteEquipped = NULL;

	if ( ! pFnIsEmoteEquipped )
		pFnIsEmoteEquipped = UObject::FindObject< UFunction > ( "Function KFGame.KFEmoteList.IsEmoteEquipped" );

	UKFEmoteList_execIsEmoteEquipped_Parms IsEmoteEquipped_Parms;

	pFnIsEmoteEquipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEmoteEquipped, &IsEmoteEquipped_Parms, NULL );

	pFnIsEmoteEquipped->FunctionFlags |= 0x400;
};

// Function KFGame.KFEmoteList.GetEmoteFromIndex
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFEmoteList::GetEmoteFromIndex ( )
{
	static UFunction* pFnGetEmoteFromIndex = NULL;

	if ( ! pFnGetEmoteFromIndex )
		pFnGetEmoteFromIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFEmoteList.GetEmoteFromIndex" );

	UKFEmoteList_execGetEmoteFromIndex_Parms GetEmoteFromIndex_Parms;

	pFnGetEmoteFromIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEmoteFromIndex, &GetEmoteFromIndex_Parms, NULL );

	pFnGetEmoteFromIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFEmoteList.GetEmoteIndex
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFEmoteList::GetEmoteIndex ( )
{
	static UFunction* pFnGetEmoteIndex = NULL;

	if ( ! pFnGetEmoteIndex )
		pFnGetEmoteIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFEmoteList.GetEmoteIndex" );

	UKFEmoteList_execGetEmoteIndex_Parms GetEmoteIndex_Parms;

	pFnGetEmoteIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEmoteIndex, &GetEmoteIndex_Parms, NULL );

	pFnGetEmoteIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFEmoteList.GetUnlockedEmote
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFEmoteList::GetUnlockedEmote ( )
{
	static UFunction* pFnGetUnlockedEmote = NULL;

	if ( ! pFnGetUnlockedEmote )
		pFnGetUnlockedEmote = UObject::FindObject< UFunction > ( "Function KFGame.KFEmoteList.GetUnlockedEmote" );

	UKFEmoteList_execGetUnlockedEmote_Parms GetUnlockedEmote_Parms;

	pFnGetUnlockedEmote->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnlockedEmote, &GetUnlockedEmote_Parms, NULL );

	pFnGetUnlockedEmote->FunctionFlags |= 0x400;
};

// Function KFGame.KFExportSteamItemsCommandlet.Main
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UKFExportSteamItemsCommandlet::eventMain ( )
{
	static UFunction* pFnMain = NULL;

	if ( ! pFnMain )
		pFnMain = UObject::FindObject< UFunction > ( "Function KFGame.KFExportSteamItemsCommandlet.Main" );

	UKFExportSteamItemsCommandlet_eventMain_Parms Main_Parms;

	pFnMain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMain, &Main_Parms, NULL );

	pFnMain->FunctionFlags |= 0x400;
};

// Function KFGame.KFFixupCosmeticUITexturesCommandlet.Main
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UKFFixupCosmeticUITexturesCommandlet::eventMain ( )
{
	static UFunction* pFnMain = NULL;

	if ( ! pFnMain )
		pFnMain = UObject::FindObject< UFunction > ( "Function KFGame.KFFixupCosmeticUITexturesCommandlet.Main" );

	UKFFixupCosmeticUITexturesCommandlet_eventMain_Parms Main_Parms;

	pFnMain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMain, &Main_Parms, NULL );

	pFnMain->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetCrosshairEnabled
// [0x00022002] 
// Parameters infos:

void UKFGameEngine::SetCrosshairEnabled ( )
{
	static UFunction* pFnSetCrosshairEnabled = NULL;

	if ( ! pFnSetCrosshairEnabled )
		pFnSetCrosshairEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetCrosshairEnabled" );

	UKFGameEngine_execSetCrosshairEnabled_Parms SetCrosshairEnabled_Parms;

	this->ProcessEvent ( pFnSetCrosshairEnabled, &SetCrosshairEnabled_Parms, NULL );
};

// Function KFGame.KFGameEngine.IsCrosshairEnabled
// [0x00022002] 
// Parameters infos:

void UKFGameEngine::IsCrosshairEnabled ( )
{
	static UFunction* pFnIsCrosshairEnabled = NULL;

	if ( ! pFnIsCrosshairEnabled )
		pFnIsCrosshairEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.IsCrosshairEnabled" );

	UKFGameEngine_execIsCrosshairEnabled_Parms IsCrosshairEnabled_Parms;

	this->ProcessEvent ( pFnIsCrosshairEnabled, &IsCrosshairEnabled_Parms, NULL );
};

// Function KFGame.KFGameEngine.GetKFFontScale
// [0x00022002] 
// Parameters infos:

void UKFGameEngine::GetKFFontScale ( )
{
	static UFunction* pFnGetKFFontScale = NULL;

	if ( ! pFnGetKFFontScale )
		pFnGetKFFontScale = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetKFFontScale" );

	UKFGameEngine_execGetKFFontScale_Parms GetKFFontScale_Parms;

	this->ProcessEvent ( pFnGetKFFontScale, &GetKFFontScale_Parms, NULL );
};

// Function KFGame.KFGameEngine.GetKFCanvasFont
// [0x00022002] 
// Parameters infos:

void UKFGameEngine::GetKFCanvasFont ( )
{
	static UFunction* pFnGetKFCanvasFont = NULL;

	if ( ! pFnGetKFCanvasFont )
		pFnGetKFCanvasFont = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetKFCanvasFont" );

	UKFGameEngine_execGetKFCanvasFont_Parms GetKFCanvasFont_Parms;

	this->ProcessEvent ( pFnGetKFCanvasFont, &GetKFCanvasFont_Parms, NULL );
};

// Function KFGame.KFGameEngine.FastTrace_PhysX
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::FastTrace_PhysX ( )
{
	static UFunction* pFnFastTrace_PhysX = NULL;

	if ( ! pFnFastTrace_PhysX )
		pFnFastTrace_PhysX = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.FastTrace_PhysX" );

	UKFGameEngine_execFastTrace_PhysX_Parms FastTrace_PhysX_Parms;

	pFnFastTrace_PhysX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFastTrace_PhysX, &FastTrace_PhysX_Parms, NULL );

	pFnFastTrace_PhysX->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.KillPendingServerConnection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::KillPendingServerConnection ( )
{
	static UFunction* pFnKillPendingServerConnection = NULL;

	if ( ! pFnKillPendingServerConnection )
		pFnKillPendingServerConnection = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.KillPendingServerConnection" );

	UKFGameEngine_execKillPendingServerConnection_Parms KillPendingServerConnection_Parms;

	pFnKillPendingServerConnection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnKillPendingServerConnection, &KillPendingServerConnection_Parms, NULL );

	pFnKillPendingServerConnection->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.UnlockServer
// [0x00820002] 
// Parameters infos:

void UKFGameEngine::UnlockServer ( )
{
	static UFunction* pFnUnlockServer = NULL;

	if ( ! pFnUnlockServer )
		pFnUnlockServer = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.UnlockServer" );

	UKFGameEngine_execUnlockServer_Parms UnlockServer_Parms;

	this->ProcessEvent ( pFnUnlockServer, &UnlockServer_Parms, NULL );
};

// Function KFGame.KFGameEngine.IsLockedServer
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::IsLockedServer ( )
{
	static UFunction* pFnIsLockedServer = NULL;

	if ( ! pFnIsLockedServer )
		pFnIsLockedServer = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.IsLockedServer" );

	UKFGameEngine_execIsLockedServer_Parms IsLockedServer_Parms;

	this->ProcessEvent ( pFnIsLockedServer, &IsLockedServer_Parms, NULL );
};

// Function KFGame.KFGameEngine.CancelPendingLevel
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::CancelPendingLevel ( )
{
	static UFunction* pFnCancelPendingLevel = NULL;

	if ( ! pFnCancelPendingLevel )
		pFnCancelPendingLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.CancelPendingLevel" );

	UKFGameEngine_execCancelPendingLevel_Parms CancelPendingLevel_Parms;

	pFnCancelPendingLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelPendingLevel, &CancelPendingLevel_Parms, NULL );

	pFnCancelPendingLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.CheckHandshakeComplete
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void UKFGameEngine::eventCheckHandshakeComplete ( )
{
	static UFunction* pFnCheckHandshakeComplete = NULL;

	if ( ! pFnCheckHandshakeComplete )
		pFnCheckHandshakeComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.CheckHandshakeComplete" );

	UKFGameEngine_eventCheckHandshakeComplete_Parms CheckHandshakeComplete_Parms;

	this->ProcessEvent ( pFnCheckHandshakeComplete, &CheckHandshakeComplete_Parms, NULL );
};

// Function KFGame.KFGameEngine.HandshakeCompleteCallback
// [0x00520000] 
// Parameters infos:

void UKFGameEngine::HandshakeCompleteCallback ( )
{
	static UFunction* pFnHandshakeCompleteCallback = NULL;

	if ( ! pFnHandshakeCompleteCallback )
		pFnHandshakeCompleteCallback = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.HandshakeCompleteCallback" );

	UKFGameEngine_execHandshakeCompleteCallback_Parms HandshakeCompleteCallback_Parms;

	this->ProcessEvent ( pFnHandshakeCompleteCallback, &HandshakeCompleteCallback_Parms, NULL );
};

// Function KFGame.KFGameEngine.SetLastConnectionError
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::SetLastConnectionError ( )
{
	static UFunction* pFnSetLastConnectionError = NULL;

	if ( ! pFnSetLastConnectionError )
		pFnSetLastConnectionError = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetLastConnectionError" );

	UKFGameEngine_execSetLastConnectionError_Parms SetLastConnectionError_Parms;

	this->ProcessEvent ( pFnSetLastConnectionError, &SetLastConnectionError_Parms, NULL );
};

// Function KFGame.KFGameEngine.GetConnectionErrorForMessage
// [0x00422002] 
// Parameters infos:

void UKFGameEngine::GetConnectionErrorForMessage ( )
{
	static UFunction* pFnGetConnectionErrorForMessage = NULL;

	if ( ! pFnGetConnectionErrorForMessage )
		pFnGetConnectionErrorForMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetConnectionErrorForMessage" );

	UKFGameEngine_execGetConnectionErrorForMessage_Parms GetConnectionErrorForMessage_Parms;

	this->ProcessEvent ( pFnGetConnectionErrorForMessage, &GetConnectionErrorForMessage_Parms, NULL );
};

// Function KFGame.KFGameEngine.SwitchNative4k
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SwitchNative4k ( )
{
	static UFunction* pFnSwitchNative4k = NULL;

	if ( ! pFnSwitchNative4k )
		pFnSwitchNative4k = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SwitchNative4k" );

	UKFGameEngine_execSwitchNative4k_Parms SwitchNative4k_Parms;

	pFnSwitchNative4k->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwitchNative4k, &SwitchNative4k_Parms, NULL );

	pFnSwitchNative4k->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetNative4k
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SetNative4k ( )
{
	static UFunction* pFnSetNative4k = NULL;

	if ( ! pFnSetNative4k )
		pFnSetNative4k = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetNative4k" );

	UKFGameEngine_execSetNative4k_Parms SetNative4k_Parms;

	pFnSetNative4k->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNative4k, &SetNative4k_Parms, NULL );

	pFnSetNative4k->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetGamma
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SetGamma ( )
{
	static UFunction* pFnSetGamma = NULL;

	if ( ! pFnSetGamma )
		pFnSetGamma = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetGamma" );

	UKFGameEngine_execSetGamma_Parms SetGamma_Parms;

	pFnSetGamma->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGamma, &SetGamma_Parms, NULL );

	pFnSetGamma->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.IsFullScreenMoviePlaying
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::IsFullScreenMoviePlaying ( )
{
	static UFunction* pFnIsFullScreenMoviePlaying = NULL;

	if ( ! pFnIsFullScreenMoviePlaying )
		pFnIsFullScreenMoviePlaying = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.IsFullScreenMoviePlaying" );

	UKFGameEngine_execIsFullScreenMoviePlaying_Parms IsFullScreenMoviePlaying_Parms;

	pFnIsFullScreenMoviePlaying->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFullScreenMoviePlaying, &IsFullScreenMoviePlaying_Parms, NULL );

	pFnIsFullScreenMoviePlaying->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.PlayFullScreenMovie
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::PlayFullScreenMovie ( )
{
	static UFunction* pFnPlayFullScreenMovie = NULL;

	if ( ! pFnPlayFullScreenMovie )
		pFnPlayFullScreenMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.PlayFullScreenMovie" );

	UKFGameEngine_execPlayFullScreenMovie_Parms PlayFullScreenMovie_Parms;

	pFnPlayFullScreenMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayFullScreenMovie, &PlayFullScreenMovie_Parms, NULL );

	pFnPlayFullScreenMovie->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetVoIPVolumeRange
// [0x00422400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetVoIPVolumeRange ( )
{
	static UFunction* pFnGetVoIPVolumeRange = NULL;

	if ( ! pFnGetVoIPVolumeRange )
		pFnGetVoIPVolumeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetVoIPVolumeRange" );

	UKFGameEngine_execGetVoIPVolumeRange_Parms GetVoIPVolumeRange_Parms;

	pFnGetVoIPVolumeRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetVoIPVolumeRange, &GetVoIPVolumeRange_Parms, NULL );

	pFnGetVoIPVolumeRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetVoIPRecieveVolume
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SetVoIPRecieveVolume ( )
{
	static UFunction* pFnSetVoIPRecieveVolume = NULL;

	if ( ! pFnSetVoIPRecieveVolume )
		pFnSetVoIPRecieveVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetVoIPRecieveVolume" );

	UKFGameEngine_execSetVoIPRecieveVolume_Parms SetVoIPRecieveVolume_Parms;

	pFnSetVoIPRecieveVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetVoIPRecieveVolume, &SetVoIPRecieveVolume_Parms, NULL );

	pFnSetVoIPRecieveVolume->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetWWisePADVolume
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SetWWisePADVolume ( )
{
	static UFunction* pFnSetWWisePADVolume = NULL;

	if ( ! pFnSetWWisePADVolume )
		pFnSetWWisePADVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetWWisePADVolume" );

	UKFGameEngine_execSetWWisePADVolume_Parms SetWWisePADVolume_Parms;

	pFnSetWWisePADVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWWisePADVolume, &SetWWisePADVolume_Parms, NULL );

	pFnSetWWisePADVolume->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetWWiseMasterVolume
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SetWWiseMasterVolume ( )
{
	static UFunction* pFnSetWWiseMasterVolume = NULL;

	if ( ! pFnSetWWiseMasterVolume )
		pFnSetWWiseMasterVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetWWiseMasterVolume" );

	UKFGameEngine_execSetWWiseMasterVolume_Parms SetWWiseMasterVolume_Parms;

	pFnSetWWiseMasterVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWWiseMasterVolume, &SetWWiseMasterVolume_Parms, NULL );

	pFnSetWWiseMasterVolume->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetWWiseVoiceVolume
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SetWWiseVoiceVolume ( )
{
	static UFunction* pFnSetWWiseVoiceVolume = NULL;

	if ( ! pFnSetWWiseVoiceVolume )
		pFnSetWWiseVoiceVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetWWiseVoiceVolume" );

	UKFGameEngine_execSetWWiseVoiceVolume_Parms SetWWiseVoiceVolume_Parms;

	pFnSetWWiseVoiceVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWWiseVoiceVolume, &SetWWiseVoiceVolume_Parms, NULL );

	pFnSetWWiseVoiceVolume->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetWWiseMusicVolume
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SetWWiseMusicVolume ( )
{
	static UFunction* pFnSetWWiseMusicVolume = NULL;

	if ( ! pFnSetWWiseMusicVolume )
		pFnSetWWiseMusicVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetWWiseMusicVolume" );

	UKFGameEngine_execSetWWiseMusicVolume_Parms SetWWiseMusicVolume_Parms;

	pFnSetWWiseMusicVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWWiseMusicVolume, &SetWWiseMusicVolume_Parms, NULL );

	pFnSetWWiseMusicVolume->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.SetWWiseSFXVolume
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::SetWWiseSFXVolume ( )
{
	static UFunction* pFnSetWWiseSFXVolume = NULL;

	if ( ! pFnSetWWiseSFXVolume )
		pFnSetWWiseSFXVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.SetWWiseSFXVolume" );

	UKFGameEngine_execSetWWiseSFXVolume_Parms SetWWiseSFXVolume_Parms;

	pFnSetWWiseSFXVolume->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWWiseSFXVolume, &SetWWiseSFXVolume_Parms, NULL );

	pFnSetWWiseSFXVolume->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.InitGamma
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::InitGamma ( )
{
	static UFunction* pFnInitGamma = NULL;

	if ( ! pFnInitGamma )
		pFnInitGamma = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.InitGamma" );

	UKFGameEngine_execInitGamma_Parms InitGamma_Parms;

	pFnInitGamma->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitGamma, &InitGamma_Parms, NULL );

	pFnInitGamma->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.InitAudioOptions
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::InitAudioOptions ( )
{
	static UFunction* pFnInitAudioOptions = NULL;

	if ( ! pFnInitAudioOptions )
		pFnInitAudioOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.InitAudioOptions" );

	UKFGameEngine_execInitAudioOptions_Parms InitAudioOptions_Parms;

	pFnInitAudioOptions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitAudioOptions, &InitAudioOptions_Parms, NULL );

	pFnInitAudioOptions->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetWeeklyEventIndex
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetWeeklyEventIndex ( )
{
	static UFunction* pFnGetWeeklyEventIndex = NULL;

	if ( ! pFnGetWeeklyEventIndex )
		pFnGetWeeklyEventIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetWeeklyEventIndex" );

	UKFGameEngine_execGetWeeklyEventIndex_Parms GetWeeklyEventIndex_Parms;

	pFnGetWeeklyEventIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWeeklyEventIndex, &GetWeeklyEventIndex_Parms, NULL );

	pFnGetWeeklyEventIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetSeasonalEventID
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetSeasonalEventID ( )
{
	static UFunction* pFnGetSeasonalEventID = NULL;

	if ( ! pFnGetSeasonalEventID )
		pFnGetSeasonalEventID = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetSeasonalEventID" );

	UKFGameEngine_execGetSeasonalEventID_Parms GetSeasonalEventID_Parms;

	pFnGetSeasonalEventID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSeasonalEventID, &GetSeasonalEventID_Parms, NULL );

	pFnGetSeasonalEventID->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.ClearOnlineDelegates
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::ClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.ClearOnlineDelegates" );

	UKFGameEngine_execClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function KFGame.KFGameEngine.RegisterOnlineDelegates
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::RegisterOnlineDelegates ( )
{
	static UFunction* pFnRegisterOnlineDelegates = NULL;

	if ( ! pFnRegisterOnlineDelegates )
		pFnRegisterOnlineDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.RegisterOnlineDelegates" );

	UKFGameEngine_execRegisterOnlineDelegates_Parms RegisterOnlineDelegates_Parms;

	this->ProcessEvent ( pFnRegisterOnlineDelegates, &RegisterOnlineDelegates_Parms, NULL );
};

// Function KFGame.KFGameEngine.PerformLogout
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::PerformLogout ( )
{
	static UFunction* pFnPerformLogout = NULL;

	if ( ! pFnPerformLogout )
		pFnPerformLogout = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.PerformLogout" );

	UKFGameEngine_execPerformLogout_Parms PerformLogout_Parms;

	this->ProcessEvent ( pFnPerformLogout, &PerformLogout_Parms, NULL );
};

// Function KFGame.KFGameEngine.KickBackToIIS
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::KickBackToIIS ( )
{
	static UFunction* pFnKickBackToIIS = NULL;

	if ( ! pFnKickBackToIIS )
		pFnKickBackToIIS = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.KickBackToIIS" );

	UKFGameEngine_execKickBackToIIS_Parms KickBackToIIS_Parms;

	this->ProcessEvent ( pFnKickBackToIIS, &KickBackToIIS_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnLoginStatusChanged
// [0x00820002] 
// Parameters infos:

void UKFGameEngine::OnLoginStatusChanged ( )
{
	static UFunction* pFnOnLoginStatusChanged = NULL;

	if ( ! pFnOnLoginStatusChanged )
		pFnOnLoginStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnLoginStatusChanged" );

	UKFGameEngine_execOnLoginStatusChanged_Parms OnLoginStatusChanged_Parms;

	this->ProcessEvent ( pFnOnLoginStatusChanged, &OnLoginStatusChanged_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnLoginChange
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnLoginChange ( )
{
	static UFunction* pFnOnLoginChange = NULL;

	if ( ! pFnOnLoginChange )
		pFnOnLoginChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnLoginChange" );

	UKFGameEngine_execOnLoginChange_Parms OnLoginChange_Parms;

	this->ProcessEvent ( pFnOnLoginChange, &OnLoginChange_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnConnectionStatusChanged
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnConnectionStatusChanged ( )
{
	static UFunction* pFnOnConnectionStatusChanged = NULL;

	if ( ! pFnOnConnectionStatusChanged )
		pFnOnConnectionStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnConnectionStatusChanged" );

	UKFGameEngine_execOnConnectionStatusChanged_Parms OnConnectionStatusChanged_Parms;

	this->ProcessEvent ( pFnOnConnectionStatusChanged, &OnConnectionStatusChanged_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnLinkStatusChange
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnLinkStatusChange ( )
{
	static UFunction* pFnOnLinkStatusChange = NULL;

	if ( ! pFnOnLinkStatusChange )
		pFnOnLinkStatusChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnLinkStatusChange" );

	UKFGameEngine_execOnLinkStatusChange_Parms OnLinkStatusChange_Parms;

	this->ProcessEvent ( pFnOnLinkStatusChange, &OnLinkStatusChange_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnPlayfabInventoryReadComplete
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnPlayfabInventoryReadComplete ( )
{
	static UFunction* pFnOnPlayfabInventoryReadComplete = NULL;

	if ( ! pFnOnPlayfabInventoryReadComplete )
		pFnOnPlayfabInventoryReadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnPlayfabInventoryReadComplete" );

	UKFGameEngine_execOnPlayfabInventoryReadComplete_Parms OnPlayfabInventoryReadComplete_Parms;

	this->ProcessEvent ( pFnOnPlayfabInventoryReadComplete, &OnPlayfabInventoryReadComplete_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnStoreDataRead
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnStoreDataRead ( )
{
	static UFunction* pFnOnStoreDataRead = NULL;

	if ( ! pFnOnStoreDataRead )
		pFnOnStoreDataRead = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnStoreDataRead" );

	UKFGameEngine_execOnStoreDataRead_Parms OnStoreDataRead_Parms;

	this->ProcessEvent ( pFnOnStoreDataRead, &OnStoreDataRead_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnReadInventoryItemsComplete
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnReadInventoryItemsComplete ( )
{
	static UFunction* pFnOnReadInventoryItemsComplete = NULL;

	if ( ! pFnOnReadInventoryItemsComplete )
		pFnOnReadInventoryItemsComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnReadInventoryItemsComplete" );

	UKFGameEngine_execOnReadInventoryItemsComplete_Parms OnReadInventoryItemsComplete_Parms;

	this->ProcessEvent ( pFnOnReadInventoryItemsComplete, &OnReadInventoryItemsComplete_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnReadAdditionalProductDetailsComplete
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnReadAdditionalProductDetailsComplete ( )
{
	static UFunction* pFnOnReadAdditionalProductDetailsComplete = NULL;

	if ( ! pFnOnReadAdditionalProductDetailsComplete )
		pFnOnReadAdditionalProductDetailsComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnReadAdditionalProductDetailsComplete" );

	UKFGameEngine_execOnReadAdditionalProductDetailsComplete_Parms OnReadAdditionalProductDetailsComplete_Parms;

	this->ProcessEvent ( pFnOnReadAdditionalProductDetailsComplete, &OnReadAdditionalProductDetailsComplete_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnReadAvailableProductsComplete
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnReadAvailableProductsComplete ( )
{
	static UFunction* pFnOnReadAvailableProductsComplete = NULL;

	if ( ! pFnOnReadAvailableProductsComplete )
		pFnOnReadAvailableProductsComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnReadAvailableProductsComplete" );

	UKFGameEngine_execOnReadAvailableProductsComplete_Parms OnReadAvailableProductsComplete_Parms;

	this->ProcessEvent ( pFnOnReadAvailableProductsComplete, &OnReadAvailableProductsComplete_Parms, NULL );
};

// Function KFGame.KFGameEngine.OnPlayfabStoreReadComplete
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::OnPlayfabStoreReadComplete ( )
{
	static UFunction* pFnOnPlayfabStoreReadComplete = NULL;

	if ( ! pFnOnPlayfabStoreReadComplete )
		pFnOnPlayfabStoreReadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.OnPlayfabStoreReadComplete" );

	UKFGameEngine_execOnPlayfabStoreReadComplete_Parms OnPlayfabStoreReadComplete_Parms;

	this->ProcessEvent ( pFnOnPlayfabStoreReadComplete, &OnPlayfabStoreReadComplete_Parms, NULL );
};

// Function KFGame.KFGameEngine.ReadPFStoreData
// [0x00020002] 
// Parameters infos:

void UKFGameEngine::ReadPFStoreData ( )
{
	static UFunction* pFnReadPFStoreData = NULL;

	if ( ! pFnReadPFStoreData )
		pFnReadPFStoreData = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.ReadPFStoreData" );

	UKFGameEngine_execReadPFStoreData_Parms ReadPFStoreData_Parms;

	this->ProcessEvent ( pFnReadPFStoreData, &ReadPFStoreData_Parms, NULL );
};

// Function KFGame.KFGameEngine.IsFreeConsolePlayOver
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::IsFreeConsolePlayOver ( )
{
	static UFunction* pFnIsFreeConsolePlayOver = NULL;

	if ( ! pFnIsFreeConsolePlayOver )
		pFnIsFreeConsolePlayOver = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.IsFreeConsolePlayOver" );

	UKFGameEngine_execIsFreeConsolePlayOver_Parms IsFreeConsolePlayOver_Parms;

	pFnIsFreeConsolePlayOver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFreeConsolePlayOver, &IsFreeConsolePlayOver_Parms, NULL );

	pFnIsFreeConsolePlayOver->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.IsSoloPlayDisabled
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::IsSoloPlayDisabled ( )
{
	static UFunction* pFnIsSoloPlayDisabled = NULL;

	if ( ! pFnIsSoloPlayDisabled )
		pFnIsSoloPlayDisabled = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.IsSoloPlayDisabled" );

	UKFGameEngine_execIsSoloPlayDisabled_Parms IsSoloPlayDisabled_Parms;

	pFnIsSoloPlayDisabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSoloPlayDisabled, &IsSoloPlayDisabled_Parms, NULL );

	pFnIsSoloPlayDisabled->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.ApplyTweaks
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::ApplyTweaks ( )
{
	static UFunction* pFnApplyTweaks = NULL;

	if ( ! pFnApplyTweaks )
		pFnApplyTweaks = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.ApplyTweaks" );

	UKFGameEngine_execApplyTweaks_Parms ApplyTweaks_Parms;

	pFnApplyTweaks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyTweaks, &ApplyTweaks_Parms, NULL );

	pFnApplyTweaks->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.RefreshOnlineGameData
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::RefreshOnlineGameData ( )
{
	static UFunction* pFnRefreshOnlineGameData = NULL;

	if ( ! pFnRefreshOnlineGameData )
		pFnRefreshOnlineGameData = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.RefreshOnlineGameData" );

	UKFGameEngine_execRefreshOnlineGameData_Parms RefreshOnlineGameData_Parms;

	pFnRefreshOnlineGameData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshOnlineGameData, &RefreshOnlineGameData_Parms, NULL );

	pFnRefreshOnlineGameData->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.RefreshEventContent
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::RefreshEventContent ( )
{
	static UFunction* pFnRefreshEventContent = NULL;

	if ( ! pFnRefreshEventContent )
		pFnRefreshEventContent = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.RefreshEventContent" );

	UKFGameEngine_execRefreshEventContent_Parms RefreshEventContent_Parms;

	pFnRefreshEventContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshEventContent, &RefreshEventContent_Parms, NULL );

	pFnRefreshEventContent->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.InitEventContent
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::InitEventContent ( )
{
	static UFunction* pFnInitEventContent = NULL;

	if ( ! pFnInitEventContent )
		pFnInitEventContent = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.InitEventContent" );

	UKFGameEngine_execInitEventContent_Parms InitEventContent_Parms;

	pFnInitEventContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitEventContent, &InitEventContent_Parms, NULL );

	pFnInitEventContent->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetPlatform
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetPlatform ( )
{
	static UFunction* pFnGetPlatform = NULL;

	if ( ! pFnGetPlatform )
		pFnGetPlatform = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetPlatform" );

	UKFGameEngine_execGetPlatform_Parms GetPlatform_Parms;

	pFnGetPlatform->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlatform, &GetPlatform_Parms, NULL );

	pFnGetPlatform->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetAppID
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetAppID ( )
{
	static UFunction* pFnGetAppID = NULL;

	if ( ! pFnGetAppID )
		pFnGetAppID = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetAppID" );

	UKFGameEngine_execGetAppID_Parms GetAppID_Parms;

	pFnGetAppID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAppID, &GetAppID_Parms, NULL );

	pFnGetAppID->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetKFGameVersion
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetKFGameVersion ( )
{
	static UFunction* pFnGetKFGameVersion = NULL;

	if ( ! pFnGetKFGameVersion )
		pFnGetKFGameVersion = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetKFGameVersion" );

	UKFGameEngine_execGetKFGameVersion_Parms GetKFGameVersion_Parms;

	pFnGetKFGameVersion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetKFGameVersion, &GetKFGameVersion_Parms, NULL );

	pFnGetKFGameVersion->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetGameVersion
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetGameVersion ( )
{
	static UFunction* pFnGetGameVersion = NULL;

	if ( ! pFnGetGameVersion )
		pFnGetGameVersion = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetGameVersion" );

	UKFGameEngine_execGetGameVersion_Parms GetGameVersion_Parms;

	pFnGetGameVersion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameVersion, &GetGameVersion_Parms, NULL );

	pFnGetGameVersion->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetDebugLines
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetDebugLines ( )
{
	static UFunction* pFnGetDebugLines = NULL;

	if ( ! pFnGetDebugLines )
		pFnGetDebugLines = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetDebugLines" );

	UKFGameEngine_execGetDebugLines_Parms GetDebugLines_Parms;

	pFnGetDebugLines->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDebugLines, &GetDebugLines_Parms, NULL );

	pFnGetDebugLines->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.GetClassCountAndSize
// [0x00422400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::GetClassCountAndSize ( )
{
	static UFunction* pFnGetClassCountAndSize = NULL;

	if ( ! pFnGetClassCountAndSize )
		pFnGetClassCountAndSize = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.GetClassCountAndSize" );

	UKFGameEngine_execGetClassCountAndSize_Parms GetClassCountAndSize_Parms;

	pFnGetClassCountAndSize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClassCountAndSize, &GetClassCountAndSize_Parms, NULL );

	pFnGetClassCountAndSize->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.CheckNoRandomStart
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::CheckNoRandomStart ( )
{
	static UFunction* pFnCheckNoRandomStart = NULL;

	if ( ! pFnCheckNoRandomStart )
		pFnCheckNoRandomStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.CheckNoRandomStart" );

	UKFGameEngine_execCheckNoRandomStart_Parms CheckNoRandomStart_Parms;

	pFnCheckNoRandomStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckNoRandomStart, &CheckNoRandomStart_Parms, NULL );

	pFnCheckNoRandomStart->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.CheckNoMusic
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::CheckNoMusic ( )
{
	static UFunction* pFnCheckNoMusic = NULL;

	if ( ! pFnCheckNoMusic )
		pFnCheckNoMusic = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.CheckNoMusic" );

	UKFGameEngine_execCheckNoMusic_Parms CheckNoMusic_Parms;

	pFnCheckNoMusic->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckNoMusic, &CheckNoMusic_Parms, NULL );

	pFnCheckNoMusic->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.CheckNoAutoStart
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::CheckNoAutoStart ( )
{
	static UFunction* pFnCheckNoAutoStart = NULL;

	if ( ! pFnCheckNoAutoStart )
		pFnCheckNoAutoStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.CheckNoAutoStart" );

	UKFGameEngine_execCheckNoAutoStart_Parms CheckNoAutoStart_Parms;

	pFnCheckNoAutoStart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckNoAutoStart, &CheckNoAutoStart_Parms, NULL );

	pFnCheckNoAutoStart->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.CheckSkipGammaCheck
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::CheckSkipGammaCheck ( )
{
	static UFunction* pFnCheckSkipGammaCheck = NULL;

	if ( ! pFnCheckSkipGammaCheck )
		pFnCheckSkipGammaCheck = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.CheckSkipGammaCheck" );

	UKFGameEngine_execCheckSkipGammaCheck_Parms CheckSkipGammaCheck_Parms;

	pFnCheckSkipGammaCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckSkipGammaCheck, &CheckSkipGammaCheck_Parms, NULL );

	pFnCheckSkipGammaCheck->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.CheckSkipLobby
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::CheckSkipLobby ( )
{
	static UFunction* pFnCheckSkipLobby = NULL;

	if ( ! pFnCheckSkipLobby )
		pFnCheckSkipLobby = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.CheckSkipLobby" );

	UKFGameEngine_execCheckSkipLobby_Parms CheckSkipLobby_Parms;

	pFnCheckSkipLobby->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckSkipLobby, &CheckSkipLobby_Parms, NULL );

	pFnCheckSkipLobby->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.ClearCachedRootPackages
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::ClearCachedRootPackages ( )
{
	static UFunction* pFnClearCachedRootPackages = NULL;

	if ( ! pFnClearCachedRootPackages )
		pFnClearCachedRootPackages = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.ClearCachedRootPackages" );

	UKFGameEngine_execClearCachedRootPackages_Parms ClearCachedRootPackages_Parms;

	pFnClearCachedRootPackages->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCachedRootPackages, &ClearCachedRootPackages_Parms, NULL );

	pFnClearCachedRootPackages->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameEngine.CacheToRoot
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGameEngine::CacheToRoot ( )
{
	static UFunction* pFnCacheToRoot = NULL;

	if ( ! pFnCacheToRoot )
		pFnCacheToRoot = UObject::FindObject< UFunction > ( "Function KFGame.KFGameEngine.CacheToRoot" );

	UKFGameEngine_execCacheToRoot_Parms CacheToRoot_Parms;

	pFnCacheToRoot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheToRoot, &CacheToRoot_Parms, NULL );

	pFnCacheToRoot->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.HasCustomTraderVoiceGroup
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::HasCustomTraderVoiceGroup ( )
{
	static UFunction* pFnHasCustomTraderVoiceGroup = NULL;

	if ( ! pFnHasCustomTraderVoiceGroup )
		pFnHasCustomTraderVoiceGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.HasCustomTraderVoiceGroup" );

	AKFGameInfo_execHasCustomTraderVoiceGroup_Parms HasCustomTraderVoiceGroup_Parms;

	this->ProcessEvent ( pFnHasCustomTraderVoiceGroup, &HasCustomTraderVoiceGroup_Parms, NULL );
};

// Function KFGame.KFGameInfo.OnAIChangeEnemy
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::OnAIChangeEnemy ( )
{
	static UFunction* pFnOnAIChangeEnemy = NULL;

	if ( ! pFnOnAIChangeEnemy )
		pFnOnAIChangeEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.OnAIChangeEnemy" );

	AKFGameInfo_execOnAIChangeEnemy_Parms OnAIChangeEnemy_Parms;

	this->ProcessEvent ( pFnOnAIChangeEnemy, &OnAIChangeEnemy_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckNextMap
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::CheckNextMap ( )
{
	static UFunction* pFnCheckNextMap = NULL;

	if ( ! pFnCheckNextMap )
		pFnCheckNextMap = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckNextMap" );

	AKFGameInfo_execCheckNextMap_Parms CheckNextMap_Parms;

	pFnCheckNextMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckNextMap, &CheckNextMap_Parms, NULL );

	pFnCheckNextMap->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.ShouldOverrideDoshOnKill
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::ShouldOverrideDoshOnKill ( )
{
	static UFunction* pFnShouldOverrideDoshOnKill = NULL;

	if ( ! pFnShouldOverrideDoshOnKill )
		pFnShouldOverrideDoshOnKill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ShouldOverrideDoshOnKill" );

	AKFGameInfo_execShouldOverrideDoshOnKill_Parms ShouldOverrideDoshOnKill_Parms;

	this->ProcessEvent ( pFnShouldOverrideDoshOnKill, &ShouldOverrideDoshOnKill_Parms, NULL );
};

// Function KFGame.KFGameInfo.SkipTrader
// [0x00020000] 
// Parameters infos:

void AKFGameInfo::SkipTrader ( )
{
	static UFunction* pFnSkipTrader = NULL;

	if ( ! pFnSkipTrader )
		pFnSkipTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SkipTrader" );

	AKFGameInfo_execSkipTrader_Parms SkipTrader_Parms;

	this->ProcessEvent ( pFnSkipTrader, &SkipTrader_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetTraderTime
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetTraderTime ( )
{
	static UFunction* pFnGetTraderTime = NULL;

	if ( ! pFnGetTraderTime )
		pFnGetTraderTime = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetTraderTime" );

	AKFGameInfo_execGetTraderTime_Parms GetTraderTime_Parms;

	this->ProcessEvent ( pFnGetTraderTime, &GetTraderTime_Parms, NULL );
};

// Function KFGame.KFGameInfo.UpdateCurrentMapVoteTime
// [0x00024000] 
// Parameters infos:

void AKFGameInfo::UpdateCurrentMapVoteTime ( )
{
	static UFunction* pFnUpdateCurrentMapVoteTime = NULL;

	if ( ! pFnUpdateCurrentMapVoteTime )
		pFnUpdateCurrentMapVoteTime = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.UpdateCurrentMapVoteTime" );

	AKFGameInfo_execUpdateCurrentMapVoteTime_Parms UpdateCurrentMapVoteTime_Parms;

	this->ProcessEvent ( pFnUpdateCurrentMapVoteTime, &UpdateCurrentMapVoteTime_Parms, NULL );
};

// Function KFGame.KFGameInfo.IsPlayerReady
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::IsPlayerReady ( )
{
	static UFunction* pFnIsPlayerReady = NULL;

	if ( ! pFnIsPlayerReady )
		pFnIsPlayerReady = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.IsPlayerReady" );

	AKFGameInfo_execIsPlayerReady_Parms IsPlayerReady_Parms;

	this->ProcessEvent ( pFnIsPlayerReady, &IsPlayerReady_Parms, NULL );
};

// Function KFGame.KFGameInfo.AnyPlayerReady
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::AnyPlayerReady ( )
{
	static UFunction* pFnAnyPlayerReady = NULL;

	if ( ! pFnAnyPlayerReady )
		pFnAnyPlayerReady = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AnyPlayerReady" );

	AKFGameInfo_execAnyPlayerReady_Parms AnyPlayerReady_Parms;

	this->ProcessEvent ( pFnAnyPlayerReady, &AnyPlayerReady_Parms, NULL );
};

// Function KFGame.KFGameInfo.MajorityPlayersReady
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::MajorityPlayersReady ( )
{
	static UFunction* pFnMajorityPlayersReady = NULL;

	if ( ! pFnMajorityPlayersReady )
		pFnMajorityPlayersReady = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.MajorityPlayersReady" );

	AKFGameInfo_execMajorityPlayersReady_Parms MajorityPlayersReady_Parms;

	this->ProcessEvent ( pFnMajorityPlayersReady, &MajorityPlayersReady_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckAllPlayersReady
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CheckAllPlayersReady ( )
{
	static UFunction* pFnCheckAllPlayersReady = NULL;

	if ( ! pFnCheckAllPlayersReady )
		pFnCheckAllPlayersReady = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckAllPlayersReady" );

	AKFGameInfo_execCheckAllPlayersReady_Parms CheckAllPlayersReady_Parms;

	this->ProcessEvent ( pFnCheckAllPlayersReady, &CheckAllPlayersReady_Parms, NULL );
};

// Function KFGame.KFGameInfo.ShouldStartMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ShouldStartMatch ( )
{
	static UFunction* pFnShouldStartMatch = NULL;

	if ( ! pFnShouldStartMatch )
		pFnShouldStartMatch = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ShouldStartMatch" );

	AKFGameInfo_execShouldStartMatch_Parms ShouldStartMatch_Parms;

	this->ProcessEvent ( pFnShouldStartMatch, &ShouldStartMatch_Parms, NULL );
};

// Function KFGame.KFGameInfo.StartMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.StartMatch" );

	AKFGameInfo_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function KFGame.KFGameInfo.StripPasswordFromLastURL
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGameInfo::StripPasswordFromLastURL ( )
{
	static UFunction* pFnStripPasswordFromLastURL = NULL;

	if ( ! pFnStripPasswordFromLastURL )
		pFnStripPasswordFromLastURL = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.StripPasswordFromLastURL" );

	AKFGameInfo_execStripPasswordFromLastURL_Parms StripPasswordFromLastURL_Parms;

	pFnStripPasswordFromLastURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStripPasswordFromLastURL, &StripPasswordFromLastURL_Parms, NULL );

	pFnStripPasswordFromLastURL->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.CheckServerUnlock
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFGameInfo::CheckServerUnlock ( )
{
	static UFunction* pFnCheckServerUnlock = NULL;

	if ( ! pFnCheckServerUnlock )
		pFnCheckServerUnlock = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckServerUnlock" );

	AKFGameInfo_execCheckServerUnlock_Parms CheckServerUnlock_Parms;

	this->ProcessEvent ( pFnCheckServerUnlock, &CheckServerUnlock_Parms, NULL );
};

// Function KFGame.KFGameInfo.LobbyCountdownComplete
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::LobbyCountdownComplete ( )
{
	static UFunction* pFnLobbyCountdownComplete = NULL;

	if ( ! pFnLobbyCountdownComplete )
		pFnLobbyCountdownComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.LobbyCountdownComplete" );

	AKFGameInfo_execLobbyCountdownComplete_Parms LobbyCountdownComplete_Parms;

	this->ProcessEvent ( pFnLobbyCountdownComplete, &LobbyCountdownComplete_Parms, NULL );
};

// Function KFGame.KFGameInfo.ResetCountDown
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ResetCountDown ( )
{
	static UFunction* pFnResetCountDown = NULL;

	if ( ! pFnResetCountDown )
		pFnResetCountDown = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ResetCountDown" );

	AKFGameInfo_execResetCountDown_Parms ResetCountDown_Parms;

	this->ProcessEvent ( pFnResetCountDown, &ResetCountDown_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetCountdown
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::SetCountdown ( )
{
	static UFunction* pFnSetCountdown = NULL;

	if ( ! pFnSetCountdown )
		pFnSetCountdown = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetCountdown" );

	AKFGameInfo_execSetCountdown_Parms SetCountdown_Parms;

	this->ProcessEvent ( pFnSetCountdown, &SetCountdown_Parms, NULL );
};

// Function KFGame.KFGameInfo.LogPlayersKillCount
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::LogPlayersKillCount ( )
{
	static UFunction* pFnLogPlayersKillCount = NULL;

	if ( ! pFnLogPlayersKillCount )
		pFnLogPlayersKillCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.LogPlayersKillCount" );

	AKFGameInfo_execLogPlayersKillCount_Parms LogPlayersKillCount_Parms;

	this->ProcessEvent ( pFnLogPlayersKillCount, &LogPlayersKillCount_Parms, NULL );
};

// Function KFGame.KFGameInfo.LogPlayersDosh
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::LogPlayersDosh ( )
{
	static UFunction* pFnLogPlayersDosh = NULL;

	if ( ! pFnLogPlayersDosh )
		pFnLogPlayersDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.LogPlayersDosh" );

	AKFGameInfo_execLogPlayersDosh_Parms LogPlayersDosh_Parms;

	this->ProcessEvent ( pFnLogPlayersDosh, &LogPlayersDosh_Parms, NULL );
};

// Function KFGame.KFGameInfo.LogPlayersInventory
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::LogPlayersInventory ( )
{
	static UFunction* pFnLogPlayersInventory = NULL;

	if ( ! pFnLogPlayersInventory )
		pFnLogPlayersInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.LogPlayersInventory" );

	AKFGameInfo_execLogPlayersInventory_Parms LogPlayersInventory_Parms;

	this->ProcessEvent ( pFnLogPlayersInventory, &LogPlayersInventory_Parms, NULL );
};

// Function KFGame.KFGameInfo.AllowAnalyticsLogging
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::AllowAnalyticsLogging ( )
{
	static UFunction* pFnAllowAnalyticsLogging = NULL;

	if ( ! pFnAllowAnalyticsLogging )
		pFnAllowAnalyticsLogging = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AllowAnalyticsLogging" );

	AKFGameInfo_execAllowAnalyticsLogging_Parms AllowAnalyticsLogging_Parms;

	pFnAllowAnalyticsLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllowAnalyticsLogging, &AllowAnalyticsLogging_Parms, NULL );

	pFnAllowAnalyticsLogging->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.AllowBalanceLogging
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::AllowBalanceLogging ( )
{
	static UFunction* pFnAllowBalanceLogging = NULL;

	if ( ! pFnAllowBalanceLogging )
		pFnAllowBalanceLogging = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AllowBalanceLogging" );

	AKFGameInfo_execAllowBalanceLogging_Parms AllowBalanceLogging_Parms;

	pFnAllowBalanceLogging->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllowBalanceLogging, &AllowBalanceLogging_Parms, NULL );

	pFnAllowBalanceLogging->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.GetAvailableReservations
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetAvailableReservations ( )
{
	static UFunction* pFnGetAvailableReservations = NULL;

	if ( ! pFnGetAvailableReservations )
		pFnGetAvailableReservations = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetAvailableReservations" );

	AKFGameInfo_execGetAvailableReservations_Parms GetAvailableReservations_Parms;

	this->ProcessEvent ( pFnGetAvailableReservations, &GetAvailableReservations_Parms, NULL );
};

// Function KFGame.KFGameInfo.SeatPlayer
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventSeatPlayer ( )
{
	static UFunction* pFnSeatPlayer = NULL;

	if ( ! pFnSeatPlayer )
		pFnSeatPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SeatPlayer" );

	AKFGameInfo_eventSeatPlayer_Parms SeatPlayer_Parms;

	this->ProcessEvent ( pFnSeatPlayer, &SeatPlayer_Parms, NULL );
};

// Function KFGame.KFGameInfo.ConfirmReservation
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventConfirmReservation ( )
{
	static UFunction* pFnConfirmReservation = NULL;

	if ( ! pFnConfirmReservation )
		pFnConfirmReservation = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ConfirmReservation" );

	AKFGameInfo_eventConfirmReservation_Parms ConfirmReservation_Parms;

	this->ProcessEvent ( pFnConfirmReservation, &ConfirmReservation_Parms, NULL );
};

// Function KFGame.KFGameInfo.ReadReservations
// [0x00C20002] 
// Parameters infos:

void AKFGameInfo::ReadReservations ( )
{
	static UFunction* pFnReadReservations = NULL;

	if ( ! pFnReadReservations )
		pFnReadReservations = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ReadReservations" );

	AKFGameInfo_execReadReservations_Parms ReadReservations_Parms;

	this->ProcessEvent ( pFnReadReservations, &ReadReservations_Parms, NULL );
};

// Function KFGame.KFGameInfo.TimeReservations
// [0x00820002] 
// Parameters infos:

void AKFGameInfo::TimeReservations ( )
{
	static UFunction* pFnTimeReservations = NULL;

	if ( ! pFnTimeReservations )
		pFnTimeReservations = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.TimeReservations" );

	AKFGameInfo_execTimeReservations_Parms TimeReservations_Parms;

	this->ProcessEvent ( pFnTimeReservations, &TimeReservations_Parms, NULL );
};

// Function KFGame.KFGameInfo.AddPlayerReservations
// [0x00C20002] 
// Parameters infos:

void AKFGameInfo::AddPlayerReservations ( )
{
	static UFunction* pFnAddPlayerReservations = NULL;

	if ( ! pFnAddPlayerReservations )
		pFnAddPlayerReservations = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AddPlayerReservations" );

	AKFGameInfo_execAddPlayerReservations_Parms AddPlayerReservations_Parms;

	this->ProcessEvent ( pFnAddPlayerReservations, &AddPlayerReservations_Parms, NULL );
};

// Function KFGame.KFGameInfo.AddPlayerMatchmakingGroup
// [0x00C20002] 
// Parameters infos:

void AKFGameInfo::AddPlayerMatchmakingGroup ( )
{
	static UFunction* pFnAddPlayerMatchmakingGroup = NULL;

	if ( ! pFnAddPlayerMatchmakingGroup )
		pFnAddPlayerMatchmakingGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AddPlayerMatchmakingGroup" );

	AKFGameInfo_execAddPlayerMatchmakingGroup_Parms AddPlayerMatchmakingGroup_Parms;

	this->ProcessEvent ( pFnAddPlayerMatchmakingGroup, &AddPlayerMatchmakingGroup_Parms, NULL );
};

// Function KFGame.KFGameInfo.StripFromMatchmakingGroups
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::StripFromMatchmakingGroups ( )
{
	static UFunction* pFnStripFromMatchmakingGroups = NULL;

	if ( ! pFnStripFromMatchmakingGroups )
		pFnStripFromMatchmakingGroups = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.StripFromMatchmakingGroups" );

	AKFGameInfo_execStripFromMatchmakingGroups_Parms StripFromMatchmakingGroups_Parms;

	this->ProcessEvent ( pFnStripFromMatchmakingGroups, &StripFromMatchmakingGroups_Parms, NULL );
};

// Function KFGame.KFGameInfo.RemoveDuplicates
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::RemoveDuplicates ( )
{
	static UFunction* pFnRemoveDuplicates = NULL;

	if ( ! pFnRemoveDuplicates )
		pFnRemoveDuplicates = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.RemoveDuplicates" );

	AKFGameInfo_execRemoveDuplicates_Parms RemoveDuplicates_Parms;

	this->ProcessEvent ( pFnRemoveDuplicates, &RemoveDuplicates_Parms, NULL );
};

// Function KFGame.KFGameInfo.UniqueReservationAdd
// [0x00820002] 
// Parameters infos:

void AKFGameInfo::UniqueReservationAdd ( )
{
	static UFunction* pFnUniqueReservationAdd = NULL;

	if ( ! pFnUniqueReservationAdd )
		pFnUniqueReservationAdd = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.UniqueReservationAdd" );

	AKFGameInfo_execUniqueReservationAdd_Parms UniqueReservationAdd_Parms;

	this->ProcessEvent ( pFnUniqueReservationAdd, &UniqueReservationAdd_Parms, NULL );
};

// Function KFGame.KFGameInfo.SendServerMaintenanceMessage
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventSendServerMaintenanceMessage ( )
{
	static UFunction* pFnSendServerMaintenanceMessage = NULL;

	if ( ! pFnSendServerMaintenanceMessage )
		pFnSendServerMaintenanceMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SendServerMaintenanceMessage" );

	AKFGameInfo_eventSendServerMaintenanceMessage_Parms SendServerMaintenanceMessage_Parms;

	this->ProcessEvent ( pFnSendServerMaintenanceMessage, &SendServerMaintenanceMessage_Parms, NULL );
};

// Function KFGame.KFGameInfo.Login
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventLogin ( )
{
	static UFunction* pFnLogin = NULL;

	if ( ! pFnLogin )
		pFnLogin = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.Login" );

	AKFGameInfo_eventLogin_Parms Login_Parms;

	this->ProcessEvent ( pFnLogin, &Login_Parms, NULL );
};

// Function KFGame.KFGameInfo.MakeReservations
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventMakeReservations ( )
{
	static UFunction* pFnMakeReservations = NULL;

	if ( ! pFnMakeReservations )
		pFnMakeReservations = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.MakeReservations" );

	AKFGameInfo_eventMakeReservations_Parms MakeReservations_Parms;

	this->ProcessEvent ( pFnMakeReservations, &MakeReservations_Parms, NULL );
};

// Function KFGame.KFGameInfo.AtCapacity
// [0x00024002] 
// Parameters infos:

void AKFGameInfo::AtCapacity ( )
{
	static UFunction* pFnAtCapacity = NULL;

	if ( ! pFnAtCapacity )
		pFnAtCapacity = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AtCapacity" );

	AKFGameInfo_execAtCapacity_Parms AtCapacity_Parms;

	this->ProcessEvent ( pFnAtCapacity, &AtCapacity_Parms, NULL );
};

// Function KFGame.KFGameInfo.UniqueIdAdd
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::UniqueIdAdd ( )
{
	static UFunction* pFnUniqueIdAdd = NULL;

	if ( ! pFnUniqueIdAdd )
		pFnUniqueIdAdd = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.UniqueIdAdd" );

	AKFGameInfo_execUniqueIdAdd_Parms UniqueIdAdd_Parms;

	this->ProcessEvent ( pFnUniqueIdAdd, &UniqueIdAdd_Parms, NULL );
};

// Function KFGame.KFGameInfo.ReservationPresent
// [0x00820002] 
// Parameters infos:

void AKFGameInfo::ReservationPresent ( )
{
	static UFunction* pFnReservationPresent = NULL;

	if ( ! pFnReservationPresent )
		pFnReservationPresent = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ReservationPresent" );

	AKFGameInfo_execReservationPresent_Parms ReservationPresent_Parms;

	this->ProcessEvent ( pFnReservationPresent, &ReservationPresent_Parms, NULL );
};

// Function KFGame.KFGameInfo.UniqueIdPresent
// [0x00C20002] 
// Parameters infos:

void AKFGameInfo::UniqueIdPresent ( )
{
	static UFunction* pFnUniqueIdPresent = NULL;

	if ( ! pFnUniqueIdPresent )
		pFnUniqueIdPresent = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.UniqueIdPresent" );

	AKFGameInfo_execUniqueIdPresent_Parms UniqueIdPresent_Parms;

	this->ProcessEvent ( pFnUniqueIdPresent, &UniqueIdPresent_Parms, NULL );
};

// Function KFGame.KFGameInfo.FindInactivePRI
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::FindInactivePRI ( )
{
	static UFunction* pFnFindInactivePRI = NULL;

	if ( ! pFnFindInactivePRI )
		pFnFindInactivePRI = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.FindInactivePRI" );

	AKFGameInfo_execFindInactivePRI_Parms FindInactivePRI_Parms;

	this->ProcessEvent ( pFnFindInactivePRI, &FindInactivePRI_Parms, NULL );
};

// Function KFGame.KFGameInfo.AddInactivePRI
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::AddInactivePRI ( )
{
	static UFunction* pFnAddInactivePRI = NULL;

	if ( ! pFnAddInactivePRI )
		pFnAddInactivePRI = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AddInactivePRI" );

	AKFGameInfo_execAddInactivePRI_Parms AddInactivePRI_Parms;

	this->ProcessEvent ( pFnAddInactivePRI, &AddInactivePRI_Parms, NULL );
};

// Function KFGame.KFGameInfo.UnregisterPlayer
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::UnregisterPlayer ( )
{
	static UFunction* pFnUnregisterPlayer = NULL;

	if ( ! pFnUnregisterPlayer )
		pFnUnregisterPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.UnregisterPlayer" );

	AKFGameInfo_execUnregisterPlayer_Parms UnregisterPlayer_Parms;

	this->ProcessEvent ( pFnUnregisterPlayer, &UnregisterPlayer_Parms, NULL );
};

// Function KFGame.KFGameInfo.MaintenanceRestart
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo::MaintenanceRestart ( )
{
	static UFunction* pFnMaintenanceRestart = NULL;

	if ( ! pFnMaintenanceRestart )
		pFnMaintenanceRestart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.MaintenanceRestart" );

	AKFGameInfo_execMaintenanceRestart_Parms MaintenanceRestart_Parms;

	this->ProcessEvent ( pFnMaintenanceRestart, &MaintenanceRestart_Parms, NULL );
};

// Function KFGame.KFGameInfo.FindCollectibles
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo::FindCollectibles ( )
{
	static UFunction* pFnFindCollectibles = NULL;

	if ( ! pFnFindCollectibles )
		pFnFindCollectibles = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.FindCollectibles" );

	AKFGameInfo_execFindCollectibles_Parms FindCollectibles_Parms;

	this->ProcessEvent ( pFnFindCollectibles, &FindCollectibles_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetFriendlyFireScale
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo::SetFriendlyFireScale ( )
{
	static UFunction* pFnSetFriendlyFireScale = NULL;

	if ( ! pFnSetFriendlyFireScale )
		pFnSetFriendlyFireScale = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetFriendlyFireScale" );

	AKFGameInfo_execSetFriendlyFireScale_Parms SetFriendlyFireScale_Parms;

	this->ProcessEvent ( pFnSetFriendlyFireScale, &SetFriendlyFireScale_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetCurrentMapCycleIndex
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::GetCurrentMapCycleIndex ( )
{
	static UFunction* pFnGetCurrentMapCycleIndex = NULL;

	if ( ! pFnGetCurrentMapCycleIndex )
		pFnGetCurrentMapCycleIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetCurrentMapCycleIndex" );

	AKFGameInfo_execGetCurrentMapCycleIndex_Parms GetCurrentMapCycleIndex_Parms;

	this->ProcessEvent ( pFnGetCurrentMapCycleIndex, &GetCurrentMapCycleIndex_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetNextMap
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetNextMap ( )
{
	static UFunction* pFnGetNextMap = NULL;

	if ( ! pFnGetNextMap )
		pFnGetNextMap = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetNextMap" );

	AKFGameInfo_execGetNextMap_Parms GetNextMap_Parms;

	this->ProcessEvent ( pFnGetNextMap, &GetNextMap_Parms, NULL );
};

// Function KFGame.KFGameInfo.ForceAbominationMusicTrack
// [0x00020102] 
// Parameters infos:

void AKFGameInfo::ForceAbominationMusicTrack ( )
{
	static UFunction* pFnForceAbominationMusicTrack = NULL;

	if ( ! pFnForceAbominationMusicTrack )
		pFnForceAbominationMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ForceAbominationMusicTrack" );

	AKFGameInfo_execForceAbominationMusicTrack_Parms ForceAbominationMusicTrack_Parms;

	this->ProcessEvent ( pFnForceAbominationMusicTrack, &ForceAbominationMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameInfo.ForceKingFPMusicTrack
// [0x00020102] 
// Parameters infos:

void AKFGameInfo::ForceKingFPMusicTrack ( )
{
	static UFunction* pFnForceKingFPMusicTrack = NULL;

	if ( ! pFnForceKingFPMusicTrack )
		pFnForceKingFPMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ForceKingFPMusicTrack" );

	AKFGameInfo_execForceKingFPMusicTrack_Parms ForceKingFPMusicTrack_Parms;

	this->ProcessEvent ( pFnForceKingFPMusicTrack, &ForceKingFPMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameInfo.ForceMatriarchMusicTrack
// [0x00020102] 
// Parameters infos:

void AKFGameInfo::ForceMatriarchMusicTrack ( )
{
	static UFunction* pFnForceMatriarchMusicTrack = NULL;

	if ( ! pFnForceMatriarchMusicTrack )
		pFnForceMatriarchMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ForceMatriarchMusicTrack" );

	AKFGameInfo_execForceMatriarchMusicTrack_Parms ForceMatriarchMusicTrack_Parms;

	this->ProcessEvent ( pFnForceMatriarchMusicTrack, &ForceMatriarchMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameInfo.ForcePatriarchMusicTrack
// [0x00020102] 
// Parameters infos:

void AKFGameInfo::ForcePatriarchMusicTrack ( )
{
	static UFunction* pFnForcePatriarchMusicTrack = NULL;

	if ( ! pFnForcePatriarchMusicTrack )
		pFnForcePatriarchMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ForcePatriarchMusicTrack" );

	AKFGameInfo_execForcePatriarchMusicTrack_Parms ForcePatriarchMusicTrack_Parms;

	this->ProcessEvent ( pFnForcePatriarchMusicTrack, &ForcePatriarchMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameInfo.ForceHansMusicTrack
// [0x00020102] 
// Parameters infos:

void AKFGameInfo::ForceHansMusicTrack ( )
{
	static UFunction* pFnForceHansMusicTrack = NULL;

	if ( ! pFnForceHansMusicTrack )
		pFnForceHansMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ForceHansMusicTrack" );

	AKFGameInfo_execForceHansMusicTrack_Parms ForceHansMusicTrack_Parms;

	this->ProcessEvent ( pFnForceHansMusicTrack, &ForceHansMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameInfo.ForceCreditsMusicTrack
// [0x00020102] 
// Parameters infos:

void AKFGameInfo::ForceCreditsMusicTrack ( )
{
	static UFunction* pFnForceCreditsMusicTrack = NULL;

	if ( ! pFnForceCreditsMusicTrack )
		pFnForceCreditsMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ForceCreditsMusicTrack" );

	AKFGameInfo_execForceCreditsMusicTrack_Parms ForceCreditsMusicTrack_Parms;

	this->ProcessEvent ( pFnForceCreditsMusicTrack, &ForceCreditsMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameInfo.ForceMenuMusicTrack
// [0x00020102] 
// Parameters infos:

void AKFGameInfo::ForceMenuMusicTrack ( )
{
	static UFunction* pFnForceMenuMusicTrack = NULL;

	if ( ! pFnForceMenuMusicTrack )
		pFnForceMenuMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ForceMenuMusicTrack" );

	AKFGameInfo_execForceMenuMusicTrack_Parms ForceMenuMusicTrack_Parms;

	this->ProcessEvent ( pFnForceMenuMusicTrack, &ForceMenuMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameInfo.ShouldPlayMusicAtStart
// [0x00022000] 
// Parameters infos:

void AKFGameInfo::ShouldPlayMusicAtStart ( )
{
	static UFunction* pFnShouldPlayMusicAtStart = NULL;

	if ( ! pFnShouldPlayMusicAtStart )
		pFnShouldPlayMusicAtStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ShouldPlayMusicAtStart" );

	AKFGameInfo_execShouldPlayMusicAtStart_Parms ShouldPlayMusicAtStart_Parms;

	this->ProcessEvent ( pFnShouldPlayMusicAtStart, &ShouldPlayMusicAtStart_Parms, NULL );
};

// Function KFGame.KFGameInfo.ShouldPlayActionMusicTrack
// [0x00022000] 
// Parameters infos:

void AKFGameInfo::ShouldPlayActionMusicTrack ( )
{
	static UFunction* pFnShouldPlayActionMusicTrack = NULL;

	if ( ! pFnShouldPlayActionMusicTrack )
		pFnShouldPlayActionMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ShouldPlayActionMusicTrack" );

	AKFGameInfo_execShouldPlayActionMusicTrack_Parms ShouldPlayActionMusicTrack_Parms;

	this->ProcessEvent ( pFnShouldPlayActionMusicTrack, &ShouldPlayActionMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetGameIntensityForMusic
// [0x00020000] 
// Parameters infos:

void AKFGameInfo::GetGameIntensityForMusic ( )
{
	static UFunction* pFnGetGameIntensityForMusic = NULL;

	if ( ! pFnGetGameIntensityForMusic )
		pFnGetGameIntensityForMusic = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetGameIntensityForMusic" );

	AKFGameInfo_execGetGameIntensityForMusic_Parms GetGameIntensityForMusic_Parms;

	this->ProcessEvent ( pFnGetGameIntensityForMusic, &GetGameIntensityForMusic_Parms, NULL );
};

// Function KFGame.KFGameInfo.NotifyNavigationChanged
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::NotifyNavigationChanged ( )
{
	static UFunction* pFnNotifyNavigationChanged = NULL;

	if ( ! pFnNotifyNavigationChanged )
		pFnNotifyNavigationChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.NotifyNavigationChanged" );

	AKFGameInfo_execNotifyNavigationChanged_Parms NotifyNavigationChanged_Parms;

	this->ProcessEvent ( pFnNotifyNavigationChanged, &NotifyNavigationChanged_Parms, NULL );
};

// Function KFGame.KFGameInfo.NotifyHeadshotKill
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::NotifyHeadshotKill ( )
{
	static UFunction* pFnNotifyHeadshotKill = NULL;

	if ( ! pFnNotifyHeadshotKill )
		pFnNotifyHeadshotKill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.NotifyHeadshotKill" );

	AKFGameInfo_execNotifyHeadshotKill_Parms NotifyHeadshotKill_Parms;

	this->ProcessEvent ( pFnNotifyHeadshotKill, &NotifyHeadshotKill_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckZedTimeOnKill
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CheckZedTimeOnKill ( )
{
	static UFunction* pFnCheckZedTimeOnKill = NULL;

	if ( ! pFnCheckZedTimeOnKill )
		pFnCheckZedTimeOnKill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckZedTimeOnKill" );

	AKFGameInfo_execCheckZedTimeOnKill_Parms CheckZedTimeOnKill_Parms;

	this->ProcessEvent ( pFnCheckZedTimeOnKill, &CheckZedTimeOnKill_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetZedTimeDilation
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::SetZedTimeDilation ( )
{
	static UFunction* pFnSetZedTimeDilation = NULL;

	if ( ! pFnSetZedTimeDilation )
		pFnSetZedTimeDilation = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetZedTimeDilation" );

	AKFGameInfo_execSetZedTimeDilation_Parms SetZedTimeDilation_Parms;

	this->ProcessEvent ( pFnSetZedTimeDilation, &SetZedTimeDilation_Parms, NULL );
};

// Function KFGame.KFGameInfo.IsZedTimeActive
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::IsZedTimeActive ( )
{
	static UFunction* pFnIsZedTimeActive = NULL;

	if ( ! pFnIsZedTimeActive )
		pFnIsZedTimeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.IsZedTimeActive" );

	AKFGameInfo_execIsZedTimeActive_Parms IsZedTimeActive_Parms;

	this->ProcessEvent ( pFnIsZedTimeActive, &IsZedTimeActive_Parms, NULL );
};

// Function KFGame.KFGameInfo.TickZedTime
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::TickZedTime ( )
{
	static UFunction* pFnTickZedTime = NULL;

	if ( ! pFnTickZedTime )
		pFnTickZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.TickZedTime" );

	AKFGameInfo_execTickZedTime_Parms TickZedTime_Parms;

	this->ProcessEvent ( pFnTickZedTime, &TickZedTime_Parms, NULL );
};

// Function KFGame.KFGameInfo.Tick
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.Tick" );

	AKFGameInfo_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFGameInfo.DramaticEvent
// [0x00024002] 
// Parameters infos:

void AKFGameInfo::DramaticEvent ( )
{
	static UFunction* pFnDramaticEvent = NULL;

	if ( ! pFnDramaticEvent )
		pFnDramaticEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.DramaticEvent" );

	AKFGameInfo_execDramaticEvent_Parms DramaticEvent_Parms;

	this->ProcessEvent ( pFnDramaticEvent, &DramaticEvent_Parms, NULL );
};

// Function KFGame.KFGameInfo.AddPlayerXP
// [0x00044401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGameInfo::AddPlayerXP ( )
{
	static UFunction* pFnAddPlayerXP = NULL;

	if ( ! pFnAddPlayerXP )
		pFnAddPlayerXP = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AddPlayerXP" );

	AKFGameInfo_execAddPlayerXP_Parms AddPlayerXP_Parms;

	pFnAddPlayerXP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPlayerXP, &AddPlayerXP_Parms, NULL );

	pFnAddPlayerXP->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.DistributeMoneyAndXP
// [0x00480002] 
// Parameters infos:

void AKFGameInfo::DistributeMoneyAndXP ( )
{
	static UFunction* pFnDistributeMoneyAndXP = NULL;

	if ( ! pFnDistributeMoneyAndXP )
		pFnDistributeMoneyAndXP = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.DistributeMoneyAndXP" );

	AKFGameInfo_execDistributeMoneyAndXP_Parms DistributeMoneyAndXP_Parms;

	this->ProcessEvent ( pFnDistributeMoneyAndXP, &DistributeMoneyAndXP_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetNumHumanTeamPlayers
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetNumHumanTeamPlayers ( )
{
	static UFunction* pFnGetNumHumanTeamPlayers = NULL;

	if ( ! pFnGetNumHumanTeamPlayers )
		pFnGetNumHumanTeamPlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetNumHumanTeamPlayers" );

	AKFGameInfo_execGetNumHumanTeamPlayers_Parms GetNumHumanTeamPlayers_Parms;

	this->ProcessEvent ( pFnGetNumHumanTeamPlayers, &GetNumHumanTeamPlayers_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetNumPlayers
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetNumPlayers ( )
{
	static UFunction* pFnGetNumPlayers = NULL;

	if ( ! pFnGetNumPlayers )
		pFnGetNumPlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetNumPlayers" );

	AKFGameInfo_execGetNumPlayers_Parms GetNumPlayers_Parms;

	this->ProcessEvent ( pFnGetNumPlayers, &GetNumPlayers_Parms, NULL );
};

// Function KFGame.KFGameInfo.ModifyAIDoshValueForPlayerCount
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::ModifyAIDoshValueForPlayerCount ( )
{
	static UFunction* pFnModifyAIDoshValueForPlayerCount = NULL;

	if ( ! pFnModifyAIDoshValueForPlayerCount )
		pFnModifyAIDoshValueForPlayerCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ModifyAIDoshValueForPlayerCount" );

	AKFGameInfo_execModifyAIDoshValueForPlayerCount_Parms ModifyAIDoshValueForPlayerCount_Parms;

	this->ProcessEvent ( pFnModifyAIDoshValueForPlayerCount, &ModifyAIDoshValueForPlayerCount_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetAdjustedAIDoshValue
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetAdjustedAIDoshValue ( )
{
	static UFunction* pFnGetAdjustedAIDoshValue = NULL;

	if ( ! pFnGetAdjustedAIDoshValue )
		pFnGetAdjustedAIDoshValue = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetAdjustedAIDoshValue" );

	AKFGameInfo_execGetAdjustedAIDoshValue_Parms GetAdjustedAIDoshValue_Parms;

	this->ProcessEvent ( pFnGetAdjustedAIDoshValue, &GetAdjustedAIDoshValue_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckForBerserkerSmallRadiusKill
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CheckForBerserkerSmallRadiusKill ( )
{
	static UFunction* pFnCheckForBerserkerSmallRadiusKill = NULL;

	if ( ! pFnCheckForBerserkerSmallRadiusKill )
		pFnCheckForBerserkerSmallRadiusKill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckForBerserkerSmallRadiusKill" );

	AKFGameInfo_execCheckForBerserkerSmallRadiusKill_Parms CheckForBerserkerSmallRadiusKill_Parms;

	this->ProcessEvent ( pFnCheckForBerserkerSmallRadiusKill, &CheckForBerserkerSmallRadiusKill_Parms, NULL );
};

// Function KFGame.KFGameInfo.NotifyIgnoredScream
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::NotifyIgnoredScream ( )
{
	static UFunction* pFnNotifyIgnoredScream = NULL;

	if ( ! pFnNotifyIgnoredScream )
		pFnNotifyIgnoredScream = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.NotifyIgnoredScream" );

	AKFGameInfo_execNotifyIgnoredScream_Parms NotifyIgnoredScream_Parms;

	this->ProcessEvent ( pFnNotifyIgnoredScream, &NotifyIgnoredScream_Parms, NULL );
};

// Function KFGame.KFGameInfo.NotifyRally
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::NotifyRally ( )
{
	static UFunction* pFnNotifyRally = NULL;

	if ( ! pFnNotifyRally )
		pFnNotifyRally = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.NotifyRally" );

	AKFGameInfo_execNotifyRally_Parms NotifyRally_Parms;

	this->ProcessEvent ( pFnNotifyRally, &NotifyRally_Parms, NULL );
};

// Function KFGame.KFGameInfo.ScoreMonsterKill
// [0x00080002] 
// Parameters infos:

void AKFGameInfo::ScoreMonsterKill ( )
{
	static UFunction* pFnScoreMonsterKill = NULL;

	if ( ! pFnScoreMonsterKill )
		pFnScoreMonsterKill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ScoreMonsterKill" );

	AKFGameInfo_execScoreMonsterKill_Parms ScoreMonsterKill_Parms;

	this->ProcessEvent ( pFnScoreMonsterKill, &ScoreMonsterKill_Parms, NULL );
};

// Function KFGame.KFGameInfo.ScoreKill
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ScoreKill ( )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ScoreKill" );

	AKFGameInfo_execScoreKill_Parms ScoreKill_Parms;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function KFGame.KFGameInfo.PassiveHeal
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::PassiveHeal ( )
{
	static UFunction* pFnPassiveHeal = NULL;

	if ( ! pFnPassiveHeal )
		pFnPassiveHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.PassiveHeal" );

	AKFGameInfo_execPassiveHeal_Parms PassiveHeal_Parms;

	this->ProcessEvent ( pFnPassiveHeal, &PassiveHeal_Parms, NULL );
};

// Function KFGame.KFGameInfo.ScoreHeal
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ScoreHeal ( )
{
	static UFunction* pFnScoreHeal = NULL;

	if ( ! pFnScoreHeal )
		pFnScoreHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ScoreHeal" );

	AKFGameInfo_execScoreHeal_Parms ScoreHeal_Parms;

	this->ProcessEvent ( pFnScoreHeal, &ScoreHeal_Parms, NULL );
};

// Function KFGame.KFGameInfo.ScoreDamage
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ScoreDamage ( )
{
	static UFunction* pFnScoreDamage = NULL;

	if ( ! pFnScoreDamage )
		pFnScoreDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ScoreDamage" );

	AKFGameInfo_execScoreDamage_Parms ScoreDamage_Parms;

	this->ProcessEvent ( pFnScoreDamage, &ScoreDamage_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetBossKillScore
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetBossKillScore ( )
{
	static UFunction* pFnGetBossKillScore = NULL;

	if ( ! pFnGetBossKillScore )
		pFnGetBossKillScore = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetBossKillScore" );

	AKFGameInfo_execGetBossKillScore_Parms GetBossKillScore_Parms;

	this->ProcessEvent ( pFnGetBossKillScore, &GetBossKillScore_Parms, NULL );
};

// Function KFGame.KFGameInfo.BossDied
// [0x00024000] 
// Parameters infos:

void AKFGameInfo::BossDied ( )
{
	static UFunction* pFnBossDied = NULL;

	if ( ! pFnBossDied )
		pFnBossDied = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.BossDied" );

	AKFGameInfo_execBossDied_Parms BossDied_Parms;

	this->ProcessEvent ( pFnBossDied, &BossDied_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetAdjustedTeamDeathPenalty
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetAdjustedTeamDeathPenalty ( )
{
	static UFunction* pFnGetAdjustedTeamDeathPenalty = NULL;

	if ( ! pFnGetAdjustedTeamDeathPenalty )
		pFnGetAdjustedTeamDeathPenalty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetAdjustedTeamDeathPenalty" );

	AKFGameInfo_execGetAdjustedTeamDeathPenalty_Parms GetAdjustedTeamDeathPenalty_Parms;

	this->ProcessEvent ( pFnGetAdjustedTeamDeathPenalty, &GetAdjustedTeamDeathPenalty_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetAdjustedDeathPenalty
// [0x00024000] 
// Parameters infos:

void AKFGameInfo::GetAdjustedDeathPenalty ( )
{
	static UFunction* pFnGetAdjustedDeathPenalty = NULL;

	if ( ! pFnGetAdjustedDeathPenalty )
		pFnGetAdjustedDeathPenalty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetAdjustedDeathPenalty" );

	AKFGameInfo_execGetAdjustedDeathPenalty_Parms GetAdjustedDeathPenalty_Parms;

	this->ProcessEvent ( pFnGetAdjustedDeathPenalty, &GetAdjustedDeathPenalty_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckShouldBroadcastLastManStanding
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CheckShouldBroadcastLastManStanding ( )
{
	static UFunction* pFnCheckShouldBroadcastLastManStanding = NULL;

	if ( ! pFnCheckShouldBroadcastLastManStanding )
		pFnCheckShouldBroadcastLastManStanding = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckShouldBroadcastLastManStanding" );

	AKFGameInfo_execCheckShouldBroadcastLastManStanding_Parms CheckShouldBroadcastLastManStanding_Parms;

	this->ProcessEvent ( pFnCheckShouldBroadcastLastManStanding, &CheckShouldBroadcastLastManStanding_Parms, NULL );
};

// Function KFGame.KFGameInfo.BroadcastDeathMessage
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::BroadcastDeathMessage ( )
{
	static UFunction* pFnBroadcastDeathMessage = NULL;

	if ( ! pFnBroadcastDeathMessage )
		pFnBroadcastDeathMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.BroadcastDeathMessage" );

	AKFGameInfo_execBroadcastDeathMessage_Parms BroadcastDeathMessage_Parms;

	this->ProcessEvent ( pFnBroadcastDeathMessage, &BroadcastDeathMessage_Parms, NULL );
};

// Function KFGame.KFGameInfo.BroadCastLastManStanding
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::BroadCastLastManStanding ( )
{
	static UFunction* pFnBroadCastLastManStanding = NULL;

	if ( ! pFnBroadCastLastManStanding )
		pFnBroadCastLastManStanding = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.BroadCastLastManStanding" );

	AKFGameInfo_execBroadCastLastManStanding_Parms BroadCastLastManStanding_Parms;

	this->ProcessEvent ( pFnBroadCastLastManStanding, &BroadCastLastManStanding_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetLastHitByDamageType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetLastHitByDamageType ( )
{
	static UFunction* pFnGetLastHitByDamageType = NULL;

	if ( ! pFnGetLastHitByDamageType )
		pFnGetLastHitByDamageType = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetLastHitByDamageType" );

	AKFGameInfo_execGetLastHitByDamageType_Parms GetLastHitByDamageType_Parms;

	this->ProcessEvent ( pFnGetLastHitByDamageType, &GetLastHitByDamageType_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckTrapMilestoneComplete
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGameInfo::CheckTrapMilestoneComplete ( )
{
	static UFunction* pFnCheckTrapMilestoneComplete = NULL;

	if ( ! pFnCheckTrapMilestoneComplete )
		pFnCheckTrapMilestoneComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckTrapMilestoneComplete" );

	AKFGameInfo_execCheckTrapMilestoneComplete_Parms CheckTrapMilestoneComplete_Parms;

	pFnCheckTrapMilestoneComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckTrapMilestoneComplete, &CheckTrapMilestoneComplete_Parms, NULL );

	pFnCheckTrapMilestoneComplete->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.AddTrapKill
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::AddTrapKill ( )
{
	static UFunction* pFnAddTrapKill = NULL;

	if ( ! pFnAddTrapKill )
		pFnAddTrapKill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AddTrapKill" );

	AKFGameInfo_execAddTrapKill_Parms AddTrapKill_Parms;

	this->ProcessEvent ( pFnAddTrapKill, &AddTrapKill_Parms, NULL );
};

// Function KFGame.KFGameInfo.Killed
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::Killed ( )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.Killed" );

	AKFGameInfo_execKilled_Parms Killed_Parms;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function KFGame.KFGameInfo.ReduceDamage
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::ReduceDamage ( )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ReduceDamage" );

	AKFGameInfo_execReduceDamage_Parms ReduceDamage_Parms;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );
};

// Function KFGame.KFGameInfo.CanSpectate
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CanSpectate ( )
{
	static UFunction* pFnCanSpectate = NULL;

	if ( ! pFnCanSpectate )
		pFnCanSpectate = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CanSpectate" );

	AKFGameInfo_execCanSpectate_Parms CanSpectate_Parms;

	this->ProcessEvent ( pFnCanSpectate, &CanSpectate_Parms, NULL );
};

// Function KFGame.KFGameInfo.ChangeTeam
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ChangeTeam ( )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ChangeTeam" );

	AKFGameInfo_execChangeTeam_Parms ChangeTeam_Parms;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );
};

// Function KFGame.KFGameInfo.PickTeam
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::PickTeam ( )
{
	static UFunction* pFnPickTeam = NULL;

	if ( ! pFnPickTeam )
		pFnPickTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.PickTeam" );

	AKFGameInfo_execPickTeam_Parms PickTeam_Parms;

	this->ProcessEvent ( pFnPickTeam, &PickTeam_Parms, NULL );
};

// Function KFGame.KFGameInfo.CreateTeam
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CreateTeam ( )
{
	static UFunction* pFnCreateTeam = NULL;

	if ( ! pFnCreateTeam )
		pFnCreateTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CreateTeam" );

	AKFGameInfo_execCreateTeam_Parms CreateTeam_Parms;

	this->ProcessEvent ( pFnCreateTeam, &CreateTeam_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetTeam
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::SetTeam ( )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetTeam" );

	AKFGameInfo_execSetTeam_Parms SetTeam_Parms;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetMonsterDefaults
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::SetMonsterDefaults ( )
{
	static UFunction* pFnSetMonsterDefaults = NULL;

	if ( ! pFnSetMonsterDefaults )
		pFnSetMonsterDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetMonsterDefaults" );

	AKFGameInfo_execSetMonsterDefaults_Parms SetMonsterDefaults_Parms;

	this->ProcessEvent ( pFnSetMonsterDefaults, &SetMonsterDefaults_Parms, NULL );
};

// Function KFGame.KFGameInfo.AdjustStartingGrenadeCount
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::AdjustStartingGrenadeCount ( )
{
	static UFunction* pFnAdjustStartingGrenadeCount = NULL;

	if ( ! pFnAdjustStartingGrenadeCount )
		pFnAdjustStartingGrenadeCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AdjustStartingGrenadeCount" );

	AKFGameInfo_execAdjustStartingGrenadeCount_Parms AdjustStartingGrenadeCount_Parms;

	this->ProcessEvent ( pFnAdjustStartingGrenadeCount, &AdjustStartingGrenadeCount_Parms, NULL );
};

// Function KFGame.KFGameInfo.AllowPrimaryWeapon
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::AllowPrimaryWeapon ( )
{
	static UFunction* pFnAllowPrimaryWeapon = NULL;

	if ( ! pFnAllowPrimaryWeapon )
		pFnAllowPrimaryWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AllowPrimaryWeapon" );

	AKFGameInfo_execAllowPrimaryWeapon_Parms AllowPrimaryWeapon_Parms;

	this->ProcessEvent ( pFnAllowPrimaryWeapon, &AllowPrimaryWeapon_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetGameInfoSpawnRateMod
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetGameInfoSpawnRateMod ( )
{
	static UFunction* pFnGetGameInfoSpawnRateMod = NULL;

	if ( ! pFnGetGameInfoSpawnRateMod )
		pFnGetGameInfoSpawnRateMod = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetGameInfoSpawnRateMod" );

	AKFGameInfo_execGetGameInfoSpawnRateMod_Parms GetGameInfoSpawnRateMod_Parms;

	this->ProcessEvent ( pFnGetGameInfoSpawnRateMod, &GetGameInfoSpawnRateMod_Parms, NULL );
};

// Function KFGame.KFGameInfo.PrePossessAdjustments
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventPrePossessAdjustments ( )
{
	static UFunction* pFnPrePossessAdjustments = NULL;

	if ( ! pFnPrePossessAdjustments )
		pFnPrePossessAdjustments = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.PrePossessAdjustments" );

	AKFGameInfo_eventPrePossessAdjustments_Parms PrePossessAdjustments_Parms;

	this->ProcessEvent ( pFnPrePossessAdjustments, &PrePossessAdjustments_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetSpecificBossClass
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetSpecificBossClass ( )
{
	static UFunction* pFnGetSpecificBossClass = NULL;

	if ( ! pFnGetSpecificBossClass )
		pFnGetSpecificBossClass = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetSpecificBossClass" );

	AKFGameInfo_execGetSpecificBossClass_Parms GetSpecificBossClass_Parms;

	this->ProcessEvent ( pFnGetSpecificBossClass, &GetSpecificBossClass_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetBossAISpawnType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetBossAISpawnType ( )
{
	static UFunction* pFnGetBossAISpawnType = NULL;

	if ( ! pFnGetBossAISpawnType )
		pFnGetBossAISpawnType = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetBossAISpawnType" );

	AKFGameInfo_execGetBossAISpawnType_Parms GetBossAISpawnType_Parms;

	this->ProcessEvent ( pFnGetBossAISpawnType, &GetBossAISpawnType_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetAISpawnType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetAISpawnType ( )
{
	static UFunction* pFnGetAISpawnType = NULL;

	if ( ! pFnGetAISpawnType )
		pFnGetAISpawnType = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetAISpawnType" );

	AKFGameInfo_execGetAISpawnType_Parms GetAISpawnType_Parms;

	this->ProcessEvent ( pFnGetAISpawnType, &GetAISpawnType_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetNumAlwaysRelevantZeds
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetNumAlwaysRelevantZeds ( )
{
	static UFunction* pFnGetNumAlwaysRelevantZeds = NULL;

	if ( ! pFnGetNumAlwaysRelevantZeds )
		pFnGetNumAlwaysRelevantZeds = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetNumAlwaysRelevantZeds" );

	AKFGameInfo_execGetNumAlwaysRelevantZeds_Parms GetNumAlwaysRelevantZeds_Parms;

	this->ProcessEvent ( pFnGetNumAlwaysRelevantZeds, &GetNumAlwaysRelevantZeds_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetTotalWaveCountScale
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetTotalWaveCountScale ( )
{
	static UFunction* pFnGetTotalWaveCountScale = NULL;

	if ( ! pFnGetTotalWaveCountScale )
		pFnGetTotalWaveCountScale = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetTotalWaveCountScale" );

	AKFGameInfo_execGetTotalWaveCountScale_Parms GetTotalWaveCountScale_Parms;

	this->ProcessEvent ( pFnGetTotalWaveCountScale, &GetTotalWaveCountScale_Parms, NULL );
};

// Function KFGame.KFGameInfo.IsWaveActive
// [0x00020000] 
// Parameters infos:

void AKFGameInfo::IsWaveActive ( )
{
	static UFunction* pFnIsWaveActive = NULL;

	if ( ! pFnIsWaveActive )
		pFnIsWaveActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.IsWaveActive" );

	AKFGameInfo_execIsWaveActive_Parms IsWaveActive_Parms;

	this->ProcessEvent ( pFnIsWaveActive, &IsWaveActive_Parms, NULL );
};

// Function KFGame.KFGameInfo.ModifySprintSpeed
// [0x00420000] 
// Parameters infos:

void AKFGameInfo::ModifySprintSpeed ( )
{
	static UFunction* pFnModifySprintSpeed = NULL;

	if ( ! pFnModifySprintSpeed )
		pFnModifySprintSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ModifySprintSpeed" );

	AKFGameInfo_execModifySprintSpeed_Parms ModifySprintSpeed_Parms;

	this->ProcessEvent ( pFnModifySprintSpeed, &ModifySprintSpeed_Parms, NULL );
};

// Function KFGame.KFGameInfo.ModifyGroundSpeed
// [0x00420002] 
// Parameters infos:

void AKFGameInfo::ModifyGroundSpeed ( )
{
	static UFunction* pFnModifyGroundSpeed = NULL;

	if ( ! pFnModifyGroundSpeed )
		pFnModifyGroundSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ModifyGroundSpeed" );

	AKFGameInfo_execModifyGroundSpeed_Parms ModifyGroundSpeed_Parms;

	this->ProcessEvent ( pFnModifyGroundSpeed, &ModifyGroundSpeed_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::SetPlayerDefaults ( )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetPlayerDefaults" );

	AKFGameInfo_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function KFGame.KFGameInfo.IsInitialSpawnPointSelection
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::IsInitialSpawnPointSelection ( )
{
	static UFunction* pFnIsInitialSpawnPointSelection = NULL;

	if ( ! pFnIsInitialSpawnPointSelection )
		pFnIsInitialSpawnPointSelection = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.IsInitialSpawnPointSelection" );

	AKFGameInfo_execIsInitialSpawnPointSelection_Parms IsInitialSpawnPointSelection_Parms;

	this->ProcessEvent ( pFnIsInitialSpawnPointSelection, &IsInitialSpawnPointSelection_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckSpawnProximity
// [0x00026002] 
// Parameters infos:

void AKFGameInfo::CheckSpawnProximity ( )
{
	static UFunction* pFnCheckSpawnProximity = NULL;

	if ( ! pFnCheckSpawnProximity )
		pFnCheckSpawnProximity = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckSpawnProximity" );

	AKFGameInfo_execCheckSpawnProximity_Parms CheckSpawnProximity_Parms;

	this->ProcessEvent ( pFnCheckSpawnProximity, &CheckSpawnProximity_Parms, NULL );
};

// Function KFGame.KFGameInfo.FindCustomizationStart
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::FindCustomizationStart ( )
{
	static UFunction* pFnFindCustomizationStart = NULL;

	if ( ! pFnFindCustomizationStart )
		pFnFindCustomizationStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.FindCustomizationStart" );

	AKFGameInfo_execFindCustomizationStart_Parms FindCustomizationStart_Parms;

	this->ProcessEvent ( pFnFindCustomizationStart, &FindCustomizationStart_Parms, NULL );
};

// Function KFGame.KFGameInfo.ShouldSpawnAtStartSpot
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ShouldSpawnAtStartSpot ( )
{
	static UFunction* pFnShouldSpawnAtStartSpot = NULL;

	if ( ! pFnShouldSpawnAtStartSpot )
		pFnShouldSpawnAtStartSpot = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ShouldSpawnAtStartSpot" );

	AKFGameInfo_execShouldSpawnAtStartSpot_Parms ShouldSpawnAtStartSpot_Parms;

	this->ProcessEvent ( pFnShouldSpawnAtStartSpot, &ShouldSpawnAtStartSpot_Parms, NULL );
};

// Function KFGame.KFGameInfo.RatePlayerStart
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::RatePlayerStart ( )
{
	static UFunction* pFnRatePlayerStart = NULL;

	if ( ! pFnRatePlayerStart )
		pFnRatePlayerStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.RatePlayerStart" );

	AKFGameInfo_execRatePlayerStart_Parms RatePlayerStart_Parms;

	this->ProcessEvent ( pFnRatePlayerStart, &RatePlayerStart_Parms, NULL );
};

// Function KFGame.KFGameInfo.RestartPlayer
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.RestartPlayer" );

	AKFGameInfo_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function KFGame.KFGameInfo.StartHumans
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::StartHumans ( )
{
	static UFunction* pFnStartHumans = NULL;

	if ( ! pFnStartHumans )
		pFnStartHumans = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.StartHumans" );

	AKFGameInfo_execStartHumans_Parms StartHumans_Parms;

	this->ProcessEvent ( pFnStartHumans, &StartHumans_Parms, NULL );
};

// Function KFGame.KFGameInfo.SpawnCustomizationPawn
// [0x00820002] 
// Parameters infos:

void AKFGameInfo::SpawnCustomizationPawn ( )
{
	static UFunction* pFnSpawnCustomizationPawn = NULL;

	if ( ! pFnSpawnCustomizationPawn )
		pFnSpawnCustomizationPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SpawnCustomizationPawn" );

	AKFGameInfo_execSpawnCustomizationPawn_Parms SpawnCustomizationPawn_Parms;

	this->ProcessEvent ( pFnSpawnCustomizationPawn, &SpawnCustomizationPawn_Parms, NULL );
};

// Function KFGame.KFGameInfo.SpawnDefaultPawnFor
// [0x00820002] 
// Parameters infos:

void AKFGameInfo::SpawnDefaultPawnFor ( )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SpawnDefaultPawnFor" );

	AKFGameInfo_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );
};

// Function KFGame.KFGameInfo.CustomizationPointsInitialized
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CustomizationPointsInitialized ( )
{
	static UFunction* pFnCustomizationPointsInitialized = NULL;

	if ( ! pFnCustomizationPointsInitialized )
		pFnCustomizationPointsInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CustomizationPointsInitialized" );

	AKFGameInfo_execCustomizationPointsInitialized_Parms CustomizationPointsInitialized_Parms;

	this->ProcessEvent ( pFnCustomizationPointsInitialized, &CustomizationPointsInitialized_Parms, NULL );
};

// Function KFGame.KFGameInfo.ActivateNextPickup
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ActivateNextPickup ( )
{
	static UFunction* pFnActivateNextPickup = NULL;

	if ( ! pFnActivateNextPickup )
		pFnActivateNextPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ActivateNextPickup" );

	AKFGameInfo_execActivateNextPickup_Parms ActivateNextPickup_Parms;

	this->ProcessEvent ( pFnActivateNextPickup, &ActivateNextPickup_Parms, NULL );
};

// Function KFGame.KFGameInfo.DetermineNextPickup
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::DetermineNextPickup ( )
{
	static UFunction* pFnDetermineNextPickup = NULL;

	if ( ! pFnDetermineNextPickup )
		pFnDetermineNextPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.DetermineNextPickup" );

	AKFGameInfo_execDetermineNextPickup_Parms DetermineNextPickup_Parms;

	this->ProcessEvent ( pFnDetermineNextPickup, &DetermineNextPickup_Parms, NULL );
};

// Function KFGame.KFGameInfo.EnableNewPickup
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::EnableNewPickup ( )
{
	static UFunction* pFnEnableNewPickup = NULL;

	if ( ! pFnEnableNewPickup )
		pFnEnableNewPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.EnableNewPickup" );

	AKFGameInfo_execEnableNewPickup_Parms EnableNewPickup_Parms;

	this->ProcessEvent ( pFnEnableNewPickup, &EnableNewPickup_Parms, NULL );
};

// Function KFGame.KFGameInfo.ResetPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ResetPickups ( )
{
	static UFunction* pFnResetPickups = NULL;

	if ( ! pFnResetPickups )
		pFnResetPickups = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ResetPickups" );

	AKFGameInfo_execResetPickups_Parms ResetPickups_Parms;

	this->ProcessEvent ( pFnResetPickups, &ResetPickups_Parms, NULL );
};

// Function KFGame.KFGameInfo.ResetAllPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ResetAllPickups ( )
{
	static UFunction* pFnResetAllPickups = NULL;

	if ( ! pFnResetAllPickups )
		pFnResetAllPickups = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ResetAllPickups" );

	AKFGameInfo_execResetAllPickups_Parms ResetAllPickups_Parms;

	this->ProcessEvent ( pFnResetAllPickups, &ResetAllPickups_Parms, NULL );
};

// Function KFGame.KFGameInfo.InitAllPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::InitAllPickups ( )
{
	static UFunction* pFnInitAllPickups = NULL;

	if ( ! pFnInitAllPickups )
		pFnInitAllPickups = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.InitAllPickups" );

	AKFGameInfo_execInitAllPickups_Parms InitAllPickups_Parms;

	this->ProcessEvent ( pFnInitAllPickups, &InitAllPickups_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetupNextTrader
// [0x00020000] 
// Parameters infos:

void AKFGameInfo::SetupNextTrader ( )
{
	static UFunction* pFnSetupNextTrader = NULL;

	if ( ! pFnSetupNextTrader )
		pFnSetupNextTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetupNextTrader" );

	AKFGameInfo_execSetupNextTrader_Parms SetupNextTrader_Parms;

	this->ProcessEvent ( pFnSetupNextTrader, &SetupNextTrader_Parms, NULL );
};

// Function KFGame.KFGameInfo.InitTraderList
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::InitTraderList ( )
{
	static UFunction* pFnInitTraderList = NULL;

	if ( ! pFnInitTraderList )
		pFnInitTraderList = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.InitTraderList" );

	AKFGameInfo_execInitTraderList_Parms InitTraderList_Parms;

	this->ProcessEvent ( pFnInitTraderList, &InitTraderList_Parms, NULL );
};

// Function KFGame.KFGameInfo.AllowCheats
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::AllowCheats ( )
{
	static UFunction* pFnAllowCheats = NULL;

	if ( ! pFnAllowCheats )
		pFnAllowCheats = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.AllowCheats" );

	AKFGameInfo_execAllowCheats_Parms AllowCheats_Parms;

	this->ProcessEvent ( pFnAllowCheats, &AllowCheats_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetBossIndex
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::SetBossIndex ( )
{
	static UFunction* pFnSetBossIndex = NULL;

	if ( ! pFnSetBossIndex )
		pFnSetBossIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetBossIndex" );

	AKFGameInfo_execSetBossIndex_Parms SetBossIndex_Parms;

	this->ProcessEvent ( pFnSetBossIndex, &SetBossIndex_Parms, NULL );
};

// Function KFGame.KFGameInfo.UseSpecificBossIndex
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::UseSpecificBossIndex ( )
{
	static UFunction* pFnUseSpecificBossIndex = NULL;

	if ( ! pFnUseSpecificBossIndex )
		pFnUseSpecificBossIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.UseSpecificBossIndex" );

	AKFGameInfo_execUseSpecificBossIndex_Parms UseSpecificBossIndex_Parms;

	pFnUseSpecificBossIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUseSpecificBossIndex, &UseSpecificBossIndex_Parms, NULL );

	pFnUseSpecificBossIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.InitGRIVariables
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::InitGRIVariables ( )
{
	static UFunction* pFnInitGRIVariables = NULL;

	if ( ! pFnInitGRIVariables )
		pFnInitGRIVariables = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.InitGRIVariables" );

	AKFGameInfo_execInitGRIVariables_Parms InitGRIVariables_Parms;

	this->ProcessEvent ( pFnInitGRIVariables, &InitGRIVariables_Parms, NULL );
};

// Function KFGame.KFGameInfo.InitGameConductor
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::InitGameConductor ( )
{
	static UFunction* pFnInitGameConductor = NULL;

	if ( ! pFnInitGameConductor )
		pFnInitGameConductor = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.InitGameConductor" );

	AKFGameInfo_execInitGameConductor_Parms InitGameConductor_Parms;

	this->ProcessEvent ( pFnInitGameConductor, &InitGameConductor_Parms, NULL );
};

// Function KFGame.KFGameInfo.InitAIDirector
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventInitAIDirector ( )
{
	static UFunction* pFnInitAIDirector = NULL;

	if ( ! pFnInitAIDirector )
		pFnInitAIDirector = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.InitAIDirector" );

	AKFGameInfo_eventInitAIDirector_Parms InitAIDirector_Parms;

	this->ProcessEvent ( pFnInitAIDirector, &InitAIDirector_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckPopulation
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CheckPopulation ( )
{
	static UFunction* pFnCheckPopulation = NULL;

	if ( ! pFnCheckPopulation )
		pFnCheckPopulation = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckPopulation" );

	AKFGameInfo_execCheckPopulation_Parms CheckPopulation_Parms;

	this->ProcessEvent ( pFnCheckPopulation, &CheckPopulation_Parms, NULL );
};

// Function KFGame.KFGameInfo.ProcessServerTravel
// [0x00024002] 
// Parameters infos:

void AKFGameInfo::ProcessServerTravel ( )
{
	static UFunction* pFnProcessServerTravel = NULL;

	if ( ! pFnProcessServerTravel )
		pFnProcessServerTravel = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ProcessServerTravel" );

	AKFGameInfo_execProcessServerTravel_Parms ProcessServerTravel_Parms;

	this->ProcessEvent ( pFnProcessServerTravel, &ProcessServerTravel_Parms, NULL );
};

// Function KFGame.KFGameInfo.Logout
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::Logout ( )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.Logout" );

	AKFGameInfo_execLogout_Parms Logout_Parms;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function KFGame.KFGameInfo.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventPostLogin ( )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.PostLogin" );

	AKFGameInfo_eventPostLogin_Parms PostLogin_Parms;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function KFGame.KFGameInfo.GametypeChecksWaveLength
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GametypeChecksWaveLength ( )
{
	static UFunction* pFnGametypeChecksWaveLength = NULL;

	if ( ! pFnGametypeChecksWaveLength )
		pFnGametypeChecksWaveLength = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GametypeChecksWaveLength" );

	AKFGameInfo_execGametypeChecksWaveLength_Parms GametypeChecksWaveLength_Parms;

	this->ProcessEvent ( pFnGametypeChecksWaveLength, &GametypeChecksWaveLength_Parms, NULL );
};

// Function KFGame.KFGameInfo.GametypeChecksDifficulty
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GametypeChecksDifficulty ( )
{
	static UFunction* pFnGametypeChecksDifficulty = NULL;

	if ( ! pFnGametypeChecksDifficulty )
		pFnGametypeChecksDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GametypeChecksDifficulty" );

	AKFGameInfo_execGametypeChecksDifficulty_Parms GametypeChecksDifficulty_Parms;

	this->ProcessEvent ( pFnGametypeChecksDifficulty, &GametypeChecksDifficulty_Parms, NULL );
};

// Function KFGame.KFGameInfo.PreLogin
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventPreLogin ( )
{
	static UFunction* pFnPreLogin = NULL;

	if ( ! pFnPreLogin )
		pFnPreLogin = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.PreLogin" );

	AKFGameInfo_eventPreLogin_Parms PreLogin_Parms;

	this->ProcessEvent ( pFnPreLogin, &PreLogin_Parms, NULL );
};

// Function KFGame.KFGameInfo.ReplicateWelcomeScreen
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::ReplicateWelcomeScreen ( )
{
	static UFunction* pFnReplicateWelcomeScreen = NULL;

	if ( ! pFnReplicateWelcomeScreen )
		pFnReplicateWelcomeScreen = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ReplicateWelcomeScreen" );

	AKFGameInfo_execReplicateWelcomeScreen_Parms ReplicateWelcomeScreen_Parms;

	this->ProcessEvent ( pFnReplicateWelcomeScreen, &ReplicateWelcomeScreen_Parms, NULL );
};

// Function KFGame.KFGameInfo.InitGameplayEventWriter
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::InitGameplayEventWriter ( )
{
	static UFunction* pFnInitGameplayEventWriter = NULL;

	if ( ! pFnInitGameplayEventWriter )
		pFnInitGameplayEventWriter = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.InitGameplayEventWriter" );

	AKFGameInfo_execInitGameplayEventWriter_Parms InitGameplayEventWriter_Parms;

	this->ProcessEvent ( pFnInitGameplayEventWriter, &InitGameplayEventWriter_Parms, NULL );
};

// Function KFGame.KFGameInfo.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.PostBeginPlay" );

	AKFGameInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFGameInfo.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.PreBeginPlay" );

	AKFGameInfo_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFGameInfo.CheckForCustomSettings
// [0x00080400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::CheckForCustomSettings ( )
{
	static UFunction* pFnCheckForCustomSettings = NULL;

	if ( ! pFnCheckForCustomSettings )
		pFnCheckForCustomSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CheckForCustomSettings" );

	AKFGameInfo_execCheckForCustomSettings_Parms CheckForCustomSettings_Parms;

	pFnCheckForCustomSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForCustomSettings, &CheckForCustomSettings_Parms, NULL );

	pFnCheckForCustomSettings->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.GetFloatOption
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetFloatOption ( )
{
	static UFunction* pFnGetFloatOption = NULL;

	if ( ! pFnGetFloatOption )
		pFnGetFloatOption = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetFloatOption" );

	AKFGameInfo_execGetFloatOption_Parms GetFloatOption_Parms;

	this->ProcessEvent ( pFnGetFloatOption, &GetFloatOption_Parms, NULL );
};

// Function KFGame.KFGameInfo.CreateOutbreakEvent
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CreateOutbreakEvent ( )
{
	static UFunction* pFnCreateOutbreakEvent = NULL;

	if ( ! pFnCreateOutbreakEvent )
		pFnCreateOutbreakEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CreateOutbreakEvent" );

	AKFGameInfo_execCreateOutbreakEvent_Parms CreateOutbreakEvent_Parms;

	this->ProcessEvent ( pFnCreateOutbreakEvent, &CreateOutbreakEvent_Parms, NULL );
};

// Function KFGame.KFGameInfo.CreateDifficultyInfo
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::CreateDifficultyInfo ( )
{
	static UFunction* pFnCreateDifficultyInfo = NULL;

	if ( ! pFnCreateDifficultyInfo )
		pFnCreateDifficultyInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.CreateDifficultyInfo" );

	AKFGameInfo_execCreateDifficultyInfo_Parms CreateDifficultyInfo_Parms;

	this->ProcessEvent ( pFnCreateDifficultyInfo, &CreateDifficultyInfo_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetModifiedGameDifficulty
// [0x00020000] 
// Parameters infos:

void AKFGameInfo::SetModifiedGameDifficulty ( )
{
	static UFunction* pFnSetModifiedGameDifficulty = NULL;

	if ( ! pFnSetModifiedGameDifficulty )
		pFnSetModifiedGameDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetModifiedGameDifficulty" );

	AKFGameInfo_execSetModifiedGameDifficulty_Parms SetModifiedGameDifficulty_Parms;

	this->ProcessEvent ( pFnSetModifiedGameDifficulty, &SetModifiedGameDifficulty_Parms, NULL );
};

// Function KFGame.KFGameInfo.UsesModifiedDifficulty
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::UsesModifiedDifficulty ( )
{
	static UFunction* pFnUsesModifiedDifficulty = NULL;

	if ( ! pFnUsesModifiedDifficulty )
		pFnUsesModifiedDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.UsesModifiedDifficulty" );

	AKFGameInfo_execUsesModifiedDifficulty_Parms UsesModifiedDifficulty_Parms;

	this->ProcessEvent ( pFnUsesModifiedDifficulty, &UsesModifiedDifficulty_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetModifiedGameLength
// [0x00020000] 
// Parameters infos:

void AKFGameInfo::SetModifiedGameLength ( )
{
	static UFunction* pFnSetModifiedGameLength = NULL;

	if ( ! pFnSetModifiedGameLength )
		pFnSetModifiedGameLength = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetModifiedGameLength" );

	AKFGameInfo_execSetModifiedGameLength_Parms SetModifiedGameLength_Parms;

	this->ProcessEvent ( pFnSetModifiedGameLength, &SetModifiedGameLength_Parms, NULL );
};

// Function KFGame.KFGameInfo.UsesModifiedLength
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::UsesModifiedLength ( )
{
	static UFunction* pFnUsesModifiedLength = NULL;

	if ( ! pFnUsesModifiedLength )
		pFnUsesModifiedLength = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.UsesModifiedLength" );

	AKFGameInfo_execUsesModifiedLength_Parms UsesModifiedLength_Parms;

	this->ProcessEvent ( pFnUsesModifiedLength, &UsesModifiedLength_Parms, NULL );
};

// Function KFGame.KFGameInfo.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventInitGame ( )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.InitGame" );

	AKFGameInfo_eventInitGame_Parms InitGame_Parms;

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );
};

// Function KFGame.KFGameInfo.StaticSetNeedsRestart
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::StaticSetNeedsRestart ( )
{
	static UFunction* pFnStaticSetNeedsRestart = NULL;

	if ( ! pFnStaticSetNeedsRestart )
		pFnStaticSetNeedsRestart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.StaticSetNeedsRestart" );

	AKFGameInfo_execStaticSetNeedsRestart_Parms StaticSetNeedsRestart_Parms;

	pFnStaticSetNeedsRestart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStaticSetNeedsRestart, &StaticSetNeedsRestart_Parms, NULL );

	pFnStaticSetNeedsRestart->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.SetNeedsReload
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::SetNeedsReload ( )
{
	static UFunction* pFnSetNeedsReload = NULL;

	if ( ! pFnSetNeedsReload )
		pFnSetNeedsReload = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetNeedsReload" );

	AKFGameInfo_execSetNeedsReload_Parms SetNeedsReload_Parms;

	pFnSetNeedsReload->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNeedsReload, &SetNeedsReload_Parms, NULL );

	pFnSetNeedsReload->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.DisableServerTakeover
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGameInfo::DisableServerTakeover ( )
{
	static UFunction* pFnDisableServerTakeover = NULL;

	if ( ! pFnDisableServerTakeover )
		pFnDisableServerTakeover = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.DisableServerTakeover" );

	AKFGameInfo_execDisableServerTakeover_Parms DisableServerTakeover_Parms;

	pFnDisableServerTakeover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableServerTakeover, &DisableServerTakeover_Parms, NULL );

	pFnDisableServerTakeover->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.SetNeedsRestart
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::SetNeedsRestart ( )
{
	static UFunction* pFnSetNeedsRestart = NULL;

	if ( ! pFnSetNeedsRestart )
		pFnSetNeedsRestart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetNeedsRestart" );

	AKFGameInfo_execSetNeedsRestart_Parms SetNeedsRestart_Parms;

	pFnSetNeedsRestart->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNeedsRestart, &SetNeedsRestart_Parms, NULL );

	pFnSetNeedsRestart->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.GetFullGameModePath
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetFullGameModePath ( )
{
	static UFunction* pFnGetFullGameModePath = NULL;

	if ( ! pFnGetFullGameModePath )
		pFnGetFullGameModePath = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetFullGameModePath" );

	AKFGameInfo_execGetFullGameModePath_Parms GetFullGameModePath_Parms;

	this->ProcessEvent ( pFnGetFullGameModePath, &GetFullGameModePath_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetGameModeNum
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetGameModeNum ( )
{
	static UFunction* pFnGetGameModeNum = NULL;

	if ( ! pFnGetGameModeNum )
		pFnGetGameModeNum = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetGameModeNum" );

	AKFGameInfo_execGetGameModeNum_Parms GetGameModeNum_Parms;

	this->ProcessEvent ( pFnGetGameModeNum, &GetGameModeNum_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetFriendlyNameForCurrentGameMode
// [0x00020002] 
// Parameters infos:

void AKFGameInfo::GetFriendlyNameForCurrentGameMode ( )
{
	static UFunction* pFnGetFriendlyNameForCurrentGameMode = NULL;

	if ( ! pFnGetFriendlyNameForCurrentGameMode )
		pFnGetFriendlyNameForCurrentGameMode = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetFriendlyNameForCurrentGameMode" );

	AKFGameInfo_execGetFriendlyNameForCurrentGameMode_Parms GetFriendlyNameForCurrentGameMode_Parms;

	this->ProcessEvent ( pFnGetFriendlyNameForCurrentGameMode, &GetFriendlyNameForCurrentGameMode_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetGameModeIndexFromName
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetGameModeIndexFromName ( )
{
	static UFunction* pFnGetGameModeIndexFromName = NULL;

	if ( ! pFnGetGameModeIndexFromName )
		pFnGetGameModeIndexFromName = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetGameModeIndexFromName" );

	AKFGameInfo_execGetGameModeIndexFromName_Parms GetGameModeIndexFromName_Parms;

	this->ProcessEvent ( pFnGetGameModeIndexFromName, &GetGameModeIndexFromName_Parms, NULL );
};

// Function KFGame.KFGameInfo.IsGameModeSoloPlayAllowed
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::IsGameModeSoloPlayAllowed ( )
{
	static UFunction* pFnIsGameModeSoloPlayAllowed = NULL;

	if ( ! pFnIsGameModeSoloPlayAllowed )
		pFnIsGameModeSoloPlayAllowed = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.IsGameModeSoloPlayAllowed" );

	AKFGameInfo_execIsGameModeSoloPlayAllowed_Parms IsGameModeSoloPlayAllowed_Parms;

	this->ProcessEvent ( pFnIsGameModeSoloPlayAllowed, &IsGameModeSoloPlayAllowed_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetLocalizeIDFromFriendlyName
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetLocalizeIDFromFriendlyName ( )
{
	static UFunction* pFnGetLocalizeIDFromFriendlyName = NULL;

	if ( ! pFnGetLocalizeIDFromFriendlyName )
		pFnGetLocalizeIDFromFriendlyName = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetLocalizeIDFromFriendlyName" );

	AKFGameInfo_execGetLocalizeIDFromFriendlyName_Parms GetLocalizeIDFromFriendlyName_Parms;

	this->ProcessEvent ( pFnGetLocalizeIDFromFriendlyName, &GetLocalizeIDFromFriendlyName_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetGameModeClassFromNum
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetGameModeClassFromNum ( )
{
	static UFunction* pFnGetGameModeClassFromNum = NULL;

	if ( ! pFnGetGameModeClassFromNum )
		pFnGetGameModeClassFromNum = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetGameModeClassFromNum" );

	AKFGameInfo_execGetGameModeClassFromNum_Parms GetGameModeClassFromNum_Parms;

	this->ProcessEvent ( pFnGetGameModeClassFromNum, &GetGameModeClassFromNum_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetGameModeNumFromClass
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetGameModeNumFromClass ( )
{
	static UFunction* pFnGetGameModeNumFromClass = NULL;

	if ( ! pFnGetGameModeNumFromClass )
		pFnGetGameModeNumFromClass = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetGameModeNumFromClass" );

	AKFGameInfo_execGetGameModeNumFromClass_Parms GetGameModeNumFromClass_Parms;

	this->ProcessEvent ( pFnGetGameModeNumFromClass, &GetGameModeNumFromClass_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetGameModeFriendlyNameFromClass
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetGameModeFriendlyNameFromClass ( )
{
	static UFunction* pFnGetGameModeFriendlyNameFromClass = NULL;

	if ( ! pFnGetGameModeFriendlyNameFromClass )
		pFnGetGameModeFriendlyNameFromClass = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetGameModeFriendlyNameFromClass" );

	AKFGameInfo_execGetGameModeFriendlyNameFromClass_Parms GetGameModeFriendlyNameFromClass_Parms;

	this->ProcessEvent ( pFnGetGameModeFriendlyNameFromClass, &GetGameModeFriendlyNameFromClass_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetGameModeFriendlyNameFromNum
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetGameModeFriendlyNameFromNum ( )
{
	static UFunction* pFnGetGameModeFriendlyNameFromNum = NULL;

	if ( ! pFnGetGameModeFriendlyNameFromNum )
		pFnGetGameModeFriendlyNameFromNum = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetGameModeFriendlyNameFromNum" );

	AKFGameInfo_execGetGameModeFriendlyNameFromNum_Parms GetGameModeFriendlyNameFromNum_Parms;

	this->ProcessEvent ( pFnGetGameModeFriendlyNameFromNum, &GetGameModeFriendlyNameFromNum_Parms, NULL );
};

// Function KFGame.KFGameInfo.GetShouldShowLength
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::GetShouldShowLength ( )
{
	static UFunction* pFnGetShouldShowLength = NULL;

	if ( ! pFnGetShouldShowLength )
		pFnGetShouldShowLength = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetShouldShowLength" );

	AKFGameInfo_execGetShouldShowLength_Parms GetShouldShowLength_Parms;

	this->ProcessEvent ( pFnGetShouldShowLength, &GetShouldShowLength_Parms, NULL );
};

// Function KFGame.KFGameInfo.PreloadGlobalContentClasses
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::PreloadGlobalContentClasses ( )
{
	static UFunction* pFnPreloadGlobalContentClasses = NULL;

	if ( ! pFnPreloadGlobalContentClasses )
		pFnPreloadGlobalContentClasses = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.PreloadGlobalContentClasses" );

	AKFGameInfo_execPreloadGlobalContentClasses_Parms PreloadGlobalContentClasses_Parms;

	this->ProcessEvent ( pFnPreloadGlobalContentClasses, &PreloadGlobalContentClasses_Parms, NULL );
};

// Function KFGame.KFGameInfo.StripPlayOnPrefix
// [0x00022002] 
// Parameters infos:

void AKFGameInfo::StripPlayOnPrefix ( )
{
	static UFunction* pFnStripPlayOnPrefix = NULL;

	if ( ! pFnStripPlayOnPrefix )
		pFnStripPlayOnPrefix = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.StripPlayOnPrefix" );

	AKFGameInfo_execStripPlayOnPrefix_Parms StripPlayOnPrefix_Parms;

	this->ProcessEvent ( pFnStripPlayOnPrefix, &StripPlayOnPrefix_Parms, NULL );
};

// Function KFGame.KFGameInfo.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo::eventSetGameType ( )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetGameType" );

	AKFGameInfo_eventSetGameType_Parms SetGameType_Parms;

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );
};

// Function KFGame.KFGameInfo.IsUnrankedGame
// [0x00080400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::IsUnrankedGame ( )
{
	static UFunction* pFnIsUnrankedGame = NULL;

	if ( ! pFnIsUnrankedGame )
		pFnIsUnrankedGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.IsUnrankedGame" );

	AKFGameInfo_execIsUnrankedGame_Parms IsUnrankedGame_Parms;

	pFnIsUnrankedGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUnrankedGame, &IsUnrankedGame_Parms, NULL );

	pFnIsUnrankedGame->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.SetGameUnranked
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGameInfo::SetGameUnranked ( )
{
	static UFunction* pFnSetGameUnranked = NULL;

	if ( ! pFnSetGameUnranked )
		pFnSetGameUnranked = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.SetGameUnranked" );

	AKFGameInfo_execSetGameUnranked_Parms SetGameUnranked_Parms;

	pFnSetGameUnranked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGameUnranked, &SetGameUnranked_Parms, NULL );

	pFnSetGameUnranked->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.MapCycleNeedsInit
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::MapCycleNeedsInit ( )
{
	static UFunction* pFnMapCycleNeedsInit = NULL;

	if ( ! pFnMapCycleNeedsInit )
		pFnMapCycleNeedsInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.MapCycleNeedsInit" );

	AKFGameInfo_execMapCycleNeedsInit_Parms MapCycleNeedsInit_Parms;

	pFnMapCycleNeedsInit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMapCycleNeedsInit, &MapCycleNeedsInit_Parms, NULL );

	pFnMapCycleNeedsInit->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.IsMapAllowedInCycle
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::IsMapAllowedInCycle ( )
{
	static UFunction* pFnIsMapAllowedInCycle = NULL;

	if ( ! pFnIsMapAllowedInCycle )
		pFnIsMapAllowedInCycle = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.IsMapAllowedInCycle" );

	AKFGameInfo_execIsMapAllowedInCycle_Parms IsMapAllowedInCycle_Parms;

	pFnIsMapAllowedInCycle->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMapAllowedInCycle, &IsMapAllowedInCycle_Parms, NULL );

	pFnIsMapAllowedInCycle->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.GetAIDirector
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::GetAIDirector ( )
{
	static UFunction* pFnGetAIDirector = NULL;

	if ( ! pFnGetAIDirector )
		pFnGetAIDirector = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetAIDirector" );

	AKFGameInfo_execGetAIDirector_Parms GetAIDirector_Parms;

	pFnGetAIDirector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAIDirector, &GetAIDirector_Parms, NULL );

	pFnGetAIDirector->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.RefreshMonsterAliveCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::RefreshMonsterAliveCount ( )
{
	static UFunction* pFnRefreshMonsterAliveCount = NULL;

	if ( ! pFnRefreshMonsterAliveCount )
		pFnRefreshMonsterAliveCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.RefreshMonsterAliveCount" );

	AKFGameInfo_execRefreshMonsterAliveCount_Parms RefreshMonsterAliveCount_Parms;

	pFnRefreshMonsterAliveCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshMonsterAliveCount, &RefreshMonsterAliveCount_Parms, NULL );

	pFnRefreshMonsterAliveCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.ForceLivingPlayerCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::ForceLivingPlayerCount ( )
{
	static UFunction* pFnForceLivingPlayerCount = NULL;

	if ( ! pFnForceLivingPlayerCount )
		pFnForceLivingPlayerCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.ForceLivingPlayerCount" );

	AKFGameInfo_execForceLivingPlayerCount_Parms ForceLivingPlayerCount_Parms;

	pFnForceLivingPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceLivingPlayerCount, &ForceLivingPlayerCount_Parms, NULL );

	pFnForceLivingPlayerCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.GetLivingPlayerCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::GetLivingPlayerCount ( )
{
	static UFunction* pFnGetLivingPlayerCount = NULL;

	if ( ! pFnGetLivingPlayerCount )
		pFnGetLivingPlayerCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetLivingPlayerCount" );

	AKFGameInfo_execGetLivingPlayerCount_Parms GetLivingPlayerCount_Parms;

	pFnGetLivingPlayerCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLivingPlayerCount, &GetLivingPlayerCount_Parms, NULL );

	pFnGetLivingPlayerCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameInfo.GetMonsterAliveCount
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameInfo::GetMonsterAliveCount ( )
{
	static UFunction* pFnGetMonsterAliveCount = NULL;

	if ( ! pFnGetMonsterAliveCount )
		pFnGetMonsterAliveCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo.GetMonsterAliveCount" );

	AKFGameInfo_execGetMonsterAliveCount_Parms GetMonsterAliveCount_Parms;

	pFnGetMonsterAliveCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMonsterAliveCount, &GetMonsterAliveCount_Parms, NULL );

	pFnGetMonsterAliveCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFGamepadLayoutManager.GetNumLayouts
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGamepadLayoutManager::GetNumLayouts ( )
{
	static UFunction* pFnGetNumLayouts = NULL;

	if ( ! pFnGetNumLayouts )
		pFnGetNumLayouts = UObject::FindObject< UFunction > ( "Function KFGame.KFGamepadLayoutManager.GetNumLayouts" );

	UKFGamepadLayoutManager_execGetNumLayouts_Parms GetNumLayouts_Parms;

	pFnGetNumLayouts->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetNumLayouts, &GetNumLayouts_Parms, NULL );

	pFnGetNumLayouts->FunctionFlags |= 0x400;
};

// Function KFGame.KFGamepadLayoutManager.GetLayoutName
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGamepadLayoutManager::GetLayoutName ( )
{
	static UFunction* pFnGetLayoutName = NULL;

	if ( ! pFnGetLayoutName )
		pFnGetLayoutName = UObject::FindObject< UFunction > ( "Function KFGame.KFGamepadLayoutManager.GetLayoutName" );

	UKFGamepadLayoutManager_execGetLayoutName_Parms GetLayoutName_Parms;

	pFnGetLayoutName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLayoutName, &GetLayoutName_Parms, NULL );

	pFnGetLayoutName->FunctionFlags |= 0x400;
};

// Function KFGame.KFGamepadLayoutManager.GetGamepadButtonNames
// [0x00422400] ( FUNC_Native )
// Parameters infos:

void UKFGamepadLayoutManager::GetGamepadButtonNames ( )
{
	static UFunction* pFnGetGamepadButtonNames = NULL;

	if ( ! pFnGetGamepadButtonNames )
		pFnGetGamepadButtonNames = UObject::FindObject< UFunction > ( "Function KFGame.KFGamepadLayoutManager.GetGamepadButtonNames" );

	UKFGamepadLayoutManager_execGetGamepadButtonNames_Parms GetGamepadButtonNames_Parms;

	pFnGetGamepadButtonNames->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGamepadButtonNames, &GetGamepadButtonNames_Parms, NULL );

	pFnGetGamepadButtonNames->FunctionFlags |= 0x400;
};

// Function KFGame.KFGamepadLayoutManager.GetGamepadLayout
// [0x00422400] ( FUNC_Native )
// Parameters infos:

void UKFGamepadLayoutManager::GetGamepadLayout ( )
{
	static UFunction* pFnGetGamepadLayout = NULL;

	if ( ! pFnGetGamepadLayout )
		pFnGetGamepadLayout = UObject::FindObject< UFunction > ( "Function KFGame.KFGamepadLayoutManager.GetGamepadLayout" );

	UKFGamepadLayoutManager_execGetGamepadLayout_Parms GetGamepadLayout_Parms;

	pFnGetGamepadLayout->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGamepadLayout, &GetGamepadLayout_Parms, NULL );

	pFnGetGamepadLayout->FunctionFlags |= 0x400;
};

// Function KFGame.KFHeadShotEffectList.RefreshCachedHeadShotEffectId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFHeadShotEffectList::RefreshCachedHeadShotEffectId ( )
{
	static UFunction* pFnRefreshCachedHeadShotEffectId = NULL;

	if ( ! pFnRefreshCachedHeadShotEffectId )
		pFnRefreshCachedHeadShotEffectId = UObject::FindObject< UFunction > ( "Function KFGame.KFHeadShotEffectList.RefreshCachedHeadShotEffectId" );

	UKFHeadShotEffectList_execRefreshCachedHeadShotEffectId_Parms RefreshCachedHeadShotEffectId_Parms;

	pFnRefreshCachedHeadShotEffectId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshCachedHeadShotEffectId, &RefreshCachedHeadShotEffectId_Parms, NULL );

	pFnRefreshCachedHeadShotEffectId->FunctionFlags |= 0x400;
};

// Function KFGame.KFHeadShotEffectList.SaveEquippedHeadShotEffect
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFHeadShotEffectList::SaveEquippedHeadShotEffect ( )
{
	static UFunction* pFnSaveEquippedHeadShotEffect = NULL;

	if ( ! pFnSaveEquippedHeadShotEffect )
		pFnSaveEquippedHeadShotEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFHeadShotEffectList.SaveEquippedHeadShotEffect" );

	UKFHeadShotEffectList_execSaveEquippedHeadShotEffect_Parms SaveEquippedHeadShotEffect_Parms;

	pFnSaveEquippedHeadShotEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveEquippedHeadShotEffect, &SaveEquippedHeadShotEffect_Parms, NULL );

	pFnSaveEquippedHeadShotEffect->FunctionFlags |= 0x400;
};

// Function KFGame.KFHeadShotEffectList.GetEquippedHeadShotEffectId
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFHeadShotEffectList::GetEquippedHeadShotEffectId ( )
{
	static UFunction* pFnGetEquippedHeadShotEffectId = NULL;

	if ( ! pFnGetEquippedHeadShotEffectId )
		pFnGetEquippedHeadShotEffectId = UObject::FindObject< UFunction > ( "Function KFGame.KFHeadShotEffectList.GetEquippedHeadShotEffectId" );

	UKFHeadShotEffectList_execGetEquippedHeadShotEffectId_Parms GetEquippedHeadShotEffectId_Parms;

	pFnGetEquippedHeadShotEffectId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEquippedHeadShotEffectId, &GetEquippedHeadShotEffectId_Parms, NULL );

	pFnGetEquippedHeadShotEffectId->FunctionFlags |= 0x400;
};

// Function KFGame.KFHeadShotEffectList.IsHeadShotEffectEquipped
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFHeadShotEffectList::IsHeadShotEffectEquipped ( )
{
	static UFunction* pFnIsHeadShotEffectEquipped = NULL;

	if ( ! pFnIsHeadShotEffectEquipped )
		pFnIsHeadShotEffectEquipped = UObject::FindObject< UFunction > ( "Function KFGame.KFHeadShotEffectList.IsHeadShotEffectEquipped" );

	UKFHeadShotEffectList_execIsHeadShotEffectEquipped_Parms IsHeadShotEffectEquipped_Parms;

	pFnIsHeadShotEffectEquipped->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsHeadShotEffectEquipped, &IsHeadShotEffectEquipped_Parms, NULL );

	pFnIsHeadShotEffectEquipped->FunctionFlags |= 0x400;
};

// Function KFGame.KFHeadShotEffectList.GetHeadShotEffectFromIndex
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFHeadShotEffectList::GetHeadShotEffectFromIndex ( )
{
	static UFunction* pFnGetHeadShotEffectFromIndex = NULL;

	if ( ! pFnGetHeadShotEffectFromIndex )
		pFnGetHeadShotEffectFromIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFHeadShotEffectList.GetHeadShotEffectFromIndex" );

	UKFHeadShotEffectList_execGetHeadShotEffectFromIndex_Parms GetHeadShotEffectFromIndex_Parms;

	pFnGetHeadShotEffectFromIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeadShotEffectFromIndex, &GetHeadShotEffectFromIndex_Parms, NULL );

	pFnGetHeadShotEffectFromIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFHeadShotEffectList.GetHeadShotEffectIndex
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFHeadShotEffectList::GetHeadShotEffectIndex ( )
{
	static UFunction* pFnGetHeadShotEffectIndex = NULL;

	if ( ! pFnGetHeadShotEffectIndex )
		pFnGetHeadShotEffectIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFHeadShotEffectList.GetHeadShotEffectIndex" );

	UKFHeadShotEffectList_execGetHeadShotEffectIndex_Parms GetHeadShotEffectIndex_Parms;

	pFnGetHeadShotEffectIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetHeadShotEffectIndex, &GetHeadShotEffectIndex_Parms, NULL );

	pFnGetHeadShotEffectIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFHeadShotEffectList.GetUnlockedHeadshotEffect
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFHeadShotEffectList::GetUnlockedHeadshotEffect ( )
{
	static UFunction* pFnGetUnlockedHeadshotEffect = NULL;

	if ( ! pFnGetUnlockedHeadshotEffect )
		pFnGetUnlockedHeadshotEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFHeadShotEffectList.GetUnlockedHeadshotEffect" );

	UKFHeadShotEffectList_execGetUnlockedHeadshotEffect_Parms GetUnlockedHeadshotEffect_Parms;

	pFnGetUnlockedHeadshotEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnlockedHeadshotEffect, &GetUnlockedHeadshotEffect_Parms, NULL );

	pFnGetUnlockedHeadshotEffect->FunctionFlags |= 0x400;
};

// Function KFGame.KFHTTPImageDownloader.DownloadImageFromURL
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFHTTPImageDownloader::DownloadImageFromURL ( )
{
	static UFunction* pFnDownloadImageFromURL = NULL;

	if ( ! pFnDownloadImageFromURL )
		pFnDownloadImageFromURL = UObject::FindObject< UFunction > ( "Function KFGame.KFHTTPImageDownloader.DownloadImageFromURL" );

	UKFHTTPImageDownloader_execDownloadImageFromURL_Parms DownloadImageFromURL_Parms;

	pFnDownloadImageFromURL->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDownloadImageFromURL, &DownloadImageFromURL_Parms, NULL );

	pFnDownloadImageFromURL->FunctionFlags |= 0x400;
};

// Function KFGame.KFHTTPImageDownloader.OnDownloadComplete
// [0x00120000] 
// Parameters infos:

void UKFHTTPImageDownloader::OnDownloadComplete ( )
{
	static UFunction* pFnOnDownloadComplete = NULL;

	if ( ! pFnOnDownloadComplete )
		pFnOnDownloadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFHTTPImageDownloader.OnDownloadComplete" );

	UKFHTTPImageDownloader_execOnDownloadComplete_Parms OnDownloadComplete_Parms;

	this->ProcessEvent ( pFnOnDownloadComplete, &OnDownloadComplete_Parms, NULL );
};

// Function KFGame.KFInventoryManager.DiscardInventory
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFInventoryManager::eventDiscardInventory ( )
{
	static UFunction* pFnDiscardInventory = NULL;

	if ( ! pFnDiscardInventory )
		pFnDiscardInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.DiscardInventory" );

	AKFInventoryManager_eventDiscardInventory_Parms DiscardInventory_Parms;

	this->ProcessEvent ( pFnDiscardInventory, &DiscardInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetIsOwned
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::GetIsOwned ( )
{
	static UFunction* pFnGetIsOwned = NULL;

	if ( ! pFnGetIsOwned )
		pFnGetIsOwned = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetIsOwned" );

	AKFInventoryManager_execGetIsOwned_Parms GetIsOwned_Parms;

	this->ProcessEvent ( pFnGetIsOwned, &GetIsOwned_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetWeaponBlocks
// [0x00424102] 
// Parameters infos:

void AKFInventoryManager::GetWeaponBlocks ( )
{
	static UFunction* pFnGetWeaponBlocks = NULL;

	if ( ! pFnGetWeaponBlocks )
		pFnGetWeaponBlocks = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetWeaponBlocks" );

	AKFInventoryManager_execGetWeaponBlocks_Parms GetWeaponBlocks_Parms;

	this->ProcessEvent ( pFnGetWeaponBlocks, &GetWeaponBlocks_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetDisplayedBlocksRequiredFor
// [0x00424102] 
// Parameters infos:

void AKFInventoryManager::GetDisplayedBlocksRequiredFor ( )
{
	static UFunction* pFnGetDisplayedBlocksRequiredFor = NULL;

	if ( ! pFnGetDisplayedBlocksRequiredFor )
		pFnGetDisplayedBlocksRequiredFor = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetDisplayedBlocksRequiredFor" );

	AKFInventoryManager_execGetDisplayedBlocksRequiredFor_Parms GetDisplayedBlocksRequiredFor_Parms;

	this->ProcessEvent ( pFnGetDisplayedBlocksRequiredFor, &GetDisplayedBlocksRequiredFor_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ItemEligableForUpgrade
// [0x00420102] 
// Parameters infos:

void AKFInventoryManager::ItemEligableForUpgrade ( )
{
	static UFunction* pFnItemEligableForUpgrade = NULL;

	if ( ! pFnItemEligableForUpgrade )
		pFnItemEligableForUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ItemEligableForUpgrade" );

	AKFInventoryManager_execItemEligableForUpgrade_Parms ItemEligableForUpgrade_Parms;

	this->ProcessEvent ( pFnItemEligableForUpgrade, &ItemEligableForUpgrade_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetAdjustedUpgradePriceFor
// [0x00420102] 
// Parameters infos:

void AKFInventoryManager::GetAdjustedUpgradePriceFor ( )
{
	static UFunction* pFnGetAdjustedUpgradePriceFor = NULL;

	if ( ! pFnGetAdjustedUpgradePriceFor )
		pFnGetAdjustedUpgradePriceFor = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetAdjustedUpgradePriceFor" );

	AKFInventoryManager_execGetAdjustedUpgradePriceFor_Parms GetAdjustedUpgradePriceFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedUpgradePriceFor, &GetAdjustedUpgradePriceFor_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetAdjustedSellPriceFor
// [0x00C24102] 
// Parameters infos:

void AKFInventoryManager::GetAdjustedSellPriceFor ( )
{
	static UFunction* pFnGetAdjustedSellPriceFor = NULL;

	if ( ! pFnGetAdjustedSellPriceFor )
		pFnGetAdjustedSellPriceFor = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetAdjustedSellPriceFor" );

	AKFInventoryManager_execGetAdjustedSellPriceFor_Parms GetAdjustedSellPriceFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedSellPriceFor, &GetAdjustedSellPriceFor_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetAdjustedBuyPriceFor
// [0x00424102] 
// Parameters infos:

void AKFInventoryManager::GetAdjustedBuyPriceFor ( )
{
	static UFunction* pFnGetAdjustedBuyPriceFor = NULL;

	if ( ! pFnGetAdjustedBuyPriceFor )
		pFnGetAdjustedBuyPriceFor = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetAdjustedBuyPriceFor" );

	AKFInventoryManager_execGetAdjustedBuyPriceFor_Parms GetAdjustedBuyPriceFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedBuyPriceFor, &GetAdjustedBuyPriceFor_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetTraderItemFromWeaponLists
// [0x00440103] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::GetTraderItemFromWeaponLists ( )
{
	static UFunction* pFnGetTraderItemFromWeaponLists = NULL;

	if ( ! pFnGetTraderItemFromWeaponLists )
		pFnGetTraderItemFromWeaponLists = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetTraderItemFromWeaponLists" );

	AKFInventoryManager_execGetTraderItemFromWeaponLists_Parms GetTraderItemFromWeaponLists_Parms;

	this->ProcessEvent ( pFnGetTraderItemFromWeaponLists, &GetTraderItemFromWeaponLists_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetWeaponUpgradeLevelFromTransactionItems
// [0x00440103] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::GetWeaponUpgradeLevelFromTransactionItems ( )
{
	static UFunction* pFnGetWeaponUpgradeLevelFromTransactionItems = NULL;

	if ( ! pFnGetWeaponUpgradeLevelFromTransactionItems )
		pFnGetWeaponUpgradeLevelFromTransactionItems = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetWeaponUpgradeLevelFromTransactionItems" );

	AKFInventoryManager_execGetWeaponUpgradeLevelFromTransactionItems_Parms GetWeaponUpgradeLevelFromTransactionItems_Parms;

	this->ProcessEvent ( pFnGetWeaponUpgradeLevelFromTransactionItems, &GetWeaponUpgradeLevelFromTransactionItems_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ProcessArmorDosh
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ProcessArmorDosh ( )
{
	static UFunction* pFnProcessArmorDosh = NULL;

	if ( ! pFnProcessArmorDosh )
		pFnProcessArmorDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ProcessArmorDosh" );

	AKFInventoryManager_execProcessArmorDosh_Parms ProcessArmorDosh_Parms;

	this->ProcessEvent ( pFnProcessArmorDosh, &ProcessArmorDosh_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ProcessGrenadeDosh
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ProcessGrenadeDosh ( )
{
	static UFunction* pFnProcessGrenadeDosh = NULL;

	if ( ! pFnProcessGrenadeDosh )
		pFnProcessGrenadeDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ProcessGrenadeDosh" );

	AKFInventoryManager_execProcessGrenadeDosh_Parms ProcessGrenadeDosh_Parms;

	this->ProcessEvent ( pFnProcessGrenadeDosh, &ProcessGrenadeDosh_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ProcessUpgradeDosh
// [0x00440003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ProcessUpgradeDosh ( )
{
	static UFunction* pFnProcessUpgradeDosh = NULL;

	if ( ! pFnProcessUpgradeDosh )
		pFnProcessUpgradeDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ProcessUpgradeDosh" );

	AKFInventoryManager_execProcessUpgradeDosh_Parms ProcessUpgradeDosh_Parms;

	this->ProcessEvent ( pFnProcessUpgradeDosh, &ProcessUpgradeDosh_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ProcessAmmoDosh
// [0x00444003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ProcessAmmoDosh ( )
{
	static UFunction* pFnProcessAmmoDosh = NULL;

	if ( ! pFnProcessAmmoDosh )
		pFnProcessAmmoDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ProcessAmmoDosh" );

	AKFInventoryManager_execProcessAmmoDosh_Parms ProcessAmmoDosh_Parms;

	this->ProcessEvent ( pFnProcessAmmoDosh, &ProcessAmmoDosh_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ProcessWeaponDosh
// [0x00440003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ProcessWeaponDosh ( )
{
	static UFunction* pFnProcessWeaponDosh = NULL;

	if ( ! pFnProcessWeaponDosh )
		pFnProcessWeaponDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ProcessWeaponDosh" );

	AKFInventoryManager_execProcessWeaponDosh_Parms ProcessWeaponDosh_Parms;

	this->ProcessEvent ( pFnProcessWeaponDosh, &ProcessWeaponDosh_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetWeaponFromClass
// [0x00420103] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::GetWeaponFromClass ( )
{
	static UFunction* pFnGetWeaponFromClass = NULL;

	if ( ! pFnGetWeaponFromClass )
		pFnGetWeaponFromClass = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetWeaponFromClass" );

	AKFInventoryManager_execGetWeaponFromClass_Parms GetWeaponFromClass_Parms;

	this->ProcessEvent ( pFnGetWeaponFromClass, &GetWeaponFromClass_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetTransactionItemIndex
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::GetTransactionItemIndex ( )
{
	static UFunction* pFnGetTransactionItemIndex = NULL;

	if ( ! pFnGetTransactionItemIndex )
		pFnGetTransactionItemIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetTransactionItemIndex" );

	AKFInventoryManager_execGetTransactionItemIndex_Parms GetTransactionItemIndex_Parms;

	this->ProcessEvent ( pFnGetTransactionItemIndex, &GetTransactionItemIndex_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerRemoveTransactionItem
// [0x00A200C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerRemoveTransactionItem ( )
{
	static UFunction* pFnServerRemoveTransactionItem = NULL;

	if ( ! pFnServerRemoveTransactionItem )
		pFnServerRemoveTransactionItem = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerRemoveTransactionItem" );

	AKFInventoryManager_execServerRemoveTransactionItem_Parms ServerRemoveTransactionItem_Parms;

	this->ProcessEvent ( pFnServerRemoveTransactionItem, &ServerRemoveTransactionItem_Parms, NULL );
};

// Function KFGame.KFInventoryManager.RemoveTransactionItem
// [0x00420003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::RemoveTransactionItem ( )
{
	static UFunction* pFnRemoveTransactionItem = NULL;

	if ( ! pFnRemoveTransactionItem )
		pFnRemoveTransactionItem = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.RemoveTransactionItem" );

	AKFInventoryManager_execRemoveTransactionItem_Parms RemoveTransactionItem_Parms;

	this->ProcessEvent ( pFnRemoveTransactionItem, &RemoveTransactionItem_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerSellWeapon
// [0x00A200C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerSellWeapon ( )
{
	static UFunction* pFnServerSellWeapon = NULL;

	if ( ! pFnServerSellWeapon )
		pFnServerSellWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerSellWeapon" );

	AKFInventoryManager_execServerSellWeapon_Parms ServerSellWeapon_Parms;

	this->ProcessEvent ( pFnServerSellWeapon, &ServerSellWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerAddTransactionItem
// [0x00A240C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerAddTransactionItem ( )
{
	static UFunction* pFnServerAddTransactionItem = NULL;

	if ( ! pFnServerAddTransactionItem )
		pFnServerAddTransactionItem = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerAddTransactionItem" );

	AKFInventoryManager_execServerAddTransactionItem_Parms ServerAddTransactionItem_Parms;

	this->ProcessEvent ( pFnServerAddTransactionItem, &ServerAddTransactionItem_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddTransactionItem
// [0x00C24003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::AddTransactionItem ( )
{
	static UFunction* pFnAddTransactionItem = NULL;

	if ( ! pFnAddTransactionItem )
		pFnAddTransactionItem = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddTransactionItem" );

	AKFInventoryManager_execAddTransactionItem_Parms AddTransactionItem_Parms;

	this->ProcessEvent ( pFnAddTransactionItem, &AddTransactionItem_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddCurrentCarryBlocks
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::AddCurrentCarryBlocks ( )
{
	static UFunction* pFnAddCurrentCarryBlocks = NULL;

	if ( ! pFnAddCurrentCarryBlocks )
		pFnAddCurrentCarryBlocks = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddCurrentCarryBlocks" );

	AKFInventoryManager_execAddCurrentCarryBlocks_Parms AddCurrentCarryBlocks_Parms;

	this->ProcessEvent ( pFnAddCurrentCarryBlocks, &AddCurrentCarryBlocks_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerBuyWeapon
// [0x00A240C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerBuyWeapon ( )
{
	static UFunction* pFnServerBuyWeapon = NULL;

	if ( ! pFnServerBuyWeapon )
		pFnServerBuyWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerBuyWeapon" );

	AKFInventoryManager_execServerBuyWeapon_Parms ServerBuyWeapon_Parms;

	this->ProcessEvent ( pFnServerBuyWeapon, &ServerBuyWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerBuyGrenade
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerBuyGrenade ( )
{
	static UFunction* pFnServerBuyGrenade = NULL;

	if ( ! pFnServerBuyGrenade )
		pFnServerBuyGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerBuyGrenade" );

	AKFInventoryManager_execServerBuyGrenade_Parms ServerBuyGrenade_Parms;

	this->ProcessEvent ( pFnServerBuyGrenade, &ServerBuyGrenade_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerBuyArmor
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerBuyArmor ( )
{
	static UFunction* pFnServerBuyArmor = NULL;

	if ( ! pFnServerBuyArmor )
		pFnServerBuyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerBuyArmor" );

	AKFInventoryManager_execServerBuyArmor_Parms ServerBuyArmor_Parms;

	this->ProcessEvent ( pFnServerBuyArmor, &ServerBuyArmor_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddTransactionUpgrade
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::AddTransactionUpgrade ( )
{
	static UFunction* pFnAddTransactionUpgrade = NULL;

	if ( ! pFnAddTransactionUpgrade )
		pFnAddTransactionUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddTransactionUpgrade" );

	AKFInventoryManager_execAddTransactionUpgrade_Parms AddTransactionUpgrade_Parms;

	this->ProcessEvent ( pFnAddTransactionUpgrade, &AddTransactionUpgrade_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerAddTransactionUpgrade
// [0x002408C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFInventoryManager::eventServerAddTransactionUpgrade ( )
{
	static UFunction* pFnServerAddTransactionUpgrade = NULL;

	if ( ! pFnServerAddTransactionUpgrade )
		pFnServerAddTransactionUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerAddTransactionUpgrade" );

	AKFInventoryManager_eventServerAddTransactionUpgrade_Parms ServerAddTransactionUpgrade_Parms;

	this->ProcessEvent ( pFnServerAddTransactionUpgrade, &ServerAddTransactionUpgrade_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerBuyUpgrade
// [0x00A400C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerBuyUpgrade ( )
{
	static UFunction* pFnServerBuyUpgrade = NULL;

	if ( ! pFnServerBuyUpgrade )
		pFnServerBuyUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerBuyUpgrade" );

	AKFInventoryManager_execServerBuyUpgrade_Parms ServerBuyUpgrade_Parms;

	this->ProcessEvent ( pFnServerBuyUpgrade, &ServerBuyUpgrade_Parms, NULL );
};

// Function KFGame.KFInventoryManager.BuyUpgrade
// [0x00820103] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::BuyUpgrade ( )
{
	static UFunction* pFnBuyUpgrade = NULL;

	if ( ! pFnBuyUpgrade )
		pFnBuyUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.BuyUpgrade" );

	AKFInventoryManager_execBuyUpgrade_Parms BuyUpgrade_Parms;

	this->ProcessEvent ( pFnBuyUpgrade, &BuyUpgrade_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerAddTransactionAmmo
// [0x00A408C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFInventoryManager::eventServerAddTransactionAmmo ( )
{
	static UFunction* pFnServerAddTransactionAmmo = NULL;

	if ( ! pFnServerAddTransactionAmmo )
		pFnServerAddTransactionAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerAddTransactionAmmo" );

	AKFInventoryManager_eventServerAddTransactionAmmo_Parms ServerAddTransactionAmmo_Parms;

	this->ProcessEvent ( pFnServerAddTransactionAmmo, &ServerAddTransactionAmmo_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerBuyAmmo
// [0x00A400C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerBuyAmmo ( )
{
	static UFunction* pFnServerBuyAmmo = NULL;

	if ( ! pFnServerBuyAmmo )
		pFnServerBuyAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerBuyAmmo" );

	AKFInventoryManager_execServerBuyAmmo_Parms ServerBuyAmmo_Parms;

	this->ProcessEvent ( pFnServerBuyAmmo, &ServerBuyAmmo_Parms, NULL );
};

// Function KFGame.KFInventoryManager.BuyAmmo
// [0x00824103] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::BuyAmmo ( )
{
	static UFunction* pFnBuyAmmo = NULL;

	if ( ! pFnBuyAmmo )
		pFnBuyAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.BuyAmmo" );

	AKFInventoryManager_execBuyAmmo_Parms BuyAmmo_Parms;

	this->ProcessEvent ( pFnBuyAmmo, &BuyAmmo_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerCloseTraderMenu
// [0x002200C2] 
// Parameters infos:

void AKFInventoryManager::ServerCloseTraderMenu ( )
{
	static UFunction* pFnServerCloseTraderMenu = NULL;

	if ( ! pFnServerCloseTraderMenu )
		pFnServerCloseTraderMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerCloseTraderMenu" );

	AKFInventoryManager_execServerCloseTraderMenu_Parms ServerCloseTraderMenu_Parms;

	this->ProcessEvent ( pFnServerCloseTraderMenu, &ServerCloseTraderMenu_Parms, NULL );
};

// Function KFGame.KFInventoryManager.CombineWeaponsOnPickup
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::CombineWeaponsOnPickup ( )
{
	static UFunction* pFnCombineWeaponsOnPickup = NULL;

	if ( ! pFnCombineWeaponsOnPickup )
		pFnCombineWeaponsOnPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.CombineWeaponsOnPickup" );

	AKFInventoryManager_execCombineWeaponsOnPickup_Parms CombineWeaponsOnPickup_Parms;

	this->ProcessEvent ( pFnCombineWeaponsOnPickup, &CombineWeaponsOnPickup_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetEncumbranceSpeedMod
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::GetEncumbranceSpeedMod ( )
{
	static UFunction* pFnGetEncumbranceSpeedMod = NULL;

	if ( ! pFnGetEncumbranceSpeedMod )
		pFnGetEncumbranceSpeedMod = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetEncumbranceSpeedMod" );

	AKFInventoryManager_execGetEncumbranceSpeedMod_Parms GetEncumbranceSpeedMod_Parms;

	this->ProcessEvent ( pFnGetEncumbranceSpeedMod, &GetEncumbranceSpeedMod_Parms, NULL );
};

// Function KFGame.KFInventoryManager.PlayGiveInventorySound
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::PlayGiveInventorySound ( )
{
	static UFunction* pFnPlayGiveInventorySound = NULL;

	if ( ! pFnPlayGiveInventorySound )
		pFnPlayGiveInventorySound = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.PlayGiveInventorySound" );

	AKFInventoryManager_execPlayGiveInventorySound_Parms PlayGiveInventorySound_Parms;

	this->ProcessEvent ( pFnPlayGiveInventorySound, &PlayGiveInventorySound_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddArmor
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::AddArmor ( )
{
	static UFunction* pFnAddArmor = NULL;

	if ( ! pFnAddArmor )
		pFnAddArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddArmor" );

	AKFInventoryManager_execAddArmor_Parms AddArmor_Parms;

	this->ProcessEvent ( pFnAddArmor, &AddArmor_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddArmorFromPickup
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::AddArmorFromPickup ( )
{
	static UFunction* pFnAddArmorFromPickup = NULL;

	if ( ! pFnAddArmorFromPickup )
		pFnAddArmorFromPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddArmorFromPickup" );

	AKFInventoryManager_execAddArmorFromPickup_Parms AddArmorFromPickup_Parms;

	this->ProcessEvent ( pFnAddArmorFromPickup, &AddArmorFromPickup_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GiveWeaponsAmmo
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::GiveWeaponsAmmo ( )
{
	static UFunction* pFnGiveWeaponsAmmo = NULL;

	if ( ! pFnGiveWeaponsAmmo )
		pFnGiveWeaponsAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GiveWeaponsAmmo" );

	AKFInventoryManager_execGiveWeaponsAmmo_Parms GiveWeaponsAmmo_Parms;

	this->ProcessEvent ( pFnGiveWeaponsAmmo, &GiveWeaponsAmmo_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GiveWeaponAmmo
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::GiveWeaponAmmo ( )
{
	static UFunction* pFnGiveWeaponAmmo = NULL;

	if ( ! pFnGiveWeaponAmmo )
		pFnGiveWeaponAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GiveWeaponAmmo" );

	AKFInventoryManager_execGiveWeaponAmmo_Parms GiveWeaponAmmo_Parms;

	this->ProcessEvent ( pFnGiveWeaponAmmo, &GiveWeaponAmmo_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddAmmoFromPickup
// [0x00024002] 
// Parameters infos:

void AKFInventoryManager::AddAmmoFromPickup ( )
{
	static UFunction* pFnAddAmmoFromPickup = NULL;

	if ( ! pFnAddAmmoFromPickup )
		pFnAddAmmoFromPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddAmmoFromPickup" );

	AKFInventoryManager_execAddAmmoFromPickup_Parms AddAmmoFromPickup_Parms;

	this->ProcessEvent ( pFnAddAmmoFromPickup, &AddAmmoFromPickup_Parms, NULL );
};

// Function KFGame.KFInventoryManager.IsTransactionWeapon
// [0x00420102] 
// Parameters infos:

void AKFInventoryManager::IsTransactionWeapon ( )
{
	static UFunction* pFnIsTransactionWeapon = NULL;

	if ( ! pFnIsTransactionWeapon )
		pFnIsTransactionWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.IsTransactionWeapon" );

	AKFInventoryManager_execIsTransactionWeapon_Parms IsTransactionWeapon_Parms;

	this->ProcessEvent ( pFnIsTransactionWeapon, &IsTransactionWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.CheckForExcessRemoval
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::CheckForExcessRemoval ( )
{
	static UFunction* pFnCheckForExcessRemoval = NULL;

	if ( ! pFnCheckForExcessRemoval )
		pFnCheckForExcessRemoval = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.CheckForExcessRemoval" );

	AKFInventoryManager_execCheckForExcessRemoval_Parms CheckForExcessRemoval_Parms;

	this->ProcessEvent ( pFnCheckForExcessRemoval, &CheckForExcessRemoval_Parms, NULL );
};

// Function KFGame.KFInventoryManager.CanCarryWeapon
// [0x00824102] 
// Parameters infos:

void AKFInventoryManager::CanCarryWeapon ( )
{
	static UFunction* pFnCanCarryWeapon = NULL;

	if ( ! pFnCanCarryWeapon )
		pFnCanCarryWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.CanCarryWeapon" );

	AKFInventoryManager_execCanCarryWeapon_Parms CanCarryWeapon_Parms;

	this->ProcessEvent ( pFnCanCarryWeapon, &CanCarryWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerThrowMoney
// [0x002200C2] 
// Parameters infos:

void AKFInventoryManager::ServerThrowMoney ( )
{
	static UFunction* pFnServerThrowMoney = NULL;

	if ( ! pFnServerThrowMoney )
		pFnServerThrowMoney = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerThrowMoney" );

	AKFInventoryManager_execServerThrowMoney_Parms ServerThrowMoney_Parms;

	this->ProcessEvent ( pFnServerThrowMoney, &ServerThrowMoney_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ThrowMoney
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::ThrowMoney ( )
{
	static UFunction* pFnThrowMoney = NULL;

	if ( ! pFnThrowMoney )
		pFnThrowMoney = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ThrowMoney" );

	AKFInventoryManager_execThrowMoney_Parms ThrowMoney_Parms;

	this->ProcessEvent ( pFnThrowMoney, &ThrowMoney_Parms, NULL );
};

// Function KFGame.KFInventoryManager.HasGrenadeAmmo
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFInventoryManager::eventHasGrenadeAmmo ( )
{
	static UFunction* pFnHasGrenadeAmmo = NULL;

	if ( ! pFnHasGrenadeAmmo )
		pFnHasGrenadeAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.HasGrenadeAmmo" );

	AKFInventoryManager_eventHasGrenadeAmmo_Parms HasGrenadeAmmo_Parms;

	this->ProcessEvent ( pFnHasGrenadeAmmo, &HasGrenadeAmmo_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ConsumeGrenades
// [0x00024002] 
// Parameters infos:

void AKFInventoryManager::ConsumeGrenades ( )
{
	static UFunction* pFnConsumeGrenades = NULL;

	if ( ! pFnConsumeGrenades )
		pFnConsumeGrenades = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ConsumeGrenades" );

	AKFInventoryManager_execConsumeGrenades_Parms ConsumeGrenades_Parms;

	this->ProcessEvent ( pFnConsumeGrenades, &ConsumeGrenades_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddGrenades
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::AddGrenades ( )
{
	static UFunction* pFnAddGrenades = NULL;

	if ( ! pFnAddGrenades )
		pFnAddGrenades = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddGrenades" );

	AKFInventoryManager_execAddGrenades_Parms AddGrenades_Parms;

	this->ProcessEvent ( pFnAddGrenades, &AddGrenades_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GiveInitialGrenadeCount
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::GiveInitialGrenadeCount ( )
{
	static UFunction* pFnGiveInitialGrenadeCount = NULL;

	if ( ! pFnGiveInitialGrenadeCount )
		pFnGiveInitialGrenadeCount = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GiveInitialGrenadeCount" );

	AKFInventoryManager_execGiveInitialGrenadeCount_Parms GiveInitialGrenadeCount_Parms;

	this->ProcessEvent ( pFnGiveInitialGrenadeCount, &GiveInitialGrenadeCount_Parms, NULL );
};

// Function KFGame.KFInventoryManager.DoshActivate
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::DoshActivate ( )
{
	static UFunction* pFnDoshActivate = NULL;

	if ( ! pFnDoshActivate )
		pFnDoshActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.DoshActivate" );

	AKFInventoryManager_execDoshActivate_Parms DoshActivate_Parms;

	this->ProcessEvent ( pFnDoshActivate, &DoshActivate_Parms, NULL );
};

// Function KFGame.KFInventoryManager.CanUseWelder
// [0x00420102] 
// Parameters infos:

void AKFInventoryManager::CanUseWelder ( )
{
	static UFunction* pFnCanUseWelder = NULL;

	if ( ! pFnCanUseWelder )
		pFnCanUseWelder = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.CanUseWelder" );

	AKFInventoryManager_execCanUseWelder_Parms CanUseWelder_Parms;

	this->ProcessEvent ( pFnCanUseWelder, &CanUseWelder_Parms, NULL );
};

// Function KFGame.KFInventoryManager.QuickWeld
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::QuickWeld ( )
{
	static UFunction* pFnQuickWeld = NULL;

	if ( ! pFnQuickWeld )
		pFnQuickWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.QuickWeld" );

	AKFInventoryManager_execQuickWeld_Parms QuickWeld_Parms;

	this->ProcessEvent ( pFnQuickWeld, &QuickWeld_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AttemptQuickHeal
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::AttemptQuickHeal ( )
{
	static UFunction* pFnAttemptQuickHeal = NULL;

	if ( ! pFnAttemptQuickHeal )
		pFnAttemptQuickHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AttemptQuickHeal" );

	AKFInventoryManager_execAttemptQuickHeal_Parms AttemptQuickHeal_Parms;

	this->ProcessEvent ( pFnAttemptQuickHeal, &AttemptQuickHeal_Parms, NULL );
};

// Function KFGame.KFInventoryManager.SelectCurrentWeapon
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::SelectCurrentWeapon ( )
{
	static UFunction* pFnSelectCurrentWeapon = NULL;

	if ( ! pFnSelectCurrentWeapon )
		pFnSelectCurrentWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.SelectCurrentWeapon" );

	AKFInventoryManager_execSelectCurrentWeapon_Parms SelectCurrentWeapon_Parms;

	this->ProcessEvent ( pFnSelectCurrentWeapon, &SelectCurrentWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.UpdateHUD
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::UpdateHUD ( )
{
	static UFunction* pFnUpdateHUD = NULL;

	if ( ! pFnUpdateHUD )
		pFnUpdateHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.UpdateHUD" );

	AKFInventoryManager_execUpdateHUD_Parms UpdateHUD_Parms;

	this->ProcessEvent ( pFnUpdateHUD, &UpdateHUD_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ShowAllHUDGroups
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::ShowAllHUDGroups ( )
{
	static UFunction* pFnShowAllHUDGroups = NULL;

	if ( ! pFnShowAllHUDGroups )
		pFnShowAllHUDGroups = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ShowAllHUDGroups" );

	AKFInventoryManager_execShowAllHUDGroups_Parms ShowAllHUDGroups_Parms;

	this->ProcessEvent ( pFnShowAllHUDGroups, &ShowAllHUDGroups_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ShowOnlyHUDGroup
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFInventoryManager::eventShowOnlyHUDGroup ( )
{
	static UFunction* pFnShowOnlyHUDGroup = NULL;

	if ( ! pFnShowOnlyHUDGroup )
		pFnShowOnlyHUDGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ShowOnlyHUDGroup" );

	AKFInventoryManager_eventShowOnlyHUDGroup_Parms ShowOnlyHUDGroup_Parms;

	this->ProcessEvent ( pFnShowOnlyHUDGroup, &ShowOnlyHUDGroup_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ClientWeaponSet
// [0x00024102] 
// Parameters infos:

void AKFInventoryManager::ClientWeaponSet ( )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ClientWeaponSet" );

	AKFInventoryManager_execClientWeaponSet_Parms ClientWeaponSet_Parms;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function KFGame.KFInventoryManager.IsUsingIronsightHoldKey
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::IsUsingIronsightHoldKey ( )
{
	static UFunction* pFnIsUsingIronsightHoldKey = NULL;

	if ( ! pFnIsUsingIronsightHoldKey )
		pFnIsUsingIronsightHoldKey = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.IsUsingIronsightHoldKey" );

	AKFInventoryManager_execIsUsingIronsightHoldKey_Parms IsUsingIronsightHoldKey_Parms;

	this->ProcessEvent ( pFnIsUsingIronsightHoldKey, &IsUsingIronsightHoldKey_Parms, NULL );
};

// Function KFGame.KFInventoryManager.SetCurrentWeapon
// [0x010201C2] 
// Parameters infos:

void AKFInventoryManager::SetCurrentWeapon ( )
{
	static UFunction* pFnSetCurrentWeapon = NULL;

	if ( ! pFnSetCurrentWeapon )
		pFnSetCurrentWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.SetCurrentWeapon" );

	AKFInventoryManager_execSetCurrentWeapon_Parms SetCurrentWeapon_Parms;

	this->ProcessEvent ( pFnSetCurrentWeapon, &SetCurrentWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerSetCurrentWeapon
// [0x002200C2] 
// Parameters infos:

void AKFInventoryManager::ServerSetCurrentWeapon ( )
{
	static UFunction* pFnServerSetCurrentWeapon = NULL;

	if ( ! pFnServerSetCurrentWeapon )
		pFnServerSetCurrentWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerSetCurrentWeapon" );

	AKFInventoryManager_execServerSetCurrentWeapon_Parms ServerSetCurrentWeapon_Parms;

	this->ProcessEvent ( pFnServerSetCurrentWeapon, &ServerSetCurrentWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.HighlightWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::HighlightWeapon ( )
{
	static UFunction* pFnHighlightWeapon = NULL;

	if ( ! pFnHighlightWeapon )
		pFnHighlightWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.HighlightWeapon" );

	AKFInventoryManager_execHighlightWeapon_Parms HighlightWeapon_Parms;

	this->ProcessEvent ( pFnHighlightWeapon, &HighlightWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.HighlightNextWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::HighlightNextWeapon ( )
{
	static UFunction* pFnHighlightNextWeapon = NULL;

	if ( ! pFnHighlightNextWeapon )
		pFnHighlightNextWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.HighlightNextWeapon" );

	AKFInventoryManager_execHighlightNextWeapon_Parms HighlightNextWeapon_Parms;

	this->ProcessEvent ( pFnHighlightNextWeapon, &HighlightNextWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ShouldSkipCycleWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::ShouldSkipCycleWeapon ( )
{
	static UFunction* pFnShouldSkipCycleWeapon = NULL;

	if ( ! pFnShouldSkipCycleWeapon )
		pFnShouldSkipCycleWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ShouldSkipCycleWeapon" );

	AKFInventoryManager_execShouldSkipCycleWeapon_Parms ShouldSkipCycleWeapon_Parms;

	this->ProcessEvent ( pFnShouldSkipCycleWeapon, &ShouldSkipCycleWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.InternalNextWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::InternalNextWeapon ( )
{
	static UFunction* pFnInternalNextWeapon = NULL;

	if ( ! pFnInternalNextWeapon )
		pFnInternalNextWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.InternalNextWeapon" );

	AKFInventoryManager_execInternalNextWeapon_Parms InternalNextWeapon_Parms;

	this->ProcessEvent ( pFnInternalNextWeapon, &InternalNextWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.InternalPrevWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::InternalPrevWeapon ( )
{
	static UFunction* pFnInternalPrevWeapon = NULL;

	if ( ! pFnInternalPrevWeapon )
		pFnInternalPrevWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.InternalPrevWeapon" );

	AKFInventoryManager_execInternalPrevWeapon_Parms InternalPrevWeapon_Parms;

	this->ProcessEvent ( pFnInternalPrevWeapon, &InternalPrevWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GamepadNextWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::GamepadNextWeapon ( )
{
	static UFunction* pFnGamepadNextWeapon = NULL;

	if ( ! pFnGamepadNextWeapon )
		pFnGamepadNextWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GamepadNextWeapon" );

	AKFInventoryManager_execGamepadNextWeapon_Parms GamepadNextWeapon_Parms;

	this->ProcessEvent ( pFnGamepadNextWeapon, &GamepadNextWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.NextWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::NextWeapon ( )
{
	static UFunction* pFnNextWeapon = NULL;

	if ( ! pFnNextWeapon )
		pFnNextWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.NextWeapon" );

	AKFInventoryManager_execNextWeapon_Parms NextWeapon_Parms;

	this->ProcessEvent ( pFnNextWeapon, &NextWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.PrevWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::PrevWeapon ( )
{
	static UFunction* pFnPrevWeapon = NULL;

	if ( ! pFnPrevWeapon )
		pFnPrevWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.PrevWeapon" );

	AKFInventoryManager_execPrevWeapon_Parms PrevWeapon_Parms;

	this->ProcessEvent ( pFnPrevWeapon, &PrevWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.HighlightPrevWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::HighlightPrevWeapon ( )
{
	static UFunction* pFnHighlightPrevWeapon = NULL;

	if ( ! pFnHighlightPrevWeapon )
		pFnHighlightPrevWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.HighlightPrevWeapon" );

	AKFInventoryManager_execHighlightPrevWeapon_Parms HighlightPrevWeapon_Parms;

	this->ProcessEvent ( pFnHighlightPrevWeapon, &HighlightPrevWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetNextGroupedWeapon
// [0x00024102] 
// Parameters infos:

void AKFInventoryManager::GetNextGroupedWeapon ( )
{
	static UFunction* pFnGetNextGroupedWeapon = NULL;

	if ( ! pFnGetNextGroupedWeapon )
		pFnGetNextGroupedWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetNextGroupedWeapon" );

	AKFInventoryManager_execGetNextGroupedWeapon_Parms GetNextGroupedWeapon_Parms;

	this->ProcessEvent ( pFnGetNextGroupedWeapon, &GetNextGroupedWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetBestPerkWeaponWithAmmo
// [0x00024102] 
// Parameters infos:

void AKFInventoryManager::GetBestPerkWeaponWithAmmo ( )
{
	static UFunction* pFnGetBestPerkWeaponWithAmmo = NULL;

	if ( ! pFnGetBestPerkWeaponWithAmmo )
		pFnGetBestPerkWeaponWithAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetBestPerkWeaponWithAmmo" );

	AKFInventoryManager_execGetBestPerkWeaponWithAmmo_Parms GetBestPerkWeaponWithAmmo_Parms;

	this->ProcessEvent ( pFnGetBestPerkWeaponWithAmmo, &GetBestPerkWeaponWithAmmo_Parms, NULL );
};

// Function KFGame.KFInventoryManager.SwitchToLastWeapon
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::SwitchToLastWeapon ( )
{
	static UFunction* pFnSwitchToLastWeapon = NULL;

	if ( ! pFnSwitchToLastWeapon )
		pFnSwitchToLastWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.SwitchToLastWeapon" );

	AKFInventoryManager_execSwitchToLastWeapon_Parms SwitchToLastWeapon_Parms;

	this->ProcessEvent ( pFnSwitchToLastWeapon, &SwitchToLastWeapon_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ClassNameIsInInventory
// [0x00420002] 
// Parameters infos:

void AKFInventoryManager::ClassNameIsInInventory ( )
{
	static UFunction* pFnClassNameIsInInventory = NULL;

	if ( ! pFnClassNameIsInInventory )
		pFnClassNameIsInInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ClassNameIsInInventory" );

	AKFInventoryManager_execClassNameIsInInventory_Parms ClassNameIsInInventory_Parms;

	this->ProcessEvent ( pFnClassNameIsInInventory, &ClassNameIsInInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ClassIsInInventory
// [0x00420002] 
// Parameters infos:

void AKFInventoryManager::ClassIsInInventory ( )
{
	static UFunction* pFnClassIsInInventory = NULL;

	if ( ! pFnClassIsInInventory )
		pFnClassIsInInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ClassIsInInventory" );

	AKFInventoryManager_execClassIsInInventory_Parms ClassIsInInventory_Parms;

	this->ProcessEvent ( pFnClassIsInInventory, &ClassIsInInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ItemIsInInventory
// [0x00020002] 
// Parameters infos:

void AKFInventoryManager::ItemIsInInventory ( )
{
	static UFunction* pFnItemIsInInventory = NULL;

	if ( ! pFnItemIsInInventory )
		pFnItemIsInInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ItemIsInInventory" );

	AKFInventoryManager_execItemIsInInventory_Parms ItemIsInInventory_Parms;

	this->ProcessEvent ( pFnItemIsInInventory, &ItemIsInInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ClientRemoveFromInventory
// [0x010201C2] 
// Parameters infos:

void AKFInventoryManager::ClientRemoveFromInventory ( )
{
	static UFunction* pFnClientRemoveFromInventory = NULL;

	if ( ! pFnClientRemoveFromInventory )
		pFnClientRemoveFromInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ClientRemoveFromInventory" );

	AKFInventoryManager_execClientRemoveFromInventory_Parms ClientRemoveFromInventory_Parms;

	this->ProcessEvent ( pFnClientRemoveFromInventory, &ClientRemoveFromInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.ServerRemoveFromInventory
// [0x002200C3] ( FUNC_Final )
// Parameters infos:

void AKFInventoryManager::ServerRemoveFromInventory ( )
{
	static UFunction* pFnServerRemoveFromInventory = NULL;

	if ( ! pFnServerRemoveFromInventory )
		pFnServerRemoveFromInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.ServerRemoveFromInventory" );

	AKFInventoryManager_execServerRemoveFromInventory_Parms ServerRemoveFromInventory_Parms;

	this->ProcessEvent ( pFnServerRemoveFromInventory, &ServerRemoveFromInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.RemoveFromInventory
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::RemoveFromInventory ( )
{
	static UFunction* pFnRemoveFromInventory = NULL;

	if ( ! pFnRemoveFromInventory )
		pFnRemoveFromInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.RemoveFromInventory" );

	AKFInventoryManager_execRemoveFromInventory_Parms RemoveFromInventory_Parms;

	this->ProcessEvent ( pFnRemoveFromInventory, &RemoveFromInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.CreateInventory
// [0x00024102] 
// Parameters infos:

void AKFInventoryManager::CreateInventory ( )
{
	static UFunction* pFnCreateInventory = NULL;

	if ( ! pFnCreateInventory )
		pFnCreateInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.CreateInventory" );

	AKFInventoryManager_execCreateInventory_Parms CreateInventory_Parms;

	this->ProcessEvent ( pFnCreateInventory, &CreateInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.CreateInventoryArchetype
// [0x00024102] 
// Parameters infos:

void AKFInventoryManager::CreateInventoryArchetype ( )
{
	static UFunction* pFnCreateInventoryArchetype = NULL;

	if ( ! pFnCreateInventoryArchetype )
		pFnCreateInventoryArchetype = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.CreateInventoryArchetype" );

	AKFInventoryManager_execCreateInventoryArchetype_Parms CreateInventoryArchetype_Parms;

	this->ProcessEvent ( pFnCreateInventoryArchetype, &CreateInventoryArchetype_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddInventory
// [0x00024102] 
// Parameters infos:

void AKFInventoryManager::AddInventory ( )
{
	static UFunction* pFnAddInventory = NULL;

	if ( ! pFnAddInventory )
		pFnAddInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddInventory" );

	AKFInventoryManager_execAddInventory_Parms AddInventory_Parms;

	this->ProcessEvent ( pFnAddInventory, &AddInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.InitFOV
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::InitFOV ( )
{
	static UFunction* pFnInitFOV = NULL;

	if ( ! pFnInitFOV )
		pFnInitFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.InitFOV" );

	AKFInventoryManager_execInitFOV_Parms InitFOV_Parms;

	this->ProcessEvent ( pFnInitFOV, &InitFOV_Parms, NULL );
};

// Function KFGame.KFInventoryManager.RemoveOpticsUIMovie
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::RemoveOpticsUIMovie ( )
{
	static UFunction* pFnRemoveOpticsUIMovie = NULL;

	if ( ! pFnRemoveOpticsUIMovie )
		pFnRemoveOpticsUIMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.RemoveOpticsUIMovie" );

	AKFInventoryManager_execRemoveOpticsUIMovie_Parms RemoveOpticsUIMovie_Parms;

	this->ProcessEvent ( pFnRemoveOpticsUIMovie, &RemoveOpticsUIMovie_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetOpticsUIMovie
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::GetOpticsUIMovie ( )
{
	static UFunction* pFnGetOpticsUIMovie = NULL;

	if ( ! pFnGetOpticsUIMovie )
		pFnGetOpticsUIMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetOpticsUIMovie" );

	AKFInventoryManager_execGetOpticsUIMovie_Parms GetOpticsUIMovie_Parms;

	this->ProcessEvent ( pFnGetOpticsUIMovie, &GetOpticsUIMovie_Parms, NULL );
};

// Function KFGame.KFInventoryManager.GetPrimaryAmmoPercentage
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::GetPrimaryAmmoPercentage ( )
{
	static UFunction* pFnGetPrimaryAmmoPercentage = NULL;

	if ( ! pFnGetPrimaryAmmoPercentage )
		pFnGetPrimaryAmmoPercentage = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.GetPrimaryAmmoPercentage" );

	AKFInventoryManager_execGetPrimaryAmmoPercentage_Parms GetPrimaryAmmoPercentage_Parms;

	this->ProcessEvent ( pFnGetPrimaryAmmoPercentage, &GetPrimaryAmmoPercentage_Parms, NULL );
};

// Function KFGame.KFInventoryManager.DumpInventory
// [0x00020102] 
// Parameters infos:

void AKFInventoryManager::DumpInventory ( )
{
	static UFunction* pFnDumpInventory = NULL;

	if ( ! pFnDumpInventory )
		pFnDumpInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.DumpInventory" );

	AKFInventoryManager_execDumpInventory_Parms DumpInventory_Parms;

	this->ProcessEvent ( pFnDumpInventory, &DumpInventory_Parms, NULL );
};

// Function KFGame.KFInventoryManager.AddWeaponToGroup
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void AKFInventoryManager::AddWeaponToGroup ( )
{
	static UFunction* pFnAddWeaponToGroup = NULL;

	if ( ! pFnAddWeaponToGroup )
		pFnAddWeaponToGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryManager.AddWeaponToGroup" );

	AKFInventoryManager_execAddWeaponToGroup_Parms AddWeaponToGroup_Parms;

	pFnAddWeaponToGroup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddWeaponToGroup, &AddWeaponToGroup_Parms, NULL );

	pFnAddWeaponToGroup->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapInfo.OnCollectibleFound
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapInfo::OnCollectibleFound ( )
{
	static UFunction* pFnOnCollectibleFound = NULL;

	if ( ! pFnOnCollectibleFound )
		pFnOnCollectibleFound = UObject::FindObject< UFunction > ( "Function KFGame.KFMapInfo.OnCollectibleFound" );

	UKFMapInfo_execOnCollectibleFound_Parms OnCollectibleFound_Parms;

	pFnOnCollectibleFound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnCollectibleFound, &OnCollectibleFound_Parms, NULL );

	pFnOnCollectibleFound->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapInfo.StaticGetRandomTrack
// [0x00022002] 
// Parameters infos:

void UKFMapInfo::StaticGetRandomTrack ( )
{
	static UFunction* pFnStaticGetRandomTrack = NULL;

	if ( ! pFnStaticGetRandomTrack )
		pFnStaticGetRandomTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFMapInfo.StaticGetRandomTrack" );

	UKFMapInfo_execStaticGetRandomTrack_Parms StaticGetRandomTrack_Parms;

	this->ProcessEvent ( pFnStaticGetRandomTrack, &StaticGetRandomTrack_Parms, NULL );
};

// Function KFGame.KFMapInfo.ShuffleTracks
// [0x00424002] 
// Parameters infos:

void UKFMapInfo::ShuffleTracks ( )
{
	static UFunction* pFnShuffleTracks = NULL;

	if ( ! pFnShuffleTracks )
		pFnShuffleTracks = UObject::FindObject< UFunction > ( "Function KFGame.KFMapInfo.ShuffleTracks" );

	UKFMapInfo_execShuffleTracks_Parms ShuffleTracks_Parms;

	this->ProcessEvent ( pFnShuffleTracks, &ShuffleTracks_Parms, NULL );
};

// Function KFGame.KFMapInfo.GetRandomTrack
// [0x00420002] 
// Parameters infos:

void UKFMapInfo::GetRandomTrack ( )
{
	static UFunction* pFnGetRandomTrack = NULL;

	if ( ! pFnGetRandomTrack )
		pFnGetRandomTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFMapInfo.GetRandomTrack" );

	UKFMapInfo_execGetRandomTrack_Parms GetRandomTrack_Parms;

	this->ProcessEvent ( pFnGetRandomTrack, &GetRandomTrack_Parms, NULL );
};

// Function KFGame.KFMapInfo.GetNextMusicTrackByGameIntensity
// [0x00020002] 
// Parameters infos:

void UKFMapInfo::GetNextMusicTrackByGameIntensity ( )
{
	static UFunction* pFnGetNextMusicTrackByGameIntensity = NULL;

	if ( ! pFnGetNextMusicTrackByGameIntensity )
		pFnGetNextMusicTrackByGameIntensity = UObject::FindObject< UFunction > ( "Function KFGame.KFMapInfo.GetNextMusicTrackByGameIntensity" );

	UKFMapInfo_execGetNextMusicTrackByGameIntensity_Parms GetNextMusicTrackByGameIntensity_Parms;

	this->ProcessEvent ( pFnGetNextMusicTrackByGameIntensity, &GetNextMusicTrackByGameIntensity_Parms, NULL );
};

// Function KFGame.KFMapInfo.StaticGetNextMusicTrackStruct
// [0x00026000] 
// Parameters infos:

void UKFMapInfo::StaticGetNextMusicTrackStruct ( )
{
	static UFunction* pFnStaticGetNextMusicTrackStruct = NULL;

	if ( ! pFnStaticGetNextMusicTrackStruct )
		pFnStaticGetNextMusicTrackStruct = UObject::FindObject< UFunction > ( "Function KFGame.KFMapInfo.StaticGetNextMusicTrackStruct" );

	UKFMapInfo_execStaticGetNextMusicTrackStruct_Parms StaticGetNextMusicTrackStruct_Parms;

	this->ProcessEvent ( pFnStaticGetNextMusicTrackStruct, &StaticGetNextMusicTrackStruct_Parms, NULL );
};

// Function KFGame.KFMapInfo.GetNextMusicTrackStruct
// [0x00024000] 
// Parameters infos:

void UKFMapInfo::GetNextMusicTrackStruct ( )
{
	static UFunction* pFnGetNextMusicTrackStruct = NULL;

	if ( ! pFnGetNextMusicTrackStruct )
		pFnGetNextMusicTrackStruct = UObject::FindObject< UFunction > ( "Function KFGame.KFMapInfo.GetNextMusicTrackStruct" );

	UKFMapInfo_execGetNextMusicTrackStruct_Parms GetNextMusicTrackStruct_Parms;

	this->ProcessEvent ( pFnGetNextMusicTrackStruct, &GetNextMusicTrackStruct_Parms, NULL );
};

// Function KFGame.KFMapTravelData.ClearAllMapTravelData
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFMapTravelData::ClearAllMapTravelData ( )
{
	static UFunction* pFnClearAllMapTravelData = NULL;

	if ( ! pFnClearAllMapTravelData )
		pFnClearAllMapTravelData = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.ClearAllMapTravelData" );

	UKFMapTravelData_execClearAllMapTravelData_Parms ClearAllMapTravelData_Parms;

	pFnClearAllMapTravelData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllMapTravelData, &ClearAllMapTravelData_Parms, NULL );

	pFnClearAllMapTravelData->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.GetBossSurvivorDamageTaken
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::GetBossSurvivorDamageTaken ( )
{
	static UFunction* pFnGetBossSurvivorDamageTaken = NULL;

	if ( ! pFnGetBossSurvivorDamageTaken )
		pFnGetBossSurvivorDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.GetBossSurvivorDamageTaken" );

	UKFMapTravelData_execGetBossSurvivorDamageTaken_Parms GetBossSurvivorDamageTaken_Parms;

	pFnGetBossSurvivorDamageTaken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBossSurvivorDamageTaken, &GetBossSurvivorDamageTaken_Parms, NULL );

	pFnGetBossSurvivorDamageTaken->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.SetBossSurvivorDamageTaken
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::SetBossSurvivorDamageTaken ( )
{
	static UFunction* pFnSetBossSurvivorDamageTaken = NULL;

	if ( ! pFnSetBossSurvivorDamageTaken )
		pFnSetBossSurvivorDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.SetBossSurvivorDamageTaken" );

	UKFMapTravelData_execSetBossSurvivorDamageTaken_Parms SetBossSurvivorDamageTaken_Parms;

	pFnSetBossSurvivorDamageTaken->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBossSurvivorDamageTaken, &SetBossSurvivorDamageTaken_Parms, NULL );

	pFnSetBossSurvivorDamageTaken->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.GetBossDamageDone
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::GetBossDamageDone ( )
{
	static UFunction* pFnGetBossDamageDone = NULL;

	if ( ! pFnGetBossDamageDone )
		pFnGetBossDamageDone = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.GetBossDamageDone" );

	UKFMapTravelData_execGetBossDamageDone_Parms GetBossDamageDone_Parms;

	pFnGetBossDamageDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBossDamageDone, &GetBossDamageDone_Parms, NULL );

	pFnGetBossDamageDone->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.SetBossDamageDone
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::SetBossDamageDone ( )
{
	static UFunction* pFnSetBossDamageDone = NULL;

	if ( ! pFnSetBossDamageDone )
		pFnSetBossDamageDone = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.SetBossDamageDone" );

	UKFMapTravelData_execSetBossDamageDone_Parms SetBossDamageDone_Parms;

	pFnSetBossDamageDone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBossDamageDone, &SetBossDamageDone_Parms, NULL );

	pFnSetBossDamageDone->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.GetSurvivorDeaths
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::GetSurvivorDeaths ( )
{
	static UFunction* pFnGetSurvivorDeaths = NULL;

	if ( ! pFnGetSurvivorDeaths )
		pFnGetSurvivorDeaths = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.GetSurvivorDeaths" );

	UKFMapTravelData_execGetSurvivorDeaths_Parms GetSurvivorDeaths_Parms;

	pFnGetSurvivorDeaths->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSurvivorDeaths, &GetSurvivorDeaths_Parms, NULL );

	pFnGetSurvivorDeaths->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.SetSurvivorDeaths
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::SetSurvivorDeaths ( )
{
	static UFunction* pFnSetSurvivorDeaths = NULL;

	if ( ! pFnSetSurvivorDeaths )
		pFnSetSurvivorDeaths = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.SetSurvivorDeaths" );

	UKFMapTravelData_execSetSurvivorDeaths_Parms SetSurvivorDeaths_Parms;

	pFnSetSurvivorDeaths->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetSurvivorDeaths, &SetSurvivorDeaths_Parms, NULL );

	pFnSetSurvivorDeaths->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.GetRoundCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::GetRoundCount ( )
{
	static UFunction* pFnGetRoundCount = NULL;

	if ( ! pFnGetRoundCount )
		pFnGetRoundCount = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.GetRoundCount" );

	UKFMapTravelData_execGetRoundCount_Parms GetRoundCount_Parms;

	pFnGetRoundCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRoundCount, &GetRoundCount_Parms, NULL );

	pFnGetRoundCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.SetRoundCount
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::SetRoundCount ( )
{
	static UFunction* pFnSetRoundCount = NULL;

	if ( ! pFnSetRoundCount )
		pFnSetRoundCount = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.SetRoundCount" );

	UKFMapTravelData_execSetRoundCount_Parms SetRoundCount_Parms;

	pFnSetRoundCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRoundCount, &SetRoundCount_Parms, NULL );

	pFnSetRoundCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.GetTeamScore
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::GetTeamScore ( )
{
	static UFunction* pFnGetTeamScore = NULL;

	if ( ! pFnGetTeamScore )
		pFnGetTeamScore = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.GetTeamScore" );

	UKFMapTravelData_execGetTeamScore_Parms GetTeamScore_Parms;

	pFnGetTeamScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamScore, &GetTeamScore_Parms, NULL );

	pFnGetTeamScore->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.SetTeamScore
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::SetTeamScore ( )
{
	static UFunction* pFnSetTeamScore = NULL;

	if ( ! pFnSetTeamScore )
		pFnSetTeamScore = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.SetTeamScore" );

	UKFMapTravelData_execSetTeamScore_Parms SetTeamScore_Parms;

	pFnSetTeamScore->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTeamScore, &SetTeamScore_Parms, NULL );

	pFnSetTeamScore->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.ClearPlayerData
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::ClearPlayerData ( )
{
	static UFunction* pFnClearPlayerData = NULL;

	if ( ! pFnClearPlayerData )
		pFnClearPlayerData = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.ClearPlayerData" );

	UKFMapTravelData_execClearPlayerData_Parms ClearPlayerData_Parms;

	pFnClearPlayerData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPlayerData, &ClearPlayerData_Parms, NULL );

	pFnClearPlayerData->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.GetPlayer
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::GetPlayer ( )
{
	static UFunction* pFnGetPlayer = NULL;

	if ( ! pFnGetPlayer )
		pFnGetPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.GetPlayer" );

	UKFMapTravelData_execGetPlayer_Parms GetPlayer_Parms;

	pFnGetPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPlayer, &GetPlayer_Parms, NULL );

	pFnGetPlayer->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.RemovePlayer
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::RemovePlayer ( )
{
	static UFunction* pFnRemovePlayer = NULL;

	if ( ! pFnRemovePlayer )
		pFnRemovePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.RemovePlayer" );

	UKFMapTravelData_execRemovePlayer_Parms RemovePlayer_Parms;

	pFnRemovePlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemovePlayer, &RemovePlayer_Parms, NULL );

	pFnRemovePlayer->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.AddPlayer
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::AddPlayer ( )
{
	static UFunction* pFnAddPlayer = NULL;

	if ( ! pFnAddPlayer )
		pFnAddPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.AddPlayer" );

	UKFMapTravelData_execAddPlayer_Parms AddPlayer_Parms;

	pFnAddPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddPlayer, &AddPlayer_Parms, NULL );

	pFnAddPlayer->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.GetLastTravelTime
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::GetLastTravelTime ( )
{
	static UFunction* pFnGetLastTravelTime = NULL;

	if ( ! pFnGetLastTravelTime )
		pFnGetLastTravelTime = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.GetLastTravelTime" );

	UKFMapTravelData_execGetLastTravelTime_Parms GetLastTravelTime_Parms;

	pFnGetLastTravelTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastTravelTime, &GetLastTravelTime_Parms, NULL );

	pFnGetLastTravelTime->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.SetLastTravelTime
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::SetLastTravelTime ( )
{
	static UFunction* pFnSetLastTravelTime = NULL;

	if ( ! pFnSetLastTravelTime )
		pFnSetLastTravelTime = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.SetLastTravelTime" );

	UKFMapTravelData_execSetLastTravelTime_Parms SetLastTravelTime_Parms;

	pFnSetLastTravelTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLastTravelTime, &SetLastTravelTime_Parms, NULL );

	pFnSetLastTravelTime->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.GetLastGameMap
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::GetLastGameMap ( )
{
	static UFunction* pFnGetLastGameMap = NULL;

	if ( ! pFnGetLastGameMap )
		pFnGetLastGameMap = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.GetLastGameMap" );

	UKFMapTravelData_execGetLastGameMap_Parms GetLastGameMap_Parms;

	pFnGetLastGameMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastGameMap, &GetLastGameMap_Parms, NULL );

	pFnGetLastGameMap->FunctionFlags |= 0x400;
};

// Function KFGame.KFMapTravelData.SetLastGameMap
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFMapTravelData::SetLastGameMap ( )
{
	static UFunction* pFnSetLastGameMap = NULL;

	if ( ! pFnSetLastGameMap )
		pFnSetLastGameMap = UObject::FindObject< UFunction > ( "Function KFGame.KFMapTravelData.SetLastGameMap" );

	UKFMapTravelData_execSetLastGameMap_Parms SetLastGameMap_Parms;

	pFnSetLastGameMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLastGameMap, &SetLastGameMap_Parms, NULL );

	pFnSetLastGameMap->FunctionFlags |= 0x400;
};

// Function KFGame.KFMeleeHelperBase.MeleeFractureMeshImpact
// [0x00022002] 
// Parameters infos:

void UKFMeleeHelperBase::MeleeFractureMeshImpact ( )
{
	static UFunction* pFnMeleeFractureMeshImpact = NULL;

	if ( ! pFnMeleeFractureMeshImpact )
		pFnMeleeFractureMeshImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.MeleeFractureMeshImpact" );

	UKFMeleeHelperBase_execMeleeFractureMeshImpact_Parms MeleeFractureMeshImpact_Parms;

	this->ProcessEvent ( pFnMeleeFractureMeshImpact, &MeleeFractureMeshImpact_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.PlayMeleeHitEffects
// [0x00024102] 
// Parameters infos:

void UKFMeleeHelperBase::PlayMeleeHitEffects ( )
{
	static UFunction* pFnPlayMeleeHitEffects = NULL;

	if ( ! pFnPlayMeleeHitEffects )
		pFnPlayMeleeHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.PlayMeleeHitEffects" );

	UKFMeleeHelperBase_execPlayMeleeHitEffects_Parms PlayMeleeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayMeleeHitEffects, &PlayMeleeHitEffects_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.InitWorldTraceForHitboxCollision
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UKFMeleeHelperBase::eventInitWorldTraceForHitboxCollision ( )
{
	static UFunction* pFnInitWorldTraceForHitboxCollision = NULL;

	if ( ! pFnInitWorldTraceForHitboxCollision )
		pFnInitWorldTraceForHitboxCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.InitWorldTraceForHitboxCollision" );

	UKFMeleeHelperBase_eventInitWorldTraceForHitboxCollision_Parms InitWorldTraceForHitboxCollision_Parms;

	this->ProcessEvent ( pFnInitWorldTraceForHitboxCollision, &InitWorldTraceForHitboxCollision_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.ProcessHitboxCollision
// [0x00424802] ( FUNC_Event )
// Parameters infos:

void UKFMeleeHelperBase::eventProcessHitboxCollision ( )
{
	static UFunction* pFnProcessHitboxCollision = NULL;

	if ( ! pFnProcessHitboxCollision )
		pFnProcessHitboxCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.ProcessHitboxCollision" );

	UKFMeleeHelperBase_eventProcessHitboxCollision_Parms ProcessHitboxCollision_Parms;

	this->ProcessEvent ( pFnProcessHitboxCollision, &ProcessHitboxCollision_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.HasCollidedWithHitbox
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMeleeHelperBase::HasCollidedWithHitbox ( )
{
	static UFunction* pFnHasCollidedWithHitbox = NULL;

	if ( ! pFnHasCollidedWithHitbox )
		pFnHasCollidedWithHitbox = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.HasCollidedWithHitbox" );

	UKFMeleeHelperBase_execHasCollidedWithHitbox_Parms HasCollidedWithHitbox_Parms;

	pFnHasCollidedWithHitbox->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasCollidedWithHitbox, &HasCollidedWithHitbox_Parms, NULL );

	pFnHasCollidedWithHitbox->FunctionFlags |= 0x400;
};

// Function KFGame.KFMeleeHelperBase.SetHitboxChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMeleeHelperBase::SetHitboxChain ( )
{
	static UFunction* pFnSetHitboxChain = NULL;

	if ( ! pFnSetHitboxChain )
		pFnSetHitboxChain = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.SetHitboxChain" );

	UKFMeleeHelperBase_execSetHitboxChain_Parms SetHitboxChain_Parms;

	pFnSetHitboxChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHitboxChain, &SetHitboxChain_Parms, NULL );

	pFnSetHitboxChain->FunctionFlags |= 0x400;
};

// Function KFGame.KFMeleeHelperBase.CreateHitboxChain
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMeleeHelperBase::CreateHitboxChain ( )
{
	static UFunction* pFnCreateHitboxChain = NULL;

	if ( ! pFnCreateHitboxChain )
		pFnCreateHitboxChain = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.CreateHitboxChain" );

	UKFMeleeHelperBase_execCreateHitboxChain_Parms CreateHitboxChain_Parms;

	pFnCreateHitboxChain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateHitboxChain, &CreateHitboxChain_Parms, NULL );

	pFnCreateHitboxChain->FunctionFlags |= 0x400;
};

// Function KFGame.KFMeleeHelperBase.BeginHitboxCollisionDetection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMeleeHelperBase::BeginHitboxCollisionDetection ( )
{
	static UFunction* pFnBeginHitboxCollisionDetection = NULL;

	if ( ! pFnBeginHitboxCollisionDetection )
		pFnBeginHitboxCollisionDetection = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.BeginHitboxCollisionDetection" );

	UKFMeleeHelperBase_execBeginHitboxCollisionDetection_Parms BeginHitboxCollisionDetection_Parms;

	pFnBeginHitboxCollisionDetection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBeginHitboxCollisionDetection, &BeginHitboxCollisionDetection_Parms, NULL );

	pFnBeginHitboxCollisionDetection->FunctionFlags |= 0x400;
};

// Function KFGame.KFMeleeHelperBase.TickHitboxCollisionDetection
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMeleeHelperBase::TickHitboxCollisionDetection ( )
{
	static UFunction* pFnTickHitboxCollisionDetection = NULL;

	if ( ! pFnTickHitboxCollisionDetection )
		pFnTickHitboxCollisionDetection = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.TickHitboxCollisionDetection" );

	UKFMeleeHelperBase_execTickHitboxCollisionDetection_Parms TickHitboxCollisionDetection_Parms;

	pFnTickHitboxCollisionDetection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTickHitboxCollisionDetection, &TickHitboxCollisionDetection_Parms, NULL );

	pFnTickHitboxCollisionDetection->FunctionFlags |= 0x400;
};

// Function KFGame.KFMeleeHelperBase.TraceMeleeAttackHitZones
// [0x00424102] 
// Parameters infos:

void UKFMeleeHelperBase::TraceMeleeAttackHitZones ( )
{
	static UFunction* pFnTraceMeleeAttackHitZones = NULL;

	if ( ! pFnTraceMeleeAttackHitZones )
		pFnTraceMeleeAttackHitZones = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.TraceMeleeAttackHitZones" );

	UKFMeleeHelperBase_execTraceMeleeAttackHitZones_Parms TraceMeleeAttackHitZones_Parms;

	this->ProcessEvent ( pFnTraceMeleeAttackHitZones, &TraceMeleeAttackHitZones_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.GetMeleeHitTestLocation
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperBase::GetMeleeHitTestLocation ( )
{
	static UFunction* pFnGetMeleeHitTestLocation = NULL;

	if ( ! pFnGetMeleeHitTestLocation )
		pFnGetMeleeHitTestLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.GetMeleeHitTestLocation" );

	UKFMeleeHelperBase_execGetMeleeHitTestLocation_Parms GetMeleeHitTestLocation_Parms;

	this->ProcessEvent ( pFnGetMeleeHitTestLocation, &GetMeleeHitTestLocation_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.RateMeleeVictim
// [0x00824102] 
// Parameters infos:

void UKFMeleeHelperBase::RateMeleeVictim ( )
{
	static UFunction* pFnRateMeleeVictim = NULL;

	if ( ! pFnRateMeleeVictim )
		pFnRateMeleeVictim = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.RateMeleeVictim" );

	UKFMeleeHelperBase_execRateMeleeVictim_Parms RateMeleeVictim_Parms;

	this->ProcessEvent ( pFnRateMeleeVictim, &RateMeleeVictim_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.FindVictimByFOV
// [0x00024102] 
// Parameters infos:

void UKFMeleeHelperBase::FindVictimByFOV ( )
{
	static UFunction* pFnFindVictimByFOV = NULL;

	if ( ! pFnFindVictimByFOV )
		pFnFindVictimByFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.FindVictimByFOV" );

	UKFMeleeHelperBase_execFindVictimByFOV_Parms FindVictimByFOV_Parms;

	this->ProcessEvent ( pFnFindVictimByFOV, &FindVictimByFOV_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.TraceNoPawns
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFMeleeHelperBase::TraceNoPawns ( )
{
	static UFunction* pFnTraceNoPawns = NULL;

	if ( ! pFnTraceNoPawns )
		pFnTraceNoPawns = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.TraceNoPawns" );

	UKFMeleeHelperBase_execTraceNoPawns_Parms TraceNoPawns_Parms;

	pFnTraceNoPawns->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTraceNoPawns, &TraceNoPawns_Parms, NULL );

	pFnTraceNoPawns->FunctionFlags |= 0x400;
};

// Function KFGame.KFMeleeHelperBase.DoWeaponInstantTrace
// [0x00424002] 
// Parameters infos:

void UKFMeleeHelperBase::DoWeaponInstantTrace ( )
{
	static UFunction* pFnDoWeaponInstantTrace = NULL;

	if ( ! pFnDoWeaponInstantTrace )
		pFnDoWeaponInstantTrace = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.DoWeaponInstantTrace" );

	UKFMeleeHelperBase_execDoWeaponInstantTrace_Parms DoWeaponInstantTrace_Parms;

	this->ProcessEvent ( pFnDoWeaponInstantTrace, &DoWeaponInstantTrace_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.MeleeAttackDestructibles
// [0x00020000] 
// Parameters infos:

void UKFMeleeHelperBase::MeleeAttackDestructibles ( )
{
	static UFunction* pFnMeleeAttackDestructibles = NULL;

	if ( ! pFnMeleeAttackDestructibles )
		pFnMeleeAttackDestructibles = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.MeleeAttackDestructibles" );

	UKFMeleeHelperBase_execMeleeAttackDestructibles_Parms MeleeAttackDestructibles_Parms;

	this->ProcessEvent ( pFnMeleeAttackDestructibles, &MeleeAttackDestructibles_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.GetMeleeRange
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperBase::GetMeleeRange ( )
{
	static UFunction* pFnGetMeleeRange = NULL;

	if ( ! pFnGetMeleeRange )
		pFnGetMeleeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.GetMeleeRange" );

	UKFMeleeHelperBase_execGetMeleeRange_Parms GetMeleeRange_Parms;

	this->ProcessEvent ( pFnGetMeleeRange, &GetMeleeRange_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.SetMeleeRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMeleeHelperBase::SetMeleeRange ( )
{
	static UFunction* pFnSetMeleeRange = NULL;

	if ( ! pFnSetMeleeRange )
		pFnSetMeleeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.SetMeleeRange" );

	UKFMeleeHelperBase_execSetMeleeRange_Parms SetMeleeRange_Parms;

	pFnSetMeleeRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetMeleeRange, &SetMeleeRange_Parms, NULL );

	pFnSetMeleeRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFMeleeHelperBase.GetMeleeAimRotation
// [0x00820102] 
// Parameters infos:

void UKFMeleeHelperBase::GetMeleeAimRotation ( )
{
	static UFunction* pFnGetMeleeAimRotation = NULL;

	if ( ! pFnGetMeleeAimRotation )
		pFnGetMeleeAimRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.GetMeleeAimRotation" );

	UKFMeleeHelperBase_execGetMeleeAimRotation_Parms GetMeleeAimRotation_Parms;

	this->ProcessEvent ( pFnGetMeleeAimRotation, &GetMeleeAimRotation_Parms, NULL );
};

// Function KFGame.KFMeleeHelperBase.GetMeleeStartTraceLocation
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperBase::GetMeleeStartTraceLocation ( )
{
	static UFunction* pFnGetMeleeStartTraceLocation = NULL;

	if ( ! pFnGetMeleeStartTraceLocation )
		pFnGetMeleeStartTraceLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperBase.GetMeleeStartTraceLocation" );

	UKFMeleeHelperBase_execGetMeleeStartTraceLocation_Parms GetMeleeStartTraceLocation_Parms;

	this->ProcessEvent ( pFnGetMeleeStartTraceLocation, &GetMeleeStartTraceLocation_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.ApplyDelayedPawnDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFMeleeHelperAI::eventApplyDelayedPawnDamage ( )
{
	static UFunction* pFnApplyDelayedPawnDamage = NULL;

	if ( ! pFnApplyDelayedPawnDamage )
		pFnApplyDelayedPawnDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.ApplyDelayedPawnDamage" );

	UKFMeleeHelperAI_eventApplyDelayedPawnDamage_Parms ApplyDelayedPawnDamage_Parms;

	this->ProcessEvent ( pFnApplyDelayedPawnDamage, &ApplyDelayedPawnDamage_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.ResolvePawnMeleeDamage
// [0x00880002] 
// Parameters infos:

void UKFMeleeHelperAI::ResolvePawnMeleeDamage ( )
{
	static UFunction* pFnResolvePawnMeleeDamage = NULL;

	if ( ! pFnResolvePawnMeleeDamage )
		pFnResolvePawnMeleeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.ResolvePawnMeleeDamage" );

	UKFMeleeHelperAI_execResolvePawnMeleeDamage_Parms ResolvePawnMeleeDamage_Parms;

	this->ProcessEvent ( pFnResolvePawnMeleeDamage, &ResolvePawnMeleeDamage_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.ProcessSwipeHit
// [0x00080002] 
// Parameters infos:

void UKFMeleeHelperAI::ProcessSwipeHit ( )
{
	static UFunction* pFnProcessSwipeHit = NULL;

	if ( ! pFnProcessSwipeHit )
		pFnProcessSwipeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.ProcessSwipeHit" );

	UKFMeleeHelperAI_execProcessSwipeHit_Parms ProcessSwipeHit_Parms;

	this->ProcessEvent ( pFnProcessSwipeHit, &ProcessSwipeHit_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.GetSwipeVector
// [0x00880002] 
// Parameters infos:

void UKFMeleeHelperAI::GetSwipeVector ( )
{
	static UFunction* pFnGetSwipeVector = NULL;

	if ( ! pFnGetSwipeVector )
		pFnGetSwipeVector = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.GetSwipeVector" );

	UKFMeleeHelperAI_execGetSwipeVector_Parms GetSwipeVector_Parms;

	this->ProcessEvent ( pFnGetSwipeVector, &GetSwipeVector_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.DoSwipeImpact
// [0x00884002] 
// Parameters infos:

void UKFMeleeHelperAI::DoSwipeImpact ( )
{
	static UFunction* pFnDoSwipeImpact = NULL;

	if ( ! pFnDoSwipeImpact )
		pFnDoSwipeImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.DoSwipeImpact" );

	UKFMeleeHelperAI_execDoSwipeImpact_Parms DoSwipeImpact_Parms;

	this->ProcessEvent ( pFnDoSwipeImpact, &DoSwipeImpact_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.CheckEnemyImpact
// [0x00084002] 
// Parameters infos:

void UKFMeleeHelperAI::CheckEnemyImpact ( )
{
	static UFunction* pFnCheckEnemyImpact = NULL;

	if ( ! pFnCheckEnemyImpact )
		pFnCheckEnemyImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.CheckEnemyImpact" );

	UKFMeleeHelperAI_execCheckEnemyImpact_Parms CheckEnemyImpact_Parms;

	this->ProcessEvent ( pFnCheckEnemyImpact, &CheckEnemyImpact_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.MeleeImpactNotify
// [0x00020002] 
// Parameters infos:

void UKFMeleeHelperAI::MeleeImpactNotify ( )
{
	static UFunction* pFnMeleeImpactNotify = NULL;

	if ( ! pFnMeleeImpactNotify )
		pFnMeleeImpactNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.MeleeImpactNotify" );

	UKFMeleeHelperAI_execMeleeImpactNotify_Parms MeleeImpactNotify_Parms;

	this->ProcessEvent ( pFnMeleeImpactNotify, &MeleeImpactNotify_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.PlayMeleeHitEffects
// [0x00024102] 
// Parameters infos:

void UKFMeleeHelperAI::PlayMeleeHitEffects ( )
{
	static UFunction* pFnPlayMeleeHitEffects = NULL;

	if ( ! pFnPlayMeleeHitEffects )
		pFnPlayMeleeHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.PlayMeleeHitEffects" );

	UKFMeleeHelperAI_execPlayMeleeHitEffects_Parms PlayMeleeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayMeleeHitEffects, &PlayMeleeHitEffects_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.DoPlayerWorldTrace
// [0x00824002] 
// Parameters infos:

void UKFMeleeHelperAI::DoPlayerWorldTrace ( )
{
	static UFunction* pFnDoPlayerWorldTrace = NULL;

	if ( ! pFnDoPlayerWorldTrace )
		pFnDoPlayerWorldTrace = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.DoPlayerWorldTrace" );

	UKFMeleeHelperAI_execDoPlayerWorldTrace_Parms DoPlayerWorldTrace_Parms;

	this->ProcessEvent ( pFnDoPlayerWorldTrace, &DoPlayerWorldTrace_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.DoPlayerControlledImpact
// [0x00024002] 
// Parameters infos:

void UKFMeleeHelperAI::DoPlayerControlledImpact ( )
{
	static UFunction* pFnDoPlayerControlledImpact = NULL;

	if ( ! pFnDoPlayerControlledImpact )
		pFnDoPlayerControlledImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.DoPlayerControlledImpact" );

	UKFMeleeHelperAI_execDoPlayerControlledImpact_Parms DoPlayerControlledImpact_Parms;

	this->ProcessEvent ( pFnDoPlayerControlledImpact, &DoPlayerControlledImpact_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.DoAreaImpact
// [0x00024002] 
// Parameters infos:

void UKFMeleeHelperAI::DoAreaImpact ( )
{
	static UFunction* pFnDoAreaImpact = NULL;

	if ( ! pFnDoAreaImpact )
		pFnDoAreaImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.DoAreaImpact" );

	UKFMeleeHelperAI_execDoAreaImpact_Parms DoAreaImpact_Parms;

	this->ProcessEvent ( pFnDoAreaImpact, &DoAreaImpact_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.ShouldDealDamageToEnemy
// [0x00824002] 
// Parameters infos:

void UKFMeleeHelperAI::ShouldDealDamageToEnemy ( )
{
	static UFunction* pFnShouldDealDamageToEnemy = NULL;

	if ( ! pFnShouldDealDamageToEnemy )
		pFnShouldDealDamageToEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.ShouldDealDamageToEnemy" );

	UKFMeleeHelperAI_execShouldDealDamageToEnemy_Parms ShouldDealDamageToEnemy_Parms;

	this->ProcessEvent ( pFnShouldDealDamageToEnemy, &ShouldDealDamageToEnemy_Parms, NULL );
};

// Function KFGame.KFMeleeHelperAI.ApplyMeleeDamage
// [0x00824002] 
// Parameters infos:

void UKFMeleeHelperAI::ApplyMeleeDamage ( )
{
	static UFunction* pFnApplyMeleeDamage = NULL;

	if ( ! pFnApplyMeleeDamage )
		pFnApplyMeleeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperAI.ApplyMeleeDamage" );

	UKFMeleeHelperAI_execApplyMeleeDamage_Parms ApplyMeleeDamage_Parms;

	this->ProcessEvent ( pFnApplyMeleeDamage, &ApplyMeleeDamage_Parms, NULL );
};

// Function KFGame.KFOnlineGameSearch.SortIfChanged
// [0x00020002] 
// Parameters infos:

void UKFOnlineGameSearch::SortIfChanged ( )
{
	static UFunction* pFnSortIfChanged = NULL;

	if ( ! pFnSortIfChanged )
		pFnSortIfChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineGameSearch.SortIfChanged" );

	UKFOnlineGameSearch_execSortIfChanged_Parms SortIfChanged_Parms;

	this->ProcessEvent ( pFnSortIfChanged, &SortIfChanged_Parms, NULL );
};

// Function KFGame.KFOnlineGameSearch.SortResults
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineGameSearch::SortResults ( )
{
	static UFunction* pFnSortResults = NULL;

	if ( ! pFnSortResults )
		pFnSortResults = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineGameSearch.SortResults" );

	UKFOnlineGameSearch_execSortResults_Parms SortResults_Parms;

	pFnSortResults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortResults, &SortResults_Parms, NULL );

	pFnSortResults->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineGameSearch.MakeFakeServerResults
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineGameSearch::MakeFakeServerResults ( )
{
	static UFunction* pFnMakeFakeServerResults = NULL;

	if ( ! pFnMakeFakeServerResults )
		pFnMakeFakeServerResults = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineGameSearch.MakeFakeServerResults" );

	UKFOnlineGameSearch_execMakeFakeServerResults_Parms MakeFakeServerResults_Parms;

	pFnMakeFakeServerResults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeFakeServerResults, &MakeFakeServerResults_Parms, NULL );

	pFnMakeFakeServerResults->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsRead.OnReadComplete
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFOnlineStatsRead::eventOnReadComplete ( )
{
	static UFunction* pFnOnReadComplete = NULL;

	if ( ! pFnOnReadComplete )
		pFnOnReadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsRead.OnReadComplete" );

	UKFOnlineStatsRead_eventOnReadComplete_Parms OnReadComplete_Parms;

	this->ProcessEvent ( pFnOnReadComplete, &OnReadComplete_Parms, NULL );
};

// Function KFGame.KFOnlineStatsRead.OnInventoryReadComplete_Playfab
// [0x00020002] 
// Parameters infos:

void UKFOnlineStatsRead::OnInventoryReadComplete_Playfab ( )
{
	static UFunction* pFnOnInventoryReadComplete_Playfab = NULL;

	if ( ! pFnOnInventoryReadComplete_Playfab )
		pFnOnInventoryReadComplete_Playfab = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsRead.OnInventoryReadComplete_Playfab" );

	UKFOnlineStatsRead_execOnInventoryReadComplete_Playfab_Parms OnInventoryReadComplete_Playfab_Parms;

	this->ProcessEvent ( pFnOnInventoryReadComplete_Playfab, &OnInventoryReadComplete_Playfab_Parms, NULL );
};

// Function KFGame.KFOnlineStatsRead.OnInventoryReadComplete_Steamworks
// [0x00020002] 
// Parameters infos:

void UKFOnlineStatsRead::OnInventoryReadComplete_Steamworks ( )
{
	static UFunction* pFnOnInventoryReadComplete_Steamworks = NULL;

	if ( ! pFnOnInventoryReadComplete_Steamworks )
		pFnOnInventoryReadComplete_Steamworks = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsRead.OnInventoryReadComplete_Steamworks" );

	UKFOnlineStatsRead_execOnInventoryReadComplete_Steamworks_Parms OnInventoryReadComplete_Steamworks_Parms;

	this->ProcessEvent ( pFnOnInventoryReadComplete_Steamworks, &OnInventoryReadComplete_Steamworks_Parms, NULL );
};

// Function KFGame.KFOnlineStatsRead.NativeOnReadComplete
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFOnlineStatsRead::NativeOnReadComplete ( )
{
	static UFunction* pFnNativeOnReadComplete = NULL;

	if ( ! pFnNativeOnReadComplete )
		pFnNativeOnReadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsRead.NativeOnReadComplete" );

	UKFOnlineStatsRead_execNativeOnReadComplete_Parms NativeOnReadComplete_Parms;

	pFnNativeOnReadComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativeOnReadComplete, &NativeOnReadComplete_Parms, NULL );

	pFnNativeOnReadComplete->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsRead.OnStatsInitialized
// [0x00020002] 
// Parameters infos:

void UKFOnlineStatsRead::OnStatsInitialized ( )
{
	static UFunction* pFnOnStatsInitialized = NULL;

	if ( ! pFnOnStatsInitialized )
		pFnOnStatsInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsRead.OnStatsInitialized" );

	UKFOnlineStatsRead_execOnStatsInitialized_Parms OnStatsInitialized_Parms;

	this->ProcessEvent ( pFnOnStatsInitialized, &OnStatsInitialized_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.VerifyDoshVaultCrates
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::VerifyDoshVaultCrates ( )
{
	static UFunction* pFnVerifyDoshVaultCrates = NULL;

	if ( ! pFnVerifyDoshVaultCrates )
		pFnVerifyDoshVaultCrates = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.VerifyDoshVaultCrates" );

	UKFOnlineStatsWrite_execVerifyDoshVaultCrates_Parms VerifyDoshVaultCrates_Parms;

	pFnVerifyDoshVaultCrates->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnVerifyDoshVaultCrates, &VerifyDoshVaultCrates_Parms, NULL );

	pFnVerifyDoshVaultCrates->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckHasViewedDoshVault
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckHasViewedDoshVault ( )
{
	static UFunction* pFnCheckHasViewedDoshVault = NULL;

	if ( ! pFnCheckHasViewedDoshVault )
		pFnCheckHasViewedDoshVault = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckHasViewedDoshVault" );

	UKFOnlineStatsWrite_execCheckHasViewedDoshVault_Parms CheckHasViewedDoshVault_Parms;

	pFnCheckHasViewedDoshVault->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckHasViewedDoshVault, &CheckHasViewedDoshVault_Parms, NULL );

	pFnCheckHasViewedDoshVault->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckUnlockDoshVaultReward
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckUnlockDoshVaultReward ( )
{
	static UFunction* pFnCheckUnlockDoshVaultReward = NULL;

	if ( ! pFnCheckUnlockDoshVaultReward )
		pFnCheckUnlockDoshVaultReward = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckUnlockDoshVaultReward" );

	UKFOnlineStatsWrite_execCheckUnlockDoshVaultReward_Parms CheckUnlockDoshVaultReward_Parms;

	pFnCheckUnlockDoshVaultReward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckUnlockDoshVaultReward, &CheckUnlockDoshVaultReward_Parms, NULL );

	pFnCheckUnlockDoshVaultReward->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetPreStigeValueDoshRewardValue
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetPreStigeValueDoshRewardValue ( )
{
	static UFunction* pFnGetPreStigeValueDoshRewardValue = NULL;

	if ( ! pFnGetPreStigeValueDoshRewardValue )
		pFnGetPreStigeValueDoshRewardValue = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPreStigeValueDoshRewardValue" );

	UKFOnlineStatsWrite_execGetPreStigeValueDoshRewardValue_Parms GetPreStigeValueDoshRewardValue_Parms;

	pFnGetPreStigeValueDoshRewardValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPreStigeValueDoshRewardValue, &GetPreStigeValueDoshRewardValue_Parms, NULL );

	pFnGetPreStigeValueDoshRewardValue->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetDoshVaultTierValue
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetDoshVaultTierValue ( )
{
	static UFunction* pFnGetDoshVaultTierValue = NULL;

	if ( ! pFnGetDoshVaultTierValue )
		pFnGetDoshVaultTierValue = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetDoshVaultTierValue" );

	UKFOnlineStatsWrite_execGetDoshVaultTierValue_Parms GetDoshVaultTierValue_Parms;

	pFnGetDoshVaultTierValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDoshVaultTierValue, &GetDoshVaultTierValue_Parms, NULL );

	pFnGetDoshVaultTierValue->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.MarkDoshVaultSeen
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::MarkDoshVaultSeen ( )
{
	static UFunction* pFnMarkDoshVaultSeen = NULL;

	if ( ! pFnMarkDoshVaultSeen )
		pFnMarkDoshVaultSeen = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.MarkDoshVaultSeen" );

	UKFOnlineStatsWrite_execMarkDoshVaultSeen_Parms MarkDoshVaultSeen_Parms;

	pFnMarkDoshVaultSeen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMarkDoshVaultSeen, &MarkDoshVaultSeen_Parms, NULL );

	pFnMarkDoshVaultSeen->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetUnseenDoshCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetUnseenDoshCount ( )
{
	static UFunction* pFnGetUnseenDoshCount = NULL;

	if ( ! pFnGetUnseenDoshCount )
		pFnGetUnseenDoshCount = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetUnseenDoshCount" );

	UKFOnlineStatsWrite_execGetUnseenDoshCount_Parms GetUnseenDoshCount_Parms;

	pFnGetUnseenDoshCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUnseenDoshCount, &GetUnseenDoshCount_Parms, NULL );

	pFnGetUnseenDoshCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetLastSeenDoshCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetLastSeenDoshCount ( )
{
	static UFunction* pFnGetLastSeenDoshCount = NULL;

	if ( ! pFnGetLastSeenDoshCount )
		pFnGetLastSeenDoshCount = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetLastSeenDoshCount" );

	UKFOnlineStatsWrite_execGetLastSeenDoshCount_Parms GetLastSeenDoshCount_Parms;

	pFnGetLastSeenDoshCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLastSeenDoshCount, &GetLastSeenDoshCount_Parms, NULL );

	pFnGetLastSeenDoshCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetTotalDoshCount
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetTotalDoshCount ( )
{
	static UFunction* pFnGetTotalDoshCount = NULL;

	if ( ! pFnGetTotalDoshCount )
		pFnGetTotalDoshCount = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetTotalDoshCount" );

	UKFOnlineStatsWrite_execGetTotalDoshCount_Parms GetTotalDoshCount_Parms;

	pFnGetTotalDoshCount->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTotalDoshCount, &GetTotalDoshCount_Parms, NULL );

	pFnGetTotalDoshCount->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetWeeklyEventReward
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetWeeklyEventReward ( )
{
	static UFunction* pFnGetWeeklyEventReward = NULL;

	if ( ! pFnGetWeeklyEventReward )
		pFnGetWeeklyEventReward = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetWeeklyEventReward" );

	UKFOnlineStatsWrite_execGetWeeklyEventReward_Parms GetWeeklyEventReward_Parms;

	pFnGetWeeklyEventReward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWeeklyEventReward, &GetWeeklyEventReward_Parms, NULL );

	pFnGetWeeklyEventReward->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetDailyEventReward
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetDailyEventReward ( )
{
	static UFunction* pFnGetDailyEventReward = NULL;

	if ( ! pFnGetDailyEventReward )
		pFnGetDailyEventReward = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetDailyEventReward" );

	UKFOnlineStatsWrite_execGetDailyEventReward_Parms GetDailyEventReward_Parms;

	pFnGetDailyEventReward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDailyEventReward, &GetDailyEventReward_Parms, NULL );

	pFnGetDailyEventReward->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetMaxDailyValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetMaxDailyValue ( )
{
	static UFunction* pFnGetMaxDailyValue = NULL;

	if ( ! pFnGetMaxDailyValue )
		pFnGetMaxDailyValue = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetMaxDailyValue" );

	UKFOnlineStatsWrite_execGetMaxDailyValue_Parms GetMaxDailyValue_Parms;

	pFnGetMaxDailyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMaxDailyValue, &GetMaxDailyValue_Parms, NULL );

	pFnGetMaxDailyValue->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetCurrentDailyValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetCurrentDailyValue ( )
{
	static UFunction* pFnGetCurrentDailyValue = NULL;

	if ( ! pFnGetCurrentDailyValue )
		pFnGetCurrentDailyValue = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetCurrentDailyValue" );

	UKFOnlineStatsWrite_execGetCurrentDailyValue_Parms GetCurrentDailyValue_Parms;

	pFnGetCurrentDailyValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentDailyValue, &GetCurrentDailyValue_Parms, NULL );

	pFnGetCurrentDailyValue->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.IsDailyObjectiveComplete
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::IsDailyObjectiveComplete ( )
{
	static UFunction* pFnIsDailyObjectiveComplete = NULL;

	if ( ! pFnIsDailyObjectiveComplete )
		pFnIsDailyObjectiveComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsDailyObjectiveComplete" );

	UKFOnlineStatsWrite_execIsDailyObjectiveComplete_Parms IsDailyObjectiveComplete_Parms;

	pFnIsDailyObjectiveComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDailyObjectiveComplete, &IsDailyObjectiveComplete_Parms, NULL );

	pFnIsDailyObjectiveComplete->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetDailyEventStruct
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetDailyEventStruct ( )
{
	static UFunction* pFnGetDailyEventStruct = NULL;

	if ( ! pFnGetDailyEventStruct )
		pFnGetDailyEventStruct = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetDailyEventStruct" );

	UKFOnlineStatsWrite_execGetDailyEventStruct_Parms GetDailyEventStruct_Parms;

	pFnGetDailyEventStruct->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDailyEventStruct, &GetDailyEventStruct_Parms, NULL );

	pFnGetDailyEventStruct->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.AddTrackedRoundEnd
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::AddTrackedRoundEnd ( )
{
	static UFunction* pFnAddTrackedRoundEnd = NULL;

	if ( ! pFnAddTrackedRoundEnd )
		pFnAddTrackedRoundEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddTrackedRoundEnd" );

	UKFOnlineStatsWrite_execAddTrackedRoundEnd_Parms AddTrackedRoundEnd_Parms;

	pFnAddTrackedRoundEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTrackedRoundEnd, &AddTrackedRoundEnd_Parms, NULL );

	pFnAddTrackedRoundEnd->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.AddTrackedMapCompletion
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::AddTrackedMapCompletion ( )
{
	static UFunction* pFnAddTrackedMapCompletion = NULL;

	if ( ! pFnAddTrackedMapCompletion )
		pFnAddTrackedMapCompletion = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddTrackedMapCompletion" );

	UKFOnlineStatsWrite_execAddTrackedMapCompletion_Parms AddTrackedMapCompletion_Parms;

	pFnAddTrackedMapCompletion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTrackedMapCompletion, &AddTrackedMapCompletion_Parms, NULL );

	pFnAddTrackedMapCompletion->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.AddTrackedXP
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::AddTrackedXP ( )
{
	static UFunction* pFnAddTrackedXP = NULL;

	if ( ! pFnAddTrackedXP )
		pFnAddTrackedXP = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddTrackedXP" );

	UKFOnlineStatsWrite_execAddTrackedXP_Parms AddTrackedXP_Parms;

	pFnAddTrackedXP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTrackedXP, &AddTrackedXP_Parms, NULL );

	pFnAddTrackedXP->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.AddTrackedVsDamage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::AddTrackedVsDamage ( )
{
	static UFunction* pFnAddTrackedVsDamage = NULL;

	if ( ! pFnAddTrackedVsDamage )
		pFnAddTrackedVsDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddTrackedVsDamage" );

	UKFOnlineStatsWrite_execAddTrackedVsDamage_Parms AddTrackedVsDamage_Parms;

	pFnAddTrackedVsDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTrackedVsDamage, &AddTrackedVsDamage_Parms, NULL );

	pFnAddTrackedVsDamage->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.AddTrackedDamage
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::AddTrackedDamage ( )
{
	static UFunction* pFnAddTrackedDamage = NULL;

	if ( ! pFnAddTrackedDamage )
		pFnAddTrackedDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddTrackedDamage" );

	UKFOnlineStatsWrite_execAddTrackedDamage_Parms AddTrackedDamage_Parms;

	pFnAddTrackedDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTrackedDamage, &AddTrackedDamage_Parms, NULL );

	pFnAddTrackedDamage->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CacheDailyEventProgress
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CacheDailyEventProgress ( )
{
	static UFunction* pFnCacheDailyEventProgress = NULL;

	if ( ! pFnCacheDailyEventProgress )
		pFnCacheDailyEventProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CacheDailyEventProgress" );

	UKFOnlineStatsWrite_execCacheDailyEventProgress_Parms CacheDailyEventProgress_Parms;

	pFnCacheDailyEventProgress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheDailyEventProgress, &CacheDailyEventProgress_Parms, NULL );

	pFnCacheDailyEventProgress->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.MapObjectiveCompleted
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::MapObjectiveCompleted ( )
{
	static UFunction* pFnMapObjectiveCompleted = NULL;

	if ( ! pFnMapObjectiveCompleted )
		pFnMapObjectiveCompleted = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.MapObjectiveCompleted" );

	UKFOnlineStatsWrite_execMapObjectiveCompleted_Parms MapObjectiveCompleted_Parms;

	pFnMapObjectiveCompleted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMapObjectiveCompleted, &MapObjectiveCompleted_Parms, NULL );

	pFnMapObjectiveCompleted->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetMapObjectiveVoshReward
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetMapObjectiveVoshReward ( )
{
	static UFunction* pFnGetMapObjectiveVoshReward = NULL;

	if ( ! pFnGetMapObjectiveVoshReward )
		pFnGetMapObjectiveVoshReward = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetMapObjectiveVoshReward" );

	UKFOnlineStatsWrite_execGetMapObjectiveVoshReward_Parms GetMapObjectiveVoshReward_Parms;

	pFnGetMapObjectiveVoshReward->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapObjectiveVoshReward, &GetMapObjectiveVoshReward_Parms, NULL );

	pFnGetMapObjectiveVoshReward->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetWeeklyOutbreakRewards
// [0x00026401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetWeeklyOutbreakRewards ( )
{
	static UFunction* pFnGetWeeklyOutbreakRewards = NULL;

	if ( ! pFnGetWeeklyOutbreakRewards )
		pFnGetWeeklyOutbreakRewards = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetWeeklyOutbreakRewards" );

	UKFOnlineStatsWrite_execGetWeeklyOutbreakRewards_Parms GetWeeklyOutbreakRewards_Parms;

	pFnGetWeeklyOutbreakRewards->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWeeklyOutbreakRewards, &GetWeeklyOutbreakRewards_Parms, NULL );

	pFnGetWeeklyOutbreakRewards->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.IsWeeklyEventComplete
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::IsWeeklyEventComplete ( )
{
	static UFunction* pFnIsWeeklyEventComplete = NULL;

	if ( ! pFnIsWeeklyEventComplete )
		pFnIsWeeklyEventComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsWeeklyEventComplete" );

	UKFOnlineStatsWrite_execIsWeeklyEventComplete_Parms IsWeeklyEventComplete_Parms;

	pFnIsWeeklyEventComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWeeklyEventComplete, &IsWeeklyEventComplete_Parms, NULL );

	pFnIsWeeklyEventComplete->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.WeeklyEventComplete
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::WeeklyEventComplete ( )
{
	static UFunction* pFnWeeklyEventComplete = NULL;

	if ( ! pFnWeeklyEventComplete )
		pFnWeeklyEventComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.WeeklyEventComplete" );

	UKFOnlineStatsWrite_execWeeklyEventComplete_Parms WeeklyEventComplete_Parms;

	pFnWeeklyEventComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWeeklyEventComplete, &WeeklyEventComplete_Parms, NULL );

	pFnWeeklyEventComplete->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.UpdateWeeklyEventState
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::UpdateWeeklyEventState ( )
{
	static UFunction* pFnUpdateWeeklyEventState = NULL;

	if ( ! pFnUpdateWeeklyEventState )
		pFnUpdateWeeklyEventState = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.UpdateWeeklyEventState" );

	UKFOnlineStatsWrite_execUpdateWeeklyEventState_Parms UpdateWeeklyEventState_Parms;

	this->ProcessEvent ( pFnUpdateWeeklyEventState, &UpdateWeeklyEventState_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.CacheWeeklyEventState
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CacheWeeklyEventState ( )
{
	static UFunction* pFnCacheWeeklyEventState = NULL;

	if ( ! pFnCacheWeeklyEventState )
		pFnCacheWeeklyEventState = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CacheWeeklyEventState" );

	UKFOnlineStatsWrite_execCacheWeeklyEventState_Parms CacheWeeklyEventState_Parms;

	pFnCacheWeeklyEventState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheWeeklyEventState, &CacheWeeklyEventState_Parms, NULL );

	pFnCacheWeeklyEventState->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CanCacheWeeklyEvent
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::CanCacheWeeklyEvent ( )
{
	static UFunction* pFnCanCacheWeeklyEvent = NULL;

	if ( ! pFnCanCacheWeeklyEvent )
		pFnCanCacheWeeklyEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CanCacheWeeklyEvent" );

	UKFOnlineStatsWrite_execCanCacheWeeklyEvent_Parms CanCacheWeeklyEvent_Parms;

	this->ProcessEvent ( pFnCanCacheWeeklyEvent, &CanCacheWeeklyEvent_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsEventObjectiveComplete
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::IsEventObjectiveComplete ( )
{
	static UFunction* pFnIsEventObjectiveComplete = NULL;

	if ( ! pFnIsEventObjectiveComplete )
		pFnIsEventObjectiveComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsEventObjectiveComplete" );

	UKFOnlineStatsWrite_execIsEventObjectiveComplete_Parms IsEventObjectiveComplete_Parms;

	pFnIsEventObjectiveComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsEventObjectiveComplete, &IsEventObjectiveComplete_Parms, NULL );

	pFnIsEventObjectiveComplete->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.UpdateSpecialEvent
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::UpdateSpecialEvent ( )
{
	static UFunction* pFnUpdateSpecialEvent = NULL;

	if ( ! pFnUpdateSpecialEvent )
		pFnUpdateSpecialEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.UpdateSpecialEvent" );

	UKFOnlineStatsWrite_execUpdateSpecialEvent_Parms UpdateSpecialEvent_Parms;

	pFnUpdateSpecialEvent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSpecialEvent, &UpdateSpecialEvent_Parms, NULL );

	pFnUpdateSpecialEvent->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.UpdateSpecialEventState
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::UpdateSpecialEventState ( )
{
	static UFunction* pFnUpdateSpecialEventState = NULL;

	if ( ! pFnUpdateSpecialEventState )
		pFnUpdateSpecialEventState = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.UpdateSpecialEventState" );

	UKFOnlineStatsWrite_execUpdateSpecialEventState_Parms UpdateSpecialEventState_Parms;

	this->ProcessEvent ( pFnUpdateSpecialEventState, &UpdateSpecialEventState_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetSpecialEventRewardValue
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetSpecialEventRewardValue ( )
{
	static UFunction* pFnGetSpecialEventRewardValue = NULL;

	if ( ! pFnGetSpecialEventRewardValue )
		pFnGetSpecialEventRewardValue = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetSpecialEventRewardValue" );

	UKFOnlineStatsWrite_execGetSpecialEventRewardValue_Parms GetSpecialEventRewardValue_Parms;

	pFnGetSpecialEventRewardValue->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSpecialEventRewardValue, &GetSpecialEventRewardValue_Parms, NULL );

	pFnGetSpecialEventRewardValue->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CacheSpecialEventState
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CacheSpecialEventState ( )
{
	static UFunction* pFnCacheSpecialEventState = NULL;

	if ( ! pFnCacheSpecialEventState )
		pFnCacheSpecialEventState = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CacheSpecialEventState" );

	UKFOnlineStatsWrite_execCacheSpecialEventState_Parms CacheSpecialEventState_Parms;

	pFnCacheSpecialEventState->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheSpecialEventState, &CacheSpecialEventState_Parms, NULL );

	pFnCacheSpecialEventState->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CanCacheSpecialEvent
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::CanCacheSpecialEvent ( )
{
	static UFunction* pFnCanCacheSpecialEvent = NULL;

	if ( ! pFnCanCacheSpecialEvent )
		pFnCanCacheSpecialEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CanCacheSpecialEvent" );

	UKFOnlineStatsWrite_execCanCacheSpecialEvent_Parms CanCacheSpecialEvent_Parms;

	this->ProcessEvent ( pFnCanCacheSpecialEvent, &CanCacheSpecialEvent_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.CheckPerkPSGRewards
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckPerkPSGRewards ( )
{
	static UFunction* pFnCheckPerkPSGRewards = NULL;

	if ( ! pFnCheckPerkPSGRewards )
		pFnCheckPerkPSGRewards = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckPerkPSGRewards" );

	UKFOnlineStatsWrite_execCheckPerkPSGRewards_Parms CheckPerkPSGRewards_Parms;

	pFnCheckPerkPSGRewards->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckPerkPSGRewards, &CheckPerkPSGRewards_Parms, NULL );

	pFnCheckPerkPSGRewards->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckForRoundTeamWinAchievements
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckForRoundTeamWinAchievements ( )
{
	static UFunction* pFnCheckForRoundTeamWinAchievements = NULL;

	if ( ! pFnCheckForRoundTeamWinAchievements )
		pFnCheckForRoundTeamWinAchievements = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckForRoundTeamWinAchievements" );

	UKFOnlineStatsWrite_execCheckForRoundTeamWinAchievements_Parms CheckForRoundTeamWinAchievements_Parms;

	pFnCheckForRoundTeamWinAchievements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForRoundTeamWinAchievements, &CheckForRoundTeamWinAchievements_Parms, NULL );

	pFnCheckForRoundTeamWinAchievements->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.UnlockTutorialAchievement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::UnlockTutorialAchievement ( )
{
	static UFunction* pFnUnlockTutorialAchievement = NULL;

	if ( ! pFnUnlockTutorialAchievement )
		pFnUnlockTutorialAchievement = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.UnlockTutorialAchievement" );

	UKFOnlineStatsWrite_execUnlockTutorialAchievement_Parms UnlockTutorialAchievement_Parms;

	pFnUnlockTutorialAchievement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnlockTutorialAchievement, &UnlockTutorialAchievement_Parms, NULL );

	pFnUnlockTutorialAchievement->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckAllPerksLvl25
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckAllPerksLvl25 ( )
{
	static UFunction* pFnCheckAllPerksLvl25 = NULL;

	if ( ! pFnCheckAllPerksLvl25 )
		pFnCheckAllPerksLvl25 = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckAllPerksLvl25" );

	UKFOnlineStatsWrite_execCheckAllPerksLvl25_Parms CheckAllPerksLvl25_Parms;

	pFnCheckAllPerksLvl25->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckAllPerksLvl25, &CheckAllPerksLvl25_Parms, NULL );

	pFnCheckAllPerksLvl25->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckPerkDifficultyAchievements
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckPerkDifficultyAchievements ( )
{
	static UFunction* pFnCheckPerkDifficultyAchievements = NULL;

	if ( ! pFnCheckPerkDifficultyAchievements )
		pFnCheckPerkDifficultyAchievements = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckPerkDifficultyAchievements" );

	UKFOnlineStatsWrite_execCheckPerkDifficultyAchievements_Parms CheckPerkDifficultyAchievements_Parms;

	pFnCheckPerkDifficultyAchievements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckPerkDifficultyAchievements, &CheckPerkDifficultyAchievements_Parms, NULL );

	pFnCheckPerkDifficultyAchievements->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckPerkLvlAchievement
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckPerkLvlAchievement ( )
{
	static UFunction* pFnCheckPerkLvlAchievement = NULL;

	if ( ! pFnCheckPerkLvlAchievement )
		pFnCheckPerkLvlAchievement = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckPerkLvlAchievement" );

	UKFOnlineStatsWrite_execCheckPerkLvlAchievement_Parms CheckPerkLvlAchievement_Parms;

	pFnCheckPerkLvlAchievement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckPerkLvlAchievement, &CheckPerkLvlAchievement_Parms, NULL );

	pFnCheckPerkLvlAchievement->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckEndWaveObjective
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckEndWaveObjective ( )
{
	static UFunction* pFnCheckEndWaveObjective = NULL;

	if ( ! pFnCheckEndWaveObjective )
		pFnCheckEndWaveObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckEndWaveObjective" );

	UKFOnlineStatsWrite_execCheckEndWaveObjective_Parms CheckEndWaveObjective_Parms;

	pFnCheckEndWaveObjective->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckEndWaveObjective, &CheckEndWaveObjective_Parms, NULL );

	pFnCheckEndWaveObjective->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckCollectibleAchievement
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckCollectibleAchievement ( )
{
	static UFunction* pFnCheckCollectibleAchievement = NULL;

	if ( ! pFnCheckCollectibleAchievement )
		pFnCheckCollectibleAchievement = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckCollectibleAchievement" );

	UKFOnlineStatsWrite_execCheckCollectibleAchievement_Parms CheckCollectibleAchievement_Parms;

	pFnCheckCollectibleAchievement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckCollectibleAchievement, &CheckCollectibleAchievement_Parms, NULL );

	pFnCheckCollectibleAchievement->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.CheckMapEndAchievements
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::CheckMapEndAchievements ( )
{
	static UFunction* pFnCheckMapEndAchievements = NULL;

	if ( ! pFnCheckMapEndAchievements )
		pFnCheckMapEndAchievements = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CheckMapEndAchievements" );

	UKFOnlineStatsWrite_execCheckMapEndAchievements_Parms CheckMapEndAchievements_Parms;

	pFnCheckMapEndAchievements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckMapEndAchievements, &CheckMapEndAchievements_Parms, NULL );

	pFnCheckMapEndAchievements->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.OnGameEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::OnGameEnd ( )
{
	static UFunction* pFnOnGameEnd = NULL;

	if ( ! pFnOnGameEnd )
		pFnOnGameEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.OnGameEnd" );

	UKFOnlineStatsWrite_execOnGameEnd_Parms OnGameEnd_Parms;

	pFnOnGameEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnGameEnd, &OnGameEnd_Parms, NULL );

	pFnOnGameEnd->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.OnRoundEnd
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::OnRoundEnd ( )
{
	static UFunction* pFnOnRoundEnd = NULL;

	if ( ! pFnOnRoundEnd )
		pFnOnRoundEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.OnRoundEnd" );

	UKFOnlineStatsWrite_execOnRoundEnd_Parms OnRoundEnd_Parms;

	pFnOnRoundEnd->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnRoundEnd, &OnRoundEnd_Parms, NULL );

	pFnOnRoundEnd->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.OnGameWon
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::OnGameWon ( )
{
	static UFunction* pFnOnGameWon = NULL;

	if ( ! pFnOnGameWon )
		pFnOnGameWon = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.OnGameWon" );

	UKFOnlineStatsWrite_execOnGameWon_Parms OnGameWon_Parms;

	pFnOnGameWon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnGameWon, &OnGameWon_Parms, NULL );

	pFnOnGameWon->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.UnlockDingoAchievement
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::UnlockDingoAchievement ( )
{
	static UFunction* pFnUnlockDingoAchievement = NULL;

	if ( ! pFnUnlockDingoAchievement )
		pFnUnlockDingoAchievement = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.UnlockDingoAchievement" );

	UKFOnlineStatsWrite_execUnlockDingoAchievement_Parms UnlockDingoAchievement_Parms;

	pFnUnlockDingoAchievement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnlockDingoAchievement, &UnlockDingoAchievement_Parms, NULL );

	pFnUnlockDingoAchievement->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.OnUnlockAchievement
// [0x00020002] 
// Parameters infos:

void UKFOnlineStatsWrite::OnUnlockAchievement ( )
{
	static UFunction* pFnOnUnlockAchievement = NULL;

	if ( ! pFnOnUnlockAchievement )
		pFnOnUnlockAchievement = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.OnUnlockAchievement" );

	UKFOnlineStatsWrite_execOnUnlockAchievement_Parms OnUnlockAchievement_Parms;

	this->ProcessEvent ( pFnOnUnlockAchievement, &OnUnlockAchievement_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsAchievementUnlocked
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::IsAchievementUnlocked ( )
{
	static UFunction* pFnIsAchievementUnlocked = NULL;

	if ( ! pFnIsAchievementUnlocked )
		pFnIsAchievementUnlocked = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsAchievementUnlocked" );

	UKFOnlineStatsWrite_execIsAchievementUnlocked_Parms IsAchievementUnlocked_Parms;

	this->ProcessEvent ( pFnIsAchievementUnlocked, &IsAchievementUnlocked_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetAchievements
// [0x00020002] 
// Parameters infos:

void UKFOnlineStatsWrite::GetAchievements ( )
{
	static UFunction* pFnGetAchievements = NULL;

	if ( ! pFnGetAchievements )
		pFnGetAchievements = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetAchievements" );

	UKFOnlineStatsWrite_execGetAchievements_Parms GetAchievements_Parms;

	this->ProcessEvent ( pFnGetAchievements, &GetAchievements_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetSpecialEventKills
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::GetSpecialEventKills ( )
{
	static UFunction* pFnGetSpecialEventKills = NULL;

	if ( ! pFnGetSpecialEventKills )
		pFnGetSpecialEventKills = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetSpecialEventKills" );

	UKFOnlineStatsWrite_execGetSpecialEventKills_Parms GetSpecialEventKills_Parms;

	this->ProcessEvent ( pFnGetSpecialEventKills, &GetSpecialEventKills_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsSharpshooterHeadshot
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::IsSharpshooterHeadshot ( )
{
	static UFunction* pFnIsSharpshooterHeadshot = NULL;

	if ( ! pFnIsSharpshooterHeadshot )
		pFnIsSharpshooterHeadshot = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsSharpshooterHeadshot" );

	UKFOnlineStatsWrite_execIsSharpshooterHeadshot_Parms IsSharpshooterHeadshot_Parms;

	this->ProcessEvent ( pFnIsSharpshooterHeadshot, &IsSharpshooterHeadshot_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsGunslingerHeadshot
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::IsGunslingerHeadshot ( )
{
	static UFunction* pFnIsGunslingerHeadshot = NULL;

	if ( ! pFnIsGunslingerHeadshot )
		pFnIsGunslingerHeadshot = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsGunslingerHeadshot" );

	UKFOnlineStatsWrite_execIsGunslingerHeadshot_Parms IsGunslingerHeadshot_Parms;

	this->ProcessEvent ( pFnIsGunslingerHeadshot, &IsGunslingerHeadshot_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddSharpshooterHeadshot
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::AddSharpshooterHeadshot ( )
{
	static UFunction* pFnAddSharpshooterHeadshot = NULL;

	if ( ! pFnAddSharpshooterHeadshot )
		pFnAddSharpshooterHeadshot = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddSharpshooterHeadshot" );

	UKFOnlineStatsWrite_execAddSharpshooterHeadshot_Parms AddSharpshooterHeadshot_Parms;

	this->ProcessEvent ( pFnAddSharpshooterHeadshot, &AddSharpshooterHeadshot_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddGunslingerHeadshot
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::AddGunslingerHeadshot ( )
{
	static UFunction* pFnAddGunslingerHeadshot = NULL;

	if ( ! pFnAddGunslingerHeadshot )
		pFnAddGunslingerHeadshot = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddGunslingerHeadshot" );

	UKFOnlineStatsWrite_execAddGunslingerHeadshot_Parms AddGunslingerHeadshot_Parms;

	this->ProcessEvent ( pFnAddGunslingerHeadshot, &AddGunslingerHeadshot_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddToHeadshots
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventAddToHeadshots ( )
{
	static UFunction* pFnAddToHeadshots = NULL;

	if ( ! pFnAddToHeadshots )
		pFnAddToHeadshots = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddToHeadshots" );

	UKFOnlineStatsWrite_eventAddToHeadshots_Parms AddToHeadshots_Parms;

	this->ProcessEvent ( pFnAddToHeadshots, &AddToHeadshots_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddHealingPoints
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventAddHealingPoints ( )
{
	static UFunction* pFnAddHealingPoints = NULL;

	if ( ! pFnAddHealingPoints )
		pFnAddHealingPoints = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddHealingPoints" );

	UKFOnlineStatsWrite_eventAddHealingPoints_Parms AddHealingPoints_Parms;

	this->ProcessEvent ( pFnAddHealingPoints, &AddHealingPoints_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.ComputeHealingXP
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::ComputeHealingXP ( )
{
	static UFunction* pFnComputeHealingXP = NULL;

	if ( ! pFnComputeHealingXP )
		pFnComputeHealingXP = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.ComputeHealingXP" );

	UKFOnlineStatsWrite_execComputeHealingXP_Parms ComputeHealingXP_Parms;

	this->ProcessEvent ( pFnComputeHealingXP, &ComputeHealingXP_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.DoorRepaired
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventDoorRepaired ( )
{
	static UFunction* pFnDoorRepaired = NULL;

	if ( ! pFnDoorRepaired )
		pFnDoorRepaired = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.DoorRepaired" );

	UKFOnlineStatsWrite_eventDoorRepaired_Parms DoorRepaired_Parms;

	this->ProcessEvent ( pFnDoorRepaired, &DoorRepaired_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddWeldingPoints
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventAddWeldingPoints ( )
{
	static UFunction* pFnAddWeldingPoints = NULL;

	if ( ! pFnAddWeldingPoints )
		pFnAddWeldingPoints = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddWeldingPoints" );

	UKFOnlineStatsWrite_eventAddWeldingPoints_Parms AddWeldingPoints_Parms;

	this->ProcessEvent ( pFnAddWeldingPoints, &AddWeldingPoints_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.ComputeWeldingXP
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::ComputeWeldingXP ( )
{
	static UFunction* pFnComputeWeldingXP = NULL;

	if ( ! pFnComputeWeldingXP )
		pFnComputeWeldingXP = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.ComputeWeldingXP" );

	UKFOnlineStatsWrite_execComputeWeldingXP_Parms ComputeWeldingXP_Parms;

	this->ProcessEvent ( pFnComputeWeldingXP, &ComputeWeldingXP_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsBloatKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::IsBloatKill ( )
{
	static UFunction* pFnIsBloatKill = NULL;

	if ( ! pFnIsBloatKill )
		pFnIsBloatKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsBloatKill" );

	UKFOnlineStatsWrite_execIsBloatKill_Parms IsBloatKill_Parms;

	this->ProcessEvent ( pFnIsBloatKill, &IsBloatKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsClotKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::IsClotKill ( )
{
	static UFunction* pFnIsClotKill = NULL;

	if ( ! pFnIsClotKill )
		pFnIsClotKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsClotKill" );

	UKFOnlineStatsWrite_execIsClotKill_Parms IsClotKill_Parms;

	this->ProcessEvent ( pFnIsClotKill, &IsClotKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsFleshPoundKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::IsFleshPoundKill ( )
{
	static UFunction* pFnIsFleshPoundKill = NULL;

	if ( ! pFnIsFleshPoundKill )
		pFnIsFleshPoundKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsFleshPoundKill" );

	UKFOnlineStatsWrite_execIsFleshPoundKill_Parms IsFleshPoundKill_Parms;

	this->ProcessEvent ( pFnIsFleshPoundKill, &IsFleshPoundKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsStalkerKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::IsStalkerKill ( )
{
	static UFunction* pFnIsStalkerKill = NULL;

	if ( ! pFnIsStalkerKill )
		pFnIsStalkerKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsStalkerKill" );

	UKFOnlineStatsWrite_execIsStalkerKill_Parms IsStalkerKill_Parms;

	this->ProcessEvent ( pFnIsStalkerKill, &IsStalkerKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.IsCrawlerKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::IsCrawlerKill ( )
{
	static UFunction* pFnIsCrawlerKill = NULL;

	if ( ! pFnIsCrawlerKill )
		pFnIsCrawlerKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IsCrawlerKill" );

	UKFOnlineStatsWrite_execIsCrawlerKill_Parms IsCrawlerKill_Parms;

	this->ProcessEvent ( pFnIsCrawlerKill, &IsCrawlerKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddBloatKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::AddBloatKill ( )
{
	static UFunction* pFnAddBloatKill = NULL;

	if ( ! pFnAddBloatKill )
		pFnAddBloatKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddBloatKill" );

	UKFOnlineStatsWrite_execAddBloatKill_Parms AddBloatKill_Parms;

	this->ProcessEvent ( pFnAddBloatKill, &AddBloatKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddClotKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::AddClotKill ( )
{
	static UFunction* pFnAddClotKill = NULL;

	if ( ! pFnAddClotKill )
		pFnAddClotKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddClotKill" );

	UKFOnlineStatsWrite_execAddClotKill_Parms AddClotKill_Parms;

	this->ProcessEvent ( pFnAddClotKill, &AddClotKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddFleshpoundKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::AddFleshpoundKill ( )
{
	static UFunction* pFnAddFleshpoundKill = NULL;

	if ( ! pFnAddFleshpoundKill )
		pFnAddFleshpoundKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddFleshpoundKill" );

	UKFOnlineStatsWrite_execAddFleshpoundKill_Parms AddFleshpoundKill_Parms;

	this->ProcessEvent ( pFnAddFleshpoundKill, &AddFleshpoundKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddCrawlerKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::AddCrawlerKill ( )
{
	static UFunction* pFnAddCrawlerKill = NULL;

	if ( ! pFnAddCrawlerKill )
		pFnAddCrawlerKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddCrawlerKill" );

	UKFOnlineStatsWrite_execAddCrawlerKill_Parms AddCrawlerKill_Parms;

	this->ProcessEvent ( pFnAddCrawlerKill, &AddCrawlerKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddSmallRadiusKill
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventAddSmallRadiusKill ( )
{
	static UFunction* pFnAddSmallRadiusKill = NULL;

	if ( ! pFnAddSmallRadiusKill )
		pFnAddSmallRadiusKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddSmallRadiusKill" );

	UKFOnlineStatsWrite_eventAddSmallRadiusKill_Parms AddSmallRadiusKill_Parms;

	this->ProcessEvent ( pFnAddSmallRadiusKill, &AddSmallRadiusKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddStalkerKill
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFOnlineStatsWrite::AddStalkerKill ( )
{
	static UFunction* pFnAddStalkerKill = NULL;

	if ( ! pFnAddStalkerKill )
		pFnAddStalkerKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddStalkerKill" );

	UKFOnlineStatsWrite_execAddStalkerKill_Parms AddStalkerKill_Parms;

	this->ProcessEvent ( pFnAddStalkerKill, &AddStalkerKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddToVersusKillObjectives
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::AddToVersusKillObjectives ( )
{
	static UFunction* pFnAddToVersusKillObjectives = NULL;

	if ( ! pFnAddToVersusKillObjectives )
		pFnAddToVersusKillObjectives = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddToVersusKillObjectives" );

	UKFOnlineStatsWrite_execAddToVersusKillObjectives_Parms AddToVersusKillObjectives_Parms;

	pFnAddToVersusKillObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToVersusKillObjectives, &AddToVersusKillObjectives_Parms, NULL );

	pFnAddToVersusKillObjectives->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.AddToKillObjectives
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::AddToKillObjectives ( )
{
	static UFunction* pFnAddToKillObjectives = NULL;

	if ( ! pFnAddToKillObjectives )
		pFnAddToKillObjectives = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddToKillObjectives" );

	UKFOnlineStatsWrite_execAddToKillObjectives_Parms AddToKillObjectives_Parms;

	pFnAddToKillObjectives->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddToKillObjectives, &AddToKillObjectives_Parms, NULL );

	pFnAddToKillObjectives->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.AddNonZedKill
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventAddNonZedKill ( )
{
	static UFunction* pFnAddNonZedKill = NULL;

	if ( ! pFnAddNonZedKill )
		pFnAddNonZedKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddNonZedKill" );

	UKFOnlineStatsWrite_eventAddNonZedKill_Parms AddNonZedKill_Parms;

	this->ProcessEvent ( pFnAddNonZedKill, &AddNonZedKill_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddToKills
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventAddToKills ( )
{
	static UFunction* pFnAddToKills = NULL;

	if ( ! pFnAddToKills )
		pFnAddToKills = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddToKills" );

	UKFOnlineStatsWrite_eventAddToKills_Parms AddToKills_Parms;

	this->ProcessEvent ( pFnAddToKills, &AddToKills_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.SavePersonalBest
// [0x00020002] 
// Parameters infos:

void UKFOnlineStatsWrite::SavePersonalBest ( )
{
	static UFunction* pFnSavePersonalBest = NULL;

	if ( ! pFnSavePersonalBest )
		pFnSavePersonalBest = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.SavePersonalBest" );

	UKFOnlineStatsWrite_execSavePersonalBest_Parms SavePersonalBest_Parms;

	this->ProcessEvent ( pFnSavePersonalBest, &SavePersonalBest_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetPersonalBest
// [0x00020002] 
// Parameters infos:

void UKFOnlineStatsWrite::GetPersonalBest ( )
{
	static UFunction* pFnGetPersonalBest = NULL;

	if ( ! pFnGetPersonalBest )
		pFnGetPersonalBest = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPersonalBest" );

	UKFOnlineStatsWrite_execGetPersonalBest_Parms GetPersonalBest_Parms;

	this->ProcessEvent ( pFnGetPersonalBest, &GetPersonalBest_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetPerkPrestigeLVLByClass
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventGetPerkPrestigeLVLByClass ( )
{
	static UFunction* pFnGetPerkPrestigeLVLByClass = NULL;

	if ( ! pFnGetPerkPrestigeLVLByClass )
		pFnGetPerkPrestigeLVLByClass = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkPrestigeLVLByClass" );

	UKFOnlineStatsWrite_eventGetPerkPrestigeLVLByClass_Parms GetPerkPrestigeLVLByClass_Parms;

	this->ProcessEvent ( pFnGetPerkPrestigeLVLByClass, &GetPerkPrestigeLVLByClass_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetPerkLVLByClass
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventGetPerkLVLByClass ( )
{
	static UFunction* pFnGetPerkLVLByClass = NULL;

	if ( ! pFnGetPerkLVLByClass )
		pFnGetPerkLVLByClass = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkLVLByClass" );

	UKFOnlineStatsWrite_eventGetPerkLVLByClass_Parms GetPerkLVLByClass_Parms;

	this->ProcessEvent ( pFnGetPerkLVLByClass, &GetPerkLVLByClass_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetPerkPSG
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventGetPerkPSG ( )
{
	static UFunction* pFnGetPerkPSG = NULL;

	if ( ! pFnGetPerkPSG )
		pFnGetPerkPSG = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkPSG" );

	UKFOnlineStatsWrite_eventGetPerkPSG_Parms GetPerkPSG_Parms;

	this->ProcessEvent ( pFnGetPerkPSG, &GetPerkPSG_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetPerkLVLInternal
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventGetPerkLVLInternal ( )
{
	static UFunction* pFnGetPerkLVLInternal = NULL;

	if ( ! pFnGetPerkLVLInternal )
		pFnGetPerkLVLInternal = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkLVLInternal" );

	UKFOnlineStatsWrite_eventGetPerkLVLInternal_Parms GetPerkLVLInternal_Parms;

	this->ProcessEvent ( pFnGetPerkLVLInternal, &GetPerkLVLInternal_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetPerkXP
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventGetPerkXP ( )
{
	static UFunction* pFnGetPerkXP = NULL;

	if ( ! pFnGetPerkXP )
		pFnGetPerkXP = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkXP" );

	UKFOnlineStatsWrite_eventGetPerkXP_Parms GetPerkXP_Parms;

	this->ProcessEvent ( pFnGetPerkXP, &GetPerkXP_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.NotifyLevelUp
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventNotifyLevelUp ( )
{
	static UFunction* pFnNotifyLevelUp = NULL;

	if ( ! pFnNotifyLevelUp )
		pFnNotifyLevelUp = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.NotifyLevelUp" );

	UKFOnlineStatsWrite_eventNotifyLevelUp_Parms NotifyLevelUp_Parms;

	this->ProcessEvent ( pFnNotifyLevelUp, &NotifyLevelUp_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.AddXP
// [0x00044803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventAddXP ( )
{
	static UFunction* pFnAddXP = NULL;

	if ( ! pFnAddXP )
		pFnAddXP = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.AddXP" );

	UKFOnlineStatsWrite_eventAddXP_Parms AddXP_Parms;

	this->ProcessEvent ( pFnAddXP, &AddXP_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetPSGFromProgress
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetPSGFromProgress ( )
{
	static UFunction* pFnGetPSGFromProgress = NULL;

	if ( ! pFnGetPSGFromProgress )
		pFnGetPSGFromProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPSGFromProgress" );

	UKFOnlineStatsWrite_execGetPSGFromProgress_Parms GetPSGFromProgress_Parms;

	pFnGetPSGFromProgress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPSGFromProgress, &GetPSGFromProgress_Parms, NULL );

	pFnGetPSGFromProgress->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetLVLFromProgress
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetLVLFromProgress ( )
{
	static UFunction* pFnGetLVLFromProgress = NULL;

	if ( ! pFnGetLVLFromProgress )
		pFnGetLVLFromProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetLVLFromProgress" );

	UKFOnlineStatsWrite_execGetLVLFromProgress_Parms GetLVLFromProgress_Parms;

	pFnGetLVLFromProgress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLVLFromProgress, &GetLVLFromProgress_Parms, NULL );

	pFnGetLVLFromProgress->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetXPFromProgress
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetXPFromProgress ( )
{
	static UFunction* pFnGetXPFromProgress = NULL;

	if ( ! pFnGetXPFromProgress )
		pFnGetXPFromProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetXPFromProgress" );

	UKFOnlineStatsWrite_execGetXPFromProgress_Parms GetXPFromProgress_Parms;

	pFnGetXPFromProgress->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetXPFromProgress, &GetXPFromProgress_Parms, NULL );

	pFnGetXPFromProgress->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.IncrementPSGStat
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::IncrementPSGStat ( )
{
	static UFunction* pFnIncrementPSGStat = NULL;

	if ( ! pFnIncrementPSGStat )
		pFnIncrementPSGStat = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IncrementPSGStat" );

	UKFOnlineStatsWrite_execIncrementPSGStat_Parms IncrementPSGStat_Parms;

	pFnIncrementPSGStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementPSGStat, &IncrementPSGStat_Parms, NULL );

	pFnIncrementPSGStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.IncrementXPStat
// [0x00044401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::IncrementXPStat ( )
{
	static UFunction* pFnIncrementXPStat = NULL;

	if ( ! pFnIncrementXPStat )
		pFnIncrementXPStat = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IncrementXPStat" );

	UKFOnlineStatsWrite_execIncrementXPStat_Parms IncrementXPStat_Parms;

	pFnIncrementXPStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementXPStat, &IncrementXPStat_Parms, NULL );

	pFnIncrementXPStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetXPNeededAt
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetXPNeededAt ( )
{
	static UFunction* pFnGetXPNeededAt = NULL;

	if ( ! pFnGetXPNeededAt )
		pFnGetXPNeededAt = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetXPNeededAt" );

	UKFOnlineStatsWrite_execGetXPNeededAt_Parms GetXPNeededAt_Parms;

	pFnGetXPNeededAt->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetXPNeededAt, &GetXPNeededAt_Parms, NULL );

	pFnGetXPNeededAt->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetPerkBuild
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetPerkBuild ( )
{
	static UFunction* pFnGetPerkBuild = NULL;

	if ( ! pFnGetPerkBuild )
		pFnGetPerkBuild = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkBuild" );

	UKFOnlineStatsWrite_execGetPerkBuild_Parms GetPerkBuild_Parms;

	pFnGetPerkBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerkBuild, &GetPerkBuild_Parms, NULL );

	pFnGetPerkBuild->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetPerkLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetPerkLevel ( )
{
	static UFunction* pFnGetPerkLevel = NULL;

	if ( ! pFnGetPerkLevel )
		pFnGetPerkLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkLevel" );

	UKFOnlineStatsWrite_execGetPerkLevel_Parms GetPerkLevel_Parms;

	pFnGetPerkLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerkLevel, &GetPerkLevel_Parms, NULL );

	pFnGetPerkLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.GetPerkPrestigeLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::GetPerkPrestigeLevel ( )
{
	static UFunction* pFnGetPerkPrestigeLevel = NULL;

	if ( ! pFnGetPerkPrestigeLevel )
		pFnGetPerkPrestigeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkPrestigeLevel" );

	UKFOnlineStatsWrite_execGetPerkPrestigeLevel_Parms GetPerkPrestigeLevel_Parms;

	pFnGetPerkPrestigeLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerkPrestigeLevel, &GetPerkPrestigeLevel_Parms, NULL );

	pFnGetPerkPrestigeLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.SaveBuildToStats
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventSaveBuildToStats ( )
{
	static UFunction* pFnSaveBuildToStats = NULL;

	if ( ! pFnSaveBuildToStats )
		pFnSaveBuildToStats = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.SaveBuildToStats" );

	UKFOnlineStatsWrite_eventSaveBuildToStats_Parms SaveBuildToStats_Parms;

	this->ProcessEvent ( pFnSaveBuildToStats, &SaveBuildToStats_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.GetPerkBuildFromStats
// [0x00440803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventGetPerkBuildFromStats ( )
{
	static UFunction* pFnGetPerkBuildFromStats = NULL;

	if ( ! pFnGetPerkBuildFromStats )
		pFnGetPerkBuildFromStats = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.GetPerkBuildFromStats" );

	UKFOnlineStatsWrite_eventGetPerkBuildFromStats_Parms GetPerkBuildFromStats_Parms;

	this->ProcessEvent ( pFnGetPerkBuildFromStats, &GetPerkBuildFromStats_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.CacheStatsValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventCacheStatsValue ( )
{
	static UFunction* pFnCacheStatsValue = NULL;

	if ( ! pFnCacheStatsValue )
		pFnCacheStatsValue = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CacheStatsValue" );

	UKFOnlineStatsWrite_eventCacheStatsValue_Parms CacheStatsValue_Parms;

	this->ProcessEvent ( pFnCacheStatsValue, &CacheStatsValue_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.CacheFloatStatsValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFOnlineStatsWrite::eventCacheFloatStatsValue ( )
{
	static UFunction* pFnCacheFloatStatsValue = NULL;

	if ( ! pFnCacheFloatStatsValue )
		pFnCacheFloatStatsValue = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.CacheFloatStatsValue" );

	UKFOnlineStatsWrite_eventCacheFloatStatsValue_Parms CacheFloatStatsValue_Parms;

	this->ProcessEvent ( pFnCacheFloatStatsValue, &CacheFloatStatsValue_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.LogStatValue
// [0x00020102] 
// Parameters infos:

void UKFOnlineStatsWrite::LogStatValue ( )
{
	static UFunction* pFnLogStatValue = NULL;

	if ( ! pFnLogStatValue )
		pFnLogStatValue = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.LogStatValue" );

	UKFOnlineStatsWrite_execLogStatValue_Parms LogStatValue_Parms;

	this->ProcessEvent ( pFnLogStatValue, &LogStatValue_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.LogStats
// [0x00020102] 
// Parameters infos:

void UKFOnlineStatsWrite::LogStats ( )
{
	static UFunction* pFnLogStats = NULL;

	if ( ! pFnLogStats )
		pFnLogStats = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.LogStats" );

	UKFOnlineStatsWrite_execLogStats_Parms LogStats_Parms;

	this->ProcessEvent ( pFnLogStats, &LogStats_Parms, NULL );
};

// Function KFGame.KFOnlineStatsWrite.LogSubsystemIntStat
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::LogSubsystemIntStat ( )
{
	static UFunction* pFnLogSubsystemIntStat = NULL;

	if ( ! pFnLogSubsystemIntStat )
		pFnLogSubsystemIntStat = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.LogSubsystemIntStat" );

	UKFOnlineStatsWrite_execLogSubsystemIntStat_Parms LogSubsystemIntStat_Parms;

	pFnLogSubsystemIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogSubsystemIntStat, &LogSubsystemIntStat_Parms, NULL );

	pFnLogSubsystemIntStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.NotifyReadSucceeded
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::NotifyReadSucceeded ( )
{
	static UFunction* pFnNotifyReadSucceeded = NULL;

	if ( ! pFnNotifyReadSucceeded )
		pFnNotifyReadSucceeded = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.NotifyReadSucceeded" );

	UKFOnlineStatsWrite_execNotifyReadSucceeded_Parms NotifyReadSucceeded_Parms;

	pFnNotifyReadSucceeded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyReadSucceeded, &NotifyReadSucceeded_Parms, NULL );

	pFnNotifyReadSucceeded->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.HasReadStats
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::HasReadStats ( )
{
	static UFunction* pFnHasReadStats = NULL;

	if ( ! pFnHasReadStats )
		pFnHasReadStats = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.HasReadStats" );

	UKFOnlineStatsWrite_execHasReadStats_Parms HasReadStats_Parms;

	pFnHasReadStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasReadStats, &HasReadStats_Parms, NULL );

	pFnHasReadStats->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.NotifyReadFailure
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::NotifyReadFailure ( )
{
	static UFunction* pFnNotifyReadFailure = NULL;

	if ( ! pFnNotifyReadFailure )
		pFnNotifyReadFailure = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.NotifyReadFailure" );

	UKFOnlineStatsWrite_execNotifyReadFailure_Parms NotifyReadFailure_Parms;

	pFnNotifyReadFailure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyReadFailure, &NotifyReadFailure_Parms, NULL );

	pFnNotifyReadFailure->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.HasReadFailure
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::HasReadFailure ( )
{
	static UFunction* pFnHasReadFailure = NULL;

	if ( ! pFnHasReadFailure )
		pFnHasReadFailure = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.HasReadFailure" );

	UKFOnlineStatsWrite_execHasReadFailure_Parms HasReadFailure_Parms;

	pFnHasReadFailure->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasReadFailure, &HasReadFailure_Parms, NULL );

	pFnHasReadFailure->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.NotifyCheats
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::NotifyCheats ( )
{
	static UFunction* pFnNotifyCheats = NULL;

	if ( ! pFnNotifyCheats )
		pFnNotifyCheats = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.NotifyCheats" );

	UKFOnlineStatsWrite_execNotifyCheats_Parms NotifyCheats_Parms;

	pFnNotifyCheats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyCheats, &NotifyCheats_Parms, NULL );

	pFnNotifyCheats->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.HasCheated
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::HasCheated ( )
{
	static UFunction* pFnHasCheated = NULL;

	if ( ! pFnHasCheated )
		pFnHasCheated = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.HasCheated" );

	UKFOnlineStatsWrite_execHasCheated_Parms HasCheated_Parms;

	pFnHasCheated->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasCheated, &HasCheated_Parms, NULL );

	pFnHasCheated->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.SetFloatStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::SetFloatStat ( )
{
	static UFunction* pFnSetFloatStat = NULL;

	if ( ! pFnSetFloatStat )
		pFnSetFloatStat = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.SetFloatStat" );

	UKFOnlineStatsWrite_execSetFloatStat_Parms SetFloatStat_Parms;

	pFnSetFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFloatStat, &SetFloatStat_Parms, NULL );

	pFnSetFloatStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.SetIntStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::SetIntStat ( )
{
	static UFunction* pFnSetIntStat = NULL;

	if ( ! pFnSetIntStat )
		pFnSetIntStat = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.SetIntStat" );

	UKFOnlineStatsWrite_execSetIntStat_Parms SetIntStat_Parms;

	pFnSetIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetIntStat, &SetIntStat_Parms, NULL );

	pFnSetIntStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.IncrementFloatStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::IncrementFloatStat ( )
{
	static UFunction* pFnIncrementFloatStat = NULL;

	if ( ! pFnIncrementFloatStat )
		pFnIncrementFloatStat = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IncrementFloatStat" );

	UKFOnlineStatsWrite_execIncrementFloatStat_Parms IncrementFloatStat_Parms;

	pFnIncrementFloatStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementFloatStat, &IncrementFloatStat_Parms, NULL );

	pFnIncrementFloatStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.IncrementIntStat
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::IncrementIntStat ( )
{
	static UFunction* pFnIncrementIntStat = NULL;

	if ( ! pFnIncrementIntStat )
		pFnIncrementIntStat = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.IncrementIntStat" );

	UKFOnlineStatsWrite_execIncrementIntStat_Parms IncrementIntStat_Parms;

	pFnIncrementIntStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIncrementIntStat, &IncrementIntStat_Parms, NULL );

	pFnIncrementIntStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFOnlineStatsWrite.OnStatsInitialized
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFOnlineStatsWrite::OnStatsInitialized ( )
{
	static UFunction* pFnOnStatsInitialized = NULL;

	if ( ! pFnOnStatsInitialized )
		pFnOnStatsInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFOnlineStatsWrite.OnStatsInitialized" );

	UKFOnlineStatsWrite_execOnStatsInitialized_Parms OnStatsInitialized_Parms;

	pFnOnStatsInitialized->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnStatsInitialized, &OnStatsInitialized_Parms, NULL );

	pFnOnStatsInitialized->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.PlayerDied
// [0x00020100] 
// Parameters infos:

void AKFPerk::PlayerDied ( )
{
	static UFunction* pFnPlayerDied = NULL;

	if ( ! pFnPlayerDied )
		pFnPlayerDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PlayerDied" );

	AKFPerk_execPlayerDied_Parms PlayerDied_Parms;

	this->ProcessEvent ( pFnPlayerDied, &PlayerDied_Parms, NULL );
};

// Function KFGame.KFPerk.FormatPerkSkills
// [0x00020100] 
// Parameters infos:

void AKFPerk::FormatPerkSkills ( )
{
	static UFunction* pFnFormatPerkSkills = NULL;

	if ( ! pFnFormatPerkSkills )
		pFnFormatPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.FormatPerkSkills" );

	AKFPerk_execFormatPerkSkills_Parms FormatPerkSkills_Parms;

	this->ProcessEvent ( pFnFormatPerkSkills, &FormatPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk.LogPerkSkills
// [0x00020102] 
// Parameters infos:

void AKFPerk::LogPerkSkills ( )
{
	static UFunction* pFnLogPerkSkills = NULL;

	if ( ! pFnLogPerkSkills )
		pFnLogPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.LogPerkSkills" );

	AKFPerk_execLogPerkSkills_Parms LogPerkSkills_Parms;

	this->ProcessEvent ( pFnLogPerkSkills, &LogPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk.ClientLogPerks
// [0x01020142] 
// Parameters infos:

void AKFPerk::ClientLogPerks ( )
{
	static UFunction* pFnClientLogPerks = NULL;

	if ( ! pFnClientLogPerks )
		pFnClientLogPerks = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ClientLogPerks" );

	AKFPerk_execClientLogPerks_Parms ClientLogPerks_Parms;

	this->ProcessEvent ( pFnClientLogPerks, &ClientLogPerks_Parms, NULL );
};

// Function KFGame.KFPerk.ServerLogPerks
// [0x00220042] 
// Parameters infos:

void AKFPerk::ServerLogPerks ( )
{
	static UFunction* pFnServerLogPerks = NULL;

	if ( ! pFnServerLogPerks )
		pFnServerLogPerks = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ServerLogPerks" );

	AKFPerk_execServerLogPerks_Parms ServerLogPerks_Parms;

	this->ProcessEvent ( pFnServerLogPerks, &ServerLogPerks_Parms, NULL );
};

// Function KFGame.KFPerk.GetPercentage
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetPercentage ( )
{
	static UFunction* pFnGetPercentage = NULL;

	if ( ! pFnGetPercentage )
		pFnGetPercentage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPercentage" );

	AKFPerk_execGetPercentage_Parms GetPercentage_Parms;

	this->ProcessEvent ( pFnGetPercentage, &GetPercentage_Parms, NULL );
};

// Function KFGame.KFPerk.GetGrenadeWeaponDef
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetGrenadeWeaponDef ( )
{
	static UFunction* pFnGetGrenadeWeaponDef = NULL;

	if ( ! pFnGetGrenadeWeaponDef )
		pFnGetGrenadeWeaponDef = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetGrenadeWeaponDef" );

	AKFPerk_execGetGrenadeWeaponDef_Parms GetGrenadeWeaponDef_Parms;

	this->ProcessEvent ( pFnGetGrenadeWeaponDef, &GetGrenadeWeaponDef_Parms, NULL );
};

// Function KFGame.KFPerk.GetGrenadeImagePath
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetGrenadeImagePath ( )
{
	static UFunction* pFnGetGrenadeImagePath = NULL;

	if ( ! pFnGetGrenadeImagePath )
		pFnGetGrenadeImagePath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetGrenadeImagePath" );

	AKFPerk_execGetGrenadeImagePath_Parms GetGrenadeImagePath_Parms;

	this->ProcessEvent ( pFnGetGrenadeImagePath, &GetGrenadeImagePath_Parms, NULL );
};

// Function KFGame.KFPerk.GetInteractIcon
// [0x00022102] 
// Parameters infos:

void AKFPerk::GetInteractIcon ( )
{
	static UFunction* pFnGetInteractIcon = NULL;

	if ( ! pFnGetInteractIcon )
		pFnGetInteractIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetInteractIcon" );

	AKFPerk_execGetInteractIcon_Parms GetInteractIcon_Parms;

	this->ProcessEvent ( pFnGetInteractIcon, &GetInteractIcon_Parms, NULL );
};

// Function KFGame.KFPerk.GetPerkLensEffect
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetPerkLensEffect ( )
{
	static UFunction* pFnGetPerkLensEffect = NULL;

	if ( ! pFnGetPerkLensEffect )
		pFnGetPerkLensEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPerkLensEffect" );

	AKFPerk_execGetPerkLensEffect_Parms GetPerkLensEffect_Parms;

	this->ProcessEvent ( pFnGetPerkLensEffect, &GetPerkLensEffect_Parms, NULL );
};

// Function KFGame.KFPerk.TickRegen
// [0x00020002] 
// Parameters infos:

void AKFPerk::TickRegen ( )
{
	static UFunction* pFnTickRegen = NULL;

	if ( ! pFnTickRegen )
		pFnTickRegen = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.TickRegen" );

	AKFPerk_execTickRegen_Parms TickRegen_Parms;

	this->ProcessEvent ( pFnTickRegen, &TickRegen_Parms, NULL );
};

// Function KFGame.KFPerk.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.Destroyed" );

	AKFPerk_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldAutosellWeapon
// [0x00020002] 
// Parameters infos:

void AKFPerk::ShouldAutosellWeapon ( )
{
	static UFunction* pFnShouldAutosellWeapon = NULL;

	if ( ! pFnShouldAutosellWeapon )
		pFnShouldAutosellWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldAutosellWeapon" );

	AKFPerk_execShouldAutosellWeapon_Parms ShouldAutosellWeapon_Parms;

	this->ProcessEvent ( pFnShouldAutosellWeapon, &ShouldAutosellWeapon_Parms, NULL );
};

// Function KFGame.KFPerk.HitShouldKnockdown
// [0x00080002] 
// Parameters infos:

void AKFPerk::HitShouldKnockdown ( )
{
	static UFunction* pFnHitShouldKnockdown = NULL;

	if ( ! pFnHitShouldKnockdown )
		pFnHitShouldKnockdown = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.HitShouldKnockdown" );

	AKFPerk_execHitShouldKnockdown_Parms HitShouldKnockdown_Parms;

	this->ProcessEvent ( pFnHitShouldKnockdown, &HitShouldKnockdown_Parms, NULL );
};

// Function KFGame.KFPerk.HitShouldStumble
// [0x00080002] 
// Parameters infos:

void AKFPerk::HitShouldStumble ( )
{
	static UFunction* pFnHitShouldStumble = NULL;

	if ( ! pFnHitShouldStumble )
		pFnHitShouldStumble = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.HitShouldStumble" );

	AKFPerk_execHitShouldStumble_Parms HitShouldStumble_Parms;

	this->ProcessEvent ( pFnHitShouldStumble, &HitShouldStumble_Parms, NULL );
};

// Function KFGame.KFPerk.GetOwnerPawn
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventGetOwnerPawn ( )
{
	static UFunction* pFnGetOwnerPawn = NULL;

	if ( ! pFnGetOwnerPawn )
		pFnGetOwnerPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetOwnerPawn" );

	AKFPerk_eventGetOwnerPawn_Parms GetOwnerPawn_Parms;

	this->ProcessEvent ( pFnGetOwnerPawn, &GetOwnerPawn_Parms, NULL );
};

// Function KFGame.KFPerk.NotifyZedTimeEnded
// [0x00020000] 
// Parameters infos:

void AKFPerk::NotifyZedTimeEnded ( )
{
	static UFunction* pFnNotifyZedTimeEnded = NULL;

	if ( ! pFnNotifyZedTimeEnded )
		pFnNotifyZedTimeEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.NotifyZedTimeEnded" );

	AKFPerk_execNotifyZedTimeEnded_Parms NotifyZedTimeEnded_Parms;

	this->ProcessEvent ( pFnNotifyZedTimeEnded, &NotifyZedTimeEnded_Parms, NULL );
};

// Function KFGame.KFPerk.NotifyZedTimeStarted
// [0x00020000] 
// Parameters infos:

void AKFPerk::NotifyZedTimeStarted ( )
{
	static UFunction* pFnNotifyZedTimeStarted = NULL;

	if ( ! pFnNotifyZedTimeStarted )
		pFnNotifyZedTimeStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.NotifyZedTimeStarted" );

	AKFPerk_execNotifyZedTimeStarted_Parms NotifyZedTimeStarted_Parms;

	this->ProcessEvent ( pFnNotifyZedTimeStarted, &NotifyZedTimeStarted_Parms, NULL );
};

// Function KFGame.KFPerk.DrawSpecialPerkHUD
// [0x00020000] 
// Parameters infos:

void AKFPerk::DrawSpecialPerkHUD ( )
{
	static UFunction* pFnDrawSpecialPerkHUD = NULL;

	if ( ! pFnDrawSpecialPerkHUD )
		pFnDrawSpecialPerkHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.DrawSpecialPerkHUD" );

	AKFPerk_execDrawSpecialPerkHUD_Parms DrawSpecialPerkHUD_Parms;

	this->ProcessEvent ( pFnDrawSpecialPerkHUD, &DrawSpecialPerkHUD_Parms, NULL );
};

// Function KFGame.KFPerk.GetUsingTactialReload
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetUsingTactialReload ( )
{
	static UFunction* pFnGetUsingTactialReload = NULL;

	if ( ! pFnGetUsingTactialReload )
		pFnGetUsingTactialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetUsingTactialReload" );

	AKFPerk_execGetUsingTactialReload_Parms GetUsingTactialReload_Parms;

	this->ProcessEvent ( pFnGetUsingTactialReload, &GetUsingTactialReload_Parms, NULL );
};

// Function KFGame.KFPerk.OnWaveStart
// [0x00020000] 
// Parameters infos:

void AKFPerk::OnWaveStart ( )
{
	static UFunction* pFnOnWaveStart = NULL;

	if ( ! pFnOnWaveStart )
		pFnOnWaveStart = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.OnWaveStart" );

	AKFPerk_execOnWaveStart_Parms OnWaveStart_Parms;

	this->ProcessEvent ( pFnOnWaveStart, &OnWaveStart_Parms, NULL );
};

// Function KFGame.KFPerk.OnWaveEnded
// [0x00020000] 
// Parameters infos:

void AKFPerk::OnWaveEnded ( )
{
	static UFunction* pFnOnWaveEnded = NULL;

	if ( ! pFnOnWaveEnded )
		pFnOnWaveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.OnWaveEnded" );

	AKFPerk_execOnWaveEnded_Parms OnWaveEnded_Parms;

	this->ProcessEvent ( pFnOnWaveEnded, &OnWaveEnded_Parms, NULL );
};

// Function KFGame.KFPerk.GetOwnerWeapon
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetOwnerWeapon ( )
{
	static UFunction* pFnGetOwnerWeapon = NULL;

	if ( ! pFnGetOwnerWeapon )
		pFnGetOwnerWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetOwnerWeapon" );

	AKFPerk_execGetOwnerWeapon_Parms GetOwnerWeapon_Parms;

	this->ProcessEvent ( pFnGetOwnerWeapon, &GetOwnerWeapon_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyBloatBileDoT
// [0x00420000] 
// Parameters infos:

void AKFPerk::ModifyBloatBileDoT ( )
{
	static UFunction* pFnModifyBloatBileDoT = NULL;

	if ( ! pFnModifyBloatBileDoT )
		pFnModifyBloatBileDoT = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyBloatBileDoT" );

	AKFPerk_execModifyBloatBileDoT_Parms ModifyBloatBileDoT_Parms;

	this->ProcessEvent ( pFnModifyBloatBileDoT, &ModifyBloatBileDoT_Parms, NULL );
};

// Function KFGame.KFPerk.GetModifierString
// [0x00020002] 
// Parameters infos:

void AKFPerk::GetModifierString ( )
{
	static UFunction* pFnGetModifierString = NULL;

	if ( ! pFnGetModifierString )
		pFnGetModifierString = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetModifierString" );

	AKFPerk_execGetModifierString_Parms GetModifierString_Parms;

	this->ProcessEvent ( pFnGetModifierString, &GetModifierString_Parms, NULL );
};

// Function KFGame.KFPerk.GetAssistDoshModifer
// [0x00082002] 
// Parameters infos:

void AKFPerk::GetAssistDoshModifer ( )
{
	static UFunction* pFnGetAssistDoshModifer = NULL;

	if ( ! pFnGetAssistDoshModifer )
		pFnGetAssistDoshModifer = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetAssistDoshModifer" );

	AKFPerk_execGetAssistDoshModifer_Parms GetAssistDoshModifer_Parms;

	this->ProcessEvent ( pFnGetAssistDoshModifer, &GetAssistDoshModifer_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyAssistDosh
// [0x00422002] 
// Parameters infos:

void AKFPerk::ModifyAssistDosh ( )
{
	static UFunction* pFnModifyAssistDosh = NULL;

	if ( ! pFnModifyAssistDosh )
		pFnModifyAssistDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyAssistDosh" );

	AKFPerk_execModifyAssistDosh_Parms ModifyAssistDosh_Parms;

	this->ProcessEvent ( pFnModifyAssistDosh, &ModifyAssistDosh_Parms, NULL );
};

// Function KFGame.KFPerk.GetArmorDamageAmount
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetArmorDamageAmount ( )
{
	static UFunction* pFnGetArmorDamageAmount = NULL;

	if ( ! pFnGetArmorDamageAmount )
		pFnGetArmorDamageAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetArmorDamageAmount" );

	AKFPerk_execGetArmorDamageAmount_Parms GetArmorDamageAmount_Parms;

	this->ProcessEvent ( pFnGetArmorDamageAmount, &GetArmorDamageAmount_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldKnockDownOnBump
// [0x00020102] 
// Parameters infos:

void AKFPerk::ShouldKnockDownOnBump ( )
{
	static UFunction* pFnShouldKnockDownOnBump = NULL;

	if ( ! pFnShouldKnockDownOnBump )
		pFnShouldKnockDownOnBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldKnockDownOnBump" );

	AKFPerk_execShouldKnockDownOnBump_Parms ShouldKnockDownOnBump_Parms;

	this->ProcessEvent ( pFnShouldKnockDownOnBump, &ShouldKnockDownOnBump_Parms, NULL );
};

// Function KFGame.KFPerk.HasHeavyArmor
// [0x00020102] 
// Parameters infos:

void AKFPerk::HasHeavyArmor ( )
{
	static UFunction* pFnHasHeavyArmor = NULL;

	if ( ! pFnHasHeavyArmor )
		pFnHasHeavyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.HasHeavyArmor" );

	AKFPerk_execHasHeavyArmor_Parms HasHeavyArmor_Parms;

	this->ProcessEvent ( pFnHasHeavyArmor, &HasHeavyArmor_Parms, NULL );
};

// Function KFGame.KFPerk.GetCrouchSpeedModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventGetCrouchSpeedModifier ( )
{
	static UFunction* pFnGetCrouchSpeedModifier = NULL;

	if ( ! pFnGetCrouchSpeedModifier )
		pFnGetCrouchSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetCrouchSpeedModifier" );

	AKFPerk_eventGetCrouchSpeedModifier_Parms GetCrouchSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetCrouchSpeedModifier, &GetCrouchSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk.IgnoresPenetrationDmgReduction
// [0x00020102] 
// Parameters infos:

void AKFPerk::IgnoresPenetrationDmgReduction ( )
{
	static UFunction* pFnIgnoresPenetrationDmgReduction = NULL;

	if ( ! pFnIgnoresPenetrationDmgReduction )
		pFnIgnoresPenetrationDmgReduction = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IgnoresPenetrationDmgReduction" );

	AKFPerk_execIgnoresPenetrationDmgReduction_Parms IgnoresPenetrationDmgReduction_Parms;

	this->ProcessEvent ( pFnIgnoresPenetrationDmgReduction, &IgnoresPenetrationDmgReduction_Parms, NULL );
};

// Function KFGame.KFPerk.GetCameraViewShakeModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventGetCameraViewShakeModifier ( )
{
	static UFunction* pFnGetCameraViewShakeModifier = NULL;

	if ( ! pFnGetCameraViewShakeModifier )
		pFnGetCameraViewShakeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetCameraViewShakeModifier" );

	AKFPerk_eventGetCameraViewShakeModifier_Parms GetCameraViewShakeModifier_Parms;

	this->ProcessEvent ( pFnGetCameraViewShakeModifier, &GetCameraViewShakeModifier_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyWeaponBopDamping
// [0x00420100] 
// Parameters infos:

void AKFPerk::ModifyWeaponBopDamping ( )
{
	static UFunction* pFnModifyWeaponBopDamping = NULL;

	if ( ! pFnModifyWeaponBopDamping )
		pFnModifyWeaponBopDamping = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyWeaponBopDamping" );

	AKFPerk_execModifyWeaponBopDamping_Parms ModifyWeaponBopDamping_Parms;

	this->ProcessEvent ( pFnModifyWeaponBopDamping, &ModifyWeaponBopDamping_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldInstantlySwitchWeapon
// [0x00020102] 
// Parameters infos:

void AKFPerk::ShouldInstantlySwitchWeapon ( )
{
	static UFunction* pFnShouldInstantlySwitchWeapon = NULL;

	if ( ! pFnShouldInstantlySwitchWeapon )
		pFnShouldInstantlySwitchWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldInstantlySwitchWeapon" );

	AKFPerk_execShouldInstantlySwitchWeapon_Parms ShouldInstantlySwitchWeapon_Parms;

	this->ProcessEvent ( pFnShouldInstantlySwitchWeapon, &ShouldInstantlySwitchWeapon_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyWeaponSwitchTime
// [0x00420100] 
// Parameters infos:

void AKFPerk::ModifyWeaponSwitchTime ( )
{
	static UFunction* pFnModifyWeaponSwitchTime = NULL;

	if ( ! pFnModifyWeaponSwitchTime )
		pFnModifyWeaponSwitchTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyWeaponSwitchTime" );

	AKFPerk_execModifyWeaponSwitchTime_Parms ModifyWeaponSwitchTime_Parms;

	this->ProcessEvent ( pFnModifyWeaponSwitchTime, &ModifyWeaponSwitchTime_Parms, NULL );
};

// Function KFGame.KFPerk.GetIronSightSpeedModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventGetIronSightSpeedModifier ( )
{
	static UFunction* pFnGetIronSightSpeedModifier = NULL;

	if ( ! pFnGetIronSightSpeedModifier )
		pFnGetIronSightSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetIronSightSpeedModifier" );

	AKFPerk_eventGetIronSightSpeedModifier_Parms GetIronSightSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetIronSightSpeedModifier, &GetIronSightSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyRateOfFire
// [0x00420100] 
// Parameters infos:

void AKFPerk::ModifyRateOfFire ( )
{
	static UFunction* pFnModifyRateOfFire = NULL;

	if ( ! pFnModifyRateOfFire )
		pFnModifyRateOfFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyRateOfFire" );

	AKFPerk_execModifyRateOfFire_Parms ModifyRateOfFire_Parms;

	this->ProcessEvent ( pFnModifyRateOfFire, &ModifyRateOfFire_Parms, NULL );
};

// Function KFGame.KFPerk.ServerResetHeadShotCombo
// [0x002408C1] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPerk::eventServerResetHeadShotCombo ( )
{
	static UFunction* pFnServerResetHeadShotCombo = NULL;

	if ( ! pFnServerResetHeadShotCombo )
		pFnServerResetHeadShotCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ServerResetHeadShotCombo" );

	AKFPerk_eventServerResetHeadShotCombo_Parms ServerResetHeadShotCombo_Parms;

	this->ProcessEvent ( pFnServerResetHeadShotCombo, &ServerResetHeadShotCombo_Parms, NULL );
};

// Function KFGame.KFPerk.GetIsHeadShotComboActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventGetIsHeadShotComboActive ( )
{
	static UFunction* pFnGetIsHeadShotComboActive = NULL;

	if ( ! pFnGetIsHeadShotComboActive )
		pFnGetIsHeadShotComboActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetIsHeadShotComboActive" );

	AKFPerk_eventGetIsHeadShotComboActive_Parms GetIsHeadShotComboActive_Parms;

	this->ProcessEvent ( pFnGetIsHeadShotComboActive, &GetIsHeadShotComboActive_Parms, NULL );
};

// Function KFGame.KFPerk.ResetHeadShotCombo
// [0x00020000] 
// Parameters infos:

void AKFPerk::ResetHeadShotCombo ( )
{
	static UFunction* pFnResetHeadShotCombo = NULL;

	if ( ! pFnResetHeadShotCombo )
		pFnResetHeadShotCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ResetHeadShotCombo" );

	AKFPerk_execResetHeadShotCombo_Parms ResetHeadShotCombo_Parms;

	this->ProcessEvent ( pFnResetHeadShotCombo, &ResetHeadShotCombo_Parms, NULL );
};

// Function KFGame.KFPerk.AddToHeadShotCombo
// [0x00020000] 
// Parameters infos:

void AKFPerk::AddToHeadShotCombo ( )
{
	static UFunction* pFnAddToHeadShotCombo = NULL;

	if ( ! pFnAddToHeadShotCombo )
		pFnAddToHeadShotCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.AddToHeadShotCombo" );

	AKFPerk_execAddToHeadShotCombo_Parms AddToHeadShotCombo_Parms;

	this->ProcessEvent ( pFnAddToHeadShotCombo, &AddToHeadShotCombo_Parms, NULL );
};

// Function KFGame.KFPerk.UpdatePerkHeadShots
// [0x00020000] 
// Parameters infos:

void AKFPerk::UpdatePerkHeadShots ( )
{
	static UFunction* pFnUpdatePerkHeadShots = NULL;

	if ( ! pFnUpdatePerkHeadShots )
		pFnUpdatePerkHeadShots = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.UpdatePerkHeadShots" );

	AKFPerk_execUpdatePerkHeadShots_Parms UpdatePerkHeadShots_Parms;

	this->ProcessEvent ( pFnUpdatePerkHeadShots, &UpdatePerkHeadShots_Parms, NULL );
};

// Function KFGame.KFPerk.GetIsUberAmmoActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetIsUberAmmoActive ( )
{
	static UFunction* pFnGetIsUberAmmoActive = NULL;

	if ( ! pFnGetIsUberAmmoActive )
		pFnGetIsUberAmmoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetIsUberAmmoActive" );

	AKFPerk_execGetIsUberAmmoActive_Parms GetIsUberAmmoActive_Parms;

	this->ProcessEvent ( pFnGetIsUberAmmoActive, &GetIsUberAmmoActive_Parms, NULL );
};

// Function KFGame.KFPerk.GetLastHX25NukeTime
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetLastHX25NukeTime ( )
{
	static UFunction* pFnGetLastHX25NukeTime = NULL;

	if ( ! pFnGetLastHX25NukeTime )
		pFnGetLastHX25NukeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetLastHX25NukeTime" );

	AKFPerk_execGetLastHX25NukeTime_Parms GetLastHX25NukeTime_Parms;

	this->ProcessEvent ( pFnGetLastHX25NukeTime, &GetLastHX25NukeTime_Parms, NULL );
};

// Function KFGame.KFPerk.SetLastHX25NukeTime
// [0x00020100] 
// Parameters infos:

void AKFPerk::SetLastHX25NukeTime ( )
{
	static UFunction* pFnSetLastHX25NukeTime = NULL;

	if ( ! pFnSetLastHX25NukeTime )
		pFnSetLastHX25NukeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SetLastHX25NukeTime" );

	AKFPerk_execSetLastHX25NukeTime_Parms SetLastHX25NukeTime_Parms;

	this->ProcessEvent ( pFnSetLastHX25NukeTime, &SetLastHX25NukeTime_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldNeverDud
// [0x00020102] 
// Parameters infos:

void AKFPerk::ShouldNeverDud ( )
{
	static UFunction* pFnShouldNeverDud = NULL;

	if ( ! pFnShouldNeverDud )
		pFnShouldNeverDud = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldNeverDud" );

	AKFPerk_execShouldNeverDud_Parms ShouldNeverDud_Parms;

	this->ProcessEvent ( pFnShouldNeverDud, &ShouldNeverDud_Parms, NULL );
};

// Function KFGame.KFPerk.GetDaZedEMPPower
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetDaZedEMPPower ( )
{
	static UFunction* pFnGetDaZedEMPPower = NULL;

	if ( ! pFnGetDaZedEMPPower )
		pFnGetDaZedEMPPower = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetDaZedEMPPower" );

	AKFPerk_execGetDaZedEMPPower_Parms GetDaZedEMPPower_Parms;

	this->ProcessEvent ( pFnGetDaZedEMPPower, &GetDaZedEMPPower_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldGetDaZeD
// [0x00020102] 
// Parameters infos:

void AKFPerk::ShouldGetDaZeD ( )
{
	static UFunction* pFnShouldGetDaZeD = NULL;

	if ( ! pFnShouldGetDaZeD )
		pFnShouldGetDaZeD = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldGetDaZeD" );

	AKFPerk_execShouldGetDaZeD_Parms ShouldGetDaZeD_Parms;

	this->ProcessEvent ( pFnShouldGetDaZeD, &ShouldGetDaZeD_Parms, NULL );
};

// Function KFGame.KFPerk.DoorShouldNuke
// [0x00020102] 
// Parameters infos:

void AKFPerk::DoorShouldNuke ( )
{
	static UFunction* pFnDoorShouldNuke = NULL;

	if ( ! pFnDoorShouldNuke )
		pFnDoorShouldNuke = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.DoorShouldNuke" );

	AKFPerk_execDoorShouldNuke_Parms DoorShouldNuke_Parms;

	this->ProcessEvent ( pFnDoorShouldNuke, &DoorShouldNuke_Parms, NULL );
};

// Function KFGame.KFPerk.GetAoEDamageModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetAoEDamageModifier ( )
{
	static UFunction* pFnGetAoEDamageModifier = NULL;

	if ( ! pFnGetAoEDamageModifier )
		pFnGetAoEDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetAoEDamageModifier" );

	AKFPerk_execGetAoEDamageModifier_Parms GetAoEDamageModifier_Parms;

	this->ProcessEvent ( pFnGetAoEDamageModifier, &GetAoEDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk.GetAoERadiusModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetAoERadiusModifier ( )
{
	static UFunction* pFnGetAoERadiusModifier = NULL;

	if ( ! pFnGetAoERadiusModifier )
		pFnGetAoERadiusModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetAoERadiusModifier" );

	AKFPerk_execGetAoERadiusModifier_Parms GetAoERadiusModifier_Parms;

	this->ProcessEvent ( pFnGetAoERadiusModifier, &GetAoERadiusModifier_Parms, NULL );
};

// Function KFGame.KFPerk.CanExplosiveWeld
// [0x00020102] 
// Parameters infos:

void AKFPerk::CanExplosiveWeld ( )
{
	static UFunction* pFnCanExplosiveWeld = NULL;

	if ( ! pFnCanExplosiveWeld )
		pFnCanExplosiveWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CanExplosiveWeld" );

	AKFPerk_execCanExplosiveWeld_Parms CanExplosiveWeld_Parms;

	this->ProcessEvent ( pFnCanExplosiveWeld, &CanExplosiveWeld_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldRandSirenResist
// [0x00020102] 
// Parameters infos:

void AKFPerk::ShouldRandSirenResist ( )
{
	static UFunction* pFnShouldRandSirenResist = NULL;

	if ( ! pFnShouldRandSirenResist )
		pFnShouldRandSirenResist = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldRandSirenResist" );

	AKFPerk_execShouldRandSirenResist_Parms ShouldRandSirenResist_Parms;

	this->ProcessEvent ( pFnShouldRandSirenResist, &ShouldRandSirenResist_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldSacrifice
// [0x00020102] 
// Parameters infos:

void AKFPerk::ShouldSacrifice ( )
{
	static UFunction* pFnShouldSacrifice = NULL;

	if ( ! pFnShouldSacrifice )
		pFnShouldSacrifice = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldSacrifice" );

	AKFPerk_execShouldSacrifice_Parms ShouldSacrifice_Parms;

	this->ProcessEvent ( pFnShouldSacrifice, &ShouldSacrifice_Parms, NULL );
};

// Function KFGame.KFPerk.IsSharedExplosiveResistaneActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsSharedExplosiveResistaneActive ( )
{
	static UFunction* pFnIsSharedExplosiveResistaneActive = NULL;

	if ( ! pFnIsSharedExplosiveResistaneActive )
		pFnIsSharedExplosiveResistaneActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsSharedExplosiveResistaneActive" );

	AKFPerk_execIsSharedExplosiveResistaneActive_Parms IsSharedExplosiveResistaneActive_Parms;

	this->ProcessEvent ( pFnIsSharedExplosiveResistaneActive, &IsSharedExplosiveResistaneActive_Parms, NULL );
};

// Function KFGame.KFPerk.IsOnContactActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsOnContactActive ( )
{
	static UFunction* pFnIsOnContactActive = NULL;

	if ( ! pFnIsOnContactActive )
		pFnIsOnContactActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsOnContactActive" );

	AKFPerk_execIsOnContactActive_Parms IsOnContactActive_Parms;

	this->ProcessEvent ( pFnIsOnContactActive, &IsOnContactActive_Parms, NULL );
};

// Function KFGame.KFPerk.IsRangeActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsRangeActive ( )
{
	static UFunction* pFnIsRangeActive = NULL;

	if ( ! pFnIsRangeActive )
		pFnIsRangeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsRangeActive" );

	AKFPerk_execIsRangeActive_Parms IsRangeActive_Parms;

	this->ProcessEvent ( pFnIsRangeActive, &IsRangeActive_Parms, NULL );
};

// Function KFGame.KFPerk.GetSplashDamageModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetSplashDamageModifier ( )
{
	static UFunction* pFnGetSplashDamageModifier = NULL;

	if ( ! pFnGetSplashDamageModifier )
		pFnGetSplashDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetSplashDamageModifier" );

	AKFPerk_execGetSplashDamageModifier_Parms GetSplashDamageModifier_Parms;

	this->ProcessEvent ( pFnGetSplashDamageModifier, &GetSplashDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldShrapnel
// [0x00020102] 
// Parameters infos:

void AKFPerk::ShouldShrapnel ( )
{
	static UFunction* pFnShouldShrapnel = NULL;

	if ( ! pFnShouldShrapnel )
		pFnShouldShrapnel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldShrapnel" );

	AKFPerk_execShouldShrapnel_Parms ShouldShrapnel_Parms;

	this->ProcessEvent ( pFnShouldShrapnel, &ShouldShrapnel_Parms, NULL );
};

// Function KFGame.KFPerk.CouldBeZedShrapnel
// [0x00020002] 
// Parameters infos:

void AKFPerk::CouldBeZedShrapnel ( )
{
	static UFunction* pFnCouldBeZedShrapnel = NULL;

	if ( ! pFnCouldBeZedShrapnel )
		pFnCouldBeZedShrapnel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CouldBeZedShrapnel" );

	AKFPerk_execCouldBeZedShrapnel_Parms CouldBeZedShrapnel_Parms;

	this->ProcessEvent ( pFnCouldBeZedShrapnel, &CouldBeZedShrapnel_Parms, NULL );
};

// Function KFGame.KFPerk.CanSpreadNapalm
// [0x00020002] 
// Parameters infos:

void AKFPerk::CanSpreadNapalm ( )
{
	static UFunction* pFnCanSpreadNapalm = NULL;

	if ( ! pFnCanSpreadNapalm )
		pFnCanSpreadNapalm = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CanSpreadNapalm" );

	AKFPerk_execCanSpreadNapalm_Parms CanSpreadNapalm_Parms;

	this->ProcessEvent ( pFnCanSpreadNapalm, &CanSpreadNapalm_Parms, NULL );
};

// Function KFGame.KFPerk.GetFireStumble
// [0x00024002] 
// Parameters infos:

void AKFPerk::GetFireStumble ( )
{
	static UFunction* pFnGetFireStumble = NULL;

	if ( ! pFnGetFireStumble )
		pFnGetFireStumble = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetFireStumble" );

	AKFPerk_execGetFireStumble_Parms GetFireStumble_Parms;

	this->ProcessEvent ( pFnGetFireStumble, &GetFireStumble_Parms, NULL );
};

// Function KFGame.KFPerk.GetDoTScalerAdditions
// [0x00020000] 
// Parameters infos:

void AKFPerk::GetDoTScalerAdditions ( )
{
	static UFunction* pFnGetDoTScalerAdditions = NULL;

	if ( ! pFnGetDoTScalerAdditions )
		pFnGetDoTScalerAdditions = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetDoTScalerAdditions" );

	AKFPerk_execGetDoTScalerAdditions_Parms GetDoTScalerAdditions_Parms;

	this->ProcessEvent ( pFnGetDoTScalerAdditions, &GetDoTScalerAdditions_Parms, NULL );
};

// Function KFGame.KFPerk.IsFlarotovActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsFlarotovActive ( )
{
	static UFunction* pFnIsFlarotovActive = NULL;

	if ( ! pFnIsFlarotovActive )
		pFnIsFlarotovActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsFlarotovActive" );

	AKFPerk_execIsFlarotovActive_Parms IsFlarotovActive_Parms;

	this->ProcessEvent ( pFnIsFlarotovActive, &IsFlarotovActive_Parms, NULL );
};

// Function KFGame.KFPerk.IsSlugActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsSlugActive ( )
{
	static UFunction* pFnIsSlugActive = NULL;

	if ( ! pFnIsSlugActive )
		pFnIsSlugActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsSlugActive" );

	AKFPerk_execIsSlugActive_Parms IsSlugActive_Parms;

	this->ProcessEvent ( pFnIsSlugActive, &IsSlugActive_Parms, NULL );
};

// Function KFGame.KFPerk.GetHealingShieldActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetHealingShieldActive ( )
{
	static UFunction* pFnGetHealingShieldActive = NULL;

	if ( ! pFnGetHealingShieldActive )
		pFnGetHealingShieldActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetHealingShieldActive" );

	AKFPerk_execGetHealingShieldActive_Parms GetHealingShieldActive_Parms;

	this->ProcessEvent ( pFnGetHealingShieldActive, &GetHealingShieldActive_Parms, NULL );
};

// Function KFGame.KFPerk.GetHealingDamageBoostActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetHealingDamageBoostActive ( )
{
	static UFunction* pFnGetHealingDamageBoostActive = NULL;

	if ( ! pFnGetHealingDamageBoostActive )
		pFnGetHealingDamageBoostActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetHealingDamageBoostActive" );

	AKFPerk_execGetHealingDamageBoostActive_Parms GetHealingDamageBoostActive_Parms;

	this->ProcessEvent ( pFnGetHealingDamageBoostActive, &GetHealingDamageBoostActive_Parms, NULL );
};

// Function KFGame.KFPerk.GetHealingSpeedBoostActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetHealingSpeedBoostActive ( )
{
	static UFunction* pFnGetHealingSpeedBoostActive = NULL;

	if ( ! pFnGetHealingSpeedBoostActive )
		pFnGetHealingSpeedBoostActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetHealingSpeedBoostActive" );

	AKFPerk_execGetHealingSpeedBoostActive_Parms GetHealingSpeedBoostActive_Parms;

	this->ProcessEvent ( pFnGetHealingSpeedBoostActive, &GetHealingSpeedBoostActive_Parms, NULL );
};

// Function KFGame.KFPerk.GetSelfHealingSurgePct
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetSelfHealingSurgePct ( )
{
	static UFunction* pFnGetSelfHealingSurgePct = NULL;

	if ( ! pFnGetSelfHealingSurgePct )
		pFnGetSelfHealingSurgePct = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetSelfHealingSurgePct" );

	AKFPerk_execGetSelfHealingSurgePct_Parms GetSelfHealingSurgePct_Parms;

	this->ProcessEvent ( pFnGetSelfHealingSurgePct, &GetSelfHealingSurgePct_Parms, NULL );
};

// Function KFGame.KFPerk.IsHealingSurgeActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsHealingSurgeActive ( )
{
	static UFunction* pFnIsHealingSurgeActive = NULL;

	if ( ! pFnIsHealingSurgeActive )
		pFnIsHealingSurgeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsHealingSurgeActive" );

	AKFPerk_execIsHealingSurgeActive_Parms IsHealingSurgeActive_Parms;

	this->ProcessEvent ( pFnIsHealingSurgeActive, &IsHealingSurgeActive_Parms, NULL );
};

// Function KFGame.KFPerk.GetSirenScreamStrength
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetSirenScreamStrength ( )
{
	static UFunction* pFnGetSirenScreamStrength = NULL;

	if ( ! pFnGetSirenScreamStrength )
		pFnGetSirenScreamStrength = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetSirenScreamStrength" );

	AKFPerk_execGetSirenScreamStrength_Parms GetSirenScreamStrength_Parms;

	this->ProcessEvent ( pFnGetSirenScreamStrength, &GetSirenScreamStrength_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyToxicDmg
// [0x00422000] 
// Parameters infos:

void AKFPerk::ModifyToxicDmg ( )
{
	static UFunction* pFnModifyToxicDmg = NULL;

	if ( ! pFnModifyToxicDmg )
		pFnModifyToxicDmg = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyToxicDmg" );

	AKFPerk_execModifyToxicDmg_Parms ModifyToxicDmg_Parms;

	this->ProcessEvent ( pFnModifyToxicDmg, &ModifyToxicDmg_Parms, NULL );
};

// Function KFGame.KFPerk.GetToxicDmgTypeClass
// [0x00022002] 
// Parameters infos:

void AKFPerk::GetToxicDmgTypeClass ( )
{
	static UFunction* pFnGetToxicDmgTypeClass = NULL;

	if ( ! pFnGetToxicDmgTypeClass )
		pFnGetToxicDmgTypeClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetToxicDmgTypeClass" );

	AKFPerk_execGetToxicDmgTypeClass_Parms GetToxicDmgTypeClass_Parms;

	this->ProcessEvent ( pFnGetToxicDmgTypeClass, &GetToxicDmgTypeClass_Parms, NULL );
};

// Function KFGame.KFPerk.IsToxicDmgActive
// [0x00020002] 
// Parameters infos:

void AKFPerk::IsToxicDmgActive ( )
{
	static UFunction* pFnIsToxicDmgActive = NULL;

	if ( ! pFnIsToxicDmgActive )
		pFnIsToxicDmgActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsToxicDmgActive" );

	AKFPerk_execIsToxicDmgActive_Parms IsToxicDmgActive_Parms;

	this->ProcessEvent ( pFnIsToxicDmgActive, &IsToxicDmgActive_Parms, NULL );
};

// Function KFGame.KFPerk.RepairArmor
// [0x00020000] 
// Parameters infos:

void AKFPerk::RepairArmor ( )
{
	static UFunction* pFnRepairArmor = NULL;

	if ( ! pFnRepairArmor )
		pFnRepairArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.RepairArmor" );

	AKFPerk_execRepairArmor_Parms RepairArmor_Parms;

	this->ProcessEvent ( pFnRepairArmor, &RepairArmor_Parms, NULL );
};

// Function KFGame.KFPerk.CanRepairDoors
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPerk::CanRepairDoors ( )
{
	static UFunction* pFnCanRepairDoors = NULL;

	if ( ! pFnCanRepairDoors )
		pFnCanRepairDoors = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CanRepairDoors" );

	AKFPerk_execCanRepairDoors_Parms CanRepairDoors_Parms;

	pFnCanRepairDoors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanRepairDoors, &CanRepairDoors_Parms, NULL );

	pFnCanRepairDoors->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.GetArmorDiscountMod
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetArmorDiscountMod ( )
{
	static UFunction* pFnGetArmorDiscountMod = NULL;

	if ( ! pFnGetArmorDiscountMod )
		pFnGetArmorDiscountMod = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetArmorDiscountMod" );

	AKFPerk_execGetArmorDiscountMod_Parms GetArmorDiscountMod_Parms;

	this->ProcessEvent ( pFnGetArmorDiscountMod, &GetArmorDiscountMod_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyArmor
// [0x00420000] 
// Parameters infos:

void AKFPerk::ModifyArmor ( )
{
	static UFunction* pFnModifyArmor = NULL;

	if ( ! pFnModifyArmor )
		pFnModifyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyArmor" );

	AKFPerk_execModifyArmor_Parms ModifyArmor_Parms;

	this->ProcessEvent ( pFnModifyArmor, &ModifyArmor_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyHealAmount
// [0x00420002] 
// Parameters infos:

void AKFPerk::ModifyHealAmount ( )
{
	static UFunction* pFnModifyHealAmount = NULL;

	if ( ! pFnModifyHealAmount )
		pFnModifyHealAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyHealAmount" );

	AKFPerk_execModifyHealAmount_Parms ModifyHealAmount_Parms;

	this->ProcessEvent ( pFnModifyHealAmount, &ModifyHealAmount_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyHealerRechargeTime
// [0x00420000] 
// Parameters infos:

void AKFPerk::ModifyHealerRechargeTime ( )
{
	static UFunction* pFnModifyHealerRechargeTime = NULL;

	if ( ! pFnModifyHealerRechargeTime )
		pFnModifyHealerRechargeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyHealerRechargeTime" );

	AKFPerk_execModifyHealerRechargeTime_Parms ModifyHealerRechargeTime_Parms;

	this->ProcessEvent ( pFnModifyHealerRechargeTime, &ModifyHealerRechargeTime_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldUseFastInstigatorDilation
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventShouldUseFastInstigatorDilation ( )
{
	static UFunction* pFnShouldUseFastInstigatorDilation = NULL;

	if ( ! pFnShouldUseFastInstigatorDilation )
		pFnShouldUseFastInstigatorDilation = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldUseFastInstigatorDilation" );

	AKFPerk_eventShouldUseFastInstigatorDilation_Parms ShouldUseFastInstigatorDilation_Parms;

	this->ProcessEvent ( pFnShouldUseFastInstigatorDilation, &ShouldUseFastInstigatorDilation_Parms, NULL );
};

// Function KFGame.KFPerk.IsUnAffectedByZedTime
// [0x00020002] 
// Parameters infos:

void AKFPerk::IsUnAffectedByZedTime ( )
{
	static UFunction* pFnIsUnAffectedByZedTime = NULL;

	if ( ! pFnIsUnAffectedByZedTime )
		pFnIsUnAffectedByZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsUnAffectedByZedTime" );

	AKFPerk_execIsUnAffectedByZedTime_Parms IsUnAffectedByZedTime_Parms;

	this->ProcessEvent ( pFnIsUnAffectedByZedTime, &IsUnAffectedByZedTime_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldKnockdown
// [0x00020000] 
// Parameters infos:

void AKFPerk::ShouldKnockdown ( )
{
	static UFunction* pFnShouldKnockdown = NULL;

	if ( ! pFnShouldKnockdown )
		pFnShouldKnockdown = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldKnockdown" );

	AKFPerk_execShouldKnockdown_Parms ShouldKnockdown_Parms;

	this->ProcessEvent ( pFnShouldKnockdown, &ShouldKnockdown_Parms, NULL );
};

// Function KFGame.KFPerk.AddVampireHealth
// [0x00020000] 
// Parameters infos:

void AKFPerk::AddVampireHealth ( )
{
	static UFunction* pFnAddVampireHealth = NULL;

	if ( ! pFnAddVampireHealth )
		pFnAddVampireHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.AddVampireHealth" );

	AKFPerk_execAddVampireHealth_Parms AddVampireHealth_Parms;

	this->ProcessEvent ( pFnAddVampireHealth, &AddVampireHealth_Parms, NULL );
};

// Function KFGame.KFPerk.SetSuccessfullParry
// [0x00020100] 
// Parameters infos:

void AKFPerk::SetSuccessfullParry ( )
{
	static UFunction* pFnSetSuccessfullParry = NULL;

	if ( ! pFnSetSuccessfullParry )
		pFnSetSuccessfullParry = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SetSuccessfullParry" );

	AKFPerk_execSetSuccessfullParry_Parms SetSuccessfullParry_Parms;

	this->ProcessEvent ( pFnSetSuccessfullParry, &SetSuccessfullParry_Parms, NULL );
};

// Function KFGame.KFPerk.SetSuccessfullBlock
// [0x00020100] 
// Parameters infos:

void AKFPerk::SetSuccessfullBlock ( )
{
	static UFunction* pFnSetSuccessfullBlock = NULL;

	if ( ! pFnSetSuccessfullBlock )
		pFnSetSuccessfullBlock = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SetSuccessfullBlock" );

	AKFPerk_execSetSuccessfullBlock_Parms SetSuccessfullBlock_Parms;

	this->ProcessEvent ( pFnSetSuccessfullBlock, &SetSuccessfullBlock_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyLightAttackDamage
// [0x00420000] 
// Parameters infos:

void AKFPerk::ModifyLightAttackDamage ( )
{
	static UFunction* pFnModifyLightAttackDamage = NULL;

	if ( ! pFnModifyLightAttackDamage )
		pFnModifyLightAttackDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyLightAttackDamage" );

	AKFPerk_execModifyLightAttackDamage_Parms ModifyLightAttackDamage_Parms;

	this->ProcessEvent ( pFnModifyLightAttackDamage, &ModifyLightAttackDamage_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyHardAttackDamage
// [0x00420000] 
// Parameters infos:

void AKFPerk::ModifyHardAttackDamage ( )
{
	static UFunction* pFnModifyHardAttackDamage = NULL;

	if ( ! pFnModifyHardAttackDamage )
		pFnModifyHardAttackDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyHardAttackDamage" );

	AKFPerk_execModifyHardAttackDamage_Parms ModifyHardAttackDamage_Parms;

	this->ProcessEvent ( pFnModifyHardAttackDamage, &ModifyHardAttackDamage_Parms, NULL );
};

// Function KFGame.KFPerk.CanEarnSmallRadiusKillXP
// [0x00020002] 
// Parameters infos:

void AKFPerk::CanEarnSmallRadiusKillXP ( )
{
	static UFunction* pFnCanEarnSmallRadiusKillXP = NULL;

	if ( ! pFnCanEarnSmallRadiusKillXP )
		pFnCanEarnSmallRadiusKillXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CanEarnSmallRadiusKillXP" );

	AKFPerk_execCanEarnSmallRadiusKillXP_Parms CanEarnSmallRadiusKillXP_Parms;

	this->ProcessEvent ( pFnCanEarnSmallRadiusKillXP, &CanEarnSmallRadiusKillXP_Parms, NULL );
};

// Function KFGame.KFPerk.CanNotBeGrabbed
// [0x00020002] 
// Parameters infos:

void AKFPerk::CanNotBeGrabbed ( )
{
	static UFunction* pFnCanNotBeGrabbed = NULL;

	if ( ! pFnCanNotBeGrabbed )
		pFnCanNotBeGrabbed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CanNotBeGrabbed" );

	AKFPerk_execCanNotBeGrabbed_Parms CanNotBeGrabbed_Parms;

	this->ProcessEvent ( pFnCanNotBeGrabbed, &CanNotBeGrabbed_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyScreamEffectDuration
// [0x00420000] 
// Parameters infos:

void AKFPerk::ModifyScreamEffectDuration ( )
{
	static UFunction* pFnModifyScreamEffectDuration = NULL;

	if ( ! pFnModifyScreamEffectDuration )
		pFnModifyScreamEffectDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyScreamEffectDuration" );

	AKFPerk_execModifyScreamEffectDuration_Parms ModifyScreamEffectDuration_Parms;

	this->ProcessEvent ( pFnModifyScreamEffectDuration, &ModifyScreamEffectDuration_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyMeleeAttackSpeed
// [0x00420000] 
// Parameters infos:

void AKFPerk::ModifyMeleeAttackSpeed ( )
{
	static UFunction* pFnModifyMeleeAttackSpeed = NULL;

	if ( ! pFnModifyMeleeAttackSpeed )
		pFnModifyMeleeAttackSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyMeleeAttackSpeed" );

	AKFPerk_execModifyMeleeAttackSpeed_Parms ModifyMeleeAttackSpeed_Parms;

	this->ProcessEvent ( pFnModifyMeleeAttackSpeed, &ModifyMeleeAttackSpeed_Parms, NULL );
};

// Function KFGame.KFPerk.ModifySpread
// [0x00420100] 
// Parameters infos:

void AKFPerk::ModifySpread ( )
{
	static UFunction* pFnModifySpread = NULL;

	if ( ! pFnModifySpread )
		pFnModifySpread = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifySpread" );

	AKFPerk_execModifySpread_Parms ModifySpread_Parms;

	this->ProcessEvent ( pFnModifySpread, &ModifySpread_Parms, NULL );
};

// Function KFGame.KFPerk.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetZedTimeModifier" );

	AKFPerk_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk.IsRapidFireActive
// [0x00080102] 
// Parameters infos:

void AKFPerk::IsRapidFireActive ( )
{
	static UFunction* pFnIsRapidFireActive = NULL;

	if ( ! pFnIsRapidFireActive )
		pFnIsRapidFireActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsRapidFireActive" );

	AKFPerk_execIsRapidFireActive_Parms IsRapidFireActive_Parms;

	this->ProcessEvent ( pFnIsRapidFireActive, &IsRapidFireActive_Parms, NULL );
};

// Function KFGame.KFPerk.HasNightVision
// [0x00020102] 
// Parameters infos:

void AKFPerk::HasNightVision ( )
{
	static UFunction* pFnHasNightVision = NULL;

	if ( ! pFnHasNightVision )
		pFnHasNightVision = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.HasNightVision" );

	AKFPerk_execHasNightVision_Parms HasNightVision_Parms;

	this->ProcessEvent ( pFnHasNightVision, &HasNightVision_Parms, NULL );
};

// Function KFGame.KFPerk.IsShootAndMoveActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsShootAndMoveActive ( )
{
	static UFunction* pFnIsShootAndMoveActive = NULL;

	if ( ! pFnIsShootAndMoveActive )
		pFnIsShootAndMoveActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsShootAndMoveActive" );

	AKFPerk_execIsShootAndMoveActive_Parms IsShootAndMoveActive_Parms;

	this->ProcessEvent ( pFnIsShootAndMoveActive, &IsShootAndMoveActive_Parms, NULL );
};

// Function KFGame.KFPerk.IsCallOutActive
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsCallOutActive ( )
{
	static UFunction* pFnIsCallOutActive = NULL;

	if ( ! pFnIsCallOutActive )
		pFnIsCallOutActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsCallOutActive" );

	AKFPerk_execIsCallOutActive_Parms IsCallOutActive_Parms;

	this->ProcessEvent ( pFnIsCallOutActive, &IsCallOutActive_Parms, NULL );
};

// Function KFGame.KFPerk.GetTightChokeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetTightChokeModifier ( )
{
	static UFunction* pFnGetTightChokeModifier = NULL;

	if ( ! pFnGetTightChokeModifier )
		pFnGetTightChokeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetTightChokeModifier" );

	AKFPerk_execGetTightChokeModifier_Parms GetTightChokeModifier_Parms;

	this->ProcessEvent ( pFnGetTightChokeModifier, &GetTightChokeModifier_Parms, NULL );
};

// Function KFGame.KFPerk.GetBarrageDamageModifier
// [0x00022002] 
// Parameters infos:

void AKFPerk::GetBarrageDamageModifier ( )
{
	static UFunction* pFnGetBarrageDamageModifier = NULL;

	if ( ! pFnGetBarrageDamageModifier )
		pFnGetBarrageDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetBarrageDamageModifier" );

	AKFPerk_execGetBarrageDamageModifier_Parms GetBarrageDamageModifier_Parms;

	this->ProcessEvent ( pFnGetBarrageDamageModifier, &GetBarrageDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk.GetPenetrationModifier
// [0x00024100] 
// Parameters infos:

void AKFPerk::GetPenetrationModifier ( )
{
	static UFunction* pFnGetPenetrationModifier = NULL;

	if ( ! pFnGetPenetrationModifier )
		pFnGetPenetrationModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPenetrationModifier" );

	AKFPerk_execGetPenetrationModifier_Parms GetPenetrationModifier_Parms;

	this->ProcessEvent ( pFnGetPenetrationModifier, &GetPenetrationModifier_Parms, NULL );
};

// Function KFGame.KFPerk.Interact
// [0x00020100] 
// Parameters infos:

void AKFPerk::Interact ( )
{
	static UFunction* pFnInteract = NULL;

	if ( ! pFnInteract )
		pFnInteract = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.Interact" );

	AKFPerk_execInteract_Parms Interact_Parms;

	this->ProcessEvent ( pFnInteract, &Interact_Parms, NULL );
};

// Function KFGame.KFPerk.CanInteract
// [0x00020102] 
// Parameters infos:

void AKFPerk::CanInteract ( )
{
	static UFunction* pFnCanInteract = NULL;

	if ( ! pFnCanInteract )
		pFnCanInteract = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CanInteract" );

	AKFPerk_execCanInteract_Parms CanInteract_Parms;

	this->ProcessEvent ( pFnCanInteract, &CanInteract_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyWeldingRate
// [0x00420100] 
// Parameters infos:

void AKFPerk::ModifyWeldingRate ( )
{
	static UFunction* pFnModifyWeldingRate = NULL;

	if ( ! pFnModifyWeldingRate )
		pFnModifyWeldingRate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyWeldingRate" );

	AKFPerk_execModifyWeldingRate_Parms ModifyWeldingRate_Parms;

	this->ProcessEvent ( pFnModifyWeldingRate, &ModifyWeldingRate_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldGetAllTheXP
// [0x00020002] 
// Parameters infos:

void AKFPerk::ShouldGetAllTheXP ( )
{
	static UFunction* pFnShouldGetAllTheXP = NULL;

	if ( ! pFnShouldGetAllTheXP )
		pFnShouldGetAllTheXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldGetAllTheXP" );

	AKFPerk_execShouldGetAllTheXP_Parms ShouldGetAllTheXP_Parms;

	this->ProcessEvent ( pFnShouldGetAllTheXP, &ShouldGetAllTheXP_Parms, NULL );
};

// Function KFGame.KFPerk.GetExplosionTemplate
// [0x00020002] 
// Parameters infos:

void AKFPerk::GetExplosionTemplate ( )
{
	static UFunction* pFnGetExplosionTemplate = NULL;

	if ( ! pFnGetExplosionTemplate )
		pFnGetExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetExplosionTemplate" );

	AKFPerk_execGetExplosionTemplate_Parms GetExplosionTemplate_Parms;

	this->ProcessEvent ( pFnGetExplosionTemplate, &GetExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFPerk.GetSnarePowerModifier
// [0x00024102] 
// Parameters infos:

void AKFPerk::GetSnarePowerModifier ( )
{
	static UFunction* pFnGetSnarePowerModifier = NULL;

	if ( ! pFnGetSnarePowerModifier )
		pFnGetSnarePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetSnarePowerModifier" );

	AKFPerk_execGetSnarePowerModifier_Parms GetSnarePowerModifier_Parms;

	this->ProcessEvent ( pFnGetSnarePowerModifier, &GetSnarePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk.GetReactionModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk::GetReactionModifier ( )
{
	static UFunction* pFnGetReactionModifier = NULL;

	if ( ! pFnGetReactionModifier )
		pFnGetReactionModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetReactionModifier" );

	AKFPerk_execGetReactionModifier_Parms GetReactionModifier_Parms;

	this->ProcessEvent ( pFnGetReactionModifier, &GetReactionModifier_Parms, NULL );
};

// Function KFGame.KFPerk.GetStunPowerModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk::GetStunPowerModifier ( )
{
	static UFunction* pFnGetStunPowerModifier = NULL;

	if ( ! pFnGetStunPowerModifier )
		pFnGetStunPowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetStunPowerModifier" );

	AKFPerk_execGetStunPowerModifier_Parms GetStunPowerModifier_Parms;

	this->ProcessEvent ( pFnGetStunPowerModifier, &GetStunPowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetStumblePowerModifier" );

	AKFPerk_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk.GetKnockdownPowerModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk::GetKnockdownPowerModifier ( )
{
	static UFunction* pFnGetKnockdownPowerModifier = NULL;

	if ( ! pFnGetKnockdownPowerModifier )
		pFnGetKnockdownPowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetKnockdownPowerModifier" );

	AKFPerk_execGetKnockdownPowerModifier_Parms GetKnockdownPowerModifier_Parms;

	this->ProcessEvent ( pFnGetKnockdownPowerModifier, &GetKnockdownPowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk.GetZedTimeExtension
// [0x00022102] 
// Parameters infos:

void AKFPerk::GetZedTimeExtension ( )
{
	static UFunction* pFnGetZedTimeExtension = NULL;

	if ( ! pFnGetZedTimeExtension )
		pFnGetZedTimeExtension = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetZedTimeExtension" );

	AKFPerk_execGetZedTimeExtension_Parms GetZedTimeExtension_Parms;

	this->ProcessEvent ( pFnGetZedTimeExtension, &GetZedTimeExtension_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyHealth
// [0x00420000] 
// Parameters infos:

void AKFPerk::ModifyHealth ( )
{
	static UFunction* pFnModifyHealth = NULL;

	if ( ! pFnModifyHealth )
		pFnModifyHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyHealth" );

	AKFPerk_execModifyHealth_Parms ModifyHealth_Parms;

	this->ProcessEvent ( pFnModifyHealth, &ModifyHealth_Parms, NULL );
};

// Function KFGame.KFPerk.ShouldMagSizeModifySpareAmmo
// [0x00024102] 
// Parameters infos:

void AKFPerk::ShouldMagSizeModifySpareAmmo ( )
{
	static UFunction* pFnShouldMagSizeModifySpareAmmo = NULL;

	if ( ! pFnShouldMagSizeModifySpareAmmo )
		pFnShouldMagSizeModifySpareAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ShouldMagSizeModifySpareAmmo" );

	AKFPerk_execShouldMagSizeModifySpareAmmo_Parms ShouldMagSizeModifySpareAmmo_Parms;

	this->ProcessEvent ( pFnShouldMagSizeModifySpareAmmo, &ShouldMagSizeModifySpareAmmo_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyMaxSpareAmmoAmount
// [0x00424100] 
// Parameters infos:

void AKFPerk::ModifyMaxSpareAmmoAmount ( )
{
	static UFunction* pFnModifyMaxSpareAmmoAmount = NULL;

	if ( ! pFnModifyMaxSpareAmmoAmount )
		pFnModifyMaxSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyMaxSpareAmmoAmount" );

	AKFPerk_execModifyMaxSpareAmmoAmount_Parms ModifyMaxSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifyMaxSpareAmmoAmount, &ModifyMaxSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk.MaximizeSpareAmmoAmount
// [0x00420100] 
// Parameters infos:

void AKFPerk::MaximizeSpareAmmoAmount ( )
{
	static UFunction* pFnMaximizeSpareAmmoAmount = NULL;

	if ( ! pFnMaximizeSpareAmmoAmount )
		pFnMaximizeSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.MaximizeSpareAmmoAmount" );

	AKFPerk_execMaximizeSpareAmmoAmount_Parms MaximizeSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnMaximizeSpareAmmoAmount, &MaximizeSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk.ModifySpareAmmoAmount
// [0x00424100] 
// Parameters infos:

void AKFPerk::ModifySpareAmmoAmount ( )
{
	static UFunction* pFnModifySpareAmmoAmount = NULL;

	if ( ! pFnModifySpareAmmoAmount )
		pFnModifySpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifySpareAmmoAmount" );

	AKFPerk_execModifySpareAmmoAmount_Parms ModifySpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifySpareAmmoAmount, &ModifySpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyMagSizeAndNumber
// [0x00424100] 
// Parameters infos:

void AKFPerk::ModifyMagSizeAndNumber ( )
{
	static UFunction* pFnModifyMagSizeAndNumber = NULL;

	if ( ! pFnModifyMagSizeAndNumber )
		pFnModifyMagSizeAndNumber = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyMagSizeAndNumber" );

	AKFPerk_execModifyMagSizeAndNumber_Parms ModifyMagSizeAndNumber_Parms;

	this->ProcessEvent ( pFnModifyMagSizeAndNumber, &ModifyMagSizeAndNumber_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyDamageTaken
// [0x00424000] 
// Parameters infos:

void AKFPerk::ModifyDamageTaken ( )
{
	static UFunction* pFnModifyDamageTaken = NULL;

	if ( ! pFnModifyDamageTaken )
		pFnModifyDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyDamageTaken" );

	AKFPerk_execModifyDamageTaken_Parms ModifyDamageTaken_Parms;

	this->ProcessEvent ( pFnModifyDamageTaken, &ModifyDamageTaken_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyDamageGiven
// [0x00424000] 
// Parameters infos:

void AKFPerk::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyDamageGiven" );

	AKFPerk_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk.ModifyRecoil
// [0x00420100] 
// Parameters infos:

void AKFPerk::ModifyRecoil ( )
{
	static UFunction* pFnModifyRecoil = NULL;

	if ( ! pFnModifyRecoil )
		pFnModifyRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifyRecoil" );

	AKFPerk_execModifyRecoil_Parms ModifyRecoil_Parms;

	this->ProcessEvent ( pFnModifyRecoil, &ModifyRecoil_Parms, NULL );
};

// Function KFGame.KFPerk.FinalizeSpeedVariables
// [0x00020000] 
// Parameters infos:

void AKFPerk::FinalizeSpeedVariables ( )
{
	static UFunction* pFnFinalizeSpeedVariables = NULL;

	if ( ! pFnFinalizeSpeedVariables )
		pFnFinalizeSpeedVariables = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.FinalizeSpeedVariables" );

	AKFPerk_execFinalizeSpeedVariables_Parms FinalizeSpeedVariables_Parms;

	this->ProcessEvent ( pFnFinalizeSpeedVariables, &FinalizeSpeedVariables_Parms, NULL );
};

// Function KFGame.KFPerk.ModifySprintSpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk::ModifySprintSpeed ( )
{
	static UFunction* pFnModifySprintSpeed = NULL;

	if ( ! pFnModifySprintSpeed )
		pFnModifySprintSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifySprintSpeed" );

	AKFPerk_execModifySprintSpeed_Parms ModifySprintSpeed_Parms;

	this->ProcessEvent ( pFnModifySprintSpeed, &ModifySprintSpeed_Parms, NULL );
};

// Function KFGame.KFPerk.ModifySpeed
// [0x00420100] 
// Parameters infos:

void AKFPerk::ModifySpeed ( )
{
	static UFunction* pFnModifySpeed = NULL;

	if ( ! pFnModifySpeed )
		pFnModifySpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ModifySpeed" );

	AKFPerk_execModifySpeed_Parms ModifySpeed_Parms;

	this->ProcessEvent ( pFnModifySpeed, &ModifySpeed_Parms, NULL );
};

// Function KFGame.KFPerk.GetReloadRateScale
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetReloadRateScale ( )
{
	static UFunction* pFnGetReloadRateScale = NULL;

	if ( ! pFnGetReloadRateScale )
		pFnGetReloadRateScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetReloadRateScale" );

	AKFPerk_execGetReloadRateScale_Parms GetReloadRateScale_Parms;

	this->ProcessEvent ( pFnGetReloadRateScale, &GetReloadRateScale_Parms, NULL );
};

// Function KFGame.KFPerk.GetSuppressingFireSnareScale
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetSuppressingFireSnareScale ( )
{
	static UFunction* pFnGetSuppressingFireSnareScale = NULL;

	if ( ! pFnGetSuppressingFireSnareScale )
		pFnGetSuppressingFireSnareScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetSuppressingFireSnareScale" );

	AKFPerk_execGetSuppressingFireSnareScale_Parms GetSuppressingFireSnareScale_Parms;

	this->ProcessEvent ( pFnGetSuppressingFireSnareScale, &GetSuppressingFireSnareScale_Parms, NULL );
};

// Function KFGame.KFPerk.GetAwarenessDamageScale
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetAwarenessDamageScale ( )
{
	static UFunction* pFnGetAwarenessDamageScale = NULL;

	if ( ! pFnGetAwarenessDamageScale )
		pFnGetAwarenessDamageScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetAwarenessDamageScale" );

	AKFPerk_execGetAwarenessDamageScale_Parms GetAwarenessDamageScale_Parms;

	this->ProcessEvent ( pFnGetAwarenessDamageScale, &GetAwarenessDamageScale_Parms, NULL );
};

// Function KFGame.KFPerk.GetCloakDetectionRange
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetCloakDetectionRange ( )
{
	static UFunction* pFnGetCloakDetectionRange = NULL;

	if ( ! pFnGetCloakDetectionRange )
		pFnGetCloakDetectionRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetCloakDetectionRange" );

	AKFPerk_execGetCloakDetectionRange_Parms GetCloakDetectionRange_Parms;

	this->ProcessEvent ( pFnGetCloakDetectionRange, &GetCloakDetectionRange_Parms, NULL );
};

// Function KFGame.KFPerk.BuildDroppedMessageString
// [0x00080002] 
// Parameters infos:

void AKFPerk::BuildDroppedMessageString ( )
{
	static UFunction* pFnBuildDroppedMessageString = NULL;

	if ( ! pFnBuildDroppedMessageString )
		pFnBuildDroppedMessageString = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.BuildDroppedMessageString" );

	AKFPerk_execBuildDroppedMessageString_Parms BuildDroppedMessageString_Parms;

	this->ProcessEvent ( pFnBuildDroppedMessageString, &BuildDroppedMessageString_Parms, NULL );
};

// Function KFGame.KFPerk.CheckForOverWeight
// [0x00080002] 
// Parameters infos:

void AKFPerk::CheckForOverWeight ( )
{
	static UFunction* pFnCheckForOverWeight = NULL;

	if ( ! pFnCheckForOverWeight )
		pFnCheckForOverWeight = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CheckForOverWeight" );

	AKFPerk_execCheckForOverWeight_Parms CheckForOverWeight_Parms;

	this->ProcessEvent ( pFnCheckForOverWeight, &CheckForOverWeight_Parms, NULL );
};

// Function KFGame.KFPerk.PerkNeedsTick
// [0x00020102] 
// Parameters infos:

void AKFPerk::PerkNeedsTick ( )
{
	static UFunction* pFnPerkNeedsTick = NULL;

	if ( ! pFnPerkNeedsTick )
		pFnPerkNeedsTick = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PerkNeedsTick" );

	AKFPerk_execPerkNeedsTick_Parms PerkNeedsTick_Parms;

	this->ProcessEvent ( pFnPerkNeedsTick, &PerkNeedsTick_Parms, NULL );
};

// Function KFGame.KFPerk.GetKnifeWeaponClassPath
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetKnifeWeaponClassPath ( )
{
	static UFunction* pFnGetKnifeWeaponClassPath = NULL;

	if ( ! pFnGetKnifeWeaponClassPath )
		pFnGetKnifeWeaponClassPath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetKnifeWeaponClassPath" );

	AKFPerk_execGetKnifeWeaponClassPath_Parms GetKnifeWeaponClassPath_Parms;

	this->ProcessEvent ( pFnGetKnifeWeaponClassPath, &GetKnifeWeaponClassPath_Parms, NULL );
};

// Function KFGame.KFPerk.GetSecondaryWeaponClassPath
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetSecondaryWeaponClassPath ( )
{
	static UFunction* pFnGetSecondaryWeaponClassPath = NULL;

	if ( ! pFnGetSecondaryWeaponClassPath )
		pFnGetSecondaryWeaponClassPath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetSecondaryWeaponClassPath" );

	AKFPerk_execGetSecondaryWeaponClassPath_Parms GetSecondaryWeaponClassPath_Parms;

	this->ProcessEvent ( pFnGetSecondaryWeaponClassPath, &GetSecondaryWeaponClassPath_Parms, NULL );
};

// Function KFGame.KFPerk.GetPrimaryWeaponClassPath
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetPrimaryWeaponClassPath ( )
{
	static UFunction* pFnGetPrimaryWeaponClassPath = NULL;

	if ( ! pFnGetPrimaryWeaponClassPath )
		pFnGetPrimaryWeaponClassPath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPrimaryWeaponClassPath" );

	AKFPerk_execGetPrimaryWeaponClassPath_Parms GetPrimaryWeaponClassPath_Parms;

	this->ProcessEvent ( pFnGetPrimaryWeaponClassPath, &GetPrimaryWeaponClassPath_Parms, NULL );
};

// Function KFGame.KFPerk.GetGrenadeClass
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetGrenadeClass ( )
{
	static UFunction* pFnGetGrenadeClass = NULL;

	if ( ! pFnGetGrenadeClass )
		pFnGetGrenadeClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetGrenadeClass" );

	AKFPerk_execGetGrenadeClass_Parms GetGrenadeClass_Parms;

	this->ProcessEvent ( pFnGetGrenadeClass, &GetGrenadeClass_Parms, NULL );
};

// Function KFGame.KFPerk.AddDefaultInventory
// [0x00020002] 
// Parameters infos:

void AKFPerk::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.AddDefaultInventory" );

	AKFPerk_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function KFGame.KFPerk.PostLevelUp
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventPostLevelUp ( )
{
	static UFunction* pFnPostLevelUp = NULL;

	if ( ! pFnPostLevelUp )
		pFnPostLevelUp = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PostLevelUp" );

	AKFPerk_eventPostLevelUp_Parms PostLevelUp_Parms;

	this->ProcessEvent ( pFnPostLevelUp, &PostLevelUp_Parms, NULL );
};

// Function KFGame.KFPerk.NotifyPawnTeamChanged
// [0x00020102] 
// Parameters infos:

void AKFPerk::NotifyPawnTeamChanged ( )
{
	static UFunction* pFnNotifyPawnTeamChanged = NULL;

	if ( ! pFnNotifyPawnTeamChanged )
		pFnNotifyPawnTeamChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.NotifyPawnTeamChanged" );

	AKFPerk_execNotifyPawnTeamChanged_Parms NotifyPawnTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyPawnTeamChanged, &NotifyPawnTeamChanged_Parms, NULL );
};

// Function KFGame.KFPerk.ApplyWeightLimits
// [0x00020002] 
// Parameters infos:

void AKFPerk::ApplyWeightLimits ( )
{
	static UFunction* pFnApplyWeightLimits = NULL;

	if ( ! pFnApplyWeightLimits )
		pFnApplyWeightLimits = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ApplyWeightLimits" );

	AKFPerk_execApplyWeightLimits_Parms ApplyWeightLimits_Parms;

	this->ProcessEvent ( pFnApplyWeightLimits, &ApplyWeightLimits_Parms, NULL );
};

// Function KFGame.KFPerk.ClientClearPerkEffects
// [0x010201C0] 
// Parameters infos:

void AKFPerk::ClientClearPerkEffects ( )
{
	static UFunction* pFnClientClearPerkEffects = NULL;

	if ( ! pFnClientClearPerkEffects )
		pFnClientClearPerkEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ClientClearPerkEffects" );

	AKFPerk_execClientClearPerkEffects_Parms ClientClearPerkEffects_Parms;

	this->ProcessEvent ( pFnClientClearPerkEffects, &ClientClearPerkEffects_Parms, NULL );
};

// Function KFGame.KFPerk.ClearPerkEffects
// [0x00020002] 
// Parameters infos:

void AKFPerk::ClearPerkEffects ( )
{
	static UFunction* pFnClearPerkEffects = NULL;

	if ( ! pFnClearPerkEffects )
		pFnClearPerkEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ClearPerkEffects" );

	AKFPerk_execClearPerkEffects_Parms ClearPerkEffects_Parms;

	this->ProcessEvent ( pFnClearPerkEffects, &ClearPerkEffects_Parms, NULL );
};

// Function KFGame.KFPerk.ApplySkillsToPawn
// [0x00020002] 
// Parameters infos:

void AKFPerk::ApplySkillsToPawn ( )
{
	static UFunction* pFnApplySkillsToPawn = NULL;

	if ( ! pFnApplySkillsToPawn )
		pFnApplySkillsToPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ApplySkillsToPawn" );

	AKFPerk_execApplySkillsToPawn_Parms ApplySkillsToPawn_Parms;

	this->ProcessEvent ( pFnApplySkillsToPawn, &ApplySkillsToPawn_Parms, NULL );
};

// Function KFGame.KFPerk.PerkSetOwnerHealthAndArmor
// [0x00044103] ( FUNC_Final )
// Parameters infos:

void AKFPerk::PerkSetOwnerHealthAndArmor ( )
{
	static UFunction* pFnPerkSetOwnerHealthAndArmor = NULL;

	if ( ! pFnPerkSetOwnerHealthAndArmor )
		pFnPerkSetOwnerHealthAndArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PerkSetOwnerHealthAndArmor" );

	AKFPerk_execPerkSetOwnerHealthAndArmor_Parms PerkSetOwnerHealthAndArmor_Parms;

	this->ProcessEvent ( pFnPerkSetOwnerHealthAndArmor, &PerkSetOwnerHealthAndArmor_Parms, NULL );
};

// Function KFGame.KFPerk.NotifyPerkModified
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventNotifyPerkModified ( )
{
	static UFunction* pFnNotifyPerkModified = NULL;

	if ( ! pFnNotifyPerkModified )
		pFnNotifyPerkModified = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.NotifyPerkModified" );

	AKFPerk_eventNotifyPerkModified_Parms NotifyPerkModified_Parms;

	this->ProcessEvent ( pFnNotifyPerkModified, &NotifyPerkModified_Parms, NULL );
};

// Function KFGame.KFPerk.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:

void AKFPerk::SetPlayerDefaults ( )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SetPlayerDefaults" );

	AKFPerk_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function KFGame.KFPerk.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PreBeginPlay" );

	AKFPerk_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFPerk.GetSavedBuild
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPerk::GetSavedBuild ( )
{
	static UFunction* pFnGetSavedBuild = NULL;

	if ( ! pFnGetSavedBuild )
		pFnGetSavedBuild = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetSavedBuild" );

	AKFPerk_execGetSavedBuild_Parms GetSavedBuild_Parms;

	this->ProcessEvent ( pFnGetSavedBuild, &GetSavedBuild_Parms, NULL );
};

// Function KFGame.KFPerk.GetPrestigeIconPath
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventGetPrestigeIconPath ( )
{
	static UFunction* pFnGetPrestigeIconPath = NULL;

	if ( ! pFnGetPrestigeIconPath )
		pFnGetPrestigeIconPath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPrestigeIconPath" );

	AKFPerk_eventGetPrestigeIconPath_Parms GetPrestigeIconPath_Parms;

	this->ProcessEvent ( pFnGetPrestigeIconPath, &GetPrestigeIconPath_Parms, NULL );
};

// Function KFGame.KFPerk.GetPerkIconPath
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventGetPerkIconPath ( )
{
	static UFunction* pFnGetPerkIconPath = NULL;

	if ( ! pFnGetPerkIconPath )
		pFnGetPerkIconPath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPerkIconPath" );

	AKFPerk_eventGetPerkIconPath_Parms GetPerkIconPath_Parms;

	this->ProcessEvent ( pFnGetPerkIconPath, &GetPerkIconPath_Parms, NULL );
};

// Function KFGame.KFPerk.GetPassiveValue
// [0x00426102] 
// Parameters infos:

void AKFPerk::GetPassiveValue ( )
{
	static UFunction* pFnGetPassiveValue = NULL;

	if ( ! pFnGetPassiveValue )
		pFnGetPassiveValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPassiveValue" );

	AKFPerk_execGetPassiveValue_Parms GetPassiveValue_Parms;

	this->ProcessEvent ( pFnGetPassiveValue, &GetPassiveValue_Parms, NULL );
};

// Function KFGame.KFPerk.GetSkillValue
// [0x00022102] 
// Parameters infos:

void AKFPerk::GetSkillValue ( )
{
	static UFunction* pFnGetSkillValue = NULL;

	if ( ! pFnGetSkillValue )
		pFnGetSkillValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetSkillValue" );

	AKFPerk_execGetSkillValue_Parms GetSkillValue_Parms;

	this->ProcessEvent ( pFnGetSkillValue, &GetSkillValue_Parms, NULL );
};

// Function KFGame.KFPerk.GetPassiveStrings
// [0x00422100] 
// Parameters infos:

void AKFPerk::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPassiveStrings" );

	AKFPerk_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk.PostSkillUpdate
// [0x00080902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventPostSkillUpdate ( )
{
	static UFunction* pFnPostSkillUpdate = NULL;

	if ( ! pFnPostSkillUpdate )
		pFnPostSkillUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PostSkillUpdate" );

	AKFPerk_eventPostSkillUpdate_Parms PostSkillUpdate_Parms;

	this->ProcessEvent ( pFnPostSkillUpdate, &PostSkillUpdate_Parms, NULL );
};

// Function KFGame.KFPerk.UnpackSkill
// [0x00420102] 
// Parameters infos:

void AKFPerk::UnpackSkill ( )
{
	static UFunction* pFnUnpackSkill = NULL;

	if ( ! pFnUnpackSkill )
		pFnUnpackSkill = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.UnpackSkill" );

	AKFPerk_execUnpackSkill_Parms UnpackSkill_Parms;

	this->ProcessEvent ( pFnUnpackSkill, &UnpackSkill_Parms, NULL );
};

// Function KFGame.KFPerk.GetUnpackedSkillsArray
// [0x00420902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventGetUnpackedSkillsArray ( )
{
	static UFunction* pFnGetUnpackedSkillsArray = NULL;

	if ( ! pFnGetUnpackedSkillsArray )
		pFnGetUnpackedSkillsArray = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetUnpackedSkillsArray" );

	AKFPerk_eventGetUnpackedSkillsArray_Parms GetUnpackedSkillsArray_Parms;

	this->ProcessEvent ( pFnGetUnpackedSkillsArray, &GetUnpackedSkillsArray_Parms, NULL );
};

// Function KFGame.KFPerk.SetPerkBuild
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventSetPerkBuild ( )
{
	static UFunction* pFnSetPerkBuild = NULL;

	if ( ! pFnSetPerkBuild )
		pFnSetPerkBuild = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SetPerkBuild" );

	AKFPerk_eventSetPerkBuild_Parms SetPerkBuild_Parms;

	this->ProcessEvent ( pFnSetPerkBuild, &SetPerkBuild_Parms, NULL );
};

// Function KFGame.KFPerk.PackSkill
// [0x00420902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventPackSkill ( )
{
	static UFunction* pFnPackSkill = NULL;

	if ( ! pFnPackSkill )
		pFnPackSkill = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PackSkill" );

	AKFPerk_eventPackSkill_Parms PackSkill_Parms;

	this->ProcessEvent ( pFnPackSkill, &PackSkill_Parms, NULL );
};

// Function KFGame.KFPerk.PackPerkBuild
// [0x00420902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventPackPerkBuild ( )
{
	static UFunction* pFnPackPerkBuild = NULL;

	if ( ! pFnPackPerkBuild )
		pFnPackPerkBuild = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PackPerkBuild" );

	AKFPerk_eventPackPerkBuild_Parms PackPerkBuild_Parms;

	this->ProcessEvent ( pFnPackPerkBuild, &PackPerkBuild_Parms, NULL );
};

// Function KFGame.KFPerk.UpdatePerkBuild
// [0x00420902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventUpdatePerkBuild ( )
{
	static UFunction* pFnUpdatePerkBuild = NULL;

	if ( ! pFnUpdatePerkBuild )
		pFnUpdatePerkBuild = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.UpdatePerkBuild" );

	AKFPerk_eventUpdatePerkBuild_Parms UpdatePerkBuild_Parms;

	this->ProcessEvent ( pFnUpdatePerkBuild, &UpdatePerkBuild_Parms, NULL );
};

// Function KFGame.KFPerk.UpdateSkills
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventUpdateSkills ( )
{
	static UFunction* pFnUpdateSkills = NULL;

	if ( ! pFnUpdateSkills )
		pFnUpdateSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.UpdateSkills" );

	AKFPerk_eventUpdateSkills_Parms UpdateSkills_Parms;

	this->ProcessEvent ( pFnUpdateSkills, &UpdateSkills_Parms, NULL );
};

// Function KFGame.KFPerk.PerkLevelUpdated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPerk::eventPerkLevelUpdated ( )
{
	static UFunction* pFnPerkLevelUpdated = NULL;

	if ( ! pFnPerkLevelUpdated )
		pFnPerkLevelUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.PerkLevelUpdated" );

	AKFPerk_eventPerkLevelUpdated_Parms PerkLevelUpdated_Parms;

	this->ProcessEvent ( pFnPerkLevelUpdated, &PerkLevelUpdated_Parms, NULL );
};

// Function KFGame.KFPerk.IsPerkLevelAllowed
// [0x00020102] 
// Parameters infos:

void AKFPerk::IsPerkLevelAllowed ( )
{
	static UFunction* pFnIsPerkLevelAllowed = NULL;

	if ( ! pFnIsPerkLevelAllowed )
		pFnIsPerkLevelAllowed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsPerkLevelAllowed" );

	AKFPerk_execIsPerkLevelAllowed_Parms IsPerkLevelAllowed_Parms;

	this->ProcessEvent ( pFnIsPerkLevelAllowed, &IsPerkLevelAllowed_Parms, NULL );
};

// Function KFGame.KFPerk.GetPrestigeRewardID
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPerk::GetPrestigeRewardID ( )
{
	static UFunction* pFnGetPrestigeRewardID = NULL;

	if ( ! pFnGetPrestigeRewardID )
		pFnGetPrestigeRewardID = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPrestigeRewardID" );

	AKFPerk_execGetPrestigeRewardID_Parms GetPrestigeRewardID_Parms;

	pFnGetPrestigeRewardID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPrestigeRewardID, &GetPrestigeRewardID_Parms, NULL );

	pFnGetPrestigeRewardID->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.SetPrestigeLevel
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPerk::SetPrestigeLevel ( )
{
	static UFunction* pFnSetPrestigeLevel = NULL;

	if ( ! pFnSetPrestigeLevel )
		pFnSetPrestigeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SetPrestigeLevel" );

	AKFPerk_execSetPrestigeLevel_Parms SetPrestigeLevel_Parms;

	pFnSetPrestigeLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetPrestigeLevel, &SetPrestigeLevel_Parms, NULL );

	pFnSetPrestigeLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.GetPrestigeLevel
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPerk::GetPrestigeLevel ( )
{
	static UFunction* pFnGetPrestigeLevel = NULL;

	if ( ! pFnGetPrestigeLevel )
		pFnGetPrestigeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPrestigeLevel" );

	AKFPerk_execGetPrestigeLevel_Parms GetPrestigeLevel_Parms;

	pFnGetPrestigeLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPrestigeLevel, &GetPrestigeLevel_Parms, NULL );

	pFnGetPrestigeLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.SetLevel
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPerk::SetLevel ( )
{
	static UFunction* pFnSetLevel = NULL;

	if ( ! pFnSetLevel )
		pFnSetLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SetLevel" );

	AKFPerk_execSetLevel_Parms SetLevel_Parms;

	pFnSetLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetLevel, &SetLevel_Parms, NULL );

	pFnSetLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.GetLevel
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPerk::GetLevel ( )
{
	static UFunction* pFnGetLevel = NULL;

	if ( ! pFnGetLevel )
		pFnGetLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetLevel" );

	AKFPerk_execGetLevel_Parms GetLevel_Parms;

	pFnGetLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLevel, &GetLevel_Parms, NULL );

	pFnGetLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.GetCurrentPrestigeLevel
// [0x00020102] 
// Parameters infos:

void AKFPerk::GetCurrentPrestigeLevel ( )
{
	static UFunction* pFnGetCurrentPrestigeLevel = NULL;

	if ( ! pFnGetCurrentPrestigeLevel )
		pFnGetCurrentPrestigeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetCurrentPrestigeLevel" );

	AKFPerk_execGetCurrentPrestigeLevel_Parms GetCurrentPrestigeLevel_Parms;

	this->ProcessEvent ( pFnGetCurrentPrestigeLevel, &GetCurrentPrestigeLevel_Parms, NULL );
};

// Function KFGame.KFPerk.IsBackupWeapon
// [0x00022002] 
// Parameters infos:

void AKFPerk::IsBackupWeapon ( )
{
	static UFunction* pFnIsBackupWeapon = NULL;

	if ( ! pFnIsBackupWeapon )
		pFnIsBackupWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsBackupWeapon" );

	AKFPerk_execIsBackupWeapon_Parms IsBackupWeapon_Parms;

	this->ProcessEvent ( pFnIsBackupWeapon, &IsBackupWeapon_Parms, NULL );
};

// Function KFGame.KFPerk.MultiplySecondaryXPPoints
// [0x00422002] 
// Parameters infos:

void AKFPerk::MultiplySecondaryXPPoints ( )
{
	static UFunction* pFnMultiplySecondaryXPPoints = NULL;

	if ( ! pFnMultiplySecondaryXPPoints )
		pFnMultiplySecondaryXPPoints = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.MultiplySecondaryXPPoints" );

	AKFPerk_execMultiplySecondaryXPPoints_Parms MultiplySecondaryXPPoints_Parms;

	this->ProcessEvent ( pFnMultiplySecondaryXPPoints, &MultiplySecondaryXPPoints_Parms, NULL );
};

// Function KFGame.KFPerk.IsDamageTypeOnThisPerk
// [0x00022002] 
// Parameters infos:

void AKFPerk::IsDamageTypeOnThisPerk ( )
{
	static UFunction* pFnIsDamageTypeOnThisPerk = NULL;

	if ( ! pFnIsDamageTypeOnThisPerk )
		pFnIsDamageTypeOnThisPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsDamageTypeOnThisPerk" );

	AKFPerk_execIsDamageTypeOnThisPerk_Parms IsDamageTypeOnThisPerk_Parms;

	this->ProcessEvent ( pFnIsDamageTypeOnThisPerk, &IsDamageTypeOnThisPerk_Parms, NULL );
};

// Function KFGame.KFPerk.IsBackupDamageTypeOnPerk
// [0x00022002] 
// Parameters infos:

void AKFPerk::IsBackupDamageTypeOnPerk ( )
{
	static UFunction* pFnIsBackupDamageTypeOnPerk = NULL;

	if ( ! pFnIsBackupDamageTypeOnPerk )
		pFnIsBackupDamageTypeOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsBackupDamageTypeOnPerk" );

	AKFPerk_execIsBackupDamageTypeOnPerk_Parms IsBackupDamageTypeOnPerk_Parms;

	this->ProcessEvent ( pFnIsBackupDamageTypeOnPerk, &IsBackupDamageTypeOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk.IsDamageTypeOnPerk
// [0x00022002] 
// Parameters infos:

void AKFPerk::IsDamageTypeOnPerk ( )
{
	static UFunction* pFnIsDamageTypeOnPerk = NULL;

	if ( ! pFnIsDamageTypeOnPerk )
		pFnIsDamageTypeOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsDamageTypeOnPerk" );

	AKFPerk_execIsDamageTypeOnPerk_Parms IsDamageTypeOnPerk_Parms;

	this->ProcessEvent ( pFnIsDamageTypeOnPerk, &IsDamageTypeOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk.IsWeaponOnPerk
// [0x00026102] 
// Parameters infos:

void AKFPerk::IsWeaponOnPerk ( )
{
	static UFunction* pFnIsWeaponOnPerk = NULL;

	if ( ! pFnIsWeaponOnPerk )
		pFnIsWeaponOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.IsWeaponOnPerk" );

	AKFPerk_execIsWeaponOnPerk_Parms IsWeaponOnPerk_Parms;

	this->ProcessEvent ( pFnIsWeaponOnPerk, &IsWeaponOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk.GetPerkFromProjectile
// [0x00022002] 
// Parameters infos:

void AKFPerk::GetPerkFromProjectile ( )
{
	static UFunction* pFnGetPerkFromProjectile = NULL;

	if ( ! pFnGetPerkFromProjectile )
		pFnGetPerkFromProjectile = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPerkFromProjectile" );

	AKFPerk_execGetPerkFromProjectile_Parms GetPerkFromProjectile_Parms;

	this->ProcessEvent ( pFnGetPerkFromProjectile, &GetPerkFromProjectile_Parms, NULL );
};

// Function KFGame.KFPerk.GetPerkFromDamageCauser
// [0x00022002] 
// Parameters infos:

void AKFPerk::GetPerkFromDamageCauser ( )
{
	static UFunction* pFnGetPerkFromDamageCauser = NULL;

	if ( ! pFnGetPerkFromDamageCauser )
		pFnGetPerkFromDamageCauser = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPerkFromDamageCauser" );

	AKFPerk_execGetPerkFromDamageCauser_Parms GetPerkFromDamageCauser_Parms;

	this->ProcessEvent ( pFnGetPerkFromDamageCauser, &GetPerkFromDamageCauser_Parms, NULL );
};

// Function KFGame.KFPerk.GetWeaponFromDamageCauser
// [0x00022002] 
// Parameters infos:

void AKFPerk::GetWeaponFromDamageCauser ( )
{
	static UFunction* pFnGetWeaponFromDamageCauser = NULL;

	if ( ! pFnGetWeaponFromDamageCauser )
		pFnGetWeaponFromDamageCauser = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetWeaponFromDamageCauser" );

	AKFPerk_execGetWeaponFromDamageCauser_Parms GetWeaponFromDamageCauser_Parms;

	this->ProcessEvent ( pFnGetWeaponFromDamageCauser, &GetWeaponFromDamageCauser_Parms, NULL );
};

// Function KFGame.KFPerk.DumpPerkLoadout
// [0x00020002] 
// Parameters infos:

void AKFPerk::DumpPerkLoadout ( )
{
	static UFunction* pFnDumpPerkLoadout = NULL;

	if ( ! pFnDumpPerkLoadout )
		pFnDumpPerkLoadout = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.DumpPerkLoadout" );

	AKFPerk_execDumpPerkLoadout_Parms DumpPerkLoadout_Parms;

	this->ProcessEvent ( pFnDumpPerkLoadout, &DumpPerkLoadout_Parms, NULL );
};

// Function KFGame.KFPerk.GetPerkClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:

void AKFPerk::GetPerkClass ( )
{
	static UFunction* pFnGetPerkClass = NULL;

	if ( ! pFnGetPerkClass )
		pFnGetPerkClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPerkClass" );

	AKFPerk_execGetPerkClass_Parms GetPerkClass_Parms;

	this->ProcessEvent ( pFnGetPerkClass, &GetPerkClass_Parms, NULL );
};

// Function KFGame.KFPerk.GetPerkBuildStatID
// [0x00022500] ( FUNC_Native )
// Parameters infos:

void AKFPerk::GetPerkBuildStatID ( )
{
	static UFunction* pFnGetPerkBuildStatID = NULL;

	if ( ! pFnGetPerkBuildStatID )
		pFnGetPerkBuildStatID = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetPerkBuildStatID" );

	AKFPerk_execGetPerkBuildStatID_Parms GetPerkBuildStatID_Parms;

	pFnGetPerkBuildStatID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerkBuildStatID, &GetPerkBuildStatID_Parms, NULL );

	pFnGetPerkBuildStatID->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.GetProgressStatID
// [0x00022500] ( FUNC_Native )
// Parameters infos:

void AKFPerk::GetProgressStatID ( )
{
	static UFunction* pFnGetProgressStatID = NULL;

	if ( ! pFnGetProgressStatID )
		pFnGetProgressStatID = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.GetProgressStatID" );

	AKFPerk_execGetProgressStatID_Parms GetProgressStatID_Parms;

	pFnGetProgressStatID->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetProgressStatID, &GetProgressStatID_Parms, NULL );

	pFnGetProgressStatID->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.ClientACK
// [0x01040DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPerk::eventClientACK ( )
{
	static UFunction* pFnClientACK = NULL;

	if ( ! pFnClientACK )
		pFnClientACK = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ClientACK" );

	AKFPerk_eventClientACK_Parms ClientACK_Parms;

	pFnClientACK->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientACK, &ClientACK_Parms, NULL );

	pFnClientACK->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.ServerSetPerkBuild
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPerk::eventServerSetPerkBuild ( )
{
	static UFunction* pFnServerSetPerkBuild = NULL;

	if ( ! pFnServerSetPerkBuild )
		pFnServerSetPerkBuild = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.ServerSetPerkBuild" );

	AKFPerk_eventServerSetPerkBuild_Parms ServerSetPerkBuild_Parms;

	pFnServerSetPerkBuild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetPerkBuild, &ServerSetPerkBuild_Parms, NULL );

	pFnServerSetPerkBuild->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.SavePerkDataToConfig
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPerk::SavePerkDataToConfig ( )
{
	static UFunction* pFnSavePerkDataToConfig = NULL;

	if ( ! pFnSavePerkDataToConfig )
		pFnSavePerkDataToConfig = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SavePerkDataToConfig" );

	AKFPerk_execSavePerkDataToConfig_Parms SavePerkDataToConfig_Parms;

	pFnSavePerkDataToConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSavePerkDataToConfig, &SavePerkDataToConfig_Parms, NULL );

	pFnSavePerkDataToConfig->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.SaveBuildToStats
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPerk::SaveBuildToStats ( )
{
	static UFunction* pFnSaveBuildToStats = NULL;

	if ( ! pFnSaveBuildToStats )
		pFnSaveBuildToStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SaveBuildToStats" );

	AKFPerk_execSaveBuildToStats_Parms SaveBuildToStats_Parms;

	pFnSaveBuildToStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveBuildToStats, &SaveBuildToStats_Parms, NULL );

	pFnSaveBuildToStats->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.SaveTierUnlockToConfig
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPerk::SaveTierUnlockToConfig ( )
{
	static UFunction* pFnSaveTierUnlockToConfig = NULL;

	if ( ! pFnSaveTierUnlockToConfig )
		pFnSaveTierUnlockToConfig = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.SaveTierUnlockToConfig" );

	AKFPerk_execSaveTierUnlockToConfig_Parms SaveTierUnlockToConfig_Parms;

	pFnSaveTierUnlockToConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveTierUnlockToConfig, &SaveTierUnlockToConfig_Parms, NULL );

	pFnSaveTierUnlockToConfig->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.LoadPerkData
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPerk::LoadPerkData ( )
{
	static UFunction* pFnLoadPerkData = NULL;

	if ( ! pFnLoadPerkData )
		pFnLoadPerkData = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.LoadPerkData" );

	AKFPerk_execLoadPerkData_Parms LoadPerkData_Parms;

	pFnLoadPerkData->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPerkData, &LoadPerkData_Parms, NULL );

	pFnLoadPerkData->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.LoadTierUnlockFromConfig
// [0x00422401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPerk::LoadTierUnlockFromConfig ( )
{
	static UFunction* pFnLoadTierUnlockFromConfig = NULL;

	if ( ! pFnLoadTierUnlockFromConfig )
		pFnLoadTierUnlockFromConfig = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.LoadTierUnlockFromConfig" );

	AKFPerk_execLoadTierUnlockFromConfig_Parms LoadTierUnlockFromConfig_Parms;

	pFnLoadTierUnlockFromConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadTierUnlockFromConfig, &LoadTierUnlockFromConfig_Parms, NULL );

	pFnLoadTierUnlockFromConfig->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.LoadPerk
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPerk::LoadPerk ( )
{
	static UFunction* pFnLoadPerk = NULL;

	if ( ! pFnLoadPerk )
		pFnLoadPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.LoadPerk" );

	AKFPerk_execLoadPerk_Parms LoadPerk_Parms;

	pFnLoadPerk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadPerk, &LoadPerk_Parms, NULL );

	pFnLoadPerk->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk.CheckOwnerPawn
// [0x00080501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPerk::CheckOwnerPawn ( )
{
	static UFunction* pFnCheckOwnerPawn = NULL;

	if ( ! pFnCheckOwnerPawn )
		pFnCheckOwnerPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk.CheckOwnerPawn" );

	AKFPerk_execCheckOwnerPawn_Parms CheckOwnerPawn_Parms;

	pFnCheckOwnerPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckOwnerPawn, &CheckOwnerPawn_Parms, NULL );

	pFnCheckOwnerPawn->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk_Berserker.LogPerkSkills
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::LogPerkSkills ( )
{
	static UFunction* pFnLogPerkSkills = NULL;

	if ( ! pFnLogPerkSkills )
		pFnLogPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.LogPerkSkills" );

	AKFPerk_Berserker_execLogPerkSkills_Parms LogPerkSkills_Parms;

	this->ProcessEvent ( pFnLogPerkSkills, &LogPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetPerkLensEffect
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::GetPerkLensEffect ( )
{
	static UFunction* pFnGetPerkLensEffect = NULL;

	if ( ! pFnGetPerkLensEffect )
		pFnGetPerkLensEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetPerkLensEffect" );

	AKFPerk_Berserker_execGetPerkLensEffect_Parms GetPerkLensEffect_Parms;

	this->ProcessEvent ( pFnGetPerkLensEffect, &GetPerkLensEffect_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ShouldUseFastInstigatorDilation
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Berserker::eventShouldUseFastInstigatorDilation ( )
{
	static UFunction* pFnShouldUseFastInstigatorDilation = NULL;

	if ( ! pFnShouldUseFastInstigatorDilation )
		pFnShouldUseFastInstigatorDilation = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ShouldUseFastInstigatorDilation" );

	AKFPerk_Berserker_eventShouldUseFastInstigatorDilation_Parms ShouldUseFastInstigatorDilation_Parms;

	this->ProcessEvent ( pFnShouldUseFastInstigatorDilation, &ShouldUseFastInstigatorDilation_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsFastInZedTime
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::IsFastInZedTime ( )
{
	static UFunction* pFnIsFastInZedTime = NULL;

	if ( ! pFnIsFastInZedTime )
		pFnIsFastInZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsFastInZedTime" );

	AKFPerk_Berserker_execIsFastInZedTime_Parms IsFastInZedTime_Parms;

	this->ProcessEvent ( pFnIsFastInZedTime, &IsFastInZedTime_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.CouldSpartanBeActive
// [0x00040903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPerk_Berserker::eventCouldSpartanBeActive ( )
{
	static UFunction* pFnCouldSpartanBeActive = NULL;

	if ( ! pFnCouldSpartanBeActive )
		pFnCouldSpartanBeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.CouldSpartanBeActive" );

	AKFPerk_Berserker_eventCouldSpartanBeActive_Parms CouldSpartanBeActive_Parms;

	this->ProcessEvent ( pFnCouldSpartanBeActive, &CouldSpartanBeActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsSpartanActive
// [0x00040903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPerk_Berserker::eventIsSpartanActive ( )
{
	static UFunction* pFnIsSpartanActive = NULL;

	if ( ! pFnIsSpartanActive )
		pFnIsSpartanActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsSpartanActive" );

	AKFPerk_Berserker_eventIsSpartanActive_Parms IsSpartanActive_Parms;

	this->ProcessEvent ( pFnIsSpartanActive, &IsSpartanActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsRageActive
// [0x00040903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPerk_Berserker::eventIsRageActive ( )
{
	static UFunction* pFnIsRageActive = NULL;

	if ( ! pFnIsRageActive )
		pFnIsRageActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsRageActive" );

	AKFPerk_Berserker_eventIsRageActive_Parms IsRageActive_Parms;

	this->ProcessEvent ( pFnIsRageActive, &IsRageActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.CanNotBeGrabbed
// [0x00020002] 
// Parameters infos:

void AKFPerk_Berserker::CanNotBeGrabbed ( )
{
	static UFunction* pFnCanNotBeGrabbed = NULL;

	if ( ! pFnCanNotBeGrabbed )
		pFnCanNotBeGrabbed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.CanNotBeGrabbed" );

	AKFPerk_Berserker_execCanNotBeGrabbed_Parms CanNotBeGrabbed_Parms;

	this->ProcessEvent ( pFnCanNotBeGrabbed, &CanNotBeGrabbed_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsFuryActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::IsFuryActive ( )
{
	static UFunction* pFnIsFuryActive = NULL;

	if ( ! pFnIsFuryActive )
		pFnIsFuryActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsFuryActive" );

	AKFPerk_Berserker_execIsFuryActive_Parms IsFuryActive_Parms;

	this->ProcessEvent ( pFnIsFuryActive, &IsFuryActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsSmashActive
// [0x00080903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPerk_Berserker::eventIsSmashActive ( )
{
	static UFunction* pFnIsSmashActive = NULL;

	if ( ! pFnIsSmashActive )
		pFnIsSmashActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsSmashActive" );

	AKFPerk_Berserker_eventIsSmashActive_Parms IsSmashActive_Parms;

	this->ProcessEvent ( pFnIsSmashActive, &IsSmashActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.HasNightVision
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::HasNightVision ( )
{
	static UFunction* pFnHasNightVision = NULL;

	if ( ! pFnHasNightVision )
		pFnHasNightVision = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.HasNightVision" );

	AKFPerk_Berserker_execHasNightVision_Parms HasNightVision_Parms;

	this->ProcessEvent ( pFnHasNightVision, &HasNightVision_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetParryActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Berserker::eventGetParryActive ( )
{
	static UFunction* pFnGetParryActive = NULL;

	if ( ! pFnGetParryActive )
		pFnGetParryActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetParryActive" );

	AKFPerk_Berserker_eventGetParryActive_Parms GetParryActive_Parms;

	this->ProcessEvent ( pFnGetParryActive, &GetParryActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsResistanceActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::IsResistanceActive ( )
{
	static UFunction* pFnIsResistanceActive = NULL;

	if ( ! pFnIsResistanceActive )
		pFnIsResistanceActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsResistanceActive" );

	AKFPerk_Berserker_execIsResistanceActive_Parms IsResistanceActive_Parms;

	this->ProcessEvent ( pFnIsResistanceActive, &IsResistanceActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsParryActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::IsParryActive ( )
{
	static UFunction* pFnIsParryActive = NULL;

	if ( ! pFnIsParryActive )
		pFnIsParryActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsParryActive" );

	AKFPerk_Berserker_execIsParryActive_Parms IsParryActive_Parms;

	this->ProcessEvent ( pFnIsParryActive, &IsParryActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.SetSuccessfullParry
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::SetSuccessfullParry ( )
{
	static UFunction* pFnSetSuccessfullParry = NULL;

	if ( ! pFnSetSuccessfullParry )
		pFnSetSuccessfullParry = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.SetSuccessfullParry" );

	AKFPerk_Berserker_execSetSuccessfullParry_Parms SetSuccessfullParry_Parms;

	this->ProcessEvent ( pFnSetSuccessfullParry, &SetSuccessfullParry_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.PerkNeedsTick
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::PerkNeedsTick ( )
{
	static UFunction* pFnPerkNeedsTick = NULL;

	if ( ! pFnPerkNeedsTick )
		pFnPerkNeedsTick = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.PerkNeedsTick" );

	AKFPerk_Berserker_execPerkNeedsTick_Parms PerkNeedsTick_Parms;

	this->ProcessEvent ( pFnPerkNeedsTick, &PerkNeedsTick_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsSpeedActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::IsSpeedActive ( )
{
	static UFunction* pFnIsSpeedActive = NULL;

	if ( ! pFnIsSpeedActive )
		pFnIsSpeedActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsSpeedActive" );

	AKFPerk_Berserker_execIsSpeedActive_Parms IsSpeedActive_Parms;

	this->ProcessEvent ( pFnIsSpeedActive, &IsSpeedActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsVampireActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::IsVampireActive ( )
{
	static UFunction* pFnIsVampireActive = NULL;

	if ( ! pFnIsVampireActive )
		pFnIsVampireActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsVampireActive" );

	AKFPerk_Berserker_execIsVampireActive_Parms IsVampireActive_Parms;

	this->ProcessEvent ( pFnIsVampireActive, &IsVampireActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsNinjaActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::IsNinjaActive ( )
{
	static UFunction* pFnIsNinjaActive = NULL;

	if ( ! pFnIsNinjaActive )
		pFnIsNinjaActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsNinjaActive" );

	AKFPerk_Berserker_execIsNinjaActive_Parms IsNinjaActive_Parms;

	this->ProcessEvent ( pFnIsNinjaActive, &IsNinjaActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.IsFortitudeActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::IsFortitudeActive ( )
{
	static UFunction* pFnIsFortitudeActive = NULL;

	if ( ! pFnIsFortitudeActive )
		pFnIsFortitudeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.IsFortitudeActive" );

	AKFPerk_Berserker_execIsFortitudeActive_Parms IsFortitudeActive_Parms;

	this->ProcessEvent ( pFnIsFortitudeActive, &IsFortitudeActive_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetParryDamageModifier
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetParryDamageModifier ( )
{
	static UFunction* pFnGetParryDamageModifier = NULL;

	if ( ! pFnGetParryDamageModifier )
		pFnGetParryDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetParryDamageModifier" );

	AKFPerk_Berserker_execGetParryDamageModifier_Parms GetParryDamageModifier_Parms;

	this->ProcessEvent ( pFnGetParryDamageModifier, &GetParryDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetVampireAttackSpeedModifier
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetVampireAttackSpeedModifier ( )
{
	static UFunction* pFnGetVampireAttackSpeedModifier = NULL;

	if ( ! pFnGetVampireAttackSpeedModifier )
		pFnGetVampireAttackSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetVampireAttackSpeedModifier" );

	AKFPerk_Berserker_execGetVampireAttackSpeedModifier_Parms GetVampireAttackSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetVampireAttackSpeedModifier, &GetVampireAttackSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetSmashHeadDamageModifier
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetSmashHeadDamageModifier ( )
{
	static UFunction* pFnGetSmashHeadDamageModifier = NULL;

	if ( ! pFnGetSmashHeadDamageModifier )
		pFnGetSmashHeadDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetSmashHeadDamageModifier" );

	AKFPerk_Berserker_execGetSmashHeadDamageModifier_Parms GetSmashHeadDamageModifier_Parms;

	this->ProcessEvent ( pFnGetSmashHeadDamageModifier, &GetSmashHeadDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetSpeedDamageModifier
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetSpeedDamageModifier ( )
{
	static UFunction* pFnGetSpeedDamageModifier = NULL;

	if ( ! pFnGetSpeedDamageModifier )
		pFnGetSpeedDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetSpeedDamageModifier" );

	AKFPerk_Berserker_execGetSpeedDamageModifier_Parms GetSpeedDamageModifier_Parms;

	this->ProcessEvent ( pFnGetSpeedDamageModifier, &GetSpeedDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetZedTimeModifier" );

	AKFPerk_Berserker_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetRageFleeDistance
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetRageFleeDistance ( )
{
	static UFunction* pFnGetRageFleeDistance = NULL;

	if ( ! pFnGetRageFleeDistance )
		pFnGetRageFleeDistance = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetRageFleeDistance" );

	AKFPerk_Berserker_execGetRageFleeDistance_Parms GetRageFleeDistance_Parms;

	this->ProcessEvent ( pFnGetRageFleeDistance, &GetRageFleeDistance_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetRageFleeDuration
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetRageFleeDuration ( )
{
	static UFunction* pFnGetRageFleeDuration = NULL;

	if ( ! pFnGetRageFleeDuration )
		pFnGetRageFleeDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetRageFleeDuration" );

	AKFPerk_Berserker_execGetRageFleeDuration_Parms GetRageFleeDuration_Parms;

	this->ProcessEvent ( pFnGetRageFleeDuration, &GetRageFleeDuration_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetRageRadius
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetRageRadius ( )
{
	static UFunction* pFnGetRageRadius = NULL;

	if ( ! pFnGetRageRadius )
		pFnGetRageRadius = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetRageRadius" );

	AKFPerk_Berserker_execGetRageRadius_Parms GetRageRadius_Parms;

	this->ProcessEvent ( pFnGetRageRadius, &GetRageRadius_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.NotifyZedTimeStarted
// [0x00020002] 
// Parameters infos:

void AKFPerk_Berserker::NotifyZedTimeStarted ( )
{
	static UFunction* pFnNotifyZedTimeStarted = NULL;

	if ( ! pFnNotifyZedTimeStarted )
		pFnNotifyZedTimeStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.NotifyZedTimeStarted" );

	AKFPerk_Berserker_execNotifyZedTimeStarted_Parms NotifyZedTimeStarted_Parms;

	this->ProcessEvent ( pFnNotifyZedTimeStarted, &NotifyZedTimeStarted_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetSirenScreamStrength
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::GetSirenScreamStrength ( )
{
	static UFunction* pFnGetSirenScreamStrength = NULL;

	if ( ! pFnGetSirenScreamStrength )
		pFnGetSirenScreamStrength = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetSirenScreamStrength" );

	AKFPerk_Berserker_execGetSirenScreamStrength_Parms GetSirenScreamStrength_Parms;

	this->ProcessEvent ( pFnGetSirenScreamStrength, &GetSirenScreamStrength_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.CanEarnSmallRadiusKillXP
// [0x00020002] 
// Parameters infos:

void AKFPerk_Berserker::CanEarnSmallRadiusKillXP ( )
{
	static UFunction* pFnCanEarnSmallRadiusKillXP = NULL;

	if ( ! pFnCanEarnSmallRadiusKillXP )
		pFnCanEarnSmallRadiusKillXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.CanEarnSmallRadiusKillXP" );

	AKFPerk_Berserker_execCanEarnSmallRadiusKillXP_Parms CanEarnSmallRadiusKillXP_Parms;

	this->ProcessEvent ( pFnCanEarnSmallRadiusKillXP, &CanEarnSmallRadiusKillXP_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetSmallRadiusKillDistanceSQ
// [0x00022002] 
// Parameters infos:

void AKFPerk_Berserker::GetSmallRadiusKillDistanceSQ ( )
{
	static UFunction* pFnGetSmallRadiusKillDistanceSQ = NULL;

	if ( ! pFnGetSmallRadiusKillDistanceSQ )
		pFnGetSmallRadiusKillDistanceSQ = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetSmallRadiusKillDistanceSQ" );

	AKFPerk_Berserker_execGetSmallRadiusKillDistanceSQ_Parms GetSmallRadiusKillDistanceSQ_Parms;

	this->ProcessEvent ( pFnGetSmallRadiusKillDistanceSQ, &GetSmallRadiusKillDistanceSQ_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetSmallRadiusKillXP
// [0x00022002] 
// Parameters infos:

void AKFPerk_Berserker::GetSmallRadiusKillXP ( )
{
	static UFunction* pFnGetSmallRadiusKillXP = NULL;

	if ( ! pFnGetSmallRadiusKillXP )
		pFnGetSmallRadiusKillXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetSmallRadiusKillXP" );

	AKFPerk_Berserker_execGetSmallRadiusKillXP_Parms GetSmallRadiusKillXP_Parms;

	this->ProcessEvent ( pFnGetSmallRadiusKillXP, &GetSmallRadiusKillXP_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetSmashStumbleModifier
// [0x00022003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetSmashStumbleModifier ( )
{
	static UFunction* pFnGetSmashStumbleModifier = NULL;

	if ( ! pFnGetSmashStumbleModifier )
		pFnGetSmashStumbleModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetSmashStumbleModifier" );

	AKFPerk_Berserker_execGetSmashStumbleModifier_Parms GetSmashStumbleModifier_Parms;

	this->ProcessEvent ( pFnGetSmashStumbleModifier, &GetSmashStumbleModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk_Berserker::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetStumblePowerModifier" );

	AKFPerk_Berserker_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifyScreamEffectDuration
// [0x00420002] 
// Parameters infos:

void AKFPerk_Berserker::ModifyScreamEffectDuration ( )
{
	static UFunction* pFnModifyScreamEffectDuration = NULL;

	if ( ! pFnModifyScreamEffectDuration )
		pFnModifyScreamEffectDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifyScreamEffectDuration" );

	AKFPerk_Berserker_execModifyScreamEffectDuration_Parms ModifyScreamEffectDuration_Parms;

	this->ProcessEvent ( pFnModifyScreamEffectDuration, &ModifyScreamEffectDuration_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ParryTimer
// [0x00020102] 
// Parameters infos:

void AKFPerk_Berserker::ParryTimer ( )
{
	static UFunction* pFnParryTimer = NULL;

	if ( ! pFnParryTimer )
		pFnParryTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ParryTimer" );

	AKFPerk_Berserker_execParryTimer_Parms ParryTimer_Parms;

	this->ProcessEvent ( pFnParryTimer, &ParryTimer_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifyLightAttackDamage
// [0x00420002] 
// Parameters infos:

void AKFPerk_Berserker::ModifyLightAttackDamage ( )
{
	static UFunction* pFnModifyLightAttackDamage = NULL;

	if ( ! pFnModifyLightAttackDamage )
		pFnModifyLightAttackDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifyLightAttackDamage" );

	AKFPerk_Berserker_execModifyLightAttackDamage_Parms ModifyLightAttackDamage_Parms;

	this->ProcessEvent ( pFnModifyLightAttackDamage, &ModifyLightAttackDamage_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifyHardAttackDamage
// [0x00420002] 
// Parameters infos:

void AKFPerk_Berserker::ModifyHardAttackDamage ( )
{
	static UFunction* pFnModifyHardAttackDamage = NULL;

	if ( ! pFnModifyHardAttackDamage )
		pFnModifyHardAttackDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifyHardAttackDamage" );

	AKFPerk_Berserker_execModifyHardAttackDamage_Parms ModifyHardAttackDamage_Parms;

	this->ProcessEvent ( pFnModifyHardAttackDamage, &ModifyHardAttackDamage_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.AddVampireHealth
// [0x00020002] 
// Parameters infos:

void AKFPerk_Berserker::AddVampireHealth ( )
{
	static UFunction* pFnAddVampireHealth = NULL;

	if ( ! pFnAddVampireHealth )
		pFnAddVampireHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.AddVampireHealth" );

	AKFPerk_Berserker_execAddVampireHealth_Parms AddVampireHealth_Parms;

	this->ProcessEvent ( pFnAddVampireHealth, &AddVampireHealth_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifyHealth
// [0x00420002] 
// Parameters infos:

void AKFPerk_Berserker::ModifyHealth ( )
{
	static UFunction* pFnModifyHealth = NULL;

	if ( ! pFnModifyHealth )
		pFnModifyHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifyHealth" );

	AKFPerk_Berserker_execModifyHealth_Parms ModifyHealth_Parms;

	this->ProcessEvent ( pFnModifyHealth, &ModifyHealth_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_Berserker::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetPassiveStrings" );

	AKFPerk_Berserker_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifyBloatBileDoT
// [0x00420002] 
// Parameters infos:

void AKFPerk_Berserker::ModifyBloatBileDoT ( )
{
	static UFunction* pFnModifyBloatBileDoT = NULL;

	if ( ! pFnModifyBloatBileDoT )
		pFnModifyBloatBileDoT = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifyBloatBileDoT" );

	AKFPerk_Berserker_execModifyBloatBileDoT_Parms ModifyBloatBileDoT_Parms;

	this->ProcessEvent ( pFnModifyBloatBileDoT, &ModifyBloatBileDoT_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetPassiveDamageResistance
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetPassiveDamageResistance ( )
{
	static UFunction* pFnGetPassiveDamageResistance = NULL;

	if ( ! pFnGetPassiveDamageResistance )
		pFnGetPassiveDamageResistance = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetPassiveDamageResistance" );

	AKFPerk_Berserker_execGetPassiveDamageResistance_Parms GetPassiveDamageResistance_Parms;

	this->ProcessEvent ( pFnGetPassiveDamageResistance, &GetPassiveDamageResistance_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifyDamageTaken
// [0x00424002] 
// Parameters infos:

void AKFPerk_Berserker::ModifyDamageTaken ( )
{
	static UFunction* pFnModifyDamageTaken = NULL;

	if ( ! pFnModifyDamageTaken )
		pFnModifyDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifyDamageTaken" );

	AKFPerk_Berserker_execModifyDamageTaken_Parms ModifyDamageTaken_Parms;

	this->ProcessEvent ( pFnModifyDamageTaken, &ModifyDamageTaken_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetNinjaSprintModifier
// [0x00022103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetNinjaSprintModifier ( )
{
	static UFunction* pFnGetNinjaSprintModifier = NULL;

	if ( ! pFnGetNinjaSprintModifier )
		pFnGetNinjaSprintModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetNinjaSprintModifier" );

	AKFPerk_Berserker_execGetNinjaSprintModifier_Parms GetNinjaSprintModifier_Parms;

	this->ProcessEvent ( pFnGetNinjaSprintModifier, &GetNinjaSprintModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifySprintSpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk_Berserker::ModifySprintSpeed ( )
{
	static UFunction* pFnModifySprintSpeed = NULL;

	if ( ! pFnModifySprintSpeed )
		pFnModifySprintSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifySprintSpeed" );

	AKFPerk_Berserker_execModifySprintSpeed_Parms ModifySprintSpeed_Parms;

	this->ProcessEvent ( pFnModifySprintSpeed, &ModifySprintSpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifySpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk_Berserker::ModifySpeed ( )
{
	static UFunction* pFnModifySpeed = NULL;

	if ( ! pFnModifySpeed )
		pFnModifySpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifySpeed" );

	AKFPerk_Berserker_execModifySpeed_Parms ModifySpeed_Parms;

	this->ProcessEvent ( pFnModifySpeed, &ModifySpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.GetFurySpeed
// [0x00022103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Berserker::GetFurySpeed ( )
{
	static UFunction* pFnGetFurySpeed = NULL;

	if ( ! pFnGetFurySpeed )
		pFnGetFurySpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.GetFurySpeed" );

	AKFPerk_Berserker_execGetFurySpeed_Parms GetFurySpeed_Parms;

	this->ProcessEvent ( pFnGetFurySpeed, &GetFurySpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifyMeleeAttackSpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk_Berserker::ModifyMeleeAttackSpeed ( )
{
	static UFunction* pFnModifyMeleeAttackSpeed = NULL;

	if ( ! pFnModifyMeleeAttackSpeed )
		pFnModifyMeleeAttackSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifyMeleeAttackSpeed" );

	AKFPerk_Berserker_execModifyMeleeAttackSpeed_Parms ModifyMeleeAttackSpeed_Parms;

	this->ProcessEvent ( pFnModifyMeleeAttackSpeed, &ModifyMeleeAttackSpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_Berserker::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ModifyDamageGiven" );

	AKFPerk_Berserker_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Berserker::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.Tick" );

	AKFPerk_Berserker_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ClientClearPerkEffects
// [0x010201C2] 
// Parameters infos:

void AKFPerk_Berserker::ClientClearPerkEffects ( )
{
	static UFunction* pFnClientClearPerkEffects = NULL;

	if ( ! pFnClientClearPerkEffects )
		pFnClientClearPerkEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ClientClearPerkEffects" );

	AKFPerk_Berserker_execClientClearPerkEffects_Parms ClientClearPerkEffects_Parms;

	this->ProcessEvent ( pFnClientClearPerkEffects, &ClientClearPerkEffects_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ClearPerkEffects
// [0x00020002] 
// Parameters infos:

void AKFPerk_Berserker::ClearPerkEffects ( )
{
	static UFunction* pFnClearPerkEffects = NULL;

	if ( ! pFnClearPerkEffects )
		pFnClearPerkEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ClearPerkEffects" );

	AKFPerk_Berserker_execClearPerkEffects_Parms ClearPerkEffects_Parms;

	this->ProcessEvent ( pFnClearPerkEffects, &ClearPerkEffects_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.PostSkillUpdate
// [0x00080902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Berserker::eventPostSkillUpdate ( )
{
	static UFunction* pFnPostSkillUpdate = NULL;

	if ( ! pFnPostSkillUpdate )
		pFnPostSkillUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.PostSkillUpdate" );

	AKFPerk_Berserker_eventPostSkillUpdate_Parms PostSkillUpdate_Parms;

	this->ProcessEvent ( pFnPostSkillUpdate, &PostSkillUpdate_Parms, NULL );
};

// Function KFGame.KFPerk_Berserker.ApplySkillsToPawn
// [0x00020002] 
// Parameters infos:

void AKFPerk_Berserker::ApplySkillsToPawn ( )
{
	static UFunction* pFnApplySkillsToPawn = NULL;

	if ( ! pFnApplySkillsToPawn )
		pFnApplySkillsToPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Berserker.ApplySkillsToPawn" );

	AKFPerk_Berserker_execApplySkillsToPawn_Parms ApplySkillsToPawn_Parms;

	this->ProcessEvent ( pFnApplySkillsToPawn, &ApplySkillsToPawn_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.LogPerkSkills
// [0x00020102] 
// Parameters infos:

void AKFPerk_Commando::LogPerkSkills ( )
{
	static UFunction* pFnLogPerkSkills = NULL;

	if ( ! pFnLogPerkSkills )
		pFnLogPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.LogPerkSkills" );

	AKFPerk_Commando_execLogPerkSkills_Parms LogPerkSkills_Parms;

	this->ProcessEvent ( pFnLogPerkSkills, &LogPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.LogTacticalReload
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::LogTacticalReload ( )
{
	static UFunction* pFnLogTacticalReload = NULL;

	if ( ! pFnLogTacticalReload )
		pFnLogTacticalReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.LogTacticalReload" );

	AKFPerk_Commando_execLogTacticalReload_Parms LogTacticalReload_Parms;

	this->ProcessEvent ( pFnLogTacticalReload, &LogTacticalReload_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.DrawZedHealthbar
// [0x00820102] 
// Parameters infos:

void AKFPerk_Commando::DrawZedHealthbar ( )
{
	static UFunction* pFnDrawZedHealthbar = NULL;

	if ( ! pFnDrawZedHealthbar )
		pFnDrawZedHealthbar = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.DrawZedHealthbar" );

	AKFPerk_Commando_execDrawZedHealthbar_Parms DrawZedHealthbar_Parms;

	this->ProcessEvent ( pFnDrawZedHealthbar, &DrawZedHealthbar_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.DrawSpecialPerkHUD
// [0x00820102] 
// Parameters infos:

void AKFPerk_Commando::DrawSpecialPerkHUD ( )
{
	static UFunction* pFnDrawSpecialPerkHUD = NULL;

	if ( ! pFnDrawSpecialPerkHUD )
		pFnDrawSpecialPerkHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.DrawSpecialPerkHUD" );

	AKFPerk_Commando_execDrawSpecialPerkHUD_Parms DrawSpecialPerkHUD_Parms;

	this->ProcessEvent ( pFnDrawSpecialPerkHUD, &DrawSpecialPerkHUD_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetStalkerKillXP
// [0x00022102] 
// Parameters infos:

void AKFPerk_Commando::GetStalkerKillXP ( )
{
	static UFunction* pFnGetStalkerKillXP = NULL;

	if ( ! pFnGetStalkerKillXP )
		pFnGetStalkerKillXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetStalkerKillXP" );

	AKFPerk_Commando_execGetStalkerKillXP_Parms GetStalkerKillXP_Parms;

	this->ProcessEvent ( pFnGetStalkerKillXP, &GetStalkerKillXP_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_Commando::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetPassiveStrings" );

	AKFPerk_Commando_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsProfessionalActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsProfessionalActive ( )
{
	static UFunction* pFnIsProfessionalActive = NULL;

	if ( ! pFnIsProfessionalActive )
		pFnIsProfessionalActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsProfessionalActive" );

	AKFPerk_Commando_execIsProfessionalActive_Parms IsProfessionalActive_Parms;

	this->ProcessEvent ( pFnIsProfessionalActive, &IsProfessionalActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsAmmoVestActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsAmmoVestActive ( )
{
	static UFunction* pFnIsAmmoVestActive = NULL;

	if ( ! pFnIsAmmoVestActive )
		pFnIsAmmoVestActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsAmmoVestActive" );

	AKFPerk_Commando_execIsAmmoVestActive_Parms IsAmmoVestActive_Parms;

	this->ProcessEvent ( pFnIsAmmoVestActive, &IsAmmoVestActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsEatLeadActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsEatLeadActive ( )
{
	static UFunction* pFnIsEatLeadActive = NULL;

	if ( ! pFnIsEatLeadActive )
		pFnIsEatLeadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsEatLeadActive" );

	AKFPerk_Commando_execIsEatLeadActive_Parms IsEatLeadActive_Parms;

	this->ProcessEvent ( pFnIsEatLeadActive, &IsEatLeadActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsHealthIncreaseActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsHealthIncreaseActive ( )
{
	static UFunction* pFnIsHealthIncreaseActive = NULL;

	if ( ! pFnIsHealthIncreaseActive )
		pFnIsHealthIncreaseActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsHealthIncreaseActive" );

	AKFPerk_Commando_execIsHealthIncreaseActive_Parms IsHealthIncreaseActive_Parms;

	this->ProcessEvent ( pFnIsHealthIncreaseActive, &IsHealthIncreaseActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsImpactActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsImpactActive ( )
{
	static UFunction* pFnIsImpactActive = NULL;

	if ( ! pFnIsImpactActive )
		pFnIsImpactActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsImpactActive" );

	AKFPerk_Commando_execIsImpactActive_Parms IsImpactActive_Parms;

	this->ProcessEvent ( pFnIsImpactActive, &IsImpactActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsTacticalReloadActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsTacticalReloadActive ( )
{
	static UFunction* pFnIsTacticalReloadActive = NULL;

	if ( ! pFnIsTacticalReloadActive )
		pFnIsTacticalReloadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsTacticalReloadActive" );

	AKFPerk_Commando_execIsTacticalReloadActive_Parms IsTacticalReloadActive_Parms;

	this->ProcessEvent ( pFnIsTacticalReloadActive, &IsTacticalReloadActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsHollowPointsActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsHollowPointsActive ( )
{
	static UFunction* pFnIsHollowPointsActive = NULL;

	if ( ! pFnIsHollowPointsActive )
		pFnIsHollowPointsActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsHollowPointsActive" );

	AKFPerk_Commando_execIsHollowPointsActive_Parms IsHollowPointsActive_Parms;

	this->ProcessEvent ( pFnIsHollowPointsActive, &IsHollowPointsActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsBackupActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsBackupActive ( )
{
	static UFunction* pFnIsBackupActive = NULL;

	if ( ! pFnIsBackupActive )
		pFnIsBackupActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsBackupActive" );

	AKFPerk_Commando_execIsBackupActive_Parms IsBackupActive_Parms;

	this->ProcessEvent ( pFnIsBackupActive, &IsBackupActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsLargeMagActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::IsLargeMagActive ( )
{
	static UFunction* pFnIsLargeMagActive = NULL;

	if ( ! pFnIsLargeMagActive )
		pFnIsLargeMagActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsLargeMagActive" );

	AKFPerk_Commando_execIsLargeMagActive_Parms IsLargeMagActive_Parms;

	this->ProcessEvent ( pFnIsLargeMagActive, &IsLargeMagActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.CouldRapidFireActive
// [0x00080102] 
// Parameters infos:

void AKFPerk_Commando::CouldRapidFireActive ( )
{
	static UFunction* pFnCouldRapidFireActive = NULL;

	if ( ! pFnCouldRapidFireActive )
		pFnCouldRapidFireActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.CouldRapidFireActive" );

	AKFPerk_Commando_execCouldRapidFireActive_Parms CouldRapidFireActive_Parms;

	this->ProcessEvent ( pFnCouldRapidFireActive, &CouldRapidFireActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsRapidFireActive
// [0x00080102] 
// Parameters infos:

void AKFPerk_Commando::IsRapidFireActive ( )
{
	static UFunction* pFnIsRapidFireActive = NULL;

	if ( ! pFnIsRapidFireActive )
		pFnIsRapidFireActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsRapidFireActive" );

	AKFPerk_Commando_execIsRapidFireActive_Parms IsRapidFireActive_Parms;

	this->ProcessEvent ( pFnIsRapidFireActive, &IsRapidFireActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.HasNightVision
// [0x00020102] 
// Parameters infos:

void AKFPerk_Commando::HasNightVision ( )
{
	static UFunction* pFnHasNightVision = NULL;

	if ( ! pFnHasNightVision )
		pFnHasNightVision = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.HasNightVision" );

	AKFPerk_Commando_execHasNightVision_Parms HasNightVision_Parms;

	this->ProcessEvent ( pFnHasNightVision, &HasNightVision_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.IsCallOutActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Commando::IsCallOutActive ( )
{
	static UFunction* pFnIsCallOutActive = NULL;

	if ( ! pFnIsCallOutActive )
		pFnIsCallOutActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.IsCallOutActive" );

	AKFPerk_Commando_execIsCallOutActive_Parms IsCallOutActive_Parms;

	this->ProcessEvent ( pFnIsCallOutActive, &IsCallOutActive_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetHealthArmorModifier
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::GetHealthArmorModifier ( )
{
	static UFunction* pFnGetHealthArmorModifier = NULL;

	if ( ! pFnGetHealthArmorModifier )
		pFnGetHealthArmorModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetHealthArmorModifier" );

	AKFPerk_Commando_execGetHealthArmorModifier_Parms GetHealthArmorModifier_Parms;

	this->ProcessEvent ( pFnGetHealthArmorModifier, &GetHealthArmorModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetHollowPointRecoilModifier
// [0x00022103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::GetHollowPointRecoilModifier ( )
{
	static UFunction* pFnGetHollowPointRecoilModifier = NULL;

	if ( ! pFnGetHollowPointRecoilModifier )
		pFnGetHollowPointRecoilModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetHollowPointRecoilModifier" );

	AKFPerk_Commando_execGetHollowPointRecoilModifier_Parms GetHollowPointRecoilModifier_Parms;

	this->ProcessEvent ( pFnGetHollowPointRecoilModifier, &GetHollowPointRecoilModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.ModifyRecoil
// [0x00420102] 
// Parameters infos:

void AKFPerk_Commando::ModifyRecoil ( )
{
	static UFunction* pFnModifyRecoil = NULL;

	if ( ! pFnModifyRecoil )
		pFnModifyRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.ModifyRecoil" );

	AKFPerk_Commando_execModifyRecoil_Parms ModifyRecoil_Parms;

	this->ProcessEvent ( pFnModifyRecoil, &ModifyRecoil_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetBackupWeaponSwitchModifier
// [0x00022103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::GetBackupWeaponSwitchModifier ( )
{
	static UFunction* pFnGetBackupWeaponSwitchModifier = NULL;

	if ( ! pFnGetBackupWeaponSwitchModifier )
		pFnGetBackupWeaponSwitchModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetBackupWeaponSwitchModifier" );

	AKFPerk_Commando_execGetBackupWeaponSwitchModifier_Parms GetBackupWeaponSwitchModifier_Parms;

	this->ProcessEvent ( pFnGetBackupWeaponSwitchModifier, &GetBackupWeaponSwitchModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.ModifyWeaponSwitchTime
// [0x00420102] 
// Parameters infos:

void AKFPerk_Commando::ModifyWeaponSwitchTime ( )
{
	static UFunction* pFnModifyWeaponSwitchTime = NULL;

	if ( ! pFnModifyWeaponSwitchTime )
		pFnModifyWeaponSwitchTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.ModifyWeaponSwitchTime" );

	AKFPerk_Commando_execModifyWeaponSwitchTime_Parms ModifyWeaponSwitchTime_Parms;

	this->ProcessEvent ( pFnModifyWeaponSwitchTime, &ModifyWeaponSwitchTime_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk_Commando::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetStumblePowerModifier" );

	AKFPerk_Commando_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Commando::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetZedTimeModifier" );

	AKFPerk_Commando_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.Is9mm
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::Is9mm ( )
{
	static UFunction* pFnIs9mm = NULL;

	if ( ! pFnIs9mm )
		pFnIs9mm = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.Is9mm" );

	AKFPerk_Commando_execIs9mm_Parms Is9mm_Parms;

	this->ProcessEvent ( pFnIs9mm, &Is9mm_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.ModifyMaxSpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_Commando::ModifyMaxSpareAmmoAmount ( )
{
	static UFunction* pFnModifyMaxSpareAmmoAmount = NULL;

	if ( ! pFnModifyMaxSpareAmmoAmount )
		pFnModifyMaxSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.ModifyMaxSpareAmmoAmount" );

	AKFPerk_Commando_execModifyMaxSpareAmmoAmount_Parms ModifyMaxSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifyMaxSpareAmmoAmount, &ModifyMaxSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.ModifyMagSizeAndNumber
// [0x00424102] 
// Parameters infos:

void AKFPerk_Commando::ModifyMagSizeAndNumber ( )
{
	static UFunction* pFnModifyMagSizeAndNumber = NULL;

	if ( ! pFnModifyMagSizeAndNumber )
		pFnModifyMagSizeAndNumber = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.ModifyMagSizeAndNumber" );

	AKFPerk_Commando_execModifyMagSizeAndNumber_Parms ModifyMagSizeAndNumber_Parms;

	this->ProcessEvent ( pFnModifyMagSizeAndNumber, &ModifyMagSizeAndNumber_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetUsingTactialReload
// [0x00020102] 
// Parameters infos:

void AKFPerk_Commando::GetUsingTactialReload ( )
{
	static UFunction* pFnGetUsingTactialReload = NULL;

	if ( ! pFnGetUsingTactialReload )
		pFnGetUsingTactialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetUsingTactialReload" );

	AKFPerk_Commando_execGetUsingTactialReload_Parms GetUsingTactialReload_Parms;

	this->ProcessEvent ( pFnGetUsingTactialReload, &GetUsingTactialReload_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.ModifyArmor
// [0x00420002] 
// Parameters infos:

void AKFPerk_Commando::ModifyArmor ( )
{
	static UFunction* pFnModifyArmor = NULL;

	if ( ! pFnModifyArmor )
		pFnModifyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.ModifyArmor" );

	AKFPerk_Commando_execModifyArmor_Parms ModifyArmor_Parms;

	this->ProcessEvent ( pFnModifyArmor, &ModifyArmor_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.ModifyHealth
// [0x00420002] 
// Parameters infos:

void AKFPerk_Commando::ModifyHealth ( )
{
	static UFunction* pFnModifyHealth = NULL;

	if ( ! pFnModifyHealth )
		pFnModifyHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.ModifyHealth" );

	AKFPerk_Commando_execModifyHealth_Parms ModifyHealth_Parms;

	this->ProcessEvent ( pFnModifyHealth, &ModifyHealth_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetReloadRateScale
// [0x00020102] 
// Parameters infos:

void AKFPerk_Commando::GetReloadRateScale ( )
{
	static UFunction* pFnGetReloadRateScale = NULL;

	if ( ! pFnGetReloadRateScale )
		pFnGetReloadRateScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetReloadRateScale" );

	AKFPerk_Commando_execGetReloadRateScale_Parms GetReloadRateScale_Parms;

	this->ProcessEvent ( pFnGetReloadRateScale, &GetReloadRateScale_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetExtraReloadSpeed
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Commando::GetExtraReloadSpeed ( )
{
	static UFunction* pFnGetExtraReloadSpeed = NULL;

	if ( ! pFnGetExtraReloadSpeed )
		pFnGetExtraReloadSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetExtraReloadSpeed" );

	AKFPerk_Commando_execGetExtraReloadSpeed_Parms GetExtraReloadSpeed_Parms;

	this->ProcessEvent ( pFnGetExtraReloadSpeed, &GetExtraReloadSpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetZedTimeExtension
// [0x00022102] 
// Parameters infos:

void AKFPerk_Commando::GetZedTimeExtension ( )
{
	static UFunction* pFnGetZedTimeExtension = NULL;

	if ( ! pFnGetZedTimeExtension )
		pFnGetZedTimeExtension = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetZedTimeExtension" );

	AKFPerk_Commando_execGetZedTimeExtension_Parms GetZedTimeExtension_Parms;

	this->ProcessEvent ( pFnGetZedTimeExtension, &GetZedTimeExtension_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.GetCloakDetectionRange
// [0x00020102] 
// Parameters infos:

void AKFPerk_Commando::GetCloakDetectionRange ( )
{
	static UFunction* pFnGetCloakDetectionRange = NULL;

	if ( ! pFnGetCloakDetectionRange )
		pFnGetCloakDetectionRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.GetCloakDetectionRange" );

	AKFPerk_Commando_execGetCloakDetectionRange_Parms GetCloakDetectionRange_Parms;

	this->ProcessEvent ( pFnGetCloakDetectionRange, &GetCloakDetectionRange_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_Commando::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.ModifyDamageGiven" );

	AKFPerk_Commando_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_Commando.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:

void AKFPerk_Commando::SetPlayerDefaults ( )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Commando.SetPlayerDefaults" );

	AKFPerk_Commando_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.LogPerkSkills
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::LogPerkSkills ( )
{
	static UFunction* pFnLogPerkSkills = NULL;

	if ( ! pFnLogPerkSkills )
		pFnLogPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.LogPerkSkills" );

	AKFPerk_Demolitionist_execLogPerkSkills_Parms LogPerkSkills_Parms;

	this->ProcessEvent ( pFnLogPerkSkills, &LogPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetPassiveStrings" );

	AKFPerk_Demolitionist_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetFleshpoundKillXP
// [0x00022102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetFleshpoundKillXP ( )
{
	static UFunction* pFnGetFleshpoundKillXP = NULL;

	if ( ! pFnGetFleshpoundKillXP )
		pFnGetFleshpoundKillXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetFleshpoundKillXP" );

	AKFPerk_Demolitionist_execGetFleshpoundKillXP_Parms GetFleshpoundKillXP_Parms;

	this->ProcessEvent ( pFnGetFleshpoundKillXP, &GetFleshpoundKillXP_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetConcussiveExplosionSound
// [0x00022103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::GetConcussiveExplosionSound ( )
{
	static UFunction* pFnGetConcussiveExplosionSound = NULL;

	if ( ! pFnGetConcussiveExplosionSound )
		pFnGetConcussiveExplosionSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetConcussiveExplosionSound" );

	AKFPerk_Demolitionist_execGetConcussiveExplosionSound_Parms GetConcussiveExplosionSound_Parms;

	this->ProcessEvent ( pFnGetConcussiveExplosionSound, &GetConcussiveExplosionSound_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsConcussiveForceActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::IsConcussiveForceActive ( )
{
	static UFunction* pFnIsConcussiveForceActive = NULL;

	if ( ! pFnIsConcussiveForceActive )
		pFnIsConcussiveForceActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsConcussiveForceActive" );

	AKFPerk_Demolitionist_execIsConcussiveForceActive_Parms IsConcussiveForceActive_Parms;

	this->ProcessEvent ( pFnIsConcussiveForceActive, &IsConcussiveForceActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetLingeringDamageType
// [0x00022002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetLingeringDamageType ( )
{
	static UFunction* pFnGetLingeringDamageType = NULL;

	if ( ! pFnGetLingeringDamageType )
		pFnGetLingeringDamageType = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetLingeringDamageType" );

	AKFPerk_Demolitionist_execGetLingeringDamageType_Parms GetLingeringDamageType_Parms;

	this->ProcessEvent ( pFnGetLingeringDamageType, &GetLingeringDamageType_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetLingeringPoisonDamage
// [0x00022002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetLingeringPoisonDamage ( )
{
	static UFunction* pFnGetLingeringPoisonDamage = NULL;

	if ( ! pFnGetLingeringPoisonDamage )
		pFnGetLingeringPoisonDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetLingeringPoisonDamage" );

	AKFPerk_Demolitionist_execGetLingeringPoisonDamage_Parms GetLingeringPoisonDamage_Parms;

	this->ProcessEvent ( pFnGetLingeringPoisonDamage, &GetLingeringPoisonDamage_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetNukeRadiusModifier
// [0x00022002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetNukeRadiusModifier ( )
{
	static UFunction* pFnGetNukeRadiusModifier = NULL;

	if ( ! pFnGetNukeRadiusModifier )
		pFnGetNukeRadiusModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetNukeRadiusModifier" );

	AKFPerk_Demolitionist_execGetNukeRadiusModifier_Parms GetNukeRadiusModifier_Parms;

	this->ProcessEvent ( pFnGetNukeRadiusModifier, &GetNukeRadiusModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetNukeDamageModifier
// [0x00022002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetNukeDamageModifier ( )
{
	static UFunction* pFnGetNukeDamageModifier = NULL;

	if ( ! pFnGetNukeDamageModifier )
		pFnGetNukeDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetNukeDamageModifier" );

	AKFPerk_Demolitionist_execGetNukeDamageModifier_Parms GetNukeDamageModifier_Parms;

	this->ProcessEvent ( pFnGetNukeDamageModifier, &GetNukeDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetNukeExplosionActorClass
// [0x00022102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetNukeExplosionActorClass ( )
{
	static UFunction* pFnGetNukeExplosionActorClass = NULL;

	if ( ! pFnGetNukeExplosionActorClass )
		pFnGetNukeExplosionActorClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetNukeExplosionActorClass" );

	AKFPerk_Demolitionist_execGetNukeExplosionActorClass_Parms GetNukeExplosionActorClass_Parms;

	this->ProcessEvent ( pFnGetNukeExplosionActorClass, &GetNukeExplosionActorClass_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetNukeExplosionTemplate
// [0x00022102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetNukeExplosionTemplate ( )
{
	static UFunction* pFnGetNukeExplosionTemplate = NULL;

	if ( ! pFnGetNukeExplosionTemplate )
		pFnGetNukeExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetNukeExplosionTemplate" );

	AKFPerk_Demolitionist_execGetNukeExplosionTemplate_Parms GetNukeExplosionTemplate_Parms;

	this->ProcessEvent ( pFnGetNukeExplosionTemplate, &GetNukeExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsNukeActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::IsNukeActive ( )
{
	static UFunction* pFnIsNukeActive = NULL;

	if ( ! pFnIsNukeActive )
		pFnIsNukeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsNukeActive" );

	AKFPerk_Demolitionist_execIsNukeActive_Parms IsNukeActive_Parms;

	this->ProcessEvent ( pFnIsNukeActive, &IsNukeActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsSirenResistanceActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::IsSirenResistanceActive ( )
{
	static UFunction* pFnIsSirenResistanceActive = NULL;

	if ( ! pFnIsSirenResistanceActive )
		pFnIsSirenResistanceActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsSirenResistanceActive" );

	AKFPerk_Demolitionist_execIsSirenResistanceActive_Parms IsSirenResistanceActive_Parms;

	this->ProcessEvent ( pFnIsSirenResistanceActive, &IsSirenResistanceActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetDoorTrapsExplosionTemplate
// [0x00022002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetDoorTrapsExplosionTemplate ( )
{
	static UFunction* pFnGetDoorTrapsExplosionTemplate = NULL;

	if ( ! pFnGetDoorTrapsExplosionTemplate )
		pFnGetDoorTrapsExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetDoorTrapsExplosionTemplate" );

	AKFPerk_Demolitionist_execGetDoorTrapsExplosionTemplate_Parms GetDoorTrapsExplosionTemplate_Parms;

	this->ProcessEvent ( pFnGetDoorTrapsExplosionTemplate, &GetDoorTrapsExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsSacrificeActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::IsSacrificeActive ( )
{
	static UFunction* pFnIsSacrificeActive = NULL;

	if ( ! pFnIsSacrificeActive )
		pFnIsSacrificeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsSacrificeActive" );

	AKFPerk_Demolitionist_execIsSacrificeActive_Parms IsSacrificeActive_Parms;

	this->ProcessEvent ( pFnIsSacrificeActive, &IsSacrificeActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsDoorTrapsActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::IsDoorTrapsActive ( )
{
	static UFunction* pFnIsDoorTrapsActive = NULL;

	if ( ! pFnIsDoorTrapsActive )
		pFnIsDoorTrapsActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsDoorTrapsActive" );

	AKFPerk_Demolitionist_execIsDoorTrapsActive_Parms IsDoorTrapsActive_Parms;

	this->ProcessEvent ( pFnIsDoorTrapsActive, &IsDoorTrapsActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetSacrificeExplosionTemplate
// [0x00022002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetSacrificeExplosionTemplate ( )
{
	static UFunction* pFnGetSacrificeExplosionTemplate = NULL;

	if ( ! pFnGetSacrificeExplosionTemplate )
		pFnGetSacrificeExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetSacrificeExplosionTemplate" );

	AKFPerk_Demolitionist_execGetSacrificeExplosionTemplate_Parms GetSacrificeExplosionTemplate_Parms;

	this->ProcessEvent ( pFnGetSacrificeExplosionTemplate, &GetSacrificeExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsDmgTypeExplosiveResistable
// [0x00022002] 
// Parameters infos:

void AKFPerk_Demolitionist::IsDmgTypeExplosiveResistable ( )
{
	static UFunction* pFnIsDmgTypeExplosiveResistable = NULL;

	if ( ! pFnIsDmgTypeExplosiveResistable )
		pFnIsDmgTypeExplosiveResistable = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsDmgTypeExplosiveResistable" );

	AKFPerk_Demolitionist_execIsDmgTypeExplosiveResistable_Parms IsDmgTypeExplosiveResistable_Parms;

	this->ProcessEvent ( pFnIsDmgTypeExplosiveResistable, &IsDmgTypeExplosiveResistable_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetExplosiveResistanceRadius
// [0x00022102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetExplosiveResistanceRadius ( )
{
	static UFunction* pFnGetExplosiveResistanceRadius = NULL;

	if ( ! pFnGetExplosiveResistanceRadius )
		pFnGetExplosiveResistanceRadius = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetExplosiveResistanceRadius" );

	AKFPerk_Demolitionist_execGetExplosiveResistanceRadius_Parms GetExplosiveResistanceRadius_Parms;

	this->ProcessEvent ( pFnGetExplosiveResistanceRadius, &GetExplosiveResistanceRadius_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetSharedExplosiveResistance
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::GetSharedExplosiveResistance ( )
{
	static UFunction* pFnGetSharedExplosiveResistance = NULL;

	if ( ! pFnGetSharedExplosiveResistance )
		pFnGetSharedExplosiveResistance = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetSharedExplosiveResistance" );

	AKFPerk_Demolitionist_execGetSharedExplosiveResistance_Parms GetSharedExplosiveResistance_Parms;

	this->ProcessEvent ( pFnGetSharedExplosiveResistance, &GetSharedExplosiveResistance_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsProfessionalActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::IsProfessionalActive ( )
{
	static UFunction* pFnIsProfessionalActive = NULL;

	if ( ! pFnIsProfessionalActive )
		pFnIsProfessionalActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsProfessionalActive" );

	AKFPerk_Demolitionist_execIsProfessionalActive_Parms IsProfessionalActive_Parms;

	this->ProcessEvent ( pFnIsProfessionalActive, &IsProfessionalActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsCriticalHitActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::IsCriticalHitActive ( )
{
	static UFunction* pFnIsCriticalHitActive = NULL;

	if ( ! pFnIsCriticalHitActive )
		pFnIsCriticalHitActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsCriticalHitActive" );

	AKFPerk_Demolitionist_execIsCriticalHitActive_Parms IsCriticalHitActive_Parms;

	this->ProcessEvent ( pFnIsCriticalHitActive, &IsCriticalHitActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsAoEActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::IsAoEActive ( )
{
	static UFunction* pFnIsAoEActive = NULL;

	if ( ! pFnIsAoEActive )
		pFnIsAoEActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsAoEActive" );

	AKFPerk_Demolitionist_execIsAoEActive_Parms IsAoEActive_Parms;

	this->ProcessEvent ( pFnIsAoEActive, &IsAoEActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsAmmoActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::IsAmmoActive ( )
{
	static UFunction* pFnIsAmmoActive = NULL;

	if ( ! pFnIsAmmoActive )
		pFnIsAmmoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsAmmoActive" );

	AKFPerk_Demolitionist_execIsAmmoActive_Parms IsAmmoActive_Parms;

	this->ProcessEvent ( pFnIsAmmoActive, &IsAmmoActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsDirectHitActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::IsDirectHitActive ( )
{
	static UFunction* pFnIsDirectHitActive = NULL;

	if ( ! pFnIsDirectHitActive )
		pFnIsDirectHitActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsDirectHitActive" );

	AKFPerk_Demolitionist_execIsDirectHitActive_Parms IsDirectHitActive_Parms;

	this->ProcessEvent ( pFnIsDirectHitActive, &IsDirectHitActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsTacticalReloadActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::IsTacticalReloadActive ( )
{
	static UFunction* pFnIsTacticalReloadActive = NULL;

	if ( ! pFnIsTacticalReloadActive )
		pFnIsTacticalReloadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsTacticalReloadActive" );

	AKFPerk_Demolitionist_execIsTacticalReloadActive_Parms IsTacticalReloadActive_Parms;

	this->ProcessEvent ( pFnIsTacticalReloadActive, &IsTacticalReloadActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsDamageActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::IsDamageActive ( )
{
	static UFunction* pFnIsDamageActive = NULL;

	if ( ! pFnIsDamageActive )
		pFnIsDamageActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsDamageActive" );

	AKFPerk_Demolitionist_execIsDamageActive_Parms IsDamageActive_Parms;

	this->ProcessEvent ( pFnIsDamageActive, &IsDamageActive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetZedTimeModifier" );

	AKFPerk_Demolitionist_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ShouldNeverDud
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::ShouldNeverDud ( )
{
	static UFunction* pFnShouldNeverDud = NULL;

	if ( ! pFnShouldNeverDud )
		pFnShouldNeverDud = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ShouldNeverDud" );

	AKFPerk_Demolitionist_execShouldNeverDud_Parms ShouldNeverDud_Parms;

	this->ProcessEvent ( pFnShouldNeverDud, &ShouldNeverDud_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.DoorShouldNuke
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::DoorShouldNuke ( )
{
	static UFunction* pFnDoorShouldNuke = NULL;

	if ( ! pFnDoorShouldNuke )
		pFnDoorShouldNuke = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.DoorShouldNuke" );

	AKFPerk_Demolitionist_execDoorShouldNuke_Parms DoorShouldNuke_Parms;

	this->ProcessEvent ( pFnDoorShouldNuke, &DoorShouldNuke_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ProjectileShouldNuke
// [0x00022102] 
// Parameters infos:

void AKFPerk_Demolitionist::ProjectileShouldNuke ( )
{
	static UFunction* pFnProjectileShouldNuke = NULL;

	if ( ! pFnProjectileShouldNuke )
		pFnProjectileShouldNuke = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ProjectileShouldNuke" );

	AKFPerk_Demolitionist_execProjectileShouldNuke_Parms ProjectileShouldNuke_Parms;

	this->ProcessEvent ( pFnProjectileShouldNuke, &ProjectileShouldNuke_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetReactionModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetReactionModifier ( )
{
	static UFunction* pFnGetReactionModifier = NULL;

	if ( ! pFnGetReactionModifier )
		pFnGetReactionModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetReactionModifier" );

	AKFPerk_Demolitionist_execGetReactionModifier_Parms GetReactionModifier_Parms;

	this->ProcessEvent ( pFnGetReactionModifier, &GetReactionModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetStunPowerModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetStunPowerModifier ( )
{
	static UFunction* pFnGetStunPowerModifier = NULL;

	if ( ! pFnGetStunPowerModifier )
		pFnGetStunPowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetStunPowerModifier" );

	AKFPerk_Demolitionist_execGetStunPowerModifier_Parms GetStunPowerModifier_Parms;

	this->ProcessEvent ( pFnGetStunPowerModifier, &GetStunPowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetStumblePowerModifier" );

	AKFPerk_Demolitionist_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetKnockdownPowerModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk_Demolitionist::GetKnockdownPowerModifier ( )
{
	static UFunction* pFnGetKnockdownPowerModifier = NULL;

	if ( ! pFnGetKnockdownPowerModifier )
		pFnGetKnockdownPowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetKnockdownPowerModifier" );

	AKFPerk_Demolitionist_execGetKnockdownPowerModifier_Parms GetKnockdownPowerModifier_Parms;

	this->ProcessEvent ( pFnGetKnockdownPowerModifier, &GetKnockdownPowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ShouldRandSirenResist
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::ShouldRandSirenResist ( )
{
	static UFunction* pFnShouldRandSirenResist = NULL;

	if ( ! pFnShouldRandSirenResist )
		pFnShouldRandSirenResist = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ShouldRandSirenResist" );

	AKFPerk_Demolitionist_execShouldRandSirenResist_Parms ShouldRandSirenResist_Parms;

	this->ProcessEvent ( pFnShouldRandSirenResist, &ShouldRandSirenResist_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.CanExplosiveWeld
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::CanExplosiveWeld ( )
{
	static UFunction* pFnCanExplosiveWeld = NULL;

	if ( ! pFnCanExplosiveWeld )
		pFnCanExplosiveWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.CanExplosiveWeld" );

	AKFPerk_Demolitionist_execCanExplosiveWeld_Parms CanExplosiveWeld_Parms;

	this->ProcessEvent ( pFnCanExplosiveWeld, &CanExplosiveWeld_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ModifyExplosiveDamage
// [0x00422102] 
// Parameters infos:

void AKFPerk_Demolitionist::ModifyExplosiveDamage ( )
{
	static UFunction* pFnModifyExplosiveDamage = NULL;

	if ( ! pFnModifyExplosiveDamage )
		pFnModifyExplosiveDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ModifyExplosiveDamage" );

	AKFPerk_Demolitionist_execModifyExplosiveDamage_Parms ModifyExplosiveDamage_Parms;

	this->ProcessEvent ( pFnModifyExplosiveDamage, &ModifyExplosiveDamage_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.NotifyPerkSacrificeExploded
// [0x00020002] 
// Parameters infos:

void AKFPerk_Demolitionist::NotifyPerkSacrificeExploded ( )
{
	static UFunction* pFnNotifyPerkSacrificeExploded = NULL;

	if ( ! pFnNotifyPerkSacrificeExploded )
		pFnNotifyPerkSacrificeExploded = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.NotifyPerkSacrificeExploded" );

	AKFPerk_Demolitionist_execNotifyPerkSacrificeExploded_Parms NotifyPerkSacrificeExploded_Parms;

	this->ProcessEvent ( pFnNotifyPerkSacrificeExploded, &NotifyPerkSacrificeExploded_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ShouldSacrifice
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::ShouldSacrifice ( )
{
	static UFunction* pFnShouldSacrifice = NULL;

	if ( ! pFnShouldSacrifice )
		pFnShouldSacrifice = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ShouldSacrifice" );

	AKFPerk_Demolitionist_execShouldSacrifice_Parms ShouldSacrifice_Parms;

	this->ProcessEvent ( pFnShouldSacrifice, &ShouldSacrifice_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.CanInteract
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::CanInteract ( )
{
	static UFunction* pFnCanInteract = NULL;

	if ( ! pFnCanInteract )
		pFnCanInteract = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.CanInteract" );

	AKFPerk_Demolitionist_execCanInteract_Parms CanInteract_Parms;

	this->ProcessEvent ( pFnCanInteract, &CanInteract_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.Interact
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::Interact ( )
{
	static UFunction* pFnInteract = NULL;

	if ( ! pFnInteract )
		pFnInteract = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.Interact" );

	AKFPerk_Demolitionist_execInteract_Parms Interact_Parms;

	this->ProcessEvent ( pFnInteract, &Interact_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ResetSupplier
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::ResetSupplier ( )
{
	static UFunction* pFnResetSupplier = NULL;

	if ( ! pFnResetSupplier )
		pFnResetSupplier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ResetSupplier" );

	AKFPerk_Demolitionist_execResetSupplier_Parms ResetSupplier_Parms;

	this->ProcessEvent ( pFnResetSupplier, &ResetSupplier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetUsingTactialReload
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetUsingTactialReload ( )
{
	static UFunction* pFnGetUsingTactialReload = NULL;

	if ( ! pFnGetUsingTactialReload )
		pFnGetUsingTactialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetUsingTactialReload" );

	AKFPerk_Demolitionist_execGetUsingTactialReload_Parms GetUsingTactialReload_Parms;

	this->ProcessEvent ( pFnGetUsingTactialReload, &GetUsingTactialReload_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetAmmoExtraAmmo
// [0x00080102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetAmmoExtraAmmo ( )
{
	static UFunction* pFnGetAmmoExtraAmmo = NULL;

	if ( ! pFnGetAmmoExtraAmmo )
		pFnGetAmmoExtraAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetAmmoExtraAmmo" );

	AKFPerk_Demolitionist_execGetAmmoExtraAmmo_Parms GetAmmoExtraAmmo_Parms;

	this->ProcessEvent ( pFnGetAmmoExtraAmmo, &GetAmmoExtraAmmo_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetAoEDamageModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetAoEDamageModifier ( )
{
	static UFunction* pFnGetAoEDamageModifier = NULL;

	if ( ! pFnGetAoEDamageModifier )
		pFnGetAoEDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetAoEDamageModifier" );

	AKFPerk_Demolitionist_execGetAoEDamageModifier_Parms GetAoEDamageModifier_Parms;

	this->ProcessEvent ( pFnGetAoEDamageModifier, &GetAoEDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetAoERadiusModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetAoERadiusModifier ( )
{
	static UFunction* pFnGetAoERadiusModifier = NULL;

	if ( ! pFnGetAoERadiusModifier )
		pFnGetAoERadiusModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetAoERadiusModifier" );

	AKFPerk_Demolitionist_execGetAoERadiusModifier_Parms GetAoERadiusModifier_Parms;

	this->ProcessEvent ( pFnGetAoERadiusModifier, &GetAoERadiusModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetLastHX25NukeTime
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::GetLastHX25NukeTime ( )
{
	static UFunction* pFnGetLastHX25NukeTime = NULL;

	if ( ! pFnGetLastHX25NukeTime )
		pFnGetLastHX25NukeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetLastHX25NukeTime" );

	AKFPerk_Demolitionist_execGetLastHX25NukeTime_Parms GetLastHX25NukeTime_Parms;

	this->ProcessEvent ( pFnGetLastHX25NukeTime, &GetLastHX25NukeTime_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.SetLastHX25NukeTime
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::SetLastHX25NukeTime ( )
{
	static UFunction* pFnSetLastHX25NukeTime = NULL;

	if ( ! pFnSetLastHX25NukeTime )
		pFnSetLastHX25NukeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.SetLastHX25NukeTime" );

	AKFPerk_Demolitionist_execSetLastHX25NukeTime_Parms SetLastHX25NukeTime_Parms;

	this->ProcessEvent ( pFnSetLastHX25NukeTime, &SetLastHX25NukeTime_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.PrepareExplosive
// [0x00026002] 
// Parameters infos:

void AKFPerk_Demolitionist::PrepareExplosive ( )
{
	static UFunction* pFnPrepareExplosive = NULL;

	if ( ! pFnPrepareExplosive )
		pFnPrepareExplosive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.PrepareExplosive" );

	AKFPerk_Demolitionist_execPrepareExplosive_Parms PrepareExplosive_Parms;

	this->ProcessEvent ( pFnPrepareExplosive, &PrepareExplosive_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GetExtraAmmo
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::GetExtraAmmo ( )
{
	static UFunction* pFnGetExtraAmmo = NULL;

	if ( ! pFnGetExtraAmmo )
		pFnGetExtraAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GetExtraAmmo" );

	AKFPerk_Demolitionist_execGetExtraAmmo_Parms GetExtraAmmo_Parms;

	this->ProcessEvent ( pFnGetExtraAmmo, &GetExtraAmmo_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ModifyMaxSpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_Demolitionist::ModifyMaxSpareAmmoAmount ( )
{
	static UFunction* pFnModifyMaxSpareAmmoAmount = NULL;

	if ( ! pFnModifyMaxSpareAmmoAmount )
		pFnModifyMaxSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ModifyMaxSpareAmmoAmount" );

	AKFPerk_Demolitionist_execModifyMaxSpareAmmoAmount_Parms ModifyMaxSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifyMaxSpareAmmoAmount, &ModifyMaxSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ShouldGiveOnlySecondaryAmmo
// [0x00020102] 
// Parameters infos:

void AKFPerk_Demolitionist::ShouldGiveOnlySecondaryAmmo ( )
{
	static UFunction* pFnShouldGiveOnlySecondaryAmmo = NULL;

	if ( ! pFnShouldGiveOnlySecondaryAmmo )
		pFnShouldGiveOnlySecondaryAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ShouldGiveOnlySecondaryAmmo" );

	AKFPerk_Demolitionist_execShouldGiveOnlySecondaryAmmo_Parms ShouldGiveOnlySecondaryAmmo_Parms;

	this->ProcessEvent ( pFnShouldGiveOnlySecondaryAmmo, &ShouldGiveOnlySecondaryAmmo_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GiveAmmoExtraAmmo
// [0x00444103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::GiveAmmoExtraAmmo ( )
{
	static UFunction* pFnGiveAmmoExtraAmmo = NULL;

	if ( ! pFnGiveAmmoExtraAmmo )
		pFnGiveAmmoExtraAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GiveAmmoExtraAmmo" );

	AKFPerk_Demolitionist_execGiveAmmoExtraAmmo_Parms GiveAmmoExtraAmmo_Parms;

	this->ProcessEvent ( pFnGiveAmmoExtraAmmo, &GiveAmmoExtraAmmo_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.GivePassiveExtraAmmo
// [0x00444103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Demolitionist::GivePassiveExtraAmmo ( )
{
	static UFunction* pFnGivePassiveExtraAmmo = NULL;

	if ( ! pFnGivePassiveExtraAmmo )
		pFnGivePassiveExtraAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.GivePassiveExtraAmmo" );

	AKFPerk_Demolitionist_execGivePassiveExtraAmmo_Parms GivePassiveExtraAmmo_Parms;

	this->ProcessEvent ( pFnGivePassiveExtraAmmo, &GivePassiveExtraAmmo_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ModifySpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_Demolitionist::ModifySpareAmmoAmount ( )
{
	static UFunction* pFnModifySpareAmmoAmount = NULL;

	if ( ! pFnModifySpareAmmoAmount )
		pFnModifySpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ModifySpareAmmoAmount" );

	AKFPerk_Demolitionist_execModifySpareAmmoAmount_Parms ModifySpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifySpareAmmoAmount, &ModifySpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ModifyDamageTaken
// [0x00424002] 
// Parameters infos:

void AKFPerk_Demolitionist::ModifyDamageTaken ( )
{
	static UFunction* pFnModifyDamageTaken = NULL;

	if ( ! pFnModifyDamageTaken )
		pFnModifyDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ModifyDamageTaken" );

	AKFPerk_Demolitionist_execModifyDamageTaken_Parms ModifyDamageTaken_Parms;

	this->ProcessEvent ( pFnModifyDamageTaken, &ModifyDamageTaken_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsDamageTypeOnPerk
// [0x00022002] 
// Parameters infos:

void AKFPerk_Demolitionist::IsDamageTypeOnPerk ( )
{
	static UFunction* pFnIsDamageTypeOnPerk = NULL;

	if ( ! pFnIsDamageTypeOnPerk )
		pFnIsDamageTypeOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsDamageTypeOnPerk" );

	AKFPerk_Demolitionist_execIsDamageTypeOnPerk_Parms IsDamageTypeOnPerk_Parms;

	this->ProcessEvent ( pFnIsDamageTypeOnPerk, &IsDamageTypeOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsCriticalHitZone
// [0x00080002] 
// Parameters infos:

void AKFPerk_Demolitionist::IsCriticalHitZone ( )
{
	static UFunction* pFnIsCriticalHitZone = NULL;

	if ( ! pFnIsCriticalHitZone )
		pFnIsCriticalHitZone = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsCriticalHitZone" );

	AKFPerk_Demolitionist_execIsCriticalHitZone_Parms IsCriticalHitZone_Parms;

	this->ProcessEvent ( pFnIsCriticalHitZone, &IsCriticalHitZone_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.IsDamageIgnoredDT
// [0x00082002] 
// Parameters infos:

void AKFPerk_Demolitionist::IsDamageIgnoredDT ( )
{
	static UFunction* pFnIsDamageIgnoredDT = NULL;

	if ( ! pFnIsDamageIgnoredDT )
		pFnIsDamageIgnoredDT = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.IsDamageIgnoredDT" );

	AKFPerk_Demolitionist_execIsDamageIgnoredDT_Parms IsDamageIgnoredDT_Parms;

	this->ProcessEvent ( pFnIsDamageIgnoredDT, &IsDamageIgnoredDT_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_Demolitionist::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ModifyDamageGiven" );

	AKFPerk_Demolitionist_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.OnWaveStart
// [0x00020002] 
// Parameters infos:

void AKFPerk_Demolitionist::OnWaveStart ( )
{
	static UFunction* pFnOnWaveStart = NULL;

	if ( ! pFnOnWaveStart )
		pFnOnWaveStart = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.OnWaveStart" );

	AKFPerk_Demolitionist_execOnWaveStart_Parms OnWaveStart_Parms;

	this->ProcessEvent ( pFnOnWaveStart, &OnWaveStart_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.OnWaveEnded
// [0x00020002] 
// Parameters infos:

void AKFPerk_Demolitionist::OnWaveEnded ( )
{
	static UFunction* pFnOnWaveEnded = NULL;

	if ( ! pFnOnWaveEnded )
		pFnOnWaveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.OnWaveEnded" );

	AKFPerk_Demolitionist_execOnWaveEnded_Parms OnWaveEnded_Parms;

	this->ProcessEvent ( pFnOnWaveEnded, &OnWaveEnded_Parms, NULL );
};

// Function KFGame.KFPerk_Demolitionist.ApplySkillsToPawn
// [0x00020002] 
// Parameters infos:

void AKFPerk_Demolitionist::ApplySkillsToPawn ( )
{
	static UFunction* pFnApplySkillsToPawn = NULL;

	if ( ! pFnApplySkillsToPawn )
		pFnApplySkillsToPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Demolitionist.ApplySkillsToPawn" );

	AKFPerk_Demolitionist_execApplySkillsToPawn_Parms ApplySkillsToPawn_Parms;

	this->ProcessEvent ( pFnApplySkillsToPawn, &ApplySkillsToPawn_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.LogPerkSkills
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::LogPerkSkills ( )
{
	static UFunction* pFnLogPerkSkills = NULL;

	if ( ! pFnLogPerkSkills )
		pFnLogPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.LogPerkSkills" );

	AKFPerk_FieldMedic_execLogPerkSkills_Parms LogPerkSkills_Parms;

	this->ProcessEvent ( pFnLogPerkSkills, &LogPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetPassiveStrings" );

	AKFPerk_FieldMedic_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetPerkLensEffect
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetPerkLensEffect ( )
{
	static UFunction* pFnGetPerkLensEffect = NULL;

	if ( ! pFnGetPerkLensEffect )
		pFnGetPerkLensEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetPerkLensEffect" );

	AKFPerk_FieldMedic_execGetPerkLensEffect_Parms GetPerkLensEffect_Parms;

	this->ProcessEvent ( pFnGetPerkLensEffect, &GetPerkLensEffect_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsSlugActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::IsSlugActive ( )
{
	static UFunction* pFnIsSlugActive = NULL;

	if ( ! pFnIsSlugActive )
		pFnIsSlugActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsSlugActive" );

	AKFPerk_FieldMedic_execIsSlugActive_Parms IsSlugActive_Parms;

	this->ProcessEvent ( pFnIsSlugActive, &IsSlugActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsSurvivalistActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::IsSurvivalistActive ( )
{
	static UFunction* pFnIsSurvivalistActive = NULL;

	if ( ! pFnIsSurvivalistActive )
		pFnIsSurvivalistActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsSurvivalistActive" );

	AKFPerk_FieldMedic_execIsSurvivalistActive_Parms IsSurvivalistActive_Parms;

	this->ProcessEvent ( pFnIsSurvivalistActive, &IsSurvivalistActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsHealingSurgeActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::IsHealingSurgeActive ( )
{
	static UFunction* pFnIsHealingSurgeActive = NULL;

	if ( ! pFnIsHealingSurgeActive )
		pFnIsHealingSurgeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsHealingSurgeActive" );

	AKFPerk_FieldMedic_execIsHealingSurgeActive_Parms IsHealingSurgeActive_Parms;

	this->ProcessEvent ( pFnIsHealingSurgeActive, &IsHealingSurgeActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsEnforcerActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_FieldMedic::IsEnforcerActive ( )
{
	static UFunction* pFnIsEnforcerActive = NULL;

	if ( ! pFnIsEnforcerActive )
		pFnIsEnforcerActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsEnforcerActive" );

	AKFPerk_FieldMedic_execIsEnforcerActive_Parms IsEnforcerActive_Parms;

	this->ProcessEvent ( pFnIsEnforcerActive, &IsEnforcerActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsCombatantActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_FieldMedic::IsCombatantActive ( )
{
	static UFunction* pFnIsCombatantActive = NULL;

	if ( ! pFnIsCombatantActive )
		pFnIsCombatantActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsCombatantActive" );

	AKFPerk_FieldMedic_execIsCombatantActive_Parms IsCombatantActive_Parms;

	this->ProcessEvent ( pFnIsCombatantActive, &IsCombatantActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsHealingShieldActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_FieldMedic::IsHealingShieldActive ( )
{
	static UFunction* pFnIsHealingShieldActive = NULL;

	if ( ! pFnIsHealingShieldActive )
		pFnIsHealingShieldActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsHealingShieldActive" );

	AKFPerk_FieldMedic_execIsHealingShieldActive_Parms IsHealingShieldActive_Parms;

	this->ProcessEvent ( pFnIsHealingShieldActive, &IsHealingShieldActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsHealingDamageBoostActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_FieldMedic::IsHealingDamageBoostActive ( )
{
	static UFunction* pFnIsHealingDamageBoostActive = NULL;

	if ( ! pFnIsHealingDamageBoostActive )
		pFnIsHealingDamageBoostActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsHealingDamageBoostActive" );

	AKFPerk_FieldMedic_execIsHealingDamageBoostActive_Parms IsHealingDamageBoostActive_Parms;

	this->ProcessEvent ( pFnIsHealingDamageBoostActive, &IsHealingDamageBoostActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsHealingSpeedBoostActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_FieldMedic::IsHealingSpeedBoostActive ( )
{
	static UFunction* pFnIsHealingSpeedBoostActive = NULL;

	if ( ! pFnIsHealingSpeedBoostActive )
		pFnIsHealingSpeedBoostActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsHealingSpeedBoostActive" );

	AKFPerk_FieldMedic_execIsHealingSpeedBoostActive_Parms IsHealingSpeedBoostActive_Parms;

	this->ProcessEvent ( pFnIsHealingSpeedBoostActive, &IsHealingSpeedBoostActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsToxicDmgActive
// [0x00020002] 
// Parameters infos:

void AKFPerk_FieldMedic::IsToxicDmgActive ( )
{
	static UFunction* pFnIsToxicDmgActive = NULL;

	if ( ! pFnIsToxicDmgActive )
		pFnIsToxicDmgActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsToxicDmgActive" );

	AKFPerk_FieldMedic_execIsToxicDmgActive_Parms IsToxicDmgActive_Parms;

	this->ProcessEvent ( pFnIsToxicDmgActive, &IsToxicDmgActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsAcidicCompoundActive
// [0x00020002] 
// Parameters infos:

void AKFPerk_FieldMedic::IsAcidicCompoundActive ( )
{
	static UFunction* pFnIsAcidicCompoundActive = NULL;

	if ( ! pFnIsAcidicCompoundActive )
		pFnIsAcidicCompoundActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsAcidicCompoundActive" );

	AKFPerk_FieldMedic_execIsAcidicCompoundActive_Parms IsAcidicCompoundActive_Parms;

	this->ProcessEvent ( pFnIsAcidicCompoundActive, &IsAcidicCompoundActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.IsAirborneAgentActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_FieldMedic::IsAirborneAgentActive ( )
{
	static UFunction* pFnIsAirborneAgentActive = NULL;

	if ( ! pFnIsAirborneAgentActive )
		pFnIsAirborneAgentActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.IsAirborneAgentActive" );

	AKFPerk_FieldMedic_execIsAirborneAgentActive_Parms IsAirborneAgentActive_Parms;

	this->ProcessEvent ( pFnIsAirborneAgentActive, &IsAirborneAgentActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetSnarePowerModifier
// [0x00024102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetSnarePowerModifier ( )
{
	static UFunction* pFnGetSnarePowerModifier = NULL;

	if ( ! pFnGetSnarePowerModifier )
		pFnGetSnarePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetSnarePowerModifier" );

	AKFPerk_FieldMedic_execGetSnarePowerModifier_Parms GetSnarePowerModifier_Parms;

	this->ProcessEvent ( pFnGetSnarePowerModifier, &GetSnarePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetAAEffect
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetAAEffect ( )
{
	static UFunction* pFnGetAAEffect = NULL;

	if ( ! pFnGetAAEffect )
		pFnGetAAEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetAAEffect" );

	AKFPerk_FieldMedic_execGetAAEffect_Parms GetAAEffect_Parms;

	this->ProcessEvent ( pFnGetAAEffect, &GetAAEffect_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetAAExplosionActorClass
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetAAExplosionActorClass ( )
{
	static UFunction* pFnGetAAExplosionActorClass = NULL;

	if ( ! pFnGetAAExplosionActorClass )
		pFnGetAAExplosionActorClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetAAExplosionActorClass" );

	AKFPerk_FieldMedic_execGetAAExplosionActorClass_Parms GetAAExplosionActorClass_Parms;

	this->ProcessEvent ( pFnGetAAExplosionActorClass, &GetAAExplosionActorClass_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetAADamageTypeClass
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetAADamageTypeClass ( )
{
	static UFunction* pFnGetAADamageTypeClass = NULL;

	if ( ! pFnGetAADamageTypeClass )
		pFnGetAADamageTypeClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetAADamageTypeClass" );

	AKFPerk_FieldMedic_execGetAADamageTypeClass_Parms GetAADamageTypeClass_Parms;

	this->ProcessEvent ( pFnGetAADamageTypeClass, &GetAADamageTypeClass_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetAAExplosionTemplate
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetAAExplosionTemplate ( )
{
	static UFunction* pFnGetAAExplosionTemplate = NULL;

	if ( ! pFnGetAAExplosionTemplate )
		pFnGetAAExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetAAExplosionTemplate" );

	AKFPerk_FieldMedic_execGetAAExplosionTemplate_Parms GetAAExplosionTemplate_Parms;

	this->ProcessEvent ( pFnGetAAExplosionTemplate, &GetAAExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.NotifyZedTimeStarted
// [0x00020002] 
// Parameters infos:

void AKFPerk_FieldMedic::NotifyZedTimeStarted ( )
{
	static UFunction* pFnNotifyZedTimeStarted = NULL;

	if ( ! pFnNotifyZedTimeStarted )
		pFnNotifyZedTimeStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.NotifyZedTimeStarted" );

	AKFPerk_FieldMedic_execNotifyZedTimeStarted_Parms NotifyZedTimeStarted_Parms;

	this->ProcessEvent ( pFnNotifyZedTimeStarted, &NotifyZedTimeStarted_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifyToxicDmg
// [0x00422002] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifyToxicDmg ( )
{
	static UFunction* pFnModifyToxicDmg = NULL;

	if ( ! pFnModifyToxicDmg )
		pFnModifyToxicDmg = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifyToxicDmg" );

	AKFPerk_FieldMedic_execModifyToxicDmg_Parms ModifyToxicDmg_Parms;

	this->ProcessEvent ( pFnModifyToxicDmg, &ModifyToxicDmg_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifyDamageGiven" );

	AKFPerk_FieldMedic_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingShieldDuration
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingShieldDuration ( )
{
	static UFunction* pFnGetHealingShieldDuration = NULL;

	if ( ! pFnGetHealingShieldDuration )
		pFnGetHealingShieldDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingShieldDuration" );

	AKFPerk_FieldMedic_execGetHealingShieldDuration_Parms GetHealingShieldDuration_Parms;

	this->ProcessEvent ( pFnGetHealingShieldDuration, &GetHealingShieldDuration_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetMaxHealingShield
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetMaxHealingShield ( )
{
	static UFunction* pFnGetMaxHealingShield = NULL;

	if ( ! pFnGetMaxHealingShield )
		pFnGetMaxHealingShield = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetMaxHealingShield" );

	AKFPerk_FieldMedic_execGetMaxHealingShield_Parms GetMaxHealingShield_Parms;

	this->ProcessEvent ( pFnGetMaxHealingShield, &GetMaxHealingShield_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingShield
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingShield ( )
{
	static UFunction* pFnGetHealingShield = NULL;

	if ( ! pFnGetHealingShield )
		pFnGetHealingShield = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingShield" );

	AKFPerk_FieldMedic_execGetHealingShield_Parms GetHealingShield_Parms;

	this->ProcessEvent ( pFnGetHealingShield, &GetHealingShield_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingShieldActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingShieldActive ( )
{
	static UFunction* pFnGetHealingShieldActive = NULL;

	if ( ! pFnGetHealingShieldActive )
		pFnGetHealingShieldActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingShieldActive" );

	AKFPerk_FieldMedic_execGetHealingShieldActive_Parms GetHealingShieldActive_Parms;

	this->ProcessEvent ( pFnGetHealingShieldActive, &GetHealingShieldActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingDamageBoostDuration
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingDamageBoostDuration ( )
{
	static UFunction* pFnGetHealingDamageBoostDuration = NULL;

	if ( ! pFnGetHealingDamageBoostDuration )
		pFnGetHealingDamageBoostDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingDamageBoostDuration" );

	AKFPerk_FieldMedic_execGetHealingDamageBoostDuration_Parms GetHealingDamageBoostDuration_Parms;

	this->ProcessEvent ( pFnGetHealingDamageBoostDuration, &GetHealingDamageBoostDuration_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetMaxHealingDamageBoost
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetMaxHealingDamageBoost ( )
{
	static UFunction* pFnGetMaxHealingDamageBoost = NULL;

	if ( ! pFnGetMaxHealingDamageBoost )
		pFnGetMaxHealingDamageBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetMaxHealingDamageBoost" );

	AKFPerk_FieldMedic_execGetMaxHealingDamageBoost_Parms GetMaxHealingDamageBoost_Parms;

	this->ProcessEvent ( pFnGetMaxHealingDamageBoost, &GetMaxHealingDamageBoost_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingDamageBoost
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingDamageBoost ( )
{
	static UFunction* pFnGetHealingDamageBoost = NULL;

	if ( ! pFnGetHealingDamageBoost )
		pFnGetHealingDamageBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingDamageBoost" );

	AKFPerk_FieldMedic_execGetHealingDamageBoost_Parms GetHealingDamageBoost_Parms;

	this->ProcessEvent ( pFnGetHealingDamageBoost, &GetHealingDamageBoost_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingDamageBoostActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingDamageBoostActive ( )
{
	static UFunction* pFnGetHealingDamageBoostActive = NULL;

	if ( ! pFnGetHealingDamageBoostActive )
		pFnGetHealingDamageBoostActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingDamageBoostActive" );

	AKFPerk_FieldMedic_execGetHealingDamageBoostActive_Parms GetHealingDamageBoostActive_Parms;

	this->ProcessEvent ( pFnGetHealingDamageBoostActive, &GetHealingDamageBoostActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingSpeedBoostDuration
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingSpeedBoostDuration ( )
{
	static UFunction* pFnGetHealingSpeedBoostDuration = NULL;

	if ( ! pFnGetHealingSpeedBoostDuration )
		pFnGetHealingSpeedBoostDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingSpeedBoostDuration" );

	AKFPerk_FieldMedic_execGetHealingSpeedBoostDuration_Parms GetHealingSpeedBoostDuration_Parms;

	this->ProcessEvent ( pFnGetHealingSpeedBoostDuration, &GetHealingSpeedBoostDuration_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetMaxHealingSpeedBoost
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetMaxHealingSpeedBoost ( )
{
	static UFunction* pFnGetMaxHealingSpeedBoost = NULL;

	if ( ! pFnGetMaxHealingSpeedBoost )
		pFnGetMaxHealingSpeedBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetMaxHealingSpeedBoost" );

	AKFPerk_FieldMedic_execGetMaxHealingSpeedBoost_Parms GetMaxHealingSpeedBoost_Parms;

	this->ProcessEvent ( pFnGetMaxHealingSpeedBoost, &GetMaxHealingSpeedBoost_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingSpeedBoost
// [0x00022102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingSpeedBoost ( )
{
	static UFunction* pFnGetHealingSpeedBoost = NULL;

	if ( ! pFnGetHealingSpeedBoost )
		pFnGetHealingSpeedBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingSpeedBoost" );

	AKFPerk_FieldMedic_execGetHealingSpeedBoost_Parms GetHealingSpeedBoost_Parms;

	this->ProcessEvent ( pFnGetHealingSpeedBoost, &GetHealingSpeedBoost_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetHealingSpeedBoostActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetHealingSpeedBoostActive ( )
{
	static UFunction* pFnGetHealingSpeedBoostActive = NULL;

	if ( ! pFnGetHealingSpeedBoostActive )
		pFnGetHealingSpeedBoostActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetHealingSpeedBoostActive" );

	AKFPerk_FieldMedic_execGetHealingSpeedBoostActive_Parms GetHealingSpeedBoostActive_Parms;

	this->ProcessEvent ( pFnGetHealingSpeedBoostActive, &GetHealingSpeedBoostActive_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifyMagSizeAndNumber
// [0x00424102] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifyMagSizeAndNumber ( )
{
	static UFunction* pFnModifyMagSizeAndNumber = NULL;

	if ( ! pFnModifyMagSizeAndNumber )
		pFnModifyMagSizeAndNumber = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifyMagSizeAndNumber" );

	AKFPerk_FieldMedic_execModifyMagSizeAndNumber_Parms ModifyMagSizeAndNumber_Parms;

	this->ProcessEvent ( pFnModifyMagSizeAndNumber, &ModifyMagSizeAndNumber_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetSelfHealingSurgePct
// [0x00020102] 
// Parameters infos:

void AKFPerk_FieldMedic::GetSelfHealingSurgePct ( )
{
	static UFunction* pFnGetSelfHealingSurgePct = NULL;

	if ( ! pFnGetSelfHealingSurgePct )
		pFnGetSelfHealingSurgePct = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetSelfHealingSurgePct" );

	AKFPerk_FieldMedic_execGetSelfHealingSurgePct_Parms GetSelfHealingSurgePct_Parms;

	this->ProcessEvent ( pFnGetSelfHealingSurgePct, &GetSelfHealingSurgePct_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifyHealth
// [0x00420002] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifyHealth ( )
{
	static UFunction* pFnModifyHealth = NULL;

	if ( ! pFnModifyHealth )
		pFnModifyHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifyHealth" );

	AKFPerk_FieldMedic_execModifyHealth_Parms ModifyHealth_Parms;

	this->ProcessEvent ( pFnModifyHealth, &ModifyHealth_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifyArmor
// [0x00420002] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifyArmor ( )
{
	static UFunction* pFnModifyArmor = NULL;

	if ( ! pFnModifyArmor )
		pFnModifyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifyArmor" );

	AKFPerk_FieldMedic_execModifyArmor_Parms ModifyArmor_Parms;

	this->ProcessEvent ( pFnModifyArmor, &ModifyArmor_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.GetComabatantSpeedModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_FieldMedic::GetComabatantSpeedModifier ( )
{
	static UFunction* pFnGetComabatantSpeedModifier = NULL;

	if ( ! pFnGetComabatantSpeedModifier )
		pFnGetComabatantSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.GetComabatantSpeedModifier" );

	AKFPerk_FieldMedic_execGetComabatantSpeedModifier_Parms GetComabatantSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetComabatantSpeedModifier, &GetComabatantSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifySpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifySpeed ( )
{
	static UFunction* pFnModifySpeed = NULL;

	if ( ! pFnModifySpeed )
		pFnModifySpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifySpeed" );

	AKFPerk_FieldMedic_execModifySpeed_Parms ModifySpeed_Parms;

	this->ProcessEvent ( pFnModifySpeed, &ModifySpeed_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifyDamageTaken
// [0x00424002] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifyDamageTaken ( )
{
	static UFunction* pFnModifyDamageTaken = NULL;

	if ( ! pFnModifyDamageTaken )
		pFnModifyDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifyDamageTaken" );

	AKFPerk_FieldMedic_execModifyDamageTaken_Parms ModifyDamageTaken_Parms;

	this->ProcessEvent ( pFnModifyDamageTaken, &ModifyDamageTaken_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifyHealAmount
// [0x00420002] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifyHealAmount ( )
{
	static UFunction* pFnModifyHealAmount = NULL;

	if ( ! pFnModifyHealAmount )
		pFnModifyHealAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifyHealAmount" );

	AKFPerk_FieldMedic_execModifyHealAmount_Parms ModifyHealAmount_Parms;

	this->ProcessEvent ( pFnModifyHealAmount, &ModifyHealAmount_Parms, NULL );
};

// Function KFGame.KFPerk_FieldMedic.ModifyHealerRechargeTime
// [0x00420102] 
// Parameters infos:

void AKFPerk_FieldMedic::ModifyHealerRechargeTime ( )
{
	static UFunction* pFnModifyHealerRechargeTime = NULL;

	if ( ! pFnModifyHealerRechargeTime )
		pFnModifyHealerRechargeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_FieldMedic.ModifyHealerRechargeTime" );

	AKFPerk_FieldMedic_execModifyHealerRechargeTime_Parms ModifyHealerRechargeTime_Parms;

	this->ProcessEvent ( pFnModifyHealerRechargeTime, &ModifyHealerRechargeTime_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.LogPerkSkills
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::LogPerkSkills ( )
{
	static UFunction* pFnLogPerkSkills = NULL;

	if ( ! pFnLogPerkSkills )
		pFnLogPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.LogPerkSkills" );

	AKFPerk_Firebug_execLogPerkSkills_Parms LogPerkSkills_Parms;

	this->ProcessEvent ( pFnLogPerkSkills, &LogPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_Firebug::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetPassiveStrings" );

	AKFPerk_Firebug_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetBloatKillXP
// [0x00022102] 
// Parameters infos:

void AKFPerk_Firebug::GetBloatKillXP ( )
{
	static UFunction* pFnGetBloatKillXP = NULL;

	if ( ! pFnGetBloatKillXP )
		pFnGetBloatKillXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetBloatKillXP" );

	AKFPerk_Firebug_execGetBloatKillXP_Parms GetBloatKillXP_Parms;

	this->ProcessEvent ( pFnGetBloatKillXP, &GetBloatKillXP_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetCrawlerKillXP
// [0x00022102] 
// Parameters infos:

void AKFPerk_Firebug::GetCrawlerKillXP ( )
{
	static UFunction* pFnGetCrawlerKillXP = NULL;

	if ( ! pFnGetCrawlerKillXP )
		pFnGetCrawlerKillXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetCrawlerKillXP" );

	AKFPerk_Firebug_execGetCrawlerKillXP_Parms GetCrawlerKillXP_Parms;

	this->ProcessEvent ( pFnGetCrawlerKillXP, &GetCrawlerKillXP_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsScorchActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsScorchActive ( )
{
	static UFunction* pFnIsScorchActive = NULL;

	if ( ! pFnIsScorchActive )
		pFnIsScorchActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsScorchActive" );

	AKFPerk_Firebug_execIsScorchActive_Parms IsScorchActive_Parms;

	this->ProcessEvent ( pFnIsScorchActive, &IsScorchActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetScorchActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::GetScorchActive ( )
{
	static UFunction* pFnGetScorchActive = NULL;

	if ( ! pFnGetScorchActive )
		pFnGetScorchActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetScorchActive" );

	AKFPerk_Firebug_execGetScorchActive_Parms GetScorchActive_Parms;

	this->ProcessEvent ( pFnGetScorchActive, &GetScorchActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsInfernoActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsInfernoActive ( )
{
	static UFunction* pFnIsInfernoActive = NULL;

	if ( ! pFnIsInfernoActive )
		pFnIsInfernoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsInfernoActive" );

	AKFPerk_Firebug_execIsInfernoActive_Parms IsInfernoActive_Parms;

	this->ProcessEvent ( pFnIsInfernoActive, &IsInfernoActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsSplashDamageActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsSplashDamageActive ( )
{
	static UFunction* pFnIsSplashDamageActive = NULL;

	if ( ! pFnIsSplashDamageActive )
		pFnIsSplashDamageActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsSplashDamageActive" );

	AKFPerk_Firebug_execIsSplashDamageActive_Parms IsSplashDamageActive_Parms;

	this->ProcessEvent ( pFnIsSplashDamageActive, &IsSplashDamageActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsRangeActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::IsRangeActive ( )
{
	static UFunction* pFnIsRangeActive = NULL;

	if ( ! pFnIsRangeActive )
		pFnIsRangeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsRangeActive" );

	AKFPerk_Firebug_execIsRangeActive_Parms IsRangeActive_Parms;

	this->ProcessEvent ( pFnIsRangeActive, &IsRangeActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsNapalmActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsNapalmActive ( )
{
	static UFunction* pFnIsNapalmActive = NULL;

	if ( ! pFnIsNapalmActive )
		pFnIsNapalmActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsNapalmActive" );

	AKFPerk_Firebug_execIsNapalmActive_Parms IsNapalmActive_Parms;

	this->ProcessEvent ( pFnIsNapalmActive, &IsNapalmActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsZedShrapnelActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsZedShrapnelActive ( )
{
	static UFunction* pFnIsZedShrapnelActive = NULL;

	if ( ! pFnIsZedShrapnelActive )
		pFnIsZedShrapnelActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsZedShrapnelActive" );

	AKFPerk_Firebug_execIsZedShrapnelActive_Parms IsZedShrapnelActive_Parms;

	this->ProcessEvent ( pFnIsZedShrapnelActive, &IsZedShrapnelActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsHeatWaveActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsHeatWaveActive ( )
{
	static UFunction* pFnIsHeatWaveActive = NULL;

	if ( ! pFnIsHeatWaveActive )
		pFnIsHeatWaveActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsHeatWaveActive" );

	AKFPerk_Firebug_execIsHeatWaveActive_Parms IsHeatWaveActive_Parms;

	this->ProcessEvent ( pFnIsHeatWaveActive, &IsHeatWaveActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsFlarotovActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::IsFlarotovActive ( )
{
	static UFunction* pFnIsFlarotovActive = NULL;

	if ( ! pFnIsFlarotovActive )
		pFnIsFlarotovActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsFlarotovActive" );

	AKFPerk_Firebug_execIsFlarotovActive_Parms IsFlarotovActive_Parms;

	this->ProcessEvent ( pFnIsFlarotovActive, &IsFlarotovActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsGroundFireActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsGroundFireActive ( )
{
	static UFunction* pFnIsGroundFireActive = NULL;

	if ( ! pFnIsGroundFireActive )
		pFnIsGroundFireActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsGroundFireActive" );

	AKFPerk_Firebug_execIsGroundFireActive_Parms IsGroundFireActive_Parms;

	this->ProcessEvent ( pFnIsGroundFireActive, &IsGroundFireActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsFuseActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsFuseActive ( )
{
	static UFunction* pFnIsFuseActive = NULL;

	if ( ! pFnIsFuseActive )
		pFnIsFuseActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsFuseActive" );

	AKFPerk_Firebug_execIsFuseActive_Parms IsFuseActive_Parms;

	this->ProcessEvent ( pFnIsFuseActive, &IsFuseActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsHighCapFuelTankActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::IsHighCapFuelTankActive ( )
{
	static UFunction* pFnIsHighCapFuelTankActive = NULL;

	if ( ! pFnIsHighCapFuelTankActive )
		pFnIsHighCapFuelTankActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsHighCapFuelTankActive" );

	AKFPerk_Firebug_execIsHighCapFuelTankActive_Parms IsHighCapFuelTankActive_Parms;

	this->ProcessEvent ( pFnIsHighCapFuelTankActive, &IsHighCapFuelTankActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.IsBringTheHeatActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::IsBringTheHeatActive ( )
{
	static UFunction* pFnIsBringTheHeatActive = NULL;

	if ( ! pFnIsBringTheHeatActive )
		pFnIsBringTheHeatActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.IsBringTheHeatActive" );

	AKFPerk_Firebug_execIsBringTheHeatActive_Parms IsBringTheHeatActive_Parms;

	this->ProcessEvent ( pFnIsBringTheHeatActive, &IsBringTheHeatActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetIsUberAmmoActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::GetIsUberAmmoActive ( )
{
	static UFunction* pFnGetIsUberAmmoActive = NULL;

	if ( ! pFnGetIsUberAmmoActive )
		pFnGetIsUberAmmoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetIsUberAmmoActive" );

	AKFPerk_Firebug_execGetIsUberAmmoActive_Parms GetIsUberAmmoActive_Parms;

	this->ProcessEvent ( pFnGetIsUberAmmoActive, &GetIsUberAmmoActive_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetSnarePowerModifier
// [0x00024102] 
// Parameters infos:

void AKFPerk_Firebug::GetSnarePowerModifier ( )
{
	static UFunction* pFnGetSnarePowerModifier = NULL;

	if ( ! pFnGetSnarePowerModifier )
		pFnGetSnarePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetSnarePowerModifier" );

	AKFPerk_Firebug_execGetSnarePowerModifier_Parms GetSnarePowerModifier_Parms;

	this->ProcessEvent ( pFnGetSnarePowerModifier, &GetSnarePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk_Firebug::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetStumblePowerModifier" );

	AKFPerk_Firebug_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetZedTimeModifier" );

	AKFPerk_Firebug_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetExplosionTemplate
// [0x00020002] 
// Parameters infos:

void AKFPerk_Firebug::GetExplosionTemplate ( )
{
	static UFunction* pFnGetExplosionTemplate = NULL;

	if ( ! pFnGetExplosionTemplate )
		pFnGetExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetExplosionTemplate" );

	AKFPerk_Firebug_execGetExplosionTemplate_Parms GetExplosionTemplate_Parms;

	this->ProcessEvent ( pFnGetExplosionTemplate, &GetExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.ShouldShrapnel
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::ShouldShrapnel ( )
{
	static UFunction* pFnShouldShrapnel = NULL;

	if ( ! pFnShouldShrapnel )
		pFnShouldShrapnel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.ShouldShrapnel" );

	AKFPerk_Firebug_execShouldShrapnel_Parms ShouldShrapnel_Parms;

	this->ProcessEvent ( pFnShouldShrapnel, &ShouldShrapnel_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetSplashDamageModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::GetSplashDamageModifier ( )
{
	static UFunction* pFnGetSplashDamageModifier = NULL;

	if ( ! pFnGetSplashDamageModifier )
		pFnGetSplashDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetSplashDamageModifier" );

	AKFPerk_Firebug_execGetSplashDamageModifier_Parms GetSplashDamageModifier_Parms;

	this->ProcessEvent ( pFnGetSplashDamageModifier, &GetSplashDamageModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.CouldBeZedShrapnel
// [0x00020002] 
// Parameters infos:

void AKFPerk_Firebug::CouldBeZedShrapnel ( )
{
	static UFunction* pFnCouldBeZedShrapnel = NULL;

	if ( ! pFnCouldBeZedShrapnel )
		pFnCouldBeZedShrapnel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.CouldBeZedShrapnel" );

	AKFPerk_Firebug_execCouldBeZedShrapnel_Parms CouldBeZedShrapnel_Parms;

	this->ProcessEvent ( pFnCouldBeZedShrapnel, &CouldBeZedShrapnel_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetNapalmCheckCollisionScale
// [0x00022003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::GetNapalmCheckCollisionScale ( )
{
	static UFunction* pFnGetNapalmCheckCollisionScale = NULL;

	if ( ! pFnGetNapalmCheckCollisionScale )
		pFnGetNapalmCheckCollisionScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetNapalmCheckCollisionScale" );

	AKFPerk_Firebug_execGetNapalmCheckCollisionScale_Parms GetNapalmCheckCollisionScale_Parms;

	this->ProcessEvent ( pFnGetNapalmCheckCollisionScale, &GetNapalmCheckCollisionScale_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.CanSpreadNapalm
// [0x00020002] 
// Parameters infos:

void AKFPerk_Firebug::CanSpreadNapalm ( )
{
	static UFunction* pFnCanSpreadNapalm = NULL;

	if ( ! pFnCanSpreadNapalm )
		pFnCanSpreadNapalm = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.CanSpreadNapalm" );

	AKFPerk_Firebug_execCanSpreadNapalm_Parms CanSpreadNapalm_Parms;

	this->ProcessEvent ( pFnCanSpreadNapalm, &CanSpreadNapalm_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.ModifyMagSizeAndNumber
// [0x00424102] 
// Parameters infos:

void AKFPerk_Firebug::ModifyMagSizeAndNumber ( )
{
	static UFunction* pFnModifyMagSizeAndNumber = NULL;

	if ( ! pFnModifyMagSizeAndNumber )
		pFnModifyMagSizeAndNumber = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.ModifyMagSizeAndNumber" );

	AKFPerk_Firebug_execModifyMagSizeAndNumber_Parms ModifyMagSizeAndNumber_Parms;

	this->ProcessEvent ( pFnModifyMagSizeAndNumber, &ModifyMagSizeAndNumber_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.InHeatRange
// [0x00020002] 
// Parameters infos:

void AKFPerk_Firebug::InHeatRange ( )
{
	static UFunction* pFnInHeatRange = NULL;

	if ( ! pFnInHeatRange )
		pFnInHeatRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.InHeatRange" );

	AKFPerk_Firebug_execInHeatRange_Parms InHeatRange_Parms;

	this->ProcessEvent ( pFnInHeatRange, &InHeatRange_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetNapalmDamage
// [0x00022002] 
// Parameters infos:

void AKFPerk_Firebug::GetNapalmDamage ( )
{
	static UFunction* pFnGetNapalmDamage = NULL;

	if ( ! pFnGetNapalmDamage )
		pFnGetNapalmDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetNapalmDamage" );

	AKFPerk_Firebug_execGetNapalmDamage_Parms GetNapalmDamage_Parms;

	this->ProcessEvent ( pFnGetNapalmDamage, &GetNapalmDamage_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetDoTScalerAdditions
// [0x00020002] 
// Parameters infos:

void AKFPerk_Firebug::GetDoTScalerAdditions ( )
{
	static UFunction* pFnGetDoTScalerAdditions = NULL;

	if ( ! pFnGetDoTScalerAdditions )
		pFnGetDoTScalerAdditions = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetDoTScalerAdditions" );

	AKFPerk_Firebug_execGetDoTScalerAdditions_Parms GetDoTScalerAdditions_Parms;

	this->ProcessEvent ( pFnGetDoTScalerAdditions, &GetDoTScalerAdditions_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetStartingAmmoPercent
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Firebug::GetStartingAmmoPercent ( )
{
	static UFunction* pFnGetStartingAmmoPercent = NULL;

	if ( ! pFnGetStartingAmmoPercent )
		pFnGetStartingAmmoPercent = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetStartingAmmoPercent" );

	AKFPerk_Firebug_execGetStartingAmmoPercent_Parms GetStartingAmmoPercent_Parms;

	this->ProcessEvent ( pFnGetStartingAmmoPercent, &GetStartingAmmoPercent_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.MaximizeSpareAmmoAmount
// [0x00420100] 
// Parameters infos:

void AKFPerk_Firebug::MaximizeSpareAmmoAmount ( )
{
	static UFunction* pFnMaximizeSpareAmmoAmount = NULL;

	if ( ! pFnMaximizeSpareAmmoAmount )
		pFnMaximizeSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.MaximizeSpareAmmoAmount" );

	AKFPerk_Firebug_execMaximizeSpareAmmoAmount_Parms MaximizeSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnMaximizeSpareAmmoAmount, &MaximizeSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.ModifySpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_Firebug::ModifySpareAmmoAmount ( )
{
	static UFunction* pFnModifySpareAmmoAmount = NULL;

	if ( ! pFnModifySpareAmmoAmount )
		pFnModifySpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.ModifySpareAmmoAmount" );

	AKFPerk_Firebug_execModifySpareAmmoAmount_Parms ModifySpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifySpareAmmoAmount, &ModifySpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.ModifyDamageTaken
// [0x00C24002] 
// Parameters infos:

void AKFPerk_Firebug::ModifyDamageTaken ( )
{
	static UFunction* pFnModifyDamageTaken = NULL;

	if ( ! pFnModifyDamageTaken )
		pFnModifyDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.ModifyDamageTaken" );

	AKFPerk_Firebug_execModifyDamageTaken_Parms ModifyDamageTaken_Parms;

	this->ProcessEvent ( pFnModifyDamageTaken, &ModifyDamageTaken_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.GetReloadRateScale
// [0x00020102] 
// Parameters infos:

void AKFPerk_Firebug::GetReloadRateScale ( )
{
	static UFunction* pFnGetReloadRateScale = NULL;

	if ( ! pFnGetReloadRateScale )
		pFnGetReloadRateScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.GetReloadRateScale" );

	AKFPerk_Firebug_execGetReloadRateScale_Parms GetReloadRateScale_Parms;

	this->ProcessEvent ( pFnGetReloadRateScale, &GetReloadRateScale_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_Firebug::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.ModifyDamageGiven" );

	AKFPerk_Firebug_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_Firebug.ApplySkillsToPawn
// [0x00020002] 
// Parameters infos:

void AKFPerk_Firebug::ApplySkillsToPawn ( )
{
	static UFunction* pFnApplySkillsToPawn = NULL;

	if ( ! pFnApplySkillsToPawn )
		pFnApplySkillsToPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Firebug.ApplySkillsToPawn" );

	AKFPerk_Firebug_execApplySkillsToPawn_Parms ApplySkillsToPawn_Parms;

	this->ProcessEvent ( pFnApplySkillsToPawn, &ApplySkillsToPawn_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.LogPerkSkills
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::LogPerkSkills ( )
{
	static UFunction* pFnLogPerkSkills = NULL;

	if ( ! pFnLogPerkSkills )
		pFnLogPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.LogPerkSkills" );

	AKFPerk_Gunslinger_execLogPerkSkills_Parms LogPerkSkills_Parms;

	this->ProcessEvent ( pFnLogPerkSkills, &LogPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetPassiveStrings" );

	AKFPerk_Gunslinger_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetMaxHeadShotsValue
// [0x00022002] 
// Parameters infos:

void AKFPerk_Gunslinger::GetMaxHeadShotsValue ( )
{
	static UFunction* pFnGetMaxHeadShotsValue = NULL;

	if ( ! pFnGetMaxHeadShotsValue )
		pFnGetMaxHeadShotsValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetMaxHeadShotsValue" );

	AKFPerk_Gunslinger_execGetMaxHeadShotsValue_Parms GetMaxHeadShotsValue_Parms;

	this->ProcessEvent ( pFnGetMaxHeadShotsValue, &GetMaxHeadShotsValue_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.PlayerDied
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::PlayerDied ( )
{
	static UFunction* pFnPlayerDied = NULL;

	if ( ! pFnPlayerDied )
		pFnPlayerDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.PlayerDied" );

	AKFPerk_Gunslinger_execPlayerDied_Parms PlayerDied_Parms;

	this->ProcessEvent ( pFnPlayerDied, &PlayerDied_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Gunslinger::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.Destroyed" );

	AKFPerk_Gunslinger_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetQuickSwitychSpeedModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Gunslinger::GetQuickSwitychSpeedModifier ( )
{
	static UFunction* pFnGetQuickSwitychSpeedModifier = NULL;

	if ( ! pFnGetQuickSwitychSpeedModifier )
		pFnGetQuickSwitychSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetQuickSwitychSpeedModifier" );

	AKFPerk_Gunslinger_execGetQuickSwitychSpeedModifier_Parms GetQuickSwitychSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetQuickSwitychSpeedModifier, &GetQuickSwitychSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsDamageTypeOnPerk
// [0x00022002] 
// Parameters infos:

void AKFPerk_Gunslinger::IsDamageTypeOnPerk ( )
{
	static UFunction* pFnIsDamageTypeOnPerk = NULL;

	if ( ! pFnIsDamageTypeOnPerk )
		pFnIsDamageTypeOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsDamageTypeOnPerk" );

	AKFPerk_Gunslinger_execIsDamageTypeOnPerk_Parms IsDamageTypeOnPerk_Parms;

	this->ProcessEvent ( pFnIsDamageTypeOnPerk, &IsDamageTypeOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsWeaponOnPerk
// [0x00026102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsWeaponOnPerk ( )
{
	static UFunction* pFnIsWeaponOnPerk = NULL;

	if ( ! pFnIsWeaponOnPerk )
		pFnIsWeaponOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsWeaponOnPerk" );

	AKFPerk_Gunslinger_execIsWeaponOnPerk_Parms IsWeaponOnPerk_Parms;

	this->ProcessEvent ( pFnIsWeaponOnPerk, &IsWeaponOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsSkullCrackerActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsSkullCrackerActive ( )
{
	static UFunction* pFnIsSkullCrackerActive = NULL;

	if ( ! pFnIsSkullCrackerActive )
		pFnIsSkullCrackerActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsSkullCrackerActive" );

	AKFPerk_Gunslinger_execIsSkullCrackerActive_Parms IsSkullCrackerActive_Parms;

	this->ProcessEvent ( pFnIsSkullCrackerActive, &IsSkullCrackerActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsUberAmmoActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsUberAmmoActive ( )
{
	static UFunction* pFnIsUberAmmoActive = NULL;

	if ( ! pFnIsUberAmmoActive )
		pFnIsUberAmmoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsUberAmmoActive" );

	AKFPerk_Gunslinger_execIsUberAmmoActive_Parms IsUberAmmoActive_Parms;

	this->ProcessEvent ( pFnIsUberAmmoActive, &IsUberAmmoActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetFanfareActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetFanfareActive ( )
{
	static UFunction* pFnGetFanfareActive = NULL;

	if ( ! pFnGetFanfareActive )
		pFnGetFanfareActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetFanfareActive" );

	AKFPerk_Gunslinger_execGetFanfareActive_Parms GetFanfareActive_Parms;

	this->ProcessEvent ( pFnGetFanfareActive, &GetFanfareActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsFanfareActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsFanfareActive ( )
{
	static UFunction* pFnIsFanfareActive = NULL;

	if ( ! pFnIsFanfareActive )
		pFnIsFanfareActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsFanfareActive" );

	AKFPerk_Gunslinger_execIsFanfareActive_Parms IsFanfareActive_Parms;

	this->ProcessEvent ( pFnIsFanfareActive, &IsFanfareActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsKnockEmDownActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsKnockEmDownActive ( )
{
	static UFunction* pFnIsKnockEmDownActive = NULL;

	if ( ! pFnIsKnockEmDownActive )
		pFnIsKnockEmDownActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsKnockEmDownActive" );

	AKFPerk_Gunslinger_execIsKnockEmDownActive_Parms IsKnockEmDownActive_Parms;

	this->ProcessEvent ( pFnIsKnockEmDownActive, &IsKnockEmDownActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsPenetrationActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsPenetrationActive ( )
{
	static UFunction* pFnIsPenetrationActive = NULL;

	if ( ! pFnIsPenetrationActive )
		pFnIsPenetrationActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsPenetrationActive" );

	AKFPerk_Gunslinger_execIsPenetrationActive_Parms IsPenetrationActive_Parms;

	this->ProcessEvent ( pFnIsPenetrationActive, &IsPenetrationActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsSpeedReloadActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsSpeedReloadActive ( )
{
	static UFunction* pFnIsSpeedReloadActive = NULL;

	if ( ! pFnIsSpeedReloadActive )
		pFnIsSpeedReloadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsSpeedReloadActive" );

	AKFPerk_Gunslinger_execIsSpeedReloadActive_Parms IsSpeedReloadActive_Parms;

	this->ProcessEvent ( pFnIsSpeedReloadActive, &IsSpeedReloadActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsBoneBreakerActive
// [0x00020002] 
// Parameters infos:

void AKFPerk_Gunslinger::IsBoneBreakerActive ( )
{
	static UFunction* pFnIsBoneBreakerActive = NULL;

	if ( ! pFnIsBoneBreakerActive )
		pFnIsBoneBreakerActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsBoneBreakerActive" );

	AKFPerk_Gunslinger_execIsBoneBreakerActive_Parms IsBoneBreakerActive_Parms;

	this->ProcessEvent ( pFnIsBoneBreakerActive, &IsBoneBreakerActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsRhythmMethodActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsRhythmMethodActive ( )
{
	static UFunction* pFnIsRhythmMethodActive = NULL;

	if ( ! pFnIsRhythmMethodActive )
		pFnIsRhythmMethodActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsRhythmMethodActive" );

	AKFPerk_Gunslinger_execIsRhythmMethodActive_Parms IsRhythmMethodActive_Parms;

	this->ProcessEvent ( pFnIsRhythmMethodActive, &IsRhythmMethodActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsQuickSwitchActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsQuickSwitchActive ( )
{
	static UFunction* pFnIsQuickSwitchActive = NULL;

	if ( ! pFnIsQuickSwitchActive )
		pFnIsQuickSwitchActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsQuickSwitchActive" );

	AKFPerk_Gunslinger_execIsQuickSwitchActive_Parms IsQuickSwitchActive_Parms;

	this->ProcessEvent ( pFnIsQuickSwitchActive, &IsQuickSwitchActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsShootnMoveActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsShootnMoveActive ( )
{
	static UFunction* pFnIsShootnMoveActive = NULL;

	if ( ! pFnIsShootnMoveActive )
		pFnIsShootnMoveActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsShootnMoveActive" );

	AKFPerk_Gunslinger_execIsShootnMoveActive_Parms IsShootnMoveActive_Parms;

	this->ProcessEvent ( pFnIsShootnMoveActive, &IsShootnMoveActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetSnarePowerModifier
// [0x00024102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetSnarePowerModifier ( )
{
	static UFunction* pFnGetSnarePowerModifier = NULL;

	if ( ! pFnGetSnarePowerModifier )
		pFnGetSnarePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetSnarePowerModifier" );

	AKFPerk_Gunslinger_execGetSnarePowerModifier_Parms GetSnarePowerModifier_Parms;

	this->ProcessEvent ( pFnGetSnarePowerModifier, &GetSnarePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IgnoresPenetrationDmgReduction
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IgnoresPenetrationDmgReduction ( )
{
	static UFunction* pFnIgnoresPenetrationDmgReduction = NULL;

	if ( ! pFnIgnoresPenetrationDmgReduction )
		pFnIgnoresPenetrationDmgReduction = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IgnoresPenetrationDmgReduction" );

	AKFPerk_Gunslinger_execIgnoresPenetrationDmgReduction_Parms IgnoresPenetrationDmgReduction_Parms;

	this->ProcessEvent ( pFnIgnoresPenetrationDmgReduction, &IgnoresPenetrationDmgReduction_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetBoneBreakerDamage
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Gunslinger::GetBoneBreakerDamage ( )
{
	static UFunction* pFnGetBoneBreakerDamage = NULL;

	if ( ! pFnGetBoneBreakerDamage )
		pFnGetBoneBreakerDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetBoneBreakerDamage" );

	AKFPerk_Gunslinger_execGetBoneBreakerDamage_Parms GetBoneBreakerDamage_Parms;

	this->ProcessEvent ( pFnGetBoneBreakerDamage, &GetBoneBreakerDamage_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.HitShouldGiveBodyPartDamage
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Gunslinger::HitShouldGiveBodyPartDamage ( )
{
	static UFunction* pFnHitShouldGiveBodyPartDamage = NULL;

	if ( ! pFnHitShouldGiveBodyPartDamage )
		pFnHitShouldGiveBodyPartDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.HitShouldGiveBodyPartDamage" );

	AKFPerk_Gunslinger_execHitShouldGiveBodyPartDamage_Parms HitShouldGiveBodyPartDamage_Parms;

	this->ProcessEvent ( pFnHitShouldGiveBodyPartDamage, &HitShouldGiveBodyPartDamage_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.ModifyWeaponSwitchTime
// [0x00420102] 
// Parameters infos:

void AKFPerk_Gunslinger::ModifyWeaponSwitchTime ( )
{
	static UFunction* pFnModifyWeaponSwitchTime = NULL;

	if ( ! pFnModifyWeaponSwitchTime )
		pFnModifyWeaponSwitchTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.ModifyWeaponSwitchTime" );

	AKFPerk_Gunslinger_execModifyWeaponSwitchTime_Parms ModifyWeaponSwitchTime_Parms;

	this->ProcessEvent ( pFnModifyWeaponSwitchTime, &ModifyWeaponSwitchTime_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.ModifyWeaponBopDamping
// [0x00420102] 
// Parameters infos:

void AKFPerk_Gunslinger::ModifyWeaponBopDamping ( )
{
	static UFunction* pFnModifyWeaponBopDamping = NULL;

	if ( ! pFnModifyWeaponBopDamping )
		pFnModifyWeaponBopDamping = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.ModifyWeaponBopDamping" );

	AKFPerk_Gunslinger_execModifyWeaponBopDamping_Parms ModifyWeaponBopDamping_Parms;

	this->ProcessEvent ( pFnModifyWeaponBopDamping, &ModifyWeaponBopDamping_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetIronSightSpeedModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Gunslinger::eventGetIronSightSpeedModifier ( )
{
	static UFunction* pFnGetIronSightSpeedModifier = NULL;

	if ( ! pFnGetIronSightSpeedModifier )
		pFnGetIronSightSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetIronSightSpeedModifier" );

	AKFPerk_Gunslinger_eventGetIronSightSpeedModifier_Parms GetIronSightSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetIronSightSpeedModifier, &GetIronSightSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetPenetrationModifier
// [0x00024102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetPenetrationModifier ( )
{
	static UFunction* pFnGetPenetrationModifier = NULL;

	if ( ! pFnGetPenetrationModifier )
		pFnGetPenetrationModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetPenetrationModifier" );

	AKFPerk_Gunslinger_execGetPenetrationModifier_Parms GetPenetrationModifier_Parms;

	this->ProcessEvent ( pFnGetPenetrationModifier, &GetPenetrationModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetIsHeadShotComboActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Gunslinger::eventGetIsHeadShotComboActive ( )
{
	static UFunction* pFnGetIsHeadShotComboActive = NULL;

	if ( ! pFnGetIsHeadShotComboActive )
		pFnGetIsHeadShotComboActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetIsHeadShotComboActive" );

	AKFPerk_Gunslinger_eventGetIsHeadShotComboActive_Parms GetIsHeadShotComboActive_Parms;

	this->ProcessEvent ( pFnGetIsHeadShotComboActive, &GetIsHeadShotComboActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.ServerClearHeadShotsCombo
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Gunslinger::ServerClearHeadShotsCombo ( )
{
	static UFunction* pFnServerClearHeadShotsCombo = NULL;

	if ( ! pFnServerClearHeadShotsCombo )
		pFnServerClearHeadShotsCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.ServerClearHeadShotsCombo" );

	AKFPerk_Gunslinger_execServerClearHeadShotsCombo_Parms ServerClearHeadShotsCombo_Parms;

	this->ProcessEvent ( pFnServerClearHeadShotsCombo, &ServerClearHeadShotsCombo_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.SubstractHeadShotCombo
// [0x00020002] 
// Parameters infos:

void AKFPerk_Gunslinger::SubstractHeadShotCombo ( )
{
	static UFunction* pFnSubstractHeadShotCombo = NULL;

	if ( ! pFnSubstractHeadShotCombo )
		pFnSubstractHeadShotCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.SubstractHeadShotCombo" );

	AKFPerk_Gunslinger_execSubstractHeadShotCombo_Parms SubstractHeadShotCombo_Parms;

	this->ProcessEvent ( pFnSubstractHeadShotCombo, &SubstractHeadShotCombo_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.HeadShotMessage
// [0x010241C2] 
// Parameters infos:

void AKFPerk_Gunslinger::HeadShotMessage ( )
{
	static UFunction* pFnHeadShotMessage = NULL;

	if ( ! pFnHeadShotMessage )
		pFnHeadShotMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.HeadShotMessage" );

	AKFPerk_Gunslinger_execHeadShotMessage_Parms HeadShotMessage_Parms;

	this->ProcessEvent ( pFnHeadShotMessage, &HeadShotMessage_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.UpdatePerkHeadShots
// [0x00020002] 
// Parameters infos:

void AKFPerk_Gunslinger::UpdatePerkHeadShots ( )
{
	static UFunction* pFnUpdatePerkHeadShots = NULL;

	if ( ! pFnUpdatePerkHeadShots )
		pFnUpdatePerkHeadShots = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.UpdatePerkHeadShots" );

	AKFPerk_Gunslinger_execUpdatePerkHeadShots_Parms UpdatePerkHeadShots_Parms;

	this->ProcessEvent ( pFnUpdatePerkHeadShots, &UpdatePerkHeadShots_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.AddToHeadShotCombo
// [0x00020002] 
// Parameters infos:

void AKFPerk_Gunslinger::AddToHeadShotCombo ( )
{
	static UFunction* pFnAddToHeadShotCombo = NULL;

	if ( ! pFnAddToHeadShotCombo )
		pFnAddToHeadShotCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.AddToHeadShotCombo" );

	AKFPerk_Gunslinger_execAddToHeadShotCombo_Parms AddToHeadShotCombo_Parms;

	this->ProcessEvent ( pFnAddToHeadShotCombo, &AddToHeadShotCombo_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetIsUberAmmoActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetIsUberAmmoActive ( )
{
	static UFunction* pFnGetIsUberAmmoActive = NULL;

	if ( ! pFnGetIsUberAmmoActive )
		pFnGetIsUberAmmoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetIsUberAmmoActive" );

	AKFPerk_Gunslinger_execGetIsUberAmmoActive_Parms GetIsUberAmmoActive_Parms;

	this->ProcessEvent ( pFnGetIsUberAmmoActive, &GetIsUberAmmoActive_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetZedTimeModifier" );

	AKFPerk_Gunslinger_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.CheckSpecialZedBodyPart
// [0x00020002] 
// Parameters infos:

void AKFPerk_Gunslinger::CheckSpecialZedBodyPart ( )
{
	static UFunction* pFnCheckSpecialZedBodyPart = NULL;

	if ( ! pFnCheckSpecialZedBodyPart )
		pFnCheckSpecialZedBodyPart = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.CheckSpecialZedBodyPart" );

	AKFPerk_Gunslinger_execCheckSpecialZedBodyPart_Parms CheckSpecialZedBodyPart_Parms;

	this->ProcessEvent ( pFnCheckSpecialZedBodyPart, &CheckSpecialZedBodyPart_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk_Gunslinger::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetStumblePowerModifier" );

	AKFPerk_Gunslinger_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetKnockdownPowerModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk_Gunslinger::GetKnockdownPowerModifier ( )
{
	static UFunction* pFnGetKnockdownPowerModifier = NULL;

	if ( ! pFnGetKnockdownPowerModifier )
		pFnGetKnockdownPowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetKnockdownPowerModifier" );

	AKFPerk_Gunslinger_execGetKnockdownPowerModifier_Parms GetKnockdownPowerModifier_Parms;

	this->ProcessEvent ( pFnGetKnockdownPowerModifier, &GetKnockdownPowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetUsingTactialReload
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetUsingTactialReload ( )
{
	static UFunction* pFnGetUsingTactialReload = NULL;

	if ( ! pFnGetUsingTactialReload )
		pFnGetUsingTactialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetUsingTactialReload" );

	AKFPerk_Gunslinger_execGetUsingTactialReload_Parms GetUsingTactialReload_Parms;

	this->ProcessEvent ( pFnGetUsingTactialReload, &GetUsingTactialReload_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.IsZedTimeReloadAllowed
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::IsZedTimeReloadAllowed ( )
{
	static UFunction* pFnIsZedTimeReloadAllowed = NULL;

	if ( ! pFnIsZedTimeReloadAllowed )
		pFnIsZedTimeReloadAllowed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.IsZedTimeReloadAllowed" );

	AKFPerk_Gunslinger_execIsZedTimeReloadAllowed_Parms IsZedTimeReloadAllowed_Parms;

	this->ProcessEvent ( pFnIsZedTimeReloadAllowed, &IsZedTimeReloadAllowed_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetReloadRateScale
// [0x00020102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetReloadRateScale ( )
{
	static UFunction* pFnGetReloadRateScale = NULL;

	if ( ! pFnGetReloadRateScale )
		pFnGetReloadRateScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetReloadRateScale" );

	AKFPerk_Gunslinger_execGetReloadRateScale_Parms GetReloadRateScale_Parms;

	this->ProcessEvent ( pFnGetReloadRateScale, &GetReloadRateScale_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetQuickSwitchRecoilModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Gunslinger::GetQuickSwitchRecoilModifier ( )
{
	static UFunction* pFnGetQuickSwitchRecoilModifier = NULL;

	if ( ! pFnGetQuickSwitchRecoilModifier )
		pFnGetQuickSwitchRecoilModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetQuickSwitchRecoilModifier" );

	AKFPerk_Gunslinger_execGetQuickSwitchRecoilModifier_Parms GetQuickSwitchRecoilModifier_Parms;

	this->ProcessEvent ( pFnGetQuickSwitchRecoilModifier, &GetQuickSwitchRecoilModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.ModifyRecoil
// [0x00420102] 
// Parameters infos:

void AKFPerk_Gunslinger::ModifyRecoil ( )
{
	static UFunction* pFnModifyRecoil = NULL;

	if ( ! pFnModifyRecoil )
		pFnModifyRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.ModifyRecoil" );

	AKFPerk_Gunslinger_execModifyRecoil_Parms ModifyRecoil_Parms;

	this->ProcessEvent ( pFnModifyRecoil, &ModifyRecoil_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.ModifyDamageTaken
// [0x00424002] 
// Parameters infos:

void AKFPerk_Gunslinger::ModifyDamageTaken ( )
{
	static UFunction* pFnModifyDamageTaken = NULL;

	if ( ! pFnModifyDamageTaken )
		pFnModifyDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.ModifyDamageTaken" );

	AKFPerk_Gunslinger_execModifyDamageTaken_Parms ModifyDamageTaken_Parms;

	this->ProcessEvent ( pFnModifyDamageTaken, &ModifyDamageTaken_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_Gunslinger::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.ModifyDamageGiven" );

	AKFPerk_Gunslinger_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.GetHeadshotXP
// [0x00022102] 
// Parameters infos:

void AKFPerk_Gunslinger::GetHeadshotXP ( )
{
	static UFunction* pFnGetHeadshotXP = NULL;

	if ( ! pFnGetHeadshotXP )
		pFnGetHeadshotXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.GetHeadshotXP" );

	AKFPerk_Gunslinger_execGetHeadshotXP_Parms GetHeadshotXP_Parms;

	this->ProcessEvent ( pFnGetHeadshotXP, &GetHeadshotXP_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.PostSkillUpdate
// [0x00080902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Gunslinger::eventPostSkillUpdate ( )
{
	static UFunction* pFnPostSkillUpdate = NULL;

	if ( ! pFnPostSkillUpdate )
		pFnPostSkillUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.PostSkillUpdate" );

	AKFPerk_Gunslinger_eventPostSkillUpdate_Parms PostSkillUpdate_Parms;

	this->ProcessEvent ( pFnPostSkillUpdate, &PostSkillUpdate_Parms, NULL );
};

// Function KFGame.KFPerk_Gunslinger.ModifySpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk_Gunslinger::ModifySpeed ( )
{
	static UFunction* pFnModifySpeed = NULL;

	if ( ! pFnModifySpeed )
		pFnModifySpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Gunslinger.ModifySpeed" );

	AKFPerk_Gunslinger_execModifySpeed_Parms ModifySpeed_Parms;

	this->ProcessEvent ( pFnModifySpeed, &ModifySpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Monster.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Monster::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Monster.PostBeginPlay" );

	AKFPerk_Monster_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsWeaponOnPerk
// [0x00026102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsWeaponOnPerk ( )
{
	static UFunction* pFnIsWeaponOnPerk = NULL;

	if ( ! pFnIsWeaponOnPerk )
		pFnIsWeaponOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsWeaponOnPerk" );

	AKFPerk_Sharpshooter_execIsWeaponOnPerk_Parms IsWeaponOnPerk_Parms;

	this->ProcessEvent ( pFnIsWeaponOnPerk, &IsWeaponOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsDamageTypeOnPerk
// [0x00022002] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsDamageTypeOnPerk ( )
{
	static UFunction* pFnIsDamageTypeOnPerk = NULL;

	if ( ! pFnIsDamageTypeOnPerk )
		pFnIsDamageTypeOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsDamageTypeOnPerk" );

	AKFPerk_Sharpshooter_execIsDamageTypeOnPerk_Parms IsDamageTypeOnPerk_Parms;

	this->ProcessEvent ( pFnIsDamageTypeOnPerk, &IsDamageTypeOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetCrouchAimReloadSpeedModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Sharpshooter::GetCrouchAimReloadSpeedModifier ( )
{
	static UFunction* pFnGetCrouchAimReloadSpeedModifier = NULL;

	if ( ! pFnGetCrouchAimReloadSpeedModifier )
		pFnGetCrouchAimReloadSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetCrouchAimReloadSpeedModifier" );

	AKFPerk_Sharpshooter_execGetCrouchAimReloadSpeedModifier_Parms GetCrouchAimReloadSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetCrouchAimReloadSpeedModifier, &GetCrouchAimReloadSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetCrouchAimMovementSpeedModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Sharpshooter::GetCrouchAimMovementSpeedModifier ( )
{
	static UFunction* pFnGetCrouchAimMovementSpeedModifier = NULL;

	if ( ! pFnGetCrouchAimMovementSpeedModifier )
		pFnGetCrouchAimMovementSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetCrouchAimMovementSpeedModifier" );

	AKFPerk_Sharpshooter_execGetCrouchAimMovementSpeedModifier_Parms GetCrouchAimMovementSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetCrouchAimMovementSpeedModifier, &GetCrouchAimMovementSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetTriggerMovementSpeedModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Sharpshooter::GetTriggerMovementSpeedModifier ( )
{
	static UFunction* pFnGetTriggerMovementSpeedModifier = NULL;

	if ( ! pFnGetTriggerMovementSpeedModifier )
		pFnGetTriggerMovementSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetTriggerMovementSpeedModifier" );

	AKFPerk_Sharpshooter_execGetTriggerMovementSpeedModifier_Parms GetTriggerMovementSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetTriggerMovementSpeedModifier, &GetTriggerMovementSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetIsHeadShotComboActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Sharpshooter::eventGetIsHeadShotComboActive ( )
{
	static UFunction* pFnGetIsHeadShotComboActive = NULL;

	if ( ! pFnGetIsHeadShotComboActive )
		pFnGetIsHeadShotComboActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetIsHeadShotComboActive" );

	AKFPerk_Sharpshooter_eventGetIsHeadShotComboActive_Parms GetIsHeadShotComboActive_Parms;

	this->ProcessEvent ( pFnGetIsHeadShotComboActive, &GetIsHeadShotComboActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.ServerClearHeadShotsCombo
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Sharpshooter::ServerClearHeadShotsCombo ( )
{
	static UFunction* pFnServerClearHeadShotsCombo = NULL;

	if ( ! pFnServerClearHeadShotsCombo )
		pFnServerClearHeadShotsCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.ServerClearHeadShotsCombo" );

	AKFPerk_Sharpshooter_execServerClearHeadShotsCombo_Parms ServerClearHeadShotsCombo_Parms;

	this->ProcessEvent ( pFnServerClearHeadShotsCombo, &ServerClearHeadShotsCombo_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.SubstractHeadShotCombo
// [0x00020002] 
// Parameters infos:

void AKFPerk_Sharpshooter::SubstractHeadShotCombo ( )
{
	static UFunction* pFnSubstractHeadShotCombo = NULL;

	if ( ! pFnSubstractHeadShotCombo )
		pFnSubstractHeadShotCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.SubstractHeadShotCombo" );

	AKFPerk_Sharpshooter_execSubstractHeadShotCombo_Parms SubstractHeadShotCombo_Parms;

	this->ProcessEvent ( pFnSubstractHeadShotCombo, &SubstractHeadShotCombo_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.HeadShotMessage
// [0x010241C2] 
// Parameters infos:

void AKFPerk_Sharpshooter::HeadShotMessage ( )
{
	static UFunction* pFnHeadShotMessage = NULL;

	if ( ! pFnHeadShotMessage )
		pFnHeadShotMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.HeadShotMessage" );

	AKFPerk_Sharpshooter_execHeadShotMessage_Parms HeadShotMessage_Parms;

	this->ProcessEvent ( pFnHeadShotMessage, &HeadShotMessage_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.UpdatePerkHeadShots
// [0x00020002] 
// Parameters infos:

void AKFPerk_Sharpshooter::UpdatePerkHeadShots ( )
{
	static UFunction* pFnUpdatePerkHeadShots = NULL;

	if ( ! pFnUpdatePerkHeadShots )
		pFnUpdatePerkHeadShots = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.UpdatePerkHeadShots" );

	AKFPerk_Sharpshooter_execUpdatePerkHeadShots_Parms UpdatePerkHeadShots_Parms;

	this->ProcessEvent ( pFnUpdatePerkHeadShots, &UpdatePerkHeadShots_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.AddToHeadShotCombo
// [0x00020002] 
// Parameters infos:

void AKFPerk_Sharpshooter::AddToHeadShotCombo ( )
{
	static UFunction* pFnAddToHeadShotCombo = NULL;

	if ( ! pFnAddToHeadShotCombo )
		pFnAddToHeadShotCombo = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.AddToHeadShotCombo" );

	AKFPerk_Sharpshooter_execAddToHeadShotCombo_Parms AddToHeadShotCombo_Parms;

	this->ProcessEvent ( pFnAddToHeadShotCombo, &AddToHeadShotCombo_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetMaxHeadShotComboCount
// [0x00022002] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetMaxHeadShotComboCount ( )
{
	static UFunction* pFnGetMaxHeadShotComboCount = NULL;

	if ( ! pFnGetMaxHeadShotComboCount )
		pFnGetMaxHeadShotComboCount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetMaxHeadShotComboCount" );

	AKFPerk_Sharpshooter_execGetMaxHeadShotComboCount_Parms GetMaxHeadShotComboCount_Parms;

	this->ProcessEvent ( pFnGetMaxHeadShotComboCount, &GetMaxHeadShotComboCount_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetZTStunActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetZTStunActive ( )
{
	static UFunction* pFnGetZTStunActive = NULL;

	if ( ! pFnGetZTStunActive )
		pFnGetZTStunActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetZTStunActive" );

	AKFPerk_Sharpshooter_execGetZTStunActive_Parms GetZTStunActive_Parms;

	this->ProcessEvent ( pFnGetZTStunActive, &GetZTStunActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsZTStunActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsZTStunActive ( )
{
	static UFunction* pFnIsZTStunActive = NULL;

	if ( ! pFnIsZTStunActive )
		pFnIsZTStunActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsZTStunActive" );

	AKFPerk_Sharpshooter_execIsZTStunActive_Parms IsZTStunActive_Parms;

	this->ProcessEvent ( pFnIsZTStunActive, &IsZTStunActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetZTKnockdownActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetZTKnockdownActive ( )
{
	static UFunction* pFnGetZTKnockdownActive = NULL;

	if ( ! pFnGetZTKnockdownActive )
		pFnGetZTKnockdownActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetZTKnockdownActive" );

	AKFPerk_Sharpshooter_execGetZTKnockdownActive_Parms GetZTKnockdownActive_Parms;

	this->ProcessEvent ( pFnGetZTKnockdownActive, &GetZTKnockdownActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsZTKnockdownActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsZTKnockdownActive ( )
{
	static UFunction* pFnIsZTKnockdownActive = NULL;

	if ( ! pFnIsZTKnockdownActive )
		pFnIsZTKnockdownActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsZTKnockdownActive" );

	AKFPerk_Sharpshooter_execIsZTKnockdownActive_Parms IsZTKnockdownActive_Parms;

	this->ProcessEvent ( pFnIsZTKnockdownActive, &IsZTKnockdownActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsAmmoPouchActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsAmmoPouchActive ( )
{
	static UFunction* pFnIsAmmoPouchActive = NULL;

	if ( ! pFnIsAmmoPouchActive )
		pFnIsAmmoPouchActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsAmmoPouchActive" );

	AKFPerk_Sharpshooter_execIsAmmoPouchActive_Parms IsAmmoPouchActive_Parms;

	this->ProcessEvent ( pFnIsAmmoPouchActive, &IsAmmoPouchActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetScopedActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetScopedActive ( )
{
	static UFunction* pFnGetScopedActive = NULL;

	if ( ! pFnGetScopedActive )
		pFnGetScopedActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetScopedActive" );

	AKFPerk_Sharpshooter_execGetScopedActive_Parms GetScopedActive_Parms;

	this->ProcessEvent ( pFnGetScopedActive, &GetScopedActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsScopedActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsScopedActive ( )
{
	static UFunction* pFnIsScopedActive = NULL;

	if ( ! pFnIsScopedActive )
		pFnIsScopedActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsScopedActive" );

	AKFPerk_Sharpshooter_execIsScopedActive_Parms IsScopedActive_Parms;

	this->ProcessEvent ( pFnIsScopedActive, &IsScopedActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsTacticalReloadActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsTacticalReloadActive ( )
{
	static UFunction* pFnIsTacticalReloadActive = NULL;

	if ( ! pFnIsTacticalReloadActive )
		pFnIsTacticalReloadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsTacticalReloadActive" );

	AKFPerk_Sharpshooter_execIsTacticalReloadActive_Parms IsTacticalReloadActive_Parms;

	this->ProcessEvent ( pFnIsTacticalReloadActive, &IsTacticalReloadActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsRhythmMethodActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsRhythmMethodActive ( )
{
	static UFunction* pFnIsRhythmMethodActive = NULL;

	if ( ! pFnIsRhythmMethodActive )
		pFnIsRhythmMethodActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsRhythmMethodActive" );

	AKFPerk_Sharpshooter_execIsRhythmMethodActive_Parms IsRhythmMethodActive_Parms;

	this->ProcessEvent ( pFnIsRhythmMethodActive, &IsRhythmMethodActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsStunActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsStunActive ( )
{
	static UFunction* pFnIsStunActive = NULL;

	if ( ! pFnIsStunActive )
		pFnIsStunActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsStunActive" );

	AKFPerk_Sharpshooter_execIsStunActive_Parms IsStunActive_Parms;

	this->ProcessEvent ( pFnIsStunActive, &IsStunActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsCrouchAimActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsCrouchAimActive ( )
{
	static UFunction* pFnIsCrouchAimActive = NULL;

	if ( ! pFnIsCrouchAimActive )
		pFnIsCrouchAimActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsCrouchAimActive" );

	AKFPerk_Sharpshooter_execIsCrouchAimActive_Parms IsCrouchAimActive_Parms;

	this->ProcessEvent ( pFnIsCrouchAimActive, &IsCrouchAimActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsTriggerActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsTriggerActive ( )
{
	static UFunction* pFnIsTriggerActive = NULL;

	if ( ! pFnIsTriggerActive )
		pFnIsTriggerActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsTriggerActive" );

	AKFPerk_Sharpshooter_execIsTriggerActive_Parms IsTriggerActive_Parms;

	this->ProcessEvent ( pFnIsTriggerActive, &IsTriggerActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.IsStationaryAimActive
// [0x00020002] 
// Parameters infos:

void AKFPerk_Sharpshooter::IsStationaryAimActive ( )
{
	static UFunction* pFnIsStationaryAimActive = NULL;

	if ( ! pFnIsStationaryAimActive )
		pFnIsStationaryAimActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.IsStationaryAimActive" );

	AKFPerk_Sharpshooter_execIsStationaryAimActive_Parms IsStationaryAimActive_Parms;

	this->ProcessEvent ( pFnIsStationaryAimActive, &IsStationaryAimActive_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetStunPowerModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetStunPowerModifier ( )
{
	static UFunction* pFnGetStunPowerModifier = NULL;

	if ( ! pFnGetStunPowerModifier )
		pFnGetStunPowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetStunPowerModifier" );

	AKFPerk_Sharpshooter_execGetStunPowerModifier_Parms GetStunPowerModifier_Parms;

	this->ProcessEvent ( pFnGetStunPowerModifier, &GetStunPowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetUsingTactialReload
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetUsingTactialReload ( )
{
	static UFunction* pFnGetUsingTactialReload = NULL;

	if ( ! pFnGetUsingTactialReload )
		pFnGetUsingTactialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetUsingTactialReload" );

	AKFPerk_Sharpshooter_execGetUsingTactialReload_Parms GetUsingTactialReload_Parms;

	this->ProcessEvent ( pFnGetUsingTactialReload, &GetUsingTactialReload_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Sharpshooter::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.Destroyed" );

	AKFPerk_Sharpshooter_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.PostSkillUpdate
// [0x00080902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Sharpshooter::eventPostSkillUpdate ( )
{
	static UFunction* pFnPostSkillUpdate = NULL;

	if ( ! pFnPostSkillUpdate )
		pFnPostSkillUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.PostSkillUpdate" );

	AKFPerk_Sharpshooter_eventPostSkillUpdate_Parms PostSkillUpdate_Parms;

	this->ProcessEvent ( pFnPostSkillUpdate, &PostSkillUpdate_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.ModifyMaxSpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_Sharpshooter::ModifyMaxSpareAmmoAmount ( )
{
	static UFunction* pFnModifyMaxSpareAmmoAmount = NULL;

	if ( ! pFnModifyMaxSpareAmmoAmount )
		pFnModifyMaxSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.ModifyMaxSpareAmmoAmount" );

	AKFPerk_Sharpshooter_execModifyMaxSpareAmmoAmount_Parms ModifyMaxSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifyMaxSpareAmmoAmount, &ModifyMaxSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetCameraViewShakeScale
// [0x00022103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Sharpshooter::GetCameraViewShakeScale ( )
{
	static UFunction* pFnGetCameraViewShakeScale = NULL;

	if ( ! pFnGetCameraViewShakeScale )
		pFnGetCameraViewShakeScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetCameraViewShakeScale" );

	AKFPerk_Sharpshooter_execGetCameraViewShakeScale_Parms GetCameraViewShakeScale_Parms;

	this->ProcessEvent ( pFnGetCameraViewShakeScale, &GetCameraViewShakeScale_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetCameraViewShakeModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_Sharpshooter::eventGetCameraViewShakeModifier ( )
{
	static UFunction* pFnGetCameraViewShakeModifier = NULL;

	if ( ! pFnGetCameraViewShakeModifier )
		pFnGetCameraViewShakeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetCameraViewShakeModifier" );

	AKFPerk_Sharpshooter_eventGetCameraViewShakeModifier_Parms GetCameraViewShakeModifier_Parms;

	this->ProcessEvent ( pFnGetCameraViewShakeModifier, &GetCameraViewShakeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.ModifyRecoil
// [0x00420102] 
// Parameters infos:

void AKFPerk_Sharpshooter::ModifyRecoil ( )
{
	static UFunction* pFnModifyRecoil = NULL;

	if ( ! pFnModifyRecoil )
		pFnModifyRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.ModifyRecoil" );

	AKFPerk_Sharpshooter_execModifyRecoil_Parms ModifyRecoil_Parms;

	this->ProcessEvent ( pFnModifyRecoil, &ModifyRecoil_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetReloadRateScale
// [0x00020102] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetReloadRateScale ( )
{
	static UFunction* pFnGetReloadRateScale = NULL;

	if ( ! pFnGetReloadRateScale )
		pFnGetReloadRateScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetReloadRateScale" );

	AKFPerk_Sharpshooter_execGetReloadRateScale_Parms GetReloadRateScale_Parms;

	this->ProcessEvent ( pFnGetReloadRateScale, &GetReloadRateScale_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.ModifyRateOfFire
// [0x00420102] 
// Parameters infos:

void AKFPerk_Sharpshooter::ModifyRateOfFire ( )
{
	static UFunction* pFnModifyRateOfFire = NULL;

	if ( ! pFnModifyRateOfFire )
		pFnModifyRateOfFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.ModifyRateOfFire" );

	AKFPerk_Sharpshooter_execModifyRateOfFire_Parms ModifyRateOfFire_Parms;

	this->ProcessEvent ( pFnModifyRateOfFire, &ModifyRateOfFire_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_Sharpshooter::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.ModifyDamageGiven" );

	AKFPerk_Sharpshooter_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.ModifyWeaponSwitchTime
// [0x00420102] 
// Parameters infos:

void AKFPerk_Sharpshooter::ModifyWeaponSwitchTime ( )
{
	static UFunction* pFnModifyWeaponSwitchTime = NULL;

	if ( ! pFnModifyWeaponSwitchTime )
		pFnModifyWeaponSwitchTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.ModifyWeaponSwitchTime" );

	AKFPerk_Sharpshooter_execModifyWeaponSwitchTime_Parms ModifyWeaponSwitchTime_Parms;

	this->ProcessEvent ( pFnModifyWeaponSwitchTime, &ModifyWeaponSwitchTime_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.ModifySpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk_Sharpshooter::ModifySpeed ( )
{
	static UFunction* pFnModifySpeed = NULL;

	if ( ! pFnModifySpeed )
		pFnModifySpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.ModifySpeed" );

	AKFPerk_Sharpshooter_execModifySpeed_Parms ModifySpeed_Parms;

	this->ProcessEvent ( pFnModifySpeed, &ModifySpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetHeadshotXP
// [0x00022102] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetHeadshotXP ( )
{
	static UFunction* pFnGetHeadshotXP = NULL;

	if ( ! pFnGetHeadshotXP )
		pFnGetHeadshotXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetHeadshotXP" );

	AKFPerk_Sharpshooter_execGetHeadshotXP_Parms GetHeadshotXP_Parms;

	this->ProcessEvent ( pFnGetHeadshotXP, &GetHeadshotXP_Parms, NULL );
};

// Function KFGame.KFPerk_Sharpshooter.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_Sharpshooter::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Sharpshooter.GetPassiveStrings" );

	AKFPerk_Sharpshooter_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_Support.PlayerDied
// [0x00020102] 
// Parameters infos:

void AKFPerk_Support::PlayerDied ( )
{
	static UFunction* pFnPlayerDied = NULL;

	if ( ! pFnPlayerDied )
		pFnPlayerDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.PlayerDied" );

	AKFPerk_Support_execPlayerDied_Parms PlayerDied_Parms;

	this->ProcessEvent ( pFnPlayerDied, &PlayerDied_Parms, NULL );
};

// Function KFGame.KFPerk_Support.LogPerkSkills
// [0x00020102] 
// Parameters infos:

void AKFPerk_Support::LogPerkSkills ( )
{
	static UFunction* pFnLogPerkSkills = NULL;

	if ( ! pFnLogPerkSkills )
		pFnLogPerkSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.LogPerkSkills" );

	AKFPerk_Support_execLogPerkSkills_Parms LogPerkSkills_Parms;

	this->ProcessEvent ( pFnLogPerkSkills, &LogPerkSkills_Parms, NULL );
};

// Function KFGame.KFPerk_Support.LogTacticalReload
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::LogTacticalReload ( )
{
	static UFunction* pFnLogTacticalReload = NULL;

	if ( ! pFnLogTacticalReload )
		pFnLogTacticalReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.LogTacticalReload" );

	AKFPerk_Support_execLogTacticalReload_Parms LogTacticalReload_Parms;

	this->ProcessEvent ( pFnLogTacticalReload, &LogTacticalReload_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetDoorRepairXP
// [0x00422002] 
// Parameters infos:

void AKFPerk_Support::GetDoorRepairXP ( )
{
	static UFunction* pFnGetDoorRepairXP = NULL;

	if ( ! pFnGetDoorRepairXP )
		pFnGetDoorRepairXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetDoorRepairXP" );

	AKFPerk_Support_execGetDoorRepairXP_Parms GetDoorRepairXP_Parms;

	this->ProcessEvent ( pFnGetDoorRepairXP, &GetDoorRepairXP_Parms, NULL );
};

// Function KFGame.KFPerk_Support.CanRepairDoors
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPerk_Support::CanRepairDoors ( )
{
	static UFunction* pFnCanRepairDoors = NULL;

	if ( ! pFnCanRepairDoors )
		pFnCanRepairDoors = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.CanRepairDoors" );

	AKFPerk_Support_execCanRepairDoors_Parms CanRepairDoors_Parms;

	pFnCanRepairDoors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanRepairDoors, &CanRepairDoors_Parms, NULL );

	pFnCanRepairDoors->FunctionFlags |= 0x400;
};

// Function KFGame.KFPerk_Support.IsPerforateActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsPerforateActive ( )
{
	static UFunction* pFnIsPerforateActive = NULL;

	if ( ! pFnIsPerforateActive )
		pFnIsPerforateActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsPerforateActive" );

	AKFPerk_Support_execIsPerforateActive_Parms IsPerforateActive_Parms;

	this->ProcessEvent ( pFnIsPerforateActive, &IsPerforateActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsResupplyActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsResupplyActive ( )
{
	static UFunction* pFnIsResupplyActive = NULL;

	if ( ! pFnIsResupplyActive )
		pFnIsResupplyActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsResupplyActive" );

	AKFPerk_Support_execIsResupplyActive_Parms IsResupplyActive_Parms;

	this->ProcessEvent ( pFnIsResupplyActive, &IsResupplyActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsConcussionRoundsActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsConcussionRoundsActive ( )
{
	static UFunction* pFnIsConcussionRoundsActive = NULL;

	if ( ! pFnIsConcussionRoundsActive )
		pFnIsConcussionRoundsActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsConcussionRoundsActive" );

	AKFPerk_Support_execIsConcussionRoundsActive_Parms IsConcussionRoundsActive_Parms;

	this->ProcessEvent ( pFnIsConcussionRoundsActive, &IsConcussionRoundsActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsTacticalReloadActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsTacticalReloadActive ( )
{
	static UFunction* pFnIsTacticalReloadActive = NULL;

	if ( ! pFnIsTacticalReloadActive )
		pFnIsTacticalReloadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsTacticalReloadActive" );

	AKFPerk_Support_execIsTacticalReloadActive_Parms IsTacticalReloadActive_Parms;

	this->ProcessEvent ( pFnIsTacticalReloadActive, &IsTacticalReloadActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsTightChokeActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsTightChokeActive ( )
{
	static UFunction* pFnIsTightChokeActive = NULL;

	if ( ! pFnIsTightChokeActive )
		pFnIsTightChokeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsTightChokeActive" );

	AKFPerk_Support_execIsTightChokeActive_Parms IsTightChokeActive_Parms;

	this->ProcessEvent ( pFnIsTightChokeActive, &IsTightChokeActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsAPShotActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsAPShotActive ( )
{
	static UFunction* pFnIsAPShotActive = NULL;

	if ( ! pFnIsAPShotActive )
		pFnIsAPShotActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsAPShotActive" );

	AKFPerk_Support_execIsAPShotActive_Parms IsAPShotActive_Parms;

	this->ProcessEvent ( pFnIsAPShotActive, &IsAPShotActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsSalvoActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsSalvoActive ( )
{
	static UFunction* pFnIsSalvoActive = NULL;

	if ( ! pFnIsSalvoActive )
		pFnIsSalvoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsSalvoActive" );

	AKFPerk_Support_execIsSalvoActive_Parms IsSalvoActive_Parms;

	this->ProcessEvent ( pFnIsSalvoActive, &IsSalvoActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsFortitudeActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsFortitudeActive ( )
{
	static UFunction* pFnIsFortitudeActive = NULL;

	if ( ! pFnIsFortitudeActive )
		pFnIsFortitudeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsFortitudeActive" );

	AKFPerk_Support_execIsFortitudeActive_Parms IsFortitudeActive_Parms;

	this->ProcessEvent ( pFnIsFortitudeActive, &IsFortitudeActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsHighCapMagsMagActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsHighCapMagsMagActive ( )
{
	static UFunction* pFnIsHighCapMagsMagActive = NULL;

	if ( ! pFnIsHighCapMagsMagActive )
		pFnIsHighCapMagsMagActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsHighCapMagsMagActive" );

	AKFPerk_Support_execIsHighCapMagsMagActive_Parms IsHighCapMagsMagActive_Parms;

	this->ProcessEvent ( pFnIsHighCapMagsMagActive, &IsHighCapMagsMagActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.CouldBarrageActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::CouldBarrageActive ( )
{
	static UFunction* pFnCouldBarrageActive = NULL;

	if ( ! pFnCouldBarrageActive )
		pFnCouldBarrageActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.CouldBarrageActive" );

	AKFPerk_Support_execCouldBarrageActive_Parms CouldBarrageActive_Parms;

	this->ProcessEvent ( pFnCouldBarrageActive, &CouldBarrageActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsBarrageActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::IsBarrageActive ( )
{
	static UFunction* pFnIsBarrageActive = NULL;

	if ( ! pFnIsBarrageActive )
		pFnIsBarrageActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsBarrageActive" );

	AKFPerk_Support_execIsBarrageActive_Parms IsBarrageActive_Parms;

	this->ProcessEvent ( pFnIsBarrageActive, &IsBarrageActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsSupplierActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Support::IsSupplierActive ( )
{
	static UFunction* pFnIsSupplierActive = NULL;

	if ( ! pFnIsSupplierActive )
		pFnIsSupplierActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsSupplierActive" );

	AKFPerk_Support_execIsSupplierActive_Parms IsSupplierActive_Parms;

	this->ProcessEvent ( pFnIsSupplierActive, &IsSupplierActive_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IsDamageTypeOnPerk
// [0x00022002] 
// Parameters infos:

void AKFPerk_Support::IsDamageTypeOnPerk ( )
{
	static UFunction* pFnIsDamageTypeOnPerk = NULL;

	if ( ! pFnIsDamageTypeOnPerk )
		pFnIsDamageTypeOnPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IsDamageTypeOnPerk" );

	AKFPerk_Support_execIsDamageTypeOnPerk_Parms IsDamageTypeOnPerk_Parms;

	this->ProcessEvent ( pFnIsDamageTypeOnPerk, &IsDamageTypeOnPerk_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_Support::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetPassiveStrings" );

	AKFPerk_Support_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_Support.OnWaveStart
// [0x00020002] 
// Parameters infos:

void AKFPerk_Support::OnWaveStart ( )
{
	static UFunction* pFnOnWaveStart = NULL;

	if ( ! pFnOnWaveStart )
		pFnOnWaveStart = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.OnWaveStart" );

	AKFPerk_Support_execOnWaveStart_Parms OnWaveStart_Parms;

	this->ProcessEvent ( pFnOnWaveStart, &OnWaveStart_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Support::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetZedTimeModifier" );

	AKFPerk_Support_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetReceivedAmmoAndArmorSound
// [0x00022102] 
// Parameters infos:

void AKFPerk_Support::GetReceivedAmmoAndArmorSound ( )
{
	static UFunction* pFnGetReceivedAmmoAndArmorSound = NULL;

	if ( ! pFnGetReceivedAmmoAndArmorSound )
		pFnGetReceivedAmmoAndArmorSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetReceivedAmmoAndArmorSound" );

	AKFPerk_Support_execGetReceivedAmmoAndArmorSound_Parms GetReceivedAmmoAndArmorSound_Parms;

	this->ProcessEvent ( pFnGetReceivedAmmoAndArmorSound, &GetReceivedAmmoAndArmorSound_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetReceivedArmorSound
// [0x00022102] 
// Parameters infos:

void AKFPerk_Support::GetReceivedArmorSound ( )
{
	static UFunction* pFnGetReceivedArmorSound = NULL;

	if ( ! pFnGetReceivedArmorSound )
		pFnGetReceivedArmorSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetReceivedArmorSound" );

	AKFPerk_Support_execGetReceivedArmorSound_Parms GetReceivedArmorSound_Parms;

	this->ProcessEvent ( pFnGetReceivedArmorSound, &GetReceivedArmorSound_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetReceivedAmmoSound
// [0x00022102] 
// Parameters infos:

void AKFPerk_Support::GetReceivedAmmoSound ( )
{
	static UFunction* pFnGetReceivedAmmoSound = NULL;

	if ( ! pFnGetReceivedAmmoSound )
		pFnGetReceivedAmmoSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetReceivedAmmoSound" );

	AKFPerk_Support_execGetReceivedAmmoSound_Parms GetReceivedAmmoSound_Parms;

	this->ProcessEvent ( pFnGetReceivedAmmoSound, &GetReceivedAmmoSound_Parms, NULL );
};

// Function KFGame.KFPerk_Support.CanInteract
// [0x00020102] 
// Parameters infos:

void AKFPerk_Support::CanInteract ( )
{
	static UFunction* pFnCanInteract = NULL;

	if ( ! pFnCanInteract )
		pFnCanInteract = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.CanInteract" );

	AKFPerk_Support_execCanInteract_Parms CanInteract_Parms;

	this->ProcessEvent ( pFnCanInteract, &CanInteract_Parms, NULL );
};

// Function KFGame.KFPerk_Support.Interact
// [0x00820102] 
// Parameters infos:

void AKFPerk_Support::Interact ( )
{
	static UFunction* pFnInteract = NULL;

	if ( ! pFnInteract )
		pFnInteract = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.Interact" );

	AKFPerk_Support_execInteract_Parms Interact_Parms;

	this->ProcessEvent ( pFnInteract, &Interact_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk_Support::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetStumblePowerModifier" );

	AKFPerk_Support_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetTightChokeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Support::GetTightChokeModifier ( )
{
	static UFunction* pFnGetTightChokeModifier = NULL;

	if ( ! pFnGetTightChokeModifier )
		pFnGetTightChokeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetTightChokeModifier" );

	AKFPerk_Support_execGetTightChokeModifier_Parms GetTightChokeModifier_Parms;

	this->ProcessEvent ( pFnGetTightChokeModifier, &GetTightChokeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ModifyHealth
// [0x00420002] 
// Parameters infos:

void AKFPerk_Support::ModifyHealth ( )
{
	static UFunction* pFnModifyHealth = NULL;

	if ( ! pFnModifyHealth )
		pFnModifyHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ModifyHealth" );

	AKFPerk_Support_execModifyHealth_Parms ModifyHealth_Parms;

	this->ProcessEvent ( pFnModifyHealth, &ModifyHealth_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetUsingTactialReload
// [0x00020102] 
// Parameters infos:

void AKFPerk_Support::GetUsingTactialReload ( )
{
	static UFunction* pFnGetUsingTactialReload = NULL;

	if ( ! pFnGetUsingTactialReload )
		pFnGetUsingTactialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetUsingTactialReload" );

	AKFPerk_Support_execGetUsingTactialReload_Parms GetUsingTactialReload_Parms;

	this->ProcessEvent ( pFnGetUsingTactialReload, &GetUsingTactialReload_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetResupplyMaxSpareAmmoModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::GetResupplyMaxSpareAmmoModifier ( )
{
	static UFunction* pFnGetResupplyMaxSpareAmmoModifier = NULL;

	if ( ! pFnGetResupplyMaxSpareAmmoModifier )
		pFnGetResupplyMaxSpareAmmoModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetResupplyMaxSpareAmmoModifier" );

	AKFPerk_Support_execGetResupplyMaxSpareAmmoModifier_Parms GetResupplyMaxSpareAmmoModifier_Parms;

	this->ProcessEvent ( pFnGetResupplyMaxSpareAmmoModifier, &GetResupplyMaxSpareAmmoModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ModifyMaxSpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_Support::ModifyMaxSpareAmmoAmount ( )
{
	static UFunction* pFnModifyMaxSpareAmmoAmount = NULL;

	if ( ! pFnModifyMaxSpareAmmoAmount )
		pFnModifyMaxSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ModifyMaxSpareAmmoAmount" );

	AKFPerk_Support_execModifyMaxSpareAmmoAmount_Parms ModifyMaxSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifyMaxSpareAmmoAmount, &ModifyMaxSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ModifySpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_Support::ModifySpareAmmoAmount ( )
{
	static UFunction* pFnModifySpareAmmoAmount = NULL;

	if ( ! pFnModifySpareAmmoAmount )
		pFnModifySpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ModifySpareAmmoAmount" );

	AKFPerk_Support_execModifySpareAmmoAmount_Parms ModifySpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifySpareAmmoAmount, &ModifySpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ModifyMagSizeAndNumber
// [0x00424102] 
// Parameters infos:

void AKFPerk_Support::ModifyMagSizeAndNumber ( )
{
	static UFunction* pFnModifyMagSizeAndNumber = NULL;

	if ( ! pFnModifyMagSizeAndNumber )
		pFnModifyMagSizeAndNumber = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ModifyMagSizeAndNumber" );

	AKFPerk_Support_execModifyMagSizeAndNumber_Parms ModifyMagSizeAndNumber_Parms;

	this->ProcessEvent ( pFnModifyMagSizeAndNumber, &ModifyMagSizeAndNumber_Parms, NULL );
};

// Function KFGame.KFPerk_Support.IgnoresPenetrationDmgReduction
// [0x00020102] 
// Parameters infos:

void AKFPerk_Support::IgnoresPenetrationDmgReduction ( )
{
	static UFunction* pFnIgnoresPenetrationDmgReduction = NULL;

	if ( ! pFnIgnoresPenetrationDmgReduction )
		pFnIgnoresPenetrationDmgReduction = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.IgnoresPenetrationDmgReduction" );

	AKFPerk_Support_execIgnoresPenetrationDmgReduction_Parms IgnoresPenetrationDmgReduction_Parms;

	this->ProcessEvent ( pFnIgnoresPenetrationDmgReduction, &IgnoresPenetrationDmgReduction_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetPenetrationModifier
// [0x00024102] 
// Parameters infos:

void AKFPerk_Support::GetPenetrationModifier ( )
{
	static UFunction* pFnGetPenetrationModifier = NULL;

	if ( ! pFnGetPenetrationModifier )
		pFnGetPenetrationModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetPenetrationModifier" );

	AKFPerk_Support_execGetPenetrationModifier_Parms GetPenetrationModifier_Parms;

	this->ProcessEvent ( pFnGetPenetrationModifier, &GetPenetrationModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ModifyWeldingRate
// [0x00420102] 
// Parameters infos:

void AKFPerk_Support::ModifyWeldingRate ( )
{
	static UFunction* pFnModifyWeldingRate = NULL;

	if ( ! pFnModifyWeldingRate )
		pFnModifyWeldingRate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ModifyWeldingRate" );

	AKFPerk_Support_execModifyWeldingRate_Parms ModifyWeldingRate_Parms;

	this->ProcessEvent ( pFnModifyWeldingRate, &ModifyWeldingRate_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_Support::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ModifyDamageGiven" );

	AKFPerk_Support_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ResetSupplier
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::ResetSupplier ( )
{
	static UFunction* pFnResetSupplier = NULL;

	if ( ! pFnResetSupplier )
		pFnResetSupplier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ResetSupplier" );

	AKFPerk_Support_execResetSupplier_Parms ResetSupplier_Parms;

	this->ProcessEvent ( pFnResetSupplier, &ResetSupplier_Parms, NULL );
};

// Function KFGame.KFPerk_Support.GetExtraStrength
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Support::GetExtraStrength ( )
{
	static UFunction* pFnGetExtraStrength = NULL;

	if ( ! pFnGetExtraStrength )
		pFnGetExtraStrength = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.GetExtraStrength" );

	AKFPerk_Support_execGetExtraStrength_Parms GetExtraStrength_Parms;

	this->ProcessEvent ( pFnGetExtraStrength, &GetExtraStrength_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ApplyWeightLimits
// [0x00020002] 
// Parameters infos:

void AKFPerk_Support::ApplyWeightLimits ( )
{
	static UFunction* pFnApplyWeightLimits = NULL;

	if ( ! pFnApplyWeightLimits )
		pFnApplyWeightLimits = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ApplyWeightLimits" );

	AKFPerk_Support_execApplyWeightLimits_Parms ApplyWeightLimits_Parms;

	this->ProcessEvent ( pFnApplyWeightLimits, &ApplyWeightLimits_Parms, NULL );
};

// Function KFGame.KFPerk_Support.ApplySkillsToPawn
// [0x00020002] 
// Parameters infos:

void AKFPerk_Support::ApplySkillsToPawn ( )
{
	static UFunction* pFnApplySkillsToPawn = NULL;

	if ( ! pFnApplySkillsToPawn )
		pFnApplySkillsToPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Support.ApplySkillsToPawn" );

	AKFPerk_Support_execApplySkillsToPawn_Parms ApplySkillsToPawn_Parms;

	this->ProcessEvent ( pFnApplySkillsToPawn, &ApplySkillsToPawn_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetGrenadeWeaponDef
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetGrenadeWeaponDef ( )
{
	static UFunction* pFnGetGrenadeWeaponDef = NULL;

	if ( ! pFnGetGrenadeWeaponDef )
		pFnGetGrenadeWeaponDef = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetGrenadeWeaponDef" );

	AKFPerk_Survivalist_execGetGrenadeWeaponDef_Parms GetGrenadeWeaponDef_Parms;

	this->ProcessEvent ( pFnGetGrenadeWeaponDef, &GetGrenadeWeaponDef_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetGrenadeImagePath
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetGrenadeImagePath ( )
{
	static UFunction* pFnGetGrenadeImagePath = NULL;

	if ( ! pFnGetGrenadeImagePath )
		pFnGetGrenadeImagePath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetGrenadeImagePath" );

	AKFPerk_Survivalist_execGetGrenadeImagePath_Parms GetGrenadeImagePath_Parms;

	this->ProcessEvent ( pFnGetGrenadeImagePath, &GetGrenadeImagePath_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_Survivalist::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetPassiveStrings" );

	AKFPerk_Survivalist_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsIncapMasterActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsIncapMasterActive ( )
{
	static UFunction* pFnIsIncapMasterActive = NULL;

	if ( ! pFnIsIncapMasterActive )
		pFnIsIncapMasterActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsIncapMasterActive" );

	AKFPerk_Survivalist_execIsIncapMasterActive_Parms IsIncapMasterActive_Parms;

	this->ProcessEvent ( pFnIsIncapMasterActive, &IsIncapMasterActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetIncapMasterActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetIncapMasterActive ( )
{
	static UFunction* pFnGetIncapMasterActive = NULL;

	if ( ! pFnGetIncapMasterActive )
		pFnGetIncapMasterActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetIncapMasterActive" );

	AKFPerk_Survivalist_execGetIncapMasterActive_Parms GetIncapMasterActive_Parms;

	this->ProcessEvent ( pFnGetIncapMasterActive, &GetIncapMasterActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsMadManActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsMadManActive ( )
{
	static UFunction* pFnIsMadManActive = NULL;

	if ( ! pFnIsMadManActive )
		pFnIsMadManActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsMadManActive" );

	AKFPerk_Survivalist_execIsMadManActive_Parms IsMadManActive_Parms;

	this->ProcessEvent ( pFnIsMadManActive, &IsMadManActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetMadManActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetMadManActive ( )
{
	static UFunction* pFnGetMadManActive = NULL;

	if ( ! pFnGetMadManActive )
		pFnGetMadManActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetMadManActive" );

	AKFPerk_Survivalist_execGetMadManActive_Parms GetMadManActive_Parms;

	this->ProcessEvent ( pFnGetMadManActive, &GetMadManActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsMakeThingsGoBoomActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsMakeThingsGoBoomActive ( )
{
	static UFunction* pFnIsMakeThingsGoBoomActive = NULL;

	if ( ! pFnIsMakeThingsGoBoomActive )
		pFnIsMakeThingsGoBoomActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsMakeThingsGoBoomActive" );

	AKFPerk_Survivalist_execIsMakeThingsGoBoomActive_Parms IsMakeThingsGoBoomActive_Parms;

	this->ProcessEvent ( pFnIsMakeThingsGoBoomActive, &IsMakeThingsGoBoomActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsZedShrapnelActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsZedShrapnelActive ( )
{
	static UFunction* pFnIsZedShrapnelActive = NULL;

	if ( ! pFnIsZedShrapnelActive )
		pFnIsZedShrapnelActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsZedShrapnelActive" );

	AKFPerk_Survivalist_execIsZedShrapnelActive_Parms IsZedShrapnelActive_Parms;

	this->ProcessEvent ( pFnIsZedShrapnelActive, &IsZedShrapnelActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsBigPocketsActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsBigPocketsActive ( )
{
	static UFunction* pFnIsBigPocketsActive = NULL;

	if ( ! pFnIsBigPocketsActive )
		pFnIsBigPocketsActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsBigPocketsActive" );

	AKFPerk_Survivalist_execIsBigPocketsActive_Parms IsBigPocketsActive_Parms;

	this->ProcessEvent ( pFnIsBigPocketsActive, &IsBigPocketsActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsAmmoVestActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsAmmoVestActive ( )
{
	static UFunction* pFnIsAmmoVestActive = NULL;

	if ( ! pFnIsAmmoVestActive )
		pFnIsAmmoVestActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsAmmoVestActive" );

	AKFPerk_Survivalist_execIsAmmoVestActive_Parms IsAmmoVestActive_Parms;

	this->ProcessEvent ( pFnIsAmmoVestActive, &IsAmmoVestActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsMeleeExpertActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsMeleeExpertActive ( )
{
	static UFunction* pFnIsMeleeExpertActive = NULL;

	if ( ! pFnIsMeleeExpertActive )
		pFnIsMeleeExpertActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsMeleeExpertActive" );

	AKFPerk_Survivalist_execIsMeleeExpertActive_Parms IsMeleeExpertActive_Parms;

	this->ProcessEvent ( pFnIsMeleeExpertActive, &IsMeleeExpertActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsFieldMedicActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsFieldMedicActive ( )
{
	static UFunction* pFnIsFieldMedicActive = NULL;

	if ( ! pFnIsFieldMedicActive )
		pFnIsFieldMedicActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsFieldMedicActive" );

	AKFPerk_Survivalist_execIsFieldMedicActive_Parms IsFieldMedicActive_Parms;

	this->ProcessEvent ( pFnIsFieldMedicActive, &IsFieldMedicActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsHeavyReloadActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsHeavyReloadActive ( )
{
	static UFunction* pFnIsHeavyReloadActive = NULL;

	if ( ! pFnIsHeavyReloadActive )
		pFnIsHeavyReloadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsHeavyReloadActive" );

	AKFPerk_Survivalist_execIsHeavyReloadActive_Parms IsHeavyReloadActive_Parms;

	this->ProcessEvent ( pFnIsHeavyReloadActive, &IsHeavyReloadActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsTacticalReloadActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::IsTacticalReloadActive ( )
{
	static UFunction* pFnIsTacticalReloadActive = NULL;

	if ( ! pFnIsTacticalReloadActive )
		pFnIsTacticalReloadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsTacticalReloadActive" );

	AKFPerk_Survivalist_execIsTacticalReloadActive_Parms IsTacticalReloadActive_Parms;

	this->ProcessEvent ( pFnIsTacticalReloadActive, &IsTacticalReloadActive_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetGrenadeClass
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetGrenadeClass ( )
{
	static UFunction* pFnGetGrenadeClass = NULL;

	if ( ! pFnGetGrenadeClass )
		pFnGetGrenadeClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetGrenadeClass" );

	AKFPerk_Survivalist_execGetGrenadeClass_Parms GetGrenadeClass_Parms;

	this->ProcessEvent ( pFnGetGrenadeClass, &GetGrenadeClass_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetSnarePowerModifier
// [0x00024102] 
// Parameters infos:

void AKFPerk_Survivalist::GetSnarePowerModifier ( )
{
	static UFunction* pFnGetSnarePowerModifier = NULL;

	if ( ! pFnGetSnarePowerModifier )
		pFnGetSnarePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetSnarePowerModifier" );

	AKFPerk_Survivalist_execGetSnarePowerModifier_Parms GetSnarePowerModifier_Parms;

	this->ProcessEvent ( pFnGetSnarePowerModifier, &GetSnarePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetStunPowerModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk_Survivalist::GetStunPowerModifier ( )
{
	static UFunction* pFnGetStunPowerModifier = NULL;

	if ( ! pFnGetStunPowerModifier )
		pFnGetStunPowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetStunPowerModifier" );

	AKFPerk_Survivalist_execGetStunPowerModifier_Parms GetStunPowerModifier_Parms;

	this->ProcessEvent ( pFnGetStunPowerModifier, &GetStunPowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk_Survivalist::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetStumblePowerModifier" );

	AKFPerk_Survivalist_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetKnockdownPowerModifier
// [0x00024002] 
// Parameters infos:

void AKFPerk_Survivalist::GetKnockdownPowerModifier ( )
{
	static UFunction* pFnGetKnockdownPowerModifier = NULL;

	if ( ! pFnGetKnockdownPowerModifier )
		pFnGetKnockdownPowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetKnockdownPowerModifier" );

	AKFPerk_Survivalist_execGetKnockdownPowerModifier_Parms GetKnockdownPowerModifier_Parms;

	this->ProcessEvent ( pFnGetKnockdownPowerModifier, &GetKnockdownPowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetZedTimeModifier" );

	AKFPerk_Survivalist_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetAoERadiusModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetAoERadiusModifier ( )
{
	static UFunction* pFnGetAoERadiusModifier = NULL;

	if ( ! pFnGetAoERadiusModifier )
		pFnGetAoERadiusModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetAoERadiusModifier" );

	AKFPerk_Survivalist_execGetAoERadiusModifier_Parms GetAoERadiusModifier_Parms;

	this->ProcessEvent ( pFnGetAoERadiusModifier, &GetAoERadiusModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ShouldShrapnel
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::ShouldShrapnel ( )
{
	static UFunction* pFnShouldShrapnel = NULL;

	if ( ! pFnShouldShrapnel )
		pFnShouldShrapnel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ShouldShrapnel" );

	AKFPerk_Survivalist_execShouldShrapnel_Parms ShouldShrapnel_Parms;

	this->ProcessEvent ( pFnShouldShrapnel, &ShouldShrapnel_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetExplosionTemplate
// [0x00020002] 
// Parameters infos:

void AKFPerk_Survivalist::GetExplosionTemplate ( )
{
	static UFunction* pFnGetExplosionTemplate = NULL;

	if ( ! pFnGetExplosionTemplate )
		pFnGetExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetExplosionTemplate" );

	AKFPerk_Survivalist_execGetExplosionTemplate_Parms GetExplosionTemplate_Parms;

	this->ProcessEvent ( pFnGetExplosionTemplate, &GetExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.CouldBeZedShrapnel
// [0x00020002] 
// Parameters infos:

void AKFPerk_Survivalist::CouldBeZedShrapnel ( )
{
	static UFunction* pFnCouldBeZedShrapnel = NULL;

	if ( ! pFnCouldBeZedShrapnel )
		pFnCouldBeZedShrapnel = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.CouldBeZedShrapnel" );

	AKFPerk_Survivalist_execCouldBeZedShrapnel_Parms CouldBeZedShrapnel_Parms;

	this->ProcessEvent ( pFnCouldBeZedShrapnel, &CouldBeZedShrapnel_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ModifyMaxSpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_Survivalist::ModifyMaxSpareAmmoAmount ( )
{
	static UFunction* pFnModifyMaxSpareAmmoAmount = NULL;

	if ( ! pFnModifyMaxSpareAmmoAmount )
		pFnModifyMaxSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ModifyMaxSpareAmmoAmount" );

	AKFPerk_Survivalist_execModifyMaxSpareAmmoAmount_Parms ModifyMaxSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifyMaxSpareAmmoAmount, &ModifyMaxSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetInjectionPotencyModifier
// [0x00042003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::GetInjectionPotencyModifier ( )
{
	static UFunction* pFnGetInjectionPotencyModifier = NULL;

	if ( ! pFnGetInjectionPotencyModifier )
		pFnGetInjectionPotencyModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetInjectionPotencyModifier" );

	AKFPerk_Survivalist_execGetInjectionPotencyModifier_Parms GetInjectionPotencyModifier_Parms;

	this->ProcessEvent ( pFnGetInjectionPotencyModifier, &GetInjectionPotencyModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ModifyHealAmount
// [0x00420002] 
// Parameters infos:

void AKFPerk_Survivalist::ModifyHealAmount ( )
{
	static UFunction* pFnModifyHealAmount = NULL;

	if ( ! pFnModifyHealAmount )
		pFnModifyHealAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ModifyHealAmount" );

	AKFPerk_Survivalist_execModifyHealAmount_Parms ModifyHealAmount_Parms;

	this->ProcessEvent ( pFnModifyHealAmount, &ModifyHealAmount_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ModifyHealerRechargeTime
// [0x00420102] 
// Parameters infos:

void AKFPerk_Survivalist::ModifyHealerRechargeTime ( )
{
	static UFunction* pFnModifyHealerRechargeTime = NULL;

	if ( ! pFnModifyHealerRechargeTime )
		pFnModifyHealerRechargeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ModifyHealerRechargeTime" );

	AKFPerk_Survivalist_execModifyHealerRechargeTime_Parms ModifyHealerRechargeTime_Parms;

	this->ProcessEvent ( pFnModifyHealerRechargeTime, &ModifyHealerRechargeTime_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsWeaponOnPerkHeavy
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::IsWeaponOnPerkHeavy ( )
{
	static UFunction* pFnIsWeaponOnPerkHeavy = NULL;

	if ( ! pFnIsWeaponOnPerkHeavy )
		pFnIsWeaponOnPerkHeavy = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsWeaponOnPerkHeavy" );

	AKFPerk_Survivalist_execIsWeaponOnPerkHeavy_Parms IsWeaponOnPerkHeavy_Parms;

	this->ProcessEvent ( pFnIsWeaponOnPerkHeavy, &IsWeaponOnPerkHeavy_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsWeaponOnPerkLight
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::IsWeaponOnPerkLight ( )
{
	static UFunction* pFnIsWeaponOnPerkLight = NULL;

	if ( ! pFnIsWeaponOnPerkLight )
		pFnIsWeaponOnPerkLight = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsWeaponOnPerkLight" );

	AKFPerk_Survivalist_execIsWeaponOnPerkLight_Parms IsWeaponOnPerkLight_Parms;

	this->ProcessEvent ( pFnIsWeaponOnPerkLight, &IsWeaponOnPerkLight_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetUsingTactialReload
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetUsingTactialReload ( )
{
	static UFunction* pFnGetUsingTactialReload = NULL;

	if ( ! pFnGetUsingTactialReload )
		pFnGetUsingTactialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetUsingTactialReload" );

	AKFPerk_Survivalist_execGetUsingTactialReload_Parms GetUsingTactialReload_Parms;

	this->ProcessEvent ( pFnGetUsingTactialReload, &GetUsingTactialReload_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ModifyArmor
// [0x00420002] 
// Parameters infos:

void AKFPerk_Survivalist::ModifyArmor ( )
{
	static UFunction* pFnModifyArmor = NULL;

	if ( ! pFnModifyArmor )
		pFnModifyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ModifyArmor" );

	AKFPerk_Survivalist_execModifyArmor_Parms ModifyArmor_Parms;

	this->ProcessEvent ( pFnModifyArmor, &ModifyArmor_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.IsZedTimeReloadAllowed
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::IsZedTimeReloadAllowed ( )
{
	static UFunction* pFnIsZedTimeReloadAllowed = NULL;

	if ( ! pFnIsZedTimeReloadAllowed )
		pFnIsZedTimeReloadAllowed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.IsZedTimeReloadAllowed" );

	AKFPerk_Survivalist_execIsZedTimeReloadAllowed_Parms IsZedTimeReloadAllowed_Parms;

	this->ProcessEvent ( pFnIsZedTimeReloadAllowed, &IsZedTimeReloadAllowed_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetReloadRateScale
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetReloadRateScale ( )
{
	static UFunction* pFnGetReloadRateScale = NULL;

	if ( ! pFnGetReloadRateScale )
		pFnGetReloadRateScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetReloadRateScale" );

	AKFPerk_Survivalist_execGetReloadRateScale_Parms GetReloadRateScale_Parms;

	this->ProcessEvent ( pFnGetReloadRateScale, &GetReloadRateScale_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.HasHeavyArmor
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::HasHeavyArmor ( )
{
	static UFunction* pFnHasHeavyArmor = NULL;

	if ( ! pFnHasHeavyArmor )
		pFnHasHeavyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.HasHeavyArmor" );

	AKFPerk_Survivalist_execHasHeavyArmor_Parms HasHeavyArmor_Parms;

	this->ProcessEvent ( pFnHasHeavyArmor, &HasHeavyArmor_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetMeleeExpertAttackSpeedModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::GetMeleeExpertAttackSpeedModifier ( )
{
	static UFunction* pFnGetMeleeExpertAttackSpeedModifier = NULL;

	if ( ! pFnGetMeleeExpertAttackSpeedModifier )
		pFnGetMeleeExpertAttackSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetMeleeExpertAttackSpeedModifier" );

	AKFPerk_Survivalist_execGetMeleeExpertAttackSpeedModifier_Parms GetMeleeExpertAttackSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetMeleeExpertAttackSpeedModifier, &GetMeleeExpertAttackSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetMeleeExpertMovementSpeedModifier
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_Survivalist::GetMeleeExpertMovementSpeedModifier ( )
{
	static UFunction* pFnGetMeleeExpertMovementSpeedModifier = NULL;

	if ( ! pFnGetMeleeExpertMovementSpeedModifier )
		pFnGetMeleeExpertMovementSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetMeleeExpertMovementSpeedModifier" );

	AKFPerk_Survivalist_execGetMeleeExpertMovementSpeedModifier_Parms GetMeleeExpertMovementSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetMeleeExpertMovementSpeedModifier, &GetMeleeExpertMovementSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ModifySpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk_Survivalist::ModifySpeed ( )
{
	static UFunction* pFnModifySpeed = NULL;

	if ( ! pFnModifySpeed )
		pFnModifySpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ModifySpeed" );

	AKFPerk_Survivalist_execModifySpeed_Parms ModifySpeed_Parms;

	this->ProcessEvent ( pFnModifySpeed, &ModifySpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ModifyMeleeAttackSpeed
// [0x00420102] 
// Parameters infos:

void AKFPerk_Survivalist::ModifyMeleeAttackSpeed ( )
{
	static UFunction* pFnModifyMeleeAttackSpeed = NULL;

	if ( ! pFnModifyMeleeAttackSpeed )
		pFnModifyMeleeAttackSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ModifyMeleeAttackSpeed" );

	AKFPerk_Survivalist_execModifyMeleeAttackSpeed_Parms ModifyMeleeAttackSpeed_Parms;

	this->ProcessEvent ( pFnModifyMeleeAttackSpeed, &ModifyMeleeAttackSpeed_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ModifyDamageTaken
// [0x00424002] 
// Parameters infos:

void AKFPerk_Survivalist::ModifyDamageTaken ( )
{
	static UFunction* pFnModifyDamageTaken = NULL;

	if ( ! pFnModifyDamageTaken )
		pFnModifyDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ModifyDamageTaken" );

	AKFPerk_Survivalist_execModifyDamageTaken_Parms ModifyDamageTaken_Parms;

	this->ProcessEvent ( pFnModifyDamageTaken, &ModifyDamageTaken_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_Survivalist::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ModifyDamageGiven" );

	AKFPerk_Survivalist_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ShouldAutosellWeapon
// [0x00020002] 
// Parameters infos:

void AKFPerk_Survivalist::ShouldAutosellWeapon ( )
{
	static UFunction* pFnShouldAutosellWeapon = NULL;

	if ( ! pFnShouldAutosellWeapon )
		pFnShouldAutosellWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ShouldAutosellWeapon" );

	AKFPerk_Survivalist_execShouldAutosellWeapon_Parms ShouldAutosellWeapon_Parms;

	this->ProcessEvent ( pFnShouldAutosellWeapon, &ShouldAutosellWeapon_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.GetPrimaryWeaponClassPath
// [0x00020102] 
// Parameters infos:

void AKFPerk_Survivalist::GetPrimaryWeaponClassPath ( )
{
	static UFunction* pFnGetPrimaryWeaponClassPath = NULL;

	if ( ! pFnGetPrimaryWeaponClassPath )
		pFnGetPrimaryWeaponClassPath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.GetPrimaryWeaponClassPath" );

	AKFPerk_Survivalist_execGetPrimaryWeaponClassPath_Parms GetPrimaryWeaponClassPath_Parms;

	this->ProcessEvent ( pFnGetPrimaryWeaponClassPath, &GetPrimaryWeaponClassPath_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ShouldGetAllTheXP
// [0x00020002] 
// Parameters infos:

void AKFPerk_Survivalist::ShouldGetAllTheXP ( )
{
	static UFunction* pFnShouldGetAllTheXP = NULL;

	if ( ! pFnShouldGetAllTheXP )
		pFnShouldGetAllTheXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ShouldGetAllTheXP" );

	AKFPerk_Survivalist_execShouldGetAllTheXP_Parms ShouldGetAllTheXP_Parms;

	this->ProcessEvent ( pFnShouldGetAllTheXP, &ShouldGetAllTheXP_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.ApplyWeightLimits
// [0x00020002] 
// Parameters infos:

void AKFPerk_Survivalist::ApplyWeightLimits ( )
{
	static UFunction* pFnApplyWeightLimits = NULL;

	if ( ! pFnApplyWeightLimits )
		pFnApplyWeightLimits = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.ApplyWeightLimits" );

	AKFPerk_Survivalist_execApplyWeightLimits_Parms ApplyWeightLimits_Parms;

	this->ProcessEvent ( pFnApplyWeightLimits, &ApplyWeightLimits_Parms, NULL );
};

// Function KFGame.KFPerk_Survivalist.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:

void AKFPerk_Survivalist::SetPlayerDefaults ( )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_Survivalist.SetPlayerDefaults" );

	AKFPerk_Survivalist_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetPassiveStrings
// [0x00422102] 
// Parameters infos:

void AKFPerk_SWAT::GetPassiveStrings ( )
{
	static UFunction* pFnGetPassiveStrings = NULL;

	if ( ! pFnGetPassiveStrings )
		pFnGetPassiveStrings = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetPassiveStrings" );

	AKFPerk_SWAT_execGetPassiveStrings_Parms GetPassiveStrings_Parms;

	this->ProcessEvent ( pFnGetPassiveStrings, &GetPassiveStrings_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetClotKillXP
// [0x00022102] 
// Parameters infos:

void AKFPerk_SWAT::GetClotKillXP ( )
{
	static UFunction* pFnGetClotKillXP = NULL;

	if ( ! pFnGetClotKillXP )
		pFnGetClotKillXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetClotKillXP" );

	AKFPerk_SWAT_execGetClotKillXP_Parms GetClotKillXP_Parms;

	this->ProcessEvent ( pFnGetClotKillXP, &GetClotKillXP_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsRapidAssaultActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::IsRapidAssaultActive ( )
{
	static UFunction* pFnIsRapidAssaultActive = NULL;

	if ( ! pFnIsRapidAssaultActive )
		pFnIsRapidAssaultActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsRapidAssaultActive" );

	AKFPerk_SWAT_execIsRapidAssaultActive_Parms IsRapidAssaultActive_Parms;

	this->ProcessEvent ( pFnIsRapidAssaultActive, &IsRapidAssaultActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsSWATEnforcerActive
// [0x00020002] 
// Parameters infos:

void AKFPerk_SWAT::IsSWATEnforcerActive ( )
{
	static UFunction* pFnIsSWATEnforcerActive = NULL;

	if ( ! pFnIsSWATEnforcerActive )
		pFnIsSWATEnforcerActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsSWATEnforcerActive" );

	AKFPerk_SWAT_execIsSWATEnforcerActive_Parms IsSWATEnforcerActive_Parms;

	this->ProcessEvent ( pFnIsSWATEnforcerActive, &IsSWATEnforcerActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsCrippleActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_SWAT::IsCrippleActive ( )
{
	static UFunction* pFnIsCrippleActive = NULL;

	if ( ! pFnIsCrippleActive )
		pFnIsCrippleActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsCrippleActive" );

	AKFPerk_SWAT_execIsCrippleActive_Parms IsCrippleActive_Parms;

	this->ProcessEvent ( pFnIsCrippleActive, &IsCrippleActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsBodyArmorActive
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPerk_SWAT::IsBodyArmorActive ( )
{
	static UFunction* pFnIsBodyArmorActive = NULL;

	if ( ! pFnIsBodyArmorActive )
		pFnIsBodyArmorActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsBodyArmorActive" );

	AKFPerk_SWAT_execIsBodyArmorActive_Parms IsBodyArmorActive_Parms;

	this->ProcessEvent ( pFnIsBodyArmorActive, &IsBodyArmorActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsAmmoVestActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_SWAT::IsAmmoVestActive ( )
{
	static UFunction* pFnIsAmmoVestActive = NULL;

	if ( ! pFnIsAmmoVestActive )
		pFnIsAmmoVestActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsAmmoVestActive" );

	AKFPerk_SWAT_execIsAmmoVestActive_Parms IsAmmoVestActive_Parms;

	this->ProcessEvent ( pFnIsAmmoVestActive, &IsAmmoVestActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsSpecialAmmunitionActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::IsSpecialAmmunitionActive ( )
{
	static UFunction* pFnIsSpecialAmmunitionActive = NULL;

	if ( ! pFnIsSpecialAmmunitionActive )
		pFnIsSpecialAmmunitionActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsSpecialAmmunitionActive" );

	AKFPerk_SWAT_execIsSpecialAmmunitionActive_Parms IsSpecialAmmunitionActive_Parms;

	this->ProcessEvent ( pFnIsSpecialAmmunitionActive, &IsSpecialAmmunitionActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetUsingTactialReload
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::GetUsingTactialReload ( )
{
	static UFunction* pFnGetUsingTactialReload = NULL;

	if ( ! pFnGetUsingTactialReload )
		pFnGetUsingTactialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetUsingTactialReload" );

	AKFPerk_SWAT_execGetUsingTactialReload_Parms GetUsingTactialReload_Parms;

	this->ProcessEvent ( pFnGetUsingTactialReload, &GetUsingTactialReload_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsTacticalReloadActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_SWAT::IsTacticalReloadActive ( )
{
	static UFunction* pFnIsTacticalReloadActive = NULL;

	if ( ! pFnIsTacticalReloadActive )
		pFnIsTacticalReloadActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsTacticalReloadActive" );

	AKFPerk_SWAT_execIsTacticalReloadActive_Parms IsTacticalReloadActive_Parms;

	this->ProcessEvent ( pFnIsTacticalReloadActive, &IsTacticalReloadActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsBackupActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_SWAT::IsBackupActive ( )
{
	static UFunction* pFnIsBackupActive = NULL;

	if ( ! pFnIsBackupActive )
		pFnIsBackupActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsBackupActive" );

	AKFPerk_SWAT_execIsBackupActive_Parms IsBackupActive_Parms;

	this->ProcessEvent ( pFnIsBackupActive, &IsBackupActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsTacticalMovementActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::IsTacticalMovementActive ( )
{
	static UFunction* pFnIsTacticalMovementActive = NULL;

	if ( ! pFnIsTacticalMovementActive )
		pFnIsTacticalMovementActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsTacticalMovementActive" );

	AKFPerk_SWAT_execIsTacticalMovementActive_Parms IsTacticalMovementActive_Parms;

	this->ProcessEvent ( pFnIsTacticalMovementActive, &IsTacticalMovementActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.IsHeavyArmorActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::IsHeavyArmorActive ( )
{
	static UFunction* pFnIsHeavyArmorActive = NULL;

	if ( ! pFnIsHeavyArmorActive )
		pFnIsHeavyArmorActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.IsHeavyArmorActive" );

	AKFPerk_SWAT_execIsHeavyArmorActive_Parms IsHeavyArmorActive_Parms;

	this->ProcessEvent ( pFnIsHeavyArmorActive, &IsHeavyArmorActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetArmorDamageAmount
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::GetArmorDamageAmount ( )
{
	static UFunction* pFnGetArmorDamageAmount = NULL;

	if ( ! pFnGetArmorDamageAmount )
		pFnGetArmorDamageAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetArmorDamageAmount" );

	AKFPerk_SWAT_execGetArmorDamageAmount_Parms GetArmorDamageAmount_Parms;

	this->ProcessEvent ( pFnGetArmorDamageAmount, &GetArmorDamageAmount_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ShouldKnockDownOnBump
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::ShouldKnockDownOnBump ( )
{
	static UFunction* pFnShouldKnockDownOnBump = NULL;

	if ( ! pFnShouldKnockDownOnBump )
		pFnShouldKnockDownOnBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ShouldKnockDownOnBump" );

	AKFPerk_SWAT_execShouldKnockDownOnBump_Parms ShouldKnockDownOnBump_Parms;

	this->ProcessEvent ( pFnShouldKnockDownOnBump, &ShouldKnockDownOnBump_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetIsUberAmmoActive
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::GetIsUberAmmoActive ( )
{
	static UFunction* pFnGetIsUberAmmoActive = NULL;

	if ( ! pFnGetIsUberAmmoActive )
		pFnGetIsUberAmmoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetIsUberAmmoActive" );

	AKFPerk_SWAT_execGetIsUberAmmoActive_Parms GetIsUberAmmoActive_Parms;

	this->ProcessEvent ( pFnGetIsUberAmmoActive, &GetIsUberAmmoActive_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetStumblePowerModifier
// [0x00424002] 
// Parameters infos:

void AKFPerk_SWAT::GetStumblePowerModifier ( )
{
	static UFunction* pFnGetStumblePowerModifier = NULL;

	if ( ! pFnGetStumblePowerModifier )
		pFnGetStumblePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetStumblePowerModifier" );

	AKFPerk_SWAT_execGetStumblePowerModifier_Parms GetStumblePowerModifier_Parms;

	this->ProcessEvent ( pFnGetStumblePowerModifier, &GetStumblePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetZedTimeModifier
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::GetZedTimeModifier ( )
{
	static UFunction* pFnGetZedTimeModifier = NULL;

	if ( ! pFnGetZedTimeModifier )
		pFnGetZedTimeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetZedTimeModifier" );

	AKFPerk_SWAT_execGetZedTimeModifier_Parms GetZedTimeModifier_Parms;

	this->ProcessEvent ( pFnGetZedTimeModifier, &GetZedTimeModifier_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ModifyArmor
// [0x00420002] 
// Parameters infos:

void AKFPerk_SWAT::ModifyArmor ( )
{
	static UFunction* pFnModifyArmor = NULL;

	if ( ! pFnModifyArmor )
		pFnModifyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ModifyArmor" );

	AKFPerk_SWAT_execModifyArmor_Parms ModifyArmor_Parms;

	this->ProcessEvent ( pFnModifyArmor, &ModifyArmor_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetSnarePowerModifier
// [0x00024102] 
// Parameters infos:

void AKFPerk_SWAT::GetSnarePowerModifier ( )
{
	static UFunction* pFnGetSnarePowerModifier = NULL;

	if ( ! pFnGetSnarePowerModifier )
		pFnGetSnarePowerModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetSnarePowerModifier" );

	AKFPerk_SWAT_execGetSnarePowerModifier_Parms GetSnarePowerModifier_Parms;

	this->ProcessEvent ( pFnGetSnarePowerModifier, &GetSnarePowerModifier_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetSnareSpeedModifier
// [0x00022102] 
// Parameters infos:

void AKFPerk_SWAT::GetSnareSpeedModifier ( )
{
	static UFunction* pFnGetSnareSpeedModifier = NULL;

	if ( ! pFnGetSnareSpeedModifier )
		pFnGetSnareSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetSnareSpeedModifier" );

	AKFPerk_SWAT_execGetSnareSpeedModifier_Parms GetSnareSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetSnareSpeedModifier, &GetSnareSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ModifyMaxSpareAmmoAmount
// [0x00424102] 
// Parameters infos:

void AKFPerk_SWAT::ModifyMaxSpareAmmoAmount ( )
{
	static UFunction* pFnModifyMaxSpareAmmoAmount = NULL;

	if ( ! pFnModifyMaxSpareAmmoAmount )
		pFnModifyMaxSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ModifyMaxSpareAmmoAmount" );

	AKFPerk_SWAT_execModifyMaxSpareAmmoAmount_Parms ModifyMaxSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnModifyMaxSpareAmmoAmount, &ModifyMaxSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ModifyDamageGiven
// [0x00424102] 
// Parameters infos:

void AKFPerk_SWAT::ModifyDamageGiven ( )
{
	static UFunction* pFnModifyDamageGiven = NULL;

	if ( ! pFnModifyDamageGiven )
		pFnModifyDamageGiven = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ModifyDamageGiven" );

	AKFPerk_SWAT_execModifyDamageGiven_Parms ModifyDamageGiven_Parms;

	this->ProcessEvent ( pFnModifyDamageGiven, &ModifyDamageGiven_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ModifyWeaponBopDamping
// [0x00420102] 
// Parameters infos:

void AKFPerk_SWAT::ModifyWeaponBopDamping ( )
{
	static UFunction* pFnModifyWeaponBopDamping = NULL;

	if ( ! pFnModifyWeaponBopDamping )
		pFnModifyWeaponBopDamping = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ModifyWeaponBopDamping" );

	AKFPerk_SWAT_execModifyWeaponBopDamping_Parms ModifyWeaponBopDamping_Parms;

	this->ProcessEvent ( pFnModifyWeaponBopDamping, &ModifyWeaponBopDamping_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetCrouchSpeedModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_SWAT::eventGetCrouchSpeedModifier ( )
{
	static UFunction* pFnGetCrouchSpeedModifier = NULL;

	if ( ! pFnGetCrouchSpeedModifier )
		pFnGetCrouchSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetCrouchSpeedModifier" );

	AKFPerk_SWAT_eventGetCrouchSpeedModifier_Parms GetCrouchSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetCrouchSpeedModifier, &GetCrouchSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.FinalizeSpeedVariables
// [0x00020002] 
// Parameters infos:

void AKFPerk_SWAT::FinalizeSpeedVariables ( )
{
	static UFunction* pFnFinalizeSpeedVariables = NULL;

	if ( ! pFnFinalizeSpeedVariables )
		pFnFinalizeSpeedVariables = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.FinalizeSpeedVariables" );

	AKFPerk_SWAT_execFinalizeSpeedVariables_Parms FinalizeSpeedVariables_Parms;

	this->ProcessEvent ( pFnFinalizeSpeedVariables, &FinalizeSpeedVariables_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetIronSightSpeedModifier
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPerk_SWAT::eventGetIronSightSpeedModifier ( )
{
	static UFunction* pFnGetIronSightSpeedModifier = NULL;

	if ( ! pFnGetIronSightSpeedModifier )
		pFnGetIronSightSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetIronSightSpeedModifier" );

	AKFPerk_SWAT_eventGetIronSightSpeedModifier_Parms GetIronSightSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetIronSightSpeedModifier, &GetIronSightSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.Is9mm
// [0x00042103] ( FUNC_Final )
// Parameters infos:

void AKFPerk_SWAT::Is9mm ( )
{
	static UFunction* pFnIs9mm = NULL;

	if ( ! pFnIs9mm )
		pFnIs9mm = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.Is9mm" );

	AKFPerk_SWAT_execIs9mm_Parms Is9mm_Parms;

	this->ProcessEvent ( pFnIs9mm, &Is9mm_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.HasHeavyArmor
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::HasHeavyArmor ( )
{
	static UFunction* pFnHasHeavyArmor = NULL;

	if ( ! pFnHasHeavyArmor )
		pFnHasHeavyArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.HasHeavyArmor" );

	AKFPerk_SWAT_execHasHeavyArmor_Parms HasHeavyArmor_Parms;

	this->ProcessEvent ( pFnHasHeavyArmor, &HasHeavyArmor_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.CanNotBeGrabbed
// [0x00020002] 
// Parameters infos:

void AKFPerk_SWAT::CanNotBeGrabbed ( )
{
	static UFunction* pFnCanNotBeGrabbed = NULL;

	if ( ! pFnCanNotBeGrabbed )
		pFnCanNotBeGrabbed = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.CanNotBeGrabbed" );

	AKFPerk_SWAT_execCanNotBeGrabbed_Parms CanNotBeGrabbed_Parms;

	this->ProcessEvent ( pFnCanNotBeGrabbed, &CanNotBeGrabbed_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ModifyWeaponSwitchTime
// [0x00420102] 
// Parameters infos:

void AKFPerk_SWAT::ModifyWeaponSwitchTime ( )
{
	static UFunction* pFnModifyWeaponSwitchTime = NULL;

	if ( ! pFnModifyWeaponSwitchTime )
		pFnModifyWeaponSwitchTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ModifyWeaponSwitchTime" );

	AKFPerk_SWAT_execModifyWeaponSwitchTime_Parms ModifyWeaponSwitchTime_Parms;

	this->ProcessEvent ( pFnModifyWeaponSwitchTime, &ModifyWeaponSwitchTime_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ModifyMagSizeAndNumber
// [0x00424102] 
// Parameters infos:

void AKFPerk_SWAT::ModifyMagSizeAndNumber ( )
{
	static UFunction* pFnModifyMagSizeAndNumber = NULL;

	if ( ! pFnModifyMagSizeAndNumber )
		pFnModifyMagSizeAndNumber = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ModifyMagSizeAndNumber" );

	AKFPerk_SWAT_execModifyMagSizeAndNumber_Parms ModifyMagSizeAndNumber_Parms;

	this->ProcessEvent ( pFnModifyMagSizeAndNumber, &ModifyMagSizeAndNumber_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ModifyDamageTaken
// [0x00424002] 
// Parameters infos:

void AKFPerk_SWAT::ModifyDamageTaken ( )
{
	static UFunction* pFnModifyDamageTaken = NULL;

	if ( ! pFnModifyDamageTaken )
		pFnModifyDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ModifyDamageTaken" );

	AKFPerk_SWAT_execModifyDamageTaken_Parms ModifyDamageTaken_Parms;

	this->ProcessEvent ( pFnModifyDamageTaken, &ModifyDamageTaken_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.GetSecondaryWeaponClassPath
// [0x00020102] 
// Parameters infos:

void AKFPerk_SWAT::GetSecondaryWeaponClassPath ( )
{
	static UFunction* pFnGetSecondaryWeaponClassPath = NULL;

	if ( ! pFnGetSecondaryWeaponClassPath )
		pFnGetSecondaryWeaponClassPath = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.GetSecondaryWeaponClassPath" );

	AKFPerk_SWAT_execGetSecondaryWeaponClassPath_Parms GetSecondaryWeaponClassPath_Parms;

	this->ProcessEvent ( pFnGetSecondaryWeaponClassPath, &GetSecondaryWeaponClassPath_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.ApplySkillsToPawn
// [0x00020002] 
// Parameters infos:

void AKFPerk_SWAT::ApplySkillsToPawn ( )
{
	static UFunction* pFnApplySkillsToPawn = NULL;

	if ( ! pFnApplySkillsToPawn )
		pFnApplySkillsToPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.ApplySkillsToPawn" );

	AKFPerk_SWAT_execApplySkillsToPawn_Parms ApplySkillsToPawn_Parms;

	this->ProcessEvent ( pFnApplySkillsToPawn, &ApplySkillsToPawn_Parms, NULL );
};

// Function KFGame.KFPerk_SWAT.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:

void AKFPerk_SWAT::SetPlayerDefaults ( )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFPerk_SWAT.SetPlayerDefaults" );

	AKFPerk_SWAT_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function KFGame.KFPickupFactory.SetPickupVisible
// [0x00020102] 
// Parameters infos:

void AKFPickupFactory::SetPickupVisible ( )
{
	static UFunction* pFnSetPickupVisible = NULL;

	if ( ! pFnSetPickupVisible )
		pFnSetPickupVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.SetPickupVisible" );

	AKFPickupFactory_execSetPickupVisible_Parms SetPickupVisible_Parms;

	this->ProcessEvent ( pFnSetPickupVisible, &SetPickupVisible_Parms, NULL );
};

// Function KFGame.KFPickupFactory.SetPickupHidden
// [0x00020102] 
// Parameters infos:

void AKFPickupFactory::SetPickupHidden ( )
{
	static UFunction* pFnSetPickupHidden = NULL;

	if ( ! pFnSetPickupHidden )
		pFnSetPickupHidden = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.SetPickupHidden" );

	AKFPickupFactory_execSetPickupHidden_Parms SetPickupHidden_Parms;

	this->ProcessEvent ( pFnSetPickupHidden, &SetPickupHidden_Parms, NULL );
};

// Function KFGame.KFPickupFactory.CurrentPickupIsAmmo
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::CurrentPickupIsAmmo ( )
{
	static UFunction* pFnCurrentPickupIsAmmo = NULL;

	if ( ! pFnCurrentPickupIsAmmo )
		pFnCurrentPickupIsAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.CurrentPickupIsAmmo" );

	AKFPickupFactory_execCurrentPickupIsAmmo_Parms CurrentPickupIsAmmo_Parms;

	this->ProcessEvent ( pFnCurrentPickupIsAmmo, &CurrentPickupIsAmmo_Parms, NULL );
};

// Function KFGame.KFPickupFactory.CurrentPickupIsArmor
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::CurrentPickupIsArmor ( )
{
	static UFunction* pFnCurrentPickupIsArmor = NULL;

	if ( ! pFnCurrentPickupIsArmor )
		pFnCurrentPickupIsArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.CurrentPickupIsArmor" );

	AKFPickupFactory_execCurrentPickupIsArmor_Parms CurrentPickupIsArmor_Parms;

	this->ProcessEvent ( pFnCurrentPickupIsArmor, &CurrentPickupIsArmor_Parms, NULL );
};

// Function KFGame.KFPickupFactory.CurrentPickupIsWeapon
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::CurrentPickupIsWeapon ( )
{
	static UFunction* pFnCurrentPickupIsWeapon = NULL;

	if ( ! pFnCurrentPickupIsWeapon )
		pFnCurrentPickupIsWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.CurrentPickupIsWeapon" );

	AKFPickupFactory_execCurrentPickupIsWeapon_Parms CurrentPickupIsWeapon_Parms;

	this->ProcessEvent ( pFnCurrentPickupIsWeapon, &CurrentPickupIsWeapon_Parms, NULL );
};

// Function KFGame.KFPickupFactory.DelayRespawn
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::DelayRespawn ( )
{
	static UFunction* pFnDelayRespawn = NULL;

	if ( ! pFnDelayRespawn )
		pFnDelayRespawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.DelayRespawn" );

	AKFPickupFactory_execDelayRespawn_Parms DelayRespawn_Parms;

	this->ProcessEvent ( pFnDelayRespawn, &DelayRespawn_Parms, NULL );
};

// Function KFGame.KFPickupFactory.StartSleeping
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::StartSleeping ( )
{
	static UFunction* pFnStartSleeping = NULL;

	if ( ! pFnStartSleeping )
		pFnStartSleeping = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.StartSleeping" );

	AKFPickupFactory_execStartSleeping_Parms StartSleeping_Parms;

	this->ProcessEvent ( pFnStartSleeping, &StartSleeping_Parms, NULL );
};

// Function KFGame.KFPickupFactory.GetRespawnTime
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::GetRespawnTime ( )
{
	static UFunction* pFnGetRespawnTime = NULL;

	if ( ! pFnGetRespawnTime )
		pFnGetRespawnTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.GetRespawnTime" );

	AKFPickupFactory_execGetRespawnTime_Parms GetRespawnTime_Parms;

	this->ProcessEvent ( pFnGetRespawnTime, &GetRespawnTime_Parms, NULL );
};

// Function KFGame.KFPickupFactory.SetRespawn
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::SetRespawn ( )
{
	static UFunction* pFnSetRespawn = NULL;

	if ( ! pFnSetRespawn )
		pFnSetRespawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.SetRespawn" );

	AKFPickupFactory_execSetRespawn_Parms SetRespawn_Parms;

	this->ProcessEvent ( pFnSetRespawn, &SetRespawn_Parms, NULL );
};

// Function KFGame.KFPickupFactory.OnToggle
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::OnToggle ( )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.OnToggle" );

	AKFPickupFactory_execOnToggle_Parms OnToggle_Parms;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function KFGame.KFPickupFactory.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPickupFactory::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.SetInitialState" );

	AKFPickupFactory_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function KFGame.KFPickupFactory.Reset
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory.Reset" );

	AKFPickupFactory_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.CurrentPickupIsArmor
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::CurrentPickupIsArmor ( )
{
	static UFunction* pFnCurrentPickupIsArmor = NULL;

	if ( ! pFnCurrentPickupIsArmor )
		pFnCurrentPickupIsArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.CurrentPickupIsArmor" );

	AKFPickupFactory_Item_execCurrentPickupIsArmor_Parms CurrentPickupIsArmor_Parms;

	this->ProcessEvent ( pFnCurrentPickupIsArmor, &CurrentPickupIsArmor_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.CurrentPickupIsWeapon
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::CurrentPickupIsWeapon ( )
{
	static UFunction* pFnCurrentPickupIsWeapon = NULL;

	if ( ! pFnCurrentPickupIsWeapon )
		pFnCurrentPickupIsWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.CurrentPickupIsWeapon" );

	AKFPickupFactory_Item_execCurrentPickupIsWeapon_Parms CurrentPickupIsWeapon_Parms;

	this->ProcessEvent ( pFnCurrentPickupIsWeapon, &CurrentPickupIsWeapon_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.ActivateNewPickup
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::ActivateNewPickup ( )
{
	static UFunction* pFnActivateNewPickup = NULL;

	if ( ! pFnActivateNewPickup )
		pFnActivateNewPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.ActivateNewPickup" );

	AKFPickupFactory_Item_execActivateNewPickup_Parms ActivateNewPickup_Parms;

	this->ProcessEvent ( pFnActivateNewPickup, &ActivateNewPickup_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.GiveWeapon
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::GiveWeapon ( )
{
	static UFunction* pFnGiveWeapon = NULL;

	if ( ! pFnGiveWeapon )
		pFnGiveWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.GiveWeapon" );

	AKFPickupFactory_Item_execGiveWeapon_Parms GiveWeapon_Parms;

	this->ProcessEvent ( pFnGiveWeapon, &GiveWeapon_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.GiveArmor
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::GiveArmor ( )
{
	static UFunction* pFnGiveArmor = NULL;

	if ( ! pFnGiveArmor )
		pFnGiveArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.GiveArmor" );

	AKFPickupFactory_Item_execGiveArmor_Parms GiveArmor_Parms;

	this->ProcessEvent ( pFnGiveArmor, &GiveArmor_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.GiveTo
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::GiveTo ( )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.GiveTo" );

	AKFPickupFactory_Item_execGiveTo_Parms GiveTo_Parms;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.FinalizePickupMesh
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPickupFactory_Item::eventFinalizePickupMesh ( )
{
	static UFunction* pFnFinalizePickupMesh = NULL;

	if ( ! pFnFinalizePickupMesh )
		pFnFinalizePickupMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.FinalizePickupMesh" );

	AKFPickupFactory_Item_eventFinalizePickupMesh_Parms FinalizePickupMesh_Parms;

	this->ProcessEvent ( pFnFinalizePickupMesh, &FinalizePickupMesh_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.SetPickupMesh
// [0x00020102] 
// Parameters infos:

void AKFPickupFactory_Item::SetPickupMesh ( )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.SetPickupMesh" );

	AKFPickupFactory_Item_execSetPickupMesh_Parms SetPickupMesh_Parms;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.GetPickupMesh
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPickupFactory_Item::GetPickupMesh ( )
{
	static UFunction* pFnGetPickupMesh = NULL;

	if ( ! pFnGetPickupMesh )
		pFnGetPickupMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.GetPickupMesh" );

	AKFPickupFactory_Item_execGetPickupMesh_Parms GetPickupMesh_Parms;

	pFnGetPickupMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPickupMesh, &GetPickupMesh_Parms, NULL );

	pFnGetPickupMesh->FunctionFlags |= 0x400;
};

// Function KFGame.KFPickupFactory_Item.ChooseWeaponPickup
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::ChooseWeaponPickup ( )
{
	static UFunction* pFnChooseWeaponPickup = NULL;

	if ( ! pFnChooseWeaponPickup )
		pFnChooseWeaponPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.ChooseWeaponPickup" );

	AKFPickupFactory_Item_execChooseWeaponPickup_Parms ChooseWeaponPickup_Parms;

	this->ProcessEvent ( pFnChooseWeaponPickup, &ChooseWeaponPickup_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.SetRespawn
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::SetRespawn ( )
{
	static UFunction* pFnSetRespawn = NULL;

	if ( ! pFnSetRespawn )
		pFnSetRespawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.SetRespawn" );

	AKFPickupFactory_Item_execSetRespawn_Parms SetRespawn_Parms;

	this->ProcessEvent ( pFnSetRespawn, &SetRespawn_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.Reset
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Item::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.Reset" );

	AKFPickupFactory_Item_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPickupFactory_Item::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.SetInitialState" );

	AKFPickupFactory_Item_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.InitializePickup
// [0x00020102] 
// Parameters infos:

void AKFPickupFactory_Item::InitializePickup ( )
{
	static UFunction* pFnInitializePickup = NULL;

	if ( ! pFnInitializePickup )
		pFnInitializePickup = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.InitializePickup" );

	AKFPickupFactory_Item_execInitializePickup_Parms InitializePickup_Parms;

	this->ProcessEvent ( pFnInitializePickup, &InitializePickup_Parms, NULL );
};

// Function KFGame.KFPickupFactory_Item.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPickupFactory_Item::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPickupFactory_Item.ReplicatedEvent" );

	AKFPickupFactory_Item_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFProfileSettings.ExpandExtraFromProfileSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFProfileSettings::ExpandExtraFromProfileSettings ( )
{
	static UFunction* pFnExpandExtraFromProfileSettings = NULL;

	if ( ! pFnExpandExtraFromProfileSettings )
		pFnExpandExtraFromProfileSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.ExpandExtraFromProfileSettings" );

	UKFProfileSettings_execExpandExtraFromProfileSettings_Parms ExpandExtraFromProfileSettings_Parms;

	pFnExpandExtraFromProfileSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnExpandExtraFromProfileSettings, &ExpandExtraFromProfileSettings_Parms, NULL );

	pFnExpandExtraFromProfileSettings->FunctionFlags |= 0x400;
};

// Function KFGame.KFProfileSettings.FlattenExtraToProfileSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFProfileSettings::FlattenExtraToProfileSettings ( )
{
	static UFunction* pFnFlattenExtraToProfileSettings = NULL;

	if ( ! pFnFlattenExtraToProfileSettings )
		pFnFlattenExtraToProfileSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.FlattenExtraToProfileSettings" );

	UKFProfileSettings_execFlattenExtraToProfileSettings_Parms FlattenExtraToProfileSettings_Parms;

	pFnFlattenExtraToProfileSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlattenExtraToProfileSettings, &FlattenExtraToProfileSettings_Parms, NULL );

	pFnFlattenExtraToProfileSettings->FunctionFlags |= 0x400;
};

// Function KFGame.KFProfileSettings.SetToDefaults
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UKFProfileSettings::eventSetToDefaults ( )
{
	static UFunction* pFnSetToDefaults = NULL;

	if ( ! pFnSetToDefaults )
		pFnSetToDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.SetToDefaults" );

	UKFProfileSettings_eventSetToDefaults_Parms SetToDefaults_Parms;

	pFnSetToDefaults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetToDefaults, &SetToDefaults_Parms, NULL );

	pFnSetToDefaults->FunctionFlags |= 0x400;
};

// Function KFGame.KFProfileSettings.PushProfileSettingsToClasses
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFProfileSettings::PushProfileSettingsToClasses ( )
{
	static UFunction* pFnPushProfileSettingsToClasses = NULL;

	if ( ! pFnPushProfileSettingsToClasses )
		pFnPushProfileSettingsToClasses = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.PushProfileSettingsToClasses" );

	UKFProfileSettings_execPushProfileSettingsToClasses_Parms PushProfileSettingsToClasses_Parms;

	pFnPushProfileSettingsToClasses->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushProfileSettingsToClasses, &PushProfileSettingsToClasses_Parms, NULL );

	pFnPushProfileSettingsToClasses->FunctionFlags |= 0x400;
};

// Function KFGame.KFProfileSettings.SetCharacterGear
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFProfileSettings::SetCharacterGear ( )
{
	static UFunction* pFnSetCharacterGear = NULL;

	if ( ! pFnSetCharacterGear )
		pFnSetCharacterGear = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.SetCharacterGear" );

	UKFProfileSettings_execSetCharacterGear_Parms SetCharacterGear_Parms;

	pFnSetCharacterGear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCharacterGear, &SetCharacterGear_Parms, NULL );

	pFnSetCharacterGear->FunctionFlags |= 0x400;
};

// Function KFGame.KFProfileSettings.GetDefaultFloat
// [0x00020002] 
// Parameters infos:

void UKFProfileSettings::GetDefaultFloat ( )
{
	static UFunction* pFnGetDefaultFloat = NULL;

	if ( ! pFnGetDefaultFloat )
		pFnGetDefaultFloat = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.GetDefaultFloat" );

	UKFProfileSettings_execGetDefaultFloat_Parms GetDefaultFloat_Parms;

	this->ProcessEvent ( pFnGetDefaultFloat, &GetDefaultFloat_Parms, NULL );
};

// Function KFGame.KFProfileSettings.GetDefaultBool
// [0x00020002] 
// Parameters infos:

void UKFProfileSettings::GetDefaultBool ( )
{
	static UFunction* pFnGetDefaultBool = NULL;

	if ( ! pFnGetDefaultBool )
		pFnGetDefaultBool = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.GetDefaultBool" );

	UKFProfileSettings_execGetDefaultBool_Parms GetDefaultBool_Parms;

	this->ProcessEvent ( pFnGetDefaultBool, &GetDefaultBool_Parms, NULL );
};

// Function KFGame.KFProfileSettings.GetDefaultInt
// [0x00020002] 
// Parameters infos:

void UKFProfileSettings::GetDefaultInt ( )
{
	static UFunction* pFnGetDefaultInt = NULL;

	if ( ! pFnGetDefaultInt )
		pFnGetDefaultInt = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.GetDefaultInt" );

	UKFProfileSettings_execGetDefaultInt_Parms GetDefaultInt_Parms;

	this->ProcessEvent ( pFnGetDefaultInt, &GetDefaultInt_Parms, NULL );
};

// Function KFGame.KFProfileSettings.GetProfileString
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFProfileSettings::eventGetProfileString ( )
{
	static UFunction* pFnGetProfileString = NULL;

	if ( ! pFnGetProfileString )
		pFnGetProfileString = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.GetProfileString" );

	UKFProfileSettings_eventGetProfileString_Parms GetProfileString_Parms;

	this->ProcessEvent ( pFnGetProfileString, &GetProfileString_Parms, NULL );
};

// Function KFGame.KFProfileSettings.GetProfileFloat
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFProfileSettings::eventGetProfileFloat ( )
{
	static UFunction* pFnGetProfileFloat = NULL;

	if ( ! pFnGetProfileFloat )
		pFnGetProfileFloat = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.GetProfileFloat" );

	UKFProfileSettings_eventGetProfileFloat_Parms GetProfileFloat_Parms;

	this->ProcessEvent ( pFnGetProfileFloat, &GetProfileFloat_Parms, NULL );
};

// Function KFGame.KFProfileSettings.GetProfileBool
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFProfileSettings::eventGetProfileBool ( )
{
	static UFunction* pFnGetProfileBool = NULL;

	if ( ! pFnGetProfileBool )
		pFnGetProfileBool = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.GetProfileBool" );

	UKFProfileSettings_eventGetProfileBool_Parms GetProfileBool_Parms;

	this->ProcessEvent ( pFnGetProfileBool, &GetProfileBool_Parms, NULL );
};

// Function KFGame.KFProfileSettings.GetProfileInt
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFProfileSettings::eventGetProfileInt ( )
{
	static UFunction* pFnGetProfileInt = NULL;

	if ( ! pFnGetProfileInt )
		pFnGetProfileInt = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.GetProfileInt" );

	UKFProfileSettings_eventGetProfileInt_Parms GetProfileInt_Parms;

	this->ProcessEvent ( pFnGetProfileInt, &GetProfileInt_Parms, NULL );
};

// Function KFGame.KFProfileSettings.SetProfileSettingValueFloat
// [0x00020002] 
// Parameters infos:

void UKFProfileSettings::SetProfileSettingValueFloat ( )
{
	static UFunction* pFnSetProfileSettingValueFloat = NULL;

	if ( ! pFnSetProfileSettingValueFloat )
		pFnSetProfileSettingValueFloat = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.SetProfileSettingValueFloat" );

	UKFProfileSettings_execSetProfileSettingValueFloat_Parms SetProfileSettingValueFloat_Parms;

	this->ProcessEvent ( pFnSetProfileSettingValueFloat, &SetProfileSettingValueFloat_Parms, NULL );
};

// Function KFGame.KFProfileSettings.SetProfileSettingValueBool
// [0x00020002] 
// Parameters infos:

void UKFProfileSettings::SetProfileSettingValueBool ( )
{
	static UFunction* pFnSetProfileSettingValueBool = NULL;

	if ( ! pFnSetProfileSettingValueBool )
		pFnSetProfileSettingValueBool = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.SetProfileSettingValueBool" );

	UKFProfileSettings_execSetProfileSettingValueBool_Parms SetProfileSettingValueBool_Parms;

	this->ProcessEvent ( pFnSetProfileSettingValueBool, &SetProfileSettingValueBool_Parms, NULL );
};

// Function KFGame.KFProfileSettings.SetProfileSettingValueInt
// [0x00020002] 
// Parameters infos:

void UKFProfileSettings::SetProfileSettingValueInt ( )
{
	static UFunction* pFnSetProfileSettingValueInt = NULL;

	if ( ! pFnSetProfileSettingValueInt )
		pFnSetProfileSettingValueInt = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.SetProfileSettingValueInt" );

	UKFProfileSettings_execSetProfileSettingValueInt_Parms SetProfileSettingValueInt_Parms;

	this->ProcessEvent ( pFnSetProfileSettingValueInt, &SetProfileSettingValueInt_Parms, NULL );
};

// Function KFGame.KFProfileSettings.HasSafeFrameSet
// [0x00020002] 
// Parameters infos:

void UKFProfileSettings::HasSafeFrameSet ( )
{
	static UFunction* pFnHasSafeFrameSet = NULL;

	if ( ! pFnHasSafeFrameSet )
		pFnHasSafeFrameSet = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.HasSafeFrameSet" );

	UKFProfileSettings_execHasSafeFrameSet_Parms HasSafeFrameSet_Parms;

	this->ProcessEvent ( pFnHasSafeFrameSet, &HasSafeFrameSet_Parms, NULL );
};

// Function KFGame.KFProfileSettings.ApplyWeaponSkin
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFProfileSettings::eventApplyWeaponSkin ( )
{
	static UFunction* pFnApplyWeaponSkin = NULL;

	if ( ! pFnApplyWeaponSkin )
		pFnApplyWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.ApplyWeaponSkin" );

	UKFProfileSettings_eventApplyWeaponSkin_Parms ApplyWeaponSkin_Parms;

	this->ProcessEvent ( pFnApplyWeaponSkin, &ApplyWeaponSkin_Parms, NULL );
};

// Function KFGame.KFProfileSettings.ClearWeaponSkin
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFProfileSettings::ClearWeaponSkin ( )
{
	static UFunction* pFnClearWeaponSkin = NULL;

	if ( ! pFnClearWeaponSkin )
		pFnClearWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.ClearWeaponSkin" );

	UKFProfileSettings_execClearWeaponSkin_Parms ClearWeaponSkin_Parms;

	pFnClearWeaponSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearWeaponSkin, &ClearWeaponSkin_Parms, NULL );

	pFnClearWeaponSkin->FunctionFlags |= 0x400;
};

// Function KFGame.KFProfileSettings.SaveWeaponSkin
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFProfileSettings::SaveWeaponSkin ( )
{
	static UFunction* pFnSaveWeaponSkin = NULL;

	if ( ! pFnSaveWeaponSkin )
		pFnSaveWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.SaveWeaponSkin" );

	UKFProfileSettings_execSaveWeaponSkin_Parms SaveWeaponSkin_Parms;

	pFnSaveWeaponSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveWeaponSkin, &SaveWeaponSkin_Parms, NULL );

	pFnSaveWeaponSkin->FunctionFlags |= 0x400;
};

// Function KFGame.KFProfileSettings.Save
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFProfileSettings::eventSave ( )
{
	static UFunction* pFnSave = NULL;

	if ( ! pFnSave )
		pFnSave = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.Save" );

	UKFProfileSettings_eventSave_Parms Save_Parms;

	this->ProcessEvent ( pFnSave, &Save_Parms, NULL );
};

// Function KFGame.KFProfileSettings.UnFavoriteWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFProfileSettings::eventUnFavoriteWeapon ( )
{
	static UFunction* pFnUnFavoriteWeapon = NULL;

	if ( ! pFnUnFavoriteWeapon )
		pFnUnFavoriteWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.UnFavoriteWeapon" );

	UKFProfileSettings_eventUnFavoriteWeapon_Parms UnFavoriteWeapon_Parms;

	this->ProcessEvent ( pFnUnFavoriteWeapon, &UnFavoriteWeapon_Parms, NULL );
};

// Function KFGame.KFProfileSettings.FavoriteWeapon
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFProfileSettings::eventFavoriteWeapon ( )
{
	static UFunction* pFnFavoriteWeapon = NULL;

	if ( ! pFnFavoriteWeapon )
		pFnFavoriteWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFProfileSettings.FavoriteWeapon" );

	UKFProfileSettings_eventFavoriteWeapon_Parms FavoriteWeapon_Parms;

	this->ProcessEvent ( pFnFavoriteWeapon, &FavoriteWeapon_Parms, NULL );
};

// Function KFGame.KFProjectile.SpawnResidualFlame
// [0x00020002] 
// Parameters infos:

void AKFProjectile::SpawnResidualFlame ( )
{
	static UFunction* pFnSpawnResidualFlame = NULL;

	if ( ! pFnSpawnResidualFlame )
		pFnSpawnResidualFlame = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.SpawnResidualFlame" );

	AKFProjectile_execSpawnResidualFlame_Parms SpawnResidualFlame_Parms;

	this->ProcessEvent ( pFnSpawnResidualFlame, &SpawnResidualFlame_Parms, NULL );
};

// Function KFGame.KFProjectile.CalculateResidualFlameVelocity
// [0x00820002] 
// Parameters infos:

void AKFProjectile::CalculateResidualFlameVelocity ( )
{
	static UFunction* pFnCalculateResidualFlameVelocity = NULL;

	if ( ! pFnCalculateResidualFlameVelocity )
		pFnCalculateResidualFlameVelocity = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.CalculateResidualFlameVelocity" );

	AKFProjectile_execCalculateResidualFlameVelocity_Parms CalculateResidualFlameVelocity_Parms;

	this->ProcessEvent ( pFnCalculateResidualFlameVelocity, &CalculateResidualFlameVelocity_Parms, NULL );
};

// Function KFGame.KFProjectile.OnInstigatorControllerLeft
// [0x00020100] 
// Parameters infos:

void AKFProjectile::OnInstigatorControllerLeft ( )
{
	static UFunction* pFnOnInstigatorControllerLeft = NULL;

	if ( ! pFnOnInstigatorControllerLeft )
		pFnOnInstigatorControllerLeft = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.OnInstigatorControllerLeft" );

	AKFProjectile_execOnInstigatorControllerLeft_Parms OnInstigatorControllerLeft_Parms;

	this->ProcessEvent ( pFnOnInstigatorControllerLeft, &OnInstigatorControllerLeft_Parms, NULL );
};

// Function KFGame.KFProjectile.Timer_Explode
// [0x00020000] 
// Parameters infos:

void AKFProjectile::Timer_Explode ( )
{
	static UFunction* pFnTimer_Explode = NULL;

	if ( ! pFnTimer_Explode )
		pFnTimer_Explode = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Timer_Explode" );

	AKFProjectile_execTimer_Explode_Parms Timer_Explode_Parms;

	this->ProcessEvent ( pFnTimer_Explode, &Timer_Explode_Parms, NULL );
};

// Function KFGame.KFProjectile.Detonate
// [0x00020000] 
// Parameters infos:

void AKFProjectile::Detonate ( )
{
	static UFunction* pFnDetonate = NULL;

	if ( ! pFnDetonate )
		pFnDetonate = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Detonate" );

	AKFProjectile_execDetonate_Parms Detonate_Parms;

	this->ProcessEvent ( pFnDetonate, &Detonate_Parms, NULL );
};

// Function KFGame.KFProjectile.StopFlightEffects
// [0x00080102] 
// Parameters infos:

void AKFProjectile::StopFlightEffects ( )
{
	static UFunction* pFnStopFlightEffects = NULL;

	if ( ! pFnStopFlightEffects )
		pFnStopFlightEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.StopFlightEffects" );

	AKFProjectile_execStopFlightEffects_Parms StopFlightEffects_Parms;

	this->ProcessEvent ( pFnStopFlightEffects, &StopFlightEffects_Parms, NULL );
};

// Function KFGame.KFProjectile.SpawnFlightEffects
// [0x00020102] 
// Parameters infos:

void AKFProjectile::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.SpawnFlightEffects" );

	AKFProjectile_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function KFGame.KFProjectile.GetGravityZ
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFProjectile::GetGravityZ ( )
{
	static UFunction* pFnGetGravityZ = NULL;

	if ( ! pFnGetGravityZ )
		pFnGetGravityZ = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.GetGravityZ" );

	AKFProjectile_execGetGravityZ_Parms GetGravityZ_Parms;

	pFnGetGravityZ->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGravityZ, &GetGravityZ_Parms, NULL );

	pFnGetGravityZ->FunctionFlags |= 0x400;
};

// Function KFGame.KFProjectile.Destroyed
// [0x00020102] 
// Parameters infos:

void AKFProjectile::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Destroyed" );

	AKFProjectile_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFProjectile.DeferredDestroy
// [0x00080102] 
// Parameters infos:

void AKFProjectile::DeferredDestroy ( )
{
	static UFunction* pFnDeferredDestroy = NULL;

	if ( ! pFnDeferredDestroy )
		pFnDeferredDestroy = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.DeferredDestroy" );

	AKFProjectile_execDeferredDestroy_Parms DeferredDestroy_Parms;

	this->ProcessEvent ( pFnDeferredDestroy, &DeferredDestroy_Parms, NULL );
};

// Function KFGame.KFProjectile.StopSimulating
// [0x00080102] 
// Parameters infos:

void AKFProjectile::StopSimulating ( )
{
	static UFunction* pFnStopSimulating = NULL;

	if ( ! pFnStopSimulating )
		pFnStopSimulating = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.StopSimulating" );

	AKFProjectile_execStopSimulating_Parms StopSimulating_Parms;

	this->ProcessEvent ( pFnStopSimulating, &StopSimulating_Parms, NULL );
};

// Function KFGame.KFProjectile.ShutDown
// [0x00020102] 
// Parameters infos:

void AKFProjectile::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.ShutDown" );

	AKFProjectile_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function KFGame.KFProjectile.SetExplosionActorClass
// [0x00080100] 
// Parameters infos:

void AKFProjectile::SetExplosionActorClass ( )
{
	static UFunction* pFnSetExplosionActorClass = NULL;

	if ( ! pFnSetExplosionActorClass )
		pFnSetExplosionActorClass = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.SetExplosionActorClass" );

	AKFProjectile_execSetExplosionActorClass_Parms SetExplosionActorClass_Parms;

	this->ProcessEvent ( pFnSetExplosionActorClass, &SetExplosionActorClass_Parms, NULL );
};

// Function KFGame.KFProjectile.PrepareExplosionActor
// [0x00080100] 
// Parameters infos:

void AKFProjectile::PrepareExplosionActor ( )
{
	static UFunction* pFnPrepareExplosionActor = NULL;

	if ( ! pFnPrepareExplosionActor )
		pFnPrepareExplosionActor = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.PrepareExplosionActor" );

	AKFProjectile_execPrepareExplosionActor_Parms PrepareExplosionActor_Parms;

	this->ProcessEvent ( pFnPrepareExplosionActor, &PrepareExplosionActor_Parms, NULL );
};

// Function KFGame.KFProjectile.GetExplosionDirection
// [0x00020100] 
// Parameters infos:

void AKFProjectile::GetExplosionDirection ( )
{
	static UFunction* pFnGetExplosionDirection = NULL;

	if ( ! pFnGetExplosionDirection )
		pFnGetExplosionDirection = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.GetExplosionDirection" );

	AKFProjectile_execGetExplosionDirection_Parms GetExplosionDirection_Parms;

	this->ProcessEvent ( pFnGetExplosionDirection, &GetExplosionDirection_Parms, NULL );
};

// Function KFGame.KFProjectile.GetRadialDamageValues
// [0x00480100] 
// Parameters infos:

void AKFProjectile::GetRadialDamageValues ( )
{
	static UFunction* pFnGetRadialDamageValues = NULL;

	if ( ! pFnGetRadialDamageValues )
		pFnGetRadialDamageValues = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.GetRadialDamageValues" );

	AKFProjectile_execGetRadialDamageValues_Parms GetRadialDamageValues_Parms;

	this->ProcessEvent ( pFnGetRadialDamageValues, &GetRadialDamageValues_Parms, NULL );
};

// Function KFGame.KFProjectile.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProjectile::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.PrepareExplosionTemplate" );

	AKFProjectile_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFProjectile.AllowNuke
// [0x00020102] 
// Parameters infos:

void AKFProjectile::AllowNuke ( )
{
	static UFunction* pFnAllowNuke = NULL;

	if ( ! pFnAllowNuke )
		pFnAllowNuke = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.AllowNuke" );

	AKFProjectile_execAllowNuke_Parms AllowNuke_Parms;

	this->ProcessEvent ( pFnAllowNuke, &AllowNuke_Parms, NULL );
};

// Function KFGame.KFProjectile.TriggerExplosion
// [0x00820102] 
// Parameters infos:

void AKFProjectile::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.TriggerExplosion" );

	AKFProjectile_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function KFGame.KFProjectile.Disintegrate
// [0x00020102] 
// Parameters infos:

void AKFProjectile::Disintegrate ( )
{
	static UFunction* pFnDisintegrate = NULL;

	if ( ! pFnDisintegrate )
		pFnDisintegrate = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Disintegrate" );

	AKFProjectile_execDisintegrate_Parms Disintegrate_Parms;

	this->ProcessEvent ( pFnDisintegrate, &Disintegrate_Parms, NULL );
};

// Function KFGame.KFProjectile.AdjustCanDisintigrate
// [0x00020102] 
// Parameters infos:

void AKFProjectile::AdjustCanDisintigrate ( )
{
	static UFunction* pFnAdjustCanDisintigrate = NULL;

	if ( ! pFnAdjustCanDisintigrate )
		pFnAdjustCanDisintigrate = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.AdjustCanDisintigrate" );

	AKFProjectile_execAdjustCanDisintigrate_Parms AdjustCanDisintigrate_Parms;

	this->ProcessEvent ( pFnAdjustCanDisintigrate, &AdjustCanDisintigrate_Parms, NULL );
};

// Function KFGame.KFProjectile.Explode
// [0x00020102] 
// Parameters infos:

void AKFProjectile::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Explode" );

	AKFProjectile_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function KFGame.KFProjectile.Landed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProjectile::eventLanded ( )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Landed" );

	AKFProjectile_eventLanded_Parms Landed_Parms;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function KFGame.KFProjectile.TraceProjHitZones
// [0x00C20102] 
// Parameters infos:

void AKFProjectile::TraceProjHitZones ( )
{
	static UFunction* pFnTraceProjHitZones = NULL;

	if ( ! pFnTraceProjHitZones )
		pFnTraceProjHitZones = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.TraceProjHitZones" );

	AKFProjectile_execTraceProjHitZones_Parms TraceProjHitZones_Parms;

	this->ProcessEvent ( pFnTraceProjHitZones, &TraceProjHitZones_Parms, NULL );
};

// Function KFGame.KFProjectile.CallExplode
// [0x00020102] 
// Parameters infos:

void AKFProjectile::CallExplode ( )
{
	static UFunction* pFnCallExplode = NULL;

	if ( ! pFnCallExplode )
		pFnCallExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.CallExplode" );

	AKFProjectile_execCallExplode_Parms CallExplode_Parms;

	this->ProcessEvent ( pFnCallExplode, &CallExplode_Parms, NULL );
};

// Function KFGame.KFProjectile.ProcessBulletTouch
// [0x00820102] 
// Parameters infos:

void AKFProjectile::ProcessBulletTouch ( )
{
	static UFunction* pFnProcessBulletTouch = NULL;

	if ( ! pFnProcessBulletTouch )
		pFnProcessBulletTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.ProcessBulletTouch" );

	AKFProjectile_execProcessBulletTouch_Parms ProcessBulletTouch_Parms;

	this->ProcessEvent ( pFnProcessBulletTouch, &ProcessBulletTouch_Parms, NULL );
};

// Function KFGame.KFProjectile.ProcessDestructibleTouchOnBounce
// [0x00820102] 
// Parameters infos:

void AKFProjectile::ProcessDestructibleTouchOnBounce ( )
{
	static UFunction* pFnProcessDestructibleTouchOnBounce = NULL;

	if ( ! pFnProcessDestructibleTouchOnBounce )
		pFnProcessDestructibleTouchOnBounce = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.ProcessDestructibleTouchOnBounce" );

	AKFProjectile_execProcessDestructibleTouchOnBounce_Parms ProcessDestructibleTouchOnBounce_Parms;

	this->ProcessEvent ( pFnProcessDestructibleTouchOnBounce, &ProcessDestructibleTouchOnBounce_Parms, NULL );
};

// Function KFGame.KFProjectile.Bounce
// [0x00020100] 
// Parameters infos:

void AKFProjectile::Bounce ( )
{
	static UFunction* pFnBounce = NULL;

	if ( ! pFnBounce )
		pFnBounce = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Bounce" );

	AKFProjectile_execBounce_Parms Bounce_Parms;

	this->ProcessEvent ( pFnBounce, &Bounce_Parms, NULL );
};

// Function KFGame.KFProjectile.CheckRepeatingTouch
// [0x00020102] 
// Parameters infos:

void AKFProjectile::CheckRepeatingTouch ( )
{
	static UFunction* pFnCheckRepeatingTouch = NULL;

	if ( ! pFnCheckRepeatingTouch )
		pFnCheckRepeatingTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.CheckRepeatingTouch" );

	AKFProjectile_execCheckRepeatingTouch_Parms CheckRepeatingTouch_Parms;

	this->ProcessEvent ( pFnCheckRepeatingTouch, &CheckRepeatingTouch_Parms, NULL );
};

// Function KFGame.KFProjectile.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProjectile::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.ProcessTouch" );

	AKFProjectile_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function KFGame.KFProjectile.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProjectile::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Touch" );

	AKFProjectile_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFProjectile.NotifyHitDestructible
// [0x00020100] 
// Parameters infos:

void AKFProjectile::NotifyHitDestructible ( )
{
	static UFunction* pFnNotifyHitDestructible = NULL;

	if ( ! pFnNotifyHitDestructible )
		pFnNotifyHitDestructible = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.NotifyHitDestructible" );

	AKFProjectile_execNotifyHitDestructible_Parms NotifyHitDestructible_Parms;

	this->ProcessEvent ( pFnNotifyHitDestructible, &NotifyHitDestructible_Parms, NULL );
};

// Function KFGame.KFProjectile.HitWall
// [0x00820922] ( FUNC_Event )
// Parameters infos:

void AKFProjectile::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.HitWall" );

	AKFProjectile_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function KFGame.KFProjectile.CalculateStickOrientation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFProjectile::CalculateStickOrientation ( )
{
	static UFunction* pFnCalculateStickOrientation = NULL;

	if ( ! pFnCalculateStickOrientation )
		pFnCalculateStickOrientation = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.CalculateStickOrientation" );

	AKFProjectile_execCalculateStickOrientation_Parms CalculateStickOrientation_Parms;

	pFnCalculateStickOrientation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateStickOrientation, &CalculateStickOrientation_Parms, NULL );

	pFnCalculateStickOrientation->FunctionFlags |= 0x400;
};

// Function KFGame.KFProjectile.GetPredictedHitLocation
// [0x00820102] 
// Parameters infos:

void AKFProjectile::GetPredictedHitLocation ( )
{
	static UFunction* pFnGetPredictedHitLocation = NULL;

	if ( ! pFnGetPredictedHitLocation )
		pFnGetPredictedHitLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.GetPredictedHitLocation" );

	AKFProjectile_execGetPredictedHitLocation_Parms GetPredictedHitLocation_Parms;

	this->ProcessEvent ( pFnGetPredictedHitLocation, &GetPredictedHitLocation_Parms, NULL );
};

// Function KFGame.KFProjectile.SyncOriginalLocation
// [0x00820102] 
// Parameters infos:

void AKFProjectile::SyncOriginalLocation ( )
{
	static UFunction* pFnSyncOriginalLocation = NULL;

	if ( ! pFnSyncOriginalLocation )
		pFnSyncOriginalLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.SyncOriginalLocation" );

	AKFProjectile_execSyncOriginalLocation_Parms SyncOriginalLocation_Parms;

	this->ProcessEvent ( pFnSyncOriginalLocation, &SyncOriginalLocation_Parms, NULL );
};

// Function KFGame.KFProjectile.ValidateExplosionNormal
// [0x00820102] 
// Parameters infos:

void AKFProjectile::ValidateExplosionNormal ( )
{
	static UFunction* pFnValidateExplosionNormal = NULL;

	if ( ! pFnValidateExplosionNormal )
		pFnValidateExplosionNormal = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.ValidateExplosionNormal" );

	AKFProjectile_execValidateExplosionNormal_Parms ValidateExplosionNormal_Parms;

	this->ProcessEvent ( pFnValidateExplosionNormal, &ValidateExplosionNormal_Parms, NULL );
};

// Function KFGame.KFProjectile.ReplicatedEvent
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProjectile::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.ReplicatedEvent" );

	AKFProjectile_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFProjectile.IsAIProjectile
// [0x00020002] 
// Parameters infos:

void AKFProjectile::IsAIProjectile ( )
{
	static UFunction* pFnIsAIProjectile = NULL;

	if ( ! pFnIsAIProjectile )
		pFnIsAIProjectile = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.IsAIProjectile" );

	AKFProjectile_execIsAIProjectile_Parms IsAIProjectile_Parms;

	this->ProcessEvent ( pFnIsAIProjectile, &IsAIProjectile_Parms, NULL );
};

// Function KFGame.KFProjectile.ShouldWarnAIWhenFired
// [0x00020002] 
// Parameters infos:

void AKFProjectile::ShouldWarnAIWhenFired ( )
{
	static UFunction* pFnShouldWarnAIWhenFired = NULL;

	if ( ! pFnShouldWarnAIWhenFired )
		pFnShouldWarnAIWhenFired = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.ShouldWarnAIWhenFired" );

	AKFProjectile_execShouldWarnAIWhenFired_Parms ShouldWarnAIWhenFired_Parms;

	this->ProcessEvent ( pFnShouldWarnAIWhenFired, &ShouldWarnAIWhenFired_Parms, NULL );
};

// Function KFGame.KFProjectile.WarnAI
// [0x00820002] 
// Parameters infos:

void AKFProjectile::WarnAI ( )
{
	static UFunction* pFnWarnAI = NULL;

	if ( ! pFnWarnAI )
		pFnWarnAI = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.WarnAI" );

	AKFProjectile_execWarnAI_Parms WarnAI_Parms;

	this->ProcessEvent ( pFnWarnAI, &WarnAI_Parms, NULL );
};

// Function KFGame.KFProjectile.Init
// [0x00020002] 
// Parameters infos:

void AKFProjectile::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.Init" );

	AKFProjectile_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFProjectile.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProjectile::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.PostBeginPlay" );

	AKFProjectile_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFProjectile.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFProjectile::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.PreBeginPlay" );

	AKFProjectile_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFProjectile.StopAmbientSound
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFProjectile::StopAmbientSound ( )
{
	static UFunction* pFnStopAmbientSound = NULL;

	if ( ! pFnStopAmbientSound )
		pFnStopAmbientSound = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.StopAmbientSound" );

	AKFProjectile_execStopAmbientSound_Parms StopAmbientSound_Parms;

	pFnStopAmbientSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAmbientSound, &StopAmbientSound_Parms, NULL );

	pFnStopAmbientSound->FunctionFlags |= 0x400;
};

// Function KFGame.KFProjectile.GetTerminalVelocity
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFProjectile::GetTerminalVelocity ( )
{
	static UFunction* pFnGetTerminalVelocity = NULL;

	if ( ! pFnGetTerminalVelocity )
		pFnGetTerminalVelocity = UObject::FindObject< UFunction > ( "Function KFGame.KFProjectile.GetTerminalVelocity" );

	AKFProjectile_execGetTerminalVelocity_Parms GetTerminalVelocity_Parms;

	pFnGetTerminalVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTerminalVelocity, &GetTerminalVelocity_Parms, NULL );

	pFnGetTerminalVelocity->FunctionFlags |= 0x400;
};

// Function KFGame.KFProj_Bullet.TriggerExplosion
// [0x00020102] 
// Parameters infos:

void AKFProj_Bullet::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Bullet.TriggerExplosion" );

	AKFProj_Bullet_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function KFGame.KFProj_Bullet.PassThroughDamage
// [0x00020102] 
// Parameters infos:

void AKFProj_Bullet::PassThroughDamage ( )
{
	static UFunction* pFnPassThroughDamage = NULL;

	if ( ! pFnPassThroughDamage )
		pFnPassThroughDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Bullet.PassThroughDamage" );

	AKFProj_Bullet_execPassThroughDamage_Parms PassThroughDamage_Parms;

	this->ProcessEvent ( pFnPassThroughDamage, &PassThroughDamage_Parms, NULL );
};

// Function KFGame.KFProj_Bullet.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_Bullet::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Bullet.ProcessTouch" );

	AKFProj_Bullet_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function KFGame.KFProj_Bullet.Init
// [0x00020002] 
// Parameters infos:

void AKFProj_Bullet::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Bullet.Init" );

	AKFProj_Bullet_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_Grenade::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.ProcessTouch" );

	AKFProj_Grenade_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_Grenade::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.PrepareExplosionTemplate" );

	AKFProj_Grenade_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.GrenadeIsAtRest
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Grenade::eventGrenadeIsAtRest ( )
{
	static UFunction* pFnGrenadeIsAtRest = NULL;

	if ( ! pFnGrenadeIsAtRest )
		pFnGrenadeIsAtRest = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.GrenadeIsAtRest" );

	AKFProj_Grenade_eventGrenadeIsAtRest_Parms GrenadeIsAtRest_Parms;

	this->ProcessEvent ( pFnGrenadeIsAtRest, &GrenadeIsAtRest_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.Bounce
// [0x00820102] 
// Parameters infos:

void AKFProj_Grenade::Bounce ( )
{
	static UFunction* pFnBounce = NULL;

	if ( ! pFnBounce )
		pFnBounce = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.Bounce" );

	AKFProj_Grenade_execBounce_Parms Bounce_Parms;

	this->ProcessEvent ( pFnBounce, &Bounce_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Grenade::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.HitWall" );

	AKFProj_Grenade_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.GetExplodeEffectLocation
// [0x00C20102] 
// Parameters infos:

void AKFProj_Grenade::GetExplodeEffectLocation ( )
{
	static UFunction* pFnGetExplodeEffectLocation = NULL;

	if ( ! pFnGetExplodeEffectLocation )
		pFnGetExplodeEffectLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.GetExplodeEffectLocation" );

	AKFProj_Grenade_execGetExplodeEffectLocation_Parms GetExplodeEffectLocation_Parms;

	this->ProcessEvent ( pFnGetExplodeEffectLocation, &GetExplodeEffectLocation_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.Destroyed
// [0x00820102] 
// Parameters infos:

void AKFProj_Grenade::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.Destroyed" );

	AKFProj_Grenade_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.ExplodeTimer
// [0x00820002] 
// Parameters infos:

void AKFProj_Grenade::ExplodeTimer ( )
{
	static UFunction* pFnExplodeTimer = NULL;

	if ( ! pFnExplodeTimer )
		pFnExplodeTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.ExplodeTimer" );

	AKFProj_Grenade_execExplodeTimer_Parms ExplodeTimer_Parms;

	this->ProcessEvent ( pFnExplodeTimer, &ExplodeTimer_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.GetTeamNum
// [0x00020102] 
// Parameters infos:

void AKFProj_Grenade::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.GetTeamNum" );

	AKFProj_Grenade_execGetTeamNum_Parms GetTeamNum_Parms;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.EnableGrenadeWarning
// [0x00020102] 
// Parameters infos:

void AKFProj_Grenade::EnableGrenadeWarning ( )
{
	static UFunction* pFnEnableGrenadeWarning = NULL;

	if ( ! pFnEnableGrenadeWarning )
		pFnEnableGrenadeWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.EnableGrenadeWarning" );

	AKFProj_Grenade_execEnableGrenadeWarning_Parms EnableGrenadeWarning_Parms;

	this->ProcessEvent ( pFnEnableGrenadeWarning, &EnableGrenadeWarning_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.SpawnFlightEffects
// [0x00020102] 
// Parameters infos:

void AKFProj_Grenade::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.SpawnFlightEffects" );

	AKFProj_Grenade_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Grenade::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.PostBeginPlay" );

	AKFProj_Grenade_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFProj_Grenade::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.PreBeginPlay" );

	AKFProj_Grenade_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFProj_Grenade.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Grenade::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_Grenade.ReplicatedEvent" );

	AKFProj_Grenade_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFPruneSkeletalMeshCommandlet.Main
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void UKFPruneSkeletalMeshCommandlet::eventMain ( )
{
	static UFunction* pFnMain = NULL;

	if ( ! pFnMain )
		pFnMain = UObject::FindObject< UFunction > ( "Function KFGame.KFPruneSkeletalMeshCommandlet.Main" );

	UKFPruneSkeletalMeshCommandlet_eventMain_Parms Main_Parms;

	pFnMain->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMain, &Main_Parms, NULL );

	pFnMain->FunctionFlags |= 0x400;
};

// Function KFGame.KFRealtimeTimerHelper.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFRealtimeTimerHelper::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFRealtimeTimerHelper.Destroyed" );

	AKFRealtimeTimerHelper_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFRealtimeTimerHelper.ClientStopNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void AKFRealtimeTimerHelper::ClientStopNetworkedVoice ( )
{
	static UFunction* pFnClientStopNetworkedVoice = NULL;

	if ( ! pFnClientStopNetworkedVoice )
		pFnClientStopNetworkedVoice = UObject::FindObject< UFunction > ( "Function KFGame.KFRealtimeTimerHelper.ClientStopNetworkedVoice" );

	AKFRealtimeTimerHelper_execClientStopNetworkedVoice_Parms ClientStopNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStopNetworkedVoice, &ClientStopNetworkedVoice_Parms, NULL );
};

// Function KFGame.KFSkeletalMeshComponent.GetAnimNotifyTime
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFSkeletalMeshComponent::GetAnimNotifyTime ( )
{
	static UFunction* pFnGetAnimNotifyTime = NULL;

	if ( ! pFnGetAnimNotifyTime )
		pFnGetAnimNotifyTime = UObject::FindObject< UFunction > ( "Function KFGame.KFSkeletalMeshComponent.GetAnimNotifyTime" );

	UKFSkeletalMeshComponent_execGetAnimNotifyTime_Parms GetAnimNotifyTime_Parms;

	this->ProcessEvent ( pFnGetAnimNotifyTime, &GetAnimNotifyTime_Parms, NULL );
};

// Function KFGame.KFSkeletalMeshComponent.GetReloadAmmoTime
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFSkeletalMeshComponent::GetReloadAmmoTime ( )
{
	static UFunction* pFnGetReloadAmmoTime = NULL;

	if ( ! pFnGetReloadAmmoTime )
		pFnGetReloadAmmoTime = UObject::FindObject< UFunction > ( "Function KFGame.KFSkeletalMeshComponent.GetReloadAmmoTime" );

	UKFSkeletalMeshComponent_execGetReloadAmmoTime_Parms GetReloadAmmoTime_Parms;

	this->ProcessEvent ( pFnGetReloadAmmoTime, &GetReloadAmmoTime_Parms, NULL );
};

// Function KFGame.KFSkeletalMeshComponent.GetAnimInterruptTime
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFSkeletalMeshComponent::GetAnimInterruptTime ( )
{
	static UFunction* pFnGetAnimInterruptTime = NULL;

	if ( ! pFnGetAnimInterruptTime )
		pFnGetAnimInterruptTime = UObject::FindObject< UFunction > ( "Function KFGame.KFSkeletalMeshComponent.GetAnimInterruptTime" );

	UKFSkeletalMeshComponent_execGetAnimInterruptTime_Parms GetAnimInterruptTime_Parms;

	this->ProcessEvent ( pFnGetAnimInterruptTime, &GetAnimInterruptTime_Parms, NULL );
};

// Function KFGame.KFSkeletalMeshComponent.PlayParticleEffect
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSkeletalMeshComponent::eventPlayParticleEffect ( )
{
	static UFunction* pFnPlayParticleEffect = NULL;

	if ( ! pFnPlayParticleEffect )
		pFnPlayParticleEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSkeletalMeshComponent.PlayParticleEffect" );

	UKFSkeletalMeshComponent_eventPlayParticleEffect_Parms PlayParticleEffect_Parms;

	this->ProcessEvent ( pFnPlayParticleEffect, &PlayParticleEffect_Parms, NULL );
};

// Function KFGame.KFSkeletalMeshComponent.SetFOV
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFSkeletalMeshComponent::SetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFSkeletalMeshComponent.SetFOV" );

	UKFSkeletalMeshComponent_execSetFOV_Parms SetFOV_Parms;

	pFnSetFOV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );

	pFnSetFOV->FunctionFlags |= 0x400;
};

// Function KFGame.KFSkeletalMeshComponent.PreloadTextures
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UKFSkeletalMeshComponent::eventPreloadTextures ( )
{
	static UFunction* pFnPreloadTextures = NULL;

	if ( ! pFnPreloadTextures )
		pFnPreloadTextures = UObject::FindObject< UFunction > ( "Function KFGame.KFSkeletalMeshComponent.PreloadTextures" );

	UKFSkeletalMeshComponent_eventPreloadTextures_Parms PreloadTextures_Parms;

	this->ProcessEvent ( pFnPreloadTextures, &PreloadTextures_Parms, NULL );
};

// Function KFGame.KFSpawner.TestSpawn
// [0x00024002] 
// Parameters infos:

void AKFSpawner::TestSpawn ( )
{
	static UFunction* pFnTestSpawn = NULL;

	if ( ! pFnTestSpawn )
		pFnTestSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.TestSpawn" );

	AKFSpawner_execTestSpawn_Parms TestSpawn_Parms;

	this->ProcessEvent ( pFnTestSpawn, &TestSpawn_Parms, NULL );
};

// Function KFGame.KFSpawner.HandleFailedSpawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFSpawner::eventHandleFailedSpawn ( )
{
	static UFunction* pFnHandleFailedSpawn = NULL;

	if ( ! pFnHandleFailedSpawn )
		pFnHandleFailedSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.HandleFailedSpawn" );

	AKFSpawner_eventHandleFailedSpawn_Parms HandleFailedSpawn_Parms;

	this->ProcessEvent ( pFnHandleFailedSpawn, &HandleFailedSpawn_Parms, NULL );
};

// Function KFGame.KFSpawner.HandleSpawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFSpawner::eventHandleSpawn ( )
{
	static UFunction* pFnHandleSpawn = NULL;

	if ( ! pFnHandleSpawn )
		pFnHandleSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.HandleSpawn" );

	AKFSpawner_eventHandleSpawn_Parms HandleSpawn_Parms;

	this->ProcessEvent ( pFnHandleSpawn, &HandleSpawn_Parms, NULL );
};

// Function KFGame.KFSpawner.AddPendingSpawns
// [0x00420002] 
// Parameters infos:

void AKFSpawner::AddPendingSpawns ( )
{
	static UFunction* pFnAddPendingSpawns = NULL;

	if ( ! pFnAddPendingSpawns )
		pFnAddPendingSpawns = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.AddPendingSpawns" );

	AKFSpawner_execAddPendingSpawns_Parms AddPendingSpawns_Parms;

	this->ProcessEvent ( pFnAddPendingSpawns, &AddPendingSpawns_Parms, NULL );
};

// Function KFGame.KFSpawner.SpawnSquad
// [0x00420002] 
// Parameters infos:

void AKFSpawner::SpawnSquad ( )
{
	static UFunction* pFnSpawnSquad = NULL;

	if ( ! pFnSpawnSquad )
		pFnSpawnSquad = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.SpawnSquad" );

	AKFSpawner_execSpawnSquad_Parms SpawnSquad_Parms;

	this->ProcessEvent ( pFnSpawnSquad, &SpawnSquad_Parms, NULL );
};

// Function KFGame.KFSpawner.ReacquireZedTouch
// [0x00020002] 
// Parameters infos:

void AKFSpawner::ReacquireZedTouch ( )
{
	static UFunction* pFnReacquireZedTouch = NULL;

	if ( ! pFnReacquireZedTouch )
		pFnReacquireZedTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.ReacquireZedTouch" );

	AKFSpawner_execReacquireZedTouch_Parms ReacquireZedTouch_Parms;

	this->ProcessEvent ( pFnReacquireZedTouch, &ReacquireZedTouch_Parms, NULL );
};

// Function KFGame.KFSpawner.ReacquirePlayerTouch
// [0x00020002] 
// Parameters infos:

void AKFSpawner::ReacquirePlayerTouch ( )
{
	static UFunction* pFnReacquirePlayerTouch = NULL;

	if ( ! pFnReacquirePlayerTouch )
		pFnReacquirePlayerTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.ReacquirePlayerTouch" );

	AKFSpawner_execReacquirePlayerTouch_Parms ReacquirePlayerTouch_Parms;

	this->ProcessEvent ( pFnReacquirePlayerTouch, &ReacquirePlayerTouch_Parms, NULL );
};

// Function KFGame.KFSpawner.CanSpawnHere
// [0x00020002] 
// Parameters infos:

void AKFSpawner::CanSpawnHere ( )
{
	static UFunction* pFnCanSpawnHere = NULL;

	if ( ! pFnCanSpawnHere )
		pFnCanSpawnHere = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.CanSpawnHere" );

	AKFSpawner_execCanSpawnHere_Parms CanSpawnHere_Parms;

	this->ProcessEvent ( pFnCanSpawnHere, &CanSpawnHere_Parms, NULL );
};

// Function KFGame.KFSpawner.DeactivateSpawner
// [0x00020002] 
// Parameters infos:

void AKFSpawner::DeactivateSpawner ( )
{
	static UFunction* pFnDeactivateSpawner = NULL;

	if ( ! pFnDeactivateSpawner )
		pFnDeactivateSpawner = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.DeactivateSpawner" );

	AKFSpawner_execDeactivateSpawner_Parms DeactivateSpawner_Parms;

	this->ProcessEvent ( pFnDeactivateSpawner, &DeactivateSpawner_Parms, NULL );
};

// Function KFGame.KFSpawner.ActivateSpawner
// [0x00020002] 
// Parameters infos:

void AKFSpawner::ActivateSpawner ( )
{
	static UFunction* pFnActivateSpawner = NULL;

	if ( ! pFnActivateSpawner )
		pFnActivateSpawner = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.ActivateSpawner" );

	AKFSpawner_execActivateSpawner_Parms ActivateSpawner_Parms;

	this->ProcessEvent ( pFnActivateSpawner, &ActivateSpawner_Parms, NULL );
};

// Function KFGame.KFSpawner.OnToggle
// [0x00020002] 
// Parameters infos:

void AKFSpawner::OnToggle ( )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawner.OnToggle" );

	AKFSpawner_execOnToggle_Parms OnToggle_Parms;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function KFGame.KFSpawnVolume.HandleTeleportedTo
// [0x00020002] 
// Parameters infos:

void AKFSpawnVolume::HandleTeleportedTo ( )
{
	static UFunction* pFnHandleTeleportedTo = NULL;

	if ( ! pFnHandleTeleportedTo )
		pFnHandleTeleportedTo = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.HandleTeleportedTo" );

	AKFSpawnVolume_execHandleTeleportedTo_Parms HandleTeleportedTo_Parms;

	this->ProcessEvent ( pFnHandleTeleportedTo, &HandleTeleportedTo_Parms, NULL );
};

// Function KFGame.KFSpawnVolume.SetLastSpawnTime
// [0x00020002] 
// Parameters infos:

void AKFSpawnVolume::SetLastSpawnTime ( )
{
	static UFunction* pFnSetLastSpawnTime = NULL;

	if ( ! pFnSetLastSpawnTime )
		pFnSetLastSpawnTime = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.SetLastSpawnTime" );

	AKFSpawnVolume_execSetLastSpawnTime_Parms SetLastSpawnTime_Parms;

	this->ProcessEvent ( pFnSetLastSpawnTime, &SetLastSpawnTime_Parms, NULL );
};

// Function KFGame.KFSpawnVolume.RateVolume
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFSpawnVolume::eventRateVolume ( )
{
	static UFunction* pFnRateVolume = NULL;

	if ( ! pFnRateVolume )
		pFnRateVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.RateVolume" );

	AKFSpawnVolume_eventRateVolume_Parms RateVolume_Parms;

	this->ProcessEvent ( pFnRateVolume, &RateVolume_Parms, NULL );
};

// Function KFGame.KFSpawnVolume.IsValidForSpawn
// [0x00020002] 
// Parameters infos:

void AKFSpawnVolume::IsValidForSpawn ( )
{
	static UFunction* pFnIsValidForSpawn = NULL;

	if ( ! pFnIsValidForSpawn )
		pFnIsValidForSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.IsValidForSpawn" );

	AKFSpawnVolume_execIsValidForSpawn_Parms IsValidForSpawn_Parms;

	this->ProcessEvent ( pFnIsValidForSpawn, &IsValidForSpawn_Parms, NULL );
};

// Function KFGame.KFSpawnVolume.OnToggle
// [0x00020102] 
// Parameters infos:

void AKFSpawnVolume::OnToggle ( )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.OnToggle" );

	AKFSpawnVolume_execOnToggle_Parms OnToggle_Parms;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function KFGame.KFSpawnVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFSpawnVolume::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.UnTouch" );

	AKFSpawnVolume_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFSpawnVolume.IsTouchingAlivePawn
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFSpawnVolume::IsTouchingAlivePawn ( )
{
	static UFunction* pFnIsTouchingAlivePawn = NULL;

	if ( ! pFnIsTouchingAlivePawn )
		pFnIsTouchingAlivePawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.IsTouchingAlivePawn" );

	AKFSpawnVolume_execIsTouchingAlivePawn_Parms IsTouchingAlivePawn_Parms;

	pFnIsTouchingAlivePawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTouchingAlivePawn, &IsTouchingAlivePawn_Parms, NULL );

	pFnIsTouchingAlivePawn->FunctionFlags |= 0x400;
};

// Function KFGame.KFSpawnVolume.IsVisibleFrom
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFSpawnVolume::IsVisibleFrom ( )
{
	static UFunction* pFnIsVisibleFrom = NULL;

	if ( ! pFnIsVisibleFrom )
		pFnIsVisibleFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.IsVisibleFrom" );

	AKFSpawnVolume_execIsVisibleFrom_Parms IsVisibleFrom_Parms;

	pFnIsVisibleFrom->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVisibleFrom, &IsVisibleFrom_Parms, NULL );

	pFnIsVisibleFrom->FunctionFlags |= 0x400;
};

// Function KFGame.KFSpawnVolume.IsVisible
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFSpawnVolume::IsVisible ( )
{
	static UFunction* pFnIsVisible = NULL;

	if ( ! pFnIsVisible )
		pFnIsVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.IsVisible" );

	AKFSpawnVolume_execIsVisible_Parms IsVisible_Parms;

	pFnIsVisible->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsVisible, &IsVisible_Parms, NULL );

	pFnIsVisible->FunctionFlags |= 0x400;
};

// Function KFGame.KFSpawnVolume.RateDistance
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFSpawnVolume::RateDistance ( )
{
	static UFunction* pFnRateDistance = NULL;

	if ( ! pFnRateDistance )
		pFnRateDistance = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.RateDistance" );

	AKFSpawnVolume_execRateDistance_Parms RateDistance_Parms;

	pFnRateDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRateDistance, &RateDistance_Parms, NULL );

	pFnRateDistance->FunctionFlags |= 0x400;
};

// Function KFGame.KFSpawnVolume.FindSpawnLocation
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSpawnVolume::FindSpawnLocation ( )
{
	static UFunction* pFnFindSpawnLocation = NULL;

	if ( ! pFnFindSpawnLocation )
		pFnFindSpawnLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.FindSpawnLocation" );

	AKFSpawnVolume_execFindSpawnLocation_Parms FindSpawnLocation_Parms;

	pFnFindSpawnLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindSpawnLocation, &FindSpawnLocation_Parms, NULL );

	pFnFindSpawnLocation->FunctionFlags |= 0x400;
};

// Function KFGame.KFSpawnVolume.FindTeleportLocation
// [0x00024401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSpawnVolume::FindTeleportLocation ( )
{
	static UFunction* pFnFindTeleportLocation = NULL;

	if ( ! pFnFindTeleportLocation )
		pFnFindTeleportLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.FindTeleportLocation" );

	AKFSpawnVolume_execFindTeleportLocation_Parms FindTeleportLocation_Parms;

	pFnFindTeleportLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindTeleportLocation, &FindTeleportLocation_Parms, NULL );

	pFnFindTeleportLocation->FunctionFlags |= 0x400;
};

// Function KFGame.KFSpawnVolume.SpawnWave
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSpawnVolume::SpawnWave ( )
{
	static UFunction* pFnSpawnWave = NULL;

	if ( ! pFnSpawnWave )
		pFnSpawnWave = UObject::FindObject< UFunction > ( "Function KFGame.KFSpawnVolume.SpawnWave" );

	AKFSpawnVolume_execSpawnWave_Parms SpawnWave_Parms;

	pFnSpawnWave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpawnWave, &SpawnWave_Parms, NULL );

	pFnSpawnWave->FunctionFlags |= 0x400;
};

// Function KFGame.KFSteamWebAPICall.ProcessResponse
// [0x00020000] 
// Parameters infos:

void UKFSteamWebAPICall::ProcessResponse ( )
{
	static UFunction* pFnProcessResponse = NULL;

	if ( ! pFnProcessResponse )
		pFnProcessResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFSteamWebAPICall.ProcessResponse" );

	UKFSteamWebAPICall_execProcessResponse_Parms ProcessResponse_Parms;

	this->ProcessEvent ( pFnProcessResponse, &ProcessResponse_Parms, NULL );
};

// Function KFGame.KFSteamWebAPICall.Finished
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSteamWebAPICall::eventFinished ( )
{
	static UFunction* pFnFinished = NULL;

	if ( ! pFnFinished )
		pFnFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFSteamWebAPICall.Finished" );

	UKFSteamWebAPICall_eventFinished_Parms Finished_Parms;

	this->ProcessEvent ( pFnFinished, &Finished_Parms, NULL );
};

// Function KFGame.KFSteamWebAPICall.SendHTTPGet
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFSteamWebAPICall::SendHTTPGet ( )
{
	static UFunction* pFnSendHTTPGet = NULL;

	if ( ! pFnSendHTTPGet )
		pFnSendHTTPGet = UObject::FindObject< UFunction > ( "Function KFGame.KFSteamWebAPICall.SendHTTPGet" );

	UKFSteamWebAPICall_execSendHTTPGet_Parms SendHTTPGet_Parms;

	pFnSendHTTPGet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendHTTPGet, &SendHTTPGet_Parms, NULL );

	pFnSendHTTPGet->FunctionFlags |= 0x400;
};

// Function KFGame.KFSteamWebAPICall.CallWebProcedure
// [0x00020002] 
// Parameters infos:

void UKFSteamWebAPICall::CallWebProcedure ( )
{
	static UFunction* pFnCallWebProcedure = NULL;

	if ( ! pFnCallWebProcedure )
		pFnCallWebProcedure = UObject::FindObject< UFunction > ( "Function KFGame.KFSteamWebAPICall.CallWebProcedure" );

	UKFSteamWebAPICall_execCallWebProcedure_Parms CallWebProcedure_Parms;

	this->ProcessEvent ( pFnCallWebProcedure, &CallWebProcedure_Parms, NULL );
};

// Function KFGame.KFSteamWebUpToDateCheck.ProcessResponse
// [0x00020002] 
// Parameters infos:

void UKFSteamWebUpToDateCheck::ProcessResponse ( )
{
	static UFunction* pFnProcessResponse = NULL;

	if ( ! pFnProcessResponse )
		pFnProcessResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFSteamWebUpToDateCheck.ProcessResponse" );

	UKFSteamWebUpToDateCheck_execProcessResponse_Parms ProcessResponse_Parms;

	this->ProcessEvent ( pFnProcessResponse, &ProcessResponse_Parms, NULL );
};

// Function KFGame.KFSteamWebUpToDateCheck.SendUpToDateCheck
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSteamWebUpToDateCheck::eventSendUpToDateCheck ( )
{
	static UFunction* pFnSendUpToDateCheck = NULL;

	if ( ! pFnSendUpToDateCheck )
		pFnSendUpToDateCheck = UObject::FindObject< UFunction > ( "Function KFGame.KFSteamWebUpToDateCheck.SendUpToDateCheck" );

	UKFSteamWebUpToDateCheck_eventSendUpToDateCheck_Parms SendUpToDateCheck_Parms;

	this->ProcessEvent ( pFnSendUpToDateCheck, &SendUpToDateCheck_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.HideTraderPath
// [0x00020102] 
// Parameters infos:

void AKFTraderTrigger::HideTraderPath ( )
{
	static UFunction* pFnHideTraderPath = NULL;

	if ( ! pFnHideTraderPath )
		pFnHideTraderPath = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.HideTraderPath" );

	AKFTraderTrigger_execHideTraderPath_Parms HideTraderPath_Parms;

	this->ProcessEvent ( pFnHideTraderPath, &HideTraderPath_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.CloseTrader
// [0x00020102] 
// Parameters infos:

void AKFTraderTrigger::CloseTrader ( )
{
	static UFunction* pFnCloseTrader = NULL;

	if ( ! pFnCloseTrader )
		pFnCloseTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.CloseTrader" );

	AKFTraderTrigger_execCloseTrader_Parms CloseTrader_Parms;

	this->ProcessEvent ( pFnCloseTrader, &CloseTrader_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.ShowTraderPath
// [0x00020102] 
// Parameters infos:

void AKFTraderTrigger::ShowTraderPath ( )
{
	static UFunction* pFnShowTraderPath = NULL;

	if ( ! pFnShowTraderPath )
		pFnShowTraderPath = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.ShowTraderPath" );

	AKFTraderTrigger_execShowTraderPath_Parms ShowTraderPath_Parms;

	this->ProcessEvent ( pFnShowTraderPath, &ShowTraderPath_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.StartTraderLoopAnim
// [0x00020102] 
// Parameters infos:

void AKFTraderTrigger::StartTraderLoopAnim ( )
{
	static UFunction* pFnStartTraderLoopAnim = NULL;

	if ( ! pFnStartTraderLoopAnim )
		pFnStartTraderLoopAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.StartTraderLoopAnim" );

	AKFTraderTrigger_execStartTraderLoopAnim_Parms StartTraderLoopAnim_Parms;

	this->ProcessEvent ( pFnStartTraderLoopAnim, &StartTraderLoopAnim_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.OpenTrader
// [0x00020102] 
// Parameters infos:

void AKFTraderTrigger::OpenTrader ( )
{
	static UFunction* pFnOpenTrader = NULL;

	if ( ! pFnOpenTrader )
		pFnOpenTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.OpenTrader" );

	AKFTraderTrigger_execOpenTrader_Parms OpenTrader_Parms;

	this->ProcessEvent ( pFnOpenTrader, &OpenTrader_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.UsedBy
// [0x00020002] 
// Parameters infos:

void AKFTraderTrigger::UsedBy ( )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.UsedBy" );

	AKFTraderTrigger_execUsedBy_Parms UsedBy_Parms;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTraderTrigger::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.UnTouch" );

	AKFTraderTrigger_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTraderTrigger::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.Touch" );

	AKFTraderTrigger_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.GetInteractionIndex
// [0x00020002] 
// Parameters infos:

void AKFTraderTrigger::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.GetInteractionIndex" );

	AKFTraderTrigger_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFTraderTrigger.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFTraderTrigger::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderTrigger.GetIsUsable" );

	AKFTraderTrigger_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFTrigger_ChokePoint.PartialReduceTeammateCollision
// [0x00020102] 
// Parameters infos:

void AKFTrigger_ChokePoint::PartialReduceTeammateCollision ( )
{
	static UFunction* pFnPartialReduceTeammateCollision = NULL;

	if ( ! pFnPartialReduceTeammateCollision )
		pFnPartialReduceTeammateCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_ChokePoint.PartialReduceTeammateCollision" );

	AKFTrigger_ChokePoint_execPartialReduceTeammateCollision_Parms PartialReduceTeammateCollision_Parms;

	this->ProcessEvent ( pFnPartialReduceTeammateCollision, &PartialReduceTeammateCollision_Parms, NULL );
};

// Function KFGame.KFTrigger_ChokePoint.CanReduceTeammateCollision
// [0x00020102] 
// Parameters infos:

void AKFTrigger_ChokePoint::CanReduceTeammateCollision ( )
{
	static UFunction* pFnCanReduceTeammateCollision = NULL;

	if ( ! pFnCanReduceTeammateCollision )
		pFnCanReduceTeammateCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_ChokePoint.CanReduceTeammateCollision" );

	AKFTrigger_ChokePoint_execCanReduceTeammateCollision_Parms CanReduceTeammateCollision_Parms;

	this->ProcessEvent ( pFnCanReduceTeammateCollision, &CanReduceTeammateCollision_Parms, NULL );
};

// Function KFGame.KFTrigger_ChokePoint.CanRestoreChokeCollision
// [0x00020102] 
// Parameters infos:

void AKFTrigger_ChokePoint::CanRestoreChokeCollision ( )
{
	static UFunction* pFnCanRestoreChokeCollision = NULL;

	if ( ! pFnCanRestoreChokeCollision )
		pFnCanRestoreChokeCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_ChokePoint.CanRestoreChokeCollision" );

	AKFTrigger_ChokePoint_execCanRestoreChokeCollision_Parms CanRestoreChokeCollision_Parms;

	this->ProcessEvent ( pFnCanRestoreChokeCollision, &CanRestoreChokeCollision_Parms, NULL );
};

// Function KFGame.KFTrigger_ChokePoint.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_ChokePoint::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_ChokePoint.UnTouch" );

	AKFTrigger_ChokePoint_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFTrigger_ChokePoint.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_ChokePoint::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_ChokePoint.Touch" );

	AKFTrigger_ChokePoint_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.PartialReduceTeammateCollision
// [0x00020102] 
// Parameters infos:

void AKFDoorTrigger::PartialReduceTeammateCollision ( )
{
	static UFunction* pFnPartialReduceTeammateCollision = NULL;

	if ( ! pFnPartialReduceTeammateCollision )
		pFnPartialReduceTeammateCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.PartialReduceTeammateCollision" );

	AKFDoorTrigger_execPartialReduceTeammateCollision_Parms PartialReduceTeammateCollision_Parms;

	this->ProcessEvent ( pFnPartialReduceTeammateCollision, &PartialReduceTeammateCollision_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.CanReduceTeammateCollision
// [0x00020102] 
// Parameters infos:

void AKFDoorTrigger::CanReduceTeammateCollision ( )
{
	static UFunction* pFnCanReduceTeammateCollision = NULL;

	if ( ! pFnCanReduceTeammateCollision )
		pFnCanReduceTeammateCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.CanReduceTeammateCollision" );

	AKFDoorTrigger_execCanReduceTeammateCollision_Parms CanReduceTeammateCollision_Parms;

	this->ProcessEvent ( pFnCanReduceTeammateCollision, &CanReduceTeammateCollision_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.CanRestoreChokeCollision
// [0x00020102] 
// Parameters infos:

void AKFDoorTrigger::CanRestoreChokeCollision ( )
{
	static UFunction* pFnCanRestoreChokeCollision = NULL;

	if ( ! pFnCanRestoreChokeCollision )
		pFnCanRestoreChokeCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.CanRestoreChokeCollision" );

	AKFDoorTrigger_execCanRestoreChokeCollision_Parms CanRestoreChokeCollision_Parms;

	this->ProcessEvent ( pFnCanRestoreChokeCollision, &CanRestoreChokeCollision_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.UsedBy
// [0x00020002] 
// Parameters infos:

void AKFDoorTrigger::UsedBy ( )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.UsedBy" );

	AKFDoorTrigger_execUsedBy_Parms UsedBy_Parms;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.GetInteractionIndex
// [0x00020002] 
// Parameters infos:

void AKFDoorTrigger::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.GetInteractionIndex" );

	AKFDoorTrigger_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFDoorTrigger::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.GetIsUsable" );

	AKFDoorTrigger_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.OnDestroyOrReset
// [0x00020002] 
// Parameters infos:

void AKFDoorTrigger::OnDestroyOrReset ( )
{
	static UFunction* pFnOnDestroyOrReset = NULL;

	if ( ! pFnOnDestroyOrReset )
		pFnOnDestroyOrReset = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.OnDestroyOrReset" );

	AKFDoorTrigger_execOnDestroyOrReset_Parms OnDestroyOrReset_Parms;

	this->ProcessEvent ( pFnOnDestroyOrReset, &OnDestroyOrReset_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDoorTrigger::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.UnTouch" );

	AKFDoorTrigger_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDoorTrigger::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.Touch" );

	AKFDoorTrigger_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFDoorTrigger.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDoorTrigger::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorTrigger.PostBeginPlay" );

	AKFDoorTrigger_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.MinigameStateUpdated
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::MinigameStateUpdated ( )
{
	static UFunction* pFnMinigameStateUpdated = NULL;

	if ( ! pFnMinigameStateUpdated )
		pFnMinigameStateUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.MinigameStateUpdated" );

	AKFTrigger_MinigameButton_execMinigameStateUpdated_Parms MinigameStateUpdated_Parms;

	this->ProcessEvent ( pFnMinigameStateUpdated, &MinigameStateUpdated_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.SetMinigameInactive
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::SetMinigameInactive ( )
{
	static UFunction* pFnSetMinigameInactive = NULL;

	if ( ! pFnSetMinigameInactive )
		pFnSetMinigameInactive = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.SetMinigameInactive" );

	AKFTrigger_MinigameButton_execSetMinigameInactive_Parms SetMinigameInactive_Parms;

	this->ProcessEvent ( pFnSetMinigameInactive, &SetMinigameInactive_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.SetMinigameActive
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::SetMinigameActive ( )
{
	static UFunction* pFnSetMinigameActive = NULL;

	if ( ! pFnSetMinigameActive )
		pFnSetMinigameActive = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.SetMinigameActive" );

	AKFTrigger_MinigameButton_execSetMinigameActive_Parms SetMinigameActive_Parms;

	this->ProcessEvent ( pFnSetMinigameActive, &SetMinigameActive_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.DeActivate
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::DeActivate ( )
{
	static UFunction* pFnDeActivate = NULL;

	if ( ! pFnDeActivate )
		pFnDeActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.DeActivate" );

	AKFTrigger_MinigameButton_execDeActivate_Parms DeActivate_Parms;

	this->ProcessEvent ( pFnDeActivate, &DeActivate_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.LinkedButtonsAllowActivation
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::LinkedButtonsAllowActivation ( )
{
	static UFunction* pFnLinkedButtonsAllowActivation = NULL;

	if ( ! pFnLinkedButtonsAllowActivation )
		pFnLinkedButtonsAllowActivation = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.LinkedButtonsAllowActivation" );

	AKFTrigger_MinigameButton_execLinkedButtonsAllowActivation_Parms LinkedButtonsAllowActivation_Parms;

	this->ProcessEvent ( pFnLinkedButtonsAllowActivation, &LinkedButtonsAllowActivation_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.ActorsAllowActivation
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::ActorsAllowActivation ( )
{
	static UFunction* pFnActorsAllowActivation = NULL;

	if ( ! pFnActorsAllowActivation )
		pFnActorsAllowActivation = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.ActorsAllowActivation" );

	AKFTrigger_MinigameButton_execActorsAllowActivation_Parms ActorsAllowActivation_Parms;

	this->ProcessEvent ( pFnActorsAllowActivation, &ActorsAllowActivation_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.BroadcastInteractionMessages
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::BroadcastInteractionMessages ( )
{
	static UFunction* pFnBroadcastInteractionMessages = NULL;

	if ( ! pFnBroadcastInteractionMessages )
		pFnBroadcastInteractionMessages = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.BroadcastInteractionMessages" );

	AKFTrigger_MinigameButton_execBroadcastInteractionMessages_Parms BroadcastInteractionMessages_Parms;

	this->ProcessEvent ( pFnBroadcastInteractionMessages, &BroadcastInteractionMessages_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.AllowReactivation
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::AllowReactivation ( )
{
	static UFunction* pFnAllowReactivation = NULL;

	if ( ! pFnAllowReactivation )
		pFnAllowReactivation = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.AllowReactivation" );

	AKFTrigger_MinigameButton_execAllowReactivation_Parms AllowReactivation_Parms;

	this->ProcessEvent ( pFnAllowReactivation, &AllowReactivation_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.ActivateGame
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::ActivateGame ( )
{
	static UFunction* pFnActivateGame = NULL;

	if ( ! pFnActivateGame )
		pFnActivateGame = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.ActivateGame" );

	AKFTrigger_MinigameButton_execActivateGame_Parms ActivateGame_Parms;

	this->ProcessEvent ( pFnActivateGame, &ActivateGame_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.UsedBy
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameButton::UsedBy ( )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.UsedBy" );

	AKFTrigger_MinigameButton_execUsedBy_Parms UsedBy_Parms;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_MinigameButton::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.UnTouch" );

	AKFTrigger_MinigameButton_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_MinigameButton::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.Touch" );

	AKFTrigger_MinigameButton_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.GetInteractionIndex
// [0x00020102] 
// Parameters infos:

void AKFTrigger_MinigameButton::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.GetInteractionIndex" );

	AKFTrigger_MinigameButton_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.ReadyToActivate
// [0x00020102] 
// Parameters infos:

void AKFTrigger_MinigameButton::ReadyToActivate ( )
{
	static UFunction* pFnReadyToActivate = NULL;

	if ( ! pFnReadyToActivate )
		pFnReadyToActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.ReadyToActivate" );

	AKFTrigger_MinigameButton_execReadyToActivate_Parms ReadyToActivate_Parms;

	this->ProcessEvent ( pFnReadyToActivate, &ReadyToActivate_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameButton.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFTrigger_MinigameButton::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameButton.GetIsUsable" );

	AKFTrigger_MinigameButton_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameCash.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_MinigameCash::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameCash.Touch" );

	AKFTrigger_MinigameCash_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFTrigger_MinigameCash.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFTrigger_MinigameCash::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_MinigameCash.GetIsUsable" );

	AKFTrigger_MinigameCash_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFUnlockManager.TestSteamAPI
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFUnlockManager::TestSteamAPI ( )
{
	static UFunction* pFnTestSteamAPI = NULL;

	if ( ! pFnTestSteamAPI )
		pFnTestSteamAPI = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.TestSteamAPI" );

	UKFUnlockManager_execTestSteamAPI_Parms TestSteamAPI_Parms;

	pFnTestSteamAPI->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTestSteamAPI, &TestSteamAPI_Parms, NULL );

	pFnTestSteamAPI->FunctionFlags |= 0x400;
};

// Function KFGame.KFUnlockManager.ClearCharacterCustomization
// [0x00042401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFUnlockManager::ClearCharacterCustomization ( )
{
	static UFunction* pFnClearCharacterCustomization = NULL;

	if ( ! pFnClearCharacterCustomization )
		pFnClearCharacterCustomization = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.ClearCharacterCustomization" );

	UKFUnlockManager_execClearCharacterCustomization_Parms ClearCharacterCustomization_Parms;

	pFnClearCharacterCustomization->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCharacterCustomization, &ClearCharacterCustomization_Parms, NULL );

	pFnClearCharacterCustomization->FunctionFlags |= 0x400;
};

// Function KFGame.KFUnlockManager.CheckCustomizationOwnership
// [0x00842803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFUnlockManager::eventCheckCustomizationOwnership ( )
{
	static UFunction* pFnCheckCustomizationOwnership = NULL;

	if ( ! pFnCheckCustomizationOwnership )
		pFnCheckCustomizationOwnership = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.CheckCustomizationOwnership" );

	UKFUnlockManager_eventCheckCustomizationOwnership_Parms CheckCustomizationOwnership_Parms;

	this->ProcessEvent ( pFnCheckCustomizationOwnership, &CheckCustomizationOwnership_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetAvailableAttachment
// [0x00422002] 
// Parameters infos:

void UKFUnlockManager::GetAvailableAttachment ( )
{
	static UFunction* pFnGetAvailableAttachment = NULL;

	if ( ! pFnGetAvailableAttachment )
		pFnGetAvailableAttachment = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetAvailableAttachment" );

	UKFUnlockManager_execGetAvailableAttachment_Parms GetAvailableAttachment_Parms;

	this->ProcessEvent ( pFnGetAvailableAttachment, &GetAvailableAttachment_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetAvailableOutfit
// [0x00422002] 
// Parameters infos:

void UKFUnlockManager::GetAvailableOutfit ( )
{
	static UFunction* pFnGetAvailableOutfit = NULL;

	if ( ! pFnGetAvailableOutfit )
		pFnGetAvailableOutfit = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetAvailableOutfit" );

	UKFUnlockManager_execGetAvailableOutfit_Parms GetAvailableOutfit_Parms;

	this->ProcessEvent ( pFnGetAvailableOutfit, &GetAvailableOutfit_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetAvailableSkin
// [0x00422002] 
// Parameters infos:

void UKFUnlockManager::GetAvailableSkin ( )
{
	static UFunction* pFnGetAvailableSkin = NULL;

	if ( ! pFnGetAvailableSkin )
		pFnGetAvailableSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetAvailableSkin" );

	UKFUnlockManager_execGetAvailableSkin_Parms GetAvailableSkin_Parms;

	this->ProcessEvent ( pFnGetAvailableSkin, &GetAvailableSkin_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetAvailable
// [0x00022002] 
// Parameters infos:

void UKFUnlockManager::GetAvailable ( )
{
	static UFunction* pFnGetAvailable = NULL;

	if ( ! pFnGetAvailable )
		pFnGetAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetAvailable" );

	UKFUnlockManager_execGetAvailable_Parms GetAvailable_Parms;

	this->ProcessEvent ( pFnGetAvailable, &GetAvailable_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetAvailableCharacterArchetype
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void UKFUnlockManager::eventGetAvailableCharacterArchetype ( )
{
	static UFunction* pFnGetAvailableCharacterArchetype = NULL;

	if ( ! pFnGetAvailableCharacterArchetype )
		pFnGetAvailableCharacterArchetype = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetAvailableCharacterArchetype" );

	UKFUnlockManager_eventGetAvailableCharacterArchetype_Parms GetAvailableCharacterArchetype_Parms;

	this->ProcessEvent ( pFnGetAvailableCharacterArchetype, &GetAvailableCharacterArchetype_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetHeadShotEffectAvailable
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void UKFUnlockManager::eventGetHeadShotEffectAvailable ( )
{
	static UFunction* pFnGetHeadShotEffectAvailable = NULL;

	if ( ! pFnGetHeadShotEffectAvailable )
		pFnGetHeadShotEffectAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetHeadShotEffectAvailable" );

	UKFUnlockManager_eventGetHeadShotEffectAvailable_Parms GetHeadShotEffectAvailable_Parms;

	this->ProcessEvent ( pFnGetHeadShotEffectAvailable, &GetHeadShotEffectAvailable_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetEmoteAvailable
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void UKFUnlockManager::eventGetEmoteAvailable ( )
{
	static UFunction* pFnGetEmoteAvailable = NULL;

	if ( ! pFnGetEmoteAvailable )
		pFnGetEmoteAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetEmoteAvailable" );

	UKFUnlockManager_eventGetEmoteAvailable_Parms GetEmoteAvailable_Parms;

	this->ProcessEvent ( pFnGetEmoteAvailable, &GetEmoteAvailable_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetWeaponSkinAvailable
// [0x00022002] 
// Parameters infos:

void UKFUnlockManager::GetWeaponSkinAvailable ( )
{
	static UFunction* pFnGetWeaponSkinAvailable = NULL;

	if ( ! pFnGetWeaponSkinAvailable )
		pFnGetWeaponSkinAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetWeaponSkinAvailable" );

	UKFUnlockManager_execGetWeaponSkinAvailable_Parms GetWeaponSkinAvailable_Parms;

	this->ProcessEvent ( pFnGetWeaponSkinAvailable, &GetWeaponSkinAvailable_Parms, NULL );
};

// Function KFGame.KFUnlockManager.GetIDAvailable
// [0x00042401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFUnlockManager::GetIDAvailable ( )
{
	static UFunction* pFnGetIDAvailable = NULL;

	if ( ! pFnGetIDAvailable )
		pFnGetIDAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetIDAvailable" );

	UKFUnlockManager_execGetIDAvailable_Parms GetIDAvailable_Parms;

	pFnGetIDAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetIDAvailable, &GetIDAvailable_Parms, NULL );

	pFnGetIDAvailable->FunctionFlags |= 0x400;
};

// Function KFGame.KFUnlockManager.IsPlatformRestricted
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFUnlockManager::IsPlatformRestricted ( )
{
	static UFunction* pFnIsPlatformRestricted = NULL;

	if ( ! pFnIsPlatformRestricted )
		pFnIsPlatformRestricted = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.IsPlatformRestricted" );

	UKFUnlockManager_execIsPlatformRestricted_Parms IsPlatformRestricted_Parms;

	pFnIsPlatformRestricted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPlatformRestricted, &IsPlatformRestricted_Parms, NULL );

	pFnIsPlatformRestricted->FunctionFlags |= 0x400;
};

// Function KFGame.KFUnlockManager.GetSharedContentPlayerList
// [0x00422400] ( FUNC_Native )
// Parameters infos:

void UKFUnlockManager::GetSharedContentPlayerList ( )
{
	static UFunction* pFnGetSharedContentPlayerList = NULL;

	if ( ! pFnGetSharedContentPlayerList )
		pFnGetSharedContentPlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetSharedContentPlayerList" );

	UKFUnlockManager_execGetSharedContentPlayerList_Parms GetSharedContentPlayerList_Parms;

	pFnGetSharedContentPlayerList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSharedContentPlayerList, &GetSharedContentPlayerList_Parms, NULL );

	pFnGetSharedContentPlayerList->FunctionFlags |= 0x400;
};

// Function KFGame.KFUnlockManager.GetObjectiveItemGranted
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFUnlockManager::GetObjectiveItemGranted ( )
{
	static UFunction* pFnGetObjectiveItemGranted = NULL;

	if ( ! pFnGetObjectiveItemGranted )
		pFnGetObjectiveItemGranted = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.GetObjectiveItemGranted" );

	UKFUnlockManager_execGetObjectiveItemGranted_Parms GetObjectiveItemGranted_Parms;

	pFnGetObjectiveItemGranted->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetObjectiveItemGranted, &GetObjectiveItemGranted_Parms, NULL );

	pFnGetObjectiveItemGranted->FunctionFlags |= 0x400;
};

// Function KFGame.KFUnlockManager.IsSharedContentUnlocked
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFUnlockManager::IsSharedContentUnlocked ( )
{
	static UFunction* pFnIsSharedContentUnlocked = NULL;

	if ( ! pFnIsSharedContentUnlocked )
		pFnIsSharedContentUnlocked = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.IsSharedContentUnlocked" );

	UKFUnlockManager_execIsSharedContentUnlocked_Parms IsSharedContentUnlocked_Parms;

	pFnIsSharedContentUnlocked->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSharedContentUnlocked, &IsSharedContentUnlocked_Parms, NULL );

	pFnIsSharedContentUnlocked->FunctionFlags |= 0x400;
};

// Function KFGame.KFUnlockManager.InitSharedUnlocksFor
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFUnlockManager::InitSharedUnlocksFor ( )
{
	static UFunction* pFnInitSharedUnlocksFor = NULL;

	if ( ! pFnInitSharedUnlocksFor )
		pFnInitSharedUnlocksFor = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockManager.InitSharedUnlocksFor" );

	UKFUnlockManager_execInitSharedUnlocksFor_Parms InitSharedUnlocksFor_Parms;

	pFnInitSharedUnlocksFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSharedUnlocksFor, &InitSharedUnlocksFor_Parms, NULL );

	pFnInitSharedUnlocksFor->FunctionFlags |= 0x400;
};

// Function KFGame.KFUsablePerkTrigger.UsedBy
// [0x00020002] 
// Parameters infos:

void AKFUsablePerkTrigger::UsedBy ( )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFUsablePerkTrigger.UsedBy" );

	AKFUsablePerkTrigger_execUsedBy_Parms UsedBy_Parms;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );
};

// Function KFGame.KFUsablePerkTrigger.DestroyTrigger
// [0x00020102] 
// Parameters infos:

void AKFUsablePerkTrigger::DestroyTrigger ( )
{
	static UFunction* pFnDestroyTrigger = NULL;

	if ( ! pFnDestroyTrigger )
		pFnDestroyTrigger = UObject::FindObject< UFunction > ( "Function KFGame.KFUsablePerkTrigger.DestroyTrigger" );

	AKFUsablePerkTrigger_execDestroyTrigger_Parms DestroyTrigger_Parms;

	this->ProcessEvent ( pFnDestroyTrigger, &DestroyTrigger_Parms, NULL );
};

// Function KFGame.KFUsablePerkTrigger.GetCanInteract
// [0x00024002] 
// Parameters infos:

void AKFUsablePerkTrigger::GetCanInteract ( )
{
	static UFunction* pFnGetCanInteract = NULL;

	if ( ! pFnGetCanInteract )
		pFnGetCanInteract = UObject::FindObject< UFunction > ( "Function KFGame.KFUsablePerkTrigger.GetCanInteract" );

	AKFUsablePerkTrigger_execGetCanInteract_Parms GetCanInteract_Parms;

	this->ProcessEvent ( pFnGetCanInteract, &GetCanInteract_Parms, NULL );
};

// Function KFGame.KFUsablePerkTrigger.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFUsablePerkTrigger::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFUsablePerkTrigger.UnTouch" );

	AKFUsablePerkTrigger_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFUsablePerkTrigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFUsablePerkTrigger::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFUsablePerkTrigger.Touch" );

	AKFUsablePerkTrigger_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFUsablePerkTrigger.GetInteractionIndex
// [0x00020002] 
// Parameters infos:

void AKFUsablePerkTrigger::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFUsablePerkTrigger.GetInteractionIndex" );

	AKFUsablePerkTrigger_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFUsablePerkTrigger.SetInteractionIndex
// [0x00020002] 
// Parameters infos:

void AKFUsablePerkTrigger::SetInteractionIndex ( )
{
	static UFunction* pFnSetInteractionIndex = NULL;

	if ( ! pFnSetInteractionIndex )
		pFnSetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFUsablePerkTrigger.SetInteractionIndex" );

	AKFUsablePerkTrigger_execSetInteractionIndex_Parms SetInteractionIndex_Parms;

	this->ProcessEvent ( pFnSetInteractionIndex, &SetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFUsablePerkTrigger.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFUsablePerkTrigger::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFUsablePerkTrigger.GetIsUsable" );

	AKFUsablePerkTrigger_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFVersusNoGoVolume.GetNoGoHurtInterval
// [0x00022003] ( FUNC_Final )
// Parameters infos:

void AKFVersusNoGoVolume::GetNoGoHurtInterval ( )
{
	static UFunction* pFnGetNoGoHurtInterval = NULL;

	if ( ! pFnGetNoGoHurtInterval )
		pFnGetNoGoHurtInterval = UObject::FindObject< UFunction > ( "Function KFGame.KFVersusNoGoVolume.GetNoGoHurtInterval" );

	AKFVersusNoGoVolume_execGetNoGoHurtInterval_Parms GetNoGoHurtInterval_Parms;

	this->ProcessEvent ( pFnGetNoGoHurtInterval, &GetNoGoHurtInterval_Parms, NULL );
};

// Function KFGame.KFVersusNoGoVolume.GetNoGoDTClass
// [0x00022003] ( FUNC_Final )
// Parameters infos:

void AKFVersusNoGoVolume::GetNoGoDTClass ( )
{
	static UFunction* pFnGetNoGoDTClass = NULL;

	if ( ! pFnGetNoGoDTClass )
		pFnGetNoGoDTClass = UObject::FindObject< UFunction > ( "Function KFGame.KFVersusNoGoVolume.GetNoGoDTClass" );

	AKFVersusNoGoVolume_execGetNoGoDTClass_Parms GetNoGoDTClass_Parms;

	this->ProcessEvent ( pFnGetNoGoDTClass, &GetNoGoDTClass_Parms, NULL );
};

// Function KFGame.KFVersusNoGoVolume.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFVersusNoGoVolume::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFVersusNoGoVolume.Tick" );

	AKFVersusNoGoVolume_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFVersusNoGoVolume.SetActive
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFVersusNoGoVolume::SetActive ( )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = UObject::FindObject< UFunction > ( "Function KFGame.KFVersusNoGoVolume.SetActive" );

	AKFVersusNoGoVolume_execSetActive_Parms SetActive_Parms;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );
};

// Function KFGame.KFVersusNoGoVolume.IsLocalPlayerTouching
// [0x00020102] 
// Parameters infos:

void AKFVersusNoGoVolume::IsLocalPlayerTouching ( )
{
	static UFunction* pFnIsLocalPlayerTouching = NULL;

	if ( ! pFnIsLocalPlayerTouching )
		pFnIsLocalPlayerTouching = UObject::FindObject< UFunction > ( "Function KFGame.KFVersusNoGoVolume.IsLocalPlayerTouching" );

	AKFVersusNoGoVolume_execIsLocalPlayerTouching_Parms IsLocalPlayerTouching_Parms;

	this->ProcessEvent ( pFnIsLocalPlayerTouching, &IsLocalPlayerTouching_Parms, NULL );
};

// Function KFGame.KFVersusNoGoVolume.CheckActivate
// [0x00020102] 
// Parameters infos:

void AKFVersusNoGoVolume::CheckActivate ( )
{
	static UFunction* pFnCheckActivate = NULL;

	if ( ! pFnCheckActivate )
		pFnCheckActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFVersusNoGoVolume.CheckActivate" );

	AKFVersusNoGoVolume_execCheckActivate_Parms CheckActivate_Parms;

	this->ProcessEvent ( pFnCheckActivate, &CheckActivate_Parms, NULL );
};

// Function KFGame.KFVersusNoGoVolume.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFVersusNoGoVolume::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFVersusNoGoVolume.Touch" );

	AKFVersusNoGoVolume_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFVersusNoGoVolume.NotifyNoGoActive
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFVersusNoGoVolume::NotifyNoGoActive ( )
{
	static UFunction* pFnNotifyNoGoActive = NULL;

	if ( ! pFnNotifyNoGoActive )
		pFnNotifyNoGoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFVersusNoGoVolume.NotifyNoGoActive" );

	AKFVersusNoGoVolume_execNotifyNoGoActive_Parms NotifyNoGoActive_Parms;

	pFnNotifyNoGoActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNotifyNoGoActive, &NotifyNoGoActive_Parms, NULL );

	pFnNotifyNoGoActive->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetAltTraderFilter" );

	AKFWeapon_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeapon.GetTraderFilter
// [0x00022900] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetTraderFilter" );

	AKFWeapon_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeapon.CalculateTraderWeaponStatFireRate
// [0x00022102] 
// Parameters infos:

void AKFWeapon::CalculateTraderWeaponStatFireRate ( )
{
	static UFunction* pFnCalculateTraderWeaponStatFireRate = NULL;

	if ( ! pFnCalculateTraderWeaponStatFireRate )
		pFnCalculateTraderWeaponStatFireRate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CalculateTraderWeaponStatFireRate" );

	AKFWeapon_execCalculateTraderWeaponStatFireRate_Parms CalculateTraderWeaponStatFireRate_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatFireRate, &CalculateTraderWeaponStatFireRate_Parms, NULL );
};

// Function KFGame.KFWeapon.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeapon::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CalculateTraderWeaponStatDamage" );

	AKFWeapon_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function KFGame.KFWeapon.SetTraderWeaponStats
// [0x00422902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventSetTraderWeaponStats ( )
{
	static UFunction* pFnSetTraderWeaponStats = NULL;

	if ( ! pFnSetTraderWeaponStats )
		pFnSetTraderWeaponStats = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetTraderWeaponStats" );

	AKFWeapon_eventSetTraderWeaponStats_Parms SetTraderWeaponStats_Parms;

	this->ProcessEvent ( pFnSetTraderWeaponStats, &SetTraderWeaponStats_Parms, NULL );
};

// Function KFGame.KFWeapon.ServerSyncWeaponFiring
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeapon::ServerSyncWeaponFiring ( )
{
	static UFunction* pFnServerSyncWeaponFiring = NULL;

	if ( ! pFnServerSyncWeaponFiring )
		pFnServerSyncWeaponFiring = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerSyncWeaponFiring" );

	AKFWeapon_execServerSyncWeaponFiring_Parms ServerSyncWeaponFiring_Parms;

	this->ProcessEvent ( pFnServerSyncWeaponFiring, &ServerSyncWeaponFiring_Parms, NULL );
};

// Function KFGame.KFWeapon.GetForceReloadDelay
// [0x00020100] 
// Parameters infos:

void AKFWeapon::GetForceReloadDelay ( )
{
	static UFunction* pFnGetForceReloadDelay = NULL;

	if ( ! pFnGetForceReloadDelay )
		pFnGetForceReloadDelay = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetForceReloadDelay" );

	AKFWeapon_execGetForceReloadDelay_Parms GetForceReloadDelay_Parms;

	this->ProcessEvent ( pFnGetForceReloadDelay, &GetForceReloadDelay_Parms, NULL );
};

// Function KFGame.KFWeapon.GetMeleeDamage
// [0x00024102] 
// Parameters infos:

void AKFWeapon::GetMeleeDamage ( )
{
	static UFunction* pFnGetMeleeDamage = NULL;

	if ( ! pFnGetMeleeDamage )
		pFnGetMeleeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetMeleeDamage" );

	AKFWeapon_execGetMeleeDamage_Parms GetMeleeDamage_Parms;

	this->ProcessEvent ( pFnGetMeleeDamage, &GetMeleeDamage_Parms, NULL );
};

// Function KFGame.KFWeapon.GetModifiedDamage
// [0x00024102] 
// Parameters infos:

void AKFWeapon::GetModifiedDamage ( )
{
	static UFunction* pFnGetModifiedDamage = NULL;

	if ( ! pFnGetModifiedDamage )
		pFnGetModifiedDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetModifiedDamage" );

	AKFWeapon_execGetModifiedDamage_Parms GetModifiedDamage_Parms;

	this->ProcessEvent ( pFnGetModifiedDamage, &GetModifiedDamage_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayMeleeAnimation
// [0x00420102] 
// Parameters infos:

void AKFWeapon::PlayMeleeAnimation ( )
{
	static UFunction* pFnPlayMeleeAnimation = NULL;

	if ( ! pFnPlayMeleeAnimation )
		pFnPlayMeleeAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayMeleeAnimation" );

	AKFWeapon_execPlayMeleeAnimation_Parms PlayMeleeAnimation_Parms;

	this->ProcessEvent ( pFnPlayMeleeAnimation, &PlayMeleeAnimation_Parms, NULL );
};

// Function KFGame.KFWeapon.NotifyMeleeCollision
// [0x00024100] 
// Parameters infos:

void AKFWeapon::NotifyMeleeCollision ( )
{
	static UFunction* pFnNotifyMeleeCollision = NULL;

	if ( ! pFnNotifyMeleeCollision )
		pFnNotifyMeleeCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.NotifyMeleeCollision" );

	AKFWeapon_execNotifyMeleeCollision_Parms NotifyMeleeCollision_Parms;

	this->ProcessEvent ( pFnNotifyMeleeCollision, &NotifyMeleeCollision_Parms, NULL );
};

// Function KFGame.KFWeapon.ShouldContinueMelee
// [0x00024100] 
// Parameters infos:

void AKFWeapon::ShouldContinueMelee ( )
{
	static UFunction* pFnShouldContinueMelee = NULL;

	if ( ! pFnShouldContinueMelee )
		pFnShouldContinueMelee = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ShouldContinueMelee" );

	AKFWeapon_execShouldContinueMelee_Parms ShouldContinueMelee_Parms;

	this->ProcessEvent ( pFnShouldContinueMelee, &ShouldContinueMelee_Parms, NULL );
};

// Function KFGame.KFWeapon.IsMeleeing
// [0x00020100] 
// Parameters infos:

void AKFWeapon::IsMeleeing ( )
{
	static UFunction* pFnIsMeleeing = NULL;

	if ( ! pFnIsMeleeing )
		pFnIsMeleeing = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.IsMeleeing" );

	AKFWeapon_execIsMeleeing_Parms IsMeleeing_Parms;

	this->ProcessEvent ( pFnIsMeleeing, &IsMeleeing_Parms, NULL );
};

// Function KFGame.KFWeapon.GetSprintAnimRate
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetSprintAnimRate ( )
{
	static UFunction* pFnGetSprintAnimRate = NULL;

	if ( ! pFnGetSprintAnimRate )
		pFnGetSprintAnimRate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetSprintAnimRate" );

	AKFWeapon_execGetSprintAnimRate_Parms GetSprintAnimRate_Parms;

	this->ProcessEvent ( pFnGetSprintAnimRate, &GetSprintAnimRate_Parms, NULL );
};

// Function KFGame.KFWeapon.GetSprintEndAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetSprintEndAnimName ( )
{
	static UFunction* pFnGetSprintEndAnimName = NULL;

	if ( ! pFnGetSprintEndAnimName )
		pFnGetSprintEndAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetSprintEndAnimName" );

	AKFWeapon_execGetSprintEndAnimName_Parms GetSprintEndAnimName_Parms;

	this->ProcessEvent ( pFnGetSprintEndAnimName, &GetSprintEndAnimName_Parms, NULL );
};

// Function KFGame.KFWeapon.PlaySprintEnd
// [0x00020102] 
// Parameters infos:

void AKFWeapon::PlaySprintEnd ( )
{
	static UFunction* pFnPlaySprintEnd = NULL;

	if ( ! pFnPlaySprintEnd )
		pFnPlaySprintEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlaySprintEnd" );

	AKFWeapon_execPlaySprintEnd_Parms PlaySprintEnd_Parms;

	this->ProcessEvent ( pFnPlaySprintEnd, &PlaySprintEnd_Parms, NULL );
};

// Function KFGame.KFWeapon.GetSprintLoopAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetSprintLoopAnimName ( )
{
	static UFunction* pFnGetSprintLoopAnimName = NULL;

	if ( ! pFnGetSprintLoopAnimName )
		pFnGetSprintLoopAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetSprintLoopAnimName" );

	AKFWeapon_execGetSprintLoopAnimName_Parms GetSprintLoopAnimName_Parms;

	this->ProcessEvent ( pFnGetSprintLoopAnimName, &GetSprintLoopAnimName_Parms, NULL );
};

// Function KFGame.KFWeapon.PlaySprintLoop
// [0x00020102] 
// Parameters infos:

void AKFWeapon::PlaySprintLoop ( )
{
	static UFunction* pFnPlaySprintLoop = NULL;

	if ( ! pFnPlaySprintLoop )
		pFnPlaySprintLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlaySprintLoop" );

	AKFWeapon_execPlaySprintLoop_Parms PlaySprintLoop_Parms;

	this->ProcessEvent ( pFnPlaySprintLoop, &PlaySprintLoop_Parms, NULL );
};

// Function KFGame.KFWeapon.GetSprintStartAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetSprintStartAnimName ( )
{
	static UFunction* pFnGetSprintStartAnimName = NULL;

	if ( ! pFnGetSprintStartAnimName )
		pFnGetSprintStartAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetSprintStartAnimName" );

	AKFWeapon_execGetSprintStartAnimName_Parms GetSprintStartAnimName_Parms;

	this->ProcessEvent ( pFnGetSprintStartAnimName, &GetSprintStartAnimName_Parms, NULL );
};

// Function KFGame.KFWeapon.PlaySprintStart
// [0x00020102] 
// Parameters infos:

void AKFWeapon::PlaySprintStart ( )
{
	static UFunction* pFnPlaySprintStart = NULL;

	if ( ! pFnPlaySprintStart )
		pFnPlaySprintStart = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlaySprintStart" );

	AKFWeapon_execPlaySprintStart_Parms PlaySprintStart_Parms;

	this->ProcessEvent ( pFnPlaySprintStart, &PlaySprintStart_Parms, NULL );
};

// Function KFGame.KFWeapon.SprintRetryTimer
// [0x00020100] 
// Parameters infos:

void AKFWeapon::SprintRetryTimer ( )
{
	static UFunction* pFnSprintRetryTimer = NULL;

	if ( ! pFnSprintRetryTimer )
		pFnSprintRetryTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SprintRetryTimer" );

	AKFWeapon_execSprintRetryTimer_Parms SprintRetryTimer_Parms;

	this->ProcessEvent ( pFnSprintRetryTimer, &SprintRetryTimer_Parms, NULL );
};

// Function KFGame.KFWeapon.SprintLoopTimer
// [0x00020100] 
// Parameters infos:

void AKFWeapon::SprintLoopTimer ( )
{
	static UFunction* pFnSprintLoopTimer = NULL;

	if ( ! pFnSprintLoopTimer )
		pFnSprintLoopTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SprintLoopTimer" );

	AKFWeapon_execSprintLoopTimer_Parms SprintLoopTimer_Parms;

	this->ProcessEvent ( pFnSprintLoopTimer, &SprintLoopTimer_Parms, NULL );
};

// Function KFGame.KFWeapon.CheckBoltLockPostReload
// [0x00020102] 
// Parameters infos:

void AKFWeapon::CheckBoltLockPostReload ( )
{
	static UFunction* pFnCheckBoltLockPostReload = NULL;

	if ( ! pFnCheckBoltLockPostReload )
		pFnCheckBoltLockPostReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CheckBoltLockPostReload" );

	AKFWeapon_execCheckBoltLockPostReload_Parms CheckBoltLockPostReload_Parms;

	this->ProcessEvent ( pFnCheckBoltLockPostReload, &CheckBoltLockPostReload_Parms, NULL );
};

// Function KFGame.KFWeapon.PerformReload
// [0x00024102] 
// Parameters infos:

void AKFWeapon::PerformReload ( )
{
	static UFunction* pFnPerformReload = NULL;

	if ( ! pFnPerformReload )
		pFnPerformReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PerformReload" );

	AKFWeapon_execPerformReload_Parms PerformReload_Parms;

	this->ProcessEvent ( pFnPerformReload, &PerformReload_Parms, NULL );
};

// Function KFGame.KFWeapon.GetReloadAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetReloadAnimName ( )
{
	static UFunction* pFnGetReloadAnimName = NULL;

	if ( ! pFnGetReloadAnimName )
		pFnGetReloadAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetReloadAnimName" );

	AKFWeapon_execGetReloadAnimName_Parms GetReloadAnimName_Parms;

	this->ProcessEvent ( pFnGetReloadAnimName, &GetReloadAnimName_Parms, NULL );
};

// Function KFGame.KFWeapon.GetNextReloadStatus
// [0x00024102] 
// Parameters infos:

void AKFWeapon::GetNextReloadStatus ( )
{
	static UFunction* pFnGetNextReloadStatus = NULL;

	if ( ! pFnGetNextReloadStatus )
		pFnGetNextReloadStatus = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetNextReloadStatus" );

	AKFWeapon_execGetNextReloadStatus_Parms GetNextReloadStatus_Parms;

	this->ProcessEvent ( pFnGetNextReloadStatus, &GetNextReloadStatus_Parms, NULL );
};

// Function KFGame.KFWeapon.UseTacticalReload
// [0x00020102] 
// Parameters infos:

void AKFWeapon::UseTacticalReload ( )
{
	static UFunction* pFnUseTacticalReload = NULL;

	if ( ! pFnUseTacticalReload )
		pFnUseTacticalReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.UseTacticalReload" );

	AKFWeapon_execUseTacticalReload_Parms UseTacticalReload_Parms;

	this->ProcessEvent ( pFnUseTacticalReload, &UseTacticalReload_Parms, NULL );
};

// Function KFGame.KFWeapon.GetReloadRateScale
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetReloadRateScale ( )
{
	static UFunction* pFnGetReloadRateScale = NULL;

	if ( ! pFnGetReloadRateScale )
		pFnGetReloadRateScale = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetReloadRateScale" );

	AKFWeapon_execGetReloadRateScale_Parms GetReloadRateScale_Parms;

	this->ProcessEvent ( pFnGetReloadRateScale, &GetReloadRateScale_Parms, NULL );
};

// Function KFGame.KFWeapon.TimeWeaponReloading
// [0x00020102] 
// Parameters infos:

void AKFWeapon::TimeWeaponReloading ( )
{
	static UFunction* pFnTimeWeaponReloading = NULL;

	if ( ! pFnTimeWeaponReloading )
		pFnTimeWeaponReloading = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.TimeWeaponReloading" );

	AKFWeapon_execTimeWeaponReloading_Parms TimeWeaponReloading_Parms;

	this->ProcessEvent ( pFnTimeWeaponReloading, &TimeWeaponReloading_Parms, NULL );
};

// Function KFGame.KFWeapon.CanOverrideMagReload
// [0x00020102] 
// Parameters infos:

void AKFWeapon::CanOverrideMagReload ( )
{
	static UFunction* pFnCanOverrideMagReload = NULL;

	if ( ! pFnCanOverrideMagReload )
		pFnCanOverrideMagReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CanOverrideMagReload" );

	AKFWeapon_execCanOverrideMagReload_Parms CanOverrideMagReload_Parms;

	this->ProcessEvent ( pFnCanOverrideMagReload, &CanOverrideMagReload_Parms, NULL );
};

// Function KFGame.KFWeapon.ServerSendToReload
// [0x002200C2] 
// Parameters infos:

void AKFWeapon::ServerSendToReload ( )
{
	static UFunction* pFnServerSendToReload = NULL;

	if ( ! pFnServerSendToReload )
		pFnServerSendToReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerSendToReload" );

	AKFWeapon_execServerSendToReload_Parms ServerSendToReload_Parms;

	this->ProcessEvent ( pFnServerSendToReload, &ServerSendToReload_Parms, NULL );
};

// Function KFGame.KFWeapon.InitializeReload
// [0x00020102] 
// Parameters infos:

void AKFWeapon::InitializeReload ( )
{
	static UFunction* pFnInitializeReload = NULL;

	if ( ! pFnInitializeReload )
		pFnInitializeReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.InitializeReload" );

	AKFWeapon_execInitializeReload_Parms InitializeReload_Parms;

	this->ProcessEvent ( pFnInitializeReload, &InitializeReload_Parms, NULL );
};

// Function KFGame.KFWeapon.AbortReload
// [0x00020100] 
// Parameters infos:

void AKFWeapon::AbortReload ( )
{
	static UFunction* pFnAbortReload = NULL;

	if ( ! pFnAbortReload )
		pFnAbortReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AbortReload" );

	AKFWeapon_execAbortReload_Parms AbortReload_Parms;

	this->ProcessEvent ( pFnAbortReload, &AbortReload_Parms, NULL );
};

// Function KFGame.KFWeapon.ReloadComplete
// [0x00020100] 
// Parameters infos:

void AKFWeapon::ReloadComplete ( )
{
	static UFunction* pFnReloadComplete = NULL;

	if ( ! pFnReloadComplete )
		pFnReloadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ReloadComplete" );

	AKFWeapon_execReloadComplete_Parms ReloadComplete_Parms;

	this->ProcessEvent ( pFnReloadComplete, &ReloadComplete_Parms, NULL );
};

// Function KFGame.KFWeapon.ReloadAmmoTimer
// [0x00020100] 
// Parameters infos:

void AKFWeapon::ReloadAmmoTimer ( )
{
	static UFunction* pFnReloadAmmoTimer = NULL;

	if ( ! pFnReloadAmmoTimer )
		pFnReloadAmmoTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ReloadAmmoTimer" );

	AKFWeapon_execReloadAmmoTimer_Parms ReloadAmmoTimer_Parms;

	this->ProcessEvent ( pFnReloadAmmoTimer, &ReloadAmmoTimer_Parms, NULL );
};

// Function KFGame.KFWeapon.ReloadStatusTimer
// [0x00020100] 
// Parameters infos:

void AKFWeapon::ReloadStatusTimer ( )
{
	static UFunction* pFnReloadStatusTimer = NULL;

	if ( ! pFnReloadStatusTimer )
		pFnReloadStatusTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ReloadStatusTimer" );

	AKFWeapon_execReloadStatusTimer_Parms ReloadStatusTimer_Parms;

	this->ProcessEvent ( pFnReloadStatusTimer, &ReloadStatusTimer_Parms, NULL );
};

// Function KFGame.KFWeapon.GetGrenadeThrowAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetGrenadeThrowAnim ( )
{
	static UFunction* pFnGetGrenadeThrowAnim = NULL;

	if ( ! pFnGetGrenadeThrowAnim )
		pFnGetGrenadeThrowAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetGrenadeThrowAnim" );

	AKFWeapon_execGetGrenadeThrowAnim_Parms GetGrenadeThrowAnim_Parms;

	this->ProcessEvent ( pFnGetGrenadeThrowAnim, &GetGrenadeThrowAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayGrenadeThrow
// [0x00020102] 
// Parameters infos:

void AKFWeapon::PlayGrenadeThrow ( )
{
	static UFunction* pFnPlayGrenadeThrow = NULL;

	if ( ! pFnPlayGrenadeThrow )
		pFnPlayGrenadeThrow = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayGrenadeThrow" );

	AKFWeapon_execPlayGrenadeThrow_Parms PlayGrenadeThrow_Parms;

	this->ProcessEvent ( pFnPlayGrenadeThrow, &PlayGrenadeThrow_Parms, NULL );
};

// Function KFGame.KFWeapon.SetWeakZedGrabCooldownOnPawn
// [0x00020002] 
// Parameters infos:

void AKFWeapon::SetWeakZedGrabCooldownOnPawn ( )
{
	static UFunction* pFnSetWeakZedGrabCooldownOnPawn = NULL;

	if ( ! pFnSetWeakZedGrabCooldownOnPawn )
		pFnSetWeakZedGrabCooldownOnPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetWeakZedGrabCooldownOnPawn" );

	AKFWeapon_execSetWeakZedGrabCooldownOnPawn_Parms SetWeakZedGrabCooldownOnPawn_Parms;

	this->ProcessEvent ( pFnSetWeakZedGrabCooldownOnPawn, &SetWeakZedGrabCooldownOnPawn_Parms, NULL );
};

// Function KFGame.KFWeapon.ServerGotoGrenadeFiring
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeapon::ServerGotoGrenadeFiring ( )
{
	static UFunction* pFnServerGotoGrenadeFiring = NULL;

	if ( ! pFnServerGotoGrenadeFiring )
		pFnServerGotoGrenadeFiring = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerGotoGrenadeFiring" );

	AKFWeapon_execServerGotoGrenadeFiring_Parms ServerGotoGrenadeFiring_Parms;

	this->ProcessEvent ( pFnServerGotoGrenadeFiring, &ServerGotoGrenadeFiring_Parms, NULL );
};

// Function KFGame.KFWeapon.GetBurstAmount
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetBurstAmount ( )
{
	static UFunction* pFnGetBurstAmount = NULL;

	if ( ! pFnGetBurstAmount )
		pFnGetBurstAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetBurstAmount" );

	AKFWeapon_execGetBurstAmount_Parms GetBurstAmount_Parms;

	this->ProcessEvent ( pFnGetBurstAmount, &GetBurstAmount_Parms, NULL );
};

// Function KFGame.KFWeapon.TimeWeaponFiring
// [0x00020102] 
// Parameters infos:

void AKFWeapon::TimeWeaponFiring ( )
{
	static UFunction* pFnTimeWeaponFiring = NULL;

	if ( ! pFnTimeWeaponFiring )
		pFnTimeWeaponFiring = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.TimeWeaponFiring" );

	AKFWeapon_execTimeWeaponFiring_Parms TimeWeaponFiring_Parms;

	this->ProcessEvent ( pFnTimeWeaponFiring, &TimeWeaponFiring_Parms, NULL );
};

// Function KFGame.KFWeapon.FiringPutDownWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeapon::FiringPutDownWeapon ( )
{
	static UFunction* pFnFiringPutDownWeapon = NULL;

	if ( ! pFnFiringPutDownWeapon )
		pFnFiringPutDownWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.FiringPutDownWeapon" );

	AKFWeapon_execFiringPutDownWeapon_Parms FiringPutDownWeapon_Parms;

	this->ProcessEvent ( pFnFiringPutDownWeapon, &FiringPutDownWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.TryPutDown
// [0x00020102] 
// Parameters infos:

void AKFWeapon::TryPutDown ( )
{
	static UFunction* pFnTryPutDown = NULL;

	if ( ! pFnTryPutDown )
		pFnTryPutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.TryPutDown" );

	AKFWeapon_execTryPutDown_Parms TryPutDown_Parms;

	this->ProcessEvent ( pFnTryPutDown, &TryPutDown_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponPutDownAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetWeaponPutDownAnimName ( )
{
	static UFunction* pFnGetWeaponPutDownAnimName = NULL;

	if ( ! pFnGetWeaponPutDownAnimName )
		pFnGetWeaponPutDownAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponPutDownAnimName" );

	AKFWeapon_execGetWeaponPutDownAnimName_Parms GetWeaponPutDownAnimName_Parms;

	this->ProcessEvent ( pFnGetWeaponPutDownAnimName, &GetWeaponPutDownAnimName_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayWeaponPutDown
// [0x00020102] 
// Parameters infos:

void AKFWeapon::PlayWeaponPutDown ( )
{
	static UFunction* pFnPlayWeaponPutDown = NULL;

	if ( ! pFnPlayWeaponPutDown )
		pFnPlayWeaponPutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayWeaponPutDown" );

	AKFWeapon_execPlayWeaponPutDown_Parms PlayWeaponPutDown_Parms;

	this->ProcessEvent ( pFnPlayWeaponPutDown, &PlayWeaponPutDown_Parms, NULL );
};

// Function KFGame.KFWeapon.TimeWeaponPutDown
// [0x00020102] 
// Parameters infos:

void AKFWeapon::TimeWeaponPutDown ( )
{
	static UFunction* pFnTimeWeaponPutDown = NULL;

	if ( ! pFnTimeWeaponPutDown )
		pFnTimeWeaponPutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.TimeWeaponPutDown" );

	AKFWeapon_execTimeWeaponPutDown_Parms TimeWeaponPutDown_Parms;

	this->ProcessEvent ( pFnTimeWeaponPutDown, &TimeWeaponPutDown_Parms, NULL );
};

// Function KFGame.KFWeapon.CanSwitchWeapons
// [0x00020102] 
// Parameters infos:

void AKFWeapon::CanSwitchWeapons ( )
{
	static UFunction* pFnCanSwitchWeapons = NULL;

	if ( ! pFnCanSwitchWeapons )
		pFnCanSwitchWeapons = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CanSwitchWeapons" );

	AKFWeapon_execCanSwitchWeapons_Parms CanSwitchWeapons_Parms;

	this->ProcessEvent ( pFnCanSwitchWeapons, &CanSwitchWeapons_Parms, NULL );
};

// Function KFGame.KFWeapon.SetSimplePutDown
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SetSimplePutDown ( )
{
	static UFunction* pFnSetSimplePutDown = NULL;

	if ( ! pFnSetSimplePutDown )
		pFnSetSimplePutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetSimplePutDown" );

	AKFWeapon_execSetSimplePutDown_Parms SetSimplePutDown_Parms;

	this->ProcessEvent ( pFnSetSimplePutDown, &SetSimplePutDown_Parms, NULL );
};

// Function KFGame.KFWeapon.GetEquipAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetEquipAnimName ( )
{
	static UFunction* pFnGetEquipAnimName = NULL;

	if ( ! pFnGetEquipAnimName )
		pFnGetEquipAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetEquipAnimName" );

	AKFWeapon_execGetEquipAnimName_Parms GetEquipAnimName_Parms;

	this->ProcessEvent ( pFnGetEquipAnimName, &GetEquipAnimName_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayWeaponEquip
// [0x00020102] 
// Parameters infos:

void AKFWeapon::PlayWeaponEquip ( )
{
	static UFunction* pFnPlayWeaponEquip = NULL;

	if ( ! pFnPlayWeaponEquip )
		pFnPlayWeaponEquip = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayWeaponEquip" );

	AKFWeapon_execPlayWeaponEquip_Parms PlayWeaponEquip_Parms;

	this->ProcessEvent ( pFnPlayWeaponEquip, &PlayWeaponEquip_Parms, NULL );
};

// Function KFGame.KFWeapon.WeaponEquipped
// [0x00020100] 
// Parameters infos:

void AKFWeapon::WeaponEquipped ( )
{
	static UFunction* pFnWeaponEquipped = NULL;

	if ( ! pFnWeaponEquipped )
		pFnWeaponEquipped = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.WeaponEquipped" );

	AKFWeapon_execWeaponEquipped_Parms WeaponEquipped_Parms;

	this->ProcessEvent ( pFnWeaponEquipped, &WeaponEquipped_Parms, NULL );
};

// Function KFGame.KFWeapon.TimeWeaponEquipping
// [0x00020102] 
// Parameters infos:

void AKFWeapon::TimeWeaponEquipping ( )
{
	static UFunction* pFnTimeWeaponEquipping = NULL;

	if ( ! pFnTimeWeaponEquipping )
		pFnTimeWeaponEquipping = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.TimeWeaponEquipping" );

	AKFWeapon_execTimeWeaponEquipping_Parms TimeWeaponEquipping_Parms;

	this->ProcessEvent ( pFnTimeWeaponEquipping, &TimeWeaponEquipping_Parms, NULL );
};

// Function KFGame.KFWeapon.CheckPendingIronsights
// [0x00020102] 
// Parameters infos:

void AKFWeapon::CheckPendingIronsights ( )
{
	static UFunction* pFnCheckPendingIronsights = NULL;

	if ( ! pFnCheckPendingIronsights )
		pFnCheckPendingIronsights = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CheckPendingIronsights" );

	AKFWeapon_execCheckPendingIronsights_Parms CheckPendingIronsights_Parms;

	this->ProcessEvent ( pFnCheckPendingIronsights, &CheckPendingIronsights_Parms, NULL );
};

// Function KFGame.KFWeapon.ANIMNOTIFY_EnableAdditiveBob
// [0x00020100] 
// Parameters infos:

void AKFWeapon::ANIMNOTIFY_EnableAdditiveBob ( )
{
	static UFunction* pFnANIMNOTIFY_EnableAdditiveBob = NULL;

	if ( ! pFnANIMNOTIFY_EnableAdditiveBob )
		pFnANIMNOTIFY_EnableAdditiveBob = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ANIMNOTIFY_EnableAdditiveBob" );

	AKFWeapon_execANIMNOTIFY_EnableAdditiveBob_Parms ANIMNOTIFY_EnableAdditiveBob_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_EnableAdditiveBob, &ANIMNOTIFY_EnableAdditiveBob_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayIdleFidgetAnim
// [0x00020100] 
// Parameters infos:

void AKFWeapon::PlayIdleFidgetAnim ( )
{
	static UFunction* pFnPlayIdleFidgetAnim = NULL;

	if ( ! pFnPlayIdleFidgetAnim )
		pFnPlayIdleFidgetAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayIdleFidgetAnim" );

	AKFWeapon_execPlayIdleFidgetAnim_Parms PlayIdleFidgetAnim_Parms;

	this->ProcessEvent ( pFnPlayIdleFidgetAnim, &PlayIdleFidgetAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.CanPlayIdleFidget
// [0x00024100] 
// Parameters infos:

void AKFWeapon::CanPlayIdleFidget ( )
{
	static UFunction* pFnCanPlayIdleFidget = NULL;

	if ( ! pFnCanPlayIdleFidget )
		pFnCanPlayIdleFidget = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CanPlayIdleFidget" );

	AKFWeapon_execCanPlayIdleFidget_Parms CanPlayIdleFidget_Parms;

	this->ProcessEvent ( pFnCanPlayIdleFidget, &CanPlayIdleFidget_Parms, NULL );
};

// Function KFGame.KFWeapon.IdleFidgetTimer
// [0x00020100] 
// Parameters infos:

void AKFWeapon::IdleFidgetTimer ( )
{
	static UFunction* pFnIdleFidgetTimer = NULL;

	if ( ! pFnIdleFidgetTimer )
		pFnIdleFidgetTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.IdleFidgetTimer" );

	AKFWeapon_execIdleFidgetTimer_Parms IdleFidgetTimer_Parms;

	this->ProcessEvent ( pFnIdleFidgetTimer, &IdleFidgetTimer_Parms, NULL );
};

// Function KFGame.KFWeapon.StartIdleFidgetTimer
// [0x00020100] 
// Parameters infos:

void AKFWeapon::StartIdleFidgetTimer ( )
{
	static UFunction* pFnStartIdleFidgetTimer = NULL;

	if ( ! pFnStartIdleFidgetTimer )
		pFnStartIdleFidgetTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StartIdleFidgetTimer" );

	AKFWeapon_execStartIdleFidgetTimer_Parms StartIdleFidgetTimer_Parms;

	this->ProcessEvent ( pFnStartIdleFidgetTimer, &StartIdleFidgetTimer_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayIdleAnim
// [0x00020100] 
// Parameters infos:

void AKFWeapon::PlayIdleAnim ( )
{
	static UFunction* pFnPlayIdleAnim = NULL;

	if ( ! pFnPlayIdleAnim )
		pFnPlayIdleAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayIdleAnim" );

	AKFWeapon_execPlayIdleAnim_Parms PlayIdleAnim_Parms;

	this->ProcessEvent ( pFnPlayIdleAnim, &PlayIdleAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.Activate
// [0x00020102] 
// Parameters infos:

void AKFWeapon::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.Activate" );

	AKFWeapon_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFWeapon.ServerSyncReload
// [0x002200C2] 
// Parameters infos:

void AKFWeapon::ServerSyncReload ( )
{
	static UFunction* pFnServerSyncReload = NULL;

	if ( ! pFnServerSyncReload )
		pFnServerSyncReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerSyncReload" );

	AKFWeapon_execServerSyncReload_Parms ServerSyncReload_Parms;

	this->ProcessEvent ( pFnServerSyncReload, &ServerSyncReload_Parms, NULL );
};

// Function KFGame.KFWeapon.GetUpgradeHealRechargeMod
// [0x00022102] 
// Parameters infos:

void AKFWeapon::GetUpgradeHealRechargeMod ( )
{
	static UFunction* pFnGetUpgradeHealRechargeMod = NULL;

	if ( ! pFnGetUpgradeHealRechargeMod )
		pFnGetUpgradeHealRechargeMod = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetUpgradeHealRechargeMod" );

	AKFWeapon_execGetUpgradeHealRechargeMod_Parms GetUpgradeHealRechargeMod_Parms;

	this->ProcessEvent ( pFnGetUpgradeHealRechargeMod, &GetUpgradeHealRechargeMod_Parms, NULL );
};

// Function KFGame.KFWeapon.GetUpgradeHealMod
// [0x00022102] 
// Parameters infos:

void AKFWeapon::GetUpgradeHealMod ( )
{
	static UFunction* pFnGetUpgradeHealMod = NULL;

	if ( ! pFnGetUpgradeHealMod )
		pFnGetUpgradeHealMod = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetUpgradeHealMod" );

	AKFWeapon_execGetUpgradeHealMod_Parms GetUpgradeHealMod_Parms;

	this->ProcessEvent ( pFnGetUpgradeHealMod, &GetUpgradeHealMod_Parms, NULL );
};

// Function KFGame.KFWeapon.GetUpgradeDamageMod
// [0x00022102] 
// Parameters infos:

void AKFWeapon::GetUpgradeDamageMod ( )
{
	static UFunction* pFnGetUpgradeDamageMod = NULL;

	if ( ! pFnGetUpgradeDamageMod )
		pFnGetUpgradeDamageMod = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetUpgradeDamageMod" );

	AKFWeapon_execGetUpgradeDamageMod_Parms GetUpgradeDamageMod_Parms;

	this->ProcessEvent ( pFnGetUpgradeDamageMod, &GetUpgradeDamageMod_Parms, NULL );
};

// Function KFGame.KFWeapon.GetUpgradeWeight
// [0x00022102] 
// Parameters infos:

void AKFWeapon::GetUpgradeWeight ( )
{
	static UFunction* pFnGetUpgradeWeight = NULL;

	if ( ! pFnGetUpgradeWeight )
		pFnGetUpgradeWeight = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetUpgradeWeight" );

	AKFWeapon_execGetUpgradeWeight_Parms GetUpgradeWeight_Parms;

	this->ProcessEvent ( pFnGetUpgradeWeight, &GetUpgradeWeight_Parms, NULL );
};

// Function KFGame.KFWeapon.GetModifiedWeightValue
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetModifiedWeightValue ( )
{
	static UFunction* pFnGetModifiedWeightValue = NULL;

	if ( ! pFnGetModifiedWeightValue )
		pFnGetModifiedWeightValue = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetModifiedWeightValue" );

	AKFWeapon_execGetModifiedWeightValue_Parms GetModifiedWeightValue_Parms;

	this->ProcessEvent ( pFnGetModifiedWeightValue, &GetModifiedWeightValue_Parms, NULL );
};

// Function KFGame.KFWeapon.SetWeaponUpgradeLevel
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SetWeaponUpgradeLevel ( )
{
	static UFunction* pFnSetWeaponUpgradeLevel = NULL;

	if ( ! pFnSetWeaponUpgradeLevel )
		pFnSetWeaponUpgradeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetWeaponUpgradeLevel" );

	AKFWeapon_execSetWeaponUpgradeLevel_Parms SetWeaponUpgradeLevel_Parms;

	this->ProcessEvent ( pFnSetWeaponUpgradeLevel, &SetWeaponUpgradeLevel_Parms, NULL );
};

// Function KFGame.KFWeapon.UpgradeWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeapon::UpgradeWeapon ( )
{
	static UFunction* pFnUpgradeWeapon = NULL;

	if ( ! pFnUpgradeWeapon )
		pFnUpgradeWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.UpgradeWeapon" );

	AKFWeapon_execUpgradeWeapon_Parms UpgradeWeapon_Parms;

	this->ProcessEvent ( pFnUpgradeWeapon, &UpgradeWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.CanUpgradeWeapon
// [0x00020002] 
// Parameters infos:

void AKFWeapon::CanUpgradeWeapon ( )
{
	static UFunction* pFnCanUpgradeWeapon = NULL;

	if ( ! pFnCanUpgradeWeapon )
		pFnCanUpgradeWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CanUpgradeWeapon" );

	AKFWeapon_execCanUpgradeWeapon_Parms CanUpgradeWeapon_Parms;

	this->ProcessEvent ( pFnCanUpgradeWeapon, &CanUpgradeWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.NotifyEndState
// [0x00020102] 
// Parameters infos:

void AKFWeapon::NotifyEndState ( )
{
	static UFunction* pFnNotifyEndState = NULL;

	if ( ! pFnNotifyEndState )
		pFnNotifyEndState = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.NotifyEndState" );

	AKFWeapon_execNotifyEndState_Parms NotifyEndState_Parms;

	this->ProcessEvent ( pFnNotifyEndState, &NotifyEndState_Parms, NULL );
};

// Function KFGame.KFWeapon.NotifyBeginState
// [0x00020102] 
// Parameters infos:

void AKFWeapon::NotifyBeginState ( )
{
	static UFunction* pFnNotifyBeginState = NULL;

	if ( ! pFnNotifyBeginState )
		pFnNotifyBeginState = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.NotifyBeginState" );

	AKFWeapon_execNotifyBeginState_Parms NotifyBeginState_Parms;

	this->ProcessEvent ( pFnNotifyBeginState, &NotifyBeginState_Parms, NULL );
};

// Function KFGame.KFWeapon.UpdateWeaponAttachmentAnimRate
// [0x00020102] 
// Parameters infos:

void AKFWeapon::UpdateWeaponAttachmentAnimRate ( )
{
	static UFunction* pFnUpdateWeaponAttachmentAnimRate = NULL;

	if ( ! pFnUpdateWeaponAttachmentAnimRate )
		pFnUpdateWeaponAttachmentAnimRate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.UpdateWeaponAttachmentAnimRate" );

	AKFWeapon_execUpdateWeaponAttachmentAnimRate_Parms UpdateWeaponAttachmentAnimRate_Parms;

	this->ProcessEvent ( pFnUpdateWeaponAttachmentAnimRate, &UpdateWeaponAttachmentAnimRate_Parms, NULL );
};

// Function KFGame.KFWeapon.GetThirdPersonAnimRate
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetThirdPersonAnimRate ( )
{
	static UFunction* pFnGetThirdPersonAnimRate = NULL;

	if ( ! pFnGetThirdPersonAnimRate )
		pFnGetThirdPersonAnimRate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetThirdPersonAnimRate" );

	AKFWeapon_execGetThirdPersonAnimRate_Parms GetThirdPersonAnimRate_Parms;

	this->ProcessEvent ( pFnGetThirdPersonAnimRate, &GetThirdPersonAnimRate_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponStateId
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetWeaponStateId ( )
{
	static UFunction* pFnGetWeaponStateId = NULL;

	if ( ! pFnGetWeaponStateId )
		pFnGetWeaponStateId = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponStateId" );

	AKFWeapon_execGetWeaponStateId_Parms GetWeaponStateId_Parms;

	this->ProcessEvent ( pFnGetWeaponStateId, &GetWeaponStateId_Parms, NULL );
};

// Function KFGame.KFWeapon.IsMultiPerkWeapn
// [0x00022102] 
// Parameters infos:

void AKFWeapon::IsMultiPerkWeapn ( )
{
	static UFunction* pFnIsMultiPerkWeapn = NULL;

	if ( ! pFnIsMultiPerkWeapn )
		pFnIsMultiPerkWeapn = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.IsMultiPerkWeapn" );

	AKFWeapon_execIsMultiPerkWeapn_Parms IsMultiPerkWeapn_Parms;

	this->ProcessEvent ( pFnIsMultiPerkWeapn, &IsMultiPerkWeapn_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponPerkClassByIndex
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetWeaponPerkClassByIndex ( )
{
	static UFunction* pFnGetWeaponPerkClassByIndex = NULL;

	if ( ! pFnGetWeaponPerkClassByIndex )
		pFnGetWeaponPerkClassByIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponPerkClassByIndex" );

	AKFWeapon_eventGetWeaponPerkClassByIndex_Parms GetWeaponPerkClassByIndex_Parms;

	this->ProcessEvent ( pFnGetWeaponPerkClassByIndex, &GetWeaponPerkClassByIndex_Parms, NULL );
};

// Function KFGame.KFWeapon.GetAssociatedPerkClasses
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetAssociatedPerkClasses ( )
{
	static UFunction* pFnGetAssociatedPerkClasses = NULL;

	if ( ! pFnGetAssociatedPerkClasses )
		pFnGetAssociatedPerkClasses = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetAssociatedPerkClasses" );

	AKFWeapon_eventGetAssociatedPerkClasses_Parms GetAssociatedPerkClasses_Parms;

	this->ProcessEvent ( pFnGetAssociatedPerkClasses, &GetAssociatedPerkClasses_Parms, NULL );
};

// Function KFGame.KFWeapon.AllowedForAllPerks
// [0x00022102] 
// Parameters infos:

void AKFWeapon::AllowedForAllPerks ( )
{
	static UFunction* pFnAllowedForAllPerks = NULL;

	if ( ! pFnAllowedForAllPerks )
		pFnAllowedForAllPerks = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AllowedForAllPerks" );

	AKFWeapon_execAllowedForAllPerks_Parms AllowedForAllPerks_Parms;

	this->ProcessEvent ( pFnAllowedForAllPerks, &AllowedForAllPerks_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponPerkClass
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetWeaponPerkClass ( )
{
	static UFunction* pFnGetWeaponPerkClass = NULL;

	if ( ! pFnGetWeaponPerkClass )
		pFnGetWeaponPerkClass = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponPerkClass" );

	AKFWeapon_eventGetWeaponPerkClass_Parms GetWeaponPerkClass_Parms;

	this->ProcessEvent ( pFnGetWeaponPerkClass, &GetWeaponPerkClass_Parms, NULL );
};

// Function KFGame.KFWeapon.DisplayDebug
// [0x00C20102] 
// Parameters infos:

void AKFWeapon::DisplayDebug ( )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.DisplayDebug" );

	AKFWeapon_execDisplayDebug_Parms DisplayDebug_Parms;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponDebug
// [0x00420102] 
// Parameters infos:

void AKFWeapon::GetWeaponDebug ( )
{
	static UFunction* pFnGetWeaponDebug = NULL;

	if ( ! pFnGetWeaponDebug )
		pFnGetWeaponDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponDebug" );

	AKFWeapon_execGetWeaponDebug_Parms GetWeaponDebug_Parms;

	this->ProcessEvent ( pFnGetWeaponDebug, &GetWeaponDebug_Parms, NULL );
};

// Function KFGame.KFWeapon.SetMeshLightingChannels
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SetMeshLightingChannels ( )
{
	static UFunction* pFnSetMeshLightingChannels = NULL;

	if ( ! pFnSetMeshLightingChannels )
		pFnSetMeshLightingChannels = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetMeshLightingChannels" );

	AKFWeapon_execSetMeshLightingChannels_Parms SetMeshLightingChannels_Parms;

	this->ProcessEvent ( pFnSetMeshLightingChannels, &SetMeshLightingChannels_Parms, NULL );
};

// Function KFGame.KFWeapon.ServerPlayDryFireSound
// [0x002800C2] 
// Parameters infos:

void AKFWeapon::ServerPlayDryFireSound ( )
{
	static UFunction* pFnServerPlayDryFireSound = NULL;

	if ( ! pFnServerPlayDryFireSound )
		pFnServerPlayDryFireSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerPlayDryFireSound" );

	AKFWeapon_execServerPlayDryFireSound_Parms ServerPlayDryFireSound_Parms;

	this->ProcessEvent ( pFnServerPlayDryFireSound, &ServerPlayDryFireSound_Parms, NULL );
};

// Function KFGame.KFWeapon.ShouldAutoReloadGunslinger
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ShouldAutoReloadGunslinger ( )
{
	static UFunction* pFnShouldAutoReloadGunslinger = NULL;

	if ( ! pFnShouldAutoReloadGunslinger )
		pFnShouldAutoReloadGunslinger = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ShouldAutoReloadGunslinger" );

	AKFWeapon_execShouldAutoReloadGunslinger_Parms ShouldAutoReloadGunslinger_Parms;

	this->ProcessEvent ( pFnShouldAutoReloadGunslinger, &ShouldAutoReloadGunslinger_Parms, NULL );
};

// Function KFGame.KFWeapon.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ShouldAutoReload" );

	AKFWeapon_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function KFGame.KFWeapon.CanReload
// [0x00024102] 
// Parameters infos:

void AKFWeapon::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CanReload" );

	AKFWeapon_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );
};

// Function KFGame.KFWeapon.ForceReload
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ForceReload ( )
{
	static UFunction* pFnForceReload = NULL;

	if ( ! pFnForceReload )
		pFnForceReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ForceReload" );

	AKFWeapon_execForceReload_Parms ForceReload_Parms;

	this->ProcessEvent ( pFnForceReload, &ForceReload_Parms, NULL );
};

// Function KFGame.KFWeapon.GetSecondaryAmmoForHUD
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetSecondaryAmmoForHUD ( )
{
	static UFunction* pFnGetSecondaryAmmoForHUD = NULL;

	if ( ! pFnGetSecondaryAmmoForHUD )
		pFnGetSecondaryAmmoForHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetSecondaryAmmoForHUD" );

	AKFWeapon_execGetSecondaryAmmoForHUD_Parms GetSecondaryAmmoForHUD_Parms;

	this->ProcessEvent ( pFnGetSecondaryAmmoForHUD, &GetSecondaryAmmoForHUD_Parms, NULL );
};

// Function KFGame.KFWeapon.GetSpareAmmoForHUD
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetSpareAmmoForHUD ( )
{
	static UFunction* pFnGetSpareAmmoForHUD = NULL;

	if ( ! pFnGetSpareAmmoForHUD )
		pFnGetSpareAmmoForHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetSpareAmmoForHUD" );

	AKFWeapon_execGetSpareAmmoForHUD_Parms GetSpareAmmoForHUD_Parms;

	this->ProcessEvent ( pFnGetSpareAmmoForHUD, &GetSpareAmmoForHUD_Parms, NULL );
};

// Function KFGame.KFWeapon.GetAmmoPercentage
// [0x00024102] 
// Parameters infos:

void AKFWeapon::GetAmmoPercentage ( )
{
	static UFunction* pFnGetAmmoPercentage = NULL;

	if ( ! pFnGetAmmoPercentage )
		pFnGetAmmoPercentage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetAmmoPercentage" );

	AKFWeapon_execGetAmmoPercentage_Parms GetAmmoPercentage_Parms;

	this->ProcessEvent ( pFnGetAmmoPercentage, &GetAmmoPercentage_Parms, NULL );
};

// Function KFGame.KFWeapon.GetMissingSpareAmmoAmount
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetMissingSpareAmmoAmount ( )
{
	static UFunction* pFnGetMissingSpareAmmoAmount = NULL;

	if ( ! pFnGetMissingSpareAmmoAmount )
		pFnGetMissingSpareAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetMissingSpareAmmoAmount" );

	AKFWeapon_eventGetMissingSpareAmmoAmount_Parms GetMissingSpareAmmoAmount_Parms;

	this->ProcessEvent ( pFnGetMissingSpareAmmoAmount, &GetMissingSpareAmmoAmount_Parms, NULL );
};

// Function KFGame.KFWeapon.GetMaxAmmoAmount
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetMaxAmmoAmount ( )
{
	static UFunction* pFnGetMaxAmmoAmount = NULL;

	if ( ! pFnGetMaxAmmoAmount )
		pFnGetMaxAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetMaxAmmoAmount" );

	AKFWeapon_eventGetMaxAmmoAmount_Parms GetMaxAmmoAmount_Parms;

	this->ProcessEvent ( pFnGetMaxAmmoAmount, &GetMaxAmmoAmount_Parms, NULL );
};

// Function KFGame.KFWeapon.GetTotalAmmoAmount
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetTotalAmmoAmount ( )
{
	static UFunction* pFnGetTotalAmmoAmount = NULL;

	if ( ! pFnGetTotalAmmoAmount )
		pFnGetTotalAmmoAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetTotalAmmoAmount" );

	AKFWeapon_eventGetTotalAmmoAmount_Parms GetTotalAmmoAmount_Parms;

	this->ProcessEvent ( pFnGetTotalAmmoAmount, &GetTotalAmmoAmount_Parms, NULL );
};

// Function KFGame.KFWeapon.HasSpareAmmo
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventHasSpareAmmo ( )
{
	static UFunction* pFnHasSpareAmmo = NULL;

	if ( ! pFnHasSpareAmmo )
		pFnHasSpareAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HasSpareAmmo" );

	AKFWeapon_eventHasSpareAmmo_Parms HasSpareAmmo_Parms;

	this->ProcessEvent ( pFnHasSpareAmmo, &HasSpareAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.HasAnyAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeapon::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HasAnyAmmo" );

	AKFWeapon_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.HasAmmo
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventHasAmmo ( )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HasAmmo" );

	AKFWeapon_eventHasAmmo_Parms HasAmmo_Parms;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.NotifyHUDofWeapon
// [0x01020142] 
// Parameters infos:

void AKFWeapon::NotifyHUDofWeapon ( )
{
	static UFunction* pFnNotifyHUDofWeapon = NULL;

	if ( ! pFnNotifyHUDofWeapon )
		pFnNotifyHUDofWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.NotifyHUDofWeapon" );

	AKFWeapon_execNotifyHUDofWeapon_Parms NotifyHUDofWeapon_Parms;

	this->ProcessEvent ( pFnNotifyHUDofWeapon, &NotifyHUDofWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.ClientForceSecondaryAmmoUpdate
// [0x010201C2] 
// Parameters infos:

void AKFWeapon::ClientForceSecondaryAmmoUpdate ( )
{
	static UFunction* pFnClientForceSecondaryAmmoUpdate = NULL;

	if ( ! pFnClientForceSecondaryAmmoUpdate )
		pFnClientForceSecondaryAmmoUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ClientForceSecondaryAmmoUpdate" );

	AKFWeapon_execClientForceSecondaryAmmoUpdate_Parms ClientForceSecondaryAmmoUpdate_Parms;

	this->ProcessEvent ( pFnClientForceSecondaryAmmoUpdate, &ClientForceSecondaryAmmoUpdate_Parms, NULL );
};

// Function KFGame.KFWeapon.ClientForceAmmoUpdate
// [0x010241C2] 
// Parameters infos:

void AKFWeapon::ClientForceAmmoUpdate ( )
{
	static UFunction* pFnClientForceAmmoUpdate = NULL;

	if ( ! pFnClientForceAmmoUpdate )
		pFnClientForceAmmoUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ClientForceAmmoUpdate" );

	AKFWeapon_execClientForceAmmoUpdate_Parms ClientForceAmmoUpdate_Parms;

	this->ProcessEvent ( pFnClientForceAmmoUpdate, &ClientForceAmmoUpdate_Parms, NULL );
};

// Function KFGame.KFWeapon.AddSecondaryAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeapon::AddSecondaryAmmo ( )
{
	static UFunction* pFnAddSecondaryAmmo = NULL;

	if ( ! pFnAddSecondaryAmmo )
		pFnAddSecondaryAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AddSecondaryAmmo" );

	AKFWeapon_execAddSecondaryAmmo_Parms AddSecondaryAmmo_Parms;

	this->ProcessEvent ( pFnAddSecondaryAmmo, &AddSecondaryAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.AddTransactionAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeapon::AddTransactionAmmo ( )
{
	static UFunction* pFnAddTransactionAmmo = NULL;

	if ( ! pFnAddTransactionAmmo )
		pFnAddTransactionAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AddTransactionAmmo" );

	AKFWeapon_execAddTransactionAmmo_Parms AddTransactionAmmo_Parms;

	this->ProcessEvent ( pFnAddTransactionAmmo, &AddTransactionAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.AddAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeapon::AddAmmo ( )
{
	static UFunction* pFnAddAmmo = NULL;

	if ( ! pFnAddAmmo )
		pFnAddAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AddAmmo" );

	AKFWeapon_execAddAmmo_Parms AddAmmo_Parms;

	this->ProcessEvent ( pFnAddAmmo, &AddAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.ConsumeAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ConsumeAmmo" );

	AKFWeapon_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.ReInitializeAmmoCounts
// [0x00020002] 
// Parameters infos:

void AKFWeapon::ReInitializeAmmoCounts ( )
{
	static UFunction* pFnReInitializeAmmoCounts = NULL;

	if ( ! pFnReInitializeAmmoCounts )
		pFnReInitializeAmmoCounts = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ReInitializeAmmoCounts" );

	AKFWeapon_execReInitializeAmmoCounts_Parms ReInitializeAmmoCounts_Parms;

	this->ProcessEvent ( pFnReInitializeAmmoCounts, &ReInitializeAmmoCounts_Parms, NULL );
};

// Function KFGame.KFWeapon.InitializeAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeapon::InitializeAmmo ( )
{
	static UFunction* pFnInitializeAmmo = NULL;

	if ( ! pFnInitializeAmmo )
		pFnInitializeAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.InitializeAmmo" );

	AKFWeapon_execInitializeAmmo_Parms InitializeAmmo_Parms;

	this->ProcessEvent ( pFnInitializeAmmo, &InitializeAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.CanRefillSecondaryAmmo
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventCanRefillSecondaryAmmo ( )
{
	static UFunction* pFnCanRefillSecondaryAmmo = NULL;

	if ( ! pFnCanRefillSecondaryAmmo )
		pFnCanRefillSecondaryAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CanRefillSecondaryAmmo" );

	AKFWeapon_eventCanRefillSecondaryAmmo_Parms CanRefillSecondaryAmmo_Parms;

	this->ProcessEvent ( pFnCanRefillSecondaryAmmo, &CanRefillSecondaryAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.UsesSecondaryAmmo
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventUsesSecondaryAmmo ( )
{
	static UFunction* pFnUsesSecondaryAmmo = NULL;

	if ( ! pFnUsesSecondaryAmmo )
		pFnUsesSecondaryAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.UsesSecondaryAmmo" );

	AKFWeapon_eventUsesSecondaryAmmo_Parms UsesSecondaryAmmo_Parms;

	this->ProcessEvent ( pFnUsesSecondaryAmmo, &UsesSecondaryAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.UsesAmmo
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventUsesAmmo ( )
{
	static UFunction* pFnUsesAmmo = NULL;

	if ( ! pFnUsesAmmo )
		pFnUsesAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.UsesAmmo" );

	AKFWeapon_eventUsesAmmo_Parms UsesAmmo_Parms;

	this->ProcessEvent ( pFnUsesAmmo, &UsesAmmo_Parms, NULL );
};

// Function KFGame.KFWeapon.GetAmmoType
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetAmmoType ( )
{
	static UFunction* pFnGetAmmoType = NULL;

	if ( ! pFnGetAmmoType )
		pFnGetAmmoType = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetAmmoType" );

	AKFWeapon_execGetAmmoType_Parms GetAmmoType_Parms;

	this->ProcessEvent ( pFnGetAmmoType, &GetAmmoType_Parms, NULL );
};

// Function KFGame.KFWeapon.RecieveClientImpactList
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventRecieveClientImpactList ( )
{
	static UFunction* pFnRecieveClientImpactList = NULL;

	if ( ! pFnRecieveClientImpactList )
		pFnRecieveClientImpactList = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.RecieveClientImpactList" );

	AKFWeapon_eventRecieveClientImpactList_Parms RecieveClientImpactList_Parms;

	this->ProcessEvent ( pFnRecieveClientImpactList, &RecieveClientImpactList_Parms, NULL );
};

// Function KFGame.KFWeapon.HandleClientProjectileExplosion
// [0x00020102] 
// Parameters infos:

void AKFWeapon::HandleClientProjectileExplosion ( )
{
	static UFunction* pFnHandleClientProjectileExplosion = NULL;

	if ( ! pFnHandleClientProjectileExplosion )
		pFnHandleClientProjectileExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HandleClientProjectileExplosion" );

	AKFWeapon_execHandleClientProjectileExplosion_Parms HandleClientProjectileExplosion_Parms;

	this->ProcessEvent ( pFnHandleClientProjectileExplosion, &HandleClientProjectileExplosion_Parms, NULL );
};

// Function KFGame.KFWeapon.RecieveClientProjectileExplosion
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventRecieveClientProjectileExplosion ( )
{
	static UFunction* pFnRecieveClientProjectileExplosion = NULL;

	if ( ! pFnRecieveClientProjectileExplosion )
		pFnRecieveClientProjectileExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.RecieveClientProjectileExplosion" );

	AKFWeapon_eventRecieveClientProjectileExplosion_Parms RecieveClientProjectileExplosion_Parms;

	this->ProcessEvent ( pFnRecieveClientProjectileExplosion, &RecieveClientProjectileExplosion_Parms, NULL );
};

// Function KFGame.KFWeapon.RecieveClientImpact
// [0x00424802] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventRecieveClientImpact ( )
{
	static UFunction* pFnRecieveClientImpact = NULL;

	if ( ! pFnRecieveClientImpact )
		pFnRecieveClientImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.RecieveClientImpact" );

	AKFWeapon_eventRecieveClientImpact_Parms RecieveClientImpact_Parms;

	this->ProcessEvent ( pFnRecieveClientImpact, &RecieveClientImpact_Parms, NULL );
};

// Function KFGame.KFWeapon.InstantFireClient
// [0x00820102] 
// Parameters infos:

void AKFWeapon::InstantFireClient ( )
{
	static UFunction* pFnInstantFireClient = NULL;

	if ( ! pFnInstantFireClient )
		pFnInstantFireClient = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.InstantFireClient" );

	AKFWeapon_execInstantFireClient_Parms InstantFireClient_Parms;

	this->ProcessEvent ( pFnInstantFireClient, &InstantFireClient_Parms, NULL );
};

// Function KFGame.KFWeapon.InstantFireClient_AddImpacts
// [0x00420100] 
// Parameters infos:

void AKFWeapon::InstantFireClient_AddImpacts ( )
{
	static UFunction* pFnInstantFireClient_AddImpacts = NULL;

	if ( ! pFnInstantFireClient_AddImpacts )
		pFnInstantFireClient_AddImpacts = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.InstantFireClient_AddImpacts" );

	AKFWeapon_execInstantFireClient_AddImpacts_Parms InstantFireClient_AddImpacts_Parms;

	this->ProcessEvent ( pFnInstantFireClient_AddImpacts, &InstantFireClient_AddImpacts_Parms, NULL );
};

// Function KFGame.KFWeapon.GetSafeStartTraceLocation
// [0x00080500] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::GetSafeStartTraceLocation ( )
{
	static UFunction* pFnGetSafeStartTraceLocation = NULL;

	if ( ! pFnGetSafeStartTraceLocation )
		pFnGetSafeStartTraceLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetSafeStartTraceLocation" );

	AKFWeapon_execGetSafeStartTraceLocation_Parms GetSafeStartTraceLocation_Parms;

	pFnGetSafeStartTraceLocation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSafeStartTraceLocation, &GetSafeStartTraceLocation_Parms, NULL );

	pFnGetSafeStartTraceLocation->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.SendClientFragmentImpact
// [0x00480500] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::SendClientFragmentImpact ( )
{
	static UFunction* pFnSendClientFragmentImpact = NULL;

	if ( ! pFnSendClientFragmentImpact )
		pFnSendClientFragmentImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SendClientFragmentImpact" );

	AKFWeapon_execSendClientFragmentImpact_Parms SendClientFragmentImpact_Parms;

	pFnSendClientFragmentImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendClientFragmentImpact, &SendClientFragmentImpact_Parms, NULL );

	pFnSendClientFragmentImpact->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.SendClientProjectileExplosion
// [0x00080500] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::SendClientProjectileExplosion ( )
{
	static UFunction* pFnSendClientProjectileExplosion = NULL;

	if ( ! pFnSendClientProjectileExplosion )
		pFnSendClientProjectileExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SendClientProjectileExplosion" );

	AKFWeapon_execSendClientProjectileExplosion_Parms SendClientProjectileExplosion_Parms;

	pFnSendClientProjectileExplosion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendClientProjectileExplosion, &SendClientProjectileExplosion_Parms, NULL );

	pFnSendClientProjectileExplosion->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.SendClientProjectileImpact
// [0x00480500] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::SendClientProjectileImpact ( )
{
	static UFunction* pFnSendClientProjectileImpact = NULL;

	if ( ! pFnSendClientProjectileImpact )
		pFnSendClientProjectileImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SendClientProjectileImpact" );

	AKFWeapon_execSendClientProjectileImpact_Parms SendClientProjectileImpact_Parms;

	pFnSendClientProjectileImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendClientProjectileImpact, &SendClientProjectileImpact_Parms, NULL );

	pFnSendClientProjectileImpact->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.SendClientImpactList
// [0x00080500] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::SendClientImpactList ( )
{
	static UFunction* pFnSendClientImpactList = NULL;

	if ( ! pFnSendClientImpactList )
		pFnSendClientImpactList = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SendClientImpactList" );

	AKFWeapon_execSendClientImpactList_Parms SendClientImpactList_Parms;

	pFnSendClientImpactList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendClientImpactList, &SendClientImpactList_Parms, NULL );

	pFnSendClientImpactList->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterFragmentImpact
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterFragmentImpact ( )
{
	static UFunction* pFnServerRegisterFragmentImpact = NULL;

	if ( ! pFnServerRegisterFragmentImpact )
		pFnServerRegisterFragmentImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterFragmentImpact" );

	AKFWeapon_eventServerRegisterFragmentImpact_Parms ServerRegisterFragmentImpact_Parms;

	pFnServerRegisterFragmentImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterFragmentImpact, &ServerRegisterFragmentImpact_Parms, NULL );

	pFnServerRegisterFragmentImpact->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterProjectileExplosion
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterProjectileExplosion ( )
{
	static UFunction* pFnServerRegisterProjectileExplosion = NULL;

	if ( ! pFnServerRegisterProjectileExplosion )
		pFnServerRegisterProjectileExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterProjectileExplosion" );

	AKFWeapon_eventServerRegisterProjectileExplosion_Parms ServerRegisterProjectileExplosion_Parms;

	pFnServerRegisterProjectileExplosion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterProjectileExplosion, &ServerRegisterProjectileExplosion_Parms, NULL );

	pFnServerRegisterProjectileExplosion->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterProjectileImpact
// [0x00244CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterProjectileImpact ( )
{
	static UFunction* pFnServerRegisterProjectileImpact = NULL;

	if ( ! pFnServerRegisterProjectileImpact )
		pFnServerRegisterProjectileImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterProjectileImpact" );

	AKFWeapon_eventServerRegisterProjectileImpact_Parms ServerRegisterProjectileImpact_Parms;

	pFnServerRegisterProjectileImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterProjectileImpact, &ServerRegisterProjectileImpact_Parms, NULL );

	pFnServerRegisterProjectileImpact->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterImpact8
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterImpact8 ( )
{
	static UFunction* pFnServerRegisterImpact8 = NULL;

	if ( ! pFnServerRegisterImpact8 )
		pFnServerRegisterImpact8 = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterImpact8" );

	AKFWeapon_eventServerRegisterImpact8_Parms ServerRegisterImpact8_Parms;

	pFnServerRegisterImpact8->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterImpact8, &ServerRegisterImpact8_Parms, NULL );

	pFnServerRegisterImpact8->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterImpact7
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterImpact7 ( )
{
	static UFunction* pFnServerRegisterImpact7 = NULL;

	if ( ! pFnServerRegisterImpact7 )
		pFnServerRegisterImpact7 = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterImpact7" );

	AKFWeapon_eventServerRegisterImpact7_Parms ServerRegisterImpact7_Parms;

	pFnServerRegisterImpact7->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterImpact7, &ServerRegisterImpact7_Parms, NULL );

	pFnServerRegisterImpact7->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterImpact6
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterImpact6 ( )
{
	static UFunction* pFnServerRegisterImpact6 = NULL;

	if ( ! pFnServerRegisterImpact6 )
		pFnServerRegisterImpact6 = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterImpact6" );

	AKFWeapon_eventServerRegisterImpact6_Parms ServerRegisterImpact6_Parms;

	pFnServerRegisterImpact6->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterImpact6, &ServerRegisterImpact6_Parms, NULL );

	pFnServerRegisterImpact6->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterImpact5
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterImpact5 ( )
{
	static UFunction* pFnServerRegisterImpact5 = NULL;

	if ( ! pFnServerRegisterImpact5 )
		pFnServerRegisterImpact5 = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterImpact5" );

	AKFWeapon_eventServerRegisterImpact5_Parms ServerRegisterImpact5_Parms;

	pFnServerRegisterImpact5->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterImpact5, &ServerRegisterImpact5_Parms, NULL );

	pFnServerRegisterImpact5->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterImpact4
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterImpact4 ( )
{
	static UFunction* pFnServerRegisterImpact4 = NULL;

	if ( ! pFnServerRegisterImpact4 )
		pFnServerRegisterImpact4 = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterImpact4" );

	AKFWeapon_eventServerRegisterImpact4_Parms ServerRegisterImpact4_Parms;

	pFnServerRegisterImpact4->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterImpact4, &ServerRegisterImpact4_Parms, NULL );

	pFnServerRegisterImpact4->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterImpact3
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterImpact3 ( )
{
	static UFunction* pFnServerRegisterImpact3 = NULL;

	if ( ! pFnServerRegisterImpact3 )
		pFnServerRegisterImpact3 = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterImpact3" );

	AKFWeapon_eventServerRegisterImpact3_Parms ServerRegisterImpact3_Parms;

	pFnServerRegisterImpact3->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterImpact3, &ServerRegisterImpact3_Parms, NULL );

	pFnServerRegisterImpact3->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterImpact2
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterImpact2 ( )
{
	static UFunction* pFnServerRegisterImpact2 = NULL;

	if ( ! pFnServerRegisterImpact2 )
		pFnServerRegisterImpact2 = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterImpact2" );

	AKFWeapon_eventServerRegisterImpact2_Parms ServerRegisterImpact2_Parms;

	pFnServerRegisterImpact2->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterImpact2, &ServerRegisterImpact2_Parms, NULL );

	pFnServerRegisterImpact2->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerRegisterImpact1
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerRegisterImpact1 ( )
{
	static UFunction* pFnServerRegisterImpact1 = NULL;

	if ( ! pFnServerRegisterImpact1 )
		pFnServerRegisterImpact1 = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerRegisterImpact1" );

	AKFWeapon_eventServerRegisterImpact1_Parms ServerRegisterImpact1_Parms;

	pFnServerRegisterImpact1->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerRegisterImpact1, &ServerRegisterImpact1_Parms, NULL );

	pFnServerRegisterImpact1->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.IsHeavyWeapon
// [0x00020100] 
// Parameters infos:

void AKFWeapon::IsHeavyWeapon ( )
{
	static UFunction* pFnIsHeavyWeapon = NULL;

	if ( ! pFnIsHeavyWeapon )
		pFnIsHeavyWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.IsHeavyWeapon" );

	AKFWeapon_execIsHeavyWeapon_Parms IsHeavyWeapon_Parms;

	this->ProcessEvent ( pFnIsHeavyWeapon, &IsHeavyWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.ProcessGrenadeProjectileImpact
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ProcessGrenadeProjectileImpact ( )
{
	static UFunction* pFnProcessGrenadeProjectileImpact = NULL;

	if ( ! pFnProcessGrenadeProjectileImpact )
		pFnProcessGrenadeProjectileImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ProcessGrenadeProjectileImpact" );

	AKFWeapon_execProcessGrenadeProjectileImpact_Parms ProcessGrenadeProjectileImpact_Parms;

	this->ProcessEvent ( pFnProcessGrenadeProjectileImpact, &ProcessGrenadeProjectileImpact_Parms, NULL );
};

// Function KFGame.KFWeapon.HandleGrenadeProjectileImpact
// [0x00020102] 
// Parameters infos:

void AKFWeapon::HandleGrenadeProjectileImpact ( )
{
	static UFunction* pFnHandleGrenadeProjectileImpact = NULL;

	if ( ! pFnHandleGrenadeProjectileImpact )
		pFnHandleGrenadeProjectileImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HandleGrenadeProjectileImpact" );

	AKFWeapon_execHandleGrenadeProjectileImpact_Parms HandleGrenadeProjectileImpact_Parms;

	this->ProcessEvent ( pFnHandleGrenadeProjectileImpact, &HandleGrenadeProjectileImpact_Parms, NULL );
};

// Function KFGame.KFWeapon.RecieveClientFragmentImpact
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventRecieveClientFragmentImpact ( )
{
	static UFunction* pFnRecieveClientFragmentImpact = NULL;

	if ( ! pFnRecieveClientFragmentImpact )
		pFnRecieveClientFragmentImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.RecieveClientFragmentImpact" );

	AKFWeapon_eventRecieveClientFragmentImpact_Parms RecieveClientFragmentImpact_Parms;

	this->ProcessEvent ( pFnRecieveClientFragmentImpact, &RecieveClientFragmentImpact_Parms, NULL );
};

// Function KFGame.KFWeapon.HandleProjectileImpact
// [0x00024102] 
// Parameters infos:

void AKFWeapon::HandleProjectileImpact ( )
{
	static UFunction* pFnHandleProjectileImpact = NULL;

	if ( ! pFnHandleProjectileImpact )
		pFnHandleProjectileImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HandleProjectileImpact" );

	AKFWeapon_execHandleProjectileImpact_Parms HandleProjectileImpact_Parms;

	this->ProcessEvent ( pFnHandleProjectileImpact, &HandleProjectileImpact_Parms, NULL );
};

// Function KFGame.KFWeapon.ProcessInstantHitEx
// [0x00C24102] 
// Parameters infos:

void AKFWeapon::ProcessInstantHitEx ( )
{
	static UFunction* pFnProcessInstantHitEx = NULL;

	if ( ! pFnProcessInstantHitEx )
		pFnProcessInstantHitEx = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ProcessInstantHitEx" );

	AKFWeapon_execProcessInstantHitEx_Parms ProcessInstantHitEx_Parms;

	this->ProcessEvent ( pFnProcessInstantHitEx, &ProcessInstantHitEx_Parms, NULL );
};

// Function KFGame.KFWeapon.GetInitialPenetrationPower
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetInitialPenetrationPower ( )
{
	static UFunction* pFnGetInitialPenetrationPower = NULL;

	if ( ! pFnGetInitialPenetrationPower )
		pFnGetInitialPenetrationPower = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetInitialPenetrationPower" );

	AKFWeapon_eventGetInitialPenetrationPower_Parms GetInitialPenetrationPower_Parms;

	this->ProcessEvent ( pFnGetInitialPenetrationPower, &GetInitialPenetrationPower_Parms, NULL );
};

// Function KFGame.KFWeapon.SpawnProjectile
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SpawnProjectile" );

	AKFWeapon_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function KFGame.KFWeapon.ShouldIncrementFlashCountOnFire
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ShouldIncrementFlashCountOnFire ( )
{
	static UFunction* pFnShouldIncrementFlashCountOnFire = NULL;

	if ( ! pFnShouldIncrementFlashCountOnFire )
		pFnShouldIncrementFlashCountOnFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ShouldIncrementFlashCountOnFire" );

	AKFWeapon_execShouldIncrementFlashCountOnFire_Parms ShouldIncrementFlashCountOnFire_Parms;

	this->ProcessEvent ( pFnShouldIncrementFlashCountOnFire, &ShouldIncrementFlashCountOnFire_Parms, NULL );
};

// Function KFGame.KFWeapon.ProjectileFire
// [0x00820102] 
// Parameters infos:

void AKFWeapon::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ProjectileFire" );

	AKFWeapon_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );
};

// Function KFGame.KFWeapon.GetKFProjectileClass
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetKFProjectileClass ( )
{
	static UFunction* pFnGetKFProjectileClass = NULL;

	if ( ! pFnGetKFProjectileClass )
		pFnGetKFProjectileClass = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetKFProjectileClass" );

	AKFWeapon_execGetKFProjectileClass_Parms GetKFProjectileClass_Parms;

	this->ProcessEvent ( pFnGetKFProjectileClass, &GetKFProjectileClass_Parms, NULL );
};

// Function KFGame.KFWeapon.SetRecoil
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SetRecoil(float Value)
{
	static UFunction* pFnSetRecoil = NULL;

	if ( ! pFnSetRecoil )
		pFnSetRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetRecoil" );


	AKFWeapon_execSetRecoil_Parms SetRecoil_Parms;
	SetRecoil_Parms.NewRecoilRotation.Pitch = Value;
	SetRecoil_Parms.NewRecoilRotation.Yaw = Value;
	SetRecoil_Parms.NewRecoilRotation.Roll = Value;
	SetRecoil_Parms.NewRecoilSpeed = Value;
	SetRecoil_Parms.UsedRecoilScale = Value;

	this->ProcessEvent ( pFnSetRecoil, &SetRecoil_Parms, NULL );
};

// Function KFGame.KFWeapon.HandleRecoil
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventHandleRecoil ( )
{
	static UFunction* pFnHandleRecoil = NULL;

	if ( ! pFnHandleRecoil )
		pFnHandleRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HandleRecoil" );

	AKFWeapon_eventHandleRecoil_Parms HandleRecoil_Parms;

	this->ProcessEvent ( pFnHandleRecoil, &HandleRecoil_Parms, NULL );
};

// Function KFGame.KFWeapon.ModifyRecoil
// [0x00420102] 
// Parameters infos:

void AKFWeapon::ModifyRecoil ( )
{
	static UFunction* pFnModifyRecoil = NULL;

	if ( ! pFnModifyRecoil )
		pFnModifyRecoil = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ModifyRecoil" );

	AKFWeapon_execModifyRecoil_Parms ModifyRecoil_Parms;

	this->ProcessEvent ( pFnModifyRecoil, &ModifyRecoil_Parms, NULL );
};

// Function KFGame.KFWeapon.AddSpread
// [0x00820102] 
// Parameters infos:

void AKFWeapon::AddSpread ( )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AddSpread" );

	AKFWeapon_execAddSpread_Parms AddSpread_Parms;

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );
};

// Function KFGame.KFWeapon.PassThroughDamage
// [0x00020102] 
// Parameters infos:

void AKFWeapon::PassThroughDamage ( )
{
	static UFunction* pFnPassThroughDamage = NULL;

	if ( ! pFnPassThroughDamage )
		pFnPassThroughDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PassThroughDamage" );

	AKFWeapon_execPassThroughDamage_Parms PassThroughDamage_Parms;

	this->ProcessEvent ( pFnPassThroughDamage, &PassThroughDamage_Parms, NULL );
};

// Function KFGame.KFWeapon.TraceImpactHitZones
// [0x00420102] 
// Parameters infos:

void AKFWeapon::TraceImpactHitZones ( )
{
	static UFunction* pFnTraceImpactHitZones = NULL;

	if ( ! pFnTraceImpactHitZones )
		pFnTraceImpactHitZones = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.TraceImpactHitZones" );

	AKFWeapon_execTraceImpactHitZones_Parms TraceImpactHitZones_Parms;

	this->ProcessEvent ( pFnTraceImpactHitZones, &TraceImpactHitZones_Parms, NULL );
};

// Function KFGame.KFWeapon.CalcWeaponFire
// [0x00C24102] 
// Parameters infos:

void AKFWeapon::CalcWeaponFire ( )
{
	static UFunction* pFnCalcWeaponFire = NULL;

	if ( ! pFnCalcWeaponFire )
		pFnCalcWeaponFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CalcWeaponFire" );

	AKFWeapon_execCalcWeaponFire_Parms CalcWeaponFire_Parms;

	this->ProcessEvent ( pFnCalcWeaponFire, &CalcWeaponFire_Parms, NULL );
};

// Function KFGame.KFWeapon.HandleWeaponShotTaken
// [0x00020002] 
// Parameters infos:

void AKFWeapon::HandleWeaponShotTaken ( )
{
	static UFunction* pFnHandleWeaponShotTaken = NULL;

	if ( ! pFnHandleWeaponShotTaken )
		pFnHandleWeaponShotTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HandleWeaponShotTaken" );

	AKFWeapon_execHandleWeaponShotTaken_Parms HandleWeaponShotTaken_Parms;

	this->ProcessEvent ( pFnHandleWeaponShotTaken, &HandleWeaponShotTaken_Parms, NULL );
};

// Function KFGame.KFWeapon.FireAmmunition
// [0x00020102] 
// Parameters infos:

void AKFWeapon::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.FireAmmunition" );

	AKFWeapon_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function KFGame.KFWeapon.CacheKFPlayerController
// [0x00020102] 
// Parameters infos:

void AKFWeapon::CacheKFPlayerController ( )
{
	static UFunction* pFnCacheKFPlayerController = NULL;

	if ( ! pFnCacheKFPlayerController )
		pFnCacheKFPlayerController = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CacheKFPlayerController" );

	AKFWeapon_execCacheKFPlayerController_Parms CacheKFPlayerController_Parms;

	this->ProcessEvent ( pFnCacheKFPlayerController, &CacheKFPlayerController_Parms, NULL );
};

// Function KFGame.KFWeapon.GetCurrentMuzzleID
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetCurrentMuzzleID ( )
{
	static UFunction* pFnGetCurrentMuzzleID = NULL;

	if ( ! pFnGetCurrentMuzzleID )
		pFnGetCurrentMuzzleID = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetCurrentMuzzleID" );

	AKFWeapon_execGetCurrentMuzzleID_Parms GetCurrentMuzzleID_Parms;

	this->ProcessEvent ( pFnGetCurrentMuzzleID, &GetCurrentMuzzleID_Parms, NULL );
};

// Function KFGame.KFWeapon.GetMuzzleLoc
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventGetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetMuzzleLoc" );

	AKFWeapon_eventGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );
};

// Function KFGame.KFWeapon.SendToFiringState
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SendToFiringState ( )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SendToFiringState" );

	AKFWeapon_execSendToFiringState_Parms SendToFiringState_Parms;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function KFGame.KFWeapon.AltFireModeRelease
// [0x00020102] 
// Parameters infos:

void AKFWeapon::AltFireModeRelease ( )
{
	static UFunction* pFnAltFireModeRelease = NULL;

	if ( ! pFnAltFireModeRelease )
		pFnAltFireModeRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AltFireModeRelease" );

	AKFWeapon_execAltFireModeRelease_Parms AltFireModeRelease_Parms;

	this->ProcessEvent ( pFnAltFireModeRelease, &AltFireModeRelease_Parms, NULL );
};

// Function KFGame.KFWeapon.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeapon::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AltFireMode" );

	AKFWeapon_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function KFGame.KFWeapon.StopFire
// [0x00020102] 
// Parameters infos:

void AKFWeapon::StopFire ( )
{
	static UFunction* pFnStopFire = NULL;

	if ( ! pFnStopFire )
		pFnStopFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StopFire" );

	AKFWeapon_execStopFire_Parms StopFire_Parms;

	this->ProcessEvent ( pFnStopFire, &StopFire_Parms, NULL );
};

// Function KFGame.KFWeapon.BeginFire
// [0x00020102] 
// Parameters infos:

void AKFWeapon::BeginFire ( )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.BeginFire" );

	AKFWeapon_execBeginFire_Parms BeginFire_Parms;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function KFGame.KFWeapon.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeapon::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StartFire" );

	AKFWeapon_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function KFGame.KFWeapon.AddBlood
// [0x00020102] 
// Parameters infos:

void AKFWeapon::AddBlood ( )
{
	static UFunction* pFnAddBlood = NULL;

	if ( ! pFnAddBlood )
		pFnAddBlood = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AddBlood" );

	AKFWeapon_execAddBlood_Parms AddBlood_Parms;

	this->ProcessEvent ( pFnAddBlood, &AddBlood_Parms, NULL );
};

// Function KFGame.KFWeapon.ShakeView
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ShakeView ( )
{
	static UFunction* pFnShakeView = NULL;

	if ( ! pFnShakeView )
		pFnShakeView = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ShakeView" );

	AKFWeapon_execShakeView_Parms ShakeView_Parms;

	this->ProcessEvent ( pFnShakeView, &ShakeView_Parms, NULL );
};

// Function KFGame.KFWeapon.Timer_RestoreShellEjectDepth
// [0x00020102] 
// Parameters infos:

void AKFWeapon::Timer_RestoreShellEjectDepth ( )
{
	static UFunction* pFnTimer_RestoreShellEjectDepth = NULL;

	if ( ! pFnTimer_RestoreShellEjectDepth )
		pFnTimer_RestoreShellEjectDepth = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.Timer_RestoreShellEjectDepth" );

	AKFWeapon_execTimer_RestoreShellEjectDepth_Parms Timer_RestoreShellEjectDepth_Parms;

	this->ProcessEvent ( pFnTimer_RestoreShellEjectDepth, &Timer_RestoreShellEjectDepth_Parms, NULL );
};

// Function KFGame.KFWeapon.SetShellEjectsToForeground
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SetShellEjectsToForeground ( )
{
	static UFunction* pFnSetShellEjectsToForeground = NULL;

	if ( ! pFnSetShellEjectsToForeground )
		pFnSetShellEjectsToForeground = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetShellEjectsToForeground" );

	AKFWeapon_execSetShellEjectsToForeground_Parms SetShellEjectsToForeground_Parms;

	this->ProcessEvent ( pFnSetShellEjectsToForeground, &SetShellEjectsToForeground_Parms, NULL );
};

// Function KFGame.KFWeapon.AttachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeapon::AttachMuzzleFlash ( )
{
	static UFunction* pFnAttachMuzzleFlash = NULL;

	if ( ! pFnAttachMuzzleFlash )
		pFnAttachMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AttachMuzzleFlash" );

	AKFWeapon_execAttachMuzzleFlash_Parms AttachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnAttachMuzzleFlash, &AttachMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeapon.ANIMNOTIFY_ShellEject
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ANIMNOTIFY_ShellEject ( )
{
	static UFunction* pFnANIMNOTIFY_ShellEject = NULL;

	if ( ! pFnANIMNOTIFY_ShellEject )
		pFnANIMNOTIFY_ShellEject = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ANIMNOTIFY_ShellEject" );

	AKFWeapon_execANIMNOTIFY_ShellEject_Parms ANIMNOTIFY_ShellEject_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_ShellEject, &ANIMNOTIFY_ShellEject_Parms, NULL );
};

// Function KFGame.KFWeapon.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeapon::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CauseMuzzleFlash" );

	AKFWeapon_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeapon.WeaponPlaySound
// [0x00024102] 
// Parameters infos:

void AKFWeapon::WeaponPlaySound ( )
{
	static UFunction* pFnWeaponPlaySound = NULL;

	if ( ! pFnWeaponPlaySound )
		pFnWeaponPlaySound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.WeaponPlaySound" );

	AKFWeapon_execWeaponPlaySound_Parms WeaponPlaySound_Parms;

	this->ProcessEvent ( pFnWeaponPlaySound, &WeaponPlaySound_Parms, NULL );
};

// Function KFGame.KFWeapon.WeaponPlayFireSound
// [0x00820102] 
// Parameters infos:

void AKFWeapon::WeaponPlayFireSound ( )
{
	static UFunction* pFnWeaponPlayFireSound = NULL;

	if ( ! pFnWeaponPlayFireSound )
		pFnWeaponPlayFireSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.WeaponPlayFireSound" );

	AKFWeapon_execWeaponPlayFireSound_Parms WeaponPlayFireSound_Parms;

	this->ProcessEvent ( pFnWeaponPlayFireSound, &WeaponPlayFireSound_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayFiringSound
// [0x00020102] 
// Parameters infos:

void AKFWeapon::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayFiringSound" );

	AKFWeapon_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function KFGame.KFWeapon.StopLoopingFireSound
// [0x00020102] 
// Parameters infos:

void AKFWeapon::StopLoopingFireSound ( )
{
	static UFunction* pFnStopLoopingFireSound = NULL;

	if ( ! pFnStopLoopingFireSound )
		pFnStopLoopingFireSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StopLoopingFireSound" );

	AKFWeapon_execStopLoopingFireSound_Parms StopLoopingFireSound_Parms;

	this->ProcessEvent ( pFnStopLoopingFireSound, &StopLoopingFireSound_Parms, NULL );
};

// Function KFGame.KFWeapon.StartLoopingFireSound
// [0x00020102] 
// Parameters infos:

void AKFWeapon::StartLoopingFireSound ( )
{
	static UFunction* pFnStartLoopingFireSound = NULL;

	if ( ! pFnStartLoopingFireSound )
		pFnStartLoopingFireSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StartLoopingFireSound" );

	AKFWeapon_execStartLoopingFireSound_Parms StartLoopingFireSound_Parms;

	this->ProcessEvent ( pFnStartLoopingFireSound, &StartLoopingFireSound_Parms, NULL );
};

// Function KFGame.KFWeapon.ShouldForceSingleFireSound
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ShouldForceSingleFireSound ( )
{
	static UFunction* pFnShouldForceSingleFireSound = NULL;

	if ( ! pFnShouldForceSingleFireSound )
		pFnShouldForceSingleFireSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ShouldForceSingleFireSound" );

	AKFWeapon_execShouldForceSingleFireSound_Parms ShouldForceSingleFireSound_Parms;

	this->ProcessEvent ( pFnShouldForceSingleFireSound, &ShouldForceSingleFireSound_Parms, NULL );
};

// Function KFGame.KFWeapon.StopLoopingFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapon::StopLoopingFireEffects ( )
{
	static UFunction* pFnStopLoopingFireEffects = NULL;

	if ( ! pFnStopLoopingFireEffects )
		pFnStopLoopingFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StopLoopingFireEffects" );

	AKFWeapon_execStopLoopingFireEffects_Parms StopLoopingFireEffects_Parms;

	this->ProcessEvent ( pFnStopLoopingFireEffects, &StopLoopingFireEffects_Parms, NULL );
};

// Function KFGame.KFWeapon.StartLoopingFireEffects
// [0x00024102] 
// Parameters infos:

void AKFWeapon::StartLoopingFireEffects ( )
{
	static UFunction* pFnStartLoopingFireEffects = NULL;

	if ( ! pFnStartLoopingFireEffects )
		pFnStartLoopingFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StartLoopingFireEffects" );

	AKFWeapon_execStartLoopingFireEffects_Parms StartLoopingFireEffects_Parms;

	this->ProcessEvent ( pFnStartLoopingFireEffects, &StartLoopingFireEffects_Parms, NULL );
};

// Function KFGame.KFWeapon.StopFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapon::StopFireEffects ( )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StopFireEffects" );

	AKFWeapon_execStopFireEffects_Parms StopFireEffects_Parms;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayFireEffects
// [0x00024102] 
// Parameters infos:

void AKFWeapon::PlayFireEffects ( )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayFireEffects" );

	AKFWeapon_execPlayFireEffects_Parms PlayFireEffects_Parms;

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function KFGame.KFWeapon.ChangeVisibility
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ChangeVisibility ( )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ChangeVisibility" );

	AKFWeapon_execChangeVisibility_Parms ChangeVisibility_Parms;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );
};

// Function KFGame.KFWeapon.SetPosition
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventSetPosition ( )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetPosition" );

	AKFWeapon_eventSetPosition_Parms SetPosition_Parms;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function KFGame.KFWeapon.GetAnimSeqCameraPosition
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFWeapon::GetAnimSeqCameraPosition ( )
{
	static UFunction* pFnGetAnimSeqCameraPosition = NULL;

	if ( ! pFnGetAnimSeqCameraPosition )
		pFnGetAnimSeqCameraPosition = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetAnimSeqCameraPosition" );

	AKFWeapon_execGetAnimSeqCameraPosition_Parms GetAnimSeqCameraPosition_Parms;

	pFnGetAnimSeqCameraPosition->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAnimSeqCameraPosition, &GetAnimSeqCameraPosition_Parms, NULL );

	pFnGetAnimSeqCameraPosition->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.UpdateOutOfAmmoEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapon::UpdateOutOfAmmoEffects ( )
{
	static UFunction* pFnUpdateOutOfAmmoEffects = NULL;

	if ( ! pFnUpdateOutOfAmmoEffects )
		pFnUpdateOutOfAmmoEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.UpdateOutOfAmmoEffects" );

	AKFWeapon_execUpdateOutOfAmmoEffects_Parms UpdateOutOfAmmoEffects_Parms;

	this->ProcessEvent ( pFnUpdateOutOfAmmoEffects, &UpdateOutOfAmmoEffects_Parms, NULL );
};

// Function KFGame.KFWeapon.ToggleAdditiveBobAnim
// [0x00024102] 
// Parameters infos:

void AKFWeapon::ToggleAdditiveBobAnim ( )
{
	static UFunction* pFnToggleAdditiveBobAnim = NULL;

	if ( ! pFnToggleAdditiveBobAnim )
		pFnToggleAdditiveBobAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ToggleAdditiveBobAnim" );

	AKFWeapon_execToggleAdditiveBobAnim_Parms ToggleAdditiveBobAnim_Parms;

	this->ProcessEvent ( pFnToggleAdditiveBobAnim, &ToggleAdditiveBobAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.ANIMNOTIFY_UnLockBolt
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ANIMNOTIFY_UnLockBolt ( )
{
	static UFunction* pFnANIMNOTIFY_UnLockBolt = NULL;

	if ( ! pFnANIMNOTIFY_UnLockBolt )
		pFnANIMNOTIFY_UnLockBolt = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ANIMNOTIFY_UnLockBolt" );

	AKFWeapon_execANIMNOTIFY_UnLockBolt_Parms ANIMNOTIFY_UnLockBolt_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_UnLockBolt, &ANIMNOTIFY_UnLockBolt_Parms, NULL );
};

// Function KFGame.KFWeapon.ANIMNOTIFY_LockBolt
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ANIMNOTIFY_LockBolt ( )
{
	static UFunction* pFnANIMNOTIFY_LockBolt = NULL;

	if ( ! pFnANIMNOTIFY_LockBolt )
		pFnANIMNOTIFY_LockBolt = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ANIMNOTIFY_LockBolt" );

	AKFWeapon_execANIMNOTIFY_LockBolt_Parms ANIMNOTIFY_LockBolt_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_LockBolt, &ANIMNOTIFY_LockBolt_Parms, NULL );
};

// Function KFGame.KFWeapon.GetArmAnimNodeSeq
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetArmAnimNodeSeq ( )
{
	static UFunction* pFnGetArmAnimNodeSeq = NULL;

	if ( ! pFnGetArmAnimNodeSeq )
		pFnGetArmAnimNodeSeq = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetArmAnimNodeSeq" );

	AKFWeapon_execGetArmAnimNodeSeq_Parms GetArmAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetArmAnimNodeSeq, &GetArmAnimNodeSeq_Parms, NULL );
};

// Function KFGame.KFWeapon.GetMeleeAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetMeleeAnimName ( )
{
	static UFunction* pFnGetMeleeAnimName = NULL;

	if ( ! pFnGetMeleeAnimName )
		pFnGetMeleeAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetMeleeAnimName" );

	AKFWeapon_execGetMeleeAnimName_Parms GetMeleeAnimName_Parms;

	this->ProcessEvent ( pFnGetMeleeAnimName, &GetMeleeAnimName_Parms, NULL );
};

// Function KFGame.KFWeapon.GetLoopEndFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetLoopEndFireAnim ( )
{
	static UFunction* pFnGetLoopEndFireAnim = NULL;

	if ( ! pFnGetLoopEndFireAnim )
		pFnGetLoopEndFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetLoopEndFireAnim" );

	AKFWeapon_execGetLoopEndFireAnim_Parms GetLoopEndFireAnim_Parms;

	this->ProcessEvent ( pFnGetLoopEndFireAnim, &GetLoopEndFireAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.GetLoopStartFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetLoopStartFireAnim ( )
{
	static UFunction* pFnGetLoopStartFireAnim = NULL;

	if ( ! pFnGetLoopStartFireAnim )
		pFnGetLoopStartFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetLoopStartFireAnim" );

	AKFWeapon_execGetLoopStartFireAnim_Parms GetLoopStartFireAnim_Parms;

	this->ProcessEvent ( pFnGetLoopStartFireAnim, &GetLoopStartFireAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.GetLoopingFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetLoopingFireAnim ( )
{
	static UFunction* pFnGetLoopingFireAnim = NULL;

	if ( ! pFnGetLoopingFireAnim )
		pFnGetLoopingFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetLoopingFireAnim" );

	AKFWeapon_execGetLoopingFireAnim_Parms GetLoopingFireAnim_Parms;

	this->ProcessEvent ( pFnGetLoopingFireAnim, &GetLoopingFireAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponFireAnim" );

	AKFWeapon_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.ShouldPlayFireLast
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ShouldPlayFireLast ( )
{
	static UFunction* pFnShouldPlayFireLast = NULL;

	if ( ! pFnShouldPlayFireLast )
		pFnShouldPlayFireLast = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ShouldPlayFireLast" );

	AKFWeapon_execShouldPlayFireLast_Parms ShouldPlayFireLast_Parms;

	this->ProcessEvent ( pFnShouldPlayFireLast, &ShouldPlayFireLast_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayCameraAnim
// [0x00024002] 
// Parameters infos:

void AKFWeapon::PlayCameraAnim ( )
{
	static UFunction* pFnPlayCameraAnim = NULL;

	if ( ! pFnPlayCameraAnim )
		pFnPlayCameraAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayCameraAnim" );

	AKFWeapon_execPlayCameraAnim_Parms PlayCameraAnim_Parms;

	this->ProcessEvent ( pFnPlayCameraAnim, &PlayCameraAnim_Parms, NULL );
};

// Function KFGame.KFWeapon.WeaponIsAnimating
// [0x00020102] 
// Parameters infos:

void AKFWeapon::WeaponIsAnimating ( )
{
	static UFunction* pFnWeaponIsAnimating = NULL;

	if ( ! pFnWeaponIsAnimating )
		pFnWeaponIsAnimating = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.WeaponIsAnimating" );

	AKFWeapon_execWeaponIsAnimating_Parms WeaponIsAnimating_Parms;

	this->ProcessEvent ( pFnWeaponIsAnimating, &WeaponIsAnimating_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponAnimNodeSeq
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetWeaponAnimNodeSeq ( )
{
	static UFunction* pFnGetWeaponAnimNodeSeq = NULL;

	if ( ! pFnGetWeaponAnimNodeSeq )
		pFnGetWeaponAnimNodeSeq = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponAnimNodeSeq" );

	AKFWeapon_execGetWeaponAnimNodeSeq_Parms GetWeaponAnimNodeSeq_Parms;

	this->ProcessEvent ( pFnGetWeaponAnimNodeSeq, &GetWeaponAnimNodeSeq_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:

void AKFWeapon::PlayWeaponAnimation ( )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayWeaponAnimation" );

	AKFWeapon_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayAnimation
// [0x00024102] 
// Parameters infos:

void AKFWeapon::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayAnimation" );

	AKFWeapon_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFWeapon.PlayTakeHitEffects
// [0x00020100] 
// Parameters infos:

void AKFWeapon::PlayTakeHitEffects ( )
{
	static UFunction* pFnPlayTakeHitEffects = NULL;

	if ( ! pFnPlayTakeHitEffects )
		pFnPlayTakeHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PlayTakeHitEffects" );

	AKFWeapon_execPlayTakeHitEffects_Parms PlayTakeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayTakeHitEffects, &PlayTakeHitEffects_Parms, NULL );
};

// Function KFGame.KFWeapon.AdjustDamage
// [0x00420000] 
// Parameters infos:

void AKFWeapon::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AdjustDamage" );

	AKFWeapon_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function KFGame.KFWeapon.GotoWeaponSprinting
// [0x00020100] 
// Parameters infos:

void AKFWeapon::GotoWeaponSprinting ( )
{
	static UFunction* pFnGotoWeaponSprinting = NULL;

	if ( ! pFnGotoWeaponSprinting )
		pFnGotoWeaponSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GotoWeaponSprinting" );

	AKFWeapon_execGotoWeaponSprinting_Parms GotoWeaponSprinting_Parms;

	this->ProcessEvent ( pFnGotoWeaponSprinting, &GotoWeaponSprinting_Parms, NULL );
};

// Function KFGame.KFWeapon.AllowSprinting
// [0x00020102] 
// Parameters infos:

void AKFWeapon::AllowSprinting ( )
{
	static UFunction* pFnAllowSprinting = NULL;

	if ( ! pFnAllowSprinting )
		pFnAllowSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AllowSprinting" );

	AKFWeapon_execAllowSprinting_Parms AllowSprinting_Parms;

	this->ProcessEvent ( pFnAllowSprinting, &AllowSprinting_Parms, NULL );
};

// Function KFGame.KFWeapon.StopPawnSprint
// [0x00020102] 
// Parameters infos:

void AKFWeapon::StopPawnSprint ( )
{
	static UFunction* pFnStopPawnSprint = NULL;

	if ( ! pFnStopPawnSprint )
		pFnStopPawnSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StopPawnSprint" );

	AKFWeapon_execStopPawnSprint_Parms StopPawnSprint_Parms;

	this->ProcessEvent ( pFnStopPawnSprint, &StopPawnSprint_Parms, NULL );
};

// Function KFGame.KFWeapon.SetWeaponSprint
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SetWeaponSprint ( )
{
	static UFunction* pFnSetWeaponSprint = NULL;

	if ( ! pFnSetWeaponSprint )
		pFnSetWeaponSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetWeaponSprint" );

	AKFWeapon_execSetWeaponSprint_Parms SetWeaponSprint_Parms;

	this->ProcessEvent ( pFnSetWeaponSprint, &SetWeaponSprint_Parms, NULL );
};

// Function KFGame.KFWeapon.IsGrappleBlocked
// [0x00020002] 
// Parameters infos:

void AKFWeapon::IsGrappleBlocked ( )
{
	static UFunction* pFnIsGrappleBlocked = NULL;

	if ( ! pFnIsGrappleBlocked )
		pFnIsGrappleBlocked = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.IsGrappleBlocked" );

	AKFWeapon_execIsGrappleBlocked_Parms IsGrappleBlocked_Parms;

	this->ProcessEvent ( pFnIsGrappleBlocked, &IsGrappleBlocked_Parms, NULL );
};

// Function KFGame.KFWeapon.ShouldOwnerWalk
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ShouldOwnerWalk ( )
{
	static UFunction* pFnShouldOwnerWalk = NULL;

	if ( ! pFnShouldOwnerWalk )
		pFnShouldOwnerWalk = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ShouldOwnerWalk" );

	AKFWeapon_execShouldOwnerWalk_Parms ShouldOwnerWalk_Parms;

	this->ProcessEvent ( pFnShouldOwnerWalk, &ShouldOwnerWalk_Parms, NULL );
};

// Function KFGame.KFWeapon.Timer_CheckForAIWarning
// [0x00820002] 
// Parameters infos:

void AKFWeapon::Timer_CheckForAIWarning ( )
{
	static UFunction* pFnTimer_CheckForAIWarning = NULL;

	if ( ! pFnTimer_CheckForAIWarning )
		pFnTimer_CheckForAIWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.Timer_CheckForAIWarning" );

	AKFWeapon_execTimer_CheckForAIWarning_Parms Timer_CheckForAIWarning_Parms;

	this->ProcessEvent ( pFnTimer_CheckForAIWarning, &Timer_CheckForAIWarning_Parms, NULL );
};

// Function KFGame.KFWeapon.IsWarningAI
// [0x00020002] 
// Parameters infos:

void AKFWeapon::IsWarningAI ( )
{
	static UFunction* pFnIsWarningAI = NULL;

	if ( ! pFnIsWarningAI )
		pFnIsWarningAI = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.IsWarningAI" );

	AKFWeapon_execIsWarningAI_Parms IsWarningAI_Parms;

	this->ProcessEvent ( pFnIsWarningAI, &IsWarningAI_Parms, NULL );
};

// Function KFGame.KFWeapon.OnZoomOutFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventOnZoomOutFinished ( )
{
	static UFunction* pFnOnZoomOutFinished = NULL;

	if ( ! pFnOnZoomOutFinished )
		pFnOnZoomOutFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.OnZoomOutFinished" );

	AKFWeapon_eventOnZoomOutFinished_Parms OnZoomOutFinished_Parms;

	this->ProcessEvent ( pFnOnZoomOutFinished, &OnZoomOutFinished_Parms, NULL );
};

// Function KFGame.KFWeapon.OnZoomInFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventOnZoomInFinished ( )
{
	static UFunction* pFnOnZoomInFinished = NULL;

	if ( ! pFnOnZoomInFinished )
		pFnOnZoomInFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.OnZoomInFinished" );

	AKFWeapon_eventOnZoomInFinished_Parms OnZoomInFinished_Parms;

	this->ProcessEvent ( pFnOnZoomInFinished, &OnZoomInFinished_Parms, NULL );
};

// Function KFGame.KFWeapon.ServerZoomOut
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeapon::ServerZoomOut ( )
{
	static UFunction* pFnServerZoomOut = NULL;

	if ( ! pFnServerZoomOut )
		pFnServerZoomOut = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerZoomOut" );

	AKFWeapon_execServerZoomOut_Parms ServerZoomOut_Parms;

	this->ProcessEvent ( pFnServerZoomOut, &ServerZoomOut_Parms, NULL );
};

// Function KFGame.KFWeapon.ZoomOut
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ZoomOut ( )
{
	static UFunction* pFnZoomOut = NULL;

	if ( ! pFnZoomOut )
		pFnZoomOut = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ZoomOut" );

	AKFWeapon_execZoomOut_Parms ZoomOut_Parms;

	this->ProcessEvent ( pFnZoomOut, &ZoomOut_Parms, NULL );
};

// Function KFGame.KFWeapon.ServerZoomIn
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeapon::ServerZoomIn ( )
{
	static UFunction* pFnServerZoomIn = NULL;

	if ( ! pFnServerZoomIn )
		pFnServerZoomIn = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerZoomIn" );

	AKFWeapon_execServerZoomIn_Parms ServerZoomIn_Parms;

	this->ProcessEvent ( pFnServerZoomIn, &ServerZoomIn_Parms, NULL );
};

// Function KFGame.KFWeapon.ZoomIn
// [0x00020102] 
// Parameters infos:

void AKFWeapon::ZoomIn ( )
{
	static UFunction* pFnZoomIn = NULL;

	if ( ! pFnZoomIn )
		pFnZoomIn = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ZoomIn" );

	AKFWeapon_execZoomIn_Parms ZoomIn_Parms;

	this->ProcessEvent ( pFnZoomIn, &ZoomIn_Parms, NULL );
};

// Function KFGame.KFWeapon.PerformZoom
// [0x00024102] 
// Parameters infos:

void AKFWeapon::PerformZoom ( )
{
	static UFunction* pFnPerformZoom = NULL;

	if ( ! pFnPerformZoom )
		pFnPerformZoom = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PerformZoom" );

	AKFWeapon_execPerformZoom_Parms PerformZoom_Parms;

	this->ProcessEvent ( pFnPerformZoom, &PerformZoom_Parms, NULL );
};

// Function KFGame.KFWeapon.EnablePlayerZoom
// [0x00020102] 
// Parameters infos:

void AKFWeapon::EnablePlayerZoom ( )
{
	static UFunction* pFnEnablePlayerZoom = NULL;

	if ( ! pFnEnablePlayerZoom )
		pFnEnablePlayerZoom = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.EnablePlayerZoom" );

	AKFWeapon_execEnablePlayerZoom_Parms EnablePlayerZoom_Parms;

	this->ProcessEvent ( pFnEnablePlayerZoom, &EnablePlayerZoom_Parms, NULL );
};

// Function KFGame.KFWeapon.EnableIronSightsDoF
// [0x00020102] 
// Parameters infos:

void AKFWeapon::EnableIronSightsDoF ( )
{
	static UFunction* pFnEnableIronSightsDoF = NULL;

	if ( ! pFnEnableIronSightsDoF )
		pFnEnableIronSightsDoF = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.EnableIronSightsDoF" );

	AKFWeapon_execEnableIronSightsDoF_Parms EnableIronSightsDoF_Parms;

	this->ProcessEvent ( pFnEnableIronSightsDoF, &EnableIronSightsDoF_Parms, NULL );
};

// Function KFGame.KFWeapon.AllowIronSights
// [0x00020102] 
// Parameters infos:

void AKFWeapon::AllowIronSights ( )
{
	static UFunction* pFnAllowIronSights = NULL;

	if ( ! pFnAllowIronSights )
		pFnAllowIronSights = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AllowIronSights" );

	AKFWeapon_execAllowIronSights_Parms AllowIronSights_Parms;

	this->ProcessEvent ( pFnAllowIronSights, &AllowIronSights_Parms, NULL );
};

// Function KFGame.KFWeapon.SetIronSights
// [0x00020102] 
// Parameters infos:

void AKFWeapon::SetIronSights ( )
{
	static UFunction* pFnSetIronSights = NULL;

	if ( ! pFnSetIronSights )
		pFnSetIronSights = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetIronSights" );

	AKFWeapon_execSetIronSights_Parms SetIronSights_Parms;

	this->ProcessEvent ( pFnSetIronSights, &SetIronSights_Parms, NULL );
};

// Function KFGame.KFWeapon.SetFOV
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventSetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetFOV" );

	AKFWeapon_eventSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function KFGame.KFWeapon.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.Tick" );

	AKFWeapon_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponRating
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetWeaponRating ( )
{
	static UFunction* pFnGetWeaponRating = NULL;

	if ( ! pFnGetWeaponRating )
		pFnGetWeaponRating = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponRating" );

	AKFWeapon_execGetWeaponRating_Parms GetWeaponRating_Parms;

	this->ProcessEvent ( pFnGetWeaponRating, &GetWeaponRating_Parms, NULL );
};

// Function KFGame.KFWeapon.IsMeleeWeapon
// [0x00022102] 
// Parameters infos:

void AKFWeapon::IsMeleeWeapon ( )
{
	static UFunction* pFnIsMeleeWeapon = NULL;

	if ( ! pFnIsMeleeWeapon )
		pFnIsMeleeWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.IsMeleeWeapon" );

	AKFWeapon_execIsMeleeWeapon_Parms IsMeleeWeapon_Parms;

	this->ProcessEvent ( pFnIsMeleeWeapon, &IsMeleeWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.DenyPerkResupply
// [0x00022102] 
// Parameters infos:

void AKFWeapon::DenyPerkResupply ( )
{
	static UFunction* pFnDenyPerkResupply = NULL;

	if ( ! pFnDenyPerkResupply )
		pFnDenyPerkResupply = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.DenyPerkResupply" );

	AKFWeapon_execDenyPerkResupply_Parms DenyPerkResupply_Parms;

	this->ProcessEvent ( pFnDenyPerkResupply, &DenyPerkResupply_Parms, NULL );
};

// Function KFGame.KFWeapon.ClientNotifyPickedUp
// [0x010201C2] 
// Parameters infos:

void AKFWeapon::ClientNotifyPickedUp ( )
{
	static UFunction* pFnClientNotifyPickedUp = NULL;

	if ( ! pFnClientNotifyPickedUp )
		pFnClientNotifyPickedUp = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ClientNotifyPickedUp" );

	AKFWeapon_execClientNotifyPickedUp_Parms ClientNotifyPickedUp_Parms;

	this->ProcessEvent ( pFnClientNotifyPickedUp, &ClientNotifyPickedUp_Parms, NULL );
};

// Function KFGame.KFWeapon.NotifyPickedUp
// [0x00020002] 
// Parameters infos:

void AKFWeapon::NotifyPickedUp ( )
{
	static UFunction* pFnNotifyPickedUp = NULL;

	if ( ! pFnNotifyPickedUp )
		pFnNotifyPickedUp = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.NotifyPickedUp" );

	AKFWeapon_execNotifyPickedUp_Parms NotifyPickedUp_Parms;

	this->ProcessEvent ( pFnNotifyPickedUp, &NotifyPickedUp_Parms, NULL );
};

// Function KFGame.KFWeapon.DenyPickupQuery
// [0x00020002] 
// Parameters infos:

void AKFWeapon::DenyPickupQuery ( )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.DenyPickupQuery" );

	AKFWeapon_execDenyPickupQuery_Parms DenyPickupQuery_Parms;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );
};

// Function KFGame.KFWeapon.SetOriginalValuesFromPickup
// [0x00020002] 
// Parameters infos:

void AKFWeapon::SetOriginalValuesFromPickup ( )
{
	static UFunction* pFnSetOriginalValuesFromPickup = NULL;

	if ( ! pFnSetOriginalValuesFromPickup )
		pFnSetOriginalValuesFromPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetOriginalValuesFromPickup" );

	AKFWeapon_execSetOriginalValuesFromPickup_Parms SetOriginalValuesFromPickup_Parms;

	this->ProcessEvent ( pFnSetOriginalValuesFromPickup, &SetOriginalValuesFromPickup_Parms, NULL );
};

// Function KFGame.KFWeapon.SetupDroppedPickup
// [0x00420002] 
// Parameters infos:

void AKFWeapon::SetupDroppedPickup ( )
{
	static UFunction* pFnSetupDroppedPickup = NULL;

	if ( ! pFnSetupDroppedPickup )
		pFnSetupDroppedPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetupDroppedPickup" );

	AKFWeapon_execSetupDroppedPickup_Parms SetupDroppedPickup_Parms;

	this->ProcessEvent ( pFnSetupDroppedPickup, &SetupDroppedPickup_Parms, NULL );
};

// Function KFGame.KFWeapon.CanThrow
// [0x00020102] 
// Parameters infos:

void AKFWeapon::CanThrow ( )
{
	static UFunction* pFnCanThrow = NULL;

	if ( ! pFnCanThrow )
		pFnCanThrow = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CanThrow" );

	AKFWeapon_execCanThrow_Parms CanThrow_Parms;

	this->ProcessEvent ( pFnCanThrow, &CanThrow_Parms, NULL );
};

// Function KFGame.KFWeapon.DropFrom
// [0x00020002] 
// Parameters infos:

void AKFWeapon::DropFrom ( )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.DropFrom" );

	AKFWeapon_execDropFrom_Parms DropFrom_Parms;

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function KFGame.KFWeapon.AttachLaserSight
// [0x00020102] 
// Parameters infos:

void AKFWeapon::AttachLaserSight ( )
{
	static UFunction* pFnAttachLaserSight = NULL;

	if ( ! pFnAttachLaserSight )
		pFnAttachLaserSight = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AttachLaserSight" );

	AKFWeapon_execAttachLaserSight_Parms AttachLaserSight_Parms;

	this->ProcessEvent ( pFnAttachLaserSight, &AttachLaserSight_Parms, NULL );
};

// Function KFGame.KFWeapon.DetachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeapon::DetachMuzzleFlash ( )
{
	static UFunction* pFnDetachMuzzleFlash = NULL;

	if ( ! pFnDetachMuzzleFlash )
		pFnDetachMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.DetachMuzzleFlash" );

	AKFWeapon_execDetachMuzzleFlash_Parms DetachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnDetachMuzzleFlash, &DetachMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeapon.DetachWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeapon::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.DetachWeapon" );

	AKFWeapon_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.GetWeaponAttachmentTemplate
// [0x00020102] 
// Parameters infos:

void AKFWeapon::GetWeaponAttachmentTemplate ( )
{
	static UFunction* pFnGetWeaponAttachmentTemplate = NULL;

	if ( ! pFnGetWeaponAttachmentTemplate )
		pFnGetWeaponAttachmentTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetWeaponAttachmentTemplate" );

	AKFWeapon_execGetWeaponAttachmentTemplate_Parms GetWeaponAttachmentTemplate_Parms;

	this->ProcessEvent ( pFnGetWeaponAttachmentTemplate, &GetWeaponAttachmentTemplate_Parms, NULL );
};

// Function KFGame.KFWeapon.AttachThirdPersonWeapon
// [0x00020002] 
// Parameters infos:

void AKFWeapon::AttachThirdPersonWeapon ( )
{
	static UFunction* pFnAttachThirdPersonWeapon = NULL;

	if ( ! pFnAttachThirdPersonWeapon )
		pFnAttachThirdPersonWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AttachThirdPersonWeapon" );

	AKFWeapon_execAttachThirdPersonWeapon_Parms AttachThirdPersonWeapon_Parms;

	this->ProcessEvent ( pFnAttachThirdPersonWeapon, &AttachThirdPersonWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.AttachWeaponTo
// [0x00024102] 
// Parameters infos:

void AKFWeapon::AttachWeaponTo ( )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.AttachWeaponTo" );

	AKFWeapon_execAttachWeaponTo_Parms AttachWeaponTo_Parms;

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function KFGame.KFWeapon.TriggerAttachment
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventTriggerAttachment ( )
{
	static UFunction* pFnTriggerAttachment = NULL;

	if ( ! pFnTriggerAttachment )
		pFnTriggerAttachment = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.TriggerAttachment" );

	AKFWeapon_eventTriggerAttachment_Parms TriggerAttachment_Parms;

	this->ProcessEvent ( pFnTriggerAttachment, &TriggerAttachment_Parms, NULL );
};

// Function KFGame.KFWeapon.SetWeapon
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventSetWeapon ( )
{
	static UFunction* pFnSetWeapon = NULL;

	if ( ! pFnSetWeapon )
		pFnSetWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetWeapon" );

	AKFWeapon_eventSetWeapon_Parms SetWeapon_Parms;

	this->ProcessEvent ( pFnSetWeapon, &SetWeapon_Parms, NULL );
};

// Function KFGame.KFWeapon.ClientWeaponSet
// [0x010241C2] 
// Parameters infos:

void AKFWeapon::ClientWeaponSet ( )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ClientWeaponSet" );

	AKFWeapon_execClientWeaponSet_Parms ClientWeaponSet_Parms;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function KFGame.KFWeapon.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void AKFWeapon::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ItemRemovedFromInvManager" );

	AKFWeapon_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function KFGame.KFWeapon.ClientGivenTo
// [0x010201C2] 
// Parameters infos:

void AKFWeapon::ClientGivenTo ( )
{
	static UFunction* pFnClientGivenTo = NULL;

	if ( ! pFnClientGivenTo )
		pFnClientGivenTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ClientGivenTo" );

	AKFWeapon_execClientGivenTo_Parms ClientGivenTo_Parms;

	this->ProcessEvent ( pFnClientGivenTo, &ClientGivenTo_Parms, NULL );
};

// Function KFGame.KFWeapon.GivenTo
// [0x00024002] 
// Parameters infos:

void AKFWeapon::GivenTo ( )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GivenTo" );

	AKFWeapon_execGivenTo_Parms GivenTo_Parms;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function KFGame.KFWeapon.UnloadWeaponContent
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFWeapon::UnloadWeaponContent ( )
{
	static UFunction* pFnUnloadWeaponContent = NULL;

	if ( ! pFnUnloadWeaponContent )
		pFnUnloadWeaponContent = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.UnloadWeaponContent" );

	AKFWeapon_execUnloadWeaponContent_Parms UnloadWeaponContent_Parms;

	pFnUnloadWeaponContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnloadWeaponContent, &UnloadWeaponContent_Parms, NULL );

	pFnUnloadWeaponContent->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.CacheWeaponContent
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFWeapon::CacheWeaponContent ( )
{
	static UFunction* pFnCacheWeaponContent = NULL;

	if ( ! pFnCacheWeaponContent )
		pFnCacheWeaponContent = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.CacheWeaponContent" );

	AKFWeapon_execCacheWeaponContent_Parms CacheWeaponContent_Parms;

	pFnCacheWeaponContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheWeaponContent, &CacheWeaponContent_Parms, NULL );

	pFnCacheWeaponContent->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.LoadWeaponContent
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFWeapon::LoadWeaponContent ( )
{
	static UFunction* pFnLoadWeaponContent = NULL;

	if ( ! pFnLoadWeaponContent )
		pFnLoadWeaponContent = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.LoadWeaponContent" );

	AKFWeapon_execLoadWeaponContent_Parms LoadWeaponContent_Parms;

	pFnLoadWeaponContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadWeaponContent, &LoadWeaponContent_Parms, NULL );

	pFnLoadWeaponContent->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.StartLoadWeaponContent
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFWeapon::StartLoadWeaponContent ( )
{
	static UFunction* pFnStartLoadWeaponContent = NULL;

	if ( ! pFnStartLoadWeaponContent )
		pFnStartLoadWeaponContent = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.StartLoadWeaponContent" );

	AKFWeapon_execStartLoadWeaponContent_Parms StartLoadWeaponContent_Parms;

	pFnStartLoadWeaponContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartLoadWeaponContent, &StartLoadWeaponContent_Parms, NULL );

	pFnStartLoadWeaponContent->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.TriggerAsyncContentLoad
// [0x00022500] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::TriggerAsyncContentLoad ( )
{
	static UFunction* pFnTriggerAsyncContentLoad = NULL;

	if ( ! pFnTriggerAsyncContentLoad )
		pFnTriggerAsyncContentLoad = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.TriggerAsyncContentLoad" );

	AKFWeapon_execTriggerAsyncContentLoad_Parms TriggerAsyncContentLoad_Parms;

	pFnTriggerAsyncContentLoad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTriggerAsyncContentLoad, &TriggerAsyncContentLoad_Parms, NULL );

	pFnTriggerAsyncContentLoad->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ClearSkinItemId
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFWeapon::ClearSkinItemId ( )
{
	static UFunction* pFnClearSkinItemId = NULL;

	if ( ! pFnClearSkinItemId )
		pFnClearSkinItemId = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ClearSkinItemId" );

	AKFWeapon_execClearSkinItemId_Parms ClearSkinItemId_Parms;

	pFnClearSkinItemId->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearSkinItemId, &ClearSkinItemId_Parms, NULL );

	pFnClearSkinItemId->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ServerUpdateWeaponSkin
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeapon::eventServerUpdateWeaponSkin ( )
{
	static UFunction* pFnServerUpdateWeaponSkin = NULL;

	if ( ! pFnServerUpdateWeaponSkin )
		pFnServerUpdateWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ServerUpdateWeaponSkin" );

	AKFWeapon_eventServerUpdateWeaponSkin_Parms ServerUpdateWeaponSkin_Parms;

	pFnServerUpdateWeaponSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerUpdateWeaponSkin, &ServerUpdateWeaponSkin_Parms, NULL );

	pFnServerUpdateWeaponSkin->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.SetWeaponSkinPostLoad
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::SetWeaponSkinPostLoad ( )
{
	static UFunction* pFnSetWeaponSkinPostLoad = NULL;

	if ( ! pFnSetWeaponSkinPostLoad )
		pFnSetWeaponSkinPostLoad = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetWeaponSkinPostLoad" );

	AKFWeapon_execSetWeaponSkinPostLoad_Parms SetWeaponSkinPostLoad_Parms;

	pFnSetWeaponSkinPostLoad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWeaponSkinPostLoad, &SetWeaponSkinPostLoad_Parms, NULL );

	pFnSetWeaponSkinPostLoad->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.ClientSetFirstPersonSkin
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFWeapon::ClientSetFirstPersonSkin ( )
{
	static UFunction* pFnClientSetFirstPersonSkin = NULL;

	if ( ! pFnClientSetFirstPersonSkin )
		pFnClientSetFirstPersonSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ClientSetFirstPersonSkin" );

	AKFWeapon_execClientSetFirstPersonSkin_Parms ClientSetFirstPersonSkin_Parms;

	pFnClientSetFirstPersonSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientSetFirstPersonSkin, &ClientSetFirstPersonSkin_Parms, NULL );

	pFnClientSetFirstPersonSkin->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.InitFOV
// [0x00020102] 
// Parameters infos:

void AKFWeapon::InitFOV ( )
{
	static UFunction* pFnInitFOV = NULL;

	if ( ! pFnInitFOV )
		pFnInitFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.InitFOV" );

	AKFWeapon_execInitFOV_Parms InitFOV_Parms;

	this->ProcessEvent ( pFnInitFOV, &InitFOV_Parms, NULL );
};

// Function KFGame.KFWeapon.InitializeEquipTime
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventInitializeEquipTime ( )
{
	static UFunction* pFnInitializeEquipTime = NULL;

	if ( ! pFnInitializeEquipTime )
		pFnInitializeEquipTime = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.InitializeEquipTime" );

	AKFWeapon_eventInitializeEquipTime_Parms InitializeEquipTime_Parms;

	this->ProcessEvent ( pFnInitializeEquipTime, &InitializeEquipTime_Parms, NULL );
};

// Function KFGame.KFWeapon.BuildEmptyMagNodeWeightList
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::BuildEmptyMagNodeWeightList ( )
{
	static UFunction* pFnBuildEmptyMagNodeWeightList = NULL;

	if ( ! pFnBuildEmptyMagNodeWeightList )
		pFnBuildEmptyMagNodeWeightList = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.BuildEmptyMagNodeWeightList" );

	AKFWeapon_execBuildEmptyMagNodeWeightList_Parms BuildEmptyMagNodeWeightList_Parms;

	pFnBuildEmptyMagNodeWeightList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBuildEmptyMagNodeWeightList, &BuildEmptyMagNodeWeightList_Parms, NULL );

	pFnBuildEmptyMagNodeWeightList->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PostInitAnimTree" );

	AKFWeapon_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function KFGame.KFWeapon.SetShownInInventory
// [0x00020000] 
// Parameters infos:

void AKFWeapon::SetShownInInventory ( )
{
	static UFunction* pFnSetShownInInventory = NULL;

	if ( ! pFnSetShownInInventory )
		pFnSetShownInInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetShownInInventory" );

	AKFWeapon_execSetShownInInventory_Parms SetShownInInventory_Parms;

	this->ProcessEvent ( pFnSetShownInInventory, &SetShownInInventory_Parms, NULL );
};

// Function KFGame.KFWeapon.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapon::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.PreBeginPlay" );

	AKFWeapon_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFWeapon.HasAlwaysOnZedTimeResist
// [0x00020102] 
// Parameters infos:

void AKFWeapon::HasAlwaysOnZedTimeResist ( )
{
	static UFunction* pFnHasAlwaysOnZedTimeResist = NULL;

	if ( ! pFnHasAlwaysOnZedTimeResist )
		pFnHasAlwaysOnZedTimeResist = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.HasAlwaysOnZedTimeResist" );

	AKFWeapon_execHasAlwaysOnZedTimeResist_Parms HasAlwaysOnZedTimeResist_Parms;

	this->ProcessEvent ( pFnHasAlwaysOnZedTimeResist, &HasAlwaysOnZedTimeResist_Parms, NULL );
};

// Function KFGame.KFWeapon.ClearZedTimeResist
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::ClearZedTimeResist ( )
{
	static UFunction* pFnClearZedTimeResist = NULL;

	if ( ! pFnClearZedTimeResist )
		pFnClearZedTimeResist = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.ClearZedTimeResist" );

	AKFWeapon_execClearZedTimeResist_Parms ClearZedTimeResist_Parms;

	pFnClearZedTimeResist->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearZedTimeResist, &ClearZedTimeResist_Parms, NULL );

	pFnClearZedTimeResist->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.SetZedTimeResist
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::SetZedTimeResist ( )
{
	static UFunction* pFnSetZedTimeResist = NULL;

	if ( ! pFnSetZedTimeResist )
		pFnSetZedTimeResist = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.SetZedTimeResist" );

	AKFWeapon_execSetZedTimeResist_Parms SetZedTimeResist_Parms;

	pFnSetZedTimeResist->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetZedTimeResist, &SetZedTimeResist_Parms, NULL );

	pFnSetZedTimeResist->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.GetPerk
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::GetPerk ( )
{
	static UFunction* pFnGetPerk = NULL;

	if ( ! pFnGetPerk )
		pFnGetPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.GetPerk" );

	AKFWeapon_execGetPerk_Parms GetPerk_Parms;

	pFnGetPerk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerk, &GetPerk_Parms, NULL );

	pFnGetPerk->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.WeaponProcessViewRotation
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::WeaponProcessViewRotation ( )
{
	static UFunction* pFnWeaponProcessViewRotation = NULL;

	if ( ! pFnWeaponProcessViewRotation )
		pFnWeaponProcessViewRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.WeaponProcessViewRotation" );

	AKFWeapon_execWeaponProcessViewRotation_Parms WeaponProcessViewRotation_Parms;

	pFnWeaponProcessViewRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWeaponProcessViewRotation, &WeaponProcessViewRotation_Parms, NULL );

	pFnWeaponProcessViewRotation->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeapon.EnsureWeaponOverlayComponentLast
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFWeapon::EnsureWeaponOverlayComponentLast ( )
{
	static UFunction* pFnEnsureWeaponOverlayComponentLast = NULL;

	if ( ! pFnEnsureWeaponOverlayComponentLast )
		pFnEnsureWeaponOverlayComponentLast = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapon.EnsureWeaponOverlayComponentLast" );

	AKFWeapon_execEnsureWeaponOverlayComponentLast_Parms EnsureWeaponOverlayComponentLast_Parms;

	pFnEnsureWeaponOverlayComponentLast->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnsureWeaponOverlayComponentLast, &EnsureWeaponOverlayComponentLast_Parms, NULL );

	pFnEnsureWeaponOverlayComponentLast->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeap_MeleeBase.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_MeleeBase::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.GetTraderFilter" );

	AKFWeap_MeleeBase_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.CalculateTraderWeaponStatFireRate
// [0x00022102] 
// Parameters infos:

void AKFWeap_MeleeBase::CalculateTraderWeaponStatFireRate ( )
{
	static UFunction* pFnCalculateTraderWeaponStatFireRate = NULL;

	if ( ! pFnCalculateTraderWeaponStatFireRate )
		pFnCalculateTraderWeaponStatFireRate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.CalculateTraderWeaponStatFireRate" );

	AKFWeap_MeleeBase_execCalculateTraderWeaponStatFireRate_Parms CalculateTraderWeaponStatFireRate_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatFireRate, &CalculateTraderWeaponStatFireRate_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_MeleeBase::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.CalculateTraderWeaponStatDamage" );

	AKFWeap_MeleeBase_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.SetTraderWeaponStats
// [0x00422902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_MeleeBase::eventSetTraderWeaponStats ( )
{
	static UFunction* pFnSetTraderWeaponStats = NULL;

	if ( ! pFnSetTraderWeaponStats )
		pFnSetTraderWeaponStats = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.SetTraderWeaponStats" );

	AKFWeap_MeleeBase_eventSetTraderWeaponStats_Parms SetTraderWeaponStats_Parms;

	this->ProcessEvent ( pFnSetTraderWeaponStats, &SetTraderWeaponStats_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.AttemptDrawStrike
// [0x00020100] 
// Parameters infos:

void AKFWeap_MeleeBase::AttemptDrawStrike ( )
{
	static UFunction* pFnAttemptDrawStrike = NULL;

	if ( ! pFnAttemptDrawStrike )
		pFnAttemptDrawStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.AttemptDrawStrike" );

	AKFWeap_MeleeBase_execAttemptDrawStrike_Parms AttemptDrawStrike_Parms;

	this->ProcessEvent ( pFnAttemptDrawStrike, &AttemptDrawStrike_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ANIMNOTIFY_DrawAtk
// [0x00020100] 
// Parameters infos:

void AKFWeap_MeleeBase::ANIMNOTIFY_DrawAtk ( )
{
	static UFunction* pFnANIMNOTIFY_DrawAtk = NULL;

	if ( ! pFnANIMNOTIFY_DrawAtk )
		pFnANIMNOTIFY_DrawAtk = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ANIMNOTIFY_DrawAtk" );

	AKFWeap_MeleeBase_execANIMNOTIFY_DrawAtk_Parms ANIMNOTIFY_DrawAtk_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_DrawAtk, &ANIMNOTIFY_DrawAtk_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.BlockCooldownTimer
// [0x00020100] 
// Parameters infos:

void AKFWeap_MeleeBase::BlockCooldownTimer ( )
{
	static UFunction* pFnBlockCooldownTimer = NULL;

	if ( ! pFnBlockCooldownTimer )
		pFnBlockCooldownTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.BlockCooldownTimer" );

	AKFWeap_MeleeBase_execBlockCooldownTimer_Parms BlockCooldownTimer_Parms;

	this->ProcessEvent ( pFnBlockCooldownTimer, &BlockCooldownTimer_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.GetParryEffects
// [0x00420102] 
// Parameters infos:

void AKFWeap_MeleeBase::GetParryEffects ( )
{
	static UFunction* pFnGetParryEffects = NULL;

	if ( ! pFnGetParryEffects )
		pFnGetParryEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.GetParryEffects" );

	AKFWeap_MeleeBase_execGetParryEffects_Parms GetParryEffects_Parms;

	this->ProcessEvent ( pFnGetParryEffects, &GetParryEffects_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.GetBlockEffects
// [0x00420102] 
// Parameters infos:

void AKFWeap_MeleeBase::GetBlockEffects ( )
{
	static UFunction* pFnGetBlockEffects = NULL;

	if ( ! pFnGetBlockEffects )
		pFnGetBlockEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.GetBlockEffects" );

	AKFWeap_MeleeBase_execGetBlockEffects_Parms GetBlockEffects_Parms;

	this->ProcessEvent ( pFnGetBlockEffects, &GetBlockEffects_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.CanBlockDamageType
// [0x00424002] 
// Parameters infos:

void AKFWeap_MeleeBase::CanBlockDamageType ( )
{
	static UFunction* pFnCanBlockDamageType = NULL;

	if ( ! pFnCanBlockDamageType )
		pFnCanBlockDamageType = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.CanBlockDamageType" );

	AKFWeap_MeleeBase_execCanBlockDamageType_Parms CanBlockDamageType_Parms;

	this->ProcessEvent ( pFnCanBlockDamageType, &CanBlockDamageType_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.PlayLocalBlockEffects
// [0x00820102] 
// Parameters infos:

void AKFWeap_MeleeBase::PlayLocalBlockEffects ( )
{
	static UFunction* pFnPlayLocalBlockEffects = NULL;

	if ( ! pFnPlayLocalBlockEffects )
		pFnPlayLocalBlockEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.PlayLocalBlockEffects" );

	AKFWeap_MeleeBase_execPlayLocalBlockEffects_Parms PlayLocalBlockEffects_Parms;

	this->ProcessEvent ( pFnPlayLocalBlockEffects, &PlayLocalBlockEffects_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.PlayBlockStart
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::PlayBlockStart ( )
{
	static UFunction* pFnPlayBlockStart = NULL;

	if ( ! pFnPlayBlockStart )
		pFnPlayBlockStart = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.PlayBlockStart" );

	AKFWeap_MeleeBase_execPlayBlockStart_Parms PlayBlockStart_Parms;

	this->ProcessEvent ( pFnPlayBlockStart, &PlayBlockStart_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ClientPlayParryEffects
// [0x010241C2] 
// Parameters infos:

void AKFWeap_MeleeBase::ClientPlayParryEffects ( )
{
	static UFunction* pFnClientPlayParryEffects = NULL;

	if ( ! pFnClientPlayParryEffects )
		pFnClientPlayParryEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ClientPlayParryEffects" );

	AKFWeap_MeleeBase_execClientPlayParryEffects_Parms ClientPlayParryEffects_Parms;

	this->ProcessEvent ( pFnClientPlayParryEffects, &ClientPlayParryEffects_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ClientPlayBlockEffects
// [0x01024142] 
// Parameters infos:

void AKFWeap_MeleeBase::ClientPlayBlockEffects ( )
{
	static UFunction* pFnClientPlayBlockEffects = NULL;

	if ( ! pFnClientPlayBlockEffects )
		pFnClientPlayBlockEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ClientPlayBlockEffects" );

	AKFWeap_MeleeBase_execClientPlayBlockEffects_Parms ClientPlayBlockEffects_Parms;

	this->ProcessEvent ( pFnClientPlayBlockEffects, &ClientPlayBlockEffects_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ParryCheckTimer
// [0x00020100] 
// Parameters infos:

void AKFWeap_MeleeBase::ParryCheckTimer ( )
{
	static UFunction* pFnParryCheckTimer = NULL;

	if ( ! pFnParryCheckTimer )
		pFnParryCheckTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ParryCheckTimer" );

	AKFWeap_MeleeBase_execParryCheckTimer_Parms ParryCheckTimer_Parms;

	this->ProcessEvent ( pFnParryCheckTimer, &ParryCheckTimer_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.BlockLoopTimer
// [0x00020100] 
// Parameters infos:

void AKFWeap_MeleeBase::BlockLoopTimer ( )
{
	static UFunction* pFnBlockLoopTimer = NULL;

	if ( ! pFnBlockLoopTimer )
		pFnBlockLoopTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.BlockLoopTimer" );

	AKFWeap_MeleeBase_execBlockLoopTimer_Parms BlockLoopTimer_Parms;

	this->ProcessEvent ( pFnBlockLoopTimer, &BlockLoopTimer_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.SustainedWarmupEndTimer
// [0x00020000] 
// Parameters infos:

void AKFWeap_MeleeBase::SustainedWarmupEndTimer ( )
{
	static UFunction* pFnSustainedWarmupEndTimer = NULL;

	if ( ! pFnSustainedWarmupEndTimer )
		pFnSustainedWarmupEndTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.SustainedWarmupEndTimer" );

	AKFWeap_MeleeBase_execSustainedWarmupEndTimer_Parms SustainedWarmupEndTimer_Parms;

	this->ProcessEvent ( pFnSustainedWarmupEndTimer, &SustainedWarmupEndTimer_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.SustainedMinFireTimer
// [0x00020000] 
// Parameters infos:

void AKFWeap_MeleeBase::SustainedMinFireTimer ( )
{
	static UFunction* pFnSustainedMinFireTimer = NULL;

	if ( ! pFnSustainedMinFireTimer )
		pFnSustainedMinFireTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.SustainedMinFireTimer" );

	AKFWeap_MeleeBase_execSustainedMinFireTimer_Parms SustainedMinFireTimer_Parms;

	this->ProcessEvent ( pFnSustainedMinFireTimer, &SustainedMinFireTimer_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.IsHeavyAttack
// [0x00020100] 
// Parameters infos:

void AKFWeap_MeleeBase::IsHeavyAttack ( )
{
	static UFunction* pFnIsHeavyAttack = NULL;

	if ( ! pFnIsHeavyAttack )
		pFnIsHeavyAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.IsHeavyAttack" );

	AKFWeap_MeleeBase_execIsHeavyAttack_Parms IsHeavyAttack_Parms;

	this->ProcessEvent ( pFnIsHeavyAttack, &IsHeavyAttack_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.PlayMeleeSettleAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::PlayMeleeSettleAnim ( )
{
	static UFunction* pFnPlayMeleeSettleAnim = NULL;

	if ( ! pFnPlayMeleeSettleAnim )
		pFnPlayMeleeSettleAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.PlayMeleeSettleAnim" );

	AKFWeap_MeleeBase_execPlayMeleeSettleAnim_Parms PlayMeleeSettleAnim_Parms;

	this->ProcessEvent ( pFnPlayMeleeSettleAnim, &PlayMeleeSettleAnim_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.IsLightAttack
// [0x00020100] 
// Parameters infos:

void AKFWeap_MeleeBase::IsLightAttack ( )
{
	static UFunction* pFnIsLightAttack = NULL;

	if ( ! pFnIsLightAttack )
		pFnIsLightAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.IsLightAttack" );

	AKFWeap_MeleeBase_execIsLightAttack_Parms IsLightAttack_Parms;

	this->ProcessEvent ( pFnIsLightAttack, &IsLightAttack_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.CanOverrideMagReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::CanOverrideMagReload ( )
{
	static UFunction* pFnCanOverrideMagReload = NULL;

	if ( ! pFnCanOverrideMagReload )
		pFnCanOverrideMagReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.CanOverrideMagReload" );

	AKFWeap_MeleeBase_execCanOverrideMagReload_Parms CanOverrideMagReload_Parms;

	this->ProcessEvent ( pFnCanOverrideMagReload, &CanOverrideMagReload_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.CanReload
// [0x00024102] 
// Parameters infos:

void AKFWeap_MeleeBase::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.CanReload" );

	AKFWeap_MeleeBase_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.UpkeepComplete
// [0x00020100] 
// Parameters infos:

void AKFWeap_MeleeBase::UpkeepComplete ( )
{
	static UFunction* pFnUpkeepComplete = NULL;

	if ( ! pFnUpkeepComplete )
		pFnUpkeepComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.UpkeepComplete" );

	AKFWeap_MeleeBase_execUpkeepComplete_Parms UpkeepComplete_Parms;

	this->ProcessEvent ( pFnUpkeepComplete, &UpkeepComplete_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.PlayMeleeAnimation
// [0x00420102] 
// Parameters infos:

void AKFWeap_MeleeBase::PlayMeleeAnimation ( )
{
	static UFunction* pFnPlayMeleeAnimation = NULL;

	if ( ! pFnPlayMeleeAnimation )
		pFnPlayMeleeAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.PlayMeleeAnimation" );

	AKFWeap_MeleeBase_execPlayMeleeAnimation_Parms PlayMeleeAnimation_Parms;

	this->ProcessEvent ( pFnPlayMeleeAnimation, &PlayMeleeAnimation_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.PlayWeaponAnimation
// [0x00024102] 
// Parameters infos:

void AKFWeap_MeleeBase::PlayWeaponAnimation ( )
{
	static UFunction* pFnPlayWeaponAnimation = NULL;

	if ( ! pFnPlayWeaponAnimation )
		pFnPlayWeaponAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.PlayWeaponAnimation" );

	AKFWeap_MeleeBase_execPlayWeaponAnimation_Parms PlayWeaponAnimation_Parms;

	this->ProcessEvent ( pFnPlayWeaponAnimation, &PlayWeaponAnimation_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ANIMNOTIFY_CleanBlood
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::ANIMNOTIFY_CleanBlood ( )
{
	static UFunction* pFnANIMNOTIFY_CleanBlood = NULL;

	if ( ! pFnANIMNOTIFY_CleanBlood )
		pFnANIMNOTIFY_CleanBlood = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ANIMNOTIFY_CleanBlood" );

	AKFWeap_MeleeBase_execANIMNOTIFY_CleanBlood_Parms ANIMNOTIFY_CleanBlood_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_CleanBlood, &ANIMNOTIFY_CleanBlood_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ServerSetBloody
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeap_MeleeBase::ServerSetBloody ( )
{
	static UFunction* pFnServerSetBloody = NULL;

	if ( ! pFnServerSetBloody )
		pFnServerSetBloody = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ServerSetBloody" );

	AKFWeap_MeleeBase_execServerSetBloody_Parms ServerSetBloody_Parms;

	this->ProcessEvent ( pFnServerSetBloody, &ServerSetBloody_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.AddBlood
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::AddBlood ( )
{
	static UFunction* pFnAddBlood = NULL;

	if ( ! pFnAddBlood )
		pFnAddBlood = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.AddBlood" );

	AKFWeap_MeleeBase_execAddBlood_Parms AddBlood_Parms;

	this->ProcessEvent ( pFnAddBlood, &AddBlood_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.GetMeleeDamage
// [0x00024102] 
// Parameters infos:

void AKFWeap_MeleeBase::GetMeleeDamage ( )
{
	static UFunction* pFnGetMeleeDamage = NULL;

	if ( ! pFnGetMeleeDamage )
		pFnGetMeleeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.GetMeleeDamage" );

	AKFWeap_MeleeBase_execGetMeleeDamage_Parms GetMeleeDamage_Parms;

	this->ProcessEvent ( pFnGetMeleeDamage, &GetMeleeDamage_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.RecieveClientImpact
// [0x00424802] ( FUNC_Event )
// Parameters infos:

void AKFWeap_MeleeBase::eventRecieveClientImpact ( )
{
	static UFunction* pFnRecieveClientImpact = NULL;

	if ( ! pFnRecieveClientImpact )
		pFnRecieveClientImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.RecieveClientImpact" );

	AKFWeap_MeleeBase_eventRecieveClientImpact_Parms RecieveClientImpact_Parms;

	this->ProcessEvent ( pFnRecieveClientImpact, &RecieveClientImpact_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.SendToFiringState
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::SendToFiringState ( )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.SendToFiringState" );

	AKFWeap_MeleeBase_execSendToFiringState_Parms SendToFiringState_Parms;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.SetIronSights
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::SetIronSights ( )
{
	static UFunction* pFnSetIronSights = NULL;

	if ( ! pFnSetIronSights )
		pFnSetIronSights = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.SetIronSights" );

	AKFWeap_MeleeBase_execSetIronSights_Parms SetIronSights_Parms;

	this->ProcessEvent ( pFnSetIronSights, &SetIronSights_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.AltFireMode" );

	AKFWeap_MeleeBase_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ServerStartMeleeFire
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeap_MeleeBase::ServerStartMeleeFire ( )
{
	static UFunction* pFnServerStartMeleeFire = NULL;

	if ( ! pFnServerStartMeleeFire )
		pFnServerStartMeleeFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ServerStartMeleeFire" );

	AKFWeap_MeleeBase_execServerStartMeleeFire_Parms ServerStartMeleeFire_Parms;

	this->ProcessEvent ( pFnServerStartMeleeFire, &ServerStartMeleeFire_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.StartMeleeFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::StartMeleeFire ( )
{
	static UFunction* pFnStartMeleeFire = NULL;

	if ( ! pFnStartMeleeFire )
		pFnStartMeleeFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.StartMeleeFire" );

	AKFWeap_MeleeBase_execStartMeleeFire_Parms StartMeleeFire_Parms;

	this->ProcessEvent ( pFnStartMeleeFire, &StartMeleeFire_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.StartFire" );

	AKFWeap_MeleeBase_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ServerSetSlowMovement
// [0x002200C2] 
// Parameters infos:

void AKFWeap_MeleeBase::ServerSetSlowMovement ( )
{
	static UFunction* pFnServerSetSlowMovement = NULL;

	if ( ! pFnServerSetSlowMovement )
		pFnServerSetSlowMovement = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ServerSetSlowMovement" );

	AKFWeap_MeleeBase_execServerSetSlowMovement_Parms ServerSetSlowMovement_Parms;

	this->ProcessEvent ( pFnServerSetSlowMovement, &ServerSetSlowMovement_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.SetSlowMovement
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::SetSlowMovement ( )
{
	static UFunction* pFnSetSlowMovement = NULL;

	if ( ! pFnSetSlowMovement )
		pFnSetSlowMovement = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.SetSlowMovement" );

	AKFWeap_MeleeBase_execSetSlowMovement_Parms SetSlowMovement_Parms;

	this->ProcessEvent ( pFnSetSlowMovement, &SetSlowMovement_Parms, NULL );
};

// Function KFGame.KFWeap_MeleeBase.ShouldOwnerWalk
// [0x00020102] 
// Parameters infos:

void AKFWeap_MeleeBase::ShouldOwnerWalk ( )
{
	static UFunction* pFnShouldOwnerWalk = NULL;

	if ( ! pFnShouldOwnerWalk )
		pFnShouldOwnerWalk = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_MeleeBase.ShouldOwnerWalk" );

	AKFWeap_MeleeBase_execShouldOwnerWalk_Parms ShouldOwnerWalk_Parms;

	this->ProcessEvent ( pFnShouldOwnerWalk, &ShouldOwnerWalk_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_PistolBase::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.GetTraderFilter" );

	AKFWeap_PistolBase_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.SetFOV
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_PistolBase::eventSetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.SetFOV" );

	AKFWeap_PistolBase_eventSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_PistolBase::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ShouldAutoReload" );

	AKFWeap_PistolBase_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ProcessInstantHitEx
// [0x00424102] 
// Parameters infos:

void AKFWeap_PistolBase::ProcessInstantHitEx ( )
{
	static UFunction* pFnProcessInstantHitEx = NULL;

	if ( ! pFnProcessInstantHitEx )
		pFnProcessInstantHitEx = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ProcessInstantHitEx" );

	AKFWeap_PistolBase_execProcessInstantHitEx_Parms ProcessInstantHitEx_Parms;

	this->ProcessEvent ( pFnProcessInstantHitEx, &ProcessInstantHitEx_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ResetBulletMeshes
// [0x00020102] 
// Parameters infos:

void AKFWeap_PistolBase::ResetBulletMeshes ( )
{
	static UFunction* pFnResetBulletMeshes = NULL;

	if ( ! pFnResetBulletMeshes )
		pFnResetBulletMeshes = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ResetBulletMeshes" );

	AKFWeap_PistolBase_execResetBulletMeshes_Parms ResetBulletMeshes_Parms;

	this->ProcessEvent ( pFnResetBulletMeshes, &ResetBulletMeshes_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ResetCylinder
// [0x00020102] 
// Parameters infos:

void AKFWeap_PistolBase::ResetCylinder ( )
{
	static UFunction* pFnResetCylinder = NULL;

	if ( ! pFnResetCylinder )
		pFnResetCylinder = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ResetCylinder" );

	AKFWeap_PistolBase_execResetCylinder_Parms ResetCylinder_Parms;

	this->ProcessEvent ( pFnResetCylinder, &ResetCylinder_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ANIMNOTIFY_ResetBulletMeshes
// [0x00020102] 
// Parameters infos:

void AKFWeap_PistolBase::ANIMNOTIFY_ResetBulletMeshes ( )
{
	static UFunction* pFnANIMNOTIFY_ResetBulletMeshes = NULL;

	if ( ! pFnANIMNOTIFY_ResetBulletMeshes )
		pFnANIMNOTIFY_ResetBulletMeshes = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ANIMNOTIFY_ResetBulletMeshes" );

	AKFWeap_PistolBase_execANIMNOTIFY_ResetBulletMeshes_Parms ANIMNOTIFY_ResetBulletMeshes_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_ResetBulletMeshes, &ANIMNOTIFY_ResetBulletMeshes_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.InitializeReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_PistolBase::InitializeReload ( )
{
	static UFunction* pFnInitializeReload = NULL;

	if ( ! pFnInitializeReload )
		pFnInitializeReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.InitializeReload" );

	AKFWeap_PistolBase_execInitializeReload_Parms InitializeReload_Parms;

	this->ProcessEvent ( pFnInitializeReload, &InitializeReload_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.SetCylinderRotation
// [0x00420500] ( FUNC_Native )
// Parameters infos:

void AKFWeap_PistolBase::SetCylinderRotation ( )
{
	static UFunction* pFnSetCylinderRotation = NULL;

	if ( ! pFnSetCylinderRotation )
		pFnSetCylinderRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.SetCylinderRotation" );

	AKFWeap_PistolBase_execSetCylinderRotation_Parms SetCylinderRotation_Parms;

	pFnSetCylinderRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCylinderRotation, &SetCylinderRotation_Parms, NULL );

	pFnSetCylinderRotation->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeap_PistolBase.OnCylinderRotationFinished
// [0x00420902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_PistolBase::eventOnCylinderRotationFinished ( )
{
	static UFunction* pFnOnCylinderRotationFinished = NULL;

	if ( ! pFnOnCylinderRotationFinished )
		pFnOnCylinderRotationFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.OnCylinderRotationFinished" );

	AKFWeap_PistolBase_eventOnCylinderRotationFinished_Parms OnCylinderRotationFinished_Parms;

	this->ProcessEvent ( pFnOnCylinderRotationFinished, &OnCylinderRotationFinished_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ResetCylinderInfo
// [0x00420102] 
// Parameters infos:

void AKFWeap_PistolBase::ResetCylinderInfo ( )
{
	static UFunction* pFnResetCylinderInfo = NULL;

	if ( ! pFnResetCylinderInfo )
		pFnResetCylinderInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ResetCylinderInfo" );

	AKFWeap_PistolBase_execResetCylinderInfo_Parms ResetCylinderInfo_Parms;

	this->ProcessEvent ( pFnResetCylinderInfo, &ResetCylinderInfo_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.IncrementCylinderRotation
// [0x00420102] 
// Parameters infos:

void AKFWeap_PistolBase::IncrementCylinderRotation ( )
{
	static UFunction* pFnIncrementCylinderRotation = NULL;

	if ( ! pFnIncrementCylinderRotation )
		pFnIncrementCylinderRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.IncrementCylinderRotation" );

	AKFWeap_PistolBase_execIncrementCylinderRotation_Parms IncrementCylinderRotation_Parms;

	this->ProcessEvent ( pFnIncrementCylinderRotation, &IncrementCylinderRotation_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.RotateCylinder
// [0x00424102] 
// Parameters infos:

void AKFWeap_PistolBase::RotateCylinder ( )
{
	static UFunction* pFnRotateCylinder = NULL;

	if ( ! pFnRotateCylinder )
		pFnRotateCylinder = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.RotateCylinder" );

	AKFWeap_PistolBase_execRotateCylinder_Parms RotateCylinder_Parms;

	this->ProcessEvent ( pFnRotateCylinder, &RotateCylinder_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ANIMNOTIFY_RotateCylinder
// [0x00020102] 
// Parameters infos:

void AKFWeap_PistolBase::ANIMNOTIFY_RotateCylinder ( )
{
	static UFunction* pFnANIMNOTIFY_RotateCylinder = NULL;

	if ( ! pFnANIMNOTIFY_RotateCylinder )
		pFnANIMNOTIFY_RotateCylinder = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ANIMNOTIFY_RotateCylinder" );

	AKFWeap_PistolBase_execANIMNOTIFY_RotateCylinder_Parms ANIMNOTIFY_RotateCylinder_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_RotateCylinder, &ANIMNOTIFY_RotateCylinder_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.CheckCylinderRotation
// [0x00424102] 
// Parameters infos:

void AKFWeap_PistolBase::CheckCylinderRotation ( )
{
	static UFunction* pFnCheckCylinderRotation = NULL;

	if ( ! pFnCheckCylinderRotation )
		pFnCheckCylinderRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.CheckCylinderRotation" );

	AKFWeap_PistolBase_execCheckCylinderRotation_Parms CheckCylinderRotation_Parms;

	this->ProcessEvent ( pFnCheckCylinderRotation, &CheckCylinderRotation_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ConsumeAmmoRevolver
// [0x00020102] 
// Parameters infos:

void AKFWeap_PistolBase::ConsumeAmmoRevolver ( )
{
	static UFunction* pFnConsumeAmmoRevolver = NULL;

	if ( ! pFnConsumeAmmoRevolver )
		pFnConsumeAmmoRevolver = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ConsumeAmmoRevolver" );

	AKFWeap_PistolBase_execConsumeAmmoRevolver_Parms ConsumeAmmoRevolver_Parms;

	this->ProcessEvent ( pFnConsumeAmmoRevolver, &ConsumeAmmoRevolver_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.PostInitAnimTreeRevolver
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_PistolBase::eventPostInitAnimTreeRevolver ( )
{
	static UFunction* pFnPostInitAnimTreeRevolver = NULL;

	if ( ! pFnPostInitAnimTreeRevolver )
		pFnPostInitAnimTreeRevolver = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.PostInitAnimTreeRevolver" );

	AKFWeap_PistolBase_eventPostInitAnimTreeRevolver_Parms PostInitAnimTreeRevolver_Parms;

	this->ProcessEvent ( pFnPostInitAnimTreeRevolver, &PostInitAnimTreeRevolver_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.ConsumeAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_PistolBase::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.ConsumeAmmo" );

	AKFWeap_PistolBase_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function KFGame.KFWeap_PistolBase.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_PistolBase::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_PistolBase.PostInitAnimTree" );

	AKFWeap_PistolBase_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.StartFire" );

	AKFWeap_DualBase_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.AltFireMode" );

	AKFWeap_DualBase_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ShouldAutoReload" );

	AKFWeap_DualBase_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.AddAmmoToSingleOnSell
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFWeap_DualBase::AddAmmoToSingleOnSell ( )
{
	static UFunction* pFnAddAmmoToSingleOnSell = NULL;

	if ( ! pFnAddAmmoToSingleOnSell )
		pFnAddAmmoToSingleOnSell = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.AddAmmoToSingleOnSell" );

	AKFWeap_DualBase_execAddAmmoToSingleOnSell_Parms AddAmmoToSingleOnSell_Parms;

	pFnAddAmmoToSingleOnSell->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddAmmoToSingleOnSell, &AddAmmoToSingleOnSell_Parms, NULL );

	pFnAddAmmoToSingleOnSell->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeap_DualBase.ResetBulletMeshesLeft
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ResetBulletMeshesLeft ( )
{
	static UFunction* pFnResetBulletMeshesLeft = NULL;

	if ( ! pFnResetBulletMeshesLeft )
		pFnResetBulletMeshesLeft = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ResetBulletMeshesLeft" );

	AKFWeap_DualBase_execResetBulletMeshesLeft_Parms ResetBulletMeshesLeft_Parms;

	this->ProcessEvent ( pFnResetBulletMeshesLeft, &ResetBulletMeshesLeft_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ResetBulletMeshes
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ResetBulletMeshes ( )
{
	static UFunction* pFnResetBulletMeshes = NULL;

	if ( ! pFnResetBulletMeshes )
		pFnResetBulletMeshes = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ResetBulletMeshes" );

	AKFWeap_DualBase_execResetBulletMeshes_Parms ResetBulletMeshes_Parms;

	this->ProcessEvent ( pFnResetBulletMeshes, &ResetBulletMeshes_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.RepositionUsedBullets
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::RepositionUsedBullets ( )
{
	static UFunction* pFnRepositionUsedBullets = NULL;

	if ( ! pFnRepositionUsedBullets )
		pFnRepositionUsedBullets = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.RepositionUsedBullets" );

	AKFWeap_DualBase_execRepositionUsedBullets_Parms RepositionUsedBullets_Parms;

	this->ProcessEvent ( pFnRepositionUsedBullets, &RepositionUsedBullets_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ResetCylinderLeft
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ResetCylinderLeft ( )
{
	static UFunction* pFnResetCylinderLeft = NULL;

	if ( ! pFnResetCylinderLeft )
		pFnResetCylinderLeft = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ResetCylinderLeft" );

	AKFWeap_DualBase_execResetCylinderLeft_Parms ResetCylinderLeft_Parms;

	this->ProcessEvent ( pFnResetCylinderLeft, &ResetCylinderLeft_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ResetCylinder
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ResetCylinder ( )
{
	static UFunction* pFnResetCylinder = NULL;

	if ( ! pFnResetCylinder )
		pFnResetCylinder = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ResetCylinder" );

	AKFWeap_DualBase_execResetCylinder_Parms ResetCylinder_Parms;

	this->ProcessEvent ( pFnResetCylinder, &ResetCylinder_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ANIMNOTIFY_ResetBulletMeshesLeft
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ANIMNOTIFY_ResetBulletMeshesLeft ( )
{
	static UFunction* pFnANIMNOTIFY_ResetBulletMeshesLeft = NULL;

	if ( ! pFnANIMNOTIFY_ResetBulletMeshesLeft )
		pFnANIMNOTIFY_ResetBulletMeshesLeft = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ANIMNOTIFY_ResetBulletMeshesLeft" );

	AKFWeap_DualBase_execANIMNOTIFY_ResetBulletMeshesLeft_Parms ANIMNOTIFY_ResetBulletMeshesLeft_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_ResetBulletMeshesLeft, &ANIMNOTIFY_ResetBulletMeshesLeft_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.InitializeReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::InitializeReload ( )
{
	static UFunction* pFnInitializeReload = NULL;

	if ( ! pFnInitializeReload )
		pFnInitializeReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.InitializeReload" );

	AKFWeap_DualBase_execInitializeReload_Parms InitializeReload_Parms;

	this->ProcessEvent ( pFnInitializeReload, &InitializeReload_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ANIMNOTIFY_RotateCylinder
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ANIMNOTIFY_RotateCylinder ( )
{
	static UFunction* pFnANIMNOTIFY_RotateCylinder = NULL;

	if ( ! pFnANIMNOTIFY_RotateCylinder )
		pFnANIMNOTIFY_RotateCylinder = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ANIMNOTIFY_RotateCylinder" );

	AKFWeap_DualBase_execANIMNOTIFY_RotateCylinder_Parms ANIMNOTIFY_RotateCylinder_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_RotateCylinder, &ANIMNOTIFY_RotateCylinder_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ConsumeAmmoRevolver
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ConsumeAmmoRevolver ( )
{
	static UFunction* pFnConsumeAmmoRevolver = NULL;

	if ( ! pFnConsumeAmmoRevolver )
		pFnConsumeAmmoRevolver = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ConsumeAmmoRevolver" );

	AKFWeap_DualBase_execConsumeAmmoRevolver_Parms ConsumeAmmoRevolver_Parms;

	this->ProcessEvent ( pFnConsumeAmmoRevolver, &ConsumeAmmoRevolver_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.PostInitAnimTreeRevolver
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_DualBase::eventPostInitAnimTreeRevolver ( )
{
	static UFunction* pFnPostInitAnimTreeRevolver = NULL;

	if ( ! pFnPostInitAnimTreeRevolver )
		pFnPostInitAnimTreeRevolver = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.PostInitAnimTreeRevolver" );

	AKFWeap_DualBase_eventPostInitAnimTreeRevolver_Parms PostInitAnimTreeRevolver_Parms;

	this->ProcessEvent ( pFnPostInitAnimTreeRevolver, &PostInitAnimTreeRevolver_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.UpdateOutOfAmmoEffects
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::UpdateOutOfAmmoEffects ( )
{
	static UFunction* pFnUpdateOutOfAmmoEffects = NULL;

	if ( ! pFnUpdateOutOfAmmoEffects )
		pFnUpdateOutOfAmmoEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.UpdateOutOfAmmoEffects" );

	AKFWeap_DualBase_execUpdateOutOfAmmoEffects_Parms UpdateOutOfAmmoEffects_Parms;

	this->ProcessEvent ( pFnUpdateOutOfAmmoEffects, &UpdateOutOfAmmoEffects_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ANIMNOTIFY_UnLockBolt
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ANIMNOTIFY_UnLockBolt ( )
{
	static UFunction* pFnANIMNOTIFY_UnLockBolt = NULL;

	if ( ! pFnANIMNOTIFY_UnLockBolt )
		pFnANIMNOTIFY_UnLockBolt = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ANIMNOTIFY_UnLockBolt" );

	AKFWeap_DualBase_execANIMNOTIFY_UnLockBolt_Parms ANIMNOTIFY_UnLockBolt_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_UnLockBolt, &ANIMNOTIFY_UnLockBolt_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ANIMNOTIFY_LockBolt
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ANIMNOTIFY_LockBolt ( )
{
	static UFunction* pFnANIMNOTIFY_LockBolt = NULL;

	if ( ! pFnANIMNOTIFY_LockBolt )
		pFnANIMNOTIFY_LockBolt = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ANIMNOTIFY_LockBolt" );

	AKFWeap_DualBase_execANIMNOTIFY_LockBolt_Parms ANIMNOTIFY_LockBolt_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_LockBolt, &ANIMNOTIFY_LockBolt_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.PerformReload
// [0x00024102] 
// Parameters infos:

void AKFWeap_DualBase::PerformReload ( )
{
	static UFunction* pFnPerformReload = NULL;

	if ( ! pFnPerformReload )
		pFnPerformReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.PerformReload" );

	AKFWeap_DualBase_execPerformReload_Parms PerformReload_Parms;

	this->ProcessEvent ( pFnPerformReload, &PerformReload_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.SetupDroppedPickup
// [0x00C20002] 
// Parameters infos:

void AKFWeap_DualBase::SetupDroppedPickup ( )
{
	static UFunction* pFnSetupDroppedPickup = NULL;

	if ( ! pFnSetupDroppedPickup )
		pFnSetupDroppedPickup = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.SetupDroppedPickup" );

	AKFWeap_DualBase_execSetupDroppedPickup_Parms SetupDroppedPickup_Parms;

	this->ProcessEvent ( pFnSetupDroppedPickup, &SetupDroppedPickup_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetCurrentMuzzleID
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::GetCurrentMuzzleID ( )
{
	static UFunction* pFnGetCurrentMuzzleID = NULL;

	if ( ! pFnGetCurrentMuzzleID )
		pFnGetCurrentMuzzleID = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetCurrentMuzzleID" );

	AKFWeap_DualBase_execGetCurrentMuzzleID_Parms GetCurrentMuzzleID_Parms;

	this->ProcessEvent ( pFnGetCurrentMuzzleID, &GetCurrentMuzzleID_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.StopFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::StopFireEffects ( )
{
	static UFunction* pFnStopFireEffects = NULL;

	if ( ! pFnStopFireEffects )
		pFnStopFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.StopFireEffects" );

	AKFWeap_DualBase_execStopFireEffects_Parms StopFireEffects_Parms;

	this->ProcessEvent ( pFnStopFireEffects, &StopFireEffects_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.SetFOV
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_DualBase::eventSetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.SetFOV" );

	AKFWeap_DualBase_eventSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.DetachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::DetachMuzzleFlash ( )
{
	static UFunction* pFnDetachMuzzleFlash = NULL;

	if ( ! pFnDetachMuzzleFlash )
		pFnDetachMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.DetachMuzzleFlash" );

	AKFWeap_DualBase_execDetachMuzzleFlash_Parms DetachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnDetachMuzzleFlash, &DetachMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.CauseMuzzleFlash" );

	AKFWeap_DualBase_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetLeftMuzzleLoc
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_DualBase::eventGetLeftMuzzleLoc ( )
{
	static UFunction* pFnGetLeftMuzzleLoc = NULL;

	if ( ! pFnGetLeftMuzzleLoc )
		pFnGetLeftMuzzleLoc = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetLeftMuzzleLoc" );

	AKFWeap_DualBase_eventGetLeftMuzzleLoc_Parms GetLeftMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetLeftMuzzleLoc, &GetLeftMuzzleLoc_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetMuzzleLoc
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_DualBase::eventGetMuzzleLoc ( )
{
	static UFunction* pFnGetMuzzleLoc = NULL;

	if ( ! pFnGetMuzzleLoc )
		pFnGetMuzzleLoc = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetMuzzleLoc" );

	AKFWeap_DualBase_eventGetMuzzleLoc_Parms GetMuzzleLoc_Parms;

	this->ProcessEvent ( pFnGetMuzzleLoc, &GetMuzzleLoc_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetLeftWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::GetLeftWeaponFireAnim ( )
{
	static UFunction* pFnGetLeftWeaponFireAnim = NULL;

	if ( ! pFnGetLeftWeaponFireAnim )
		pFnGetLeftWeaponFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetLeftWeaponFireAnim" );

	AKFWeap_DualBase_execGetLeftWeaponFireAnim_Parms GetLeftWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetLeftWeaponFireAnim, &GetLeftWeaponFireAnim_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetWeaponFireAnim" );

	AKFWeap_DualBase_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.ShouldPlayFireLast
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::ShouldPlayFireLast ( )
{
	static UFunction* pFnShouldPlayFireLast = NULL;

	if ( ! pFnShouldPlayFireLast )
		pFnShouldPlayFireLast = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.ShouldPlayFireLast" );

	AKFWeap_DualBase_execShouldPlayFireLast_Parms ShouldPlayFireLast_Parms;

	this->ProcessEvent ( pFnShouldPlayFireLast, &ShouldPlayFireLast_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.IncrementFlashCount
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::IncrementFlashCount ( )
{
	static UFunction* pFnIncrementFlashCount = NULL;

	if ( ! pFnIncrementFlashCount )
		pFnIncrementFlashCount = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.IncrementFlashCount" );

	AKFWeap_DualBase_execIncrementFlashCount_Parms IncrementFlashCount_Parms;

	this->ProcessEvent ( pFnIncrementFlashCount, &IncrementFlashCount_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetReloadAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::GetReloadAnimName ( )
{
	static UFunction* pFnGetReloadAnimName = NULL;

	if ( ! pFnGetReloadAnimName )
		pFnGetReloadAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetReloadAnimName" );

	AKFWeap_DualBase_execGetReloadAnimName_Parms GetReloadAnimName_Parms;

	this->ProcessEvent ( pFnGetReloadAnimName, &GetReloadAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetIronToIdleAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::GetIronToIdleAnim ( )
{
	static UFunction* pFnGetIronToIdleAnim = NULL;

	if ( ! pFnGetIronToIdleAnim )
		pFnGetIronToIdleAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetIronToIdleAnim" );

	AKFWeap_DualBase_execGetIronToIdleAnim_Parms GetIronToIdleAnim_Parms;

	this->ProcessEvent ( pFnGetIronToIdleAnim, &GetIronToIdleAnim_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetIdleToIronAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::GetIdleToIronAnim ( )
{
	static UFunction* pFnGetIdleToIronAnim = NULL;

	if ( ! pFnGetIdleToIronAnim )
		pFnGetIdleToIronAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetIdleToIronAnim" );

	AKFWeap_DualBase_execGetIdleToIronAnim_Parms GetIdleToIronAnim_Parms;

	this->ProcessEvent ( pFnGetIdleToIronAnim, &GetIdleToIronAnim_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.GetEquipAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::GetEquipAnimName ( )
{
	static UFunction* pFnGetEquipAnimName = NULL;

	if ( ! pFnGetEquipAnimName )
		pFnGetEquipAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.GetEquipAnimName" );

	AKFWeap_DualBase_execGetEquipAnimName_Parms GetEquipAnimName_Parms;

	this->ProcessEvent ( pFnGetEquipAnimName, &GetEquipAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.AttachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeap_DualBase::AttachMuzzleFlash ( )
{
	static UFunction* pFnAttachMuzzleFlash = NULL;

	if ( ! pFnAttachMuzzleFlash )
		pFnAttachMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.AttachMuzzleFlash" );

	AKFWeap_DualBase_execAttachMuzzleFlash_Parms AttachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnAttachMuzzleFlash, &AttachMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeap_DualBase.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_DualBase::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_DualBase.PostInitAnimTree" );

	AKFWeap_DualBase_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayLoopAnim
// [0x00020100] 
// Parameters infos:

void AKFWeaponAttachment::PlayLoopAnim ( )
{
	static UFunction* pFnPlayLoopAnim = NULL;

	if ( ! pFnPlayLoopAnim )
		pFnPlayLoopAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayLoopAnim" );

	AKFWeaponAttachment_execPlayLoopAnim_Parms PlayLoopAnim_Parms;

	this->ProcessEvent ( pFnPlayLoopAnim, &PlayLoopAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.StartLoopingAnim
// [0x00024102] 
// Parameters infos:

void AKFWeaponAttachment::StartLoopingAnim ( )
{
	static UFunction* pFnStartLoopingAnim = NULL;

	if ( ! pFnStartLoopingAnim )
		pFnStartLoopingAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.StartLoopingAnim" );

	AKFWeaponAttachment_execStartLoopingAnim_Parms StartLoopingAnim_Parms;

	this->ProcessEvent ( pFnStartLoopingAnim, &StartLoopingAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.HasOutdoorLighting
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::HasOutdoorLighting ( )
{
	static UFunction* pFnHasOutdoorLighting = NULL;

	if ( ! pFnHasOutdoorLighting )
		pFnHasOutdoorLighting = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.HasOutdoorLighting" );

	AKFWeaponAttachment_execHasOutdoorLighting_Parms HasOutdoorLighting_Parms;

	this->ProcessEvent ( pFnHasOutdoorLighting, &HasOutdoorLighting_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.HasIndoorLighting
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::HasIndoorLighting ( )
{
	static UFunction* pFnHasIndoorLighting = NULL;

	if ( ! pFnHasIndoorLighting )
		pFnHasIndoorLighting = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.HasIndoorLighting" );

	AKFWeaponAttachment_execHasIndoorLighting_Parms HasIndoorLighting_Parms;

	this->ProcessEvent ( pFnHasIndoorLighting, &HasIndoorLighting_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.SetMeshLightingChannels
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::SetMeshLightingChannels ( )
{
	static UFunction* pFnSetMeshLightingChannels = NULL;

	if ( ! pFnSetMeshLightingChannels )
		pFnSetMeshLightingChannels = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.SetMeshLightingChannels" );

	AKFWeaponAttachment_execSetMeshLightingChannels_Parms SetMeshLightingChannels_Parms;

	this->ProcessEvent ( pFnSetMeshLightingChannels, &SetMeshLightingChannels_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.InterruptWeaponAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::InterruptWeaponAnim ( )
{
	static UFunction* pFnInterruptWeaponAnim = NULL;

	if ( ! pFnInterruptWeaponAnim )
		pFnInterruptWeaponAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.InterruptWeaponAnim" );

	AKFWeaponAttachment_execInterruptWeaponAnim_Parms InterruptWeaponAnim_Parms;

	this->ProcessEvent ( pFnInterruptWeaponAnim, &InterruptWeaponAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeaponAttachment::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.Tick" );

	AKFWeaponAttachment_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayWeaponMeshAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayWeaponMeshAnim ( )
{
	static UFunction* pFnPlayWeaponMeshAnim = NULL;

	if ( ! pFnPlayWeaponMeshAnim )
		pFnPlayWeaponMeshAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayWeaponMeshAnim" );

	AKFWeaponAttachment_execPlayWeaponMeshAnim_Parms PlayWeaponMeshAnim_Parms;

	this->ProcessEvent ( pFnPlayWeaponMeshAnim, &PlayWeaponMeshAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayWeldAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayWeldAnim ( )
{
	static UFunction* pFnPlayWeldAnim = NULL;

	if ( ! pFnPlayWeldAnim )
		pFnPlayWeldAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayWeldAnim" );

	AKFWeaponAttachment_execPlayWeldAnim_Parms PlayWeldAnim_Parms;

	this->ProcessEvent ( pFnPlayWeldAnim, &PlayWeldAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayHealAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayHealAnim ( )
{
	static UFunction* pFnPlayHealAnim = NULL;

	if ( ! pFnPlayHealAnim )
		pFnPlayHealAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayHealAnim" );

	AKFWeaponAttachment_execPlayHealAnim_Parms PlayHealAnim_Parms;

	this->ProcessEvent ( pFnPlayHealAnim, &PlayHealAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayReloadSingleAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayReloadSingleAnim ( )
{
	static UFunction* pFnPlayReloadSingleAnim = NULL;

	if ( ! pFnPlayReloadSingleAnim )
		pFnPlayReloadSingleAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayReloadSingleAnim" );

	AKFWeaponAttachment_execPlayReloadSingleAnim_Parms PlayReloadSingleAnim_Parms;

	this->ProcessEvent ( pFnPlayReloadSingleAnim, &PlayReloadSingleAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayReloadMagazineAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayReloadMagazineAnim ( )
{
	static UFunction* pFnPlayReloadMagazineAnim = NULL;

	if ( ! pFnPlayReloadMagazineAnim )
		pFnPlayReloadMagazineAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayReloadMagazineAnim" );

	AKFWeaponAttachment_execPlayReloadMagazineAnim_Parms PlayReloadMagazineAnim_Parms;

	this->ProcessEvent ( pFnPlayReloadMagazineAnim, &PlayReloadMagazineAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayMeleeSustainedAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayMeleeSustainedAnim ( )
{
	static UFunction* pFnPlayMeleeSustainedAnim = NULL;

	if ( ! pFnPlayMeleeSustainedAnim )
		pFnPlayMeleeSustainedAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayMeleeSustainedAnim" );

	AKFWeaponAttachment_execPlayMeleeSustainedAnim_Parms PlayMeleeSustainedAnim_Parms;

	this->ProcessEvent ( pFnPlayMeleeSustainedAnim, &PlayMeleeSustainedAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayMeleeBlockAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayMeleeBlockAnim ( )
{
	static UFunction* pFnPlayMeleeBlockAnim = NULL;

	if ( ! pFnPlayMeleeBlockAnim )
		pFnPlayMeleeBlockAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayMeleeBlockAnim" );

	AKFWeaponAttachment_execPlayMeleeBlockAnim_Parms PlayMeleeBlockAnim_Parms;

	this->ProcessEvent ( pFnPlayMeleeBlockAnim, &PlayMeleeBlockAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.LoopWeaponMeleeAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::LoopWeaponMeleeAnim ( )
{
	static UFunction* pFnLoopWeaponMeleeAnim = NULL;

	if ( ! pFnLoopWeaponMeleeAnim )
		pFnLoopWeaponMeleeAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.LoopWeaponMeleeAnim" );

	AKFWeaponAttachment_execLoopWeaponMeleeAnim_Parms LoopWeaponMeleeAnim_Parms;

	this->ProcessEvent ( pFnLoopWeaponMeleeAnim, &LoopWeaponMeleeAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.GetRandomDirectionalMeleeAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::GetRandomDirectionalMeleeAnim ( )
{
	static UFunction* pFnGetRandomDirectionalMeleeAnim = NULL;

	if ( ! pFnGetRandomDirectionalMeleeAnim )
		pFnGetRandomDirectionalMeleeAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.GetRandomDirectionalMeleeAnim" );

	AKFWeaponAttachment_execGetRandomDirectionalMeleeAnim_Parms GetRandomDirectionalMeleeAnim_Parms;

	this->ProcessEvent ( pFnGetRandomDirectionalMeleeAnim, &GetRandomDirectionalMeleeAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayMeleeAtkAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayMeleeAtkAnim ( )
{
	static UFunction* pFnPlayMeleeAtkAnim = NULL;

	if ( ! pFnPlayMeleeAtkAnim )
		pFnPlayMeleeAtkAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayMeleeAtkAnim" );

	AKFWeaponAttachment_execPlayMeleeAtkAnim_Parms PlayMeleeAtkAnim_Parms;

	this->ProcessEvent ( pFnPlayMeleeAtkAnim, &PlayMeleeAtkAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.UpdateThirdPersonWeaponAction
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::UpdateThirdPersonWeaponAction ( )
{
	static UFunction* pFnUpdateThirdPersonWeaponAction = NULL;

	if ( ! pFnUpdateThirdPersonWeaponAction )
		pFnUpdateThirdPersonWeaponAction = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.UpdateThirdPersonWeaponAction" );

	AKFWeaponAttachment_execUpdateThirdPersonWeaponAction_Parms UpdateThirdPersonWeaponAction_Parms;

	this->ProcessEvent ( pFnUpdateThirdPersonWeaponAction, &UpdateThirdPersonWeaponAction_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.DecodeThirdPersonAnimRate
// [0x00020002] 
// Parameters infos:

void AKFWeaponAttachment::DecodeThirdPersonAnimRate ( )
{
	static UFunction* pFnDecodeThirdPersonAnimRate = NULL;

	if ( ! pFnDecodeThirdPersonAnimRate )
		pFnDecodeThirdPersonAnimRate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.DecodeThirdPersonAnimRate" );

	AKFWeaponAttachment_execDecodeThirdPersonAnimRate_Parms DecodeThirdPersonAnimRate_Parms;

	this->ProcessEvent ( pFnDecodeThirdPersonAnimRate, &DecodeThirdPersonAnimRate_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayCharacterMeshAnim
// [0x00024102] 
// Parameters infos:

void AKFWeaponAttachment::PlayCharacterMeshAnim ( )
{
	static UFunction* pFnPlayCharacterMeshAnim = NULL;

	if ( ! pFnPlayCharacterMeshAnim )
		pFnPlayCharacterMeshAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayCharacterMeshAnim" );

	AKFWeaponAttachment_execPlayCharacterMeshAnim_Parms PlayCharacterMeshAnim_Parms;

	this->ProcessEvent ( pFnPlayCharacterMeshAnim, &PlayCharacterMeshAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.OnWeaponStateChanged
// [0x00124000] 
// Parameters infos:

void AKFWeaponAttachment::OnWeaponStateChanged ( )
{
	static UFunction* pFnOnWeaponStateChanged = NULL;

	if ( ! pFnOnWeaponStateChanged )
		pFnOnWeaponStateChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.OnWeaponStateChanged" );

	AKFWeaponAttachment_execOnWeaponStateChanged_Parms OnWeaponStateChanged_Parms;

	this->ProcessEvent ( pFnOnWeaponStateChanged, &OnWeaponStateChanged_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.AddBattleBlood
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::AddBattleBlood ( )
{
	static UFunction* pFnAddBattleBlood = NULL;

	if ( ! pFnAddBattleBlood )
		pFnAddBattleBlood = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.AddBattleBlood" );

	AKFWeaponAttachment_execAddBattleBlood_Parms AddBattleBlood_Parms;

	this->ProcessEvent ( pFnAddBattleBlood, &AddBattleBlood_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.ANIMNOTIFY_ShellEject
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::ANIMNOTIFY_ShellEject ( )
{
	static UFunction* pFnANIMNOTIFY_ShellEject = NULL;

	if ( ! pFnANIMNOTIFY_ShellEject )
		pFnANIMNOTIFY_ShellEject = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.ANIMNOTIFY_ShellEject" );

	AKFWeaponAttachment_execANIMNOTIFY_ShellEject_Parms ANIMNOTIFY_ShellEject_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_ShellEject, &ANIMNOTIFY_ShellEject_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.CauseMuzzleFlash" );

	AKFWeaponAttachment_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.SpawnTracer
// [0x00820102] 
// Parameters infos:

void AKFWeaponAttachment::SpawnTracer ( )
{
	static UFunction* pFnSpawnTracer = NULL;

	if ( ! pFnSpawnTracer )
		pFnSpawnTracer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.SpawnTracer" );

	AKFWeaponAttachment_execSpawnTracer_Parms SpawnTracer_Parms;

	this->ProcessEvent ( pFnSpawnTracer, &SpawnTracer_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.GetMuzzleLocation
// [0x00824102] 
// Parameters infos:

void AKFWeaponAttachment::GetMuzzleLocation ( )
{
	static UFunction* pFnGetMuzzleLocation = NULL;

	if ( ! pFnGetMuzzleLocation )
		pFnGetMuzzleLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.GetMuzzleLocation" );

	AKFWeaponAttachment_execGetMuzzleLocation_Parms GetMuzzleLocation_Parms;

	this->ProcessEvent ( pFnGetMuzzleLocation, &GetMuzzleLocation_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.StopThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::StopThirdPersonFireEffects ( )
{
	static UFunction* pFnStopThirdPersonFireEffects = NULL;

	if ( ! pFnStopThirdPersonFireEffects )
		pFnStopThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.StopThirdPersonFireEffects" );

	AKFWeaponAttachment_execStopThirdPersonFireEffects_Parms StopThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnStopThirdPersonFireEffects, &StopThirdPersonFireEffects_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayPawnFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayPawnFireAnim ( )
{
	static UFunction* pFnPlayPawnFireAnim = NULL;

	if ( ! pFnPlayPawnFireAnim )
		pFnPlayPawnFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayPawnFireAnim" );

	AKFWeaponAttachment_execPlayPawnFireAnim_Parms PlayPawnFireAnim_Parms;

	this->ProcessEvent ( pFnPlayPawnFireAnim, &PlayPawnFireAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PlayWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::PlayWeaponFireAnim ( )
{
	static UFunction* pFnPlayWeaponFireAnim = NULL;

	if ( ! pFnPlayWeaponFireAnim )
		pFnPlayWeaponFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PlayWeaponFireAnim" );

	AKFWeaponAttachment_execPlayWeaponFireAnim_Parms PlayWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnPlayWeaponFireAnim, &PlayWeaponFireAnim_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::ThirdPersonFireEffects ( )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.ThirdPersonFireEffects" );

	AKFWeaponAttachment_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.StartFire
// [0x00020100] 
// Parameters infos:

void AKFWeaponAttachment::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.StartFire" );

	AKFWeaponAttachment_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.StopFirstPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::StopFirstPersonFireEffects ( )
{
	static UFunction* pFnStopFirstPersonFireEffects = NULL;

	if ( ! pFnStopFirstPersonFireEffects )
		pFnStopFirstPersonFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.StopFirstPersonFireEffects" );

	AKFWeaponAttachment_execStopFirstPersonFireEffects_Parms StopFirstPersonFireEffects_Parms;

	this->ProcessEvent ( pFnStopFirstPersonFireEffects, &StopFirstPersonFireEffects_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.FirstPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::FirstPersonFireEffects ( )
{
	static UFunction* pFnFirstPersonFireEffects = NULL;

	if ( ! pFnFirstPersonFireEffects )
		pFnFirstPersonFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.FirstPersonFireEffects" );

	AKFWeaponAttachment_execFirstPersonFireEffects_Parms FirstPersonFireEffects_Parms;

	this->ProcessEvent ( pFnFirstPersonFireEffects, &FirstPersonFireEffects_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.ActorEffectIsRelevant
// [0x00024102] 
// Parameters infos:

void AKFWeaponAttachment::ActorEffectIsRelevant ( )
{
	static UFunction* pFnActorEffectIsRelevant = NULL;

	if ( ! pFnActorEffectIsRelevant )
		pFnActorEffectIsRelevant = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.ActorEffectIsRelevant" );

	AKFWeaponAttachment_execActorEffectIsRelevant_Parms ActorEffectIsRelevant_Parms;

	this->ProcessEvent ( pFnActorEffectIsRelevant, &ActorEffectIsRelevant_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.SetWeaponSkin
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWeaponAttachment::eventSetWeaponSkin ( )
{
	static UFunction* pFnSetWeaponSkin = NULL;

	if ( ! pFnSetWeaponSkin )
		pFnSetWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.SetWeaponSkin" );

	AKFWeaponAttachment_eventSetWeaponSkin_Parms SetWeaponSkin_Parms;

	this->ProcessEvent ( pFnSetWeaponSkin, &SetWeaponSkin_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.AttachLaserSight
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::AttachLaserSight ( )
{
	static UFunction* pFnAttachLaserSight = NULL;

	if ( ! pFnAttachLaserSight )
		pFnAttachLaserSight = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.AttachLaserSight" );

	AKFWeaponAttachment_execAttachLaserSight_Parms AttachLaserSight_Parms;

	this->ProcessEvent ( pFnAttachLaserSight, &AttachLaserSight_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.AttachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::AttachMuzzleFlash ( )
{
	static UFunction* pFnAttachMuzzleFlash = NULL;

	if ( ! pFnAttachMuzzleFlash )
		pFnAttachMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.AttachMuzzleFlash" );

	AKFWeaponAttachment_execAttachMuzzleFlash_Parms AttachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnAttachMuzzleFlash, &AttachMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.DetachFrom
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::DetachFrom ( )
{
	static UFunction* pFnDetachFrom = NULL;

	if ( ! pFnDetachFrom )
		pFnDetachFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.DetachFrom" );

	AKFWeaponAttachment_execDetachFrom_Parms DetachFrom_Parms;

	this->ProcessEvent ( pFnDetachFrom, &DetachFrom_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.AttachTo
// [0x00020102] 
// Parameters infos:

void AKFWeaponAttachment::AttachTo ( )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.AttachTo" );

	AKFWeaponAttachment_execAttachTo_Parms AttachTo_Parms;

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWeaponAttachment::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.PreBeginPlay" );

	AKFWeaponAttachment_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFWeaponAttachment.ChangeVisibility
// [0x00020C00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFWeaponAttachment::eventChangeVisibility ( )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAttachment.ChangeVisibility" );

	AKFWeaponAttachment_eventChangeVisibility_Parms ChangeVisibility_Parms;

	pFnChangeVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );

	pFnChangeVisibility->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeaponDefinition.GetTotalUpgradePrice
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::GetTotalUpgradePrice ( )
{
	static UFunction* pFnGetTotalUpgradePrice = NULL;

	if ( ! pFnGetTotalUpgradePrice )
		pFnGetTotalUpgradePrice = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.GetTotalUpgradePrice" );

	UKFWeaponDefinition_execGetTotalUpgradePrice_Parms GetTotalUpgradePrice_Parms;

	this->ProcessEvent ( pFnGetTotalUpgradePrice, &GetTotalUpgradePrice_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.GetUpgradeSellPrice
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::GetUpgradeSellPrice ( )
{
	static UFunction* pFnGetUpgradeSellPrice = NULL;

	if ( ! pFnGetUpgradeSellPrice )
		pFnGetUpgradeSellPrice = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.GetUpgradeSellPrice" );

	UKFWeaponDefinition_execGetUpgradeSellPrice_Parms GetUpgradeSellPrice_Parms;

	this->ProcessEvent ( pFnGetUpgradeSellPrice, &GetUpgradeSellPrice_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.GetUpgradePrice
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::GetUpgradePrice ( )
{
	static UFunction* pFnGetUpgradePrice = NULL;

	if ( ! pFnGetUpgradePrice )
		pFnGetUpgradePrice = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.GetUpgradePrice" );

	UKFWeaponDefinition_execGetUpgradePrice_Parms GetUpgradePrice_Parms;

	this->ProcessEvent ( pFnGetUpgradePrice, &GetUpgradePrice_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.UsesSecondaryAmmo
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::UsesSecondaryAmmo ( )
{
	static UFunction* pFnUsesSecondaryAmmo = NULL;

	if ( ! pFnUsesSecondaryAmmo )
		pFnUsesSecondaryAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.UsesSecondaryAmmo" );

	UKFWeaponDefinition_execUsesSecondaryAmmo_Parms UsesSecondaryAmmo_Parms;

	this->ProcessEvent ( pFnUsesSecondaryAmmo, &UsesSecondaryAmmo_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.UsesAmmo
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::UsesAmmo ( )
{
	static UFunction* pFnUsesAmmo = NULL;

	if ( ! pFnUsesAmmo )
		pFnUsesAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.UsesAmmo" );

	UKFWeaponDefinition_execUsesAmmo_Parms UsesAmmo_Parms;

	this->ProcessEvent ( pFnUsesAmmo, &UsesAmmo_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.GetItemLocalization
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::GetItemLocalization ( )
{
	static UFunction* pFnGetItemLocalization = NULL;

	if ( ! pFnGetItemLocalization )
		pFnGetItemLocalization = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.GetItemLocalization" );

	UKFWeaponDefinition_execGetItemLocalization_Parms GetItemLocalization_Parms;

	this->ProcessEvent ( pFnGetItemLocalization, &GetItemLocalization_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.GetItemDescription
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::GetItemDescription ( )
{
	static UFunction* pFnGetItemDescription = NULL;

	if ( ! pFnGetItemDescription )
		pFnGetItemDescription = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.GetItemDescription" );

	UKFWeaponDefinition_execGetItemDescription_Parms GetItemDescription_Parms;

	this->ProcessEvent ( pFnGetItemDescription, &GetItemDescription_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.GetItemCategory
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::GetItemCategory ( )
{
	static UFunction* pFnGetItemCategory = NULL;

	if ( ! pFnGetItemCategory )
		pFnGetItemCategory = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.GetItemCategory" );

	UKFWeaponDefinition_execGetItemCategory_Parms GetItemCategory_Parms;

	this->ProcessEvent ( pFnGetItemCategory, &GetItemCategory_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.GetItemName
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::GetItemName ( )
{
	static UFunction* pFnGetItemName = NULL;

	if ( ! pFnGetItemName )
		pFnGetItemName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.GetItemName" );

	UKFWeaponDefinition_execGetItemName_Parms GetItemName_Parms;

	this->ProcessEvent ( pFnGetItemName, &GetItemName_Parms, NULL );
};

// Function KFGame.KFWeaponDefinition.GetImagePath
// [0x00022002] 
// Parameters infos:

void UKFWeaponDefinition::GetImagePath ( )
{
	static UFunction* pFnGetImagePath = NULL;

	if ( ! pFnGetImagePath )
		pFnGetImagePath = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponDefinition.GetImagePath" );

	UKFWeaponDefinition_execGetImagePath_Parms GetImagePath_Parms;

	this->ProcessEvent ( pFnGetImagePath, &GetImagePath_Parms, NULL );
};

// Function KFGame.KFWeaponSkinList.IsSkinEquip
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFWeaponSkinList::IsSkinEquip ( )
{
	static UFunction* pFnIsSkinEquip = NULL;

	if ( ! pFnIsSkinEquip )
		pFnIsSkinEquip = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponSkinList.IsSkinEquip" );

	UKFWeaponSkinList_execIsSkinEquip_Parms IsSkinEquip_Parms;

	pFnIsSkinEquip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSkinEquip, &IsSkinEquip_Parms, NULL );

	pFnIsSkinEquip->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeaponSkinList.SaveWeaponSkin
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFWeaponSkinList::SaveWeaponSkin ( )
{
	static UFunction* pFnSaveWeaponSkin = NULL;

	if ( ! pFnSaveWeaponSkin )
		pFnSaveWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponSkinList.SaveWeaponSkin" );

	UKFWeaponSkinList_execSaveWeaponSkin_Parms SaveWeaponSkin_Parms;

	pFnSaveWeaponSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveWeaponSkin, &SaveWeaponSkin_Parms, NULL );

	pFnSaveWeaponSkin->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeaponSkinList.GetWeaponSkinPaths
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFWeaponSkinList::GetWeaponSkinPaths ( )
{
	static UFunction* pFnGetWeaponSkinPaths = NULL;

	if ( ! pFnGetWeaponSkinPaths )
		pFnGetWeaponSkinPaths = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponSkinList.GetWeaponSkinPaths" );

	UKFWeaponSkinList_execGetWeaponSkinPaths_Parms GetWeaponSkinPaths_Parms;

	pFnGetWeaponSkinPaths->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWeaponSkinPaths, &GetWeaponSkinPaths_Parms, NULL );

	pFnGetWeaponSkinPaths->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeaponSkinList.GetWeaponSkin
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFWeaponSkinList::GetWeaponSkin ( )
{
	static UFunction* pFnGetWeaponSkin = NULL;

	if ( ! pFnGetWeaponSkin )
		pFnGetWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponSkinList.GetWeaponSkin" );

	UKFWeaponSkinList_execGetWeaponSkin_Parms GetWeaponSkin_Parms;

	pFnGetWeaponSkin->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWeaponSkin, &GetWeaponSkin_Parms, NULL );

	pFnGetWeaponSkin->FunctionFlags |= 0x400;
};

// Function KFGame.KFWeldableActor.NotifyPathChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFWeldableActor::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.NotifyPathChanged" );

	AKFWeldableActor_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function KFGame.KFWeldableActor.AddExplosiveWeld
// [0x00020002] 
// Parameters infos:

void AKFWeldableActor::AddExplosiveWeld ( )
{
	static UFunction* pFnAddExplosiveWeld = NULL;

	if ( ! pFnAddExplosiveWeld )
		pFnAddExplosiveWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.AddExplosiveWeld" );

	AKFWeldableActor_execAddExplosiveWeld_Parms AddExplosiveWeld_Parms;

	this->ProcessEvent ( pFnAddExplosiveWeld, &AddExplosiveWeld_Parms, NULL );
};

// Function KFGame.KFWeldableActor.CanExplosiveWeld
// [0x00020002] 
// Parameters infos:

void AKFWeldableActor::CanExplosiveWeld ( )
{
	static UFunction* pFnCanExplosiveWeld = NULL;

	if ( ! pFnCanExplosiveWeld )
		pFnCanExplosiveWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.CanExplosiveWeld" );

	AKFWeldableActor_execCanExplosiveWeld_Parms CanExplosiveWeld_Parms;

	this->ProcessEvent ( pFnCanExplosiveWeld, &CanExplosiveWeld_Parms, NULL );
};

// Function KFGame.KFWeldableActor.BeingUnwelded
// [0x00020002] 
// Parameters infos:

void AKFWeldableActor::BeingUnwelded ( )
{
	static UFunction* pFnBeingUnwelded = NULL;

	if ( ! pFnBeingUnwelded )
		pFnBeingUnwelded = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.BeingUnwelded" );

	AKFWeldableActor_execBeingUnwelded_Parms BeingUnwelded_Parms;

	this->ProcessEvent ( pFnBeingUnwelded, &BeingUnwelded_Parms, NULL );
};

// Function KFGame.KFWeldableActor.BeingWelded
// [0x00020002] 
// Parameters infos:

void AKFWeldableActor::BeingWelded ( )
{
	static UFunction* pFnBeingWelded = NULL;

	if ( ! pFnBeingWelded )
		pFnBeingWelded = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.BeingWelded" );

	AKFWeldableActor_execBeingWelded_Parms BeingWelded_Parms;

	this->ProcessEvent ( pFnBeingWelded, &BeingWelded_Parms, NULL );
};

// Function KFGame.KFWeldableActor.PlayDestroyed
// [0x00020100] 
// Parameters infos:

void AKFWeldableActor::PlayDestroyed ( )
{
	static UFunction* pFnPlayDestroyed = NULL;

	if ( ! pFnPlayDestroyed )
		pFnPlayDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.PlayDestroyed" );

	AKFWeldableActor_execPlayDestroyed_Parms PlayDestroyed_Parms;

	this->ProcessEvent ( pFnPlayDestroyed, &PlayDestroyed_Parms, NULL );
};

// Function KFGame.KFWeldableActor.UpdateIntegrityMIC
// [0x00020100] 
// Parameters infos:

void AKFWeldableActor::UpdateIntegrityMIC ( )
{
	static UFunction* pFnUpdateIntegrityMIC = NULL;

	if ( ! pFnUpdateIntegrityMIC )
		pFnUpdateIntegrityMIC = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.UpdateIntegrityMIC" );

	AKFWeldableActor_execUpdateIntegrityMIC_Parms UpdateIntegrityMIC_Parms;

	this->ProcessEvent ( pFnUpdateIntegrityMIC, &UpdateIntegrityMIC_Parms, NULL );
};

// Function KFGame.KFWeldableActor.CompleteRepair
// [0x00020100] 
// Parameters infos:

void AKFWeldableActor::CompleteRepair ( )
{
	static UFunction* pFnCompleteRepair = NULL;

	if ( ! pFnCompleteRepair )
		pFnCompleteRepair = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.CompleteRepair" );

	AKFWeldableActor_execCompleteRepair_Parms CompleteRepair_Parms;

	this->ProcessEvent ( pFnCompleteRepair, &CompleteRepair_Parms, NULL );
};

// Function KFGame.KFWeldableActor.Repair
// [0x00024000] 
// Parameters infos:

void AKFWeldableActor::Repair ( )
{
	static UFunction* pFnRepair = NULL;

	if ( ! pFnRepair )
		pFnRepair = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.Repair" );

	AKFWeldableActor_execRepair_Parms Repair_Parms;

	this->ProcessEvent ( pFnRepair, &Repair_Parms, NULL );
};

// Function KFGame.KFWeldableActor.UpdateWeldIntegrity
// [0x00020102] 
// Parameters infos:

void AKFWeldableActor::UpdateWeldIntegrity ( )
{
	static UFunction* pFnUpdateWeldIntegrity = NULL;

	if ( ! pFnUpdateWeldIntegrity )
		pFnUpdateWeldIntegrity = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.UpdateWeldIntegrity" );

	AKFWeldableActor_execUpdateWeldIntegrity_Parms UpdateWeldIntegrity_Parms;

	this->ProcessEvent ( pFnUpdateWeldIntegrity, &UpdateWeldIntegrity_Parms, NULL );
};

// Function KFGame.KFWeldableActor.FastenWeld
// [0x00024000] 
// Parameters infos:

void AKFWeldableActor::FastenWeld ( )
{
	static UFunction* pFnFastenWeld = NULL;

	if ( ! pFnFastenWeld )
		pFnFastenWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.FastenWeld" );

	AKFWeldableActor_execFastenWeld_Parms FastenWeld_Parms;

	this->ProcessEvent ( pFnFastenWeld, &FastenWeld_Parms, NULL );
};

// Function KFGame.KFWeldableActor.InitializeWeldableComponent
// [0x00020100] 
// Parameters infos:

void AKFWeldableActor::InitializeWeldableComponent ( )
{
	static UFunction* pFnInitializeWeldableComponent = NULL;

	if ( ! pFnInitializeWeldableComponent )
		pFnInitializeWeldableComponent = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.InitializeWeldableComponent" );

	AKFWeldableActor_execInitializeWeldableComponent_Parms InitializeWeldableComponent_Parms;

	this->ProcessEvent ( pFnInitializeWeldableComponent, &InitializeWeldableComponent_Parms, NULL );
};

// Function KFGame.KFWeldableActor.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeldableActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.PostBeginPlay" );

	AKFWeldableActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFWeldableActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeldableActor::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableActor.ReplicatedEvent" );

	AKFWeldableActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFDoorActor.Reset
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.Reset" );

	AKFDoorActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFDoorActor.GetAIDoorDamageScale
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::GetAIDoorDamageScale ( )
{
	static UFunction* pFnGetAIDoorDamageScale = NULL;

	if ( ! pFnGetAIDoorDamageScale )
		pFnGetAIDoorDamageScale = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.GetAIDoorDamageScale" );

	AKFDoorActor_execGetAIDoorDamageScale_Parms GetAIDoorDamageScale_Parms;

	this->ProcessEvent ( pFnGetAIDoorDamageScale, &GetAIDoorDamageScale_Parms, NULL );
};

// Function KFGame.KFDoorActor.GetQueuedDoorAICounts
// [0x00420002] 
// Parameters infos:

void AKFDoorActor::GetQueuedDoorAICounts ( )
{
	static UFunction* pFnGetQueuedDoorAICounts = NULL;

	if ( ! pFnGetQueuedDoorAICounts )
		pFnGetQueuedDoorAICounts = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.GetQueuedDoorAICounts" );

	AKFDoorActor_execGetQueuedDoorAICounts_Parms GetQueuedDoorAICounts_Parms;

	this->ProcessEvent ( pFnGetQueuedDoorAICounts, &GetQueuedDoorAICounts_Parms, NULL );
};

// Function KFGame.KFDoorActor.DrawRepairHUD
// [0x00820102] 
// Parameters infos:

void AKFDoorActor::DrawRepairHUD ( )
{
	static UFunction* pFnDrawRepairHUD = NULL;

	if ( ! pFnDrawRepairHUD )
		pFnDrawRepairHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.DrawRepairHUD" );

	AKFDoorActor_execDrawRepairHUD_Parms DrawRepairHUD_Parms;

	this->ProcessEvent ( pFnDrawRepairHUD, &DrawRepairHUD_Parms, NULL );
};

// Function KFGame.KFDoorActor.DrawWeldHUD
// [0x00820102] 
// Parameters infos:

void AKFDoorActor::DrawWeldHUD ( )
{
	static UFunction* pFnDrawWeldHUD = NULL;

	if ( ! pFnDrawWeldHUD )
		pFnDrawWeldHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.DrawWeldHUD" );

	AKFDoorActor_execDrawWeldHUD_Parms DrawWeldHUD_Parms;

	this->ProcessEvent ( pFnDrawWeldHUD, &DrawWeldHUD_Parms, NULL );
};

// Function KFGame.KFDoorActor.DrawDoorHUD
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFDoorActor::eventDrawDoorHUD ( )
{
	static UFunction* pFnDrawDoorHUD = NULL;

	if ( ! pFnDrawDoorHUD )
		pFnDrawDoorHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.DrawDoorHUD" );

	AKFDoorActor_eventDrawDoorHUD_Parms DrawDoorHUD_Parms;

	this->ProcessEvent ( pFnDrawDoorHUD, &DrawDoorHUD_Parms, NULL );
};

// Function KFGame.KFDoorActor.NotifyAIDoorOpened
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::NotifyAIDoorOpened ( )
{
	static UFunction* pFnNotifyAIDoorOpened = NULL;

	if ( ! pFnNotifyAIDoorOpened )
		pFnNotifyAIDoorOpened = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.NotifyAIDoorOpened" );

	AKFDoorActor_execNotifyAIDoorOpened_Parms NotifyAIDoorOpened_Parms;

	this->ProcessEvent ( pFnNotifyAIDoorOpened, &NotifyAIDoorOpened_Parms, NULL );
};

// Function KFGame.KFDoorActor.WeldedShut
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::WeldedShut ( )
{
	static UFunction* pFnWeldedShut = NULL;

	if ( ! pFnWeldedShut )
		pFnWeldedShut = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.WeldedShut" );

	AKFDoorActor_execWeldedShut_Parms WeldedShut_Parms;

	this->ProcessEvent ( pFnWeldedShut, &WeldedShut_Parms, NULL );
};

// Function KFGame.KFDoorActor.UnderAttack
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::UnderAttack ( )
{
	static UFunction* pFnUnderAttack = NULL;

	if ( ! pFnUnderAttack )
		pFnUnderAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.UnderAttack" );

	AKFDoorActor_execUnderAttack_Parms UnderAttack_Parms;

	this->ProcessEvent ( pFnUnderAttack, &UnderAttack_Parms, NULL );
};

// Function KFGame.KFDoorActor.GetSoundEffectFromType
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::GetSoundEffectFromType ( )
{
	static UFunction* pFnGetSoundEffectFromType = NULL;

	if ( ! pFnGetSoundEffectFromType )
		pFnGetSoundEffectFromType = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.GetSoundEffectFromType" );

	AKFDoorActor_execGetSoundEffectFromType_Parms GetSoundEffectFromType_Parms;

	this->ProcessEvent ( pFnGetSoundEffectFromType, &GetSoundEffectFromType_Parms, NULL );
};

// Function KFGame.KFDoorActor.PlayMovingSound
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFDoorActor::PlayMovingSound ( )
{
	static UFunction* pFnPlayMovingSound = NULL;

	if ( ! pFnPlayMovingSound )
		pFnPlayMovingSound = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.PlayMovingSound" );

	AKFDoorActor_execPlayMovingSound_Parms PlayMovingSound_Parms;

	this->ProcessEvent ( pFnPlayMovingSound, &PlayMovingSound_Parms, NULL );
};

// Function KFGame.KFDoorActor.ResetHingedDoor
// [0x00024102] 
// Parameters infos:

void AKFDoorActor::ResetHingedDoor ( )
{
	static UFunction* pFnResetHingedDoor = NULL;

	if ( ! pFnResetHingedDoor )
		pFnResetHingedDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.ResetHingedDoor" );

	AKFDoorActor_execResetHingedDoor_Parms ResetHingedDoor_Parms;

	this->ProcessEvent ( pFnResetHingedDoor, &ResetHingedDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.SpawnBrokenDoors
// [0x00820102] 
// Parameters infos:

void AKFDoorActor::SpawnBrokenDoors ( )
{
	static UFunction* pFnSpawnBrokenDoors = NULL;

	if ( ! pFnSpawnBrokenDoors )
		pFnSpawnBrokenDoors = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.SpawnBrokenDoors" );

	AKFDoorActor_execSpawnBrokenDoors_Parms SpawnBrokenDoors_Parms;

	this->ProcessEvent ( pFnSpawnBrokenDoors, &SpawnBrokenDoors_Parms, NULL );
};

// Function KFGame.KFDoorActor.DestroyHingedDoor
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::DestroyHingedDoor ( )
{
	static UFunction* pFnDestroyHingedDoor = NULL;

	if ( ! pFnDestroyHingedDoor )
		pFnDestroyHingedDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.DestroyHingedDoor" );

	AKFDoorActor_execDestroyHingedDoor_Parms DestroyHingedDoor_Parms;

	this->ProcessEvent ( pFnDestroyHingedDoor, &DestroyHingedDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.SetRBCollideWithDeadPawn
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::SetRBCollideWithDeadPawn ( )
{
	static UFunction* pFnSetRBCollideWithDeadPawn = NULL;

	if ( ! pFnSetRBCollideWithDeadPawn )
		pFnSetRBCollideWithDeadPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.SetRBCollideWithDeadPawn" );

	AKFDoorActor_execSetRBCollideWithDeadPawn_Parms SetRBCollideWithDeadPawn_Parms;

	this->ProcessEvent ( pFnSetRBCollideWithDeadPawn, &SetRBCollideWithDeadPawn_Parms, NULL );
};

// Function KFGame.KFDoorActor.UpdateIntegrityMIC
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::UpdateIntegrityMIC ( )
{
	static UFunction* pFnUpdateIntegrityMIC = NULL;

	if ( ! pFnUpdateIntegrityMIC )
		pFnUpdateIntegrityMIC = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.UpdateIntegrityMIC" );

	AKFDoorActor_execUpdateIntegrityMIC_Parms UpdateIntegrityMIC_Parms;

	this->ProcessEvent ( pFnUpdateIntegrityMIC, &UpdateIntegrityMIC_Parms, NULL );
};

// Function KFGame.KFDoorActor.UpdateHealthScalars
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::UpdateHealthScalars ( )
{
	static UFunction* pFnUpdateHealthScalars = NULL;

	if ( ! pFnUpdateHealthScalars )
		pFnUpdateHealthScalars = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.UpdateHealthScalars" );

	AKFDoorActor_execUpdateHealthScalars_Parms UpdateHealthScalars_Parms;

	this->ProcessEvent ( pFnUpdateHealthScalars, &UpdateHealthScalars_Parms, NULL );
};

// Function KFGame.KFDoorActor.UpdateHealthMICs
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::UpdateHealthMICs ( )
{
	static UFunction* pFnUpdateHealthMICs = NULL;

	if ( ! pFnUpdateHealthMICs )
		pFnUpdateHealthMICs = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.UpdateHealthMICs" );

	AKFDoorActor_execUpdateHealthMICs_Parms UpdateHealthMICs_Parms;

	this->ProcessEvent ( pFnUpdateHealthMICs, &UpdateHealthMICs_Parms, NULL );
};

// Function KFGame.KFDoorActor.ResetDoor
// [0x00024102] 
// Parameters infos:

void AKFDoorActor::ResetDoor ( )
{
	static UFunction* pFnResetDoor = NULL;

	if ( ! pFnResetDoor )
		pFnResetDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.ResetDoor" );

	AKFDoorActor_execResetDoor_Parms ResetDoor_Parms;

	this->ProcessEvent ( pFnResetDoor, &ResetDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.DestroyNonPhysicsDoor
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::DestroyNonPhysicsDoor ( )
{
	static UFunction* pFnDestroyNonPhysicsDoor = NULL;

	if ( ! pFnDestroyNonPhysicsDoor )
		pFnDestroyNonPhysicsDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.DestroyNonPhysicsDoor" );

	AKFDoorActor_execDestroyNonPhysicsDoor_Parms DestroyNonPhysicsDoor_Parms;

	this->ProcessEvent ( pFnDestroyNonPhysicsDoor, &DestroyNonPhysicsDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.PlayExplosion
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::PlayExplosion ( )
{
	static UFunction* pFnPlayExplosion = NULL;

	if ( ! pFnPlayExplosion )
		pFnPlayExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.PlayExplosion" );

	AKFDoorActor_execPlayExplosion_Parms PlayExplosion_Parms;

	this->ProcessEvent ( pFnPlayExplosion, &PlayExplosion_Parms, NULL );
};

// Function KFGame.KFDoorActor.PlayDestroyed
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::PlayDestroyed ( )
{
	static UFunction* pFnPlayDestroyed = NULL;

	if ( ! pFnPlayDestroyed )
		pFnPlayDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.PlayDestroyed" );

	AKFDoorActor_execPlayDestroyed_Parms PlayDestroyed_Parms;

	this->ProcessEvent ( pFnPlayDestroyed, &PlayDestroyed_Parms, NULL );
};

// Function KFGame.KFDoorActor.SpawnParticlesFromEffectParam
// [0x00824102] 
// Parameters infos:

void AKFDoorActor::SpawnParticlesFromEffectParam ( )
{
	static UFunction* pFnSpawnParticlesFromEffectParam = NULL;

	if ( ! pFnSpawnParticlesFromEffectParam )
		pFnSpawnParticlesFromEffectParam = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.SpawnParticlesFromEffectParam" );

	AKFDoorActor_execSpawnParticlesFromEffectParam_Parms SpawnParticlesFromEffectParam_Parms;

	this->ProcessEvent ( pFnSpawnParticlesFromEffectParam, &SpawnParticlesFromEffectParam_Parms, NULL );
};

// Function KFGame.KFDoorActor.GetBashAnimName
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::GetBashAnimName ( )
{
	static UFunction* pFnGetBashAnimName = NULL;

	if ( ! pFnGetBashAnimName )
		pFnGetBashAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.GetBashAnimName" );

	AKFDoorActor_execGetBashAnimName_Parms GetBashAnimName_Parms;

	this->ProcessEvent ( pFnGetBashAnimName, &GetBashAnimName_Parms, NULL );
};

// Function KFGame.KFDoorActor.PlayTakeHitEffects
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::PlayTakeHitEffects ( )
{
	static UFunction* pFnPlayTakeHitEffects = NULL;

	if ( ! pFnPlayTakeHitEffects )
		pFnPlayTakeHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.PlayTakeHitEffects" );

	AKFDoorActor_execPlayTakeHitEffects_Parms PlayTakeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayTakeHitEffects, &PlayTakeHitEffects_Parms, NULL );
};

// Function KFGame.KFDoorActor.IncrementHitCount
// [0x00820002] 
// Parameters infos:

void AKFDoorActor::IncrementHitCount ( )
{
	static UFunction* pFnIncrementHitCount = NULL;

	if ( ! pFnIncrementHitCount )
		pFnIncrementHitCount = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.IncrementHitCount" );

	AKFDoorActor_execIncrementHitCount_Parms IncrementHitCount_Parms;

	this->ProcessEvent ( pFnIncrementHitCount, &IncrementHitCount_Parms, NULL );
};

// Function KFGame.KFDoorActor.CanExplosiveWeld
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::CanExplosiveWeld ( )
{
	static UFunction* pFnCanExplosiveWeld = NULL;

	if ( ! pFnCanExplosiveWeld )
		pFnCanExplosiveWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.CanExplosiveWeld" );

	AKFDoorActor_execCanExplosiveWeld_Parms CanExplosiveWeld_Parms;

	this->ProcessEvent ( pFnCanExplosiveWeld, &CanExplosiveWeld_Parms, NULL );
};

// Function KFGame.KFDoorActor.AddExplosiveWeld
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::AddExplosiveWeld ( )
{
	static UFunction* pFnAddExplosiveWeld = NULL;

	if ( ! pFnAddExplosiveWeld )
		pFnAddExplosiveWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.AddExplosiveWeld" );

	AKFDoorActor_execAddExplosiveWeld_Parms AddExplosiveWeld_Parms;

	this->ProcessEvent ( pFnAddExplosiveWeld, &AddExplosiveWeld_Parms, NULL );
};

// Function KFGame.KFDoorActor.Timer_ResetRepairFlag
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::Timer_ResetRepairFlag ( )
{
	static UFunction* pFnTimer_ResetRepairFlag = NULL;

	if ( ! pFnTimer_ResetRepairFlag )
		pFnTimer_ResetRepairFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.Timer_ResetRepairFlag" );

	AKFDoorActor_execTimer_ResetRepairFlag_Parms Timer_ResetRepairFlag_Parms;

	this->ProcessEvent ( pFnTimer_ResetRepairFlag, &Timer_ResetRepairFlag_Parms, NULL );
};

// Function KFGame.KFDoorActor.Repair
// [0x00024002] 
// Parameters infos:

void AKFDoorActor::Repair ( )
{
	static UFunction* pFnRepair = NULL;

	if ( ! pFnRepair )
		pFnRepair = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.Repair" );

	AKFDoorActor_execRepair_Parms Repair_Parms;

	this->ProcessEvent ( pFnRepair, &Repair_Parms, NULL );
};

// Function KFGame.KFDoorActor.CompleteRepair
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::CompleteRepair ( )
{
	static UFunction* pFnCompleteRepair = NULL;

	if ( ! pFnCompleteRepair )
		pFnCompleteRepair = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.CompleteRepair" );

	AKFDoorActor_execCompleteRepair_Parms CompleteRepair_Parms;

	this->ProcessEvent ( pFnCompleteRepair, &CompleteRepair_Parms, NULL );
};

// Function KFGame.KFDoorActor.FastenWeld
// [0x00024002] 
// Parameters infos:

void AKFDoorActor::FastenWeld ( )
{
	static UFunction* pFnFastenWeld = NULL;

	if ( ! pFnFastenWeld )
		pFnFastenWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.FastenWeld" );

	AKFDoorActor_execFastenWeld_Parms FastenWeld_Parms;

	this->ProcessEvent ( pFnFastenWeld, &FastenWeld_Parms, NULL );
};

// Function KFGame.KFDoorActor.AllowDamageFrom
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::AllowDamageFrom ( )
{
	static UFunction* pFnAllowDamageFrom = NULL;

	if ( ! pFnAllowDamageFrom )
		pFnAllowDamageFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.AllowDamageFrom" );

	AKFDoorActor_execAllowDamageFrom_Parms AllowDamageFrom_Parms;

	this->ProcessEvent ( pFnAllowDamageFrom, &AllowDamageFrom_Parms, NULL );
};

// Function KFGame.KFDoorActor.DestroyDoor
// [0x00024002] 
// Parameters infos:

void AKFDoorActor::DestroyDoor ( )
{
	static UFunction* pFnDestroyDoor = NULL;

	if ( ! pFnDestroyDoor )
		pFnDestroyDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.DestroyDoor" );

	AKFDoorActor_execDestroyDoor_Parms DestroyDoor_Parms;

	this->ProcessEvent ( pFnDestroyDoor, &DestroyDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFDoorActor::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.TakeDamage" );

	AKFDoorActor_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function KFGame.KFDoorActor.OnWeldCompRepairProgressChanged
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::OnWeldCompRepairProgressChanged ( )
{
	static UFunction* pFnOnWeldCompRepairProgressChanged = NULL;

	if ( ! pFnOnWeldCompRepairProgressChanged )
		pFnOnWeldCompRepairProgressChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.OnWeldCompRepairProgressChanged" );

	AKFDoorActor_execOnWeldCompRepairProgressChanged_Parms OnWeldCompRepairProgressChanged_Parms;

	this->ProcessEvent ( pFnOnWeldCompRepairProgressChanged, &OnWeldCompRepairProgressChanged_Parms, NULL );
};

// Function KFGame.KFDoorActor.OnWeldCompWeldIntegrityChanged
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::OnWeldCompWeldIntegrityChanged ( )
{
	static UFunction* pFnOnWeldCompWeldIntegrityChanged = NULL;

	if ( ! pFnOnWeldCompWeldIntegrityChanged )
		pFnOnWeldCompWeldIntegrityChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.OnWeldCompWeldIntegrityChanged" );

	AKFDoorActor_execOnWeldCompWeldIntegrityChanged_Parms OnWeldCompWeldIntegrityChanged_Parms;

	this->ProcessEvent ( pFnOnWeldCompWeldIntegrityChanged, &OnWeldCompWeldIntegrityChanged_Parms, NULL );
};

// Function KFGame.KFDoorActor.AdjustWeldCompWeldAmount
// [0x00420002] 
// Parameters infos:

void AKFDoorActor::AdjustWeldCompWeldAmount ( )
{
	static UFunction* pFnAdjustWeldCompWeldAmount = NULL;

	if ( ! pFnAdjustWeldCompWeldAmount )
		pFnAdjustWeldCompWeldAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.AdjustWeldCompWeldAmount" );

	AKFDoorActor_execAdjustWeldCompWeldAmount_Parms AdjustWeldCompWeldAmount_Parms;

	this->ProcessEvent ( pFnAdjustWeldCompWeldAmount, &AdjustWeldCompWeldAmount_Parms, NULL );
};

// Function KFGame.KFDoorActor.InitializeWeldableComponent
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::InitializeWeldableComponent ( )
{
	static UFunction* pFnInitializeWeldableComponent = NULL;

	if ( ! pFnInitializeWeldableComponent )
		pFnInitializeWeldableComponent = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.InitializeWeldableComponent" );

	AKFDoorActor_execInitializeWeldableComponent_Parms InitializeWeldableComponent_Parms;

	this->ProcessEvent ( pFnInitializeWeldableComponent, &InitializeWeldableComponent_Parms, NULL );
};

// Function KFGame.KFDoorActor.TryPushPawns
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void AKFDoorActor::TryPushPawns ( )
{
	static UFunction* pFnTryPushPawns = NULL;

	if ( ! pFnTryPushPawns )
		pFnTryPushPawns = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.TryPushPawns" );

	AKFDoorActor_execTryPushPawns_Parms TryPushPawns_Parms;

	this->ProcessEvent ( pFnTryPushPawns, &TryPushPawns_Parms, NULL );
};

// Function KFGame.KFDoorActor.GetPushDirection
// [0x00820002] 
// Parameters infos:

void AKFDoorActor::GetPushDirection ( )
{
	static UFunction* pFnGetPushDirection = NULL;

	if ( ! pFnGetPushDirection )
		pFnGetPushDirection = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.GetPushDirection" );

	AKFDoorActor_execGetPushDirection_Parms GetPushDirection_Parms;

	this->ProcessEvent ( pFnGetPushDirection, &GetPushDirection_Parms, NULL );
};

// Function KFGame.KFDoorActor.OnCloseFinish
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::OnCloseFinish ( )
{
	static UFunction* pFnOnCloseFinish = NULL;

	if ( ! pFnOnCloseFinish )
		pFnOnCloseFinish = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.OnCloseFinish" );

	AKFDoorActor_execOnCloseFinish_Parms OnCloseFinish_Parms;

	this->ProcessEvent ( pFnOnCloseFinish, &OnCloseFinish_Parms, NULL );
};

// Function KFGame.KFDoorActor.OnOpenFinish
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::OnOpenFinish ( )
{
	static UFunction* pFnOnOpenFinish = NULL;

	if ( ! pFnOnOpenFinish )
		pFnOnOpenFinish = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.OnOpenFinish" );

	AKFDoorActor_execOnOpenFinish_Parms OnOpenFinish_Parms;

	this->ProcessEvent ( pFnOnOpenFinish, &OnOpenFinish_Parms, NULL );
};

// Function KFGame.KFDoorActor.NotifyDoorMoveCompleted
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDoorActor::eventNotifyDoorMoveCompleted ( )
{
	static UFunction* pFnNotifyDoorMoveCompleted = NULL;

	if ( ! pFnNotifyDoorMoveCompleted )
		pFnNotifyDoorMoveCompleted = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.NotifyDoorMoveCompleted" );

	AKFDoorActor_eventNotifyDoorMoveCompleted_Parms NotifyDoorMoveCompleted_Parms;

	this->ProcessEvent ( pFnNotifyDoorMoveCompleted, &NotifyDoorMoveCompleted_Parms, NULL );
};

// Function KFGame.KFDoorActor.CloseDoor
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFDoorActor::CloseDoor ( )
{
	static UFunction* pFnCloseDoor = NULL;

	if ( ! pFnCloseDoor )
		pFnCloseDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.CloseDoor" );

	AKFDoorActor_execCloseDoor_Parms CloseDoor_Parms;

	this->ProcessEvent ( pFnCloseDoor, &CloseDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.OpenSwingingDoor
// [0x00840103] ( FUNC_Final )
// Parameters infos:

void AKFDoorActor::OpenSwingingDoor ( )
{
	static UFunction* pFnOpenSwingingDoor = NULL;

	if ( ! pFnOpenSwingingDoor )
		pFnOpenSwingingDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.OpenSwingingDoor" );

	AKFDoorActor_execOpenSwingingDoor_Parms OpenSwingingDoor_Parms;

	this->ProcessEvent ( pFnOpenSwingingDoor, &OpenSwingingDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.OpenDoor
// [0x00880102] 
// Parameters infos:

void AKFDoorActor::OpenDoor ( )
{
	static UFunction* pFnOpenDoor = NULL;

	if ( ! pFnOpenDoor )
		pFnOpenDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.OpenDoor" );

	AKFDoorActor_execOpenDoor_Parms OpenDoor_Parms;

	this->ProcessEvent ( pFnOpenDoor, &OpenDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.Bump
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDoorActor::eventBump ( )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.Bump" );

	AKFDoorActor_eventBump_Parms Bump_Parms;

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function KFGame.KFDoorActor.UseDoor
// [0x00020002] 
// Parameters infos:

void AKFDoorActor::UseDoor ( )
{
	static UFunction* pFnUseDoor = NULL;

	if ( ! pFnUseDoor )
		pFnUseDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.UseDoor" );

	AKFDoorActor_execUseDoor_Parms UseDoor_Parms;

	this->ProcessEvent ( pFnUseDoor, &UseDoor_Parms, NULL );
};

// Function KFGame.KFDoorActor.OnToggle
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::OnToggle ( )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.OnToggle" );

	AKFDoorActor_execOnToggle_Parms OnToggle_Parms;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function KFGame.KFDoorActor.IsCompletelyOpen
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFDoorActor::IsCompletelyOpen ( )
{
	static UFunction* pFnIsCompletelyOpen = NULL;

	if ( ! pFnIsCompletelyOpen )
		pFnIsCompletelyOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.IsCompletelyOpen" );

	AKFDoorActor_execIsCompletelyOpen_Parms IsCompletelyOpen_Parms;

	pFnIsCompletelyOpen->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCompletelyOpen, &IsCompletelyOpen_Parms, NULL );

	pFnIsCompletelyOpen->FunctionFlags |= 0x400;
};

// Function KFGame.KFDoorActor.InitSkelControl
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::InitSkelControl ( )
{
	static UFunction* pFnInitSkelControl = NULL;

	if ( ! pFnInitSkelControl )
		pFnInitSkelControl = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.InitSkelControl" );

	AKFDoorActor_execInitSkelControl_Parms InitSkelControl_Parms;

	this->ProcessEvent ( pFnInitSkelControl, &InitSkelControl_Parms, NULL );
};

// Function KFGame.KFDoorActor.InitializeDoorMIC
// [0x00020102] 
// Parameters infos:

void AKFDoorActor::InitializeDoorMIC ( )
{
	static UFunction* pFnInitializeDoorMIC = NULL;

	if ( ! pFnInitializeDoorMIC )
		pFnInitializeDoorMIC = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.InitializeDoorMIC" );

	AKFDoorActor_execInitializeDoorMIC_Parms InitializeDoorMIC_Parms;

	this->ProcessEvent ( pFnInitializeDoorMIC, &InitializeDoorMIC_Parms, NULL );
};

// Function KFGame.KFDoorActor.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFDoorActor::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.PostBeginPlay" );

	AKFDoorActor_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFDoorActor.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDoorActor::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.PostInitAnimTree" );

	AKFDoorActor_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function KFGame.KFDoorActor.InitBrokenAttachment
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFDoorActor::InitBrokenAttachment ( )
{
	static UFunction* pFnInitBrokenAttachment = NULL;

	if ( ! pFnInitBrokenAttachment )
		pFnInitBrokenAttachment = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.InitBrokenAttachment" );

	AKFDoorActor_execInitBrokenAttachment_Parms InitBrokenAttachment_Parms;

	pFnInitBrokenAttachment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitBrokenAttachment, &InitBrokenAttachment_Parms, NULL );

	pFnInitBrokenAttachment->FunctionFlags |= 0x400;
};

// Function KFGame.KFDoorActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDoorActor::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorActor.ReplicatedEvent" );

	AKFDoorActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFRepairableActor.UpdateIntegrityMIC
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::UpdateIntegrityMIC ( )
{
	static UFunction* pFnUpdateIntegrityMIC = NULL;

	if ( ! pFnUpdateIntegrityMIC )
		pFnUpdateIntegrityMIC = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.UpdateIntegrityMIC" );

	AKFRepairableActor_execUpdateIntegrityMIC_Parms UpdateIntegrityMIC_Parms;

	this->ProcessEvent ( pFnUpdateIntegrityMIC, &UpdateIntegrityMIC_Parms, NULL );
};

// Function KFGame.KFRepairableActor.Reset
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.Reset" );

	AKFRepairableActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFRepairableActor.CompleteRepair
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::CompleteRepair ( )
{
	static UFunction* pFnCompleteRepair = NULL;

	if ( ! pFnCompleteRepair )
		pFnCompleteRepair = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.CompleteRepair" );

	AKFRepairableActor_execCompleteRepair_Parms CompleteRepair_Parms;

	this->ProcessEvent ( pFnCompleteRepair, &CompleteRepair_Parms, NULL );
};

// Function KFGame.KFRepairableActor.PlayDestroyed
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::PlayDestroyed ( )
{
	static UFunction* pFnPlayDestroyed = NULL;

	if ( ! pFnPlayDestroyed )
		pFnPlayDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.PlayDestroyed" );

	AKFRepairableActor_execPlayDestroyed_Parms PlayDestroyed_Parms;

	this->ProcessEvent ( pFnPlayDestroyed, &PlayDestroyed_Parms, NULL );
};

// Function KFGame.KFRepairableActor.FastenWeld
// [0x00024002] 
// Parameters infos:

void AKFRepairableActor::FastenWeld ( )
{
	static UFunction* pFnFastenWeld = NULL;

	if ( ! pFnFastenWeld )
		pFnFastenWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.FastenWeld" );

	AKFRepairableActor_execFastenWeld_Parms FastenWeld_Parms;

	this->ProcessEvent ( pFnFastenWeld, &FastenWeld_Parms, NULL );
};

// Function KFGame.KFRepairableActor.Repair
// [0x00024002] 
// Parameters infos:

void AKFRepairableActor::Repair ( )
{
	static UFunction* pFnRepair = NULL;

	if ( ! pFnRepair )
		pFnRepair = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.Repair" );

	AKFRepairableActor_execRepair_Parms Repair_Parms;

	this->ProcessEvent ( pFnRepair, &Repair_Parms, NULL );
};

// Function KFGame.KFRepairableActor.OnWeldCompWeldIntegrityChanged
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::OnWeldCompWeldIntegrityChanged ( )
{
	static UFunction* pFnOnWeldCompWeldIntegrityChanged = NULL;

	if ( ! pFnOnWeldCompWeldIntegrityChanged )
		pFnOnWeldCompWeldIntegrityChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.OnWeldCompWeldIntegrityChanged" );

	AKFRepairableActor_execOnWeldCompWeldIntegrityChanged_Parms OnWeldCompWeldIntegrityChanged_Parms;

	this->ProcessEvent ( pFnOnWeldCompWeldIntegrityChanged, &OnWeldCompWeldIntegrityChanged_Parms, NULL );
};

// Function KFGame.KFRepairableActor.InitializeWeldableComponent
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::InitializeWeldableComponent ( )
{
	static UFunction* pFnInitializeWeldableComponent = NULL;

	if ( ! pFnInitializeWeldableComponent )
		pFnInitializeWeldableComponent = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.InitializeWeldableComponent" );

	AKFRepairableActor_execInitializeWeldableComponent_Parms InitializeWeldableComponent_Parms;

	this->ProcessEvent ( pFnInitializeWeldableComponent, &InitializeWeldableComponent_Parms, NULL );
};

// Function KFGame.KFRepairableActor.InitializeRepairableActorMIC
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::InitializeRepairableActorMIC ( )
{
	static UFunction* pFnInitializeRepairableActorMIC = NULL;

	if ( ! pFnInitializeRepairableActorMIC )
		pFnInitializeRepairableActorMIC = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.InitializeRepairableActorMIC" );

	AKFRepairableActor_execInitializeRepairableActorMIC_Parms InitializeRepairableActorMIC_Parms;

	this->ProcessEvent ( pFnInitializeRepairableActorMIC, &InitializeRepairableActorMIC_Parms, NULL );
};

// Function KFGame.KFRepairableActor.InitializeIntegrityMIC
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::InitializeIntegrityMIC ( )
{
	static UFunction* pFnInitializeIntegrityMIC = NULL;

	if ( ! pFnInitializeIntegrityMIC )
		pFnInitializeIntegrityMIC = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.InitializeIntegrityMIC" );

	AKFRepairableActor_execInitializeIntegrityMIC_Parms InitializeIntegrityMIC_Parms;

	this->ProcessEvent ( pFnInitializeIntegrityMIC, &InitializeIntegrityMIC_Parms, NULL );
};

// Function KFGame.KFRepairableActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFRepairableActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.PostBeginPlay" );

	AKFRepairableActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFRepairableActor.SetupComponents
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFRepairableActor::SetupComponents ( )
{
	static UFunction* pFnSetupComponents = NULL;

	if ( ! pFnSetupComponents )
		pFnSetupComponents = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.SetupComponents" );

	AKFRepairableActor_execSetupComponents_Parms SetupComponents_Parms;

	pFnSetupComponents->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetupComponents, &SetupComponents_Parms, NULL );

	pFnSetupComponents->FunctionFlags |= 0x400;
};

// Function KFGame.KFRepairableActor.OnRepairCompelete
// [0x00120000] 
// Parameters infos:

void AKFRepairableActor::OnRepairCompelete ( )
{
	static UFunction* pFnOnRepairCompelete = NULL;

	if ( ! pFnOnRepairCompelete )
		pFnOnRepairCompelete = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActor.OnRepairCompelete" );

	AKFRepairableActor_execOnRepairCompelete_Parms OnRepairCompelete_Parms;

	this->ProcessEvent ( pFnOnRepairCompelete, &OnRepairCompelete_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.SetCollisionCylinderSize
// [0x00020102] 
// Parameters infos:

void AKFWeldableComponent::SetCollisionCylinderSize ( )
{
	static UFunction* pFnSetCollisionCylinderSize = NULL;

	if ( ! pFnSetCollisionCylinderSize )
		pFnSetCollisionCylinderSize = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.SetCollisionCylinderSize" );

	AKFWeldableComponent_execSetCollisionCylinderSize_Parms SetCollisionCylinderSize_Parms;

	this->ProcessEvent ( pFnSetCollisionCylinderSize, &SetCollisionCylinderSize_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.GetWeldPct
// [0x00020102] 
// Parameters infos:

void AKFWeldableComponent::GetWeldPct ( )
{
	static UFunction* pFnGetWeldPct = NULL;

	if ( ! pFnGetWeldPct )
		pFnGetWeldPct = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.GetWeldPct" );

	AKFWeldableComponent_execGetWeldPct_Parms GetWeldPct_Parms;

	this->ProcessEvent ( pFnGetWeldPct, &GetWeldPct_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.CanBeDemoWelded
// [0x00020102] 
// Parameters infos:

void AKFWeldableComponent::CanBeDemoWelded ( )
{
	static UFunction* pFnCanBeDemoWelded = NULL;

	if ( ! pFnCanBeDemoWelded )
		pFnCanBeDemoWelded = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.CanBeDemoWelded" );

	AKFWeldableComponent_execCanBeDemoWelded_Parms CanBeDemoWelded_Parms;

	this->ProcessEvent ( pFnCanBeDemoWelded, &CanBeDemoWelded_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.CanBeRepaired
// [0x00020102] 
// Parameters infos:

void AKFWeldableComponent::CanBeRepaired ( )
{
	static UFunction* pFnCanBeRepaired = NULL;

	if ( ! pFnCanBeRepaired )
		pFnCanBeRepaired = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.CanBeRepaired" );

	AKFWeldableComponent_execCanBeRepaired_Parms CanBeRepaired_Parms;

	this->ProcessEvent ( pFnCanBeRepaired, &CanBeRepaired_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.CanBeUnwelded
// [0x00020102] 
// Parameters infos:

void AKFWeldableComponent::CanBeUnwelded ( )
{
	static UFunction* pFnCanBeUnwelded = NULL;

	if ( ! pFnCanBeUnwelded )
		pFnCanBeUnwelded = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.CanBeUnwelded" );

	AKFWeldableComponent_execCanBeUnwelded_Parms CanBeUnwelded_Parms;

	this->ProcessEvent ( pFnCanBeUnwelded, &CanBeUnwelded_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.CanBeWelded
// [0x00020102] 
// Parameters infos:

void AKFWeldableComponent::CanBeWelded ( )
{
	static UFunction* pFnCanBeWelded = NULL;

	if ( ! pFnCanBeWelded )
		pFnCanBeWelded = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.CanBeWelded" );

	AKFWeldableComponent_execCanBeWelded_Parms CanBeWelded_Parms;

	this->ProcessEvent ( pFnCanBeWelded, &CanBeWelded_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.Repair
// [0x00024002] 
// Parameters infos:

void AKFWeldableComponent::Repair ( )
{
	static UFunction* pFnRepair = NULL;

	if ( ! pFnRepair )
		pFnRepair = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.Repair" );

	AKFWeldableComponent_execRepair_Parms Repair_Parms;

	this->ProcessEvent ( pFnRepair, &Repair_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.SetDestroyed
// [0x00020002] 
// Parameters infos:

void AKFWeldableComponent::SetDestroyed ( )
{
	static UFunction* pFnSetDestroyed = NULL;

	if ( ! pFnSetDestroyed )
		pFnSetDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.SetDestroyed" );

	AKFWeldableComponent_execSetDestroyed_Parms SetDestroyed_Parms;

	this->ProcessEvent ( pFnSetDestroyed, &SetDestroyed_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.SetDemoWeld
// [0x00020002] 
// Parameters infos:

void AKFWeldableComponent::SetDemoWeld ( )
{
	static UFunction* pFnSetDemoWeld = NULL;

	if ( ! pFnSetDemoWeld )
		pFnSetDemoWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.SetDemoWeld" );

	AKFWeldableComponent_execSetDemoWeld_Parms SetDemoWeld_Parms;

	this->ProcessEvent ( pFnSetDemoWeld, &SetDemoWeld_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.UpdateDemoWeld
// [0x00020002] 
// Parameters infos:

void AKFWeldableComponent::UpdateDemoWeld ( )
{
	static UFunction* pFnUpdateDemoWeld = NULL;

	if ( ! pFnUpdateDemoWeld )
		pFnUpdateDemoWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.UpdateDemoWeld" );

	AKFWeldableComponent_execUpdateDemoWeld_Parms UpdateDemoWeld_Parms;

	this->ProcessEvent ( pFnUpdateDemoWeld, &UpdateDemoWeld_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.SetRepairProgress
// [0x00020002] 
// Parameters infos:

void AKFWeldableComponent::SetRepairProgress ( )
{
	static UFunction* pFnSetRepairProgress = NULL;

	if ( ! pFnSetRepairProgress )
		pFnSetRepairProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.SetRepairProgress" );

	AKFWeldableComponent_execSetRepairProgress_Parms SetRepairProgress_Parms;

	this->ProcessEvent ( pFnSetRepairProgress, &SetRepairProgress_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.SetWeldIntegrity
// [0x00020002] 
// Parameters infos:

void AKFWeldableComponent::SetWeldIntegrity ( )
{
	static UFunction* pFnSetWeldIntegrity = NULL;

	if ( ! pFnSetWeldIntegrity )
		pFnSetWeldIntegrity = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.SetWeldIntegrity" );

	AKFWeldableComponent_execSetWeldIntegrity_Parms SetWeldIntegrity_Parms;

	this->ProcessEvent ( pFnSetWeldIntegrity, &SetWeldIntegrity_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.UpdateWeldIntegrity
// [0x00020002] 
// Parameters infos:

void AKFWeldableComponent::UpdateWeldIntegrity ( )
{
	static UFunction* pFnUpdateWeldIntegrity = NULL;

	if ( ! pFnUpdateWeldIntegrity )
		pFnUpdateWeldIntegrity = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.UpdateWeldIntegrity" );

	AKFWeldableComponent_execUpdateWeldIntegrity_Parms UpdateWeldIntegrity_Parms;

	this->ProcessEvent ( pFnUpdateWeldIntegrity, &UpdateWeldIntegrity_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.Weld
// [0x00024002] 
// Parameters infos:

void AKFWeldableComponent::Weld ( )
{
	static UFunction* pFnWeld = NULL;

	if ( ! pFnWeld )
		pFnWeld = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.Weld" );

	AKFWeldableComponent_execWeld_Parms Weld_Parms;

	this->ProcessEvent ( pFnWeld, &Weld_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeldableComponent::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.ReplicatedEvent" );

	AKFWeldableComponent_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.Delegate_OnRepairProgressChanged
// [0x00124000] 
// Parameters infos:

void AKFWeldableComponent::Delegate_OnRepairProgressChanged ( )
{
	static UFunction* pFnDelegate_OnRepairProgressChanged = NULL;

	if ( ! pFnDelegate_OnRepairProgressChanged )
		pFnDelegate_OnRepairProgressChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.Delegate_OnRepairProgressChanged" );

	AKFWeldableComponent_execDelegate_OnRepairProgressChanged_Parms Delegate_OnRepairProgressChanged_Parms;

	this->ProcessEvent ( pFnDelegate_OnRepairProgressChanged, &Delegate_OnRepairProgressChanged_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.Delegate_OnWeldIntegrityChanged
// [0x00124000] 
// Parameters infos:

void AKFWeldableComponent::Delegate_OnWeldIntegrityChanged ( )
{
	static UFunction* pFnDelegate_OnWeldIntegrityChanged = NULL;

	if ( ! pFnDelegate_OnWeldIntegrityChanged )
		pFnDelegate_OnWeldIntegrityChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.Delegate_OnWeldIntegrityChanged" );

	AKFWeldableComponent_execDelegate_OnWeldIntegrityChanged_Parms Delegate_OnWeldIntegrityChanged_Parms;

	this->ProcessEvent ( pFnDelegate_OnWeldIntegrityChanged, &Delegate_OnWeldIntegrityChanged_Parms, NULL );
};

// Function KFGame.KFWeldableComponent.Delegate_AdjustWeldAmount
// [0x00520000] 
// Parameters infos:

void AKFWeldableComponent::Delegate_AdjustWeldAmount ( )
{
	static UFunction* pFnDelegate_AdjustWeldAmount = NULL;

	if ( ! pFnDelegate_AdjustWeldAmount )
		pFnDelegate_AdjustWeldAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableComponent.Delegate_AdjustWeldAmount" );

	AKFWeldableComponent_execDelegate_AdjustWeldAmount_Parms Delegate_AdjustWeldAmount_Parms;

	this->ProcessEvent ( pFnDelegate_AdjustWeldAmount, &Delegate_AdjustWeldAmount_Parms, NULL );
};

// Function KFGame.KFAIController.GetCommandStack
// [0x00420002] 
// Parameters infos:

void AKFAIController::GetCommandStack ( )
{
	static UFunction* pFnGetCommandStack = NULL;

	if ( ! pFnGetCommandStack )
		pFnGetCommandStack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetCommandStack" );

	AKFAIController_execGetCommandStack_Parms GetCommandStack_Parms;

	this->ProcessEvent ( pFnGetCommandStack, &GetCommandStack_Parms, NULL );
};

// Function KFGame.KFAIController.DrawMaxHitRange
// [0x00820002] 
// Parameters infos:

void AKFAIController::DrawMaxHitRange ( )
{
	static UFunction* pFnDrawMaxHitRange = NULL;

	if ( ! pFnDrawMaxHitRange )
		pFnDrawMaxHitRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawMaxHitRange" );

	AKFAIController_execDrawMaxHitRange_Parms DrawMaxHitRange_Parms;

	this->ProcessEvent ( pFnDrawMaxHitRange, &DrawMaxHitRange_Parms, NULL );
};

// Function KFGame.KFAIController.DrawAttackRangeText
// [0x00820002] 
// Parameters infos:

void AKFAIController::DrawAttackRangeText ( )
{
	static UFunction* pFnDrawAttackRangeText = NULL;

	if ( ! pFnDrawAttackRangeText )
		pFnDrawAttackRangeText = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawAttackRangeText" );

	AKFAIController_execDrawAttackRangeText_Parms DrawAttackRangeText_Parms;

	this->ProcessEvent ( pFnDrawAttackRangeText, &DrawAttackRangeText_Parms, NULL );
};

// Function KFGame.KFAIController.DrawStrikeRangeLines
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventDrawStrikeRangeLines ( )
{
	static UFunction* pFnDrawStrikeRangeLines = NULL;

	if ( ! pFnDrawStrikeRangeLines )
		pFnDrawStrikeRangeLines = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawStrikeRangeLines" );

	AKFAIController_eventDrawStrikeRangeLines_Parms DrawStrikeRangeLines_Parms;

	this->ProcessEvent ( pFnDrawStrikeRangeLines, &DrawStrikeRangeLines_Parms, NULL );
};

// Function KFGame.KFAIController.DrawStrikeRange
// [0x00020002] 
// Parameters infos:

void AKFAIController::DrawStrikeRange ( )
{
	static UFunction* pFnDrawStrikeRange = NULL;

	if ( ! pFnDrawStrikeRange )
		pFnDrawStrikeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawStrikeRange" );

	AKFAIController_execDrawStrikeRange_Parms DrawStrikeRange_Parms;

	this->ProcessEvent ( pFnDrawStrikeRange, &DrawStrikeRange_Parms, NULL );
};

// Function KFGame.KFAIController.DrawStrikeRanges
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventDrawStrikeRanges ( )
{
	static UFunction* pFnDrawStrikeRanges = NULL;

	if ( ! pFnDrawStrikeRanges )
		pFnDrawStrikeRanges = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawStrikeRanges" );

	AKFAIController_eventDrawStrikeRanges_Parms DrawStrikeRanges_Parms;

	this->ProcessEvent ( pFnDrawStrikeRanges, &DrawStrikeRanges_Parms, NULL );
};

// Function KFGame.KFAIController.EvaluateThreatFrom
// [0x00824802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventEvaluateThreatFrom ( )
{
	static UFunction* pFnEvaluateThreatFrom = NULL;

	if ( ! pFnEvaluateThreatFrom )
		pFnEvaluateThreatFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EvaluateThreatFrom" );

	AKFAIController_eventEvaluateThreatFrom_Parms EvaluateThreatFrom_Parms;

	this->ProcessEvent ( pFnEvaluateThreatFrom, &EvaluateThreatFrom_Parms, NULL );
};

// Function KFGame.KFAIController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventGetPlayerViewPoint ( )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetPlayerViewPoint" );

	AKFAIController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );
};

// Function KFGame.KFAIController.EnterZedVictoryState
// [0x00020002] 
// Parameters infos:

void AKFAIController::EnterZedVictoryState ( )
{
	static UFunction* pFnEnterZedVictoryState = NULL;

	if ( ! pFnEnterZedVictoryState )
		pFnEnterZedVictoryState = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnterZedVictoryState" );

	AKFAIController_execEnterZedVictoryState_Parms EnterZedVictoryState_Parms;

	this->ProcessEvent ( pFnEnterZedVictoryState, &EnterZedVictoryState_Parms, NULL );
};

// Function KFGame.KFAIController.GetIsInZedVictoryState
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetIsInZedVictoryState ( )
{
	static UFunction* pFnGetIsInZedVictoryState = NULL;

	if ( ! pFnGetIsInZedVictoryState )
		pFnGetIsInZedVictoryState = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetIsInZedVictoryState" );

	AKFAIController_execGetIsInZedVictoryState_Parms GetIsInZedVictoryState_Parms;

	this->ProcessEvent ( pFnGetIsInZedVictoryState, &GetIsInZedVictoryState_Parms, NULL );
};

// Function KFGame.KFAIController.ResetKFAIC
// [0x00020002] 
// Parameters infos:

void AKFAIController::ResetKFAIC ( )
{
	static UFunction* pFnResetKFAIC = NULL;

	if ( ! pFnResetKFAIC )
		pFnResetKFAIC = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ResetKFAIC" );

	AKFAIController_execResetKFAIC_Parms ResetKFAIC_Parms;

	this->ProcessEvent ( pFnResetKFAIC, &ResetKFAIC_Parms, NULL );
};

// Function KFGame.KFAIController.SpawnEnraged
// [0x00020002] 
// Parameters infos:

void AKFAIController::SpawnEnraged ( )
{
	static UFunction* pFnSpawnEnraged = NULL;

	if ( ! pFnSpawnEnraged )
		pFnSpawnEnraged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SpawnEnraged" );

	AKFAIController_execSpawnEnraged_Parms SpawnEnraged_Parms;

	this->ProcessEvent ( pFnSpawnEnraged, &SpawnEnraged_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyEnRaged
// [0x00020000] 
// Parameters infos:

void AKFAIController::NotifyEnRaged ( )
{
	static UFunction* pFnNotifyEnRaged = NULL;

	if ( ! pFnNotifyEnRaged )
		pFnNotifyEnRaged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyEnRaged" );

	AKFAIController_execNotifyEnRaged_Parms NotifyEnRaged_Parms;

	this->ProcessEvent ( pFnNotifyEnRaged, &NotifyEnRaged_Parms, NULL );
};

// Function KFGame.KFAIController.GetMinDistanceToAnyPlayer
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetMinDistanceToAnyPlayer ( )
{
	static UFunction* pFnGetMinDistanceToAnyPlayer = NULL;

	if ( ! pFnGetMinDistanceToAnyPlayer )
		pFnGetMinDistanceToAnyPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetMinDistanceToAnyPlayer" );

	AKFAIController_execGetMinDistanceToAnyPlayer_Parms GetMinDistanceToAnyPlayer_Parms;

	this->ProcessEvent ( pFnGetMinDistanceToAnyPlayer, &GetMinDistanceToAnyPlayer_Parms, NULL );
};

// Function KFGame.KFAIController.DebugLogRoute
// [0x00020001] ( FUNC_Final )
// Parameters infos:

void AKFAIController::DebugLogRoute ( )
{
	static UFunction* pFnDebugLogRoute = NULL;

	if ( ! pFnDebugLogRoute )
		pFnDebugLogRoute = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DebugLogRoute" );

	AKFAIController_execDebugLogRoute_Parms DebugLogRoute_Parms;

	this->ProcessEvent ( pFnDebugLogRoute, &DebugLogRoute_Parms, NULL );
};

// Function KFGame.KFAIController.CanAttackDestructibles
// [0x00020002] 
// Parameters infos:

void AKFAIController::CanAttackDestructibles ( )
{
	static UFunction* pFnCanAttackDestructibles = NULL;

	if ( ! pFnCanAttackDestructibles )
		pFnCanAttackDestructibles = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanAttackDestructibles" );

	AKFAIController_execCanAttackDestructibles_Parms CanAttackDestructibles_Parms;

	this->ProcessEvent ( pFnCanAttackDestructibles, &CanAttackDestructibles_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyAttackActor
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifyAttackActor ( )
{
	static UFunction* pFnNotifyAttackActor = NULL;

	if ( ! pFnNotifyAttackActor )
		pFnNotifyAttackActor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyAttackActor" );

	AKFAIController_execNotifyAttackActor_Parms NotifyAttackActor_Parms;

	this->ProcessEvent ( pFnNotifyAttackActor, &NotifyAttackActor_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyAttackDoor
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifyAttackDoor ( )
{
	static UFunction* pFnNotifyAttackDoor = NULL;

	if ( ! pFnNotifyAttackDoor )
		pFnNotifyAttackDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyAttackDoor" );

	AKFAIController_execNotifyAttackDoor_Parms NotifyAttackDoor_Parms;

	this->ProcessEvent ( pFnNotifyAttackDoor, &NotifyAttackDoor_Parms, NULL );
};

// Function KFGame.KFAIController.DoorFinished
// [0x00020002] 
// Parameters infos:

void AKFAIController::DoorFinished ( )
{
	static UFunction* pFnDoorFinished = NULL;

	if ( ! pFnDoorFinished )
		pFnDoorFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoorFinished" );

	AKFAIController_execDoorFinished_Parms DoorFinished_Parms;

	this->ProcessEvent ( pFnDoorFinished, &DoorFinished_Parms, NULL );
};

// Function KFGame.KFAIController.Timer_WaitingForDoor
// [0x00020002] 
// Parameters infos:

void AKFAIController::Timer_WaitingForDoor ( )
{
	static UFunction* pFnTimer_WaitingForDoor = NULL;

	if ( ! pFnTimer_WaitingForDoor )
		pFnTimer_WaitingForDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Timer_WaitingForDoor" );

	AKFAIController_execTimer_WaitingForDoor_Parms Timer_WaitingForDoor_Parms;

	this->ProcessEvent ( pFnTimer_WaitingForDoor, &Timer_WaitingForDoor_Parms, NULL );
};

// Function KFGame.KFAIController.WaitForDoor
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventWaitForDoor ( )
{
	static UFunction* pFnWaitForDoor = NULL;

	if ( ! pFnWaitForDoor )
		pFnWaitForDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.WaitForDoor" );

	AKFAIController_eventWaitForDoor_Parms WaitForDoor_Parms;

	this->ProcessEvent ( pFnWaitForDoor, &WaitForDoor_Parms, NULL );
};

// Function KFGame.KFAIController.CanReachEvadeLocation
// [0x00020002] 
// Parameters infos:

void AKFAIController::CanReachEvadeLocation ( )
{
	static UFunction* pFnCanReachEvadeLocation = NULL;

	if ( ! pFnCanReachEvadeLocation )
		pFnCanReachEvadeLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanReachEvadeLocation" );

	AKFAIController_execCanReachEvadeLocation_Parms CanReachEvadeLocation_Parms;

	this->ProcessEvent ( pFnCanReachEvadeLocation, &CanReachEvadeLocation_Parms, NULL );
};

// Function KFGame.KFAIController.GetBestEvadeDir
// [0x00824003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::GetBestEvadeDir ( )
{
	static UFunction* pFnGetBestEvadeDir = NULL;

	if ( ! pFnGetBestEvadeDir )
		pFnGetBestEvadeDir = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetBestEvadeDir" );

	AKFAIController_execGetBestEvadeDir_Parms GetBestEvadeDir_Parms;

	this->ProcessEvent ( pFnGetBestEvadeDir, &GetBestEvadeDir_Parms, NULL );
};

// Function KFGame.KFAIController.CanEvade
// [0x00024002] 
// Parameters infos:

void AKFAIController::CanEvade ( )
{
	static UFunction* pFnCanEvade = NULL;

	if ( ! pFnCanEvade )
		pFnCanEvade = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanEvade" );

	AKFAIController_execCanEvade_Parms CanEvade_Parms;

	this->ProcessEvent ( pFnCanEvade, &CanEvade_Parms, NULL );
};

// Function KFGame.KFAIController.Timer_DoProjectileEvade
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::Timer_DoProjectileEvade ( )
{
	static UFunction* pFnTimer_DoProjectileEvade = NULL;

	if ( ! pFnTimer_DoProjectileEvade )
		pFnTimer_DoProjectileEvade = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Timer_DoProjectileEvade" );

	AKFAIController_execTimer_DoProjectileEvade_Parms Timer_DoProjectileEvade_Parms;

	this->ProcessEvent ( pFnTimer_DoProjectileEvade, &Timer_DoProjectileEvade_Parms, NULL );
};

// Function KFGame.KFAIController.CanEvadeGrenade
// [0x00020002] 
// Parameters infos:

void AKFAIController::CanEvadeGrenade ( )
{
	static UFunction* pFnCanEvadeGrenade = NULL;

	if ( ! pFnCanEvadeGrenade )
		pFnCanEvadeGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanEvadeGrenade" );

	AKFAIController_execCanEvadeGrenade_Parms CanEvadeGrenade_Parms;

	this->ProcessEvent ( pFnCanEvadeGrenade, &CanEvadeGrenade_Parms, NULL );
};

// Function KFGame.KFAIController.HandleProjectileWarning
// [0x00020002] 
// Parameters infos:

void AKFAIController::HandleProjectileWarning ( )
{
	static UFunction* pFnHandleProjectileWarning = NULL;

	if ( ! pFnHandleProjectileWarning )
		pFnHandleProjectileWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.HandleProjectileWarning" );

	AKFAIController_execHandleProjectileWarning_Parms HandleProjectileWarning_Parms;

	this->ProcessEvent ( pFnHandleProjectileWarning, &HandleProjectileWarning_Parms, NULL );
};

// Function KFGame.KFAIController.DoProjectileWarning
// [0x00020002] 
// Parameters infos:

void AKFAIController::DoProjectileWarning ( )
{
	static UFunction* pFnDoProjectileWarning = NULL;

	if ( ! pFnDoProjectileWarning )
		pFnDoProjectileWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoProjectileWarning" );

	AKFAIController_execDoProjectileWarning_Parms DoProjectileWarning_Parms;

	this->ProcessEvent ( pFnDoProjectileWarning, &DoProjectileWarning_Parms, NULL );
};

// Function KFGame.KFAIController.UpdateFriendlyDamageHistory
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::UpdateFriendlyDamageHistory ( )
{
	static UFunction* pFnUpdateFriendlyDamageHistory = NULL;

	if ( ! pFnUpdateFriendlyDamageHistory )
		pFnUpdateFriendlyDamageHistory = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.UpdateFriendlyDamageHistory" );

	AKFAIController_execUpdateFriendlyDamageHistory_Parms UpdateFriendlyDamageHistory_Parms;

	pFnUpdateFriendlyDamageHistory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFriendlyDamageHistory, &UpdateFriendlyDamageHistory_Parms, NULL );

	pFnUpdateFriendlyDamageHistory->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.NotifyFriendlyAIDamageTaken
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifyFriendlyAIDamageTaken ( )
{
	static UFunction* pFnNotifyFriendlyAIDamageTaken = NULL;

	if ( ! pFnNotifyFriendlyAIDamageTaken )
		pFnNotifyFriendlyAIDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyFriendlyAIDamageTaken" );

	AKFAIController_execNotifyFriendlyAIDamageTaken_Parms NotifyFriendlyAIDamageTaken_Parms;

	this->ProcessEvent ( pFnNotifyFriendlyAIDamageTaken, &NotifyFriendlyAIDamageTaken_Parms, NULL );
};

// Function KFGame.KFAIController.UpdateLasDamageTime
// [0x00020002] 
// Parameters infos:

void AKFAIController::UpdateLasDamageTime ( )
{
	static UFunction* pFnUpdateLasDamageTime = NULL;

	if ( ! pFnUpdateLasDamageTime )
		pFnUpdateLasDamageTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.UpdateLasDamageTime" );

	AKFAIController_execUpdateLasDamageTime_Parms UpdateLasDamageTime_Parms;

	this->ProcessEvent ( pFnUpdateLasDamageTime, &UpdateLasDamageTime_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyTakeHit
// [0x00820002] 
// Parameters infos:

void AKFAIController::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyTakeHit" );

	AKFAIController_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function KFGame.KFAIController.ReceiveLocationalWarning
// [0x00024002] 
// Parameters infos:

void AKFAIController::ReceiveLocationalWarning ( )
{
	static UFunction* pFnReceiveLocationalWarning = NULL;

	if ( ! pFnReceiveLocationalWarning )
		pFnReceiveLocationalWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ReceiveLocationalWarning" );

	AKFAIController_execReceiveLocationalWarning_Parms ReceiveLocationalWarning_Parms;

	this->ProcessEvent ( pFnReceiveLocationalWarning, &ReceiveLocationalWarning_Parms, NULL );
};

// Function KFGame.KFAIController.ReceiveProjectileWarning
// [0x00020000] 
// Parameters infos:

void AKFAIController::ReceiveProjectileWarning ( )
{
	static UFunction* pFnReceiveProjectileWarning = NULL;

	if ( ! pFnReceiveProjectileWarning )
		pFnReceiveProjectileWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ReceiveProjectileWarning" );

	AKFAIController_execReceiveProjectileWarning_Parms ReceiveProjectileWarning_Parms;

	this->ProcessEvent ( pFnReceiveProjectileWarning, &ReceiveProjectileWarning_Parms, NULL );
};

// Function KFGame.KFAIController.ReceiveMeleeWarning
// [0x00820002] 
// Parameters infos:

void AKFAIController::ReceiveMeleeWarning ( )
{
	static UFunction* pFnReceiveMeleeWarning = NULL;

	if ( ! pFnReceiveMeleeWarning )
		pFnReceiveMeleeWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ReceiveMeleeWarning" );

	AKFAIController_execReceiveMeleeWarning_Parms ReceiveMeleeWarning_Parms;

	this->ProcessEvent ( pFnReceiveMeleeWarning, &ReceiveMeleeWarning_Parms, NULL );
};

// Function KFGame.KFAIController.GetDangerEvadeDelay
// [0x00C20002] 
// Parameters infos:

void AKFAIController::GetDangerEvadeDelay ( )
{
	static UFunction* pFnGetDangerEvadeDelay = NULL;

	if ( ! pFnGetDangerEvadeDelay )
		pFnGetDangerEvadeDelay = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetDangerEvadeDelay" );

	AKFAIController_execGetDangerEvadeDelay_Parms GetDangerEvadeDelay_Parms;

	this->ProcessEvent ( pFnGetDangerEvadeDelay, &GetDangerEvadeDelay_Parms, NULL );
};

// Function KFGame.KFAIController.DrawBehaviorTreeIconOverhead
// [0x00020100] 
// Parameters infos:

void AKFAIController::DrawBehaviorTreeIconOverhead ( )
{
	static UFunction* pFnDrawBehaviorTreeIconOverhead = NULL;

	if ( ! pFnDrawBehaviorTreeIconOverhead )
		pFnDrawBehaviorTreeIconOverhead = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawBehaviorTreeIconOverhead" );

	AKFAIController_execDrawBehaviorTreeIconOverhead_Parms DrawBehaviorTreeIconOverhead_Parms;

	this->ProcessEvent ( pFnDrawBehaviorTreeIconOverhead, &DrawBehaviorTreeIconOverhead_Parms, NULL );
};

// Function KFGame.KFAIController.DrawDebugOverheadMovementPhaseData
// [0x00C20002] 
// Parameters infos:

void AKFAIController::DrawDebugOverheadMovementPhaseData ( )
{
	static UFunction* pFnDrawDebugOverheadMovementPhaseData = NULL;

	if ( ! pFnDrawDebugOverheadMovementPhaseData )
		pFnDrawDebugOverheadMovementPhaseData = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawDebugOverheadMovementPhaseData" );

	AKFAIController_execDrawDebugOverheadMovementPhaseData_Parms DrawDebugOverheadMovementPhaseData_Parms;

	this->ProcessEvent ( pFnDrawDebugOverheadMovementPhaseData, &DrawDebugOverheadMovementPhaseData_Parms, NULL );
};

// Function KFGame.KFAIController.IsAggroEnemySwitchAllowed
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsAggroEnemySwitchAllowed ( )
{
	static UFunction* pFnIsAggroEnemySwitchAllowed = NULL;

	if ( ! pFnIsAggroEnemySwitchAllowed )
		pFnIsAggroEnemySwitchAllowed = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsAggroEnemySwitchAllowed" );

	AKFAIController_execIsAggroEnemySwitchAllowed_Parms IsAggroEnemySwitchAllowed_Parms;

	this->ProcessEvent ( pFnIsAggroEnemySwitchAllowed, &IsAggroEnemySwitchAllowed_Parms, NULL );
};

// Function KFGame.KFAIController.DoDebugTurnInPlace
// [0x00024002] 
// Parameters infos:

void AKFAIController::DoDebugTurnInPlace ( )
{
	static UFunction* pFnDoDebugTurnInPlace = NULL;

	if ( ! pFnDoDebugTurnInPlace )
		pFnDoDebugTurnInPlace = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoDebugTurnInPlace" );

	AKFAIController_execDoDebugTurnInPlace_Parms DoDebugTurnInPlace_Parms;

	this->ProcessEvent ( pFnDoDebugTurnInPlace, &DoDebugTurnInPlace_Parms, NULL );
};

// Function KFGame.KFAIController.BeginDebugCommand
// [0x00020002] 
// Parameters infos:

void AKFAIController::BeginDebugCommand ( )
{
	static UFunction* pFnBeginDebugCommand = NULL;

	if ( ! pFnBeginDebugCommand )
		pFnBeginDebugCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.BeginDebugCommand" );

	AKFAIController_execBeginDebugCommand_Parms BeginDebugCommand_Parms;

	this->ProcessEvent ( pFnBeginDebugCommand, &BeginDebugCommand_Parms, NULL );
};

// Function KFGame.KFAIController.DrawDebug
// [0x00820102] 
// Parameters infos:

void AKFAIController::DrawDebug ( )
{
	static UFunction* pFnDrawDebug = NULL;

	if ( ! pFnDrawDebug )
		pFnDrawDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawDebug" );

	AKFAIController_execDrawDebug_Parms DrawDebug_Parms;

	this->ProcessEvent ( pFnDrawDebug, &DrawDebug_Parms, NULL );
};

// Function KFGame.KFAIController.IsDebugTextCategoryEnabled
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsDebugTextCategoryEnabled ( )
{
	static UFunction* pFnIsDebugTextCategoryEnabled = NULL;

	if ( ! pFnIsDebugTextCategoryEnabled )
		pFnIsDebugTextCategoryEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsDebugTextCategoryEnabled" );

	AKFAIController_execIsDebugTextCategoryEnabled_Parms IsDebugTextCategoryEnabled_Parms;

	this->ProcessEvent ( pFnIsDebugTextCategoryEnabled, &IsDebugTextCategoryEnabled_Parms, NULL );
};

// Function KFGame.KFAIController.DrawAttackInfo
// [0x00020002] 
// Parameters infos:

void AKFAIController::DrawAttackInfo ( )
{
	static UFunction* pFnDrawAttackInfo = NULL;

	if ( ! pFnDrawAttackInfo )
		pFnDrawAttackInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawAttackInfo" );

	AKFAIController_execDrawAttackInfo_Parms DrawAttackInfo_Parms;

	this->ProcessEvent ( pFnDrawAttackInfo, &DrawAttackInfo_Parms, NULL );
};

// Function KFGame.KFAIController.PostRenderFor
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventPostRenderFor ( )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.PostRenderFor" );

	AKFAIController_eventPostRenderFor_Parms PostRenderFor_Parms;

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function KFGame.KFAIController.SetPostRendering
// [0x00020002] 
// Parameters infos:

void AKFAIController::SetPostRendering ( )
{
	static UFunction* pFnSetPostRendering = NULL;

	if ( ! pFnSetPostRendering )
		pFnSetPostRendering = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetPostRendering" );

	AKFAIController_execSetPostRendering_Parms SetPostRendering_Parms;

	this->ProcessEvent ( pFnSetPostRendering, &SetPostRendering_Parms, NULL );
};

// Function KFGame.KFAIController.DumpStack
// [0x00020002] 
// Parameters infos:

void AKFAIController::DumpStack ( )
{
	static UFunction* pFnDumpStack = NULL;

	if ( ! pFnDumpStack )
		pFnDumpStack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DumpStack" );

	AKFAIController_execDumpStack_Parms DumpStack_Parms;

	this->ProcessEvent ( pFnDumpStack, &DumpStack_Parms, NULL );
};

// Function KFGame.KFAIController.Debug_AIPaused
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventDebug_AIPaused ( )
{
	static UFunction* pFnDebug_AIPaused = NULL;

	if ( ! pFnDebug_AIPaused )
		pFnDebug_AIPaused = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Debug_AIPaused" );

	AKFAIController_eventDebug_AIPaused_Parms Debug_AIPaused_Parms;

	this->ProcessEvent ( pFnDebug_AIPaused, &Debug_AIPaused_Parms, NULL );
};

// Function KFGame.KFAIController.Debug_CheckRecentMoveTime
// [0x00020000] 
// Parameters infos:

void AKFAIController::Debug_CheckRecentMoveTime ( )
{
	static UFunction* pFnDebug_CheckRecentMoveTime = NULL;

	if ( ! pFnDebug_CheckRecentMoveTime )
		pFnDebug_CheckRecentMoveTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Debug_CheckRecentMoveTime" );

	AKFAIController_execDebug_CheckRecentMoveTime_Parms Debug_CheckRecentMoveTime_Parms;

	this->ProcessEvent ( pFnDebug_CheckRecentMoveTime, &Debug_CheckRecentMoveTime_Parms, NULL );
};

// Function KFGame.KFAIController.AmIAllowedToStillUsePathNodes
// [0x00020002] 
// Parameters infos:

void AKFAIController::AmIAllowedToStillUsePathNodes ( )
{
	static UFunction* pFnAmIAllowedToStillUsePathNodes = NULL;

	if ( ! pFnAmIAllowedToStillUsePathNodes )
		pFnAmIAllowedToStillUsePathNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AmIAllowedToStillUsePathNodes" );

	AKFAIController_execAmIAllowedToStillUsePathNodes_Parms AmIAllowedToStillUsePathNodes_Parms;

	this->ProcessEvent ( pFnAmIAllowedToStillUsePathNodes, &AmIAllowedToStillUsePathNodes_Parms, NULL );
};

// Function KFGame.KFAIController.AmIAllowedToSuicideWhenStuck
// [0x00020002] 
// Parameters infos:

void AKFAIController::AmIAllowedToSuicideWhenStuck ( )
{
	static UFunction* pFnAmIAllowedToSuicideWhenStuck = NULL;

	if ( ! pFnAmIAllowedToSuicideWhenStuck )
		pFnAmIAllowedToSuicideWhenStuck = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AmIAllowedToSuicideWhenStuck" );

	AKFAIController_execAmIAllowedToSuicideWhenStuck_Parms AmIAllowedToSuicideWhenStuck_Parms;

	this->ProcessEvent ( pFnAmIAllowedToSuicideWhenStuck, &AmIAllowedToSuicideWhenStuck_Parms, NULL );
};

// Function KFGame.KFAIController.HardCoreCheckStuckTimer
// [0x00820002] 
// Parameters infos:

void AKFAIController::HardCoreCheckStuckTimer ( )
{
	static UFunction* pFnHardCoreCheckStuckTimer = NULL;

	if ( ! pFnHardCoreCheckStuckTimer )
		pFnHardCoreCheckStuckTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.HardCoreCheckStuckTimer" );

	AKFAIController_execHardCoreCheckStuckTimer_Parms HardCoreCheckStuckTimer_Parms;

	this->ProcessEvent ( pFnHardCoreCheckStuckTimer, &HardCoreCheckStuckTimer_Parms, NULL );
};

// Function KFGame.KFAIController.GetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType ( )
{
	static UFunction* pFnGetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType = NULL;

	if ( ! pFnGetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType )
		pFnGetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType" );

	AKFAIController_execGetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType_Parms GetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType_Parms;

	this->ProcessEvent ( pFnGetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType, &GetMinDistaceToHaveToMoveToBeConcideredStuckByStuckType_Parms, NULL );
};

// Function KFGame.KFAIController.ToggleHardCoreStuckNpcs
// [0x00020002] 
// Parameters infos:

void AKFAIController::ToggleHardCoreStuckNpcs ( )
{
	static UFunction* pFnToggleHardCoreStuckNpcs = NULL;

	if ( ! pFnToggleHardCoreStuckNpcs )
		pFnToggleHardCoreStuckNpcs = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ToggleHardCoreStuckNpcs" );

	AKFAIController_execToggleHardCoreStuckNpcs_Parms ToggleHardCoreStuckNpcs_Parms;

	this->ProcessEvent ( pFnToggleHardCoreStuckNpcs, &ToggleHardCoreStuckNpcs_Parms, NULL );
};

// Function KFGame.KFAIController.GetMaxTimeAllowedToStayStuckBasedOnStuckType
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetMaxTimeAllowedToStayStuckBasedOnStuckType ( )
{
	static UFunction* pFnGetMaxTimeAllowedToStayStuckBasedOnStuckType = NULL;

	if ( ! pFnGetMaxTimeAllowedToStayStuckBasedOnStuckType )
		pFnGetMaxTimeAllowedToStayStuckBasedOnStuckType = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetMaxTimeAllowedToStayStuckBasedOnStuckType" );

	AKFAIController_execGetMaxTimeAllowedToStayStuckBasedOnStuckType_Parms GetMaxTimeAllowedToStayStuckBasedOnStuckType_Parms;

	this->ProcessEvent ( pFnGetMaxTimeAllowedToStayStuckBasedOnStuckType, &GetMaxTimeAllowedToStayStuckBasedOnStuckType_Parms, NULL );
};

// Function KFGame.KFAIController.Debug_CheckStuckTimer
// [0x00820002] 
// Parameters infos:

void AKFAIController::Debug_CheckStuckTimer ( )
{
	static UFunction* pFnDebug_CheckStuckTimer = NULL;

	if ( ! pFnDebug_CheckStuckTimer )
		pFnDebug_CheckStuckTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Debug_CheckStuckTimer" );

	AKFAIController_execDebug_CheckStuckTimer_Parms Debug_CheckStuckTimer_Parms;

	this->ProcessEvent ( pFnDebug_CheckStuckTimer, &Debug_CheckStuckTimer_Parms, NULL );
};

// Function KFGame.KFAIController.ShowStuckNpcsToggle
// [0x00020002] 
// Parameters infos:

void AKFAIController::ShowStuckNpcsToggle ( )
{
	static UFunction* pFnShowStuckNpcsToggle = NULL;

	if ( ! pFnShowStuckNpcsToggle )
		pFnShowStuckNpcsToggle = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ShowStuckNpcsToggle" );

	AKFAIController_execShowStuckNpcsToggle_Parms ShowStuckNpcsToggle_Parms;

	this->ProcessEvent ( pFnShowStuckNpcsToggle, &ShowStuckNpcsToggle_Parms, NULL );
};

// Function KFGame.KFAIController.LogToProfiler
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::LogToProfiler ( )
{
	static UFunction* pFnLogToProfiler = NULL;

	if ( ! pFnLogToProfiler )
		pFnLogToProfiler = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.LogToProfiler" );

	AKFAIController_execLogToProfiler_Parms LogToProfiler_Parms;

	pFnLogToProfiler->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogToProfiler, &LogToProfiler_Parms, NULL );

	pFnLogToProfiler->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.KFDebug_DrawPathGoal
// [0x00024002] 
// Parameters infos:

void AKFAIController::KFDebug_DrawPathGoal ( )
{
	static UFunction* pFnKFDebug_DrawPathGoal = NULL;

	if ( ! pFnKFDebug_DrawPathGoal )
		pFnKFDebug_DrawPathGoal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.KFDebug_DrawPathGoal" );

	AKFAIController_execKFDebug_DrawPathGoal_Parms KFDebug_DrawPathGoal_Parms;

	this->ProcessEvent ( pFnKFDebug_DrawPathGoal, &KFDebug_DrawPathGoal_Parms, NULL );
};

// Function KFGame.KFAIController.KFDebug_DrawPathTo
// [0x00024002] 
// Parameters infos:

void AKFAIController::KFDebug_DrawPathTo ( )
{
	static UFunction* pFnKFDebug_DrawPathTo = NULL;

	if ( ! pFnKFDebug_DrawPathTo )
		pFnKFDebug_DrawPathTo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.KFDebug_DrawPathTo" );

	AKFAIController_execKFDebug_DrawPathTo_Parms KFDebug_DrawPathTo_Parms;

	this->ProcessEvent ( pFnKFDebug_DrawPathTo, &KFDebug_DrawPathTo_Parms, NULL );
};

// Function KFGame.KFAIController.KFDebug_DrawMyPath
// [0x00020002] 
// Parameters infos:

void AKFAIController::KFDebug_DrawMyPath ( )
{
	static UFunction* pFnKFDebug_DrawMyPath = NULL;

	if ( ! pFnKFDebug_DrawMyPath )
		pFnKFDebug_DrawMyPath = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.KFDebug_DrawMyPath" );

	AKFAIController_execKFDebug_DrawMyPath_Parms KFDebug_DrawMyPath_Parms;

	this->ProcessEvent ( pFnKFDebug_DrawMyPath, &KFDebug_DrawMyPath_Parms, NULL );
};

// Function KFGame.KFAIController.KFDebug_DrawPath
// [0x00024002] 
// Parameters infos:

void AKFAIController::KFDebug_DrawPath ( )
{
	static UFunction* pFnKFDebug_DrawPath = NULL;

	if ( ! pFnKFDebug_DrawPath )
		pFnKFDebug_DrawPath = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.KFDebug_DrawPath" );

	AKFAIController_execKFDebug_DrawPath_Parms KFDebug_DrawPath_Parms;

	this->ProcessEvent ( pFnKFDebug_DrawPath, &KFDebug_DrawPath_Parms, NULL );
};

// Function KFGame.KFAIController.KFDebug_ClearDebugText
// [0x00024002] 
// Parameters infos:

void AKFAIController::KFDebug_ClearDebugText ( )
{
	static UFunction* pFnKFDebug_ClearDebugText = NULL;

	if ( ! pFnKFDebug_ClearDebugText )
		pFnKFDebug_ClearDebugText = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.KFDebug_ClearDebugText" );

	AKFAIController_execKFDebug_ClearDebugText_Parms KFDebug_ClearDebugText_Parms;

	this->ProcessEvent ( pFnKFDebug_ClearDebugText, &KFDebug_ClearDebugText_Parms, NULL );
};

// Function KFGame.KFAIController.KFDebug_ClearSpheres
// [0x00024002] 
// Parameters infos:

void AKFAIController::KFDebug_ClearSpheres ( )
{
	static UFunction* pFnKFDebug_ClearSpheres = NULL;

	if ( ! pFnKFDebug_ClearSpheres )
		pFnKFDebug_ClearSpheres = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.KFDebug_ClearSpheres" );

	AKFAIController_execKFDebug_ClearSpheres_Parms KFDebug_ClearSpheres_Parms;

	this->ProcessEvent ( pFnKFDebug_ClearSpheres, &KFDebug_ClearSpheres_Parms, NULL );
};

// Function KFGame.KFAIController.KFDebug_ClearLines
// [0x00024002] 
// Parameters infos:

void AKFAIController::KFDebug_ClearLines ( )
{
	static UFunction* pFnKFDebug_ClearLines = NULL;

	if ( ! pFnKFDebug_ClearLines )
		pFnKFDebug_ClearLines = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.KFDebug_ClearLines" );

	AKFAIController_execKFDebug_ClearLines_Parms KFDebug_ClearLines_Parms;

	this->ProcessEvent ( pFnKFDebug_ClearLines, &KFDebug_ClearLines_Parms, NULL );
};

// Function KFGame.KFAIController.GetDebugLines
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetDebugLines ( )
{
	static UFunction* pFnGetDebugLines = NULL;

	if ( ! pFnGetDebugLines )
		pFnGetDebugLines = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetDebugLines" );

	AKFAIController_execGetDebugLines_Parms GetDebugLines_Parms;

	this->ProcessEvent ( pFnGetDebugLines, &GetDebugLines_Parms, NULL );
};

// Function KFGame.KFAIController.ScreenMessagePlayer
// [0x00020002] 
// Parameters infos:

void AKFAIController::ScreenMessagePlayer ( )
{
	static UFunction* pFnScreenMessagePlayer = NULL;

	if ( ! pFnScreenMessagePlayer )
		pFnScreenMessagePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ScreenMessagePlayer" );

	AKFAIController_execScreenMessagePlayer_Parms ScreenMessagePlayer_Parms;

	this->ProcessEvent ( pFnScreenMessagePlayer, &ScreenMessagePlayer_Parms, NULL );
};

// Function KFGame.KFAIController.PauseAndShowMsg
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventPauseAndShowMsg ( )
{
	static UFunction* pFnPauseAndShowMsg = NULL;

	if ( ! pFnPauseAndShowMsg )
		pFnPauseAndShowMsg = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.PauseAndShowMsg" );

	AKFAIController_eventPauseAndShowMsg_Parms PauseAndShowMsg_Parms;

	this->ProcessEvent ( pFnPauseAndShowMsg, &PauseAndShowMsg_Parms, NULL );
};

// Function KFGame.KFAIController.AIBugItStringCreator
// [0x00420002] 
// Parameters infos:

void AKFAIController::AIBugItStringCreator ( )
{
	static UFunction* pFnAIBugItStringCreator = NULL;

	if ( ! pFnAIBugItStringCreator )
		pFnAIBugItStringCreator = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AIBugItStringCreator" );

	AKFAIController_execAIBugItStringCreator_Parms AIBugItStringCreator_Parms;

	this->ProcessEvent ( pFnAIBugItStringCreator, &AIBugItStringCreator_Parms, NULL );
};

// Function KFGame.KFAIController.AILog_Internal
// [0x00024800] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventAILog_Internal ( )
{
	static UFunction* pFnAILog_Internal = NULL;

	if ( ! pFnAILog_Internal )
		pFnAILog_Internal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AILog_Internal" );

	AKFAIController_eventAILog_Internal_Parms AILog_Internal_Parms;

	this->ProcessEvent ( pFnAILog_Internal, &AILog_Internal_Parms, NULL );
};

// Function KFGame.KFAIController.msg
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventmsg ( )
{
	static UFunction* pFnmsg = NULL;

	if ( ! pFnmsg )
		pFnmsg = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.msg" );

	AKFAIController_eventmsg_Parms msg_Parms;

	this->ProcessEvent ( pFnmsg, &msg_Parms, NULL );
};

// Function KFGame.KFAIController.OnDestroy
// [0x00020102] 
// Parameters infos:

void AKFAIController::OnDestroy ( )
{
	static UFunction* pFnOnDestroy = NULL;

	if ( ! pFnOnDestroy )
		pFnOnDestroy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.OnDestroy" );

	AKFAIController_execOnDestroy_Parms OnDestroy_Parms;

	this->ProcessEvent ( pFnOnDestroy, &OnDestroy_Parms, NULL );
};

// Function KFGame.KFAIController.SetRecentActionInfo
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventSetRecentActionInfo ( )
{
	static UFunction* pFnSetRecentActionInfo = NULL;

	if ( ! pFnSetRecentActionInfo )
		pFnSetRecentActionInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetRecentActionInfo" );

	AKFAIController_eventSetRecentActionInfo_Parms SetRecentActionInfo_Parms;

	this->ProcessEvent ( pFnSetRecentActionInfo, &SetRecentActionInfo_Parms, NULL );
};

// Function KFGame.KFAIController.IsInDebugMode
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsInDebugMode ( )
{
	static UFunction* pFnIsInDebugMode = NULL;

	if ( ! pFnIsInDebugMode )
		pFnIsInDebugMode = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsInDebugMode" );

	AKFAIController_execIsInDebugMode_Parms IsInDebugMode_Parms;

	this->ProcessEvent ( pFnIsInDebugMode, &IsInDebugMode_Parms, NULL );
};

// Function KFGame.KFAIController.SetupDebug
// [0x00020002] 
// Parameters infos:

void AKFAIController::SetupDebug ( )
{
	static UFunction* pFnSetupDebug = NULL;

	if ( ! pFnSetupDebug )
		pFnSetupDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetupDebug" );

	AKFAIController_execSetupDebug_Parms SetupDebug_Parms;

	this->ProcessEvent ( pFnSetupDebug, &SetupDebug_Parms, NULL );
};

// Function KFGame.KFAIController.DrawDebugTextToHud
// [0x00024002] 
// Parameters infos:

void AKFAIController::DrawDebugTextToHud ( )
{
	static UFunction* pFnDrawDebugTextToHud = NULL;

	if ( ! pFnDrawDebugTextToHud )
		pFnDrawDebugTextToHud = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawDebugTextToHud" );

	AKFAIController_execDrawDebugTextToHud_Parms DrawDebugTextToHud_Parms;

	this->ProcessEvent ( pFnDrawDebugTextToHud, &DrawDebugTextToHud_Parms, NULL );
};

// Function KFGame.KFAIController.DrawDebugText
// [0x00026400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::DrawDebugText ( )
{
	static UFunction* pFnDrawDebugText = NULL;

	if ( ! pFnDrawDebugText )
		pFnDrawDebugText = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawDebugText" );

	AKFAIController_execDrawDebugText_Parms DrawDebugText_Parms;

	pFnDrawDebugText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugText, &DrawDebugText_Parms, NULL );

	pFnDrawDebugText->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.DumpCommandHistory
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::DumpCommandHistory ( )
{
	static UFunction* pFnDumpCommandHistory = NULL;

	if ( ! pFnDumpCommandHistory )
		pFnDumpCommandHistory = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DumpCommandHistory" );

	AKFAIController_execDumpCommandHistory_Parms DumpCommandHistory_Parms;

	pFnDumpCommandHistory->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDumpCommandHistory, &DumpCommandHistory_Parms, NULL );

	pFnDumpCommandHistory->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.StartSteering
// [0x00020102] 
// Parameters infos:

void AKFAIController::StartSteering ( )
{
	static UFunction* pFnStartSteering = NULL;

	if ( ! pFnStartSteering )
		pFnStartSteering = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StartSteering" );

	AKFAIController_execStartSteering_Parms StartSteering_Parms;

	this->ProcessEvent ( pFnStartSteering, &StartSteering_Parms, NULL );
};

// Function KFGame.KFAIController.NotifySpecialMoveStarted
// [0x00020000] 
// Parameters infos:

void AKFAIController::NotifySpecialMoveStarted ( )
{
	static UFunction* pFnNotifySpecialMoveStarted = NULL;

	if ( ! pFnNotifySpecialMoveStarted )
		pFnNotifySpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifySpecialMoveStarted" );

	AKFAIController_execNotifySpecialMoveStarted_Parms NotifySpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveStarted, &NotifySpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFAIController.NotifySpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifySpecialMoveEnded" );

	AKFAIController_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFAIController.SpecialMoveTimeout
// [0x00020000] 
// Parameters infos:

void AKFAIController::SpecialMoveTimeout ( )
{
	static UFunction* pFnSpecialMoveTimeout = NULL;

	if ( ! pFnSpecialMoveTimeout )
		pFnSpecialMoveTimeout = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SpecialMoveTimeout" );

	AKFAIController_execSpecialMoveTimeout_Parms SpecialMoveTimeout_Parms;

	this->ProcessEvent ( pFnSpecialMoveTimeout, &SpecialMoveTimeout_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyMeleeDamageDealt
// [0x00020000] 
// Parameters infos:

void AKFAIController::NotifyMeleeDamageDealt ( )
{
	static UFunction* pFnNotifyMeleeDamageDealt = NULL;

	if ( ! pFnNotifyMeleeDamageDealt )
		pFnNotifyMeleeDamageDealt = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyMeleeDamageDealt" );

	AKFAIController_execNotifyMeleeDamageDealt_Parms NotifyMeleeDamageDealt_Parms;

	this->ProcessEvent ( pFnNotifyMeleeDamageDealt, &NotifyMeleeDamageDealt_Parms, NULL );
};

// Function KFGame.KFAIController.DrawFireAttackDebug
// [0x00020002] 
// Parameters infos:

void AKFAIController::DrawFireAttackDebug ( )
{
	static UFunction* pFnDrawFireAttackDebug = NULL;

	if ( ! pFnDrawFireAttackDebug )
		pFnDrawFireAttackDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DrawFireAttackDebug" );

	AKFAIController_execDrawFireAttackDebug_Parms DrawFireAttackDebug_Parms;

	this->ProcessEvent ( pFnDrawFireAttackDebug, &DrawFireAttackDebug_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyBump
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventNotifyBump ( )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyBump" );

	AKFAIController_eventNotifyBump_Parms NotifyBump_Parms;

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );
};

// Function KFGame.KFAIController.HearNoise
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventHearNoise ( )
{
	static UFunction* pFnHearNoise = NULL;

	if ( ! pFnHearNoise )
		pFnHearNoise = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.HearNoise" );

	AKFAIController_eventHearNoise_Parms HearNoise_Parms;

	this->ProcessEvent ( pFnHearNoise, &HearNoise_Parms, NULL );
};

// Function KFGame.KFAIController.EnemyNotVisible
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventEnemyNotVisible ( )
{
	static UFunction* pFnEnemyNotVisible = NULL;

	if ( ! pFnEnemyNotVisible )
		pFnEnemyNotVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnemyNotVisible" );

	AKFAIController_eventEnemyNotVisible_Parms EnemyNotVisible_Parms;

	this->ProcessEvent ( pFnEnemyNotVisible, &EnemyNotVisible_Parms, NULL );
};

// Function KFGame.KFAIController.SeePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventSeePlayer ( )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SeePlayer" );

	AKFAIController_eventSeePlayer_Parms SeePlayer_Parms;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function KFGame.KFAIController.RestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy
// [0x00020002] 
// Parameters infos:

void AKFAIController::RestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy ( )
{
	static UFunction* pFnRestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy = NULL;

	if ( ! pFnRestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy )
		pFnRestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.RestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy" );

	AKFAIController_execRestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy_Parms RestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy_Parms;

	this->ProcessEvent ( pFnRestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy, &RestoreCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy_Parms, NULL );
};

// Function KFGame.KFAIController.ReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy
// [0x00024002] 
// Parameters infos:

void AKFAIController::ReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy ( )
{
	static UFunction* pFnReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy = NULL;

	if ( ! pFnReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy )
		pFnReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy" );

	AKFAIController_execReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy_Parms ReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy_Parms;

	this->ProcessEvent ( pFnReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy, &ReduceCollisionCylinderReducedPercentForSameTeamIgnoreBlockingBy_Parms, NULL );
};

// Function KFGame.KFAIController.SpecialBumpHandling
// [0x00820102] 
// Parameters infos:

void AKFAIController::SpecialBumpHandling ( )
{
	static UFunction* pFnSpecialBumpHandling = NULL;

	if ( ! pFnSpecialBumpHandling )
		pFnSpecialBumpHandling = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SpecialBumpHandling" );

	AKFAIController_execSpecialBumpHandling_Parms SpecialBumpHandling_Parms;

	this->ProcessEvent ( pFnSpecialBumpHandling, &SpecialBumpHandling_Parms, NULL );
};

// Function KFGame.KFAIController.ShouldReduceZedOnZedCollisionOnBumpForNavigating
// [0x00020002] 
// Parameters infos:

void AKFAIController::ShouldReduceZedOnZedCollisionOnBumpForNavigating ( )
{
	static UFunction* pFnShouldReduceZedOnZedCollisionOnBumpForNavigating = NULL;

	if ( ! pFnShouldReduceZedOnZedCollisionOnBumpForNavigating )
		pFnShouldReduceZedOnZedCollisionOnBumpForNavigating = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ShouldReduceZedOnZedCollisionOnBumpForNavigating" );

	AKFAIController_execShouldReduceZedOnZedCollisionOnBumpForNavigating_Parms ShouldReduceZedOnZedCollisionOnBumpForNavigating_Parms;

	this->ProcessEvent ( pFnShouldReduceZedOnZedCollisionOnBumpForNavigating, &ShouldReduceZedOnZedCollisionOnBumpForNavigating_Parms, NULL );
};

// Function KFGame.KFAIController.RelocateTeleport
// [0x00820002] 
// Parameters infos:

void AKFAIController::RelocateTeleport ( )
{
	static UFunction* pFnRelocateTeleport = NULL;

	if ( ! pFnRelocateTeleport )
		pFnRelocateTeleport = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.RelocateTeleport" );

	AKFAIController_execRelocateTeleport_Parms RelocateTeleport_Parms;

	this->ProcessEvent ( pFnRelocateTeleport, &RelocateTeleport_Parms, NULL );
};

// Function KFGame.KFAIController.StuckTeleportToPathNode
// [0x00024002] 
// Parameters infos:

void AKFAIController::StuckTeleportToPathNode ( )
{
	static UFunction* pFnStuckTeleportToPathNode = NULL;

	if ( ! pFnStuckTeleportToPathNode )
		pFnStuckTeleportToPathNode = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StuckTeleportToPathNode" );

	AKFAIController_execStuckTeleportToPathNode_Parms StuckTeleportToPathNode_Parms;

	this->ProcessEvent ( pFnStuckTeleportToPathNode, &StuckTeleportToPathNode_Parms, NULL );
};

// Function KFGame.KFAIController.StuckTeleportToSpawnVolume
// [0x00820002] 
// Parameters infos:

void AKFAIController::StuckTeleportToSpawnVolume ( )
{
	static UFunction* pFnStuckTeleportToSpawnVolume = NULL;

	if ( ! pFnStuckTeleportToSpawnVolume )
		pFnStuckTeleportToSpawnVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StuckTeleportToSpawnVolume" );

	AKFAIController_execStuckTeleportToSpawnVolume_Parms StuckTeleportToSpawnVolume_Parms;

	this->ProcessEvent ( pFnStuckTeleportToSpawnVolume, &StuckTeleportToSpawnVolume_Parms, NULL );
};

// Function KFGame.KFAIController.StuckSuicide
// [0x00020002] 
// Parameters infos:

void AKFAIController::StuckSuicide ( )
{
	static UFunction* pFnStuckSuicide = NULL;

	if ( ! pFnStuckSuicide )
		pFnStuckSuicide = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StuckSuicide" );

	AKFAIController_execStuckSuicide_Parms StuckSuicide_Parms;

	this->ProcessEvent ( pFnStuckSuicide, &StuckSuicide_Parms, NULL );
};

// Function KFGame.KFAIController.HandleStuck
// [0x00020002] 
// Parameters infos:

void AKFAIController::HandleStuck ( )
{
	static UFunction* pFnHandleStuck = NULL;

	if ( ! pFnHandleStuck )
		pFnHandleStuck = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.HandleStuck" );

	AKFAIController_execHandleStuck_Parms HandleStuck_Parms;

	this->ProcessEvent ( pFnHandleStuck, &HandleStuck_Parms, NULL );
};

// Function KFGame.KFAIController.EvaluateStuckPossibility
// [0x00820002] 
// Parameters infos:

void AKFAIController::EvaluateStuckPossibility ( )
{
	static UFunction* pFnEvaluateStuckPossibility = NULL;

	if ( ! pFnEvaluateStuckPossibility )
		pFnEvaluateStuckPossibility = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EvaluateStuckPossibility" );

	AKFAIController_execEvaluateStuckPossibility_Parms EvaluateStuckPossibility_Parms;

	this->ProcessEvent ( pFnEvaluateStuckPossibility, &EvaluateStuckPossibility_Parms, NULL );
};

// Function KFGame.KFAIController.EvaluateTeleportPossibility
// [0x00020002] 
// Parameters infos:

void AKFAIController::EvaluateTeleportPossibility ( )
{
	static UFunction* pFnEvaluateTeleportPossibility = NULL;

	if ( ! pFnEvaluateTeleportPossibility )
		pFnEvaluateTeleportPossibility = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EvaluateTeleportPossibility" );

	AKFAIController_execEvaluateTeleportPossibility_Parms EvaluateTeleportPossibility_Parms;

	this->ProcessEvent ( pFnEvaluateTeleportPossibility, &EvaluateTeleportPossibility_Parms, NULL );
};

// Function KFGame.KFAIController.Tick
// [0x00020102] 
// Parameters infos:

void AKFAIController::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Tick" );

	AKFAIController_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFAIController.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Touch" );

	AKFAIController_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFAIController.DisableBump
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventDisableBump ( )
{
	static UFunction* pFnDisableBump = NULL;

	if ( ! pFnDisableBump )
		pFnDisableBump = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DisableBump" );

	AKFAIController_eventDisableBump_Parms DisableBump_Parms;

	this->ProcessEvent ( pFnDisableBump, &DisableBump_Parms, NULL );
};

// Function KFGame.KFAIController.EnableBump
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventEnableBump ( )
{
	static UFunction* pFnEnableBump = NULL;

	if ( ! pFnEnableBump )
		pFnEnableBump = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnableBump" );

	AKFAIController_eventEnableBump_Parms EnableBump_Parms;

	this->ProcessEvent ( pFnEnableBump, &EnableBump_Parms, NULL );
};

// Function KFGame.KFAIController.RecordBump
// [0x00020002] 
// Parameters infos:

void AKFAIController::RecordBump ( )
{
	static UFunction* pFnRecordBump = NULL;

	if ( ! pFnRecordBump )
		pFnRecordBump = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.RecordBump" );

	AKFAIController_execRecordBump_Parms RecordBump_Parms;

	this->ProcessEvent ( pFnRecordBump, &RecordBump_Parms, NULL );
};

// Function KFGame.KFAIController.DisableHearNoise
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventDisableHearNoise ( )
{
	static UFunction* pFnDisableHearNoise = NULL;

	if ( ! pFnDisableHearNoise )
		pFnDisableHearNoise = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DisableHearNoise" );

	AKFAIController_eventDisableHearNoise_Parms DisableHearNoise_Parms;

	this->ProcessEvent ( pFnDisableHearNoise, &DisableHearNoise_Parms, NULL );
};

// Function KFGame.KFAIController.EnableHearNoise
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventEnableHearNoise ( )
{
	static UFunction* pFnEnableHearNoise = NULL;

	if ( ! pFnEnableHearNoise )
		pFnEnableHearNoise = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnableHearNoise" );

	AKFAIController_eventEnableHearNoise_Parms EnableHearNoise_Parms;

	this->ProcessEvent ( pFnEnableHearNoise, &EnableHearNoise_Parms, NULL );
};

// Function KFGame.KFAIController.IsPawnVisibleViaTrace
// [0x00824002] 
// Parameters infos:

void AKFAIController::IsPawnVisibleViaTrace ( )
{
	static UFunction* pFnIsPawnVisibleViaTrace = NULL;

	if ( ! pFnIsPawnVisibleViaTrace )
		pFnIsPawnVisibleViaTrace = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsPawnVisibleViaTrace" );

	AKFAIController_execIsPawnVisibleViaTrace_Parms IsPawnVisibleViaTrace_Parms;

	this->ProcessEvent ( pFnIsPawnVisibleViaTrace, &IsPawnVisibleViaTrace_Parms, NULL );
};

// Function KFGame.KFAIController.DisableEnemyNotVisible
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventDisableEnemyNotVisible ( )
{
	static UFunction* pFnDisableEnemyNotVisible = NULL;

	if ( ! pFnDisableEnemyNotVisible )
		pFnDisableEnemyNotVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DisableEnemyNotVisible" );

	AKFAIController_eventDisableEnemyNotVisible_Parms DisableEnemyNotVisible_Parms;

	this->ProcessEvent ( pFnDisableEnemyNotVisible, &DisableEnemyNotVisible_Parms, NULL );
};

// Function KFGame.KFAIController.EnableEnemyNotVisible
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventEnableEnemyNotVisible ( )
{
	static UFunction* pFnEnableEnemyNotVisible = NULL;

	if ( ! pFnEnableEnemyNotVisible )
		pFnEnableEnemyNotVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnableEnemyNotVisible" );

	AKFAIController_eventEnableEnemyNotVisible_Parms EnableEnemyNotVisible_Parms;

	this->ProcessEvent ( pFnEnableEnemyNotVisible, &EnableEnemyNotVisible_Parms, NULL );
};

// Function KFGame.KFAIController.DisableSeePlayer
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventDisableSeePlayer ( )
{
	static UFunction* pFnDisableSeePlayer = NULL;

	if ( ! pFnDisableSeePlayer )
		pFnDisableSeePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DisableSeePlayer" );

	AKFAIController_eventDisableSeePlayer_Parms DisableSeePlayer_Parms;

	this->ProcessEvent ( pFnDisableSeePlayer, &DisableSeePlayer_Parms, NULL );
};

// Function KFGame.KFAIController.EnableSeePlayer
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventEnableSeePlayer ( )
{
	static UFunction* pFnEnableSeePlayer = NULL;

	if ( ! pFnEnableSeePlayer )
		pFnEnableSeePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnableSeePlayer" );

	AKFAIController_eventEnableSeePlayer_Parms EnableSeePlayer_Parms;

	this->ProcessEvent ( pFnEnableSeePlayer, &EnableSeePlayer_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyFallingHitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventNotifyFallingHitWall ( )
{
	static UFunction* pFnNotifyFallingHitWall = NULL;

	if ( ! pFnNotifyFallingHitWall )
		pFnNotifyFallingHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyFallingHitWall" );

	AKFAIController_eventNotifyFallingHitWall_Parms NotifyFallingHitWall_Parms;

	this->ProcessEvent ( pFnNotifyFallingHitWall, &NotifyFallingHitWall_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyHitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventNotifyHitWall ( )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyHitWall" );

	AKFAIController_eventNotifyHitWall_Parms NotifyHitWall_Parms;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );
};

// Function KFGame.KFAIController.DisableNotifyHitWall
// [0x00024003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::DisableNotifyHitWall ( )
{
	static UFunction* pFnDisableNotifyHitWall = NULL;

	if ( ! pFnDisableNotifyHitWall )
		pFnDisableNotifyHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DisableNotifyHitWall" );

	AKFAIController_execDisableNotifyHitWall_Parms DisableNotifyHitWall_Parms;

	this->ProcessEvent ( pFnDisableNotifyHitWall, &DisableNotifyHitWall_Parms, NULL );
};

// Function KFGame.KFAIController.EnableNotifyHitWall
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::EnableNotifyHitWall ( )
{
	static UFunction* pFnEnableNotifyHitWall = NULL;

	if ( ! pFnEnableNotifyHitWall )
		pFnEnableNotifyHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnableNotifyHitWall" );

	AKFAIController_execEnableNotifyHitWall_Parms EnableNotifyHitWall_Parms;

	this->ProcessEvent ( pFnEnableNotifyHitWall, &EnableNotifyHitWall_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyHuskSuicide
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifyHuskSuicide ( )
{
	static UFunction* pFnNotifyHuskSuicide = NULL;

	if ( ! pFnNotifyHuskSuicide )
		pFnNotifyHuskSuicide = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyHuskSuicide" );

	AKFAIController_execNotifyHuskSuicide_Parms NotifyHuskSuicide_Parms;

	this->ProcessEvent ( pFnNotifyHuskSuicide, &NotifyHuskSuicide_Parms, NULL );
};

// Function KFGame.KFAIController.EnemyIsSurrounded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventEnemyIsSurrounded ( )
{
	static UFunction* pFnEnemyIsSurrounded = NULL;

	if ( ! pFnEnemyIsSurrounded )
		pFnEnemyIsSurrounded = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnemyIsSurrounded" );

	AKFAIController_eventEnemyIsSurrounded_Parms EnemyIsSurrounded_Parms;

	this->ProcessEvent ( pFnEnemyIsSurrounded, &EnemyIsSurrounded_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyLanded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventNotifyLanded ( )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyLanded" );

	AKFAIController_eventNotifyLanded_Parms NotifyLanded_Parms;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyBaseChange
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifyBaseChange ( )
{
	static UFunction* pFnNotifyBaseChange = NULL;

	if ( ! pFnNotifyBaseChange )
		pFnNotifyBaseChange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyBaseChange" );

	AKFAIController_execNotifyBaseChange_Parms NotifyBaseChange_Parms;

	this->ProcessEvent ( pFnNotifyBaseChange, &NotifyBaseChange_Parms, NULL );
};

// Function KFGame.KFAIController.RecordHitWall
// [0x00020000] 
// Parameters infos:

void AKFAIController::RecordHitWall ( )
{
	static UFunction* pFnRecordHitWall = NULL;

	if ( ! pFnRecordHitWall )
		pFnRecordHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.RecordHitWall" );

	AKFAIController_execRecordHitWall_Parms RecordHitWall_Parms;

	this->ProcessEvent ( pFnRecordHitWall, &RecordHitWall_Parms, NULL );
};

// Function KFGame.KFAIController.RecordLeapToWall
// [0x00020000] 
// Parameters infos:

void AKFAIController::RecordLeapToWall ( )
{
	static UFunction* pFnRecordLeapToWall = NULL;

	if ( ! pFnRecordLeapToWall )
		pFnRecordLeapToWall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.RecordLeapToWall" );

	AKFAIController_execRecordLeapToWall_Parms RecordLeapToWall_Parms;

	this->ProcessEvent ( pFnRecordLeapToWall, &RecordLeapToWall_Parms, NULL );
};

// Function KFGame.KFAIController.GetDropEdgeLeapVelocity
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetDropEdgeLeapVelocity ( )
{
	static UFunction* pFnGetDropEdgeLeapVelocity = NULL;

	if ( ! pFnGetDropEdgeLeapVelocity )
		pFnGetDropEdgeLeapVelocity = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetDropEdgeLeapVelocity" );

	AKFAIController_execGetDropEdgeLeapVelocity_Parms GetDropEdgeLeapVelocity_Parms;

	this->ProcessEvent ( pFnGetDropEdgeLeapVelocity, &GetDropEdgeLeapVelocity_Parms, NULL );
};

// Function KFGame.KFAIController.Timer_EnableJumpOverWalls
// [0x00020002] 
// Parameters infos:

void AKFAIController::Timer_EnableJumpOverWalls ( )
{
	static UFunction* pFnTimer_EnableJumpOverWalls = NULL;

	if ( ! pFnTimer_EnableJumpOverWalls )
		pFnTimer_EnableJumpOverWalls = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Timer_EnableJumpOverWalls" );

	AKFAIController_execTimer_EnableJumpOverWalls_Parms Timer_EnableJumpOverWalls_Parms;

	this->ProcessEvent ( pFnTimer_EnableJumpOverWalls, &Timer_EnableJumpOverWalls_Parms, NULL );
};

// Function KFGame.KFAIController.JumpedOverWall
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventJumpedOverWall ( )
{
	static UFunction* pFnJumpedOverWall = NULL;

	if ( ! pFnJumpedOverWall )
		pFnJumpedOverWall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.JumpedOverWall" );

	AKFAIController_eventJumpedOverWall_Parms JumpedOverWall_Parms;

	this->ProcessEvent ( pFnJumpedOverWall, &JumpedOverWall_Parms, NULL );
};

// Function KFGame.KFAIController.MayFall
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventMayFall ( )
{
	static UFunction* pFnMayFall = NULL;

	if ( ! pFnMayFall )
		pFnMayFall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.MayFall" );

	AKFAIController_eventMayFall_Parms MayFall_Parms;

	this->ProcessEvent ( pFnMayFall, &MayFall_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyOnAddToRouteCache
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventNotifyOnAddToRouteCache ( )
{
	static UFunction* pFnNotifyOnAddToRouteCache = NULL;

	if ( ! pFnNotifyOnAddToRouteCache )
		pFnNotifyOnAddToRouteCache = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyOnAddToRouteCache" );

	AKFAIController_eventNotifyOnAddToRouteCache_Parms NotifyOnAddToRouteCache_Parms;

	this->ProcessEvent ( pFnNotifyOnAddToRouteCache, &NotifyOnAddToRouteCache_Parms, NULL );
};

// Function KFGame.KFAIController.IsNavInRouteCache
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsNavInRouteCache ( )
{
	static UFunction* pFnIsNavInRouteCache = NULL;

	if ( ! pFnIsNavInRouteCache )
		pFnIsNavInRouteCache = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsNavInRouteCache" );

	AKFAIController_execIsNavInRouteCache_Parms IsNavInRouteCache_Parms;

	this->ProcessEvent ( pFnIsNavInRouteCache, &IsNavInRouteCache_Parms, NULL );
};

// Function KFGame.KFAIController.FailedToFindFallbackAnchor
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::FailedToFindFallbackAnchor ( )
{
	static UFunction* pFnFailedToFindFallbackAnchor = NULL;

	if ( ! pFnFailedToFindFallbackAnchor )
		pFnFailedToFindFallbackAnchor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.FailedToFindFallbackAnchor" );

	AKFAIController_execFailedToFindFallbackAnchor_Parms FailedToFindFallbackAnchor_Parms;

	this->ProcessEvent ( pFnFailedToFindFallbackAnchor, &FailedToFindFallbackAnchor_Parms, NULL );
};

// Function KFGame.KFAIController.GetFallbackAnchor
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::GetFallbackAnchor ( )
{
	static UFunction* pFnGetFallbackAnchor = NULL;

	if ( ! pFnGetFallbackAnchor )
		pFnGetFallbackAnchor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetFallbackAnchor" );

	AKFAIController_execGetFallbackAnchor_Parms GetFallbackAnchor_Parms;

	this->ProcessEvent ( pFnGetFallbackAnchor, &GetFallbackAnchor_Parms, NULL );
};

// Function KFGame.KFAIController.InvalidateAnchor
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::InvalidateAnchor ( )
{
	static UFunction* pFnInvalidateAnchor = NULL;

	if ( ! pFnInvalidateAnchor )
		pFnInvalidateAnchor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.InvalidateAnchor" );

	AKFAIController_execInvalidateAnchor_Parms InvalidateAnchor_Parms;

	this->ProcessEvent ( pFnInvalidateAnchor, &InvalidateAnchor_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyNeedRepath
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifyNeedRepath ( )
{
	static UFunction* pFnNotifyNeedRepath = NULL;

	if ( ! pFnNotifyNeedRepath )
		pFnNotifyNeedRepath = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyNeedRepath" );

	AKFAIController_execNotifyNeedRepath_Parms NotifyNeedRepath_Parms;

	this->ProcessEvent ( pFnNotifyNeedRepath, &NotifyNeedRepath_Parms, NULL );
};

// Function KFGame.KFAIController.ForcePauseAndRepath
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventForcePauseAndRepath ( )
{
	static UFunction* pFnForcePauseAndRepath = NULL;

	if ( ! pFnForcePauseAndRepath )
		pFnForcePauseAndRepath = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ForcePauseAndRepath" );

	AKFAIController_eventForcePauseAndRepath_Parms ForcePauseAndRepath_Parms;

	this->ProcessEvent ( pFnForcePauseAndRepath, &ForcePauseAndRepath_Parms, NULL );
};

// Function KFGame.KFAIController.MoveUnreachable
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventMoveUnreachable ( )
{
	static UFunction* pFnMoveUnreachable = NULL;

	if ( ! pFnMoveUnreachable )
		pFnMoveUnreachable = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.MoveUnreachable" );

	AKFAIController_eventMoveUnreachable_Parms MoveUnreachable_Parms;

	this->ProcessEvent ( pFnMoveUnreachable, &MoveUnreachable_Parms, NULL );
};

// Function KFGame.KFAIController.FailMove
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventFailMove ( )
{
	static UFunction* pFnFailMove = NULL;

	if ( ! pFnFailMove )
		pFnFailMove = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.FailMove" );

	AKFAIController_eventFailMove_Parms FailMove_Parms;

	this->ProcessEvent ( pFnFailMove, &FailMove_Parms, NULL );
};

// Function KFGame.KFAIController.HandleZedBlockedPath
// [0x00020000] 
// Parameters infos:

void AKFAIController::HandleZedBlockedPath ( )
{
	static UFunction* pFnHandleZedBlockedPath = NULL;

	if ( ! pFnHandleZedBlockedPath )
		pFnHandleZedBlockedPath = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.HandleZedBlockedPath" );

	AKFAIController_execHandleZedBlockedPath_Parms HandleZedBlockedPath_Parms;

	this->ProcessEvent ( pFnHandleZedBlockedPath, &HandleZedBlockedPath_Parms, NULL );
};

// Function KFGame.KFAIController.HandlePathObstruction
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventHandlePathObstruction ( )
{
	static UFunction* pFnHandlePathObstruction = NULL;

	if ( ! pFnHandlePathObstruction )
		pFnHandlePathObstruction = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.HandlePathObstruction" );

	AKFAIController_eventHandlePathObstruction_Parms HandlePathObstruction_Parms;

	this->ProcessEvent ( pFnHandlePathObstruction, &HandlePathObstruction_Parms, NULL );
};

// Function KFGame.KFAIController.FindDirectPath
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventFindDirectPath ( )
{
	static UFunction* pFnFindDirectPath = NULL;

	if ( ! pFnFindDirectPath )
		pFnFindDirectPath = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.FindDirectPath" );

	AKFAIController_eventFindDirectPath_Parms FindDirectPath_Parms;

	this->ProcessEvent ( pFnFindDirectPath, &FindDirectPath_Parms, NULL );
};

// Function KFGame.KFAIController.AllowDetourTo
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventAllowDetourTo ( )
{
	static UFunction* pFnAllowDetourTo = NULL;

	if ( ! pFnAllowDetourTo )
		pFnAllowDetourTo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AllowDetourTo" );

	AKFAIController_eventAllowDetourTo_Parms AllowDetourTo_Parms;

	this->ProcessEvent ( pFnAllowDetourTo, &AllowDetourTo_Parms, NULL );
};

// Function KFGame.KFAIController.SetFailedPathToEnemy
// [0x00024003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::SetFailedPathToEnemy ( )
{
	static UFunction* pFnSetFailedPathToEnemy = NULL;

	if ( ! pFnSetFailedPathToEnemy )
		pFnSetFailedPathToEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetFailedPathToEnemy" );

	AKFAIController_execSetFailedPathToEnemy_Parms SetFailedPathToEnemy_Parms;

	this->ProcessEvent ( pFnSetFailedPathToEnemy, &SetFailedPathToEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.IsValidDirectMoveGoal
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsValidDirectMoveGoal ( )
{
	static UFunction* pFnIsValidDirectMoveGoal = NULL;

	if ( ! pFnIsValidDirectMoveGoal )
		pFnIsValidDirectMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsValidDirectMoveGoal" );

	AKFAIController_execIsValidDirectMoveGoal_Parms IsValidDirectMoveGoal_Parms;

	this->ProcessEvent ( pFnIsValidDirectMoveGoal, &IsValidDirectMoveGoal_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyPathChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventNotifyPathChanged ( )
{
	static UFunction* pFnNotifyPathChanged = NULL;

	if ( ! pFnNotifyPathChanged )
		pFnNotifyPathChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyPathChanged" );

	AKFAIController_eventNotifyPathChanged_Parms NotifyPathChanged_Parms;

	this->ProcessEvent ( pFnNotifyPathChanged, &NotifyPathChanged_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyFailMove
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventNotifyFailMove ( )
{
	static UFunction* pFnNotifyFailMove = NULL;

	if ( ! pFnNotifyFailMove )
		pFnNotifyFailMove = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyFailMove" );

	AKFAIController_eventNotifyFailMove_Parms NotifyFailMove_Parms;

	this->ProcessEvent ( pFnNotifyFailMove, &NotifyFailMove_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyLatentPostPhysWalking
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventNotifyLatentPostPhysWalking ( )
{
	static UFunction* pFnNotifyLatentPostPhysWalking = NULL;

	if ( ! pFnNotifyLatentPostPhysWalking )
		pFnNotifyLatentPostPhysWalking = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyLatentPostPhysWalking" );

	AKFAIController_eventNotifyLatentPostPhysWalking_Parms NotifyLatentPostPhysWalking_Parms;

	this->ProcessEvent ( pFnNotifyLatentPostPhysWalking, &NotifyLatentPostPhysWalking_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyReachedLatentMoveGoal
// [0x00020000] 
// Parameters infos:

void AKFAIController::NotifyReachedLatentMoveGoal ( )
{
	static UFunction* pFnNotifyReachedLatentMoveGoal = NULL;

	if ( ! pFnNotifyReachedLatentMoveGoal )
		pFnNotifyReachedLatentMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyReachedLatentMoveGoal" );

	AKFAIController_execNotifyReachedLatentMoveGoal_Parms NotifyReachedLatentMoveGoal_Parms;

	this->ProcessEvent ( pFnNotifyReachedLatentMoveGoal, &NotifyReachedLatentMoveGoal_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyFleeFinished
// [0x00024000] 
// Parameters infos:

void AKFAIController::NotifyFleeFinished ( )
{
	static UFunction* pFnNotifyFleeFinished = NULL;

	if ( ! pFnNotifyFleeFinished )
		pFnNotifyFleeFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyFleeFinished" );

	AKFAIController_execNotifyFleeFinished_Parms NotifyFleeFinished_Parms;

	this->ProcessEvent ( pFnNotifyFleeFinished, &NotifyFleeFinished_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyCommandFinished
// [0x00020000] 
// Parameters infos:

void AKFAIController::NotifyCommandFinished ( )
{
	static UFunction* pFnNotifyCommandFinished = NULL;

	if ( ! pFnNotifyCommandFinished )
		pFnNotifyCommandFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyCommandFinished" );

	AKFAIController_execNotifyCommandFinished_Parms NotifyCommandFinished_Parms;

	this->ProcessEvent ( pFnNotifyCommandFinished, &NotifyCommandFinished_Parms, NULL );
};

// Function KFGame.KFAIController.IsFrustrated
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsFrustrated ( )
{
	static UFunction* pFnIsFrustrated = NULL;

	if ( ! pFnIsFrustrated )
		pFnIsFrustrated = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsFrustrated" );

	AKFAIController_execIsFrustrated_Parms IsFrustrated_Parms;

	this->ProcessEvent ( pFnIsFrustrated, &IsFrustrated_Parms, NULL );
};

// Function KFGame.KFAIController.UpdateSprintFrustration
// [0x00024002] 
// Parameters infos:

void AKFAIController::UpdateSprintFrustration ( )
{
	static UFunction* pFnUpdateSprintFrustration = NULL;

	if ( ! pFnUpdateSprintFrustration )
		pFnUpdateSprintFrustration = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.UpdateSprintFrustration" );

	AKFAIController_execUpdateSprintFrustration_Parms UpdateSprintFrustration_Parms;

	this->ProcessEvent ( pFnUpdateSprintFrustration, &UpdateSprintFrustration_Parms, NULL );
};

// Function KFGame.KFAIController.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ShouldSprint" );

	AKFAIController_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function KFGame.KFAIController.CanSetSprinting
// [0x00020002] 
// Parameters infos:

void AKFAIController::CanSetSprinting ( )
{
	static UFunction* pFnCanSetSprinting = NULL;

	if ( ! pFnCanSetSprinting )
		pFnCanSetSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanSetSprinting" );

	AKFAIController_execCanSetSprinting_Parms CanSetSprinting_Parms;

	this->ProcessEvent ( pFnCanSetSprinting, &CanSetSprinting_Parms, NULL );
};

// Function KFGame.KFAIController.SetCanSprintWhenDamaged
// [0x00020002] 
// Parameters infos:

void AKFAIController::SetCanSprintWhenDamaged ( )
{
	static UFunction* pFnSetCanSprintWhenDamaged = NULL;

	if ( ! pFnSetCanSprintWhenDamaged )
		pFnSetCanSprintWhenDamaged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetCanSprintWhenDamaged" );

	AKFAIController_execSetCanSprintWhenDamaged_Parms SetCanSprintWhenDamaged_Parms;

	this->ProcessEvent ( pFnSetCanSprintWhenDamaged, &SetCanSprintWhenDamaged_Parms, NULL );
};

// Function KFGame.KFAIController.SetSprintingDisabled
// [0x00020002] 
// Parameters infos:

void AKFAIController::SetSprintingDisabled ( )
{
	static UFunction* pFnSetSprintingDisabled = NULL;

	if ( ! pFnSetSprintingDisabled )
		pFnSetSprintingDisabled = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetSprintingDisabled" );

	AKFAIController_execSetSprintingDisabled_Parms SetSprintingDisabled_Parms;

	this->ProcessEvent ( pFnSetSprintingDisabled, &SetSprintingDisabled_Parms, NULL );
};

// Function KFGame.KFAIController.SetCanSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController::SetCanSprint ( )
{
	static UFunction* pFnSetCanSprint = NULL;

	if ( ! pFnSetCanSprint )
		pFnSetCanSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetCanSprint" );

	AKFAIController_execSetCanSprint_Parms SetCanSprint_Parms;

	this->ProcessEvent ( pFnSetCanSprint, &SetCanSprint_Parms, NULL );
};

// Function KFGame.KFAIController.GetMoveTimeOutDuration
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetMoveTimeOutDuration ( )
{
	static UFunction* pFnGetMoveTimeOutDuration = NULL;

	if ( ! pFnGetMoveTimeOutDuration )
		pFnGetMoveTimeOutDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetMoveTimeOutDuration" );

	AKFAIController_execGetMoveTimeOutDuration_Parms GetMoveTimeOutDuration_Parms;

	this->ProcessEvent ( pFnGetMoveTimeOutDuration, &GetMoveTimeOutDuration_Parms, NULL );
};

// Function KFGame.KFAIController.GetEstimatedGroundSpeedForMoveTimout
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetEstimatedGroundSpeedForMoveTimout ( )
{
	static UFunction* pFnGetEstimatedGroundSpeedForMoveTimout = NULL;

	if ( ! pFnGetEstimatedGroundSpeedForMoveTimout )
		pFnGetEstimatedGroundSpeedForMoveTimout = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetEstimatedGroundSpeedForMoveTimout" );

	AKFAIController_execGetEstimatedGroundSpeedForMoveTimout_Parms GetEstimatedGroundSpeedForMoveTimout_Parms;

	this->ProcessEvent ( pFnGetEstimatedGroundSpeedForMoveTimout, &GetEstimatedGroundSpeedForMoveTimout_Parms, NULL );
};

// Function KFGame.KFAIController.MoveToEnemy_GetMoveFocus
// [0x00020002] 
// Parameters infos:

void AKFAIController::MoveToEnemy_GetMoveFocus ( )
{
	static UFunction* pFnMoveToEnemy_GetMoveFocus = NULL;

	if ( ! pFnMoveToEnemy_GetMoveFocus )
		pFnMoveToEnemy_GetMoveFocus = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.MoveToEnemy_GetMoveFocus" );

	AKFAIController_execMoveToEnemy_GetMoveFocus_Parms MoveToEnemy_GetMoveFocus_Parms;

	this->ProcessEvent ( pFnMoveToEnemy_GetMoveFocus, &MoveToEnemy_GetMoveFocus_Parms, NULL );
};

// Function KFGame.KFAIController.FailedMove
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventFailedMove ( )
{
	static UFunction* pFnFailedMove = NULL;

	if ( ! pFnFailedMove )
		pFnFailedMove = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.FailedMove" );

	AKFAIController_eventFailedMove_Parms FailedMove_Parms;

	this->ProcessEvent ( pFnFailedMove, &FailedMove_Parms, NULL );
};

// Function KFGame.KFAIController.ShouldDelayStepAside
// [0x00820002] 
// Parameters infos:

void AKFAIController::ShouldDelayStepAside ( )
{
	static UFunction* pFnShouldDelayStepAside = NULL;

	if ( ! pFnShouldDelayStepAside )
		pFnShouldDelayStepAside = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ShouldDelayStepAside" );

	AKFAIController_execShouldDelayStepAside_Parms ShouldDelayStepAside_Parms;

	this->ProcessEvent ( pFnShouldDelayStepAside, &ShouldDelayStepAside_Parms, NULL );
};

// Function KFGame.KFAIController.StepAsideFor
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventStepAsideFor ( )
{
	static UFunction* pFnStepAsideFor = NULL;

	if ( ! pFnStepAsideFor )
		pFnStepAsideFor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StepAsideFor" );

	AKFAIController_eventStepAsideFor_Parms StepAsideFor_Parms;

	this->ProcessEvent ( pFnStepAsideFor, &StepAsideFor_Parms, NULL );
};

// Function KFGame.KFAIController.AttitudeStateChanged
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventAttitudeStateChanged ( )
{
	static UFunction* pFnAttitudeStateChanged = NULL;

	if ( ! pFnAttitudeStateChanged )
		pFnAttitudeStateChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AttitudeStateChanged" );

	AKFAIController_eventAttitudeStateChanged_Parms AttitudeStateChanged_Parms;

	this->ProcessEvent ( pFnAttitudeStateChanged, &AttitudeStateChanged_Parms, NULL );
};

// Function KFGame.KFAIController.EndPanicWander
// [0x00020002] 
// Parameters infos:

void AKFAIController::EndPanicWander ( )
{
	static UFunction* pFnEndPanicWander = NULL;

	if ( ! pFnEndPanicWander )
		pFnEndPanicWander = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EndPanicWander" );

	AKFAIController_execEndPanicWander_Parms EndPanicWander_Parms;

	this->ProcessEvent ( pFnEndPanicWander, &EndPanicWander_Parms, NULL );
};

// Function KFGame.KFAIController.DoPanicWander
// [0x00020002] 
// Parameters infos:

void AKFAIController::DoPanicWander ( )
{
	static UFunction* pFnDoPanicWander = NULL;

	if ( ! pFnDoPanicWander )
		pFnDoPanicWander = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoPanicWander" );

	AKFAIController_execDoPanicWander_Parms DoPanicWander_Parms;

	this->ProcessEvent ( pFnDoPanicWander, &DoPanicWander_Parms, NULL );
};

// Function KFGame.KFAIController.DoHeadlessWander
// [0x00020002] 
// Parameters infos:

void AKFAIController::DoHeadlessWander ( )
{
	static UFunction* pFnDoHeadlessWander = NULL;

	if ( ! pFnDoHeadlessWander )
		pFnDoHeadlessWander = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoHeadlessWander" );

	AKFAIController_execDoHeadlessWander_Parms DoHeadlessWander_Parms;

	this->ProcessEvent ( pFnDoHeadlessWander, &DoHeadlessWander_Parms, NULL );
};

// Function KFGame.KFAIController.DoStumble
// [0x00020002] 
// Parameters infos:

void AKFAIController::DoStumble ( )
{
	static UFunction* pFnDoStumble = NULL;

	if ( ! pFnDoStumble )
		pFnDoStumble = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoStumble" );

	AKFAIController_execDoStumble_Parms DoStumble_Parms;

	this->ProcessEvent ( pFnDoStumble, &DoStumble_Parms, NULL );
};

// Function KFGame.KFAIController.DoEvade
// [0x00024002] 
// Parameters infos:

void AKFAIController::DoEvade ( )
{
	static UFunction* pFnDoEvade = NULL;

	if ( ! pFnDoEvade )
		pFnDoEvade = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoEvade" );

	AKFAIController_execDoEvade_Parms DoEvade_Parms;

	this->ProcessEvent ( pFnDoEvade, &DoEvade_Parms, NULL );
};

// Function KFGame.KFAIController.PreMoveToEnemy
// [0x00020000] 
// Parameters infos:

void AKFAIController::PreMoveToEnemy ( )
{
	static UFunction* pFnPreMoveToEnemy = NULL;

	if ( ! pFnPreMoveToEnemy )
		pFnPreMoveToEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.PreMoveToEnemy" );

	AKFAIController_execPreMoveToEnemy_Parms PreMoveToEnemy_Parms;

	this->ProcessEvent ( pFnPreMoveToEnemy, &PreMoveToEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.DoProjectileEvade
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::DoProjectileEvade ( )
{
	static UFunction* pFnDoProjectileEvade = NULL;

	if ( ! pFnDoProjectileEvade )
		pFnDoProjectileEvade = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoProjectileEvade" );

	AKFAIController_execDoProjectileEvade_Parms DoProjectileEvade_Parms;

	this->ProcessEvent ( pFnDoProjectileEvade, &DoProjectileEvade_Parms, NULL );
};

// Function KFGame.KFAIController.RunOverWarning
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventRunOverWarning ( )
{
	static UFunction* pFnRunOverWarning = NULL;

	if ( ! pFnRunOverWarning )
		pFnRunOverWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.RunOverWarning" );

	AKFAIController_eventRunOverWarning_Parms RunOverWarning_Parms;

	this->ProcessEvent ( pFnRunOverWarning, &RunOverWarning_Parms, NULL );
};

// Function KFGame.KFAIController.CanDoStrike
// [0x00020000] 
// Parameters infos:

void AKFAIController::CanDoStrike ( )
{
	static UFunction* pFnCanDoStrike = NULL;

	if ( ! pFnCanDoStrike )
		pFnCanDoStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanDoStrike" );

	AKFAIController_execCanDoStrike_Parms CanDoStrike_Parms;

	this->ProcessEvent ( pFnCanDoStrike, &CanDoStrike_Parms, NULL );
};

// Function KFGame.KFAIController.DoStrike
// [0x00020000] 
// Parameters infos:

void AKFAIController::DoStrike ( )
{
	static UFunction* pFnDoStrike = NULL;

	if ( ! pFnDoStrike )
		pFnDoStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoStrike" );

	AKFAIController_execDoStrike_Parms DoStrike_Parms;

	this->ProcessEvent ( pFnDoStrike, &DoStrike_Parms, NULL );
};

// Function KFGame.KFAIController.SetEnemyMoveGoal
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventSetEnemyMoveGoal ( )
{
	static UFunction* pFnSetEnemyMoveGoal = NULL;

	if ( ! pFnSetEnemyMoveGoal )
		pFnSetEnemyMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetEnemyMoveGoal" );

	AKFAIController_eventSetEnemyMoveGoal_Parms SetEnemyMoveGoal_Parms;

	this->ProcessEvent ( pFnSetEnemyMoveGoal, &SetEnemyMoveGoal_Parms, NULL );
};

// Function KFGame.KFAIController.SetMovePoint
// [0x00024803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventSetMovePoint ( )
{
	static UFunction* pFnSetMovePoint = NULL;

	if ( ! pFnSetMovePoint )
		pFnSetMovePoint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetMovePoint" );

	AKFAIController_eventSetMovePoint_Parms SetMovePoint_Parms;

	this->ProcessEvent ( pFnSetMovePoint, &SetMovePoint_Parms, NULL );
};

// Function KFGame.KFAIController.SetMoveGoal
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventSetMoveGoal ( )
{
	static UFunction* pFnSetMoveGoal = NULL;

	if ( ! pFnSetMoveGoal )
		pFnSetMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetMoveGoal" );

	AKFAIController_eventSetMoveGoal_Parms SetMoveGoal_Parms;

	this->ProcessEvent ( pFnSetMoveGoal, &SetMoveGoal_Parms, NULL );
};

// Function KFGame.KFAIController.DoFleeFrom
// [0x00024002] 
// Parameters infos:

void AKFAIController::DoFleeFrom ( )
{
	static UFunction* pFnDoFleeFrom = NULL;

	if ( ! pFnDoFleeFrom )
		pFnDoFleeFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoFleeFrom" );

	AKFAIController_execDoFleeFrom_Parms DoFleeFrom_Parms;

	this->ProcessEvent ( pFnDoFleeFrom, &DoFleeFrom_Parms, NULL );
};

// Function KFGame.KFAIController.DoWander
// [0x00024002] 
// Parameters infos:

void AKFAIController::DoWander ( )
{
	static UFunction* pFnDoWander = NULL;

	if ( ! pFnDoWander )
		pFnDoWander = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoWander" );

	AKFAIController_execDoWander_Parms DoWander_Parms;

	this->ProcessEvent ( pFnDoWander, &DoWander_Parms, NULL );
};

// Function KFGame.KFAIController.DoPauseAI
// [0x00824002] 
// Parameters infos:

void AKFAIController::DoPauseAI ( )
{
	static UFunction* pFnDoPauseAI = NULL;

	if ( ! pFnDoPauseAI )
		pFnDoPauseAI = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoPauseAI" );

	AKFAIController_execDoPauseAI_Parms DoPauseAI_Parms;

	this->ProcessEvent ( pFnDoPauseAI, &DoPauseAI_Parms, NULL );
};

// Function KFGame.KFAIController.ShowAdvancedRouteEdgeDebugInfo
// [0x00026000] 
// Parameters infos:

void AKFAIController::ShowAdvancedRouteEdgeDebugInfo ( )
{
	static UFunction* pFnShowAdvancedRouteEdgeDebugInfo = NULL;

	if ( ! pFnShowAdvancedRouteEdgeDebugInfo )
		pFnShowAdvancedRouteEdgeDebugInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ShowAdvancedRouteEdgeDebugInfo" );

	AKFAIController_execShowAdvancedRouteEdgeDebugInfo_Parms ShowAdvancedRouteEdgeDebugInfo_Parms;

	this->ProcessEvent ( pFnShowAdvancedRouteEdgeDebugInfo, &ShowAdvancedRouteEdgeDebugInfo_Parms, NULL );
};

// Function KFGame.KFAIController.AddBlockedReachSpec
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::AddBlockedReachSpec ( )
{
	static UFunction* pFnAddBlockedReachSpec = NULL;

	if ( ! pFnAddBlockedReachSpec )
		pFnAddBlockedReachSpec = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AddBlockedReachSpec" );

	AKFAIController_execAddBlockedReachSpec_Parms AddBlockedReachSpec_Parms;

	pFnAddBlockedReachSpec->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddBlockedReachSpec, &AddBlockedReachSpec_Parms, NULL );

	pFnAddBlockedReachSpec->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.GenerateDoorlessPathTo
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventGenerateDoorlessPathTo ( )
{
	static UFunction* pFnGenerateDoorlessPathTo = NULL;

	if ( ! pFnGenerateDoorlessPathTo )
		pFnGenerateDoorlessPathTo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GenerateDoorlessPathTo" );

	AKFAIController_eventGenerateDoorlessPathTo_Parms GenerateDoorlessPathTo_Parms;

	this->ProcessEvent ( pFnGenerateDoorlessPathTo, &GenerateDoorlessPathTo_Parms, NULL );
};

// Function KFGame.KFAIController.GenerateNavMeshPathToLocation
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventGenerateNavMeshPathToLocation ( )
{
	static UFunction* pFnGenerateNavMeshPathToLocation = NULL;

	if ( ! pFnGenerateNavMeshPathToLocation )
		pFnGenerateNavMeshPathToLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GenerateNavMeshPathToLocation" );

	AKFAIController_eventGenerateNavMeshPathToLocation_Parms GenerateNavMeshPathToLocation_Parms;

	this->ProcessEvent ( pFnGenerateNavMeshPathToLocation, &GenerateNavMeshPathToLocation_Parms, NULL );
};

// Function KFGame.KFAIController.GenerateNavMeshPathTo
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventGenerateNavMeshPathTo ( )
{
	static UFunction* pFnGenerateNavMeshPathTo = NULL;

	if ( ! pFnGenerateNavMeshPathTo )
		pFnGenerateNavMeshPathTo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GenerateNavMeshPathTo" );

	AKFAIController_eventGenerateNavMeshPathTo_Parms GenerateNavMeshPathTo_Parms;

	this->ProcessEvent ( pFnGenerateNavMeshPathTo, &GenerateNavMeshPathTo_Parms, NULL );
};

// Function KFGame.KFAIController.GeneratePathTo
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventGeneratePathTo ( )
{
	static UFunction* pFnGeneratePathTo = NULL;

	if ( ! pFnGeneratePathTo )
		pFnGeneratePathTo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GeneratePathTo" );

	AKFAIController_eventGeneratePathTo_Parms GeneratePathTo_Parms;

	this->ProcessEvent ( pFnGeneratePathTo, &GeneratePathTo_Parms, NULL );
};

// Function KFGame.KFAIController.MovePointIsValid
// [0x00024002] 
// Parameters infos:

void AKFAIController::MovePointIsValid ( )
{
	static UFunction* pFnMovePointIsValid = NULL;

	if ( ! pFnMovePointIsValid )
		pFnMovePointIsValid = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.MovePointIsValid" );

	AKFAIController_execMovePointIsValid_Parms MovePointIsValid_Parms;

	this->ProcessEvent ( pFnMovePointIsValid, &MovePointIsValid_Parms, NULL );
};

// Function KFGame.KFAIController.MoveGoalIsValid
// [0x00024002] 
// Parameters infos:

void AKFAIController::MoveGoalIsValid ( )
{
	static UFunction* pFnMoveGoalIsValid = NULL;

	if ( ! pFnMoveGoalIsValid )
		pFnMoveGoalIsValid = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.MoveGoalIsValid" );

	AKFAIController_execMoveGoalIsValid_Parms MoveGoalIsValid_Parms;

	this->ProcessEvent ( pFnMoveGoalIsValid, &MoveGoalIsValid_Parms, NULL );
};

// Function KFGame.KFAIController.MoveIsInterruptable
// [0x00024002] 
// Parameters infos:

void AKFAIController::MoveIsInterruptable ( )
{
	static UFunction* pFnMoveIsInterruptable = NULL;

	if ( ! pFnMoveIsInterruptable )
		pFnMoveIsInterruptable = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.MoveIsInterruptable" );

	AKFAIController_execMoveIsInterruptable_Parms MoveIsInterruptable_Parms;

	this->ProcessEvent ( pFnMoveIsInterruptable, &MoveIsInterruptable_Parms, NULL );
};

// Function KFGame.KFAIController.ReachedIntermediateMoveGoal
// [0x00020002] 
// Parameters infos:

void AKFAIController::ReachedIntermediateMoveGoal ( )
{
	static UFunction* pFnReachedIntermediateMoveGoal = NULL;

	if ( ! pFnReachedIntermediateMoveGoal )
		pFnReachedIntermediateMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ReachedIntermediateMoveGoal" );

	AKFAIController_execReachedIntermediateMoveGoal_Parms ReachedIntermediateMoveGoal_Parms;

	this->ProcessEvent ( pFnReachedIntermediateMoveGoal, &ReachedIntermediateMoveGoal_Parms, NULL );
};

// Function KFGame.KFAIController.ReachedMoveGoal
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventReachedMoveGoal ( )
{
	static UFunction* pFnReachedMoveGoal = NULL;

	if ( ! pFnReachedMoveGoal )
		pFnReachedMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ReachedMoveGoal" );

	AKFAIController_eventReachedMoveGoal_Parms ReachedMoveGoal_Parms;

	this->ProcessEvent ( pFnReachedMoveGoal, &ReachedMoveGoal_Parms, NULL );
};

// Function KFGame.KFAIController.AllowedToMove
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventAllowedToMove ( )
{
	static UFunction* pFnAllowedToMove = NULL;

	if ( ! pFnAllowedToMove )
		pFnAllowedToMove = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AllowedToMove" );

	AKFAIController_eventAllowedToMove_Parms AllowedToMove_Parms;

	this->ProcessEvent ( pFnAllowedToMove, &AllowedToMove_Parms, NULL );
};

// Function KFGame.KFAIController.StoppingMovement
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventStoppingMovement ( )
{
	static UFunction* pFnStoppingMovement = NULL;

	if ( ! pFnStoppingMovement )
		pFnStoppingMovement = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StoppingMovement" );

	AKFAIController_eventStoppingMovement_Parms StoppingMovement_Parms;

	this->ProcessEvent ( pFnStoppingMovement, &StoppingMovement_Parms, NULL );
};

// Function KFGame.KFAIController.StartingMovement
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventStartingMovement ( )
{
	static UFunction* pFnStartingMovement = NULL;

	if ( ! pFnStartingMovement )
		pFnStartingMovement = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StartingMovement" );

	AKFAIController_eventStartingMovement_Parms StartingMovement_Parms;

	this->ProcessEvent ( pFnStartingMovement, &StartingMovement_Parms, NULL );
};

// Function KFGame.KFAIController.StopMovement
// [0x00024002] 
// Parameters infos:

void AKFAIController::StopMovement ( )
{
	static UFunction* pFnStopMovement = NULL;

	if ( ! pFnStopMovement )
		pFnStopMovement = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StopMovement" );

	AKFAIController_execStopMovement_Parms StopMovement_Parms;

	this->ProcessEvent ( pFnStopMovement, &StopMovement_Parms, NULL );
};

// Function KFGame.KFAIController.AIZeroMovementVariables
// [0x00024002] 
// Parameters infos:

void AKFAIController::AIZeroMovementVariables ( )
{
	static UFunction* pFnAIZeroMovementVariables = NULL;

	if ( ! pFnAIZeroMovementVariables )
		pFnAIZeroMovementVariables = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AIZeroMovementVariables" );

	AKFAIController_execAIZeroMovementVariables_Parms AIZeroMovementVariables_Parms;

	this->ProcessEvent ( pFnAIZeroMovementVariables, &AIZeroMovementVariables_Parms, NULL );
};

// Function KFGame.KFAIController.AbortMovementPlugIns
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventAbortMovementPlugIns ( )
{
	static UFunction* pFnAbortMovementPlugIns = NULL;

	if ( ! pFnAbortMovementPlugIns )
		pFnAbortMovementPlugIns = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AbortMovementPlugIns" );

	AKFAIController_eventAbortMovementPlugIns_Parms AbortMovementPlugIns_Parms;

	this->ProcessEvent ( pFnAbortMovementPlugIns, &AbortMovementPlugIns_Parms, NULL );
};

// Function KFGame.KFAIController.AbortMovementCommands
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventAbortMovementCommands ( )
{
	static UFunction* pFnAbortMovementCommands = NULL;

	if ( ! pFnAbortMovementCommands )
		pFnAbortMovementCommands = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AbortMovementCommands" );

	AKFAIController_eventAbortMovementCommands_Parms AbortMovementCommands_Parms;

	this->ProcessEvent ( pFnAbortMovementCommands, &AbortMovementCommands_Parms, NULL );
};

// Function KFGame.KFAIController.ClearMovementInfo
// [0x00024002] 
// Parameters infos:

void AKFAIController::ClearMovementInfo ( )
{
	static UFunction* pFnClearMovementInfo = NULL;

	if ( ! pFnClearMovementInfo )
		pFnClearMovementInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ClearMovementInfo" );

	AKFAIController_execClearMovementInfo_Parms ClearMovementInfo_Parms;

	this->ProcessEvent ( pFnClearMovementInfo, &ClearMovementInfo_Parms, NULL );
};

// Function KFGame.KFAIController.StopAllLatentMovement
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventStopAllLatentMovement ( )
{
	static UFunction* pFnStopAllLatentMovement = NULL;

	if ( ! pFnStopAllLatentMovement )
		pFnStopAllLatentMovement = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StopAllLatentMovement" );

	AKFAIController_eventStopAllLatentMovement_Parms StopAllLatentMovement_Parms;

	this->ProcessEvent ( pFnStopAllLatentMovement, &StopAllLatentMovement_Parms, NULL );
};

// Function KFGame.KFAIController.IsDoingLatentMove
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsDoingLatentMove ( )
{
	static UFunction* pFnIsDoingLatentMove = NULL;

	if ( ! pFnIsDoingLatentMove )
		pFnIsDoingLatentMove = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsDoingLatentMove" );

	AKFAIController_execIsDoingLatentMove_Parms IsDoingLatentMove_Parms;

	this->ProcessEvent ( pFnIsDoingLatentMove, &IsDoingLatentMove_Parms, NULL );
};

// Function KFGame.KFAIController.SetDirectPathCheckTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::SetDirectPathCheckTime ( )
{
	static UFunction* pFnSetDirectPathCheckTime = NULL;

	if ( ! pFnSetDirectPathCheckTime )
		pFnSetDirectPathCheckTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetDirectPathCheckTime" );

	AKFAIController_execSetDirectPathCheckTime_Parms SetDirectPathCheckTime_Parms;

	pFnSetDirectPathCheckTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetDirectPathCheckTime, &SetDirectPathCheckTime_Parms, NULL );

	pFnSetDirectPathCheckTime->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.CalcClosestPointTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::CalcClosestPointTime ( )
{
	static UFunction* pFnCalcClosestPointTime = NULL;

	if ( ! pFnCalcClosestPointTime )
		pFnCalcClosestPointTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CalcClosestPointTime" );

	AKFAIController_execCalcClosestPointTime_Parms CalcClosestPointTime_Parms;

	pFnCalcClosestPointTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcClosestPointTime, &CalcClosestPointTime_Parms, NULL );

	pFnCalcClosestPointTime->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.GetRouteCacheDistance
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::GetRouteCacheDistance ( )
{
	static UFunction* pFnGetRouteCacheDistance = NULL;

	if ( ! pFnGetRouteCacheDistance )
		pFnGetRouteCacheDistance = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetRouteCacheDistance" );

	AKFAIController_execGetRouteCacheDistance_Parms GetRouteCacheDistance_Parms;

	pFnGetRouteCacheDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetRouteCacheDistance, &GetRouteCacheDistance_Parms, NULL );

	pFnGetRouteCacheDistance->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.GetSteering
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::GetSteering ( )
{
	static UFunction* pFnGetSteering = NULL;

	if ( ! pFnGetSteering )
		pFnGetSteering = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetSteering" );

	AKFAIController_execGetSteering_Parms GetSteering_Parms;

	pFnGetSteering->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSteering, &GetSteering_Parms, NULL );

	pFnGetSteering->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.InitSteering
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::InitSteering ( )
{
	static UFunction* pFnInitSteering = NULL;

	if ( ! pFnInitSteering )
		pFnInitSteering = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.InitSteering" );

	AKFAIController_execInitSteering_Parms InitSteering_Parms;

	pFnInitSteering->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitSteering, &InitSteering_Parms, NULL );

	pFnInitSteering->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IsMovingToJumpPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::IsMovingToJumpPoint ( )
{
	static UFunction* pFnIsMovingToJumpPoint = NULL;

	if ( ! pFnIsMovingToJumpPoint )
		pFnIsMovingToJumpPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsMovingToJumpPoint" );

	AKFAIController_execIsMovingToJumpPoint_Parms IsMovingToJumpPoint_Parms;

	pFnIsMovingToJumpPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMovingToJumpPoint, &IsMovingToJumpPoint_Parms, NULL );

	pFnIsMovingToJumpPoint->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.ActorReachableNoAnchorCheck
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::ActorReachableNoAnchorCheck ( )
{
	static UFunction* pFnActorReachableNoAnchorCheck = NULL;

	if ( ! pFnActorReachableNoAnchorCheck )
		pFnActorReachableNoAnchorCheck = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ActorReachableNoAnchorCheck" );

	AKFAIController_execActorReachableNoAnchorCheck_Parms ActorReachableNoAnchorCheck_Parms;

	pFnActorReachableNoAnchorCheck->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActorReachableNoAnchorCheck, &ActorReachableNoAnchorCheck_Parms, NULL );

	pFnActorReachableNoAnchorCheck->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.CheckInterruptCombatTransitions
// [0x00020002] 
// Parameters infos:

void AKFAIController::CheckInterruptCombatTransitions ( )
{
	static UFunction* pFnCheckInterruptCombatTransitions = NULL;

	if ( ! pFnCheckInterruptCombatTransitions )
		pFnCheckInterruptCombatTransitions = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CheckInterruptCombatTransitions" );

	AKFAIController_execCheckInterruptCombatTransitions_Parms CheckInterruptCombatTransitions_Parms;

	this->ProcessEvent ( pFnCheckInterruptCombatTransitions, &CheckInterruptCombatTransitions_Parms, NULL );
};

// Function KFGame.KFAIController.CheckOverallCooldownTimer
// [0x00020002] 
// Parameters infos:

void AKFAIController::CheckOverallCooldownTimer ( )
{
	static UFunction* pFnCheckOverallCooldownTimer = NULL;

	if ( ! pFnCheckOverallCooldownTimer )
		pFnCheckOverallCooldownTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CheckOverallCooldownTimer" );

	AKFAIController_execCheckOverallCooldownTimer_Parms CheckOverallCooldownTimer_Parms;

	this->ProcessEvent ( pFnCheckOverallCooldownTimer, &CheckOverallCooldownTimer_Parms, NULL );
};

// Function KFGame.KFAIController.SetOverallCooldownTimer
// [0x00020002] 
// Parameters infos:

void AKFAIController::SetOverallCooldownTimer ( )
{
	static UFunction* pFnSetOverallCooldownTimer = NULL;

	if ( ! pFnSetOverallCooldownTimer )
		pFnSetOverallCooldownTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetOverallCooldownTimer" );

	AKFAIController_execSetOverallCooldownTimer_Parms SetOverallCooldownTimer_Parms;

	this->ProcessEvent ( pFnSetOverallCooldownTimer, &SetOverallCooldownTimer_Parms, NULL );
};

// Function KFGame.KFAIController.AddCooldownTimer
// [0x00820002] 
// Parameters infos:

void AKFAIController::AddCooldownTimer ( )
{
	static UFunction* pFnAddCooldownTimer = NULL;

	if ( ! pFnAddCooldownTimer )
		pFnAddCooldownTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AddCooldownTimer" );

	AKFAIController_execAddCooldownTimer_Parms AddCooldownTimer_Parms;

	this->ProcessEvent ( pFnAddCooldownTimer, &AddCooldownTimer_Parms, NULL );
};

// Function KFGame.KFAIController.CheckCooldownTimer
// [0x00020002] 
// Parameters infos:

void AKFAIController::CheckCooldownTimer ( )
{
	static UFunction* pFnCheckCooldownTimer = NULL;

	if ( ! pFnCheckCooldownTimer )
		pFnCheckCooldownTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CheckCooldownTimer" );

	AKFAIController_execCheckCooldownTimer_Parms CheckCooldownTimer_Parms;

	this->ProcessEvent ( pFnCheckCooldownTimer, &CheckCooldownTimer_Parms, NULL );
};

// Function KFGame.KFAIController.AreZedsNear
// [0x00824002] 
// Parameters infos:

void AKFAIController::AreZedsNear ( )
{
	static UFunction* pFnAreZedsNear = NULL;

	if ( ! pFnAreZedsNear )
		pFnAreZedsNear = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AreZedsNear" );

	AKFAIController_execAreZedsNear_Parms AreZedsNear_Parms;

	this->ProcessEvent ( pFnAreZedsNear, &AreZedsNear_Parms, NULL );
};

// Function KFGame.KFAIController.CanSeeByPointsEx
// [0x00420401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::CanSeeByPointsEx ( )
{
	static UFunction* pFnCanSeeByPointsEx = NULL;

	if ( ! pFnCanSeeByPointsEx )
		pFnCanSeeByPointsEx = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanSeeByPointsEx" );

	AKFAIController_execCanSeeByPointsEx_Parms CanSeeByPointsEx_Parms;

	pFnCanSeeByPointsEx->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSeeByPointsEx, &CanSeeByPointsEx_Parms, NULL );

	pFnCanSeeByPointsEx->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.GetZedCount
// [0x00024002] 
// Parameters infos:

void AKFAIController::GetZedCount ( )
{
	static UFunction* pFnGetZedCount = NULL;

	if ( ! pFnGetZedCount )
		pFnGetZedCount = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetZedCount" );

	AKFAIController_execGetZedCount_Parms GetZedCount_Parms;

	this->ProcessEvent ( pFnGetZedCount, &GetZedCount_Parms, NULL );
};

// Function KFGame.KFAIController.OtherZedsTargetingMyEnemy
// [0x00020002] 
// Parameters infos:

void AKFAIController::OtherZedsTargetingMyEnemy ( )
{
	static UFunction* pFnOtherZedsTargetingMyEnemy = NULL;

	if ( ! pFnOtherZedsTargetingMyEnemy )
		pFnOtherZedsTargetingMyEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.OtherZedsTargetingMyEnemy" );

	AKFAIController_execOtherZedsTargetingMyEnemy_Parms OtherZedsTargetingMyEnemy_Parms;

	this->ProcessEvent ( pFnOtherZedsTargetingMyEnemy, &OtherZedsTargetingMyEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.NumberOfZedsTargetingPawn
// [0x00024002] 
// Parameters infos:

void AKFAIController::NumberOfZedsTargetingPawn ( )
{
	static UFunction* pFnNumberOfZedsTargetingPawn = NULL;

	if ( ! pFnNumberOfZedsTargetingPawn )
		pFnNumberOfZedsTargetingPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NumberOfZedsTargetingPawn" );

	AKFAIController_execNumberOfZedsTargetingPawn_Parms NumberOfZedsTargetingPawn_Parms;

	this->ProcessEvent ( pFnNumberOfZedsTargetingPawn, &NumberOfZedsTargetingPawn_Parms, NULL );
};

// Function KFGame.KFAIController.DoGrabAttack
// [0x00024800] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventDoGrabAttack ( )
{
	static UFunction* pFnDoGrabAttack = NULL;

	if ( ! pFnDoGrabAttack )
		pFnDoGrabAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoGrabAttack" );

	AKFAIController_eventDoGrabAttack_Parms DoGrabAttack_Parms;

	this->ProcessEvent ( pFnDoGrabAttack, &DoGrabAttack_Parms, NULL );
};

// Function KFGame.KFAIController.CanGrabAttack
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventCanGrabAttack ( )
{
	static UFunction* pFnCanGrabAttack = NULL;

	if ( ! pFnCanGrabAttack )
		pFnCanGrabAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanGrabAttack" );

	AKFAIController_eventCanGrabAttack_Parms CanGrabAttack_Parms;

	this->ProcessEvent ( pFnCanGrabAttack, &CanGrabAttack_Parms, NULL );
};

// Function KFGame.KFAIController.ChooseStrikeByName
// [0x00024002] 
// Parameters infos:

void AKFAIController::ChooseStrikeByName ( )
{
	static UFunction* pFnChooseStrikeByName = NULL;

	if ( ! pFnChooseStrikeByName )
		pFnChooseStrikeByName = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ChooseStrikeByName" );

	AKFAIController_execChooseStrikeByName_Parms ChooseStrikeByName_Parms;

	this->ProcessEvent ( pFnChooseStrikeByName, &ChooseStrikeByName_Parms, NULL );
};

// Function KFGame.KFAIController.UpdateLastMeleeTime
// [0x00020002] 
// Parameters infos:

void AKFAIController::UpdateLastMeleeTime ( )
{
	static UFunction* pFnUpdateLastMeleeTime = NULL;

	if ( ! pFnUpdateLastMeleeTime )
		pFnUpdateLastMeleeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.UpdateLastMeleeTime" );

	AKFAIController_execUpdateLastMeleeTime_Parms UpdateLastMeleeTime_Parms;

	this->ProcessEvent ( pFnUpdateLastMeleeTime, &UpdateLastMeleeTime_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyCommandMeleeAttackAborted
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifyCommandMeleeAttackAborted ( )
{
	static UFunction* pFnNotifyCommandMeleeAttackAborted = NULL;

	if ( ! pFnNotifyCommandMeleeAttackAborted )
		pFnNotifyCommandMeleeAttackAborted = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyCommandMeleeAttackAborted" );

	AKFAIController_execNotifyCommandMeleeAttackAborted_Parms NotifyCommandMeleeAttackAborted_Parms;

	this->ProcessEvent ( pFnNotifyCommandMeleeAttackAborted, &NotifyCommandMeleeAttackAborted_Parms, NULL );
};

// Function KFGame.KFAIController.EndOfMeleeAttackNotification
// [0x00020000] 
// Parameters infos:

void AKFAIController::EndOfMeleeAttackNotification ( )
{
	static UFunction* pFnEndOfMeleeAttackNotification = NULL;

	if ( ! pFnEndOfMeleeAttackNotification )
		pFnEndOfMeleeAttackNotification = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EndOfMeleeAttackNotification" );

	AKFAIController_execEndOfMeleeAttackNotification_Parms EndOfMeleeAttackNotification_Parms;

	this->ProcessEvent ( pFnEndOfMeleeAttackNotification, &EndOfMeleeAttackNotification_Parms, NULL );
};

// Function KFGame.KFAIController.WithinMeleeHeightDifference
// [0x00820002] 
// Parameters infos:

void AKFAIController::WithinMeleeHeightDifference ( )
{
	static UFunction* pFnWithinMeleeHeightDifference = NULL;

	if ( ! pFnWithinMeleeHeightDifference )
		pFnWithinMeleeHeightDifference = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.WithinMeleeHeightDifference" );

	AKFAIController_execWithinMeleeHeightDifference_Parms WithinMeleeHeightDifference_Parms;

	this->ProcessEvent ( pFnWithinMeleeHeightDifference, &WithinMeleeHeightDifference_Parms, NULL );
};

// Function KFGame.KFAIController.IsWithinAttackRange
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsWithinAttackRange ( )
{
	static UFunction* pFnIsWithinAttackRange = NULL;

	if ( ! pFnIsWithinAttackRange )
		pFnIsWithinAttackRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsWithinAttackRange" );

	AKFAIController_execIsWithinAttackRange_Parms IsWithinAttackRange_Parms;

	this->ProcessEvent ( pFnIsWithinAttackRange, &IsWithinAttackRange_Parms, NULL );
};

// Function KFGame.KFAIController.IsValidAttackTarget
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsValidAttackTarget ( )
{
	static UFunction* pFnIsValidAttackTarget = NULL;

	if ( ! pFnIsValidAttackTarget )
		pFnIsValidAttackTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsValidAttackTarget" );

	AKFAIController_execIsValidAttackTarget_Parms IsValidAttackTarget_Parms;

	this->ProcessEvent ( pFnIsValidAttackTarget, &IsValidAttackTarget_Parms, NULL );
};

// Function KFGame.KFAIController.BeginMeleeCommand
// [0x00024002] 
// Parameters infos:

void AKFAIController::BeginMeleeCommand ( )
{
	static UFunction* pFnBeginMeleeCommand = NULL;

	if ( ! pFnBeginMeleeCommand )
		pFnBeginMeleeCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.BeginMeleeCommand" );

	AKFAIController_execBeginMeleeCommand_Parms BeginMeleeCommand_Parms;

	this->ProcessEvent ( pFnBeginMeleeCommand, &BeginMeleeCommand_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyMeleeAttackFinished
// [0x00020000] 
// Parameters infos:

void AKFAIController::NotifyMeleeAttackFinished ( )
{
	static UFunction* pFnNotifyMeleeAttackFinished = NULL;

	if ( ! pFnNotifyMeleeAttackFinished )
		pFnNotifyMeleeAttackFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyMeleeAttackFinished" );

	AKFAIController_execNotifyMeleeAttackFinished_Parms NotifyMeleeAttackFinished_Parms;

	this->ProcessEvent ( pFnNotifyMeleeAttackFinished, &NotifyMeleeAttackFinished_Parms, NULL );
};

// Function KFGame.KFAIController.DoHeavyZedBump
// [0x00020002] 
// Parameters infos:

void AKFAIController::DoHeavyZedBump ( )
{
	static UFunction* pFnDoHeavyZedBump = NULL;

	if ( ! pFnDoHeavyZedBump )
		pFnDoHeavyZedBump = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DoHeavyZedBump" );

	AKFAIController_execDoHeavyZedBump_Parms DoHeavyZedBump_Parms;

	this->ProcessEvent ( pFnDoHeavyZedBump, &DoHeavyZedBump_Parms, NULL );
};

// Function KFGame.KFAIController.SelectTarget
// [0x00020002] 
// Parameters infos:

void AKFAIController::SelectTarget ( )
{
	static UFunction* pFnSelectTarget = NULL;

	if ( ! pFnSelectTarget )
		pFnSelectTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SelectTarget" );

	AKFAIController_execSelectTarget_Parms SelectTarget_Parms;

	this->ProcessEvent ( pFnSelectTarget, &SelectTarget_Parms, NULL );
};

// Function KFGame.KFAIController.SelectEnemy
// [0x00020002] 
// Parameters infos:

void AKFAIController::SelectEnemy ( )
{
	static UFunction* pFnSelectEnemy = NULL;

	if ( ! pFnSelectEnemy )
		pFnSelectEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SelectEnemy" );

	AKFAIController_execSelectEnemy_Parms SelectEnemy_Parms;

	this->ProcessEvent ( pFnSelectEnemy, &SelectEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.HasValidEnemy
// [0x00024003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::HasValidEnemy ( )
{
	static UFunction* pFnHasValidEnemy = NULL;

	if ( ! pFnHasValidEnemy )
		pFnHasValidEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.HasValidEnemy" );

	AKFAIController_execHasValidEnemy_Parms HasValidEnemy_Parms;

	this->ProcessEvent ( pFnHasValidEnemy, &HasValidEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.NotifyKilled
// [0x00020002] 
// Parameters infos:

void AKFAIController::NotifyKilled ( )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.NotifyKilled" );

	AKFAIController_execNotifyKilled_Parms NotifyKilled_Parms;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function KFGame.KFAIController.CheckCombatTransition
// [0x00020002] 
// Parameters infos:

void AKFAIController::CheckCombatTransition ( )
{
	static UFunction* pFnCheckCombatTransition = NULL;

	if ( ! pFnCheckCombatTransition )
		pFnCheckCombatTransition = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CheckCombatTransition" );

	AKFAIController_execCheckCombatTransition_Parms CheckCombatTransition_Parms;

	this->ProcessEvent ( pFnCheckCombatTransition, &CheckCombatTransition_Parms, NULL );
};

// Function KFGame.KFAIController.IsDoingAttackSpecialMove
// [0x00020803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFAIController::eventIsDoingAttackSpecialMove ( )
{
	static UFunction* pFnIsDoingAttackSpecialMove = NULL;

	if ( ! pFnIsDoingAttackSpecialMove )
		pFnIsDoingAttackSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsDoingAttackSpecialMove" );

	AKFAIController_eventIsDoingAttackSpecialMove_Parms IsDoingAttackSpecialMove_Parms;

	this->ProcessEvent ( pFnIsDoingAttackSpecialMove, &IsDoingAttackSpecialMove_Parms, NULL );
};

// Function KFGame.KFAIController.GetClosestEnemy
// [0x00024003] ( FUNC_Final )
// Parameters infos:

void AKFAIController::GetClosestEnemy ( )
{
	static UFunction* pFnGetClosestEnemy = NULL;

	if ( ! pFnGetClosestEnemy )
		pFnGetClosestEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetClosestEnemy" );

	AKFAIController_execGetClosestEnemy_Parms GetClosestEnemy_Parms;

	this->ProcessEvent ( pFnGetClosestEnemy, &GetClosestEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.CleanOutCommandListOnCombatTransition
// [0x00020002] 
// Parameters infos:

void AKFAIController::CleanOutCommandListOnCombatTransition ( )
{
	static UFunction* pFnCleanOutCommandListOnCombatTransition = NULL;

	if ( ! pFnCleanOutCommandListOnCombatTransition )
		pFnCleanOutCommandListOnCombatTransition = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CleanOutCommandListOnCombatTransition" );

	AKFAIController_execCleanOutCommandListOnCombatTransition_Parms CleanOutCommandListOnCombatTransition_Parms;

	this->ProcessEvent ( pFnCleanOutCommandListOnCombatTransition, &CleanOutCommandListOnCombatTransition_Parms, NULL );
};

// Function KFGame.KFAIController.InitalizeBaseCommand
// [0x00020002] 
// Parameters infos:

void AKFAIController::InitalizeBaseCommand ( )
{
	static UFunction* pFnInitalizeBaseCommand = NULL;

	if ( ! pFnInitalizeBaseCommand )
		pFnInitalizeBaseCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.InitalizeBaseCommand" );

	AKFAIController_execInitalizeBaseCommand_Parms InitalizeBaseCommand_Parms;

	this->ProcessEvent ( pFnInitalizeBaseCommand, &InitalizeBaseCommand_Parms, NULL );
};

// Function KFGame.KFAIController.BeginCombatCommand
// [0x00024002] 
// Parameters infos:

void AKFAIController::BeginCombatCommand ( )
{
	static UFunction* pFnBeginCombatCommand = NULL;

	if ( ! pFnBeginCombatCommand )
		pFnBeginCombatCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.BeginCombatCommand" );

	AKFAIController_execBeginCombatCommand_Parms BeginCombatCommand_Parms;

	this->ProcessEvent ( pFnBeginCombatCommand, &BeginCombatCommand_Parms, NULL );
};

// Function KFGame.KFAIController.CanTargetBeGrabbed
// [0x00020002] 
// Parameters infos:

void AKFAIController::CanTargetBeGrabbed ( )
{
	static UFunction* pFnCanTargetBeGrabbed = NULL;

	if ( ! pFnCanTargetBeGrabbed )
		pFnCanTargetBeGrabbed = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CanTargetBeGrabbed" );

	AKFAIController_execCanTargetBeGrabbed_Parms CanTargetBeGrabbed_Parms;

	this->ProcessEvent ( pFnCanTargetBeGrabbed, &CanTargetBeGrabbed_Parms, NULL );
};

// Function KFGame.KFAIController.IsDoingGrabSpecialMove
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsDoingGrabSpecialMove ( )
{
	static UFunction* pFnIsDoingGrabSpecialMove = NULL;

	if ( ! pFnIsDoingGrabSpecialMove )
		pFnIsDoingGrabSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsDoingGrabSpecialMove" );

	AKFAIController_execIsDoingGrabSpecialMove_Parms IsDoingGrabSpecialMove_Parms;

	this->ProcessEvent ( pFnIsDoingGrabSpecialMove, &IsDoingGrabSpecialMove_Parms, NULL );
};

// Function KFGame.KFAIController.IsSuicidal
// [0x00020002] 
// Parameters infos:

void AKFAIController::IsSuicidal ( )
{
	static UFunction* pFnIsSuicidal = NULL;

	if ( ! pFnIsSuicidal )
		pFnIsSuicidal = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsSuicidal" );

	AKFAIController_execIsSuicidal_Parms IsSuicidal_Parms;

	this->ProcessEvent ( pFnIsSuicidal, &IsSuicidal_Parms, NULL );
};

// Function KFGame.KFAIController.ReadyToMelee
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventReadyToMelee ( )
{
	static UFunction* pFnReadyToMelee = NULL;

	if ( ! pFnReadyToMelee )
		pFnReadyToMelee = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ReadyToMelee" );

	AKFAIController_eventReadyToMelee_Parms ReadyToMelee_Parms;

	this->ProcessEvent ( pFnReadyToMelee, &ReadyToMelee_Parms, NULL );
};

// Function KFGame.KFAIController.ResetProbingMeleeRangeEvents
// [0x00024002] 
// Parameters infos:

void AKFAIController::ResetProbingMeleeRangeEvents ( )
{
	static UFunction* pFnResetProbingMeleeRangeEvents = NULL;

	if ( ! pFnResetProbingMeleeRangeEvents )
		pFnResetProbingMeleeRangeEvents = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ResetProbingMeleeRangeEvents" );

	AKFAIController_execResetProbingMeleeRangeEvents_Parms ResetProbingMeleeRangeEvents_Parms;

	this->ProcessEvent ( pFnResetProbingMeleeRangeEvents, &ResetProbingMeleeRangeEvents_Parms, NULL );
};

// Function KFGame.KFAIController.EnableProbingMeleeRangeEvents
// [0x00024002] 
// Parameters infos:

void AKFAIController::EnableProbingMeleeRangeEvents ( )
{
	static UFunction* pFnEnableProbingMeleeRangeEvents = NULL;

	if ( ! pFnEnableProbingMeleeRangeEvents )
		pFnEnableProbingMeleeRangeEvents = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnableProbingMeleeRangeEvents" );

	AKFAIController_execEnableProbingMeleeRangeEvents_Parms EnableProbingMeleeRangeEvents_Parms;

	this->ProcessEvent ( pFnEnableProbingMeleeRangeEvents, &EnableProbingMeleeRangeEvents_Parms, NULL );
};

// Function KFGame.KFAIController.GetAggroRating
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetAggroRating ( )
{
	static UFunction* pFnGetAggroRating = NULL;

	if ( ! pFnGetAggroRating )
		pFnGetAggroRating = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetAggroRating" );

	AKFAIController_execGetAggroRating_Parms GetAggroRating_Parms;

	this->ProcessEvent ( pFnGetAggroRating, &GetAggroRating_Parms, NULL );
};

// Function KFGame.KFAIController.CheckForEnemiesInFOV
// [0x00824002] 
// Parameters infos:

void AKFAIController::CheckForEnemiesInFOV ( )
{
	static UFunction* pFnCheckForEnemiesInFOV = NULL;

	if ( ! pFnCheckForEnemiesInFOV )
		pFnCheckForEnemiesInFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CheckForEnemiesInFOV" );

	AKFAIController_execCheckForEnemiesInFOV_Parms CheckForEnemiesInFOV_Parms;

	this->ProcessEvent ( pFnCheckForEnemiesInFOV, &CheckForEnemiesInFOV_Parms, NULL );
};

// Function KFGame.KFAIController.ChangeEnemy
// [0x00024002] 
// Parameters infos:

void AKFAIController::ChangeEnemy ( )
{
	static UFunction* pFnChangeEnemy = NULL;

	if ( ! pFnChangeEnemy )
		pFnChangeEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ChangeEnemy" );

	AKFAIController_execChangeEnemy_Parms ChangeEnemy_Parms;

	this->ProcessEvent ( pFnChangeEnemy, &ChangeEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.SetEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventSetEnemy ( )
{
	static UFunction* pFnSetEnemy = NULL;

	if ( ! pFnSetEnemy )
		pFnSetEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetEnemy" );

	AKFAIController_eventSetEnemy_Parms SetEnemy_Parms;

	this->ProcessEvent ( pFnSetEnemy, &SetEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.SetEnemyToZed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventSetEnemyToZed ( )
{
	static UFunction* pFnSetEnemyToZed = NULL;

	if ( ! pFnSetEnemyToZed )
		pFnSetEnemyToZed = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetEnemyToZed" );

	AKFAIController_eventSetEnemyToZed_Parms SetEnemyToZed_Parms;

	this->ProcessEvent ( pFnSetEnemyToZed, &SetEnemyToZed_Parms, NULL );
};

// Function KFGame.KFAIController.GetHasAcceptableEnemyCount
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetHasAcceptableEnemyCount ( )
{
	static UFunction* pFnGetHasAcceptableEnemyCount = NULL;

	if ( ! pFnGetHasAcceptableEnemyCount )
		pFnGetHasAcceptableEnemyCount = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetHasAcceptableEnemyCount" );

	AKFAIController_execGetHasAcceptableEnemyCount_Parms GetHasAcceptableEnemyCount_Parms;

	this->ProcessEvent ( pFnGetHasAcceptableEnemyCount, &GetHasAcceptableEnemyCount_Parms, NULL );
};

// Function KFGame.KFAIController.FindNewEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventFindNewEnemy ( )
{
	static UFunction* pFnFindNewEnemy = NULL;

	if ( ! pFnFindNewEnemy )
		pFnFindNewEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.FindNewEnemy" );

	AKFAIController_eventFindNewEnemy_Parms FindNewEnemy_Parms;

	this->ProcessEvent ( pFnFindNewEnemy, &FindNewEnemy_Parms, NULL );
};

// Function KFGame.KFAIController.IsTargetedByPlayer
// [0x00424400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::IsTargetedByPlayer ( )
{
	static UFunction* pFnIsTargetedByPlayer = NULL;

	if ( ! pFnIsTargetedByPlayer )
		pFnIsTargetedByPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsTargetedByPlayer" );

	AKFAIController_execIsTargetedByPlayer_Parms IsTargetedByPlayer_Parms;

	pFnIsTargetedByPlayer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsTargetedByPlayer, &IsTargetedByPlayer_Parms, NULL );

	pFnIsTargetedByPlayer->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.StopAllLatentMoveExecution
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::StopAllLatentMoveExecution ( )
{
	static UFunction* pFnStopAllLatentMoveExecution = NULL;

	if ( ! pFnStopAllLatentMoveExecution )
		pFnStopAllLatentMoveExecution = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.StopAllLatentMoveExecution" );

	AKFAIController_execStopAllLatentMoveExecution_Parms StopAllLatentMoveExecution_Parms;

	pFnStopAllLatentMoveExecution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopAllLatentMoveExecution, &StopAllLatentMoveExecution_Parms, NULL );

	pFnStopAllLatentMoveExecution->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IsMeleeRangeEventProbingEnabled
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::IsMeleeRangeEventProbingEnabled ( )
{
	static UFunction* pFnIsMeleeRangeEventProbingEnabled = NULL;

	if ( ! pFnIsMeleeRangeEventProbingEnabled )
		pFnIsMeleeRangeEventProbingEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsMeleeRangeEventProbingEnabled" );

	AKFAIController_execIsMeleeRangeEventProbingEnabled_Parms IsMeleeRangeEventProbingEnabled_Parms;

	pFnIsMeleeRangeEventProbingEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMeleeRangeEventProbingEnabled, &IsMeleeRangeEventProbingEnabled_Parms, NULL );

	pFnIsMeleeRangeEventProbingEnabled->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.DisableMeleeRangeEventProbing
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::DisableMeleeRangeEventProbing ( )
{
	static UFunction* pFnDisableMeleeRangeEventProbing = NULL;

	if ( ! pFnDisableMeleeRangeEventProbing )
		pFnDisableMeleeRangeEventProbing = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.DisableMeleeRangeEventProbing" );

	AKFAIController_execDisableMeleeRangeEventProbing_Parms DisableMeleeRangeEventProbing_Parms;

	pFnDisableMeleeRangeEventProbing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableMeleeRangeEventProbing, &DisableMeleeRangeEventProbing_Parms, NULL );

	pFnDisableMeleeRangeEventProbing->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.EnableMeleeRangeEventProbing
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::EnableMeleeRangeEventProbing ( )
{
	static UFunction* pFnEnableMeleeRangeEventProbing = NULL;

	if ( ! pFnEnableMeleeRangeEventProbing )
		pFnEnableMeleeRangeEventProbing = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EnableMeleeRangeEventProbing" );

	AKFAIController_execEnableMeleeRangeEventProbing_Parms EnableMeleeRangeEventProbing_Parms;

	pFnEnableMeleeRangeEventProbing->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableMeleeRangeEventProbing, &EnableMeleeRangeEventProbing_Parms, NULL );

	pFnEnableMeleeRangeEventProbing->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.InChargeRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::InChargeRange ( )
{
	static UFunction* pFnInChargeRange = NULL;

	if ( ! pFnInChargeRange )
		pFnInChargeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.InChargeRange" );

	AKFAIController_execInChargeRange_Parms InChargeRange_Parms;

	pFnInChargeRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInChargeRange, &InChargeRange_Parms, NULL );

	pFnInChargeRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.InAnyAttackTagRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::InAnyAttackTagRange ( )
{
	static UFunction* pFnInAnyAttackTagRange = NULL;

	if ( ! pFnInAnyAttackTagRange )
		pFnInAnyAttackTagRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.InAnyAttackTagRange" );

	AKFAIController_execInAnyAttackTagRange_Parms InAnyAttackTagRange_Parms;

	pFnInAnyAttackTagRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInAnyAttackTagRange, &InAnyAttackTagRange_Parms, NULL );

	pFnInAnyAttackTagRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.InAttackTagRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::InAttackTagRange ( )
{
	static UFunction* pFnInAttackTagRange = NULL;

	if ( ! pFnInAttackTagRange )
		pFnInAttackTagRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.InAttackTagRange" );

	AKFAIController_execInAttackTagRange_Parms InAttackTagRange_Parms;

	pFnInAttackTagRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInAttackTagRange, &InAttackTagRange_Parms, NULL );

	pFnInAttackTagRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.InMeleeRange
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::InMeleeRange ( )
{
	static UFunction* pFnInMeleeRange = NULL;

	if ( ! pFnInMeleeRange )
		pFnInMeleeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.InMeleeRange" );

	AKFAIController_execInMeleeRange_Parms InMeleeRange_Parms;

	pFnInMeleeRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInMeleeRange, &InMeleeRange_Parms, NULL );

	pFnInMeleeRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IsCloseEnoughToEnemy
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::IsCloseEnoughToEnemy ( )
{
	static UFunction* pFnIsCloseEnoughToEnemy = NULL;

	if ( ! pFnIsCloseEnoughToEnemy )
		pFnIsCloseEnoughToEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsCloseEnoughToEnemy" );

	AKFAIController_execIsCloseEnoughToEnemy_Parms IsCloseEnoughToEnemy_Parms;

	pFnIsCloseEnoughToEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsCloseEnoughToEnemy, &IsCloseEnoughToEnemy_Parms, NULL );

	pFnIsCloseEnoughToEnemy->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.GetClosestTimeAndDistToPawn
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::GetClosestTimeAndDistToPawn ( )
{
	static UFunction* pFnGetClosestTimeAndDistToPawn = NULL;

	if ( ! pFnGetClosestTimeAndDistToPawn )
		pFnGetClosestTimeAndDistToPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetClosestTimeAndDistToPawn" );

	AKFAIController_execGetClosestTimeAndDistToPawn_Parms GetClosestTimeAndDistToPawn_Parms;

	pFnGetClosestTimeAndDistToPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClosestTimeAndDistToPawn, &GetClosestTimeAndDistToPawn_Parms, NULL );

	pFnGetClosestTimeAndDistToPawn->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.HasEnemyWithinDistance
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::HasEnemyWithinDistance ( )
{
	static UFunction* pFnHasEnemyWithinDistance = NULL;

	if ( ! pFnHasEnemyWithinDistance )
		pFnHasEnemyWithinDistance = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.HasEnemyWithinDistance" );

	AKFAIController_execHasEnemyWithinDistance_Parms HasEnemyWithinDistance_Parms;

	pFnHasEnemyWithinDistance->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasEnemyWithinDistance, &HasEnemyWithinDistance_Parms, NULL );

	pFnHasEnemyWithinDistance->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Destroyed" );

	AKFAIController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFAIController.TeleportToLocation
// [0x00824802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventTeleportToLocation ( )
{
	static UFunction* pFnTeleportToLocation = NULL;

	if ( ! pFnTeleportToLocation )
		pFnTeleportToLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.TeleportToLocation" );

	AKFAIController_eventTeleportToLocation_Parms TeleportToLocation_Parms;

	this->ProcessEvent ( pFnTeleportToLocation, &TeleportToLocation_Parms, NULL );
};

// Function KFGame.KFAIController.AttemptToTeleport
// [0x00024002] 
// Parameters infos:

void AKFAIController::AttemptToTeleport ( )
{
	static UFunction* pFnAttemptToTeleport = NULL;

	if ( ! pFnAttemptToTeleport )
		pFnAttemptToTeleport = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AttemptToTeleport" );

	AKFAIController_execAttemptToTeleport_Parms AttemptToTeleport_Parms;

	this->ProcessEvent ( pFnAttemptToTeleport, &AttemptToTeleport_Parms, NULL );
};

// Function KFGame.KFAIController.PawnDied
// [0x00020002] 
// Parameters infos:

void AKFAIController::PawnDied ( )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.PawnDied" );

	AKFAIController_execPawnDied_Parms PawnDied_Parms;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function KFGame.KFAIController.GetHealthPercentage
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFAIController::GetHealthPercentage ( )
{
	static UFunction* pFnGetHealthPercentage = NULL;

	if ( ! pFnGetHealthPercentage )
		pFnGetHealthPercentage = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetHealthPercentage" );

	AKFAIController_execGetHealthPercentage_Parms GetHealthPercentage_Parms;

	this->ProcessEvent ( pFnGetHealthPercentage, &GetHealthPercentage_Parms, NULL );
};

// Function KFGame.KFAIController.AddBasePathConstraints
// [0x00020000] 
// Parameters infos:

void AKFAIController::AddBasePathConstraints ( )
{
	static UFunction* pFnAddBasePathConstraints = NULL;

	if ( ! pFnAddBasePathConstraints )
		pFnAddBasePathConstraints = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AddBasePathConstraints" );

	AKFAIController_execAddBasePathConstraints_Parms AddBasePathConstraints_Parms;

	this->ProcessEvent ( pFnAddBasePathConstraints, &AddBasePathConstraints_Parms, NULL );
};

// Function KFGame.KFAIController.ReturnToIdle
// [0x00020000] 
// Parameters infos:

void AKFAIController::ReturnToIdle ( )
{
	static UFunction* pFnReturnToIdle = NULL;

	if ( ! pFnReturnToIdle )
		pFnReturnToIdle = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ReturnToIdle" );

	AKFAIController_execReturnToIdle_Parms ReturnToIdle_Parms;

	this->ProcessEvent ( pFnReturnToIdle, &ReturnToIdle_Parms, NULL );
};

// Function KFGame.KFAIController.SetBestAnchor
// [0x00020002] 
// Parameters infos:

void AKFAIController::SetBestAnchor ( )
{
	static UFunction* pFnSetBestAnchor = NULL;

	if ( ! pFnSetBestAnchor )
		pFnSetBestAnchor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetBestAnchor" );

	AKFAIController_execSetBestAnchor_Parms SetBestAnchor_Parms;

	this->ProcessEvent ( pFnSetBestAnchor, &SetBestAnchor_Parms, NULL );
};

// Function KFGame.KFAIController.ShouldReturnToIdle
// [0x00020002] 
// Parameters infos:

void AKFAIController::ShouldReturnToIdle ( )
{
	static UFunction* pFnShouldReturnToIdle = NULL;

	if ( ! pFnShouldReturnToIdle )
		pFnShouldReturnToIdle = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ShouldReturnToIdle" );

	AKFAIController_execShouldReturnToIdle_Parms ShouldReturnToIdle_Parms;

	this->ProcessEvent ( pFnShouldReturnToIdle, &ShouldReturnToIdle_Parms, NULL );
};

// Function KFGame.KFAIController.GetDefaultCommand
// [0x00020002] 
// Parameters infos:

void AKFAIController::GetDefaultCommand ( )
{
	static UFunction* pFnGetDefaultCommand = NULL;

	if ( ! pFnGetDefaultCommand )
		pFnGetDefaultCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetDefaultCommand" );

	AKFAIController_execGetDefaultCommand_Parms GetDefaultCommand_Parms;

	this->ProcessEvent ( pFnGetDefaultCommand, &GetDefaultCommand_Parms, NULL );
};

// Function KFGame.KFAIController.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetInitialState" );

	AKFAIController_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function KFGame.KFAIController.Timer_EvaluateStatus
// [0x00020002] 
// Parameters infos:

void AKFAIController::Timer_EvaluateStatus ( )
{
	static UFunction* pFnTimer_EvaluateStatus = NULL;

	if ( ! pFnTimer_EvaluateStatus )
		pFnTimer_EvaluateStatus = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Timer_EvaluateStatus" );

	AKFAIController_execTimer_EvaluateStatus_Parms Timer_EvaluateStatus_Parms;

	this->ProcessEvent ( pFnTimer_EvaluateStatus, &Timer_EvaluateStatus_Parms, NULL );
};

// Function KFGame.KFAIController.CreateTemporaryBlockedReach
// [0x00020002] 
// Parameters infos:

void AKFAIController::CreateTemporaryBlockedReach ( )
{
	static UFunction* pFnCreateTemporaryBlockedReach = NULL;

	if ( ! pFnCreateTemporaryBlockedReach )
		pFnCreateTemporaryBlockedReach = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CreateTemporaryBlockedReach" );

	AKFAIController_execCreateTemporaryBlockedReach_Parms CreateTemporaryBlockedReach_Parms;

	this->ProcessEvent ( pFnCreateTemporaryBlockedReach, &CreateTemporaryBlockedReach_Parms, NULL );
};

// Function KFGame.KFAIController.CreateTemporaryBlockedPath
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventCreateTemporaryBlockedPath ( )
{
	static UFunction* pFnCreateTemporaryBlockedPath = NULL;

	if ( ! pFnCreateTemporaryBlockedPath )
		pFnCreateTemporaryBlockedPath = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CreateTemporaryBlockedPath" );

	AKFAIController_eventCreateTemporaryBlockedPath_Parms CreateTemporaryBlockedPath_Parms;

	this->ProcessEvent ( pFnCreateTemporaryBlockedPath, &CreateTemporaryBlockedPath_Parms, NULL );
};

// Function KFGame.KFAIController.UpdateStrikeRange
// [0x00020002] 
// Parameters infos:

void AKFAIController::UpdateStrikeRange ( )
{
	static UFunction* pFnUpdateStrikeRange = NULL;

	if ( ! pFnUpdateStrikeRange )
		pFnUpdateStrikeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.UpdateStrikeRange" );

	AKFAIController_execUpdateStrikeRange_Parms UpdateStrikeRange_Parms;

	this->ProcessEvent ( pFnUpdateStrikeRange, &UpdateStrikeRange_Parms, NULL );
};

// Function KFGame.KFAIController.UpdatePendingStrike
// [0x00020002] 
// Parameters infos:

void AKFAIController::UpdatePendingStrike ( )
{
	static UFunction* pFnUpdatePendingStrike = NULL;

	if ( ! pFnUpdatePendingStrike )
		pFnUpdatePendingStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.UpdatePendingStrike" );

	AKFAIController_execUpdatePendingStrike_Parms UpdatePendingStrike_Parms;

	this->ProcessEvent ( pFnUpdatePendingStrike, &UpdatePendingStrike_Parms, NULL );
};

// Function KFGame.KFAIController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Possess" );

	AKFAIController_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function KFGame.KFAIController.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.PostBeginPlay" );

	AKFAIController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFAIController.TargetedByPlayer
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventTargetedByPlayer ( )
{
	static UFunction* pFnTargetedByPlayer = NULL;

	if ( ! pFnTargetedByPlayer )
		pFnTargetedByPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.TargetedByPlayer" );

	AKFAIController_eventTargetedByPlayer_Parms TargetedByPlayer_Parms;

	this->ProcessEvent ( pFnTargetedByPlayer, &TargetedByPlayer_Parms, NULL );
};

// Function KFGame.KFAIController.SetChargeLocation
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFAIController::eventSetChargeLocation ( )
{
	static UFunction* pFnSetChargeLocation = NULL;

	if ( ! pFnSetChargeLocation )
		pFnSetChargeLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SetChargeLocation" );

	AKFAIController_eventSetChargeLocation_Parms SetChargeLocation_Parms;

	this->ProcessEvent ( pFnSetChargeLocation, &SetChargeLocation_Parms, NULL );
};

// Function KFGame.KFAIController.CleanUpOnDestroy
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::CleanUpOnDestroy ( )
{
	static UFunction* pFnCleanUpOnDestroy = NULL;

	if ( ! pFnCleanUpOnDestroy )
		pFnCleanUpOnDestroy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CleanUpOnDestroy" );

	AKFAIController_execCleanUpOnDestroy_Parms CleanUpOnDestroy_Parms;

	pFnCleanUpOnDestroy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanUpOnDestroy, &CleanUpOnDestroy_Parms, NULL );

	pFnCleanUpOnDestroy->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IsLookingAtWall
// [0x00084400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::IsLookingAtWall ( )
{
	static UFunction* pFnIsLookingAtWall = NULL;

	if ( ! pFnIsLookingAtWall )
		pFnIsLookingAtWall = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsLookingAtWall" );

	AKFAIController_execIsLookingAtWall_Parms IsLookingAtWall_Parms;

	pFnIsLookingAtWall->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLookingAtWall, &IsLookingAtWall_Parms, NULL );

	pFnIsLookingAtWall->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.GetTeamNum
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFAIController::GetTeamNum ( )
{
	static UFunction* pFnGetTeamNum = NULL;

	if ( ! pFnGetTeamNum )
		pFnGetTeamNum = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetTeamNum" );

	AKFAIController_execGetTeamNum_Parms GetTeamNum_Parms;

	pFnGetTeamNum->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTeamNum, &GetTeamNum_Parms, NULL );

	pFnGetTeamNum->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.SuggestNewWanderPoint
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::SuggestNewWanderPoint ( )
{
	static UFunction* pFnSuggestNewWanderPoint = NULL;

	if ( ! pFnSuggestNewWanderPoint )
		pFnSuggestNewWanderPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.SuggestNewWanderPoint" );

	AKFAIController_execSuggestNewWanderPoint_Parms SuggestNewWanderPoint_Parms;

	pFnSuggestNewWanderPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestNewWanderPoint, &SuggestNewWanderPoint_Parms, NULL );

	pFnSuggestNewWanderPoint->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IsPawnInFireLine
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::IsPawnInFireLine ( )
{
	static UFunction* pFnIsPawnInFireLine = NULL;

	if ( ! pFnIsPawnInFireLine )
		pFnIsPawnInFireLine = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsPawnInFireLine" );

	AKFAIController_execIsPawnInFireLine_Parms IsPawnInFireLine_Parms;

	pFnIsPawnInFireLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnInFireLine, &IsPawnInFireLine_Parms, NULL );

	pFnIsPawnInFireLine->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.TestTrace
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::TestTrace ( )
{
	static UFunction* pFnTestTrace = NULL;

	if ( ! pFnTestTrace )
		pFnTestTrace = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.TestTrace" );

	AKFAIController_execTestTrace_Parms TestTrace_Parms;

	pFnTestTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTestTrace, &TestTrace_Parms, NULL );

	pFnTestTrace->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.ActorBlockTest
// [0x00026400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::ActorBlockTest ( )
{
	static UFunction* pFnActorBlockTest = NULL;

	if ( ! pFnActorBlockTest )
		pFnActorBlockTest = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ActorBlockTest" );

	AKFAIController_execActorBlockTest_Parms ActorBlockTest_Parms;

	pFnActorBlockTest->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnActorBlockTest, &ActorBlockTest_Parms, NULL );

	pFnActorBlockTest->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.FastActorTrace
// [0x00026400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::FastActorTrace ( )
{
	static UFunction* pFnFastActorTrace = NULL;

	if ( ! pFnFastActorTrace )
		pFnFastActorTrace = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.FastActorTrace" );

	AKFAIController_execFastActorTrace_Parms FastActorTrace_Parms;

	pFnFastActorTrace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFastActorTrace, &FastActorTrace_Parms, NULL );

	pFnFastActorTrace->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.EstimateProjectileTimeToTarget
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::EstimateProjectileTimeToTarget ( )
{
	static UFunction* pFnEstimateProjectileTimeToTarget = NULL;

	if ( ! pFnEstimateProjectileTimeToTarget )
		pFnEstimateProjectileTimeToTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.EstimateProjectileTimeToTarget" );

	AKFAIController_execEstimateProjectileTimeToTarget_Parms EstimateProjectileTimeToTarget_Parms;

	pFnEstimateProjectileTimeToTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEstimateProjectileTimeToTarget, &EstimateProjectileTimeToTarget_Parms, NULL );

	pFnEstimateProjectileTimeToTarget->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.CalcAimLocToHit
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::CalcAimLocToHit ( )
{
	static UFunction* pFnCalcAimLocToHit = NULL;

	if ( ! pFnCalcAimLocToHit )
		pFnCalcAimLocToHit = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.CalcAimLocToHit" );

	AKFAIController_execCalcAimLocToHit_Parms CalcAimLocToHit_Parms;

	pFnCalcAimLocToHit->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcAimLocToHit, &CalcAimLocToHit_Parms, NULL );

	pFnCalcAimLocToHit->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IsFriendlyBlockingFireLine
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFAIController::IsFriendlyBlockingFireLine ( )
{
	static UFunction* pFnIsFriendlyBlockingFireLine = NULL;

	if ( ! pFnIsFriendlyBlockingFireLine )
		pFnIsFriendlyBlockingFireLine = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsFriendlyBlockingFireLine" );

	AKFAIController_execIsFriendlyBlockingFireLine_Parms IsFriendlyBlockingFireLine_Parms;

	pFnIsFriendlyBlockingFireLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFriendlyBlockingFireLine, &IsFriendlyBlockingFireLine_Parms, NULL );

	pFnIsFriendlyBlockingFireLine->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.UnlockPawnRotation
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::UnlockPawnRotation ( )
{
	static UFunction* pFnUnlockPawnRotation = NULL;

	if ( ! pFnUnlockPawnRotation )
		pFnUnlockPawnRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.UnlockPawnRotation" );

	AKFAIController_execUnlockPawnRotation_Parms UnlockPawnRotation_Parms;

	pFnUnlockPawnRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnlockPawnRotation, &UnlockPawnRotation_Parms, NULL );

	pFnUnlockPawnRotation->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.LockPawnRotationTo
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::LockPawnRotationTo ( )
{
	static UFunction* pFnLockPawnRotationTo = NULL;

	if ( ! pFnLockPawnRotationTo )
		pFnLockPawnRotationTo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.LockPawnRotationTo" );

	AKFAIController_execLockPawnRotationTo_Parms LockPawnRotationTo_Parms;

	pFnLockPawnRotationTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLockPawnRotationTo, &LockPawnRotationTo_Parms, NULL );

	pFnLockPawnRotationTo->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.GetPawnBlockingPathTo
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::GetPawnBlockingPathTo ( )
{
	static UFunction* pFnGetPawnBlockingPathTo = NULL;

	if ( ! pFnGetPawnBlockingPathTo )
		pFnGetPawnBlockingPathTo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.GetPawnBlockingPathTo" );

	AKFAIController_execGetPawnBlockingPathTo_Parms GetPawnBlockingPathTo_Parms;

	pFnGetPawnBlockingPathTo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPawnBlockingPathTo, &GetPawnBlockingPathTo_Parms, NULL );

	pFnGetPawnBlockingPathTo->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IsPawnMovingAwayFromMe
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::IsPawnMovingAwayFromMe ( )
{
	static UFunction* pFnIsPawnMovingAwayFromMe = NULL;

	if ( ! pFnIsPawnMovingAwayFromMe )
		pFnIsPawnMovingAwayFromMe = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsPawnMovingAwayFromMe" );

	AKFAIController_execIsPawnMovingAwayFromMe_Parms IsPawnMovingAwayFromMe_Parms;

	pFnIsPawnMovingAwayFromMe->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnMovingAwayFromMe, &IsPawnMovingAwayFromMe_Parms, NULL );

	pFnIsPawnMovingAwayFromMe->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IgnoreNotifies
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::IgnoreNotifies ( )
{
	static UFunction* pFnIgnoreNotifies = NULL;

	if ( ! pFnIgnoreNotifies )
		pFnIgnoreNotifies = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IgnoreNotifies" );

	AKFAIController_execIgnoreNotifies_Parms IgnoreNotifies_Parms;

	pFnIgnoreNotifies->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIgnoreNotifies, &IgnoreNotifies_Parms, NULL );

	pFnIgnoreNotifies->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.PopCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::PopCommand ( )
{
	static UFunction* pFnPopCommand = NULL;

	if ( ! pFnPopCommand )
		pFnPopCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.PopCommand" );

	AKFAIController_execPopCommand_Parms PopCommand_Parms;

	pFnPopCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPopCommand, &PopCommand_Parms, NULL );

	pFnPopCommand->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.PushCommand
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::PushCommand ( )
{
	static UFunction* pFnPushCommand = NULL;

	if ( ! pFnPushCommand )
		pFnPushCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.PushCommand" );

	AKFAIController_execPushCommand_Parms PushCommand_Parms;

	pFnPushCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushCommand, &PushCommand_Parms, NULL );

	pFnPushCommand->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.AbortCommand
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::AbortCommand ( )
{
	static UFunction* pFnAbortCommand = NULL;

	if ( ! pFnAbortCommand )
		pFnAbortCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.AbortCommand" );

	AKFAIController_execAbortCommand_Parms AbortCommand_Parms;

	pFnAbortCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAbortCommand, &AbortCommand_Parms, NULL );

	pFnAbortCommand->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.Cleanup
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.Cleanup" );

	AKFAIController_execCleanup_Parms Cleanup_Parms;

	pFnCleanup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );

	pFnCleanup->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.ComputeTrajectoryByTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::ComputeTrajectoryByTime ( )
{
	static UFunction* pFnComputeTrajectoryByTime = NULL;

	if ( ! pFnComputeTrajectoryByTime )
		pFnComputeTrajectoryByTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.ComputeTrajectoryByTime" );

	AKFAIController_execComputeTrajectoryByTime_Parms ComputeTrajectoryByTime_Parms;

	pFnComputeTrajectoryByTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComputeTrajectoryByTime, &ComputeTrajectoryByTime_Parms, NULL );

	pFnComputeTrajectoryByTime->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.IsPawnBlockingLine
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::IsPawnBlockingLine ( )
{
	static UFunction* pFnIsPawnBlockingLine = NULL;

	if ( ! pFnIsPawnBlockingLine )
		pFnIsPawnBlockingLine = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.IsPawnBlockingLine" );

	AKFAIController_execIsPawnBlockingLine_Parms IsPawnBlockingLine_Parms;

	pFnIsPawnBlockingLine->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnBlockingLine, &IsPawnBlockingLine_Parms, NULL );

	pFnIsPawnBlockingLine->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.LineBlockedByActor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::LineBlockedByActor ( )
{
	static UFunction* pFnLineBlockedByActor = NULL;

	if ( ! pFnLineBlockedByActor )
		pFnLineBlockedByActor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.LineBlockedByActor" );

	AKFAIController_execLineBlockedByActor_Parms LineBlockedByActor_Parms;

	pFnLineBlockedByActor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLineBlockedByActor, &LineBlockedByActor_Parms, NULL );

	pFnLineBlockedByActor->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController.BumperSomewhereToGo
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFAIController::BumperSomewhereToGo ( )
{
	static UFunction* pFnBumperSomewhereToGo = NULL;

	if ( ! pFnBumperSomewhereToGo )
		pFnBumperSomewhereToGo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController.BumperSomewhereToGo" );

	AKFAIController_execBumperSomewhereToGo_Parms BumperSomewhereToGo_Parms;

	pFnBumperSomewhereToGo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnBumperSomewhereToGo, &BumperSomewhereToGo_Parms, NULL );

	pFnBumperSomewhereToGo->FunctionFlags |= 0x400;
};

// Function KFGame.AICommand.CanInterruptPauseCommand
// [0x00022002] 
// Parameters infos:

void UAICommand::CanInterruptPauseCommand ( )
{
	static UFunction* pFnCanInterruptPauseCommand = NULL;

	if ( ! pFnCanInterruptPauseCommand )
		pFnCanInterruptPauseCommand = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.CanInterruptPauseCommand" );

	UAICommand_execCanInterruptPauseCommand_Parms CanInterruptPauseCommand_Parms;

	this->ProcessEvent ( pFnCanInterruptPauseCommand, &CanInterruptPauseCommand_Parms, NULL );
};

// Function KFGame.AICommand.GetDebugVerboseText
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand::eventGetDebugVerboseText ( )
{
	static UFunction* pFnGetDebugVerboseText = NULL;

	if ( ! pFnGetDebugVerboseText )
		pFnGetDebugVerboseText = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.GetDebugVerboseText" );

	UAICommand_eventGetDebugVerboseText_Parms GetDebugVerboseText_Parms;

	this->ProcessEvent ( pFnGetDebugVerboseText, &GetDebugVerboseText_Parms, NULL );
};

// Function KFGame.AICommand.DrawDebug
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UAICommand::eventDrawDebug ( )
{
	static UFunction* pFnDrawDebug = NULL;

	if ( ! pFnDrawDebug )
		pFnDrawDebug = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.DrawDebug" );

	UAICommand_eventDrawDebug_Parms DrawDebug_Parms;

	this->ProcessEvent ( pFnDrawDebug, &DrawDebug_Parms, NULL );
};

// Function KFGame.AICommand.UpdateHistoryString
// [0x00020002] 
// Parameters infos:

void UAICommand::UpdateHistoryString ( )
{
	static UFunction* pFnUpdateHistoryString = NULL;

	if ( ! pFnUpdateHistoryString )
		pFnUpdateHistoryString = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.UpdateHistoryString" );

	UAICommand_execUpdateHistoryString_Parms UpdateHistoryString_Parms;

	this->ProcessEvent ( pFnUpdateHistoryString, &UpdateHistoryString_Parms, NULL );
};

// Function KFGame.AICommand.UpdateCommandHistory
// [0x00020002] 
// Parameters infos:

void UAICommand::UpdateCommandHistory ( )
{
	static UFunction* pFnUpdateCommandHistory = NULL;

	if ( ! pFnUpdateCommandHistory )
		pFnUpdateCommandHistory = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.UpdateCommandHistory" );

	UAICommand_execUpdateCommandHistory_Parms UpdateCommandHistory_Parms;

	this->ProcessEvent ( pFnUpdateCommandHistory, &UpdateCommandHistory_Parms, NULL );
};

// Function KFGame.AICommand.NotifyNeedRepath
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyNeedRepath ( )
{
	static UFunction* pFnNotifyNeedRepath = NULL;

	if ( ! pFnNotifyNeedRepath )
		pFnNotifyNeedRepath = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyNeedRepath" );

	UAICommand_execNotifyNeedRepath_Parms NotifyNeedRepath_Parms;

	this->ProcessEvent ( pFnNotifyNeedRepath, &NotifyNeedRepath_Parms, NULL );
};

// Function KFGame.AICommand.MoveUnreachable
// [0x00020002] 
// Parameters infos:

void UAICommand::MoveUnreachable ( )
{
	static UFunction* pFnMoveUnreachable = NULL;

	if ( ! pFnMoveUnreachable )
		pFnMoveUnreachable = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.MoveUnreachable" );

	UAICommand_execMoveUnreachable_Parms MoveUnreachable_Parms;

	this->ProcessEvent ( pFnMoveUnreachable, &MoveUnreachable_Parms, NULL );
};

// Function KFGame.AICommand.FindDirectPath
// [0x00020002] 
// Parameters infos:

void UAICommand::FindDirectPath ( )
{
	static UFunction* pFnFindDirectPath = NULL;

	if ( ! pFnFindDirectPath )
		pFnFindDirectPath = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.FindDirectPath" );

	UAICommand_execFindDirectPath_Parms FindDirectPath_Parms;

	this->ProcessEvent ( pFnFindDirectPath, &FindDirectPath_Parms, NULL );
};

// Function KFGame.AICommand.AdjustEnemyRating
// [0x00420002] 
// Parameters infos:

void UAICommand::AdjustEnemyRating ( )
{
	static UFunction* pFnAdjustEnemyRating = NULL;

	if ( ! pFnAdjustEnemyRating )
		pFnAdjustEnemyRating = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.AdjustEnemyRating" );

	UAICommand_execAdjustEnemyRating_Parms AdjustEnemyRating_Parms;

	this->ProcessEvent ( pFnAdjustEnemyRating, &AdjustEnemyRating_Parms, NULL );
};

// Function KFGame.AICommand.ShouldSelectTarget
// [0x00020002] 
// Parameters infos:

void UAICommand::ShouldSelectTarget ( )
{
	static UFunction* pFnShouldSelectTarget = NULL;

	if ( ! pFnShouldSelectTarget )
		pFnShouldSelectTarget = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.ShouldSelectTarget" );

	UAICommand_execShouldSelectTarget_Parms ShouldSelectTarget_Parms;

	this->ProcessEvent ( pFnShouldSelectTarget, &ShouldSelectTarget_Parms, NULL );
};

// Function KFGame.AICommand.IsControllerAlive
// [0x00020002] 
// Parameters infos:

void UAICommand::IsControllerAlive ( )
{
	static UFunction* pFnIsControllerAlive = NULL;

	if ( ! pFnIsControllerAlive )
		pFnIsControllerAlive = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.IsControllerAlive" );

	UAICommand_execIsControllerAlive_Parms IsControllerAlive_Parms;

	this->ProcessEvent ( pFnIsControllerAlive, &IsControllerAlive_Parms, NULL );
};

// Function KFGame.AICommand.IsPawnAlive
// [0x00020002] 
// Parameters infos:

void UAICommand::IsPawnAlive ( )
{
	static UFunction* pFnIsPawnAlive = NULL;

	if ( ! pFnIsPawnAlive )
		pFnIsPawnAlive = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.IsPawnAlive" );

	UAICommand_execIsPawnAlive_Parms IsPawnAlive_Parms;

	this->ProcessEvent ( pFnIsPawnAlive, &IsPawnAlive_Parms, NULL );
};

// Function KFGame.AICommand.IsAllowedToAttack
// [0x00020002] 
// Parameters infos:

void UAICommand::IsAllowedToAttack ( )
{
	static UFunction* pFnIsAllowedToAttack = NULL;

	if ( ! pFnIsAllowedToAttack )
		pFnIsAllowedToAttack = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.IsAllowedToAttack" );

	UAICommand_execIsAllowedToAttack_Parms IsAllowedToAttack_Parms;

	this->ProcessEvent ( pFnIsAllowedToAttack, &IsAllowedToAttack_Parms, NULL );
};

// Function KFGame.AICommand.ShouldIgnoreTimeTransitions
// [0x00020002] 
// Parameters infos:

void UAICommand::ShouldIgnoreTimeTransitions ( )
{
	static UFunction* pFnShouldIgnoreTimeTransitions = NULL;

	if ( ! pFnShouldIgnoreTimeTransitions )
		pFnShouldIgnoreTimeTransitions = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.ShouldIgnoreTimeTransitions" );

	UAICommand_execShouldIgnoreTimeTransitions_Parms ShouldIgnoreTimeTransitions_Parms;

	this->ProcessEvent ( pFnShouldIgnoreTimeTransitions, &ShouldIgnoreTimeTransitions_Parms, NULL );
};

// Function KFGame.AICommand.NotifyNpcInGrannyMode
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyNpcInGrannyMode ( )
{
	static UFunction* pFnNotifyNpcInGrannyMode = NULL;

	if ( ! pFnNotifyNpcInGrannyMode )
		pFnNotifyNpcInGrannyMode = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyNpcInGrannyMode" );

	UAICommand_execNotifyNpcInGrannyMode_Parms NotifyNpcInGrannyMode_Parms;

	this->ProcessEvent ( pFnNotifyNpcInGrannyMode, &NotifyNpcInGrannyMode_Parms, NULL );
};

// Function KFGame.AICommand.NotifyNpcTerminallyStuck
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyNpcTerminallyStuck ( )
{
	static UFunction* pFnNotifyNpcTerminallyStuck = NULL;

	if ( ! pFnNotifyNpcTerminallyStuck )
		pFnNotifyNpcTerminallyStuck = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyNpcTerminallyStuck" );

	UAICommand_execNotifyNpcTerminallyStuck_Parms NotifyNpcTerminallyStuck_Parms;

	this->ProcessEvent ( pFnNotifyNpcTerminallyStuck, &NotifyNpcTerminallyStuck_Parms, NULL );
};

// Function KFGame.AICommand.NotifyMovingOnToDestructibleEdge
// [0x00420002] 
// Parameters infos:

void UAICommand::NotifyMovingOnToDestructibleEdge ( )
{
	static UFunction* pFnNotifyMovingOnToDestructibleEdge = NULL;

	if ( ! pFnNotifyMovingOnToDestructibleEdge )
		pFnNotifyMovingOnToDestructibleEdge = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyMovingOnToDestructibleEdge" );

	UAICommand_execNotifyMovingOnToDestructibleEdge_Parms NotifyMovingOnToDestructibleEdge_Parms;

	this->ProcessEvent ( pFnNotifyMovingOnToDestructibleEdge, &NotifyMovingOnToDestructibleEdge_Parms, NULL );
};

// Function KFGame.AICommand.NotifyTouch
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyTouch ( )
{
	static UFunction* pFnNotifyTouch = NULL;

	if ( ! pFnNotifyTouch )
		pFnNotifyTouch = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyTouch" );

	UAICommand_execNotifyTouch_Parms NotifyTouch_Parms;

	this->ProcessEvent ( pFnNotifyTouch, &NotifyTouch_Parms, NULL );
};

// Function KFGame.AICommand.NotifyLatentPostPhysWalking
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyLatentPostPhysWalking ( )
{
	static UFunction* pFnNotifyLatentPostPhysWalking = NULL;

	if ( ! pFnNotifyLatentPostPhysWalking )
		pFnNotifyLatentPostPhysWalking = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyLatentPostPhysWalking" );

	UAICommand_execNotifyLatentPostPhysWalking_Parms NotifyLatentPostPhysWalking_Parms;

	this->ProcessEvent ( pFnNotifyLatentPostPhysWalking, &NotifyLatentPostPhysWalking_Parms, NULL );
};

// Function KFGame.AICommand.NotifyBump
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyBump ( )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyBump" );

	UAICommand_execNotifyBump_Parms NotifyBump_Parms;

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );
};

// Function KFGame.AICommand.NotifyHuskSuicide
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyHuskSuicide ( )
{
	static UFunction* pFnNotifyHuskSuicide = NULL;

	if ( ! pFnNotifyHuskSuicide )
		pFnNotifyHuskSuicide = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyHuskSuicide" );

	UAICommand_execNotifyHuskSuicide_Parms NotifyHuskSuicide_Parms;

	this->ProcessEvent ( pFnNotifyHuskSuicide, &NotifyHuskSuicide_Parms, NULL );
};

// Function KFGame.AICommand.NotifyFallingHitWall
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyFallingHitWall ( )
{
	static UFunction* pFnNotifyFallingHitWall = NULL;

	if ( ! pFnNotifyFallingHitWall )
		pFnNotifyFallingHitWall = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyFallingHitWall" );

	UAICommand_execNotifyFallingHitWall_Parms NotifyFallingHitWall_Parms;

	this->ProcessEvent ( pFnNotifyFallingHitWall, &NotifyFallingHitWall_Parms, NULL );
};

// Function KFGame.AICommand.NotifyHitWall
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyHitWall ( )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyHitWall" );

	UAICommand_execNotifyHitWall_Parms NotifyHitWall_Parms;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );
};

// Function KFGame.AICommand.EnemyIsSurrounded
// [0x00020002] 
// Parameters infos:

void UAICommand::EnemyIsSurrounded ( )
{
	static UFunction* pFnEnemyIsSurrounded = NULL;

	if ( ! pFnEnemyIsSurrounded )
		pFnEnemyIsSurrounded = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.EnemyIsSurrounded" );

	UAICommand_execEnemyIsSurrounded_Parms EnemyIsSurrounded_Parms;

	this->ProcessEvent ( pFnEnemyIsSurrounded, &EnemyIsSurrounded_Parms, NULL );
};

// Function KFGame.AICommand.NotifyLanded
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyLanded ( )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyLanded" );

	UAICommand_execNotifyLanded_Parms NotifyLanded_Parms;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );
};

// Function KFGame.AICommand.NotifyBaseChange
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyBaseChange ( )
{
	static UFunction* pFnNotifyBaseChange = NULL;

	if ( ! pFnNotifyBaseChange )
		pFnNotifyBaseChange = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyBaseChange" );

	UAICommand_execNotifyBaseChange_Parms NotifyBaseChange_Parms;

	this->ProcessEvent ( pFnNotifyBaseChange, &NotifyBaseChange_Parms, NULL );
};

// Function KFGame.AICommand.NotifyEnemyNotVisible
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyEnemyNotVisible ( )
{
	static UFunction* pFnNotifyEnemyNotVisible = NULL;

	if ( ! pFnNotifyEnemyNotVisible )
		pFnNotifyEnemyNotVisible = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyEnemyNotVisible" );

	UAICommand_execNotifyEnemyNotVisible_Parms NotifyEnemyNotVisible_Parms;

	this->ProcessEvent ( pFnNotifyEnemyNotVisible, &NotifyEnemyNotVisible_Parms, NULL );
};

// Function KFGame.AICommand.NotifyPlayerBecameVisible
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyPlayerBecameVisible ( )
{
	static UFunction* pFnNotifyPlayerBecameVisible = NULL;

	if ( ! pFnNotifyPlayerBecameVisible )
		pFnNotifyPlayerBecameVisible = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyPlayerBecameVisible" );

	UAICommand_execNotifyPlayerBecameVisible_Parms NotifyPlayerBecameVisible_Parms;

	this->ProcessEvent ( pFnNotifyPlayerBecameVisible, &NotifyPlayerBecameVisible_Parms, NULL );
};

// Function KFGame.AICommand.NotifyDoorOpened
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyDoorOpened ( )
{
	static UFunction* pFnNotifyDoorOpened = NULL;

	if ( ! pFnNotifyDoorOpened )
		pFnNotifyDoorOpened = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyDoorOpened" );

	UAICommand_execNotifyDoorOpened_Parms NotifyDoorOpened_Parms;

	this->ProcessEvent ( pFnNotifyDoorOpened, &NotifyDoorOpened_Parms, NULL );
};

// Function KFGame.AICommand.NotifyEnemyChanged
// [0x00024002] 
// Parameters infos:

void UAICommand::NotifyEnemyChanged ( )
{
	static UFunction* pFnNotifyEnemyChanged = NULL;

	if ( ! pFnNotifyEnemyChanged )
		pFnNotifyEnemyChanged = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyEnemyChanged" );

	UAICommand_execNotifyEnemyChanged_Parms NotifyEnemyChanged_Parms;

	this->ProcessEvent ( pFnNotifyEnemyChanged, &NotifyEnemyChanged_Parms, NULL );
};

// Function KFGame.AICommand.CanChangeEnemy
// [0x00020002] 
// Parameters infos:

void UAICommand::CanChangeEnemy ( )
{
	static UFunction* pFnCanChangeEnemy = NULL;

	if ( ! pFnCanChangeEnemy )
		pFnCanChangeEnemy = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.CanChangeEnemy" );

	UAICommand_execCanChangeEnemy_Parms CanChangeEnemy_Parms;

	this->ProcessEvent ( pFnCanChangeEnemy, &CanChangeEnemy_Parms, NULL );
};

// Function KFGame.AICommand.NotifyCombatBehaviorChange
// [0x00020002] 
// Parameters infos:

void UAICommand::NotifyCombatBehaviorChange ( )
{
	static UFunction* pFnNotifyCombatBehaviorChange = NULL;

	if ( ! pFnNotifyCombatBehaviorChange )
		pFnNotifyCombatBehaviorChange = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyCombatBehaviorChange" );

	UAICommand_execNotifyCombatBehaviorChange_Parms NotifyCombatBehaviorChange_Parms;

	this->ProcessEvent ( pFnNotifyCombatBehaviorChange, &NotifyCombatBehaviorChange_Parms, NULL );
};

// Function KFGame.AICommand.NotifyHearNoise
// [0x00024002] 
// Parameters infos:

void UAICommand::NotifyHearNoise ( )
{
	static UFunction* pFnNotifyHearNoise = NULL;

	if ( ! pFnNotifyHearNoise )
		pFnNotifyHearNoise = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.NotifyHearNoise" );

	UAICommand_execNotifyHearNoise_Parms NotifyHearNoise_Parms;

	this->ProcessEvent ( pFnNotifyHearNoise, &NotifyHearNoise_Parms, NULL );
};

// Function KFGame.AICommand.GetParentCommand
// [0x00020002] 
// Parameters infos:

void UAICommand::GetParentCommand ( )
{
	static UFunction* pFnGetParentCommand = NULL;

	if ( ! pFnGetParentCommand )
		pFnGetParentCommand = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.GetParentCommand" );

	UAICommand_execGetParentCommand_Parms GetParentCommand_Parms;

	this->ProcessEvent ( pFnGetParentCommand, &GetParentCommand_Parms, NULL );
};

// Function KFGame.AICommand.AllowPushOfDefaultCommandForSpecialMove
// [0x00020002] 
// Parameters infos:

void UAICommand::AllowPushOfDefaultCommandForSpecialMove ( )
{
	static UFunction* pFnAllowPushOfDefaultCommandForSpecialMove = NULL;

	if ( ! pFnAllowPushOfDefaultCommandForSpecialMove )
		pFnAllowPushOfDefaultCommandForSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.AllowPushOfDefaultCommandForSpecialMove" );

	UAICommand_execAllowPushOfDefaultCommandForSpecialMove_Parms AllowPushOfDefaultCommandForSpecialMove_Parms;

	this->ProcessEvent ( pFnAllowPushOfDefaultCommandForSpecialMove, &AllowPushOfDefaultCommandForSpecialMove_Parms, NULL );
};

// Function KFGame.AICommand.HandleAICommandSpecialAction
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UAICommand::eventHandleAICommandSpecialAction ( )
{
	static UFunction* pFnHandleAICommandSpecialAction = NULL;

	if ( ! pFnHandleAICommandSpecialAction )
		pFnHandleAICommandSpecialAction = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.HandleAICommandSpecialAction" );

	UAICommand_eventHandleAICommandSpecialAction_Parms HandleAICommandSpecialAction_Parms;

	this->ProcessEvent ( pFnHandleAICommandSpecialAction, &HandleAICommandSpecialAction_Parms, NULL );
};

// Function KFGame.AICommand.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.Popped" );

	UAICommand_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.Resumed" );

	UAICommand_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.Paused" );

	UAICommand_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand.PostPopped
// [0x00020002] 
// Parameters infos:

void UAICommand::PostPopped ( )
{
	static UFunction* pFnPostPopped = NULL;

	if ( ! pFnPostPopped )
		pFnPostPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.PostPopped" );

	UAICommand_execPostPopped_Parms PostPopped_Parms;

	this->ProcessEvent ( pFnPostPopped, &PostPopped_Parms, NULL );
};

// Function KFGame.AICommand.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.Pushed" );

	UAICommand_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand.PrePushed
// [0x00020002] 
// Parameters infos:

void UAICommand::PrePushed ( )
{
	static UFunction* pFnPrePushed = NULL;

	if ( ! pFnPrePushed )
		pFnPrePushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand.PrePushed" );

	UAICommand_execPrePushed_Parms PrePushed_Parms;

	this->ProcessEvent ( pFnPrePushed, &PrePushed_Parms, NULL );
};

// Function KFGame.AICommand_Base_Combat.CombatSelectTarget
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UAICommand_Base_Combat::CombatSelectTarget ( )
{
	static UFunction* pFnCombatSelectTarget = NULL;

	if ( ! pFnCombatSelectTarget )
		pFnCombatSelectTarget = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Combat.CombatSelectTarget" );

	UAICommand_Base_Combat_execCombatSelectTarget_Parms CombatSelectTarget_Parms;

	this->ProcessEvent ( pFnCombatSelectTarget, &CombatSelectTarget_Parms, NULL );
};

// Function KFGame.AICommand_Base_Combat.CheckTransition
// [0x00420000] 
// Parameters infos:

void UAICommand_Base_Combat::CheckTransition ( )
{
	static UFunction* pFnCheckTransition = NULL;

	if ( ! pFnCheckTransition )
		pFnCheckTransition = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Combat.CheckTransition" );

	UAICommand_Base_Combat_execCheckTransition_Parms CheckTransition_Parms;

	this->ProcessEvent ( pFnCheckTransition, &CheckTransition_Parms, NULL );
};

// Function KFGame.AICommand_Base_Combat.TimedTransitionCheck
// [0x00420000] 
// Parameters infos:

void UAICommand_Base_Combat::TimedTransitionCheck ( )
{
	static UFunction* pFnTimedTransitionCheck = NULL;

	if ( ! pFnTimedTransitionCheck )
		pFnTimedTransitionCheck = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Combat.TimedTransitionCheck" );

	UAICommand_Base_Combat_execTimedTransitionCheck_Parms TimedTransitionCheck_Parms;

	this->ProcessEvent ( pFnTimedTransitionCheck, &TimedTransitionCheck_Parms, NULL );
};

// Function KFGame.AICommand_Base_Combat.GetTransitionCheckTime
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UAICommand_Base_Combat::GetTransitionCheckTime ( )
{
	static UFunction* pFnGetTransitionCheckTime = NULL;

	if ( ! pFnGetTransitionCheckTime )
		pFnGetTransitionCheckTime = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Combat.GetTransitionCheckTime" );

	UAICommand_Base_Combat_execGetTransitionCheckTime_Parms GetTransitionCheckTime_Parms;

	this->ProcessEvent ( pFnGetTransitionCheckTime, &GetTransitionCheckTime_Parms, NULL );
};

// Function KFGame.AICommand_Base_Combat.GetInitialTransitionCheckTime
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UAICommand_Base_Combat::GetInitialTransitionCheckTime ( )
{
	static UFunction* pFnGetInitialTransitionCheckTime = NULL;

	if ( ! pFnGetInitialTransitionCheckTime )
		pFnGetInitialTransitionCheckTime = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Combat.GetInitialTransitionCheckTime" );

	UAICommand_Base_Combat_execGetInitialTransitionCheckTime_Parms GetInitialTransitionCheckTime_Parms;

	this->ProcessEvent ( pFnGetInitialTransitionCheckTime, &GetInitialTransitionCheckTime_Parms, NULL );
};

// Function KFGame.AICommand_Base_Combat.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Combat::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Combat.Paused" );

	UAICommand_Base_Combat_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_Base_Combat.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Combat::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Combat.Popped" );

	UAICommand_Base_Combat_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Base_Combat.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Combat::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Combat.Pushed" );

	UAICommand_Base_Combat_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.RunOverWarning
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Monster::eventRunOverWarning ( )
{
	static UFunction* pFnRunOverWarning = NULL;

	if ( ! pFnRunOverWarning )
		pFnRunOverWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.RunOverWarning" );

	AKFAIController_Monster_eventRunOverWarning_Parms RunOverWarning_Parms;

	this->ProcessEvent ( pFnRunOverWarning, &RunOverWarning_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.HandleZedBlockedPath
// [0x00020002] 
// Parameters infos:

void AKFAIController_Monster::HandleZedBlockedPath ( )
{
	static UFunction* pFnHandleZedBlockedPath = NULL;

	if ( ! pFnHandleZedBlockedPath )
		pFnHandleZedBlockedPath = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.HandleZedBlockedPath" );

	AKFAIController_Monster_execHandleZedBlockedPath_Parms HandleZedBlockedPath_Parms;

	this->ProcessEvent ( pFnHandleZedBlockedPath, &HandleZedBlockedPath_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.DoMeleeAttack
// [0x00024000] 
// Parameters infos:

void AKFAIController_Monster::DoMeleeAttack ( )
{
	static UFunction* pFnDoMeleeAttack = NULL;

	if ( ! pFnDoMeleeAttack )
		pFnDoMeleeAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.DoMeleeAttack" );

	AKFAIController_Monster_execDoMeleeAttack_Parms DoMeleeAttack_Parms;

	this->ProcessEvent ( pFnDoMeleeAttack, &DoMeleeAttack_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.DoStrike
// [0x00020002] 
// Parameters infos:

void AKFAIController_Monster::DoStrike ( )
{
	static UFunction* pFnDoStrike = NULL;

	if ( ! pFnDoStrike )
		pFnDoStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.DoStrike" );

	AKFAIController_Monster_execDoStrike_Parms DoStrike_Parms;

	this->ProcessEvent ( pFnDoStrike, &DoStrike_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.CanDoStrike
// [0x00820002] 
// Parameters infos:

void AKFAIController_Monster::CanDoStrike ( )
{
	static UFunction* pFnCanDoStrike = NULL;

	if ( ! pFnCanDoStrike )
		pFnCanDoStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.CanDoStrike" );

	AKFAIController_Monster_execCanDoStrike_Parms CanDoStrike_Parms;

	this->ProcessEvent ( pFnCanDoStrike, &CanDoStrike_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.CanGrabAttack
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Monster::eventCanGrabAttack ( )
{
	static UFunction* pFnCanGrabAttack = NULL;

	if ( ! pFnCanGrabAttack )
		pFnCanGrabAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.CanGrabAttack" );

	AKFAIController_Monster_eventCanGrabAttack_Parms CanGrabAttack_Parms;

	this->ProcessEvent ( pFnCanGrabAttack, &CanGrabAttack_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.GeneratePathTo
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Monster::eventGeneratePathTo ( )
{
	static UFunction* pFnGeneratePathTo = NULL;

	if ( ! pFnGeneratePathTo )
		pFnGeneratePathTo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.GeneratePathTo" );

	AKFAIController_Monster_eventGeneratePathTo_Parms GeneratePathTo_Parms;

	this->ProcessEvent ( pFnGeneratePathTo, &GeneratePathTo_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.ReadyToMelee
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Monster::eventReadyToMelee ( )
{
	static UFunction* pFnReadyToMelee = NULL;

	if ( ! pFnReadyToMelee )
		pFnReadyToMelee = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.ReadyToMelee" );

	AKFAIController_Monster_eventReadyToMelee_Parms ReadyToMelee_Parms;

	this->ProcessEvent ( pFnReadyToMelee, &ReadyToMelee_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.Timer_EnableMeleeRangeEventProbing
// [0x00020002] 
// Parameters infos:

void AKFAIController_Monster::Timer_EnableMeleeRangeEventProbing ( )
{
	static UFunction* pFnTimer_EnableMeleeRangeEventProbing = NULL;

	if ( ! pFnTimer_EnableMeleeRangeEventProbing )
		pFnTimer_EnableMeleeRangeEventProbing = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.Timer_EnableMeleeRangeEventProbing" );

	AKFAIController_Monster_execTimer_EnableMeleeRangeEventProbing_Parms Timer_EnableMeleeRangeEventProbing_Parms;

	this->ProcessEvent ( pFnTimer_EnableMeleeRangeEventProbing, &Timer_EnableMeleeRangeEventProbing_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.SetPawnDefaults
// [0x00020002] 
// Parameters infos:

void AKFAIController_Monster::SetPawnDefaults ( )
{
	static UFunction* pFnSetPawnDefaults = NULL;

	if ( ! pFnSetPawnDefaults )
		pFnSetPawnDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.SetPawnDefaults" );

	AKFAIController_Monster_execSetPawnDefaults_Parms SetPawnDefaults_Parms;

	this->ProcessEvent ( pFnSetPawnDefaults, &SetPawnDefaults_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Monster::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.Possess" );

	AKFAIController_Monster_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function KFGame.KFAIController_Monster.InitPlayerReplicationInfo
// [0x00020002] 
// Parameters infos:

void AKFAIController_Monster::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Monster.InitPlayerReplicationInfo" );

	AKFAIController_Monster_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function KFGame.AICommand_Base_Zed.ShouldSelectTarget
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Zed::ShouldSelectTarget ( )
{
	static UFunction* pFnShouldSelectTarget = NULL;

	if ( ! pFnShouldSelectTarget )
		pFnShouldSelectTarget = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.ShouldSelectTarget" );

	UAICommand_Base_Zed_execShouldSelectTarget_Parms ShouldSelectTarget_Parms;

	this->ProcessEvent ( pFnShouldSelectTarget, &ShouldSelectTarget_Parms, NULL );
};

// Function KFGame.AICommand_Base_Zed.ShouldAttackWhileMoving
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Zed::ShouldAttackWhileMoving ( )
{
	static UFunction* pFnShouldAttackWhileMoving = NULL;

	if ( ! pFnShouldAttackWhileMoving )
		pFnShouldAttackWhileMoving = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.ShouldAttackWhileMoving" );

	UAICommand_Base_Zed_execShouldAttackWhileMoving_Parms ShouldAttackWhileMoving_Parms;

	this->ProcessEvent ( pFnShouldAttackWhileMoving, &ShouldAttackWhileMoving_Parms, NULL );
};

// Function KFGame.AICommand_Base_Zed.NotifyPlayerBecameVisible
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Zed::NotifyPlayerBecameVisible ( )
{
	static UFunction* pFnNotifyPlayerBecameVisible = NULL;

	if ( ! pFnNotifyPlayerBecameVisible )
		pFnNotifyPlayerBecameVisible = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.NotifyPlayerBecameVisible" );

	UAICommand_Base_Zed_execNotifyPlayerBecameVisible_Parms NotifyPlayerBecameVisible_Parms;

	this->ProcessEvent ( pFnNotifyPlayerBecameVisible, &NotifyPlayerBecameVisible_Parms, NULL );
};

// Function KFGame.AICommand_Base_Zed.NotifyEnemyChanged
// [0x00024002] 
// Parameters infos:

void UAICommand_Base_Zed::NotifyEnemyChanged ( )
{
	static UFunction* pFnNotifyEnemyChanged = NULL;

	if ( ! pFnNotifyEnemyChanged )
		pFnNotifyEnemyChanged = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.NotifyEnemyChanged" );

	UAICommand_Base_Zed_execNotifyEnemyChanged_Parms NotifyEnemyChanged_Parms;

	this->ProcessEvent ( pFnNotifyEnemyChanged, &NotifyEnemyChanged_Parms, NULL );
};

// Function KFGame.AICommand_Base_Zed.NotifyBump
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Zed::NotifyBump ( )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.NotifyBump" );

	UAICommand_Base_Zed_execNotifyBump_Parms NotifyBump_Parms;

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );
};

// Function KFGame.AICommand_Base_Zed.OnLatentFinished
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAICommand_Base_Zed::OnLatentFinished ( )
{
	static UFunction* pFnOnLatentFinished = NULL;

	if ( ! pFnOnLatentFinished )
		pFnOnLatentFinished = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.OnLatentFinished" );

	UAICommand_Base_Zed_execOnLatentFinished_Parms OnLatentFinished_Parms;

	pFnOnLatentFinished->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnLatentFinished, &OnLatentFinished_Parms, NULL );

	pFnOnLatentFinished->FunctionFlags |= 0x400;
};

// Function KFGame.AICommand_Base_Zed.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Zed::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.Resumed" );

	UAICommand_Base_Zed_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_Base_Zed.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Zed::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.Paused" );

	UAICommand_Base_Zed_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_Base_Zed.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Zed::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Zed.Pushed" );

	UAICommand_Base_Zed_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.UpdateSprintFrustration
// [0x00024000] 
// Parameters infos:

void AKFAIController_ZedFleshpound::UpdateSprintFrustration ( )
{
	static UFunction* pFnUpdateSprintFrustration = NULL;

	if ( ! pFnUpdateSprintFrustration )
		pFnUpdateSprintFrustration = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.UpdateSprintFrustration" );

	AKFAIController_ZedFleshpound_execUpdateSprintFrustration_Parms UpdateSprintFrustration_Parms;

	this->ProcessEvent ( pFnUpdateSprintFrustration, &UpdateSprintFrustration_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.NotifyEnRaged
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::NotifyEnRaged ( )
{
	static UFunction* pFnNotifyEnRaged = NULL;

	if ( ! pFnNotifyEnRaged )
		pFnNotifyEnRaged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.NotifyEnRaged" );

	AKFAIController_ZedFleshpound_execNotifyEnRaged_Parms NotifyEnRaged_Parms;

	this->ProcessEvent ( pFnNotifyEnRaged, &NotifyEnRaged_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.DoRageTauntAt
// [0x00024002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::DoRageTauntAt ( )
{
	static UFunction* pFnDoRageTauntAt = NULL;

	if ( ! pFnDoRageTauntAt )
		pFnDoRageTauntAt = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.DoRageTauntAt" );

	AKFAIController_ZedFleshpound_execDoRageTauntAt_Parms DoRageTauntAt_Parms;

	this->ProcessEvent ( pFnDoRageTauntAt, &DoRageTauntAt_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.SpawnEnraged
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::SpawnEnraged ( )
{
	static UFunction* pFnSpawnEnraged = NULL;

	if ( ! pFnSpawnEnraged )
		pFnSpawnEnraged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.SpawnEnraged" );

	AKFAIController_ZedFleshpound_execSpawnEnraged_Parms SpawnEnraged_Parms;

	this->ProcessEvent ( pFnSpawnEnraged, &SpawnEnraged_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.DoSpawnRageCheck
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::DoSpawnRageCheck ( )
{
	static UFunction* pFnDoSpawnRageCheck = NULL;

	if ( ! pFnDoSpawnRageCheck )
		pFnDoSpawnRageCheck = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.DoSpawnRageCheck" );

	AKFAIController_ZedFleshpound_execDoSpawnRageCheck_Parms DoSpawnRageCheck_Parms;

	this->ProcessEvent ( pFnDoSpawnRageCheck, &DoSpawnRageCheck_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.CanAttackDestructibles
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::CanAttackDestructibles ( )
{
	static UFunction* pFnCanAttackDestructibles = NULL;

	if ( ! pFnCanAttackDestructibles )
		pFnCanAttackDestructibles = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.CanAttackDestructibles" );

	AKFAIController_ZedFleshpound_execCanAttackDestructibles_Parms CanAttackDestructibles_Parms;

	this->ProcessEvent ( pFnCanAttackDestructibles, &CanAttackDestructibles_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.SetEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpound::eventSetEnemy ( )
{
	static UFunction* pFnSetEnemy = NULL;

	if ( ! pFnSetEnemy )
		pFnSetEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.SetEnemy" );

	AKFAIController_ZedFleshpound_eventSetEnemy_Parms SetEnemy_Parms;

	this->ProcessEvent ( pFnSetEnemy, &SetEnemy_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.SeePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpound::eventSeePlayer ( )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.SeePlayer" );

	AKFAIController_ZedFleshpound_eventSeePlayer_Parms SeePlayer_Parms;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.RestoreCollisionSize
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::RestoreCollisionSize ( )
{
	static UFunction* pFnRestoreCollisionSize = NULL;

	if ( ! pFnRestoreCollisionSize )
		pFnRestoreCollisionSize = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.RestoreCollisionSize" );

	AKFAIController_ZedFleshpound_execRestoreCollisionSize_Parms RestoreCollisionSize_Parms;

	this->ProcessEvent ( pFnRestoreCollisionSize, &RestoreCollisionSize_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.StartSteering
// [0x00020100] 
// Parameters infos:

void AKFAIController_ZedFleshpound::StartSteering ( )
{
	static UFunction* pFnStartSteering = NULL;

	if ( ! pFnStartSteering )
		pFnStartSteering = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.StartSteering" );

	AKFAIController_ZedFleshpound_execStartSteering_Parms StartSteering_Parms;

	this->ProcessEvent ( pFnStartSteering, &StartSteering_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.CanSetSprinting
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::CanSetSprinting ( )
{
	static UFunction* pFnCanSetSprinting = NULL;

	if ( ! pFnCanSetSprinting )
		pFnCanSetSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.CanSetSprinting" );

	AKFAIController_ZedFleshpound_execCanSetSprinting_Parms CanSetSprinting_Parms;

	this->ProcessEvent ( pFnCanSetSprinting, &CanSetSprinting_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.ShouldSprint" );

	AKFAIController_ZedFleshpound_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.IsEnraged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpound::eventIsEnraged ( )
{
	static UFunction* pFnIsEnraged = NULL;

	if ( ! pFnIsEnraged )
		pFnIsEnraged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.IsEnraged" );

	AKFAIController_ZedFleshpound_eventIsEnraged_Parms IsEnraged_Parms;

	this->ProcessEvent ( pFnIsEnraged, &IsEnraged_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.CanEvadeGrenade
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::CanEvadeGrenade ( )
{
	static UFunction* pFnCanEvadeGrenade = NULL;

	if ( ! pFnCanEvadeGrenade )
		pFnCanEvadeGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.CanEvadeGrenade" );

	AKFAIController_ZedFleshpound_execCanEvadeGrenade_Parms CanEvadeGrenade_Parms;

	this->ProcessEvent ( pFnCanEvadeGrenade, &CanEvadeGrenade_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.AttitudeStateChanged
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpound::eventAttitudeStateChanged ( )
{
	static UFunction* pFnAttitudeStateChanged = NULL;

	if ( ! pFnAttitudeStateChanged )
		pFnAttitudeStateChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.AttitudeStateChanged" );

	AKFAIController_ZedFleshpound_eventAttitudeStateChanged_Parms AttitudeStateChanged_Parms;

	this->ProcessEvent ( pFnAttitudeStateChanged, &AttitudeStateChanged_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.NotifyTakeHit" );

	AKFAIController_ZedFleshpound_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.NotifyMeleeDamageDealt
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::NotifyMeleeDamageDealt ( )
{
	static UFunction* pFnNotifyMeleeDamageDealt = NULL;

	if ( ! pFnNotifyMeleeDamageDealt )
		pFnNotifyMeleeDamageDealt = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.NotifyMeleeDamageDealt" );

	AKFAIController_ZedFleshpound_execNotifyMeleeDamageDealt_Parms NotifyMeleeDamageDealt_Parms;

	this->ProcessEvent ( pFnNotifyMeleeDamageDealt, &NotifyMeleeDamageDealt_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.FindNewEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpound::eventFindNewEnemy ( )
{
	static UFunction* pFnFindNewEnemy = NULL;

	if ( ! pFnFindNewEnemy )
		pFnFindNewEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.FindNewEnemy" );

	AKFAIController_ZedFleshpound_eventFindNewEnemy_Parms FindNewEnemy_Parms;

	this->ProcessEvent ( pFnFindNewEnemy, &FindNewEnemy_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.AmIAllowedToSuicideWhenStuck
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpound::AmIAllowedToSuicideWhenStuck ( )
{
	static UFunction* pFnAmIAllowedToSuicideWhenStuck = NULL;

	if ( ! pFnAmIAllowedToSuicideWhenStuck )
		pFnAmIAllowedToSuicideWhenStuck = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.AmIAllowedToSuicideWhenStuck" );

	AKFAIController_ZedFleshpound_execAmIAllowedToSuicideWhenStuck_Parms AmIAllowedToSuicideWhenStuck_Parms;

	this->ProcessEvent ( pFnAmIAllowedToSuicideWhenStuck, &AmIAllowedToSuicideWhenStuck_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.Tick
// [0x00020102] 
// Parameters infos:

void AKFAIController_ZedFleshpound::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.Tick" );

	AKFAIController_ZedFleshpound_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFAIController_ZedFleshpound.Cleanup
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFAIController_ZedFleshpound::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.Cleanup" );

	AKFAIController_ZedFleshpound_execCleanup_Parms Cleanup_Parms;

	pFnCleanup->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );

	pFnCleanup->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIController_ZedFleshpound.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpound::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedFleshpound.Possess" );

	AKFAIController_ZedFleshpound_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function KFGame.AICommand_Base_Fleshpound.NotifyCombatBehaviorChange
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Fleshpound::NotifyCombatBehaviorChange ( )
{
	static UFunction* pFnNotifyCombatBehaviorChange = NULL;

	if ( ! pFnNotifyCombatBehaviorChange )
		pFnNotifyCombatBehaviorChange = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Fleshpound.NotifyCombatBehaviorChange" );

	UAICommand_Base_Fleshpound_execNotifyCombatBehaviorChange_Parms NotifyCombatBehaviorChange_Parms;

	this->ProcessEvent ( pFnNotifyCombatBehaviorChange, &NotifyCombatBehaviorChange_Parms, NULL );
};

// Function KFGame.AICommand_Base_Fleshpound.NotifyEnemyChanged
// [0x00024002] 
// Parameters infos:

void UAICommand_Base_Fleshpound::NotifyEnemyChanged ( )
{
	static UFunction* pFnNotifyEnemyChanged = NULL;

	if ( ! pFnNotifyEnemyChanged )
		pFnNotifyEnemyChanged = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Fleshpound.NotifyEnemyChanged" );

	UAICommand_Base_Fleshpound_execNotifyEnemyChanged_Parms NotifyEnemyChanged_Parms;

	this->ProcessEvent ( pFnNotifyEnemyChanged, &NotifyEnemyChanged_Parms, NULL );
};

// Function KFGame.AICommand_Base_Fleshpound.NotifyPlayerBecameVisible
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Fleshpound::NotifyPlayerBecameVisible ( )
{
	static UFunction* pFnNotifyPlayerBecameVisible = NULL;

	if ( ! pFnNotifyPlayerBecameVisible )
		pFnNotifyPlayerBecameVisible = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Fleshpound.NotifyPlayerBecameVisible" );

	UAICommand_Base_Fleshpound_execNotifyPlayerBecameVisible_Parms NotifyPlayerBecameVisible_Parms;

	this->ProcessEvent ( pFnNotifyPlayerBecameVisible, &NotifyPlayerBecameVisible_Parms, NULL );
};

// Function KFGame.AICommand_Base_Fleshpound.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Fleshpound::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Fleshpound.Popped" );

	UAICommand_Base_Fleshpound_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Base_Fleshpound.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Fleshpound::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Fleshpound.Pushed" );

	UAICommand_Base_Fleshpound_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.NotifyLatentPostPhysWalking
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::NotifyLatentPostPhysWalking ( )
{
	static UFunction* pFnNotifyLatentPostPhysWalking = NULL;

	if ( ! pFnNotifyLatentPostPhysWalking )
		pFnNotifyLatentPostPhysWalking = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.NotifyLatentPostPhysWalking" );

	UAICommand_MoveToGoal_execNotifyLatentPostPhysWalking_Parms NotifyLatentPostPhysWalking_Parms;

	this->ProcessEvent ( pFnNotifyLatentPostPhysWalking, &NotifyLatentPostPhysWalking_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.NotifyBump
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::NotifyBump ( )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.NotifyBump" );

	UAICommand_MoveToGoal_execNotifyBump_Parms NotifyBump_Parms;

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.AdjustAround
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAICommand_MoveToGoal::AdjustAround ( )
{
	static UFunction* pFnAdjustAround = NULL;

	if ( ! pFnAdjustAround )
		pFnAdjustAround = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.AdjustAround" );

	UAICommand_MoveToGoal_execAdjustAround_Parms AdjustAround_Parms;

	pFnAdjustAround->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAdjustAround, &AdjustAround_Parms, NULL );

	pFnAdjustAround->FunctionFlags |= 0x400;
};

// Function KFGame.AICommand_MoveToGoal.Timer_DelayMoveTimeOut
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::Timer_DelayMoveTimeOut ( )
{
	static UFunction* pFnTimer_DelayMoveTimeOut = NULL;

	if ( ! pFnTimer_DelayMoveTimeOut )
		pFnTimer_DelayMoveTimeOut = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.Timer_DelayMoveTimeOut" );

	UAICommand_MoveToGoal_execTimer_DelayMoveTimeOut_Parms Timer_DelayMoveTimeOut_Parms;

	this->ProcessEvent ( pFnTimer_DelayMoveTimeOut, &Timer_DelayMoveTimeOut_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.CheckForStuckPath
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::CheckForStuckPath ( )
{
	static UFunction* pFnCheckForStuckPath = NULL;

	if ( ! pFnCheckForStuckPath )
		pFnCheckForStuckPath = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.CheckForStuckPath" );

	UAICommand_MoveToGoal_execCheckForStuckPath_Parms CheckForStuckPath_Parms;

	this->ProcessEvent ( pFnCheckForStuckPath, &CheckForStuckPath_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.NotifyNeedRepath
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::NotifyNeedRepath ( )
{
	static UFunction* pFnNotifyNeedRepath = NULL;

	if ( ! pFnNotifyNeedRepath )
		pFnNotifyNeedRepath = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.NotifyNeedRepath" );

	UAICommand_MoveToGoal_execNotifyNeedRepath_Parms NotifyNeedRepath_Parms;

	this->ProcessEvent ( pFnNotifyNeedRepath, &NotifyNeedRepath_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_MoveToGoal::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.GetDumpString" );

	UAICommand_MoveToGoal_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.NotifyPlayerBecameVisible
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::NotifyPlayerBecameVisible ( )
{
	static UFunction* pFnNotifyPlayerBecameVisible = NULL;

	if ( ! pFnNotifyPlayerBecameVisible )
		pFnNotifyPlayerBecameVisible = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.NotifyPlayerBecameVisible" );

	UAICommand_MoveToGoal_execNotifyPlayerBecameVisible_Parms NotifyPlayerBecameVisible_Parms;

	this->ProcessEvent ( pFnNotifyPlayerBecameVisible, &NotifyPlayerBecameVisible_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.StartingMove
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::StartingMove ( )
{
	static UFunction* pFnStartingMove = NULL;

	if ( ! pFnStartingMove )
		pFnStartingMove = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.StartingMove" );

	UAICommand_MoveToGoal_execStartingMove_Parms StartingMove_Parms;

	this->ProcessEvent ( pFnStartingMove, &StartingMove_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.Obstruction_Fail
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::Obstruction_Fail ( )
{
	static UFunction* pFnObstruction_Fail = NULL;

	if ( ! pFnObstruction_Fail )
		pFnObstruction_Fail = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.Obstruction_Fail" );

	UAICommand_MoveToGoal_execObstruction_Fail_Parms Obstruction_Fail_Parms;

	this->ProcessEvent ( pFnObstruction_Fail, &Obstruction_Fail_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.Obstruction_Repath
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::Obstruction_Repath ( )
{
	static UFunction* pFnObstruction_Repath = NULL;

	if ( ! pFnObstruction_Repath )
		pFnObstruction_Repath = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.Obstruction_Repath" );

	UAICommand_MoveToGoal_execObstruction_Repath_Parms Obstruction_Repath_Parms;

	this->ProcessEvent ( pFnObstruction_Repath, &Obstruction_Repath_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.HandlePathObstruction
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::HandlePathObstruction ( )
{
	static UFunction* pFnHandlePathObstruction = NULL;

	if ( ! pFnHandlePathObstruction )
		pFnHandlePathObstruction = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.HandlePathObstruction" );

	UAICommand_MoveToGoal_execHandlePathObstruction_Parms HandlePathObstruction_Parms;

	this->ProcessEvent ( pFnHandlePathObstruction, &HandlePathObstruction_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.CheckForIntermediateEnemies
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::CheckForIntermediateEnemies ( )
{
	static UFunction* pFnCheckForIntermediateEnemies = NULL;

	if ( ! pFnCheckForIntermediateEnemies )
		pFnCheckForIntermediateEnemies = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.CheckForIntermediateEnemies" );

	UAICommand_MoveToGoal_execCheckForIntermediateEnemies_Parms CheckForIntermediateEnemies_Parms;

	this->ProcessEvent ( pFnCheckForIntermediateEnemies, &CheckForIntermediateEnemies_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.ReachedIntermediateMoveGoal
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::ReachedIntermediateMoveGoal ( )
{
	static UFunction* pFnReachedIntermediateMoveGoal = NULL;

	if ( ! pFnReachedIntermediateMoveGoal )
		pFnReachedIntermediateMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.ReachedIntermediateMoveGoal" );

	UAICommand_MoveToGoal_execReachedIntermediateMoveGoal_Parms ReachedIntermediateMoveGoal_Parms;

	this->ProcessEvent ( pFnReachedIntermediateMoveGoal, &ReachedIntermediateMoveGoal_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.ReachedMoveGoal
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::ReachedMoveGoal ( )
{
	static UFunction* pFnReachedMoveGoal = NULL;

	if ( ! pFnReachedMoveGoal )
		pFnReachedMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.ReachedMoveGoal" );

	UAICommand_MoveToGoal_execReachedMoveGoal_Parms ReachedMoveGoal_Parms;

	this->ProcessEvent ( pFnReachedMoveGoal, &ReachedMoveGoal_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.MoveUnreachable
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::MoveUnreachable ( )
{
	static UFunction* pFnMoveUnreachable = NULL;

	if ( ! pFnMoveUnreachable )
		pFnMoveUnreachable = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.MoveUnreachable" );

	UAICommand_MoveToGoal_execMoveUnreachable_Parms MoveUnreachable_Parms;

	this->ProcessEvent ( pFnMoveUnreachable, &MoveUnreachable_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.HasReachedMoveGoal
// [0x00024002] 
// Parameters infos:

void UAICommand_MoveToGoal::HasReachedMoveGoal ( )
{
	static UFunction* pFnHasReachedMoveGoal = NULL;

	if ( ! pFnHasReachedMoveGoal )
		pFnHasReachedMoveGoal = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.HasReachedMoveGoal" );

	UAICommand_MoveToGoal_execHasReachedMoveGoal_Parms HasReachedMoveGoal_Parms;

	this->ProcessEvent ( pFnHasReachedMoveGoal, &HasReachedMoveGoal_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.MovePointIsValid
// [0x00024002] 
// Parameters infos:

void UAICommand_MoveToGoal::MovePointIsValid ( )
{
	static UFunction* pFnMovePointIsValid = NULL;

	if ( ! pFnMovePointIsValid )
		pFnMovePointIsValid = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.MovePointIsValid" );

	UAICommand_MoveToGoal_execMovePointIsValid_Parms MovePointIsValid_Parms;

	this->ProcessEvent ( pFnMovePointIsValid, &MovePointIsValid_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.MoveGoalIsValid
// [0x00024002] 
// Parameters infos:

void UAICommand_MoveToGoal::MoveGoalIsValid ( )
{
	static UFunction* pFnMoveGoalIsValid = NULL;

	if ( ! pFnMoveGoalIsValid )
		pFnMoveGoalIsValid = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.MoveGoalIsValid" );

	UAICommand_MoveToGoal_execMoveGoalIsValid_Parms MoveGoalIsValid_Parms;

	this->ProcessEvent ( pFnMoveGoalIsValid, &MoveGoalIsValid_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.MoveToGoalTimedOut
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::MoveToGoalTimedOut ( )
{
	static UFunction* pFnMoveToGoalTimedOut = NULL;

	if ( ! pFnMoveToGoalTimedOut )
		pFnMoveToGoalTimedOut = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.MoveToGoalTimedOut" );

	UAICommand_MoveToGoal_execMoveToGoalTimedOut_Parms MoveToGoalTimedOut_Parms;

	this->ProcessEvent ( pFnMoveToGoalTimedOut, &MoveToGoalTimedOut_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.RouteCache_RemoveIndex
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::RouteCache_RemoveIndex ( )
{
	static UFunction* pFnRouteCache_RemoveIndex = NULL;

	if ( ! pFnRouteCache_RemoveIndex )
		pFnRouteCache_RemoveIndex = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.RouteCache_RemoveIndex" );

	UAICommand_MoveToGoal_execRouteCache_RemoveIndex_Parms RouteCache_RemoveIndex_Parms;

	this->ProcessEvent ( pFnRouteCache_RemoveIndex, &RouteCache_RemoveIndex_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.FindPathTo
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::FindPathTo ( )
{
	static UFunction* pFnFindPathTo = NULL;

	if ( ! pFnFindPathTo )
		pFnFindPathTo = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.FindPathTo" );

	UAICommand_MoveToGoal_execFindPathTo_Parms FindPathTo_Parms;

	this->ProcessEvent ( pFnFindPathTo, &FindPathTo_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.FindPathToward
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::FindPathToward ( )
{
	static UFunction* pFnFindPathToward = NULL;

	if ( ! pFnFindPathToward )
		pFnFindPathToward = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.FindPathToward" );

	UAICommand_MoveToGoal_execFindPathToward_Parms FindPathToward_Parms;

	this->ProcessEvent ( pFnFindPathToward, &FindPathToward_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.ReEvaluatePath
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::ReEvaluatePath ( )
{
	static UFunction* pFnReEvaluatePath = NULL;

	if ( ! pFnReEvaluatePath )
		pFnReEvaluatePath = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.ReEvaluatePath" );

	UAICommand_MoveToGoal_execReEvaluatePath_Parms ReEvaluatePath_Parms;

	this->ProcessEvent ( pFnReEvaluatePath, &ReEvaluatePath_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.EnemyIsSurrounded
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_MoveToGoal::eventEnemyIsSurrounded ( )
{
	static UFunction* pFnEnemyIsSurrounded = NULL;

	if ( ! pFnEnemyIsSurrounded )
		pFnEnemyIsSurrounded = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.EnemyIsSurrounded" );

	UAICommand_MoveToGoal_eventEnemyIsSurrounded_Parms EnemyIsSurrounded_Parms;

	this->ProcessEvent ( pFnEnemyIsSurrounded, &EnemyIsSurrounded_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.Resumed" );

	UAICommand_MoveToGoal_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.Paused
// [0x00820002] 
// Parameters infos:

void UAICommand_MoveToGoal::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.Paused" );

	UAICommand_MoveToGoal_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.Popped" );

	UAICommand_MoveToGoal_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToGoal::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.Pushed" );

	UAICommand_MoveToGoal_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.MoveToPoint
// [0x00026002] 
// Parameters infos:

void UAICommand_MoveToGoal::MoveToPoint ( )
{
	static UFunction* pFnMoveToPoint = NULL;

	if ( ! pFnMoveToPoint )
		pFnMoveToPoint = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.MoveToPoint" );

	UAICommand_MoveToGoal_execMoveToPoint_Parms MoveToPoint_Parms;

	this->ProcessEvent ( pFnMoveToPoint, &MoveToPoint_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.MoveToGoal
// [0x00026002] 
// Parameters infos:

void UAICommand_MoveToGoal::MoveToGoal ( )
{
	static UFunction* pFnMoveToGoal = NULL;

	if ( ! pFnMoveToGoal )
		pFnMoveToGoal = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.MoveToGoal" );

	UAICommand_MoveToGoal_execMoveToGoal_Parms MoveToGoal_Parms;

	this->ProcessEvent ( pFnMoveToGoal, &MoveToGoal_Parms, NULL );
};

// Function KFGame.AICommand_MoveToGoal.AddNonSkippableWayPoint
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAICommand_MoveToGoal::AddNonSkippableWayPoint ( )
{
	static UFunction* pFnAddNonSkippableWayPoint = NULL;

	if ( ! pFnAddNonSkippableWayPoint )
		pFnAddNonSkippableWayPoint = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.AddNonSkippableWayPoint" );

	UAICommand_MoveToGoal_execAddNonSkippableWayPoint_Parms AddNonSkippableWayPoint_Parms;

	pFnAddNonSkippableWayPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddNonSkippableWayPoint, &AddNonSkippableWayPoint_Parms, NULL );

	pFnAddNonSkippableWayPoint->FunctionFlags |= 0x400;
};

// Function KFGame.AICommand_MoveToGoal.ClearNonSkippableWayPoints
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UAICommand_MoveToGoal::ClearNonSkippableWayPoints ( )
{
	static UFunction* pFnClearNonSkippableWayPoints = NULL;

	if ( ! pFnClearNonSkippableWayPoints )
		pFnClearNonSkippableWayPoints = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToGoal.ClearNonSkippableWayPoints" );

	UAICommand_MoveToGoal_execClearNonSkippableWayPoints_Parms ClearNonSkippableWayPoints_Parms;

	pFnClearNonSkippableWayPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearNonSkippableWayPoints, &ClearNonSkippableWayPoints_Parms, NULL );

	pFnClearNonSkippableWayPoints->FunctionFlags |= 0x400;
};

// Function KFGame.AICommand_SpecialMove.Timer_FailSafeReadyTriggered
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::Timer_FailSafeReadyTriggered ( )
{
	static UFunction* pFnTimer_FailSafeReadyTriggered = NULL;

	if ( ! pFnTimer_FailSafeReadyTriggered )
		pFnTimer_FailSafeReadyTriggered = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.Timer_FailSafeReadyTriggered" );

	UAICommand_SpecialMove_execTimer_FailSafeReadyTriggered_Parms Timer_FailSafeReadyTriggered_Parms;

	this->ProcessEvent ( pFnTimer_FailSafeReadyTriggered, &Timer_FailSafeReadyTriggered_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.GetFailSafeReadyTime
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::GetFailSafeReadyTime ( )
{
	static UFunction* pFnGetFailSafeReadyTime = NULL;

	if ( ! pFnGetFailSafeReadyTime )
		pFnGetFailSafeReadyTime = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.GetFailSafeReadyTime" );

	UAICommand_SpecialMove_execGetFailSafeReadyTime_Parms GetFailSafeReadyTime_Parms;

	this->ProcessEvent ( pFnGetFailSafeReadyTime, &GetFailSafeReadyTime_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.SpecialMoveTimeout
// [0x00020000] 
// Parameters infos:

void UAICommand_SpecialMove::SpecialMoveTimeout ( )
{
	static UFunction* pFnSpecialMoveTimeout = NULL;

	if ( ! pFnSpecialMoveTimeout )
		pFnSpecialMoveTimeout = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.SpecialMoveTimeout" );

	UAICommand_SpecialMove_execSpecialMoveTimeout_Parms SpecialMoveTimeout_Parms;

	this->ProcessEvent ( pFnSpecialMoveTimeout, &SpecialMoveTimeout_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.UnlockAI
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::UnlockAI ( )
{
	static UFunction* pFnUnlockAI = NULL;

	if ( ! pFnUnlockAI )
		pFnUnlockAI = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.UnlockAI" );

	UAICommand_SpecialMove_execUnlockAI_Parms UnlockAI_Parms;

	this->ProcessEvent ( pFnUnlockAI, &UnlockAI_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.LockdownAI
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::LockdownAI ( )
{
	static UFunction* pFnLockdownAI = NULL;

	if ( ! pFnLockdownAI )
		pFnLockdownAI = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.LockdownAI" );

	UAICommand_SpecialMove_execLockdownAI_Parms LockdownAI_Parms;

	this->ProcessEvent ( pFnLockdownAI, &LockdownAI_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.GetUpdatedAnchor
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::GetUpdatedAnchor ( )
{
	static UFunction* pFnGetUpdatedAnchor = NULL;

	if ( ! pFnGetUpdatedAnchor )
		pFnGetUpdatedAnchor = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.GetUpdatedAnchor" );

	UAICommand_SpecialMove_execGetUpdatedAnchor_Parms GetUpdatedAnchor_Parms;

	this->ProcessEvent ( pFnGetUpdatedAnchor, &GetUpdatedAnchor_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.GetStartAnchor
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::GetStartAnchor ( )
{
	static UFunction* pFnGetStartAnchor = NULL;

	if ( ! pFnGetStartAnchor )
		pFnGetStartAnchor = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.GetStartAnchor" );

	UAICommand_SpecialMove_execGetStartAnchor_Parms GetStartAnchor_Parms;

	this->ProcessEvent ( pFnGetStartAnchor, &GetStartAnchor_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.ClearTimeout
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::ClearTimeout ( )
{
	static UFunction* pFnClearTimeout = NULL;

	if ( ! pFnClearTimeout )
		pFnClearTimeout = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.ClearTimeout" );

	UAICommand_SpecialMove_execClearTimeout_Parms ClearTimeout_Parms;

	this->ProcessEvent ( pFnClearTimeout, &ClearTimeout_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.Popped" );

	UAICommand_SpecialMove_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.Paused" );

	UAICommand_SpecialMove_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.Resumed" );

	UAICommand_SpecialMove_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_SpecialMove.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_SpecialMove::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SpecialMove.Pushed" );

	UAICommand_SpecialMove_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_SM_Attack.IsSpecialMoveComplete
// [0x00020002] 
// Parameters infos:

void UAICommand_SM_Attack::IsSpecialMoveComplete ( )
{
	static UFunction* pFnIsSpecialMoveComplete = NULL;

	if ( ! pFnIsSpecialMoveComplete )
		pFnIsSpecialMoveComplete = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SM_Attack.IsSpecialMoveComplete" );

	UAICommand_SM_Attack_execIsSpecialMoveComplete_Parms IsSpecialMoveComplete_Parms;

	this->ProcessEvent ( pFnIsSpecialMoveComplete, &IsSpecialMoveComplete_Parms, NULL );
};

// Function KFGame.AICommand_SM_Attack.GetSpecialMove
// [0x00020002] 
// Parameters infos:

void UAICommand_SM_Attack::GetSpecialMove ( )
{
	static UFunction* pFnGetSpecialMove = NULL;

	if ( ! pFnGetSpecialMove )
		pFnGetSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SM_Attack.GetSpecialMove" );

	UAICommand_SM_Attack_execGetSpecialMove_Parms GetSpecialMove_Parms;

	this->ProcessEvent ( pFnGetSpecialMove, &GetSpecialMove_Parms, NULL );
};

// Function KFGame.AICommand_SM_Attack.ShouldIgnoreTimeTransitions
// [0x00020002] 
// Parameters infos:

void UAICommand_SM_Attack::ShouldIgnoreTimeTransitions ( )
{
	static UFunction* pFnShouldIgnoreTimeTransitions = NULL;

	if ( ! pFnShouldIgnoreTimeTransitions )
		pFnShouldIgnoreTimeTransitions = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SM_Attack.ShouldIgnoreTimeTransitions" );

	UAICommand_SM_Attack_execShouldIgnoreTimeTransitions_Parms ShouldIgnoreTimeTransitions_Parms;

	this->ProcessEvent ( pFnShouldIgnoreTimeTransitions, &ShouldIgnoreTimeTransitions_Parms, NULL );
};

// Function KFGame.AICommand_SM_Attack.ShouldSelectTarget
// [0x00020002] 
// Parameters infos:

void UAICommand_SM_Attack::ShouldSelectTarget ( )
{
	static UFunction* pFnShouldSelectTarget = NULL;

	if ( ! pFnShouldSelectTarget )
		pFnShouldSelectTarget = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SM_Attack.ShouldSelectTarget" );

	UAICommand_SM_Attack_execShouldSelectTarget_Parms ShouldSelectTarget_Parms;

	this->ProcessEvent ( pFnShouldSelectTarget, &ShouldSelectTarget_Parms, NULL );
};

// Function KFGame.AICommand_SM_Attack.AllowTransitionTo
// [0x00020002] 
// Parameters infos:

void UAICommand_SM_Attack::AllowTransitionTo ( )
{
	static UFunction* pFnAllowTransitionTo = NULL;

	if ( ! pFnAllowTransitionTo )
		pFnAllowTransitionTo = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SM_Attack.AllowTransitionTo" );

	UAICommand_SM_Attack_execAllowTransitionTo_Parms AllowTransitionTo_Parms;

	this->ProcessEvent ( pFnAllowTransitionTo, &AllowTransitionTo_Parms, NULL );
};

// Function KFGame.AICommand_SM_Attack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_SM_Attack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SM_Attack.Popped" );

	UAICommand_SM_Attack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_SM_Attack.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_SM_Attack::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SM_Attack.Paused" );

	UAICommand_SM_Attack_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_SM_Attack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_SM_Attack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SM_Attack.Pushed" );

	UAICommand_SM_Attack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.GetStepAheadLocation
// [0x00820002] 
// Parameters infos:

void UAICommand_Attack_Melee::GetStepAheadLocation ( )
{
	static UFunction* pFnGetStepAheadLocation = NULL;

	if ( ! pFnGetStepAheadLocation )
		pFnGetStepAheadLocation = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.GetStepAheadLocation" );

	UAICommand_Attack_Melee_execGetStepAheadLocation_Parms GetStepAheadLocation_Parms;

	this->ProcessEvent ( pFnGetStepAheadLocation, &GetStepAheadLocation_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.CircleTimer
// [0x00020000] 
// Parameters infos:

void UAICommand_Attack_Melee::CircleTimer ( )
{
	static UFunction* pFnCircleTimer = NULL;

	if ( ! pFnCircleTimer )
		pFnCircleTimer = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.CircleTimer" );

	UAICommand_Attack_Melee_execCircleTimer_Parms CircleTimer_Parms;

	this->ProcessEvent ( pFnCircleTimer, &CircleTimer_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.NotifyEnemyChanged
// [0x00024002] 
// Parameters infos:

void UAICommand_Attack_Melee::NotifyEnemyChanged ( )
{
	static UFunction* pFnNotifyEnemyChanged = NULL;

	if ( ! pFnNotifyEnemyChanged )
		pFnNotifyEnemyChanged = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.NotifyEnemyChanged" );

	UAICommand_Attack_Melee_execNotifyEnemyChanged_Parms NotifyEnemyChanged_Parms;

	this->ProcessEvent ( pFnNotifyEnemyChanged, &NotifyEnemyChanged_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.GetAbortAttackDistanceSq
// [0x00820002] 
// Parameters infos:

void UAICommand_Attack_Melee::GetAbortAttackDistanceSq ( )
{
	static UFunction* pFnGetAbortAttackDistanceSq = NULL;

	if ( ! pFnGetAbortAttackDistanceSq )
		pFnGetAbortAttackDistanceSq = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.GetAbortAttackDistanceSq" );

	UAICommand_Attack_Melee_execGetAbortAttackDistanceSq_Parms GetAbortAttackDistanceSq_Parms;

	this->ProcessEvent ( pFnGetAbortAttackDistanceSq, &GetAbortAttackDistanceSq_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_Attack_Melee::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.GetDumpString" );

	UAICommand_Attack_Melee_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.NotifyPlayerBecameVisible
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Melee::NotifyPlayerBecameVisible ( )
{
	static UFunction* pFnNotifyPlayerBecameVisible = NULL;

	if ( ! pFnNotifyPlayerBecameVisible )
		pFnNotifyPlayerBecameVisible = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.NotifyPlayerBecameVisible" );

	UAICommand_Attack_Melee_execNotifyPlayerBecameVisible_Parms NotifyPlayerBecameVisible_Parms;

	this->ProcessEvent ( pFnNotifyPlayerBecameVisible, &NotifyPlayerBecameVisible_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.CanChangeEnemy
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Melee::CanChangeEnemy ( )
{
	static UFunction* pFnCanChangeEnemy = NULL;

	if ( ! pFnCanChangeEnemy )
		pFnCanChangeEnemy = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.CanChangeEnemy" );

	UAICommand_Attack_Melee_execCanChangeEnemy_Parms CanChangeEnemy_Parms;

	this->ProcessEvent ( pFnCanChangeEnemy, &CanChangeEnemy_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Melee::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.Resumed" );

	UAICommand_Attack_Melee_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Melee::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.Paused" );

	UAICommand_Attack_Melee_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.NotifyBump
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_Attack_Melee::eventNotifyBump ( )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.NotifyBump" );

	UAICommand_Attack_Melee_eventNotifyBump_Parms NotifyBump_Parms;

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Melee::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.Popped" );

	UAICommand_Attack_Melee_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Melee::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.Pushed" );

	UAICommand_Attack_Melee_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Melee.Melee
// [0x00026002] 
// Parameters infos:

void UAICommand_Attack_Melee::Melee ( )
{
	static UFunction* pFnMelee = NULL;

	if ( ! pFnMelee )
		pFnMelee = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Melee.Melee" );

	UAICommand_Attack_Melee_execMelee_Parms Melee_Parms;

	this->ProcessEvent ( pFnMelee, &Melee_Parms, NULL );
};

// Function KFGame.KFAiBaseRangedBehavior.SetAllPastStrikeLocValidationInfoToExpired
// [0x00020002] 
// Parameters infos:

void UKFAiBaseRangedBehavior::SetAllPastStrikeLocValidationInfoToExpired ( )
{
	static UFunction* pFnSetAllPastStrikeLocValidationInfoToExpired = NULL;

	if ( ! pFnSetAllPastStrikeLocValidationInfoToExpired )
		pFnSetAllPastStrikeLocValidationInfoToExpired = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBaseRangedBehavior.SetAllPastStrikeLocValidationInfoToExpired" );

	UKFAiBaseRangedBehavior_execSetAllPastStrikeLocValidationInfoToExpired_Parms SetAllPastStrikeLocValidationInfoToExpired_Parms;

	this->ProcessEvent ( pFnSetAllPastStrikeLocValidationInfoToExpired, &SetAllPastStrikeLocValidationInfoToExpired_Parms, NULL );
};

// Function KFGame.KFAiBaseRangedBehavior.DrawFireAttackDebug
// [0x00820002] 
// Parameters infos:

void UKFAiBaseRangedBehavior::DrawFireAttackDebug ( )
{
	static UFunction* pFnDrawFireAttackDebug = NULL;

	if ( ! pFnDrawFireAttackDebug )
		pFnDrawFireAttackDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBaseRangedBehavior.DrawFireAttackDebug" );

	UKFAiBaseRangedBehavior_execDrawFireAttackDebug_Parms DrawFireAttackDebug_Parms;

	this->ProcessEvent ( pFnDrawFireAttackDebug, &DrawFireAttackDebug_Parms, NULL );
};

// Function KFGame.KFAiBaseRangedBehavior.SetStrikeZoneInfo
// [0x00020002] 
// Parameters infos:

void UKFAiBaseRangedBehavior::SetStrikeZoneInfo ( )
{
	static UFunction* pFnSetStrikeZoneInfo = NULL;

	if ( ! pFnSetStrikeZoneInfo )
		pFnSetStrikeZoneInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBaseRangedBehavior.SetStrikeZoneInfo" );

	UKFAiBaseRangedBehavior_execSetStrikeZoneInfo_Parms SetStrikeZoneInfo_Parms;

	this->ProcessEvent ( pFnSetStrikeZoneInfo, &SetStrikeZoneInfo_Parms, NULL );
};

// Function KFGame.KFAiBaseRangedBehavior.GetBestCurrentVelocityForThisTarget
// [0x00020002] 
// Parameters infos:

void UKFAiBaseRangedBehavior::GetBestCurrentVelocityForThisTarget ( )
{
	static UFunction* pFnGetBestCurrentVelocityForThisTarget = NULL;

	if ( ! pFnGetBestCurrentVelocityForThisTarget )
		pFnGetBestCurrentVelocityForThisTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBaseRangedBehavior.GetBestCurrentVelocityForThisTarget" );

	UKFAiBaseRangedBehavior_execGetBestCurrentVelocityForThisTarget_Parms GetBestCurrentVelocityForThisTarget_Parms;

	this->ProcessEvent ( pFnGetBestCurrentVelocityForThisTarget, &GetBestCurrentVelocityForThisTarget_Parms, NULL );
};

// Function KFGame.KFAiBaseRangedBehavior.FindCurrentFireFromAnywhereZone
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFAiBaseRangedBehavior::FindCurrentFireFromAnywhereZone ( )
{
	static UFunction* pFnFindCurrentFireFromAnywhereZone = NULL;

	if ( ! pFnFindCurrentFireFromAnywhereZone )
		pFnFindCurrentFireFromAnywhereZone = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBaseRangedBehavior.FindCurrentFireFromAnywhereZone" );

	UKFAiBaseRangedBehavior_execFindCurrentFireFromAnywhereZone_Parms FindCurrentFireFromAnywhereZone_Parms;

	pFnFindCurrentFireFromAnywhereZone->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindCurrentFireFromAnywhereZone, &FindCurrentFireFromAnywhereZone_Parms, NULL );

	pFnFindCurrentFireFromAnywhereZone->FunctionFlags |= 0x400;
};

// Function KFGame.KFAiBaseRangedBehavior.GetRangedFireMidZoneRangeForThisZone
// [0x00020002] 
// Parameters infos:

void UKFAiBaseRangedBehavior::GetRangedFireMidZoneRangeForThisZone ( )
{
	static UFunction* pFnGetRangedFireMidZoneRangeForThisZone = NULL;

	if ( ! pFnGetRangedFireMidZoneRangeForThisZone )
		pFnGetRangedFireMidZoneRangeForThisZone = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBaseRangedBehavior.GetRangedFireMidZoneRangeForThisZone" );

	UKFAiBaseRangedBehavior_execGetRangedFireMidZoneRangeForThisZone_Parms GetRangedFireMidZoneRangeForThisZone_Parms;

	this->ProcessEvent ( pFnGetRangedFireMidZoneRangeForThisZone, &GetRangedFireMidZoneRangeForThisZone_Parms, NULL );
};

// Function KFGame.KFAiBaseRangedBehavior.InitRangeFireData
// [0x00020102] 
// Parameters infos:

void UKFAiBaseRangedBehavior::InitRangeFireData ( )
{
	static UFunction* pFnInitRangeFireData = NULL;

	if ( ! pFnInitRangeFireData )
		pFnInitRangeFireData = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBaseRangedBehavior.InitRangeFireData" );

	UKFAiBaseRangedBehavior_execInitRangeFireData_Parms InitRangeFireData_Parms;

	this->ProcessEvent ( pFnInitRangeFireData, &InitRangeFireData_Parms, NULL );
};

// Function KFGame.KFAiBaseRangedBehavior.Setup
// [0x00820002] 
// Parameters infos:

void UKFAiBaseRangedBehavior::Setup ( )
{
	static UFunction* pFnSetup = NULL;

	if ( ! pFnSetup )
		pFnSetup = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBaseRangedBehavior.Setup" );

	UKFAiBaseRangedBehavior_execSetup_Parms Setup_Parms;

	this->ProcessEvent ( pFnSetup, &Setup_Parms, NULL );
};

// Function KFGame.KFAiDirectProjectileFireBehavior.IsThereClearDirectFireAttackLaneFromGivenLoc
// [0x00820002] 
// Parameters infos:

void UKFAiDirectProjectileFireBehavior::IsThereClearDirectFireAttackLaneFromGivenLoc ( )
{
	static UFunction* pFnIsThereClearDirectFireAttackLaneFromGivenLoc = NULL;

	if ( ! pFnIsThereClearDirectFireAttackLaneFromGivenLoc )
		pFnIsThereClearDirectFireAttackLaneFromGivenLoc = UObject::FindObject< UFunction > ( "Function KFGame.KFAiDirectProjectileFireBehavior.IsThereClearDirectFireAttackLaneFromGivenLoc" );

	UKFAiDirectProjectileFireBehavior_execIsThereClearDirectFireAttackLaneFromGivenLoc_Parms IsThereClearDirectFireAttackLaneFromGivenLoc_Parms;

	this->ProcessEvent ( pFnIsThereClearDirectFireAttackLaneFromGivenLoc, &IsThereClearDirectFireAttackLaneFromGivenLoc_Parms, NULL );
};

// Function KFGame.KFAiDirectProjectileFireBehavior.LosTestForAttackLane
// [0x00426400] ( FUNC_Native )
// Parameters infos:

void UKFAiDirectProjectileFireBehavior::LosTestForAttackLane ( )
{
	static UFunction* pFnLosTestForAttackLane = NULL;

	if ( ! pFnLosTestForAttackLane )
		pFnLosTestForAttackLane = UObject::FindObject< UFunction > ( "Function KFGame.KFAiDirectProjectileFireBehavior.LosTestForAttackLane" );

	UKFAiDirectProjectileFireBehavior_execLosTestForAttackLane_Parms LosTestForAttackLane_Parms;

	pFnLosTestForAttackLane->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLosTestForAttackLane, &LosTestForAttackLane_Parms, NULL );

	pFnLosTestForAttackLane->FunctionFlags |= 0x400;
};

// Function KFGame.KFAiLeapBehavior.DrawDebugLastLeapArcCalcedArcImpacts
// [0x00020002] 
// Parameters infos:

void UKFAiLeapBehavior::DrawDebugLastLeapArcCalcedArcImpacts ( )
{
	static UFunction* pFnDrawDebugLastLeapArcCalcedArcImpacts = NULL;

	if ( ! pFnDrawDebugLastLeapArcCalcedArcImpacts )
		pFnDrawDebugLastLeapArcCalcedArcImpacts = UObject::FindObject< UFunction > ( "Function KFGame.KFAiLeapBehavior.DrawDebugLastLeapArcCalcedArcImpacts" );

	UKFAiLeapBehavior_execDrawDebugLastLeapArcCalcedArcImpacts_Parms DrawDebugLastLeapArcCalcedArcImpacts_Parms;

	this->ProcessEvent ( pFnDrawDebugLastLeapArcCalcedArcImpacts, &DrawDebugLastLeapArcCalcedArcImpacts_Parms, NULL );
};

// Function KFGame.KFAiLeapBehavior.DrawDebugLastValidLeapArcCalced
// [0x00820002] 
// Parameters infos:

void UKFAiLeapBehavior::DrawDebugLastValidLeapArcCalced ( )
{
	static UFunction* pFnDrawDebugLastValidLeapArcCalced = NULL;

	if ( ! pFnDrawDebugLastValidLeapArcCalced )
		pFnDrawDebugLastValidLeapArcCalced = UObject::FindObject< UFunction > ( "Function KFGame.KFAiLeapBehavior.DrawDebugLastValidLeapArcCalced" );

	UKFAiLeapBehavior_execDrawDebugLastValidLeapArcCalced_Parms DrawDebugLastValidLeapArcCalced_Parms;

	this->ProcessEvent ( pFnDrawDebugLastValidLeapArcCalced, &DrawDebugLastValidLeapArcCalced_Parms, NULL );
};

// Function KFGame.KFAiLeapBehavior.SuggestLeapVelocity
// [0x00424401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFAiLeapBehavior::SuggestLeapVelocity ( )
{
	static UFunction* pFnSuggestLeapVelocity = NULL;

	if ( ! pFnSuggestLeapVelocity )
		pFnSuggestLeapVelocity = UObject::FindObject< UFunction > ( "Function KFGame.KFAiLeapBehavior.SuggestLeapVelocity" );

	UKFAiLeapBehavior_execSuggestLeapVelocity_Parms SuggestLeapVelocity_Parms;

	pFnSuggestLeapVelocity->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSuggestLeapVelocity, &SuggestLeapVelocity_Parms, NULL );

	pFnSuggestLeapVelocity->FunctionFlags |= 0x400;
};

// Function KFGame.KFAiBehaviorTypes.DebugDumpPathingFlags
// [0x00422002] 
// Parameters infos:

void UKFAiBehaviorTypes::DebugDumpPathingFlags ( )
{
	static UFunction* pFnDebugDumpPathingFlags = NULL;

	if ( ! pFnDebugDumpPathingFlags )
		pFnDebugDumpPathingFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFAiBehaviorTypes.DebugDumpPathingFlags" );

	UKFAiBehaviorTypes_execDebugDumpPathingFlags_Parms DebugDumpPathingFlags_Parms;

	this->ProcessEvent ( pFnDebugDumpPathingFlags, &DebugDumpPathingFlags_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedBoss::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.Possess" );

	AKFAIController_ZedBoss_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.EnterZedVictoryState
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBoss::EnterZedVictoryState ( )
{
	static UFunction* pFnEnterZedVictoryState = NULL;

	if ( ! pFnEnterZedVictoryState )
		pFnEnterZedVictoryState = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.EnterZedVictoryState" );

	AKFAIController_ZedBoss_execEnterZedVictoryState_Parms EnterZedVictoryState_Parms;

	this->ProcessEvent ( pFnEnterZedVictoryState, &EnterZedVictoryState_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.PawnDied
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBoss::PawnDied ( )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.PawnDied" );

	AKFAIController_ZedBoss_execPawnDied_Parms PawnDied_Parms;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.Timer_StopSummoningZeds
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBoss::Timer_StopSummoningZeds ( )
{
	static UFunction* pFnTimer_StopSummoningZeds = NULL;

	if ( ! pFnTimer_StopSummoningZeds )
		pFnTimer_StopSummoningZeds = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.Timer_StopSummoningZeds" );

	AKFAIController_ZedBoss_execTimer_StopSummoningZeds_Parms Timer_StopSummoningZeds_Parms;

	this->ProcessEvent ( pFnTimer_StopSummoningZeds, &Timer_StopSummoningZeds_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.DebugNextPhase
// [0x00020000] 
// Parameters infos:

void AKFAIController_ZedBoss::DebugNextPhase ( )
{
	static UFunction* pFnDebugNextPhase = NULL;

	if ( ! pFnDebugNextPhase )
		pFnDebugNextPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.DebugNextPhase" );

	AKFAIController_ZedBoss_execDebugNextPhase_Parms DebugNextPhase_Parms;

	this->ProcessEvent ( pFnDebugNextPhase, &DebugNextPhase_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.PlayDamagePlayerDialog
// [0x00020000] 
// Parameters infos:

void AKFAIController_ZedBoss::PlayDamagePlayerDialog ( )
{
	static UFunction* pFnPlayDamagePlayerDialog = NULL;

	if ( ! pFnPlayDamagePlayerDialog )
		pFnPlayDamagePlayerDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.PlayDamagePlayerDialog" );

	AKFAIController_ZedBoss_execPlayDamagePlayerDialog_Parms PlayDamagePlayerDialog_Parms;

	this->ProcessEvent ( pFnPlayDamagePlayerDialog, &PlayDamagePlayerDialog_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.UpdateSprintFrustration
// [0x00024000] 
// Parameters infos:

void AKFAIController_ZedBoss::UpdateSprintFrustration ( )
{
	static UFunction* pFnUpdateSprintFrustration = NULL;

	if ( ! pFnUpdateSprintFrustration )
		pFnUpdateSprintFrustration = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.UpdateSprintFrustration" );

	AKFAIController_ZedBoss_execUpdateSprintFrustration_Parms UpdateSprintFrustration_Parms;

	this->ProcessEvent ( pFnUpdateSprintFrustration, &UpdateSprintFrustration_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.SetEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedBoss::eventSetEnemy ( )
{
	static UFunction* pFnSetEnemy = NULL;

	if ( ! pFnSetEnemy )
		pFnSetEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.SetEnemy" );

	AKFAIController_ZedBoss_eventSetEnemy_Parms SetEnemy_Parms;

	this->ProcessEvent ( pFnSetEnemy, &SetEnemy_Parms, NULL );
};

// Function KFGame.KFAIController_ZedBoss.EnemyNotVisible
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedBoss::eventEnemyNotVisible ( )
{
	static UFunction* pFnEnemyNotVisible = NULL;

	if ( ! pFnEnemyNotVisible )
		pFnEnemyNotVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedBoss.EnemyNotVisible" );

	AKFAIController_ZedBoss_eventEnemyNotVisible_Parms EnemyNotVisible_Parms;

	this->ProcessEvent ( pFnEnemyNotVisible, &EnemyNotVisible_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.PlayDamagePlayerDialog
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::PlayDamagePlayerDialog ( )
{
	static UFunction* pFnPlayDamagePlayerDialog = NULL;

	if ( ! pFnPlayDamagePlayerDialog )
		pFnPlayDamagePlayerDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.PlayDamagePlayerDialog" );

	AKFAIController_Hans_execPlayDamagePlayerDialog_Parms PlayDamagePlayerDialog_Parms;

	this->ProcessEvent ( pFnPlayDamagePlayerDialog, &PlayDamagePlayerDialog_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.NotifyKilled
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::NotifyKilled ( )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.NotifyKilled" );

	AKFAIController_Hans_execNotifyKilled_Parms NotifyKilled_Parms;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.InitalizeBaseCommand
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::InitalizeBaseCommand ( )
{
	static UFunction* pFnInitalizeBaseCommand = NULL;

	if ( ! pFnInitalizeBaseCommand )
		pFnInitalizeBaseCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.InitalizeBaseCommand" );

	AKFAIController_Hans_execInitalizeBaseCommand_Parms InitalizeBaseCommand_Parms;

	this->ProcessEvent ( pFnInitalizeBaseCommand, &InitalizeBaseCommand_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.AmIAllowedToSuicideWhenStuck
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::AmIAllowedToSuicideWhenStuck ( )
{
	static UFunction* pFnAmIAllowedToSuicideWhenStuck = NULL;

	if ( ! pFnAmIAllowedToSuicideWhenStuck )
		pFnAmIAllowedToSuicideWhenStuck = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.AmIAllowedToSuicideWhenStuck" );

	AKFAIController_Hans_execAmIAllowedToSuicideWhenStuck_Parms AmIAllowedToSuicideWhenStuck_Parms;

	this->ProcessEvent ( pFnAmIAllowedToSuicideWhenStuck, &AmIAllowedToSuicideWhenStuck_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToProximityToTarget
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventEdgeAndPolySubRegionRejectedDueToProximityToTarget ( )
{
	static UFunction* pFnEdgeAndPolySubRegionRejectedDueToProximityToTarget = NULL;

	if ( ! pFnEdgeAndPolySubRegionRejectedDueToProximityToTarget )
		pFnEdgeAndPolySubRegionRejectedDueToProximityToTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToProximityToTarget" );

	AKFAIController_Hans_eventEdgeAndPolySubRegionRejectedDueToProximityToTarget_Parms EdgeAndPolySubRegionRejectedDueToProximityToTarget_Parms;

	this->ProcessEvent ( pFnEdgeAndPolySubRegionRejectedDueToProximityToTarget, &EdgeAndPolySubRegionRejectedDueToProximityToTarget_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToAdjustToss
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventEdgeAndPolySubRegionRejectedDueToAdjustToss ( )
{
	static UFunction* pFnEdgeAndPolySubRegionRejectedDueToAdjustToss = NULL;

	if ( ! pFnEdgeAndPolySubRegionRejectedDueToAdjustToss )
		pFnEdgeAndPolySubRegionRejectedDueToAdjustToss = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToAdjustToss" );

	AKFAIController_Hans_eventEdgeAndPolySubRegionRejectedDueToAdjustToss_Parms EdgeAndPolySubRegionRejectedDueToAdjustToss_Parms;

	this->ProcessEvent ( pFnEdgeAndPolySubRegionRejectedDueToAdjustToss, &EdgeAndPolySubRegionRejectedDueToAdjustToss_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToLOS
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventEdgeAndPolySubRegionRejectedDueToLOS ( )
{
	static UFunction* pFnEdgeAndPolySubRegionRejectedDueToLOS = NULL;

	if ( ! pFnEdgeAndPolySubRegionRejectedDueToLOS )
		pFnEdgeAndPolySubRegionRejectedDueToLOS = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToLOS" );

	AKFAIController_Hans_eventEdgeAndPolySubRegionRejectedDueToLOS_Parms EdgeAndPolySubRegionRejectedDueToLOS_Parms;

	this->ProcessEvent ( pFnEdgeAndPolySubRegionRejectedDueToLOS, &EdgeAndPolySubRegionRejectedDueToLOS_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.EntireEdgeAndPolyRejectedDueToRating
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventEntireEdgeAndPolyRejectedDueToRating ( )
{
	static UFunction* pFnEntireEdgeAndPolyRejectedDueToRating = NULL;

	if ( ! pFnEntireEdgeAndPolyRejectedDueToRating )
		pFnEntireEdgeAndPolyRejectedDueToRating = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.EntireEdgeAndPolyRejectedDueToRating" );

	AKFAIController_Hans_eventEntireEdgeAndPolyRejectedDueToRating_Parms EntireEdgeAndPolyRejectedDueToRating_Parms;

	this->ProcessEvent ( pFnEntireEdgeAndPolyRejectedDueToRating, &EntireEdgeAndPolyRejectedDueToRating_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToRating
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventEdgeAndPolySubRegionRejectedDueToRating ( )
{
	static UFunction* pFnEdgeAndPolySubRegionRejectedDueToRating = NULL;

	if ( ! pFnEdgeAndPolySubRegionRejectedDueToRating )
		pFnEdgeAndPolySubRegionRejectedDueToRating = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToRating" );

	AKFAIController_Hans_eventEdgeAndPolySubRegionRejectedDueToRating_Parms EdgeAndPolySubRegionRejectedDueToRating_Parms;

	this->ProcessEvent ( pFnEdgeAndPolySubRegionRejectedDueToRating, &EdgeAndPolySubRegionRejectedDueToRating_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToDist
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventEdgeAndPolySubRegionRejectedDueToDist ( )
{
	static UFunction* pFnEdgeAndPolySubRegionRejectedDueToDist = NULL;

	if ( ! pFnEdgeAndPolySubRegionRejectedDueToDist )
		pFnEdgeAndPolySubRegionRejectedDueToDist = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.EdgeAndPolySubRegionRejectedDueToDist" );

	AKFAIController_Hans_eventEdgeAndPolySubRegionRejectedDueToDist_Parms EdgeAndPolySubRegionRejectedDueToDist_Parms;

	this->ProcessEvent ( pFnEdgeAndPolySubRegionRejectedDueToDist, &EdgeAndPolySubRegionRejectedDueToDist_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.CanDoStrike
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::CanDoStrike ( )
{
	static UFunction* pFnCanDoStrike = NULL;

	if ( ! pFnCanDoStrike )
		pFnCanDoStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.CanDoStrike" );

	AKFAIController_Hans_execCanDoStrike_Parms CanDoStrike_Parms;

	this->ProcessEvent ( pFnCanDoStrike, &CanDoStrike_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DoHeavyZedBump
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::DoHeavyZedBump ( )
{
	static UFunction* pFnDoHeavyZedBump = NULL;

	if ( ! pFnDoHeavyZedBump )
		pFnDoHeavyZedBump = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DoHeavyZedBump" );

	AKFAIController_Hans_execDoHeavyZedBump_Parms DoHeavyZedBump_Parms;

	this->ProcessEvent ( pFnDoHeavyZedBump, &DoHeavyZedBump_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DoGrabAttack
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventDoGrabAttack ( )
{
	static UFunction* pFnDoGrabAttack = NULL;

	if ( ! pFnDoGrabAttack )
		pFnDoGrabAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DoGrabAttack" );

	AKFAIController_Hans_eventDoGrabAttack_Parms DoGrabAttack_Parms;

	this->ProcessEvent ( pFnDoGrabAttack, &DoGrabAttack_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.CanTargetBeGrabbed
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::CanTargetBeGrabbed ( )
{
	static UFunction* pFnCanTargetBeGrabbed = NULL;

	if ( ! pFnCanTargetBeGrabbed )
		pFnCanTargetBeGrabbed = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.CanTargetBeGrabbed" );

	AKFAIController_Hans_execCanTargetBeGrabbed_Parms CanTargetBeGrabbed_Parms;

	this->ProcessEvent ( pFnCanTargetBeGrabbed, &CanTargetBeGrabbed_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.CanGrabAttack
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventCanGrabAttack ( )
{
	static UFunction* pFnCanGrabAttack = NULL;

	if ( ! pFnCanGrabAttack )
		pFnCanGrabAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.CanGrabAttack" );

	AKFAIController_Hans_eventCanGrabAttack_Parms CanGrabAttack_Parms;

	this->ProcessEvent ( pFnCanGrabAttack, &CanGrabAttack_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.CancelFlee
// [0x00024002] 
// Parameters infos:

void AKFAIController_Hans::CancelFlee ( )
{
	static UFunction* pFnCancelFlee = NULL;

	if ( ! pFnCancelFlee )
		pFnCancelFlee = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.CancelFlee" );

	AKFAIController_Hans_execCancelFlee_Parms CancelFlee_Parms;

	this->ProcessEvent ( pFnCancelFlee, &CancelFlee_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.NotifyFleeFinished
// [0x00024002] 
// Parameters infos:

void AKFAIController_Hans::NotifyFleeFinished ( )
{
	static UFunction* pFnNotifyFleeFinished = NULL;

	if ( ! pFnNotifyFleeFinished )
		pFnNotifyFleeFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.NotifyFleeFinished" );

	AKFAIController_Hans_execNotifyFleeFinished_Parms NotifyFleeFinished_Parms;

	this->ProcessEvent ( pFnNotifyFleeFinished, &NotifyFleeFinished_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.NotifyCommandFinished
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::NotifyCommandFinished ( )
{
	static UFunction* pFnNotifyCommandFinished = NULL;

	if ( ! pFnNotifyCommandFinished )
		pFnNotifyCommandFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.NotifyCommandFinished" );

	AKFAIController_Hans_execNotifyCommandFinished_Parms NotifyCommandFinished_Parms;

	this->ProcessEvent ( pFnNotifyCommandFinished, &NotifyCommandFinished_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.Timer_SearchForFleeObstructions
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::Timer_SearchForFleeObstructions ( )
{
	static UFunction* pFnTimer_SearchForFleeObstructions = NULL;

	if ( ! pFnTimer_SearchForFleeObstructions )
		pFnTimer_SearchForFleeObstructions = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.Timer_SearchForFleeObstructions" );

	AKFAIController_Hans_execTimer_SearchForFleeObstructions_Parms Timer_SearchForFleeObstructions_Parms;

	this->ProcessEvent ( pFnTimer_SearchForFleeObstructions, &Timer_SearchForFleeObstructions_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.Flee
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::Flee ( )
{
	static UFunction* pFnFlee = NULL;

	if ( ! pFnFlee )
		pFnFlee = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.Flee" );

	AKFAIController_Hans_execFlee_Parms Flee_Parms;

	this->ProcessEvent ( pFnFlee, &Flee_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DoFleeFrom
// [0x00024002] 
// Parameters infos:

void AKFAIController_Hans::DoFleeFrom ( )
{
	static UFunction* pFnDoFleeFrom = NULL;

	if ( ! pFnDoFleeFrom )
		pFnDoFleeFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DoFleeFrom" );

	AKFAIController_Hans_execDoFleeFrom_Parms DoFleeFrom_Parms;

	this->ProcessEvent ( pFnDoFleeFrom, &DoFleeFrom_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.CanSwitchEnemies
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::CanSwitchEnemies ( )
{
	static UFunction* pFnCanSwitchEnemies = NULL;

	if ( ! pFnCanSwitchEnemies )
		pFnCanSwitchEnemies = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.CanSwitchEnemies" );

	AKFAIController_Hans_execCanSwitchEnemies_Parms CanSwitchEnemies_Parms;

	this->ProcessEvent ( pFnCanSwitchEnemies, &CanSwitchEnemies_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.NextBattlePhase
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::NextBattlePhase ( )
{
	static UFunction* pFnNextBattlePhase = NULL;

	if ( ! pFnNextBattlePhase )
		pFnNextBattlePhase = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.NextBattlePhase" );

	AKFAIController_Hans_execNextBattlePhase_Parms NextBattlePhase_Parms;

	this->ProcessEvent ( pFnNextBattlePhase, &NextBattlePhase_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DoorFinished
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::DoorFinished ( )
{
	static UFunction* pFnDoorFinished = NULL;

	if ( ! pFnDoorFinished )
		pFnDoorFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DoorFinished" );

	AKFAIController_Hans_execDoorFinished_Parms DoorFinished_Parms;

	this->ProcessEvent ( pFnDoorFinished, &DoorFinished_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.NotifyAttackDoor
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::NotifyAttackDoor ( )
{
	static UFunction* pFnNotifyAttackDoor = NULL;

	if ( ! pFnNotifyAttackDoor )
		pFnNotifyAttackDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.NotifyAttackDoor" );

	AKFAIController_Hans_execNotifyAttackDoor_Parms NotifyAttackDoor_Parms;

	this->ProcessEvent ( pFnNotifyAttackDoor, &NotifyAttackDoor_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.CanAttackDestructibles
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::CanAttackDestructibles ( )
{
	static UFunction* pFnCanAttackDestructibles = NULL;

	if ( ! pFnCanAttackDestructibles )
		pFnCanAttackDestructibles = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.CanAttackDestructibles" );

	AKFAIController_Hans_execCanAttackDestructibles_Parms CanAttackDestructibles_Parms;

	this->ProcessEvent ( pFnCanAttackDestructibles, &CanAttackDestructibles_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.IsWithinAttackRange
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::IsWithinAttackRange ( )
{
	static UFunction* pFnIsWithinAttackRange = NULL;

	if ( ! pFnIsWithinAttackRange )
		pFnIsWithinAttackRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.IsWithinAttackRange" );

	AKFAIController_Hans_execIsWithinAttackRange_Parms IsWithinAttackRange_Parms;

	this->ProcessEvent ( pFnIsWithinAttackRange, &IsWithinAttackRange_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DoStrike
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::DoStrike ( )
{
	static UFunction* pFnDoStrike = NULL;

	if ( ! pFnDoStrike )
		pFnDoStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DoStrike" );

	AKFAIController_Hans_execDoStrike_Parms DoStrike_Parms;

	this->ProcessEvent ( pFnDoStrike, &DoStrike_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.SetupGrenadeAttack
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::SetupGrenadeAttack ( )
{
	static UFunction* pFnSetupGrenadeAttack = NULL;

	if ( ! pFnSetupGrenadeAttack )
		pFnSetupGrenadeAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.SetupGrenadeAttack" );

	AKFAIController_Hans_execSetupGrenadeAttack_Parms SetupGrenadeAttack_Parms;

	this->ProcessEvent ( pFnSetupGrenadeAttack, &SetupGrenadeAttack_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.GrenadeAttackInterruptGuns
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::GrenadeAttackInterruptGuns ( )
{
	static UFunction* pFnGrenadeAttackInterruptGuns = NULL;

	if ( ! pFnGrenadeAttackInterruptGuns )
		pFnGrenadeAttackInterruptGuns = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.GrenadeAttackInterruptGuns" );

	AKFAIController_Hans_execGrenadeAttackInterruptGuns_Parms GrenadeAttackInterruptGuns_Parms;

	this->ProcessEvent ( pFnGrenadeAttackInterruptGuns, &GrenadeAttackInterruptGuns_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DrawRangedAttackInfo
// [0x00820002] 
// Parameters infos:

void AKFAIController_Hans::DrawRangedAttackInfo ( )
{
	static UFunction* pFnDrawRangedAttackInfo = NULL;

	if ( ! pFnDrawRangedAttackInfo )
		pFnDrawRangedAttackInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DrawRangedAttackInfo" );

	AKFAIController_Hans_execDrawRangedAttackInfo_Parms DrawRangedAttackInfo_Parms;

	this->ProcessEvent ( pFnDrawRangedAttackInfo, &DrawRangedAttackInfo_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.TickGunSystem
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::TickGunSystem ( )
{
	static UFunction* pFnTickGunSystem = NULL;

	if ( ! pFnTickGunSystem )
		pFnTickGunSystem = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.TickGunSystem" );

	AKFAIController_Hans_execTickGunSystem_Parms TickGunSystem_Parms;

	this->ProcessEvent ( pFnTickGunSystem, &TickGunSystem_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.TickRangedCombatDecision
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::TickRangedCombatDecision ( )
{
	static UFunction* pFnTickRangedCombatDecision = NULL;

	if ( ! pFnTickRangedCombatDecision )
		pFnTickRangedCombatDecision = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.TickRangedCombatDecision" );

	AKFAIController_Hans_execTickRangedCombatDecision_Parms TickRangedCombatDecision_Parms;

	this->ProcessEvent ( pFnTickRangedCombatDecision, &TickRangedCombatDecision_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.Tick
// [0x00020102] 
// Parameters infos:

void AKFAIController_Hans::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.Tick" );

	AKFAIController_Hans_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.CanStanceChange
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::CanStanceChange ( )
{
	static UFunction* pFnCanStanceChange = NULL;

	if ( ! pFnCanStanceChange )
		pFnCanStanceChange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.CanStanceChange" );

	AKFAIController_Hans_execCanStanceChange_Parms CanStanceChange_Parms;

	this->ProcessEvent ( pFnCanStanceChange, &CanStanceChange_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.CanPerformShotAttack
// [0x00024002] 
// Parameters infos:

void AKFAIController_Hans::CanPerformShotAttack ( )
{
	static UFunction* pFnCanPerformShotAttack = NULL;

	if ( ! pFnCanPerformShotAttack )
		pFnCanPerformShotAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.CanPerformShotAttack" );

	AKFAIController_Hans_execCanPerformShotAttack_Parms CanPerformShotAttack_Parms;

	this->ProcessEvent ( pFnCanPerformShotAttack, &CanPerformShotAttack_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.StartFireTiming
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::StartFireTiming ( )
{
	static UFunction* pFnStartFireTiming = NULL;

	if ( ! pFnStartFireTiming )
		pFnStartFireTiming = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.StartFireTiming" );

	AKFAIController_Hans_execStartFireTiming_Parms StartFireTiming_Parms;

	this->ProcessEvent ( pFnStartFireTiming, &StartFireTiming_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.GetAimingLocation
// [0x00820002] 
// Parameters infos:

void AKFAIController_Hans::GetAimingLocation ( )
{
	static UFunction* pFnGetAimingLocation = NULL;

	if ( ! pFnGetAimingLocation )
		pFnGetAimingLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.GetAimingLocation" );

	AKFAIController_Hans_execGetAimingLocation_Parms GetAimingLocation_Parms;

	this->ProcessEvent ( pFnGetAimingLocation, &GetAimingLocation_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.SelectNewGunFireEnemy
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::SelectNewGunFireEnemy ( )
{
	static UFunction* pFnSelectNewGunFireEnemy = NULL;

	if ( ! pFnSelectNewGunFireEnemy )
		pFnSelectNewGunFireEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.SelectNewGunFireEnemy" );

	AKFAIController_Hans_execSelectNewGunFireEnemy_Parms SelectNewGunFireEnemy_Parms;

	this->ProcessEvent ( pFnSelectNewGunFireEnemy, &SelectNewGunFireEnemy_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.ChangeEnemy
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventChangeEnemy ( )
{
	static UFunction* pFnChangeEnemy = NULL;

	if ( ! pFnChangeEnemy )
		pFnChangeEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.ChangeEnemy" );

	AKFAIController_Hans_eventChangeEnemy_Parms ChangeEnemy_Parms;

	this->ProcessEvent ( pFnChangeEnemy, &ChangeEnemy_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.SetEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventSetEnemy ( )
{
	static UFunction* pFnSetEnemy = NULL;

	if ( ! pFnSetEnemy )
		pFnSetEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.SetEnemy" );

	AKFAIController_Hans_eventSetEnemy_Parms SetEnemy_Parms;

	this->ProcessEvent ( pFnSetEnemy, &SetEnemy_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.ClearFireTiming
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::ClearFireTiming ( )
{
	static UFunction* pFnClearFireTiming = NULL;

	if ( ! pFnClearFireTiming )
		pFnClearFireTiming = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.ClearFireTiming" );

	AKFAIController_Hans_execClearFireTiming_Parms ClearFireTiming_Parms;

	this->ProcessEvent ( pFnClearFireTiming, &ClearFireTiming_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.FireTimer
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::FireTimer ( )
{
	static UFunction* pFnFireTimer = NULL;

	if ( ! pFnFireTimer )
		pFnFireTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.FireTimer" );

	AKFAIController_Hans_execFireTimer_Parms FireTimer_Parms;

	this->ProcessEvent ( pFnFireTimer, &FireTimer_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.ShouldSprint" );

	AKFAIController_Hans_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DoNerveGasGrenadeThrow
// [0x00024002] 
// Parameters infos:

void AKFAIController_Hans::DoNerveGasGrenadeThrow ( )
{
	static UFunction* pFnDoNerveGasGrenadeThrow = NULL;

	if ( ! pFnDoNerveGasGrenadeThrow )
		pFnDoNerveGasGrenadeThrow = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DoNerveGasGrenadeThrow" );

	AKFAIController_Hans_execDoNerveGasGrenadeThrow_Parms DoNerveGasGrenadeThrow_Parms;

	this->ProcessEvent ( pFnDoNerveGasGrenadeThrow, &DoNerveGasGrenadeThrow_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.Timer_DoHuntAndHealSmokeGrenadeThrow
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::Timer_DoHuntAndHealSmokeGrenadeThrow ( )
{
	static UFunction* pFnTimer_DoHuntAndHealSmokeGrenadeThrow = NULL;

	if ( ! pFnTimer_DoHuntAndHealSmokeGrenadeThrow )
		pFnTimer_DoHuntAndHealSmokeGrenadeThrow = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.Timer_DoHuntAndHealSmokeGrenadeThrow" );

	AKFAIController_Hans_execTimer_DoHuntAndHealSmokeGrenadeThrow_Parms Timer_DoHuntAndHealSmokeGrenadeThrow_Parms;

	this->ProcessEvent ( pFnTimer_DoHuntAndHealSmokeGrenadeThrow, &Timer_DoHuntAndHealSmokeGrenadeThrow_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.SeePlayer
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventSeePlayer ( )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.SeePlayer" );

	AKFAIController_Hans_eventSeePlayer_Parms SeePlayer_Parms;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.EvaluateSprinting
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::EvaluateSprinting ( )
{
	static UFunction* pFnEvaluateSprinting = NULL;

	if ( ! pFnEvaluateSprinting )
		pFnEvaluateSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.EvaluateSprinting" );

	AKFAIController_Hans_execEvaluateSprinting_Parms EvaluateSprinting_Parms;

	this->ProcessEvent ( pFnEvaluateSprinting, &EvaluateSprinting_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.NotifySpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.NotifySpecialMoveEnded" );

	AKFAIController_Hans_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.NotifyTakeHit" );

	AKFAIController_Hans_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DoSmokeGrenadeThrow
// [0x00024002] 
// Parameters infos:

void AKFAIController_Hans::DoSmokeGrenadeThrow ( )
{
	static UFunction* pFnDoSmokeGrenadeThrow = NULL;

	if ( ! pFnDoSmokeGrenadeThrow )
		pFnDoSmokeGrenadeThrow = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DoSmokeGrenadeThrow" );

	AKFAIController_Hans_execDoSmokeGrenadeThrow_Parms DoSmokeGrenadeThrow_Parms;

	this->ProcessEvent ( pFnDoSmokeGrenadeThrow, &DoSmokeGrenadeThrow_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.DoGrenadeThrow
// [0x00024002] 
// Parameters infos:

void AKFAIController_Hans::DoGrenadeThrow ( )
{
	static UFunction* pFnDoGrenadeThrow = NULL;

	if ( ! pFnDoGrenadeThrow )
		pFnDoGrenadeThrow = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.DoGrenadeThrow" );

	AKFAIController_Hans_execDoGrenadeThrow_Parms DoGrenadeThrow_Parms;

	this->ProcessEvent ( pFnDoGrenadeThrow, &DoGrenadeThrow_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.Destroyed" );

	AKFAIController_Hans_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.PawnDied
// [0x00020002] 
// Parameters infos:

void AKFAIController_Hans::PawnDied ( )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.PawnDied" );

	AKFAIController_Hans_execPawnDied_Parms PawnDied_Parms;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function KFGame.KFAIController_Hans.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_Hans::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_Hans.Possess" );

	AKFAIController_Hans_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function KFGame.KFAIController_ZedClot.DoGrabAttack
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedClot::eventDoGrabAttack ( )
{
	static UFunction* pFnDoGrabAttack = NULL;

	if ( ! pFnDoGrabAttack )
		pFnDoGrabAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedClot.DoGrabAttack" );

	AKFAIController_ZedClot_eventDoGrabAttack_Parms DoGrabAttack_Parms;

	this->ProcessEvent ( pFnDoGrabAttack, &DoGrabAttack_Parms, NULL );
};

// Function KFGame.KFAIController_ZedClot.CanDoStrike
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot::CanDoStrike ( )
{
	static UFunction* pFnCanDoStrike = NULL;

	if ( ! pFnCanDoStrike )
		pFnCanDoStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedClot.CanDoStrike" );

	AKFAIController_ZedClot_execCanDoStrike_Parms CanDoStrike_Parms;

	this->ProcessEvent ( pFnCanDoStrike, &CanDoStrike_Parms, NULL );
};

// Function KFGame.KFAIController_ZedClot.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedClot.ShouldSprint" );

	AKFAIController_ZedClot_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function KFGame.KFAIController_ZedCrawler.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedCrawler::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedCrawler.ShouldSprint" );

	AKFAIController_ZedCrawler_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function KFGame.KFAIController_ZedCrawler.AmIAllowedToStillUsePathNodes
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedCrawler::AmIAllowedToStillUsePathNodes ( )
{
	static UFunction* pFnAmIAllowedToStillUsePathNodes = NULL;

	if ( ! pFnAmIAllowedToStillUsePathNodes )
		pFnAmIAllowedToStillUsePathNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedCrawler.AmIAllowedToStillUsePathNodes" );

	AKFAIController_ZedCrawler_execAmIAllowedToStillUsePathNodes_Parms AmIAllowedToStillUsePathNodes_Parms;

	this->ProcessEvent ( pFnAmIAllowedToStillUsePathNodes, &AmIAllowedToStillUsePathNodes_Parms, NULL );
};

// Function KFGame.KFAIController_ZedCrawler.Timer_ResetFailedToFindAnchorCount
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedCrawler::Timer_ResetFailedToFindAnchorCount ( )
{
	static UFunction* pFnTimer_ResetFailedToFindAnchorCount = NULL;

	if ( ! pFnTimer_ResetFailedToFindAnchorCount )
		pFnTimer_ResetFailedToFindAnchorCount = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedCrawler.Timer_ResetFailedToFindAnchorCount" );

	AKFAIController_ZedCrawler_execTimer_ResetFailedToFindAnchorCount_Parms Timer_ResetFailedToFindAnchorCount_Parms;

	this->ProcessEvent ( pFnTimer_ResetFailedToFindAnchorCount, &Timer_ResetFailedToFindAnchorCount_Parms, NULL );
};

// Function KFGame.KFAIController_ZedCrawler.FailedToFindAnchor
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedCrawler::eventFailedToFindAnchor ( )
{
	static UFunction* pFnFailedToFindAnchor = NULL;

	if ( ! pFnFailedToFindAnchor )
		pFnFailedToFindAnchor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ZedCrawler.FailedToFindAnchor" );

	AKFAIController_ZedCrawler_eventFailedToFindAnchor_Parms FailedToFindAnchor_Parms;

	this->ProcessEvent ( pFnFailedToFindAnchor, &FailedToFindAnchor_Parms, NULL );
};

// Function KFGame.KFAIDirector.GetActiveBoss
// [0x00020002] 
// Parameters infos:

void UKFAIDirector::GetActiveBoss ( )
{
	static UFunction* pFnGetActiveBoss = NULL;

	if ( ! pFnGetActiveBoss )
		pFnGetActiveBoss = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.GetActiveBoss" );

	UKFAIDirector_execGetActiveBoss_Parms GetActiveBoss_Parms;

	this->ProcessEvent ( pFnGetActiveBoss, &GetActiveBoss_Parms, NULL );
};

// Function KFGame.KFAIDirector.FindClosedDoorsWithInRange
// [0x00020002] 
// Parameters infos:

void UKFAIDirector::FindClosedDoorsWithInRange ( )
{
	static UFunction* pFnFindClosedDoorsWithInRange = NULL;

	if ( ! pFnFindClosedDoorsWithInRange )
		pFnFindClosedDoorsWithInRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.FindClosedDoorsWithInRange" );

	UKFAIDirector_execFindClosedDoorsWithInRange_Parms FindClosedDoorsWithInRange_Parms;

	this->ProcessEvent ( pFnFindClosedDoorsWithInRange, &FindClosedDoorsWithInRange_Parms, NULL );
};

// Function KFGame.KFAIDirector.ClosestDoorSort
// [0x00120002] 
// Parameters infos:

void UKFAIDirector::ClosestDoorSort ( )
{
	static UFunction* pFnClosestDoorSort = NULL;

	if ( ! pFnClosestDoorSort )
		pFnClosestDoorSort = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.ClosestDoorSort" );

	UKFAIDirector_execClosestDoorSort_Parms ClosestDoorSort_Parms;

	this->ProcessEvent ( pFnClosestDoorSort, &ClosestDoorSort_Parms, NULL );
};

// Function KFGame.KFAIDirector.FindDoorsWithInRange
// [0x00820002] 
// Parameters infos:

void UKFAIDirector::FindDoorsWithInRange ( )
{
	static UFunction* pFnFindDoorsWithInRange = NULL;

	if ( ! pFnFindDoorsWithInRange )
		pFnFindDoorsWithInRange = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.FindDoorsWithInRange" );

	UKFAIDirector_execFindDoorsWithInRange_Parms FindDoorsWithInRange_Parms;

	this->ProcessEvent ( pFnFindDoorsWithInRange, &FindDoorsWithInRange_Parms, NULL );
};

// Function KFGame.KFAIDirector.NotifyPawnGrabbed
// [0x00020002] 
// Parameters infos:

void UKFAIDirector::NotifyPawnGrabbed ( )
{
	static UFunction* pFnNotifyPawnGrabbed = NULL;

	if ( ! pFnNotifyPawnGrabbed )
		pFnNotifyPawnGrabbed = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.NotifyPawnGrabbed" );

	UKFAIDirector_execNotifyPawnGrabbed_Parms NotifyPawnGrabbed_Parms;

	this->ProcessEvent ( pFnNotifyPawnGrabbed, &NotifyPawnGrabbed_Parms, NULL );
};

// Function KFGame.KFAIDirector.FindEnemyFor
// [0x00024002] 
// Parameters infos:

void UKFAIDirector::FindEnemyFor ( )
{
	static UFunction* pFnFindEnemyFor = NULL;

	if ( ! pFnFindEnemyFor )
		pFnFindEnemyFor = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.FindEnemyFor" );

	UKFAIDirector_execFindEnemyFor_Parms FindEnemyFor_Parms;

	this->ProcessEvent ( pFnFindEnemyFor, &FindEnemyFor_Parms, NULL );
};

// Function KFGame.KFAIDirector.UnRegisterAIMember
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFAIDirector::UnRegisterAIMember ( )
{
	static UFunction* pFnUnRegisterAIMember = NULL;

	if ( ! pFnUnRegisterAIMember )
		pFnUnRegisterAIMember = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.UnRegisterAIMember" );

	UKFAIDirector_execUnRegisterAIMember_Parms UnRegisterAIMember_Parms;

	this->ProcessEvent ( pFnUnRegisterAIMember, &UnRegisterAIMember_Parms, NULL );
};

// Function KFGame.KFAIDirector.RegisterAIMember
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFAIDirector::RegisterAIMember ( )
{
	static UFunction* pFnRegisterAIMember = NULL;

	if ( ! pFnRegisterAIMember )
		pFnRegisterAIMember = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.RegisterAIMember" );

	UKFAIDirector_execRegisterAIMember_Parms RegisterAIMember_Parms;

	this->ProcessEvent ( pFnRegisterAIMember, &RegisterAIMember_Parms, NULL );
};

// Function KFGame.KFAIDirector.NotifyNewPossess
// [0x00020002] 
// Parameters infos:

void UKFAIDirector::NotifyNewPossess ( )
{
	static UFunction* pFnNotifyNewPossess = NULL;

	if ( ! pFnNotifyNewPossess )
		pFnNotifyNewPossess = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.NotifyNewPossess" );

	UKFAIDirector_execNotifyNewPossess_Parms NotifyNewPossess_Parms;

	this->ProcessEvent ( pFnNotifyNewPossess, &NotifyNewPossess_Parms, NULL );
};

// Function KFGame.KFAIDirector.GetDebugIsWalkingIcon
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFAIDirector::GetDebugIsWalkingIcon ( )
{
	static UFunction* pFnGetDebugIsWalkingIcon = NULL;

	if ( ! pFnGetDebugIsWalkingIcon )
		pFnGetDebugIsWalkingIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.GetDebugIsWalkingIcon" );

	UKFAIDirector_execGetDebugIsWalkingIcon_Parms GetDebugIsWalkingIcon_Parms;

	this->ProcessEvent ( pFnGetDebugIsWalkingIcon, &GetDebugIsWalkingIcon_Parms, NULL );
};

// Function KFGame.KFAIDirector.GetDebugIsSprintingIcon
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFAIDirector::GetDebugIsSprintingIcon ( )
{
	static UFunction* pFnGetDebugIsSprintingIcon = NULL;

	if ( ! pFnGetDebugIsSprintingIcon )
		pFnGetDebugIsSprintingIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.GetDebugIsSprintingIcon" );

	UKFAIDirector_execGetDebugIsSprintingIcon_Parms GetDebugIsSprintingIcon_Parms;

	this->ProcessEvent ( pFnGetDebugIsSprintingIcon, &GetDebugIsSprintingIcon_Parms, NULL );
};

// Function KFGame.KFAIDirector.GetAiDebugScreenLargeFont
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFAIDirector::GetAiDebugScreenLargeFont ( )
{
	static UFunction* pFnGetAiDebugScreenLargeFont = NULL;

	if ( ! pFnGetAiDebugScreenLargeFont )
		pFnGetAiDebugScreenLargeFont = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.GetAiDebugScreenLargeFont" );

	UKFAIDirector_execGetAiDebugScreenLargeFont_Parms GetAiDebugScreenLargeFont_Parms;

	this->ProcessEvent ( pFnGetAiDebugScreenLargeFont, &GetAiDebugScreenLargeFont_Parms, NULL );
};

// Function KFGame.KFAIDirector.SetAIDebug
// [0x00020002] 
// Parameters infos:

void UKFAIDirector::SetAIDebug ( )
{
	static UFunction* pFnSetAIDebug = NULL;

	if ( ! pFnSetAIDebug )
		pFnSetAIDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.SetAIDebug" );

	UKFAIDirector_execSetAIDebug_Parms SetAIDebug_Parms;

	this->ProcessEvent ( pFnSetAIDebug, &SetAIDebug_Parms, NULL );
};

// Function KFGame.KFAIDirector.Initialize
// [0x00020002] 
// Parameters infos:

void UKFAIDirector::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.Initialize" );

	UKFAIDirector_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFAIDirector.LoadAiDebugResources
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAIDirector::LoadAiDebugResources ( )
{
	static UFunction* pFnLoadAiDebugResources = NULL;

	if ( ! pFnLoadAiDebugResources )
		pFnLoadAiDebugResources = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.LoadAiDebugResources" );

	UKFAIDirector_execLoadAiDebugResources_Parms LoadAiDebugResources_Parms;

	pFnLoadAiDebugResources->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadAiDebugResources, &LoadAiDebugResources_Parms, NULL );

	pFnLoadAiDebugResources->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIDirector.RebuildAIList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAIDirector::RebuildAIList ( )
{
	static UFunction* pFnRebuildAIList = NULL;

	if ( ! pFnRebuildAIList )
		pFnRebuildAIList = UObject::FindObject< UFunction > ( "Function KFGame.KFAIDirector.RebuildAIList" );

	UKFAIDirector_execRebuildAIList_Parms RebuildAIList_Parms;

	pFnRebuildAIList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRebuildAIList, &RebuildAIList_Parms, NULL );

	pFnRebuildAIList->FunctionFlags |= 0x400;
};

// Function KFGame.KFAIPluginRage_Fleshpound.EndRage
// [0x00020002] 
// Parameters infos:

void UKFAIPluginRage_Fleshpound::EndRage ( )
{
	static UFunction* pFnEndRage = NULL;

	if ( ! pFnEndRage )
		pFnEndRage = UObject::FindObject< UFunction > ( "Function KFGame.KFAIPluginRage_Fleshpound.EndRage" );

	UKFAIPluginRage_Fleshpound_execEndRage_Parms EndRage_Parms;

	this->ProcessEvent ( pFnEndRage, &EndRage_Parms, NULL );
};

// Function KFGame.KFAIPluginRage_Fleshpound.SetRageTime
// [0x00020002] 
// Parameters infos:

void UKFAIPluginRage_Fleshpound::SetRageTime ( )
{
	static UFunction* pFnSetRageTime = NULL;

	if ( ! pFnSetRageTime )
		pFnSetRageTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAIPluginRage_Fleshpound.SetRageTime" );

	UKFAIPluginRage_Fleshpound_execSetRageTime_Parms SetRageTime_Parms;

	this->ProcessEvent ( pFnSetRageTime, &SetRageTime_Parms, NULL );
};

// Function KFGame.KFAIPluginRage_Fleshpound.StartRageTimer
// [0x00024002] 
// Parameters infos:

void UKFAIPluginRage_Fleshpound::StartRageTimer ( )
{
	static UFunction* pFnStartRageTimer = NULL;

	if ( ! pFnStartRageTimer )
		pFnStartRageTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAIPluginRage_Fleshpound.StartRageTimer" );

	UKFAIPluginRage_Fleshpound_execStartRageTimer_Parms StartRageTimer_Parms;

	this->ProcessEvent ( pFnStartRageTimer, &StartRageTimer_Parms, NULL );
};

// Function KFGame.KFAIPluginRage_Fleshpound.CanDoRage
// [0x00020002] 
// Parameters infos:

void UKFAIPluginRage_Fleshpound::CanDoRage ( )
{
	static UFunction* pFnCanDoRage = NULL;

	if ( ! pFnCanDoRage )
		pFnCanDoRage = UObject::FindObject< UFunction > ( "Function KFGame.KFAIPluginRage_Fleshpound.CanDoRage" );

	UKFAIPluginRage_Fleshpound_execCanDoRage_Parms CanDoRage_Parms;

	this->ProcessEvent ( pFnCanDoRage, &CanDoRage_Parms, NULL );
};

// Function KFGame.KFAIPluginRage_Fleshpound.DoSpawnRage
// [0x00020002] 
// Parameters infos:

void UKFAIPluginRage_Fleshpound::DoSpawnRage ( )
{
	static UFunction* pFnDoSpawnRage = NULL;

	if ( ! pFnDoSpawnRage )
		pFnDoSpawnRage = UObject::FindObject< UFunction > ( "Function KFGame.KFAIPluginRage_Fleshpound.DoSpawnRage" );

	UKFAIPluginRage_Fleshpound_execDoSpawnRage_Parms DoSpawnRage_Parms;

	this->ProcessEvent ( pFnDoSpawnRage, &DoSpawnRage_Parms, NULL );
};

// Function KFGame.KFAIPluginRage_Fleshpound.TickRage
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFAIPluginRage_Fleshpound::eventTickRage ( )
{
	static UFunction* pFnTickRage = NULL;

	if ( ! pFnTickRage )
		pFnTickRage = UObject::FindObject< UFunction > ( "Function KFGame.KFAIPluginRage_Fleshpound.TickRage" );

	UKFAIPluginRage_Fleshpound_eventTickRage_Parms TickRage_Parms;

	this->ProcessEvent ( pFnTickRage, &TickRage_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.ResetSpawnManager
// [0x00020000] 
// Parameters infos:

void UKFAISpawnManager::ResetSpawnManager ( )
{
	static UFunction* pFnResetSpawnManager = NULL;

	if ( ! pFnResetSpawnManager )
		pFnResetSpawnManager = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.ResetSpawnManager" );

	UKFAISpawnManager_execResetSpawnManager_Parms ResetSpawnManager_Parms;

	this->ProcessEvent ( pFnResetSpawnManager, &ResetSpawnManager_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.CanSpawnPlayerBoss
// [0x00080000] 
// Parameters infos:

void UKFAISpawnManager::CanSpawnPlayerBoss ( )
{
	static UFunction* pFnCanSpawnPlayerBoss = NULL;

	if ( ! pFnCanSpawnPlayerBoss )
		pFnCanSpawnPlayerBoss = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.CanSpawnPlayerBoss" );

	UKFAISpawnManager_execCanSpawnPlayerBoss_Parms CanSpawnPlayerBoss_Parms;

	this->ProcessEvent ( pFnCanSpawnPlayerBoss, &CanSpawnPlayerBoss_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.ResetSpawnCurveIntensity
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::ResetSpawnCurveIntensity ( )
{
	static UFunction* pFnResetSpawnCurveIntensity = NULL;

	if ( ! pFnResetSpawnCurveIntensity )
		pFnResetSpawnCurveIntensity = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.ResetSpawnCurveIntensity" );

	UKFAISpawnManager_execResetSpawnCurveIntensity_Parms ResetSpawnCurveIntensity_Parms;

	this->ProcessEvent ( pFnResetSpawnCurveIntensity, &ResetSpawnCurveIntensity_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.UpdateSpawnCurveIntensity
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::UpdateSpawnCurveIntensity ( )
{
	static UFunction* pFnUpdateSpawnCurveIntensity = NULL;

	if ( ! pFnUpdateSpawnCurveIntensity )
		pFnUpdateSpawnCurveIntensity = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.UpdateSpawnCurveIntensity" );

	UKFAISpawnManager_execUpdateSpawnCurveIntensity_Parms UpdateSpawnCurveIntensity_Parms;

	this->ProcessEvent ( pFnUpdateSpawnCurveIntensity, &UpdateSpawnCurveIntensity_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.NeedPlayerSpawnVolume
// [0x00020000] 
// Parameters infos:

void UKFAISpawnManager::NeedPlayerSpawnVolume ( )
{
	static UFunction* pFnNeedPlayerSpawnVolume = NULL;

	if ( ! pFnNeedPlayerSpawnVolume )
		pFnNeedPlayerSpawnVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.NeedPlayerSpawnVolume" );

	UKFAISpawnManager_execNeedPlayerSpawnVolume_Parms NeedPlayerSpawnVolume_Parms;

	this->ProcessEvent ( pFnNeedPlayerSpawnVolume, &NeedPlayerSpawnVolume_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetBestSpawnVolume
// [0x00024002] 
// Parameters infos:

void UKFAISpawnManager::GetBestSpawnVolume ( )
{
	static UFunction* pFnGetBestSpawnVolume = NULL;

	if ( ! pFnGetBestSpawnVolume )
		pFnGetBestSpawnVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetBestSpawnVolume" );

	UKFAISpawnManager_execGetBestSpawnVolume_Parms GetBestSpawnVolume_Parms;

	this->ProcessEvent ( pFnGetBestSpawnVolume, &GetBestSpawnVolume_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.InitControllerList
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::InitControllerList ( )
{
	static UFunction* pFnInitControllerList = NULL;

	if ( ! pFnInitControllerList )
		pFnInitControllerList = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.InitControllerList" );

	UKFAISpawnManager_execInitControllerList_Parms InitControllerList_Parms;

	this->ProcessEvent ( pFnInitControllerList, &InitControllerList_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetAIAliveCount
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::GetAIAliveCount ( )
{
	static UFunction* pFnGetAIAliveCount = NULL;

	if ( ! pFnGetAIAliveCount )
		pFnGetAIAliveCount = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetAIAliveCount" );

	UKFAISpawnManager_execGetAIAliveCount_Parms GetAIAliveCount_Parms;

	this->ProcessEvent ( pFnGetAIAliveCount, &GetAIAliveCount_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetNumAINeeded
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::GetNumAINeeded ( )
{
	static UFunction* pFnGetNumAINeeded = NULL;

	if ( ! pFnGetNumAINeeded )
		pFnGetNumAINeeded = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetNumAINeeded" );

	UKFAISpawnManager_execGetNumAINeeded_Parms GetNumAINeeded_Parms;

	this->ProcessEvent ( pFnGetNumAINeeded, &GetNumAINeeded_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetMaxMonsters
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::GetMaxMonsters ( )
{
	static UFunction* pFnGetMaxMonsters = NULL;

	if ( ! pFnGetMaxMonsters )
		pFnGetMaxMonsters = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetMaxMonsters" );

	UKFAISpawnManager_execGetMaxMonsters_Parms GetMaxMonsters_Parms;

	this->ProcessEvent ( pFnGetMaxMonsters, &GetMaxMonsters_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.ShouldAddAI
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::ShouldAddAI ( )
{
	static UFunction* pFnShouldAddAI = NULL;

	if ( ! pFnShouldAddAI )
		pFnShouldAddAI = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.ShouldAddAI" );

	UKFAISpawnManager_execShouldAddAI_Parms ShouldAddAI_Parms;

	this->ProcessEvent ( pFnShouldAddAI, &ShouldAddAI_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.Update
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::Update ( )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.Update" );

	UKFAISpawnManager_execUpdate_Parms Update_Parms;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.RecordSpawnInformation
// [0x00820002] 
// Parameters infos:

void UKFAISpawnManager::RecordSpawnInformation ( )
{
	static UFunction* pFnRecordSpawnInformation = NULL;

	if ( ! pFnRecordSpawnInformation )
		pFnRecordSpawnInformation = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.RecordSpawnInformation" );

	UKFAISpawnManager_execRecordSpawnInformation_Parms RecordSpawnInformation_Parms;

	this->ProcessEvent ( pFnRecordSpawnInformation, &RecordSpawnInformation_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.SpawnSquad
// [0x00424002] 
// Parameters infos:

void UKFAISpawnManager::SpawnSquad ( )
{
	static UFunction* pFnSpawnSquad = NULL;

	if ( ! pFnSpawnSquad )
		pFnSpawnSquad = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.SpawnSquad" );

	UKFAISpawnManager_execSpawnSquad_Parms SpawnSquad_Parms;

	this->ProcessEvent ( pFnSpawnSquad, &SpawnSquad_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.StopSummoningBossMinions
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::StopSummoningBossMinions ( )
{
	static UFunction* pFnStopSummoningBossMinions = NULL;

	if ( ! pFnStopSummoningBossMinions )
		pFnStopSummoningBossMinions = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.StopSummoningBossMinions" );

	UKFAISpawnManager_execStopSummoningBossMinions_Parms StopSummoningBossMinions_Parms;

	this->ProcessEvent ( pFnStopSummoningBossMinions, &StopSummoningBossMinions_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.SummonBossMinions
// [0x00024002] 
// Parameters infos:

void UKFAISpawnManager::SummonBossMinions ( )
{
	static UFunction* pFnSummonBossMinions = NULL;

	if ( ! pFnSummonBossMinions )
		pFnSummonBossMinions = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.SummonBossMinions" );

	UKFAISpawnManager_execSummonBossMinions_Parms SummonBossMinions_Parms;

	this->ProcessEvent ( pFnSummonBossMinions, &SummonBossMinions_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.SetSineWaveFreq
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::SetSineWaveFreq ( )
{
	static UFunction* pFnSetSineWaveFreq = NULL;

	if ( ! pFnSetSineWaveFreq )
		pFnSetSineWaveFreq = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.SetSineWaveFreq" );

	UKFAISpawnManager_execSetSineWaveFreq_Parms SetSineWaveFreq_Parms;

	this->ProcessEvent ( pFnSetSineWaveFreq, &SetSineWaveFreq_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetSineWaveFreq
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::GetSineWaveFreq ( )
{
	static UFunction* pFnGetSineWaveFreq = NULL;

	if ( ! pFnGetSineWaveFreq )
		pFnGetSineWaveFreq = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetSineWaveFreq" );

	UKFAISpawnManager_execGetSineWaveFreq_Parms GetSineWaveFreq_Parms;

	this->ProcessEvent ( pFnGetSineWaveFreq, &GetSineWaveFreq_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetSineMod
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::GetSineMod ( )
{
	static UFunction* pFnGetSineMod = NULL;

	if ( ! pFnGetSineMod )
		pFnGetSineMod = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetSineMod" );

	UKFAISpawnManager_execGetSineMod_Parms GetSineMod_Parms;

	this->ProcessEvent ( pFnGetSineMod, &GetSineMod_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetNextSpawnTimeMod
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::GetNextSpawnTimeMod ( )
{
	static UFunction* pFnGetNextSpawnTimeMod = NULL;

	if ( ! pFnGetNextSpawnTimeMod )
		pFnGetNextSpawnTimeMod = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetNextSpawnTimeMod" );

	UKFAISpawnManager_execGetNextSpawnTimeMod_Parms GetNextSpawnTimeMod_Parms;

	this->ProcessEvent ( pFnGetNextSpawnTimeMod, &GetNextSpawnTimeMod_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.CalcNextGroupSpawnTime
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::CalcNextGroupSpawnTime ( )
{
	static UFunction* pFnCalcNextGroupSpawnTime = NULL;

	if ( ! pFnCalcNextGroupSpawnTime )
		pFnCalcNextGroupSpawnTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.CalcNextGroupSpawnTime" );

	UKFAISpawnManager_execCalcNextGroupSpawnTime_Parms CalcNextGroupSpawnTime_Parms;

	this->ProcessEvent ( pFnCalcNextGroupSpawnTime, &CalcNextGroupSpawnTime_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.IsFinishedSpawning
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::IsFinishedSpawning ( )
{
	static UFunction* pFnIsFinishedSpawning = NULL;

	if ( ! pFnIsFinishedSpawning )
		pFnIsFinishedSpawning = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.IsFinishedSpawning" );

	UKFAISpawnManager_execIsFinishedSpawning_Parms IsFinishedSpawning_Parms;

	this->ProcessEvent ( pFnIsFinishedSpawning, &IsFinishedSpawning_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.IsAISquadAvailable
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::IsAISquadAvailable ( )
{
	static UFunction* pFnIsAISquadAvailable = NULL;

	if ( ! pFnIsAISquadAvailable )
		pFnIsAISquadAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.IsAISquadAvailable" );

	UKFAISpawnManager_execIsAISquadAvailable_Parms IsAISquadAvailable_Parms;

	this->ProcessEvent ( pFnIsAISquadAvailable, &IsAISquadAvailable_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.LogAvailableSquads
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::LogAvailableSquads ( )
{
	static UFunction* pFnLogAvailableSquads = NULL;

	if ( ! pFnLogAvailableSquads )
		pFnLogAvailableSquads = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.LogAvailableSquads" );

	UKFAISpawnManager_execLogAvailableSquads_Parms LogAvailableSquads_Parms;

	this->ProcessEvent ( pFnLogAvailableSquads, &LogAvailableSquads_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.LogMonsterList
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::LogMonsterList ( )
{
	static UFunction* pFnLogMonsterList = NULL;

	if ( ! pFnLogMonsterList )
		pFnLogMonsterList = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.LogMonsterList" );

	UKFAISpawnManager_execLogMonsterList_Parms LogMonsterList_Parms;

	this->ProcessEvent ( pFnLogMonsterList, &LogMonsterList_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetNextSpawnList
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::GetNextSpawnList ( )
{
	static UFunction* pFnGetNextSpawnList = NULL;

	if ( ! pFnGetNextSpawnList )
		pFnGetNextSpawnList = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetNextSpawnList" );

	UKFAISpawnManager_execGetNextSpawnList_Parms GetNextSpawnList_Parms;

	this->ProcessEvent ( pFnGetNextSpawnList, &GetNextSpawnList_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetSpawnListFromSquad
// [0x00420002] 
// Parameters infos:

void UKFAISpawnManager::GetSpawnListFromSquad ( )
{
	static UFunction* pFnGetSpawnListFromSquad = NULL;

	if ( ! pFnGetSpawnListFromSquad )
		pFnGetSpawnListFromSquad = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetSpawnListFromSquad" );

	UKFAISpawnManager_execGetSpawnListFromSquad_Parms GetSpawnListFromSquad_Parms;

	this->ProcessEvent ( pFnGetSpawnListFromSquad, &GetSpawnListFromSquad_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.SetDesiredSquadTypeForZedList
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::SetDesiredSquadTypeForZedList ( )
{
	static UFunction* pFnSetDesiredSquadTypeForZedList = NULL;

	if ( ! pFnSetDesiredSquadTypeForZedList )
		pFnSetDesiredSquadTypeForZedList = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.SetDesiredSquadTypeForZedList" );

	UKFAISpawnManager_execSetDesiredSquadTypeForZedList_Parms SetDesiredSquadTypeForZedList_Parms;

	this->ProcessEvent ( pFnSetDesiredSquadTypeForZedList, &SetDesiredSquadTypeForZedList_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetDesiredSquadTypeForZedList
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::GetDesiredSquadTypeForZedList ( )
{
	static UFunction* pFnGetDesiredSquadTypeForZedList = NULL;

	if ( ! pFnGetDesiredSquadTypeForZedList )
		pFnGetDesiredSquadTypeForZedList = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetDesiredSquadTypeForZedList" );

	UKFAISpawnManager_execGetDesiredSquadTypeForZedList_Parms GetDesiredSquadTypeForZedList_Parms;

	this->ProcessEvent ( pFnGetDesiredSquadTypeForZedList, &GetDesiredSquadTypeForZedList_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.SpawnRemainingReservedZeds
// [0x00024000] 
// Parameters infos:

void UKFAISpawnManager::SpawnRemainingReservedZeds ( )
{
	static UFunction* pFnSpawnRemainingReservedZeds = NULL;

	if ( ! pFnSpawnRemainingReservedZeds )
		pFnSpawnRemainingReservedZeds = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.SpawnRemainingReservedZeds" );

	UKFAISpawnManager_execSpawnRemainingReservedZeds_Parms SpawnRemainingReservedZeds_Parms;

	this->ProcessEvent ( pFnSpawnRemainingReservedZeds, &SpawnRemainingReservedZeds_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetAvailableSquads
// [0x00024002] 
// Parameters infos:

void UKFAISpawnManager::GetAvailableSquads ( )
{
	static UFunction* pFnGetAvailableSquads = NULL;

	if ( ! pFnGetAvailableSquads )
		pFnGetAvailableSquads = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetAvailableSquads" );

	UKFAISpawnManager_execGetAvailableSquads_Parms GetAvailableSquads_Parms;

	this->ProcessEvent ( pFnGetAvailableSquads, &GetAvailableSquads_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.GetWaveSettings
// [0x00420002] 
// Parameters infos:

void UKFAISpawnManager::GetWaveSettings ( )
{
	static UFunction* pFnGetWaveSettings = NULL;

	if ( ! pFnGetWaveSettings )
		pFnGetWaveSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.GetWaveSettings" );

	UKFAISpawnManager_execGetWaveSettings_Parms GetWaveSettings_Parms;

	this->ProcessEvent ( pFnGetWaveSettings, &GetWaveSettings_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.SetupNextWave
// [0x00024002] 
// Parameters infos:

void UKFAISpawnManager::SetupNextWave ( )
{
	static UFunction* pFnSetupNextWave = NULL;

	if ( ! pFnSetupNextWave )
		pFnSetupNextWave = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.SetupNextWave" );

	UKFAISpawnManager_execSetupNextWave_Parms SetupNextWave_Parms;

	this->ProcessEvent ( pFnSetupNextWave, &SetupNextWave_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.RegisterSpawnVolumes
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::RegisterSpawnVolumes ( )
{
	static UFunction* pFnRegisterSpawnVolumes = NULL;

	if ( ! pFnRegisterSpawnVolumes )
		pFnRegisterSpawnVolumes = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.RegisterSpawnVolumes" );

	UKFAISpawnManager_execRegisterSpawnVolumes_Parms RegisterSpawnVolumes_Parms;

	this->ProcessEvent ( pFnRegisterSpawnVolumes, &RegisterSpawnVolumes_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.Initialize
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.Initialize" );

	UKFAISpawnManager_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.ZedTypeToString
// [0x00022002] 
// Parameters infos:

void UKFAISpawnManager::ZedTypeToString ( )
{
	static UFunction* pFnZedTypeToString = NULL;

	if ( ! pFnZedTypeToString )
		pFnZedTypeToString = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.ZedTypeToString" );

	UKFAISpawnManager_execZedTypeToString_Parms ZedTypeToString_Parms;

	this->ProcessEvent ( pFnZedTypeToString, &ZedTypeToString_Parms, NULL );
};

// Function KFGame.KFAISpawnManager.SortSpawnVolumes
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISpawnManager::SortSpawnVolumes ( )
{
	static UFunction* pFnSortSpawnVolumes = NULL;

	if ( ! pFnSortSpawnVolumes )
		pFnSortSpawnVolumes = UObject::FindObject< UFunction > ( "Function KFGame.KFAISpawnManager.SortSpawnVolumes" );

	UKFAISpawnManager_execSortSpawnVolumes_Parms SortSpawnVolumes_Parms;

	pFnSortSpawnVolumes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortSpawnVolumes, &SortSpawnVolumes_Parms, NULL );

	pFnSortSpawnVolumes->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.IsClassExcluded
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::IsClassExcluded ( )
{
	static UFunction* pFnIsClassExcluded = NULL;

	if ( ! pFnIsClassExcluded )
		pFnIsClassExcluded = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.IsClassExcluded" );

	UKFAISteering_execIsClassExcluded_Parms IsClassExcluded_Parms;

	pFnIsClassExcluded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsClassExcluded, &IsClassExcluded_Parms, NULL );

	pFnIsClassExcluded->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.IsSeparationClass
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::IsSeparationClass ( )
{
	static UFunction* pFnIsSeparationClass = NULL;

	if ( ! pFnIsSeparationClass )
		pFnIsSeparationClass = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.IsSeparationClass" );

	UKFAISteering_execIsSeparationClass_Parms IsSeparationClass_Parms;

	pFnIsSeparationClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSeparationClass, &IsSeparationClass_Parms, NULL );

	pFnIsSeparationClass->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.SeparateStopExclude
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::SeparateStopExclude ( )
{
	static UFunction* pFnSeparateStopExclude = NULL;

	if ( ! pFnSeparateStopExclude )
		pFnSeparateStopExclude = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.SeparateStopExclude" );

	UKFAISteering_execSeparateStopExclude_Parms SeparateStopExclude_Parms;

	pFnSeparateStopExclude->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeparateStopExclude, &SeparateStopExclude_Parms, NULL );

	pFnSeparateStopExclude->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.SeparateExclude
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::SeparateExclude ( )
{
	static UFunction* pFnSeparateExclude = NULL;

	if ( ! pFnSeparateExclude )
		pFnSeparateExclude = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.SeparateExclude" );

	UKFAISteering_execSeparateExclude_Parms SeparateExclude_Parms;

	pFnSeparateExclude->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeparateExclude, &SeparateExclude_Parms, NULL );

	pFnSeparateExclude->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.SeparationOff
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::SeparationOff ( )
{
	static UFunction* pFnSeparationOff = NULL;

	if ( ! pFnSeparationOff )
		pFnSeparationOff = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.SeparationOff" );

	UKFAISteering_execSeparationOff_Parms SeparationOff_Parms;

	pFnSeparationOff->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeparationOff, &SeparationOff_Parms, NULL );

	pFnSeparationOff->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.SeparationOn
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::SeparationOn ( )
{
	static UFunction* pFnSeparationOn = NULL;

	if ( ! pFnSeparationOn )
		pFnSeparationOn = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.SeparationOn" );

	UKFAISteering_execSeparationOn_Parms SeparationOn_Parms;

	pFnSeparationOn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeparationOn, &SeparationOn_Parms, NULL );

	pFnSeparationOn->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.SeparationGetForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::SeparationGetForce ( )
{
	static UFunction* pFnSeparationGetForce = NULL;

	if ( ! pFnSeparationGetForce )
		pFnSeparationGetForce = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.SeparationGetForce" );

	UKFAISteering_execSeparationGetForce_Parms SeparationGetForce_Parms;

	pFnSeparationGetForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSeparationGetForce, &SeparationGetForce_Parms, NULL );

	pFnSeparationGetForce->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.UnrealAccelGetForce
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::UnrealAccelGetForce ( )
{
	static UFunction* pFnUnrealAccelGetForce = NULL;

	if ( ! pFnUnrealAccelGetForce )
		pFnUnrealAccelGetForce = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.UnrealAccelGetForce" );

	UKFAISteering_execUnrealAccelGetForce_Parms UnrealAccelGetForce_Parms;

	pFnUnrealAccelGetForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnrealAccelGetForce, &UnrealAccelGetForce_Parms, NULL );

	pFnUnrealAccelGetForce->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.UnrealAccelSet
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::UnrealAccelSet ( )
{
	static UFunction* pFnUnrealAccelSet = NULL;

	if ( ! pFnUnrealAccelSet )
		pFnUnrealAccelSet = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.UnrealAccelSet" );

	UKFAISteering_execUnrealAccelSet_Parms UnrealAccelSet_Parms;

	pFnUnrealAccelSet->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnrealAccelSet, &UnrealAccelSet_Parms, NULL );

	pFnUnrealAccelSet->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.DisableDefaultAcceleration
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::DisableDefaultAcceleration ( )
{
	static UFunction* pFnDisableDefaultAcceleration = NULL;

	if ( ! pFnDisableDefaultAcceleration )
		pFnDisableDefaultAcceleration = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.DisableDefaultAcceleration" );

	UKFAISteering_execDisableDefaultAcceleration_Parms DisableDefaultAcceleration_Parms;

	pFnDisableDefaultAcceleration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisableDefaultAcceleration, &DisableDefaultAcceleration_Parms, NULL );

	pFnDisableDefaultAcceleration->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.EnableDefaultAcceleration
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::EnableDefaultAcceleration ( )
{
	static UFunction* pFnEnableDefaultAcceleration = NULL;

	if ( ! pFnEnableDefaultAcceleration )
		pFnEnableDefaultAcceleration = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.EnableDefaultAcceleration" );

	UKFAISteering_execEnableDefaultAcceleration_Parms EnableDefaultAcceleration_Parms;

	pFnEnableDefaultAcceleration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEnableDefaultAcceleration, &EnableDefaultAcceleration_Parms, NULL );

	pFnEnableDefaultAcceleration->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.AccumulateForce
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::AccumulateForce ( )
{
	static UFunction* pFnAccumulateForce = NULL;

	if ( ! pFnAccumulateForce )
		pFnAccumulateForce = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.AccumulateForce" );

	UKFAISteering_execAccumulateForce_Parms AccumulateForce_Parms;

	pFnAccumulateForce->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAccumulateForce, &AccumulateForce_Parms, NULL );

	pFnAccumulateForce->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.CalculateAcceleration
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::CalculateAcceleration ( )
{
	static UFunction* pFnCalculateAcceleration = NULL;

	if ( ! pFnCalculateAcceleration )
		pFnCalculateAcceleration = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.CalculateAcceleration" );

	UKFAISteering_execCalculateAcceleration_Parms CalculateAcceleration_Parms;

	pFnCalculateAcceleration->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalculateAcceleration, &CalculateAcceleration_Parms, NULL );

	pFnCalculateAcceleration->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.OnOwnerDestroy
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::OnOwnerDestroy ( )
{
	static UFunction* pFnOnOwnerDestroy = NULL;

	if ( ! pFnOnOwnerDestroy )
		pFnOnOwnerDestroy = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.OnOwnerDestroy" );

	UKFAISteering_execOnOwnerDestroy_Parms OnOwnerDestroy_Parms;

	pFnOnOwnerDestroy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOnOwnerDestroy, &OnOwnerDestroy_Parms, NULL );

	pFnOnOwnerDestroy->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.GetGroundSpeed
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::GetGroundSpeed ( )
{
	static UFunction* pFnGetGroundSpeed = NULL;

	if ( ! pFnGetGroundSpeed )
		pFnGetGroundSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.GetGroundSpeed" );

	UKFAISteering_execGetGroundSpeed_Parms GetGroundSpeed_Parms;

	pFnGetGroundSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGroundSpeed, &GetGroundSpeed_Parms, NULL );

	pFnGetGroundSpeed->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.GetAccelRate
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::GetAccelRate ( )
{
	static UFunction* pFnGetAccelRate = NULL;

	if ( ! pFnGetAccelRate )
		pFnGetAccelRate = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.GetAccelRate" );

	UKFAISteering_execGetAccelRate_Parms GetAccelRate_Parms;

	pFnGetAccelRate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAccelRate, &GetAccelRate_Parms, NULL );

	pFnGetAccelRate->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.On
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::On ( )
{
	static UFunction* pFnOn = NULL;

	if ( ! pFnOn )
		pFnOn = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.On" );

	UKFAISteering_execOn_Parms On_Parms;

	pFnOn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOn, &On_Parms, NULL );

	pFnOn->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.ClearAllFlags
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::ClearAllFlags ( )
{
	static UFunction* pFnClearAllFlags = NULL;

	if ( ! pFnClearAllFlags )
		pFnClearAllFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.ClearAllFlags" );

	UKFAISteering_execClearAllFlags_Parms ClearAllFlags_Parms;

	pFnClearAllFlags->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearAllFlags, &ClearAllFlags_Parms, NULL );

	pFnClearAllFlags->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.ClearFlag
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::ClearFlag ( )
{
	static UFunction* pFnClearFlag = NULL;

	if ( ! pFnClearFlag )
		pFnClearFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.ClearFlag" );

	UKFAISteering_execClearFlag_Parms ClearFlag_Parms;

	pFnClearFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearFlag, &ClearFlag_Parms, NULL );

	pFnClearFlag->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.AddFlag
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::AddFlag ( )
{
	static UFunction* pFnAddFlag = NULL;

	if ( ! pFnAddFlag )
		pFnAddFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.AddFlag" );

	UKFAISteering_execAddFlag_Parms AddFlag_Parms;

	pFnAddFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddFlag, &AddFlag_Parms, NULL );

	pFnAddFlag->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISteering.Initialize
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAISteering::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFAISteering.Initialize" );

	UKFAISteering_execInitialize_Parms Initialize_Parms;

	pFnInitialize->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );

	pFnInitialize->FunctionFlags |= 0x400;
};

// Function KFGame.KFAISubsystem.GetDifficultyValue
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFAISubsystem::eventGetDifficultyValue ( )
{
	static UFunction* pFnGetDifficultyValue = NULL;

	if ( ! pFnGetDifficultyValue )
		pFnGetDifficultyValue = UObject::FindObject< UFunction > ( "Function KFGame.KFAISubsystem.GetDifficultyValue" );

	UKFAISubsystem_eventGetDifficultyValue_Parms GetDifficultyValue_Parms;

	this->ProcessEvent ( pFnGetDifficultyValue, &GetDifficultyValue_Parms, NULL );
};

// Function KFGame.Goal_AwayFromPosition.Recycle
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UGoal_AwayFromPosition::eventRecycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function KFGame.Goal_AwayFromPosition.Recycle" );

	UGoal_AwayFromPosition_eventRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function KFGame.Goal_AwayFromPosition.FleeFrom
// [0x00022002] 
// Parameters infos:

void UGoal_AwayFromPosition::FleeFrom ( )
{
	static UFunction* pFnFleeFrom = NULL;

	if ( ! pFnFleeFrom )
		pFnFleeFrom = UObject::FindObject< UFunction > ( "Function KFGame.Goal_AwayFromPosition.FleeFrom" );

	UGoal_AwayFromPosition_execFleeFrom_Parms FleeFrom_Parms;

	this->ProcessEvent ( pFnFleeFrom, &FleeFrom_Parms, NULL );
};

// Function KFGame.Goal_Random.Recycle
// [0x00020002] 
// Parameters infos:

void UGoal_Random::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function KFGame.Goal_Random.Recycle" );

	UGoal_Random_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function KFGame.Goal_Random.FindRandom
// [0x00026002] 
// Parameters infos:

void UGoal_Random::FindRandom ( )
{
	static UFunction* pFnFindRandom = NULL;

	if ( ! pFnFindRandom )
		pFnFindRandom = UObject::FindObject< UFunction > ( "Function KFGame.Goal_Random.FindRandom" );

	UGoal_Random_execFindRandom_Parms FindRandom_Parms;

	this->ProcessEvent ( pFnFindRandom, &FindRandom_Parms, NULL );
};

// Function KFGame.Goal_WallToEnemy.Recycle
// [0x00020002] 
// Parameters infos:

void UGoal_WallToEnemy::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function KFGame.Goal_WallToEnemy.Recycle" );

	UGoal_WallToEnemy_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function KFGame.Goal_WallToEnemy.WallToEnemy
// [0x00026002] 
// Parameters infos:

void UGoal_WallToEnemy::WallToEnemy ( )
{
	static UFunction* pFnWallToEnemy = NULL;

	if ( ! pFnWallToEnemy )
		pFnWallToEnemy = UObject::FindObject< UFunction > ( "Function KFGame.Goal_WallToEnemy.WallToEnemy" );

	UGoal_WallToEnemy_execWallToEnemy_Parms WallToEnemy_Parms;

	this->ProcessEvent ( pFnWallToEnemy, &WallToEnemy_Parms, NULL );
};

// Function KFGame.KFDoorMarker.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDoorMarker::eventSpecialHandling ( )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorMarker.SpecialHandling" );

	AKFDoorMarker_eventSpecialHandling_Parms SpecialHandling_Parms;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );
};

// Function KFGame.KFDoorMarker.ProceedWithMove
// [0x00020002] 
// Parameters infos:

void AKFDoorMarker::ProceedWithMove ( )
{
	static UFunction* pFnProceedWithMove = NULL;

	if ( ! pFnProceedWithMove )
		pFnProceedWithMove = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorMarker.ProceedWithMove" );

	AKFDoorMarker_execProceedWithMove_Parms ProceedWithMove_Parms;

	this->ProcessEvent ( pFnProceedWithMove, &ProceedWithMove_Parms, NULL );
};

// Function KFGame.KFDoorMarker.UpdatePathingCost
// [0x00020002] 
// Parameters infos:

void AKFDoorMarker::UpdatePathingCost ( )
{
	static UFunction* pFnUpdatePathingCost = NULL;

	if ( ! pFnUpdatePathingCost )
		pFnUpdatePathingCost = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorMarker.UpdatePathingCost" );

	AKFDoorMarker_execUpdatePathingCost_Parms UpdatePathingCost_Parms;

	this->ProcessEvent ( pFnUpdatePathingCost, &UpdatePathingCost_Parms, NULL );
};

// Function KFGame.KFDoorMarker.MoverClosed
// [0x00020002] 
// Parameters infos:

void AKFDoorMarker::MoverClosed ( )
{
	static UFunction* pFnMoverClosed = NULL;

	if ( ! pFnMoverClosed )
		pFnMoverClosed = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorMarker.MoverClosed" );

	AKFDoorMarker_execMoverClosed_Parms MoverClosed_Parms;

	this->ProcessEvent ( pFnMoverClosed, &MoverClosed_Parms, NULL );
};

// Function KFGame.KFDoorMarker.MoverOpened
// [0x00020002] 
// Parameters infos:

void AKFDoorMarker::MoverOpened ( )
{
	static UFunction* pFnMoverOpened = NULL;

	if ( ! pFnMoverOpened )
		pFnMoverOpened = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorMarker.MoverOpened" );

	AKFDoorMarker_execMoverOpened_Parms MoverOpened_Parms;

	this->ProcessEvent ( pFnMoverOpened, &MoverOpened_Parms, NULL );
};

// Function KFGame.KFDoorMarker.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDoorMarker::eventSuggestMovePreparation ( )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = UObject::FindObject< UFunction > ( "Function KFGame.KFDoorMarker.SuggestMovePreparation" );

	AKFDoorMarker_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );
};

// Function KFGame.KFPathnode.DrawDebugInfo
// [0x00020102] 
// Parameters infos:

void AKFPathnode::DrawDebugInfo ( )
{
	static UFunction* pFnDrawDebugInfo = NULL;

	if ( ! pFnDrawDebugInfo )
		pFnDrawDebugInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPathnode.DrawDebugInfo" );

	AKFPathnode_execDrawDebugInfo_Parms DrawDebugInfo_Parms;

	this->ProcessEvent ( pFnDrawDebugInfo, &DrawDebugInfo_Parms, NULL );
};

// Function KFGame.KFPathnode.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPathnode::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = UObject::FindObject< UFunction > ( "Function KFGame.KFPathnode.GetDebugAbbrev" );

	AKFPathnode_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );
};

// Function KFGame.KFPathnode.NotifyReachedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPathnode::eventNotifyReachedBy ( )
{
	static UFunction* pFnNotifyReachedBy = NULL;

	if ( ! pFnNotifyReachedBy )
		pFnNotifyReachedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPathnode.NotifyReachedBy" );

	AKFPathnode_eventNotifyReachedBy_Parms NotifyReachedBy_Parms;

	this->ProcessEvent ( pFnNotifyReachedBy, &NotifyReachedBy_Parms, NULL );
};

// Function KFGame.KFPathnode.GetNearestValidFloorNavWithinRadiusToPawn
// [0x00826003] ( FUNC_Final )
// Parameters infos:

void AKFPathnode::GetNearestValidFloorNavWithinRadiusToPawn ( )
{
	static UFunction* pFnGetNearestValidFloorNavWithinRadiusToPawn = NULL;

	if ( ! pFnGetNearestValidFloorNavWithinRadiusToPawn )
		pFnGetNearestValidFloorNavWithinRadiusToPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPathnode.GetNearestValidFloorNavWithinRadiusToPawn" );

	AKFPathnode_execGetNearestValidFloorNavWithinRadiusToPawn_Parms GetNearestValidFloorNavWithinRadiusToPawn_Parms;

	this->ProcessEvent ( pFnGetNearestValidFloorNavWithinRadiusToPawn, &GetNearestValidFloorNavWithinRadiusToPawn_Parms, NULL );
};

// Function KFGame.KFPathnode.GetNearestFloorNavToActor
// [0x00026003] ( FUNC_Final )
// Parameters infos:

void AKFPathnode::GetNearestFloorNavToActor ( )
{
	static UFunction* pFnGetNearestFloorNavToActor = NULL;

	if ( ! pFnGetNearestFloorNavToActor )
		pFnGetNearestFloorNavToActor = UObject::FindObject< UFunction > ( "Function KFGame.KFPathnode.GetNearestFloorNavToActor" );

	AKFPathnode_execGetNearestFloorNavToActor_Parms GetNearestFloorNavToActor_Parms;

	this->ProcessEvent ( pFnGetNearestFloorNavToActor, &GetNearestFloorNavToActor_Parms, NULL );
};

// Function KFGame.KFPathnode.IsUsableAnchorFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPathnode::IsUsableAnchorFor ( )
{
	static UFunction* pFnIsUsableAnchorFor = NULL;

	if ( ! pFnIsUsableAnchorFor )
		pFnIsUsableAnchorFor = UObject::FindObject< UFunction > ( "Function KFGame.KFPathnode.IsUsableAnchorFor" );

	AKFPathnode_execIsUsableAnchorFor_Parms IsUsableAnchorFor_Parms;

	pFnIsUsableAnchorFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsableAnchorFor, &IsUsableAnchorFor_Parms, NULL );

	pFnIsUsableAnchorFor->FunctionFlags |= 0x400;
};

// Function KFGame.KFPathnode.GetUpVector
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPathnode::GetUpVector ( )
{
	static UFunction* pFnGetUpVector = NULL;

	if ( ! pFnGetUpVector )
		pFnGetUpVector = UObject::FindObject< UFunction > ( "Function KFGame.KFPathnode.GetUpVector" );

	AKFPathnode_execGetUpVector_Parms GetUpVector_Parms;

	pFnGetUpVector->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetUpVector, &GetUpVector_Parms, NULL );

	pFnGetUpVector->FunctionFlags |= 0x400;
};

// Function KFGame.KFPathnode.ComputeTrajectoryByTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPathnode::ComputeTrajectoryByTime ( )
{
	static UFunction* pFnComputeTrajectoryByTime = NULL;

	if ( ! pFnComputeTrajectoryByTime )
		pFnComputeTrajectoryByTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPathnode.ComputeTrajectoryByTime" );

	AKFPathnode_execComputeTrajectoryByTime_Parms ComputeTrajectoryByTime_Parms;

	pFnComputeTrajectoryByTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnComputeTrajectoryByTime, &ComputeTrajectoryByTime_Parms, NULL );

	pFnComputeTrajectoryByTime->FunctionFlags |= 0x400;
};

// Function KFGame.KFCostTimerNode.StartCostTimer
// [0x00020002] 
// Parameters infos:

void AKFCostTimerNode::StartCostTimer ( )
{
	static UFunction* pFnStartCostTimer = NULL;

	if ( ! pFnStartCostTimer )
		pFnStartCostTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFCostTimerNode.StartCostTimer" );

	AKFCostTimerNode_execStartCostTimer_Parms StartCostTimer_Parms;

	this->ProcessEvent ( pFnStartCostTimer, &StartCostTimer_Parms, NULL );
};

// Function KFGame.KFCostTimerNode.CostTimer
// [0x00020002] 
// Parameters infos:

void AKFCostTimerNode::CostTimer ( )
{
	static UFunction* pFnCostTimer = NULL;

	if ( ! pFnCostTimer )
		pFnCostTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFCostTimerNode.CostTimer" );

	AKFCostTimerNode_execCostTimer_Parms CostTimer_Parms;

	this->ProcessEvent ( pFnCostTimer, &CostTimer_Parms, NULL );
};

// Function KFGame.KFCostTimerNode.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AKFCostTimerNode::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFCostTimerNode.PostBeginPlay" );

	AKFCostTimerNode_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFWallPathNode.SuggestMovePreparation
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWallPathNode::eventSuggestMovePreparation ( )
{
	static UFunction* pFnSuggestMovePreparation = NULL;

	if ( ! pFnSuggestMovePreparation )
		pFnSuggestMovePreparation = UObject::FindObject< UFunction > ( "Function KFGame.KFWallPathNode.SuggestMovePreparation" );

	AKFWallPathNode_eventSuggestMovePreparation_Parms SuggestMovePreparation_Parms;

	this->ProcessEvent ( pFnSuggestMovePreparation, &SuggestMovePreparation_Parms, NULL );
};

// Function KFGame.KFWallPathNode.DetourWeight
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWallPathNode::eventDetourWeight ( )
{
	static UFunction* pFnDetourWeight = NULL;

	if ( ! pFnDetourWeight )
		pFnDetourWeight = UObject::FindObject< UFunction > ( "Function KFGame.KFWallPathNode.DetourWeight" );

	AKFWallPathNode_eventDetourWeight_Parms DetourWeight_Parms;

	this->ProcessEvent ( pFnDetourWeight, &DetourWeight_Parms, NULL );
};

// Function KFGame.KFWallPathNode.Accept
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWallPathNode::eventAccept ( )
{
	static UFunction* pFnAccept = NULL;

	if ( ! pFnAccept )
		pFnAccept = UObject::FindObject< UFunction > ( "Function KFGame.KFWallPathNode.Accept" );

	AKFWallPathNode_eventAccept_Parms Accept_Parms;

	this->ProcessEvent ( pFnAccept, &Accept_Parms, NULL );
};

// Function KFGame.KFWallPathNode.SpecialCost
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWallPathNode::eventSpecialCost ( )
{
	static UFunction* pFnSpecialCost = NULL;

	if ( ! pFnSpecialCost )
		pFnSpecialCost = UObject::FindObject< UFunction > ( "Function KFGame.KFWallPathNode.SpecialCost" );

	AKFWallPathNode_eventSpecialCost_Parms SpecialCost_Parms;

	this->ProcessEvent ( pFnSpecialCost, &SpecialCost_Parms, NULL );
};

// Function KFGame.KFWallPathNode.GetDebugAbbrev
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWallPathNode::eventGetDebugAbbrev ( )
{
	static UFunction* pFnGetDebugAbbrev = NULL;

	if ( ! pFnGetDebugAbbrev )
		pFnGetDebugAbbrev = UObject::FindObject< UFunction > ( "Function KFGame.KFWallPathNode.GetDebugAbbrev" );

	AKFWallPathNode_eventGetDebugAbbrev_Parms GetDebugAbbrev_Parms;

	this->ProcessEvent ( pFnGetDebugAbbrev, &GetDebugAbbrev_Parms, NULL );
};

// Function KFGame.KFWallPathNode.IsUsableAnchorFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFWallPathNode::IsUsableAnchorFor ( )
{
	static UFunction* pFnIsUsableAnchorFor = NULL;

	if ( ! pFnIsUsableAnchorFor )
		pFnIsUsableAnchorFor = UObject::FindObject< UFunction > ( "Function KFGame.KFWallPathNode.IsUsableAnchorFor" );

	AKFWallPathNode_execIsUsableAnchorFor_Parms IsUsableAnchorFor_Parms;

	pFnIsUsableAnchorFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsableAnchorFor, &IsUsableAnchorFor_Parms, NULL );

	pFnIsUsableAnchorFor->FunctionFlags |= 0x400;
};

// Function KFGame.KFReachSpec.IsPathBlockedByPawn
// [0x00424400] ( FUNC_Native )
// Parameters infos:

void UKFReachSpec::IsPathBlockedByPawn ( )
{
	static UFunction* pFnIsPathBlockedByPawn = NULL;

	if ( ! pFnIsPathBlockedByPawn )
		pFnIsPathBlockedByPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFReachSpec.IsPathBlockedByPawn" );

	UKFReachSpec_execIsPathBlockedByPawn_Parms IsPathBlockedByPawn_Parms;

	pFnIsPathBlockedByPawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPathBlockedByPawn, &IsPathBlockedByPawn_Parms, NULL );

	pFnIsPathBlockedByPawn->FunctionFlags |= 0x400;
};

// Function KFGame.KFReachSpec.IsWallToCeiling
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFReachSpec::IsWallToCeiling ( )
{
	static UFunction* pFnIsWallToCeiling = NULL;

	if ( ! pFnIsWallToCeiling )
		pFnIsWallToCeiling = UObject::FindObject< UFunction > ( "Function KFGame.KFReachSpec.IsWallToCeiling" );

	UKFReachSpec_execIsWallToCeiling_Parms IsWallToCeiling_Parms;

	pFnIsWallToCeiling->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsWallToCeiling, &IsWallToCeiling_Parms, NULL );

	pFnIsWallToCeiling->FunctionFlags |= 0x400;
};

// Function KFGame.KFReachSpec.IsForcedSpec
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFReachSpec::IsForcedSpec ( )
{
	static UFunction* pFnIsForcedSpec = NULL;

	if ( ! pFnIsForcedSpec )
		pFnIsForcedSpec = UObject::FindObject< UFunction > ( "Function KFGame.KFReachSpec.IsForcedSpec" );

	UKFReachSpec_execIsForcedSpec_Parms IsForcedSpec_Parms;

	pFnIsForcedSpec->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsForcedSpec, &IsForcedSpec_Parms, NULL );

	pFnIsForcedSpec->FunctionFlags |= 0x400;
};

// Function KFGame.KFReachSpec.HasJumpAndWalkFlag
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFReachSpec::HasJumpAndWalkFlag ( )
{
	static UFunction* pFnHasJumpAndWalkFlag = NULL;

	if ( ! pFnHasJumpAndWalkFlag )
		pFnHasJumpAndWalkFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFReachSpec.HasJumpAndWalkFlag" );

	UKFReachSpec_execHasJumpAndWalkFlag_Parms HasJumpAndWalkFlag_Parms;

	pFnHasJumpAndWalkFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasJumpAndWalkFlag, &HasJumpAndWalkFlag_Parms, NULL );

	pFnHasJumpAndWalkFlag->FunctionFlags |= 0x400;
};

// Function KFGame.KFReachSpec.HasJumpFlag
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFReachSpec::HasJumpFlag ( )
{
	static UFunction* pFnHasJumpFlag = NULL;

	if ( ! pFnHasJumpFlag )
		pFnHasJumpFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFReachSpec.HasJumpFlag" );

	UKFReachSpec_execHasJumpFlag_Parms HasJumpFlag_Parms;

	pFnHasJumpFlag->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasJumpFlag, &HasJumpFlag_Parms, NULL );

	pFnHasJumpFlag->FunctionFlags |= 0x400;
};

// Function KFGame.KFScriptedPlayerPathGoal.IsUsableAnchorFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFScriptedPlayerPathGoal::IsUsableAnchorFor ( )
{
	static UFunction* pFnIsUsableAnchorFor = NULL;

	if ( ! pFnIsUsableAnchorFor )
		pFnIsUsableAnchorFor = UObject::FindObject< UFunction > ( "Function KFGame.KFScriptedPlayerPathGoal.IsUsableAnchorFor" );

	AKFScriptedPlayerPathGoal_execIsUsableAnchorFor_Parms IsUsableAnchorFor_Parms;

	pFnIsUsableAnchorFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsableAnchorFor, &IsUsableAnchorFor_Parms, NULL );

	pFnIsUsableAnchorFor->FunctionFlags |= 0x400;
};

// Function KFGame.Path_AroundDestructibles.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_AroundDestructibles::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function KFGame.Path_AroundDestructibles.Recycle" );

	UPath_AroundDestructibles_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function KFGame.Path_AroundDestructibles.AvoidDestructibles
// [0x00026002] 
// Parameters infos:

void UPath_AroundDestructibles::AvoidDestructibles ( )
{
	static UFunction* pFnAvoidDestructibles = NULL;

	if ( ! pFnAvoidDestructibles )
		pFnAvoidDestructibles = UObject::FindObject< UFunction > ( "Function KFGame.Path_AroundDestructibles.AvoidDestructibles" );

	UPath_AroundDestructibles_execAvoidDestructibles_Parms AvoidDestructibles_Parms;

	this->ProcessEvent ( pFnAvoidDestructibles, &AvoidDestructibles_Parms, NULL );
};

// Function KFGame.Path_AvoidChokePoints.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_AvoidChokePoints::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function KFGame.Path_AvoidChokePoints.Recycle" );

	UPath_AvoidChokePoints_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function KFGame.Path_AvoidChokePoints.AvoidChokePoints
// [0x00022002] 
// Parameters infos:

void UPath_AvoidChokePoints::AvoidChokePoints ( )
{
	static UFunction* pFnAvoidChokePoints = NULL;

	if ( ! pFnAvoidChokePoints )
		pFnAvoidChokePoints = UObject::FindObject< UFunction > ( "Function KFGame.Path_AvoidChokePoints.AvoidChokePoints" );

	UPath_AvoidChokePoints_execAvoidChokePoints_Parms AvoidChokePoints_Parms;

	this->ProcessEvent ( pFnAvoidChokePoints, &AvoidChokePoints_Parms, NULL );
};

// Function KFGame.Path_AvoidClosedDoors.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_AvoidClosedDoors::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function KFGame.Path_AvoidClosedDoors.Recycle" );

	UPath_AvoidClosedDoors_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function KFGame.Path_AvoidClosedDoors.AvoidClosedDoors
// [0x00026002] 
// Parameters infos:

void UPath_AvoidClosedDoors::AvoidClosedDoors ( )
{
	static UFunction* pFnAvoidClosedDoors = NULL;

	if ( ! pFnAvoidClosedDoors )
		pFnAvoidClosedDoors = UObject::FindObject< UFunction > ( "Function KFGame.Path_AvoidClosedDoors.AvoidClosedDoors" );

	UPath_AvoidClosedDoors_execAvoidClosedDoors_Parms AvoidClosedDoors_Parms;

	this->ProcessEvent ( pFnAvoidClosedDoors, &AvoidClosedDoors_Parms, NULL );
};

// Function KFGame.Path_PreferDarkness.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_PreferDarkness::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function KFGame.Path_PreferDarkness.Recycle" );

	UPath_PreferDarkness_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function KFGame.Path_PreferDarkness.DontGoIntoTheLight
// [0x00022002] 
// Parameters infos:

void UPath_PreferDarkness::DontGoIntoTheLight ( )
{
	static UFunction* pFnDontGoIntoTheLight = NULL;

	if ( ! pFnDontGoIntoTheLight )
		pFnDontGoIntoTheLight = UObject::FindObject< UFunction > ( "Function KFGame.Path_PreferDarkness.DontGoIntoTheLight" );

	UPath_PreferDarkness_execDontGoIntoTheLight_Parms DontGoIntoTheLight_Parms;

	this->ProcessEvent ( pFnDontGoIntoTheLight, &DontGoIntoTheLight_Parms, NULL );
};

// Function KFGame.Path_PreferWalls.Recycle
// [0x00020002] 
// Parameters infos:

void UPath_PreferWalls::Recycle ( )
{
	static UFunction* pFnRecycle = NULL;

	if ( ! pFnRecycle )
		pFnRecycle = UObject::FindObject< UFunction > ( "Function KFGame.Path_PreferWalls.Recycle" );

	UPath_PreferWalls_execRecycle_Parms Recycle_Parms;

	this->ProcessEvent ( pFnRecycle, &Recycle_Parms, NULL );
};

// Function KFGame.Path_PreferWalls.PreferWalls
// [0x00026002] 
// Parameters infos:

void UPath_PreferWalls::PreferWalls ( )
{
	static UFunction* pFnPreferWalls = NULL;

	if ( ! pFnPreferWalls )
		pFnPreferWalls = UObject::FindObject< UFunction > ( "Function KFGame.Path_PreferWalls.PreferWalls" );

	UPath_PreferWalls_execPreferWalls_Parms PreferWalls_Parms;

	this->ProcessEvent ( pFnPreferWalls, &PreferWalls_Parms, NULL );
};

// Function KFGame.Path_ToTrader.ToTrader
// [0x00022002] 
// Parameters infos:

void UPath_ToTrader::ToTrader ( )
{
	static UFunction* pFnToTrader = NULL;

	if ( ! pFnToTrader )
		pFnToTrader = UObject::FindObject< UFunction > ( "Function KFGame.Path_ToTrader.ToTrader" );

	UPath_ToTrader_execToTrader_Parms ToTrader_Parms;

	this->ProcessEvent ( pFnToTrader, &ToTrader_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIChangedEnemy
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIChangedEnemy ( )
{
	static UFunction* pFnLogAIChangedEnemy = NULL;

	if ( ! pFnLogAIChangedEnemy )
		pFnLogAIChangedEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIChangedEnemy" );

	UKFGameplayEventsWriter_execLogAIChangedEnemy_Parms LogAIChangedEnemy_Parms;

	this->ProcessEvent ( pFnLogAIChangedEnemy, &LogAIChangedEnemy_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIDoor
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIDoor ( )
{
	static UFunction* pFnLogAIDoor = NULL;

	if ( ! pFnLogAIDoor )
		pFnLogAIDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIDoor" );

	UKFGameplayEventsWriter_execLogAIDoor_Parms LogAIDoor_Parms;

	this->ProcessEvent ( pFnLogAIDoor, &LogAIDoor_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIWall
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIWall ( )
{
	static UFunction* pFnLogAIWall = NULL;

	if ( ! pFnLogAIWall )
		pFnLogAIWall = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIWall" );

	UKFGameplayEventsWriter_execLogAIWall_Parms LogAIWall_Parms;

	this->ProcessEvent ( pFnLogAIWall, &LogAIWall_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIBump
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIBump ( )
{
	static UFunction* pFnLogAIBump = NULL;

	if ( ! pFnLogAIBump )
		pFnLogAIBump = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIBump" );

	UKFGameplayEventsWriter_execLogAIBump_Parms LogAIBump_Parms;

	this->ProcessEvent ( pFnLogAIBump, &LogAIBump_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIChargeAttack
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIChargeAttack ( )
{
	static UFunction* pFnLogAIChargeAttack = NULL;

	if ( ! pFnLogAIChargeAttack )
		pFnLogAIChargeAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIChargeAttack" );

	UKFGameplayEventsWriter_execLogAIChargeAttack_Parms LogAIChargeAttack_Parms;

	this->ProcessEvent ( pFnLogAIChargeAttack, &LogAIChargeAttack_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIGetNextMoveGoalFailure
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIGetNextMoveGoalFailure ( )
{
	static UFunction* pFnLogAIGetNextMoveGoalFailure = NULL;

	if ( ! pFnLogAIGetNextMoveGoalFailure )
		pFnLogAIGetNextMoveGoalFailure = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIGetNextMoveGoalFailure" );

	UKFGameplayEventsWriter_execLogAIGetNextMoveGoalFailure_Parms LogAIGetNextMoveGoalFailure_Parms;

	this->ProcessEvent ( pFnLogAIGetNextMoveGoalFailure, &LogAIGetNextMoveGoalFailure_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIMoveFailure
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIMoveFailure ( )
{
	static UFunction* pFnLogAIMoveFailure = NULL;

	if ( ! pFnLogAIMoveFailure )
		pFnLogAIMoveFailure = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIMoveFailure" );

	UKFGameplayEventsWriter_execLogAIMoveFailure_Parms LogAIMoveFailure_Parms;

	this->ProcessEvent ( pFnLogAIMoveFailure, &LogAIMoveFailure_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIRedirectedPath
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIRedirectedPath ( )
{
	static UFunction* pFnLogAIRedirectedPath = NULL;

	if ( ! pFnLogAIRedirectedPath )
		pFnLogAIRedirectedPath = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIRedirectedPath" );

	UKFGameplayEventsWriter_execLogAIRedirectedPath_Parms LogAIRedirectedPath_Parms;

	this->ProcessEvent ( pFnLogAIRedirectedPath, &LogAIRedirectedPath_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIBlockedPath
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIBlockedPath ( )
{
	static UFunction* pFnLogAIBlockedPath = NULL;

	if ( ! pFnLogAIBlockedPath )
		pFnLogAIBlockedPath = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIBlockedPath" );

	UKFGameplayEventsWriter_execLogAIBlockedPath_Parms LogAIBlockedPath_Parms;

	this->ProcessEvent ( pFnLogAIBlockedPath, &LogAIBlockedPath_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIPathObstruction
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIPathObstruction ( )
{
	static UFunction* pFnLogAIPathObstruction = NULL;

	if ( ! pFnLogAIPathObstruction )
		pFnLogAIPathObstruction = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIPathObstruction" );

	UKFGameplayEventsWriter_execLogAIPathObstruction_Parms LogAIPathObstruction_Parms;

	this->ProcessEvent ( pFnLogAIPathObstruction, &LogAIPathObstruction_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIFailedAnchor
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIFailedAnchor ( )
{
	static UFunction* pFnLogAIFailedAnchor = NULL;

	if ( ! pFnLogAIFailedAnchor )
		pFnLogAIFailedAnchor = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIFailedAnchor" );

	UKFGameplayEventsWriter_execLogAIFailedAnchor_Parms LogAIFailedAnchor_Parms;

	this->ProcessEvent ( pFnLogAIFailedAnchor, &LogAIFailedAnchor_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIDestroyedDoor
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIDestroyedDoor ( )
{
	static UFunction* pFnLogAIDestroyedDoor = NULL;

	if ( ! pFnLogAIDestroyedDoor )
		pFnLogAIDestroyedDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIDestroyedDoor" );

	UKFGameplayEventsWriter_execLogAIDestroyedDoor_Parms LogAIDestroyedDoor_Parms;

	this->ProcessEvent ( pFnLogAIDestroyedDoor, &LogAIDestroyedDoor_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIPathGoalEvalAbort
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIPathGoalEvalAbort ( )
{
	static UFunction* pFnLogAIPathGoalEvalAbort = NULL;

	if ( ! pFnLogAIPathGoalEvalAbort )
		pFnLogAIPathGoalEvalAbort = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIPathGoalEvalAbort" );

	UKFGameplayEventsWriter_execLogAIPathGoalEvalAbort_Parms LogAIPathGoalEvalAbort_Parms;

	this->ProcessEvent ( pFnLogAIPathGoalEvalAbort, &LogAIPathGoalEvalAbort_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIBasedOnPawn
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIBasedOnPawn ( )
{
	static UFunction* pFnLogAIBasedOnPawn = NULL;

	if ( ! pFnLogAIBasedOnPawn )
		pFnLogAIBasedOnPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIBasedOnPawn" );

	UKFGameplayEventsWriter_execLogAIBasedOnPawn_Parms LogAIBasedOnPawn_Parms;

	this->ProcessEvent ( pFnLogAIBasedOnPawn, &LogAIBasedOnPawn_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIHeadlessWander
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIHeadlessWander ( )
{
	static UFunction* pFnLogAIHeadlessWander = NULL;

	if ( ! pFnLogAIHeadlessWander )
		pFnLogAIHeadlessWander = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIHeadlessWander" );

	UKFGameplayEventsWriter_execLogAIHeadlessWander_Parms LogAIHeadlessWander_Parms;

	this->ProcessEvent ( pFnLogAIHeadlessWander, &LogAIHeadlessWander_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogAIPathFailure
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogAIPathFailure ( )
{
	static UFunction* pFnLogAIPathFailure = NULL;

	if ( ! pFnLogAIPathFailure )
		pFnLogAIPathFailure = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogAIPathFailure" );

	UKFGameplayEventsWriter_execLogAIPathFailure_Parms LogAIPathFailure_Parms;

	this->ProcessEvent ( pFnLogAIPathFailure, &LogAIPathFailure_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogBestSpawnVolume
// [0x00820002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogBestSpawnVolume ( )
{
	static UFunction* pFnLogBestSpawnVolume = NULL;

	if ( ! pFnLogBestSpawnVolume )
		pFnLogBestSpawnVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogBestSpawnVolume" );

	UKFGameplayEventsWriter_execLogBestSpawnVolume_Parms LogBestSpawnVolume_Parms;

	this->ProcessEvent ( pFnLogBestSpawnVolume, &LogBestSpawnVolume_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogPlayersAtSpawn
// [0x00020002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogPlayersAtSpawn ( )
{
	static UFunction* pFnLogPlayersAtSpawn = NULL;

	if ( ! pFnLogPlayersAtSpawn )
		pFnLogPlayersAtSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogPlayersAtSpawn" );

	UKFGameplayEventsWriter_execLogPlayersAtSpawn_Parms LogPlayersAtSpawn_Parms;

	this->ProcessEvent ( pFnLogPlayersAtSpawn, &LogPlayersAtSpawn_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.LogSpawnVolumeRating
// [0x00820002] 
// Parameters infos:

void UKFGameplayEventsWriter::LogSpawnVolumeRating ( )
{
	static UFunction* pFnLogSpawnVolumeRating = NULL;

	if ( ! pFnLogSpawnVolumeRating )
		pFnLogSpawnVolumeRating = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.LogSpawnVolumeRating" );

	UKFGameplayEventsWriter_execLogSpawnVolumeRating_Parms LogSpawnVolumeRating_Parms;

	this->ProcessEvent ( pFnLogSpawnVolumeRating, &LogSpawnVolumeRating_Parms, NULL );
};

// Function KFGame.KFGameplayEventsWriter.CanAcquireFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGameplayEventsWriter::CanAcquireFile ( )
{
	static UFunction* pFnCanAcquireFile = NULL;

	if ( ! pFnCanAcquireFile )
		pFnCanAcquireFile = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.CanAcquireFile" );

	UKFGameplayEventsWriter_execCanAcquireFile_Parms CanAcquireFile_Parms;

	pFnCanAcquireFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanAcquireFile, &CanAcquireFile_Parms, NULL );

	pFnCanAcquireFile->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameplayEventsWriter.OpenStatsFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGameplayEventsWriter::OpenStatsFile ( )
{
	static UFunction* pFnOpenStatsFile = NULL;

	if ( ! pFnOpenStatsFile )
		pFnOpenStatsFile = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.OpenStatsFile" );

	UKFGameplayEventsWriter_execOpenStatsFile_Parms OpenStatsFile_Parms;

	pFnOpenStatsFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnOpenStatsFile, &OpenStatsFile_Parms, NULL );

	pFnOpenStatsFile->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameplayEventsWriter.ResolveActorIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGameplayEventsWriter::ResolveActorIndex ( )
{
	static UFunction* pFnResolveActorIndex = NULL;

	if ( ! pFnResolveActorIndex )
		pFnResolveActorIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.ResolveActorIndex" );

	UKFGameplayEventsWriter_execResolveActorIndex_Parms ResolveActorIndex_Parms;

	pFnResolveActorIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveActorIndex, &ResolveActorIndex_Parms, NULL );

	pFnResolveActorIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameplayEventsWriter.ResolvePawnIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGameplayEventsWriter::ResolvePawnIndex ( )
{
	static UFunction* pFnResolvePawnIndex = NULL;

	if ( ! pFnResolvePawnIndex )
		pFnResolvePawnIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.ResolvePawnIndex" );

	UKFGameplayEventsWriter_execResolvePawnIndex_Parms ResolvePawnIndex_Parms;

	pFnResolvePawnIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolvePawnIndex, &ResolvePawnIndex_Parms, NULL );

	pFnResolvePawnIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameplayEventsWriter.ResolveProjectileClassIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGameplayEventsWriter::ResolveProjectileClassIndex ( )
{
	static UFunction* pFnResolveProjectileClassIndex = NULL;

	if ( ! pFnResolveProjectileClassIndex )
		pFnResolveProjectileClassIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.ResolveProjectileClassIndex" );

	UKFGameplayEventsWriter_execResolveProjectileClassIndex_Parms ResolveProjectileClassIndex_Parms;

	pFnResolveProjectileClassIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveProjectileClassIndex, &ResolveProjectileClassIndex_Parms, NULL );

	pFnResolveProjectileClassIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameplayEventsWriter.ResolveDamageClassIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGameplayEventsWriter::ResolveDamageClassIndex ( )
{
	static UFunction* pFnResolveDamageClassIndex = NULL;

	if ( ! pFnResolveDamageClassIndex )
		pFnResolveDamageClassIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.ResolveDamageClassIndex" );

	UKFGameplayEventsWriter_execResolveDamageClassIndex_Parms ResolveDamageClassIndex_Parms;

	pFnResolveDamageClassIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveDamageClassIndex, &ResolveDamageClassIndex_Parms, NULL );

	pFnResolveDamageClassIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameplayEventsWriter.ResolveWeaponClassIndex
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGameplayEventsWriter::ResolveWeaponClassIndex ( )
{
	static UFunction* pFnResolveWeaponClassIndex = NULL;

	if ( ! pFnResolveWeaponClassIndex )
		pFnResolveWeaponClassIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayEventsWriter.ResolveWeaponClassIndex" );

	UKFGameplayEventsWriter_execResolveWeaponClassIndex_Parms ResolveWeaponClassIndex_Parms;

	pFnResolveWeaponClassIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResolveWeaponClassIndex, &ResolveWeaponClassIndex_Parms, NULL );

	pFnResolveWeaponClassIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFAnim_BlendByTargetingMode.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAnim_BlendByTargetingMode::SetActiveChild ( )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = UObject::FindObject< UFunction > ( "Function KFGame.KFAnim_BlendByTargetingMode.SetActiveChild" );

	UKFAnim_BlendByTargetingMode_execSetActiveChild_Parms SetActiveChild_Parms;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function KFGame.KFAnim_BlendList.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAnim_BlendList::SetActiveChild ( )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = UObject::FindObject< UFunction > ( "Function KFGame.KFAnim_BlendList.SetActiveChild" );

	UKFAnim_BlendList_execSetActiveChild_Parms SetActiveChild_Parms;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function KFGame.KFAnim_Movement.SetActiveChild
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAnim_Movement::SetActiveChild ( )
{
	static UFunction* pFnSetActiveChild = NULL;

	if ( ! pFnSetActiveChild )
		pFnSetActiveChild = UObject::FindObject< UFunction > ( "Function KFGame.KFAnim_Movement.SetActiveChild" );

	UKFAnim_Movement_execSetActiveChild_Parms SetActiveChild_Parms;

	pFnSetActiveChild->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActiveChild, &SetActiveChild_Parms, NULL );

	pFnSetActiveChild->FunctionFlags |= 0x400;
};

// Function KFGame.KFAnim_RandomScripted.QueueTauntWalk
// [0x00020002] 
// Parameters infos:

void UKFAnim_RandomScripted::QueueTauntWalk ( )
{
	static UFunction* pFnQueueTauntWalk = NULL;

	if ( ! pFnQueueTauntWalk )
		pFnQueueTauntWalk = UObject::FindObject< UFunction > ( "Function KFGame.KFAnim_RandomScripted.QueueTauntWalk" );

	UKFAnim_RandomScripted_execQueueTauntWalk_Parms QueueTauntWalk_Parms;

	this->ProcessEvent ( pFnQueueTauntWalk, &QueueTauntWalk_Parms, NULL );
};

// Function KFGame.KFAnim_RandomScripted.QueueAnimChild
// [0x00024002] 
// Parameters infos:

void UKFAnim_RandomScripted::QueueAnimChild ( )
{
	static UFunction* pFnQueueAnimChild = NULL;

	if ( ! pFnQueueAnimChild )
		pFnQueueAnimChild = UObject::FindObject< UFunction > ( "Function KFGame.KFAnim_RandomScripted.QueueAnimChild" );

	UKFAnim_RandomScripted_execQueueAnimChild_Parms QueueAnimChild_Parms;

	this->ProcessEvent ( pFnQueueAnimChild, &QueueAnimChild_Parms, NULL );
};

// Function KFGame.KFAnim_TurnInPlace.ResetRotation
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void UKFAnim_TurnInPlace::ResetRotation ( )
{
	static UFunction* pFnResetRotation = NULL;

	if ( ! pFnResetRotation )
		pFnResetRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFAnim_TurnInPlace.ResetRotation" );

	UKFAnim_TurnInPlace_execResetRotation_Parms ResetRotation_Parms;

	pFnResetRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetRotation, &ResetRotation_Parms, NULL );

	pFnResetRotation->FunctionFlags |= 0x400;
};

// Function KFGame.KFAnimNotify_Decal.CreateDecal
// [0x00420102] 
// Parameters infos:

void UKFAnimNotify_Decal::CreateDecal ( )
{
	static UFunction* pFnCreateDecal = NULL;

	if ( ! pFnCreateDecal )
		pFnCreateDecal = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_Decal.CreateDecal" );

	UKFAnimNotify_Decal_execCreateDecal_Parms CreateDecal_Parms;

	this->ProcessEvent ( pFnCreateDecal, &CreateDecal_Parms, NULL );
};

// Function KFGame.KFAnimNotify_Decal.SpawnDecal
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UKFAnimNotify_Decal::eventSpawnDecal ( )
{
	static UFunction* pFnSpawnDecal = NULL;

	if ( ! pFnSpawnDecal )
		pFnSpawnDecal = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_Decal.SpawnDecal" );

	UKFAnimNotify_Decal_eventSpawnDecal_Parms SpawnDecal_Parms;

	this->ProcessEvent ( pFnSpawnDecal, &SpawnDecal_Parms, NULL );
};

// Function KFGame.KFAnimNotify_MeleeImpact.NotifyThirdPerson
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFAnimNotify_MeleeImpact::eventNotifyThirdPerson ( )
{
	static UFunction* pFnNotifyThirdPerson = NULL;

	if ( ! pFnNotifyThirdPerson )
		pFnNotifyThirdPerson = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_MeleeImpact.NotifyThirdPerson" );

	UKFAnimNotify_MeleeImpact_eventNotifyThirdPerson_Parms NotifyThirdPerson_Parms;

	this->ProcessEvent ( pFnNotifyThirdPerson, &NotifyThirdPerson_Parms, NULL );
};

// Function KFGame.KFAnimNotify_MeleeImpact.NotifyFirstPerson
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFAnimNotify_MeleeImpact::eventNotifyFirstPerson ( )
{
	static UFunction* pFnNotifyFirstPerson = NULL;

	if ( ! pFnNotifyFirstPerson )
		pFnNotifyFirstPerson = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_MeleeImpact.NotifyFirstPerson" );

	UKFAnimNotify_MeleeImpact_eventNotifyFirstPerson_Parms NotifyFirstPerson_Parms;

	this->ProcessEvent ( pFnNotifyFirstPerson, &NotifyFirstPerson_Parms, NULL );
};

// Function KFGame.KFAnimNotify_MeleeImpact_1P.NotifyThirdPerson
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UKFAnimNotify_MeleeImpact_1P::eventNotifyThirdPerson ( )
{
	static UFunction* pFnNotifyThirdPerson = NULL;

	if ( ! pFnNotifyThirdPerson )
		pFnNotifyThirdPerson = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_MeleeImpact_1P.NotifyThirdPerson" );

	UKFAnimNotify_MeleeImpact_1P_eventNotifyThirdPerson_Parms NotifyThirdPerson_Parms;

	this->ProcessEvent ( pFnNotifyThirdPerson, &NotifyThirdPerson_Parms, NULL );
};

// Function KFGame.KFAnimNotify_MeleeImpact_1P.NotifyFirstPerson
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFAnimNotify_MeleeImpact_1P::eventNotifyFirstPerson ( )
{
	static UFunction* pFnNotifyFirstPerson = NULL;

	if ( ! pFnNotifyFirstPerson )
		pFnNotifyFirstPerson = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_MeleeImpact_1P.NotifyFirstPerson" );

	UKFAnimNotify_MeleeImpact_1P_eventNotifyFirstPerson_Parms NotifyFirstPerson_Parms;

	this->ProcessEvent ( pFnNotifyFirstPerson, &NotifyFirstPerson_Parms, NULL );
};

// Function KFGame.KFAnimSeq_Tween.PlayAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFAnimSeq_Tween::PlayAnim ( )
{
	static UFunction* pFnPlayAnim = NULL;

	if ( ! pFnPlayAnim )
		pFnPlayAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimSeq_Tween.PlayAnim" );

	UKFAnimSeq_Tween_execPlayAnim_Parms PlayAnim_Parms;

	pFnPlayAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayAnim, &PlayAnim_Parms, NULL );

	pFnPlayAnim->FunctionFlags |= 0x400;
};

// Function KFGame.KFAnimSeq_Tween.SetTweenTime
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAnimSeq_Tween::SetTweenTime ( )
{
	static UFunction* pFnSetTweenTime = NULL;

	if ( ! pFnSetTweenTime )
		pFnSetTweenTime = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimSeq_Tween.SetTweenTime" );

	UKFAnimSeq_Tween_execSetTweenTime_Parms SetTweenTime_Parms;

	pFnSetTweenTime->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTweenTime, &SetTweenTime_Parms, NULL );

	pFnSetTweenTime->FunctionFlags |= 0x400;
};

// Function KFGame.KFAnimSeq_Tween.SetAnim
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFAnimSeq_Tween::SetAnim ( )
{
	static UFunction* pFnSetAnim = NULL;

	if ( ! pFnSetAnim )
		pFnSetAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimSeq_Tween.SetAnim" );

	UKFAnimSeq_Tween_execSetAnim_Parms SetAnim_Parms;

	pFnSetAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetAnim, &SetAnim_Parms, NULL );

	pFnSetAnim->FunctionFlags |= 0x400;
};

// Function KFGame.KFSkelControl_SprayScaling.ResetTransients
// [0x00020102] 
// Parameters infos:

void UKFSkelControl_SprayScaling::ResetTransients ( )
{
	static UFunction* pFnResetTransients = NULL;

	if ( ! pFnResetTransients )
		pFnResetTransients = UObject::FindObject< UFunction > ( "Function KFGame.KFSkelControl_SprayScaling.ResetTransients" );

	UKFSkelControl_SprayScaling_execResetTransients_Parms ResetTransients_Parms;

	this->ProcessEvent ( pFnResetTransients, &ResetTransients_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.PostRenderFor
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFSceneCaptureDebugCam::eventPostRenderFor ( )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.PostRenderFor" );

	AKFSceneCaptureDebugCam_eventPostRenderFor_Parms PostRenderFor_Parms;

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.RestoreFocusPawnMeshProperties
// [0x00020002] 
// Parameters infos:

void AKFSceneCaptureDebugCam::RestoreFocusPawnMeshProperties ( )
{
	static UFunction* pFnRestoreFocusPawnMeshProperties = NULL;

	if ( ! pFnRestoreFocusPawnMeshProperties )
		pFnRestoreFocusPawnMeshProperties = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.RestoreFocusPawnMeshProperties" );

	AKFSceneCaptureDebugCam_execRestoreFocusPawnMeshProperties_Parms RestoreFocusPawnMeshProperties_Parms;

	this->ProcessEvent ( pFnRestoreFocusPawnMeshProperties, &RestoreFocusPawnMeshProperties_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.CacheAndUpdateFocusPawnMeshProperties
// [0x00020002] 
// Parameters infos:

void AKFSceneCaptureDebugCam::CacheAndUpdateFocusPawnMeshProperties ( )
{
	static UFunction* pFnCacheAndUpdateFocusPawnMeshProperties = NULL;

	if ( ! pFnCacheAndUpdateFocusPawnMeshProperties )
		pFnCacheAndUpdateFocusPawnMeshProperties = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.CacheAndUpdateFocusPawnMeshProperties" );

	AKFSceneCaptureDebugCam_execCacheAndUpdateFocusPawnMeshProperties_Parms CacheAndUpdateFocusPawnMeshProperties_Parms;

	this->ProcessEvent ( pFnCacheAndUpdateFocusPawnMeshProperties, &CacheAndUpdateFocusPawnMeshProperties_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.PauseDebugSceneUpdate
// [0x00020002] 
// Parameters infos:

void AKFSceneCaptureDebugCam::PauseDebugSceneUpdate ( )
{
	static UFunction* pFnPauseDebugSceneUpdate = NULL;

	if ( ! pFnPauseDebugSceneUpdate )
		pFnPauseDebugSceneUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.PauseDebugSceneUpdate" );

	AKFSceneCaptureDebugCam_execPauseDebugSceneUpdate_Parms PauseDebugSceneUpdate_Parms;

	this->ProcessEvent ( pFnPauseDebugSceneUpdate, &PauseDebugSceneUpdate_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.SetDebugSceneViewMode
// [0x00020002] 
// Parameters infos:

void AKFSceneCaptureDebugCam::SetDebugSceneViewMode ( )
{
	static UFunction* pFnSetDebugSceneViewMode = NULL;

	if ( ! pFnSetDebugSceneViewMode )
		pFnSetDebugSceneViewMode = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.SetDebugSceneViewMode" );

	AKFSceneCaptureDebugCam_execSetDebugSceneViewMode_Parms SetDebugSceneViewMode_Parms;

	this->ProcessEvent ( pFnSetDebugSceneViewMode, &SetDebugSceneViewMode_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.ToggleLockFocus
// [0x00020002] 
// Parameters infos:

void AKFSceneCaptureDebugCam::ToggleLockFocus ( )
{
	static UFunction* pFnToggleLockFocus = NULL;

	if ( ! pFnToggleLockFocus )
		pFnToggleLockFocus = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.ToggleLockFocus" );

	AKFSceneCaptureDebugCam_execToggleLockFocus_Parms ToggleLockFocus_Parms;

	this->ProcessEvent ( pFnToggleLockFocus, &ToggleLockFocus_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.MoveToMyPawnLocation
// [0x00820002] 
// Parameters infos:

void AKFSceneCaptureDebugCam::MoveToMyPawnLocation ( )
{
	static UFunction* pFnMoveToMyPawnLocation = NULL;

	if ( ! pFnMoveToMyPawnLocation )
		pFnMoveToMyPawnLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.MoveToMyPawnLocation" );

	AKFSceneCaptureDebugCam_execMoveToMyPawnLocation_Parms MoveToMyPawnLocation_Parms;

	this->ProcessEvent ( pFnMoveToMyPawnLocation, &MoveToMyPawnLocation_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.ToggleDebugSceneOrbit
// [0x00020002] 
// Parameters infos:

void AKFSceneCaptureDebugCam::ToggleDebugSceneOrbit ( )
{
	static UFunction* pFnToggleDebugSceneOrbit = NULL;

	if ( ! pFnToggleDebugSceneOrbit )
		pFnToggleDebugSceneOrbit = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.ToggleDebugSceneOrbit" );

	AKFSceneCaptureDebugCam_execToggleDebugSceneOrbit_Parms ToggleDebugSceneOrbit_Parms;

	this->ProcessEvent ( pFnToggleDebugSceneOrbit, &ToggleDebugSceneOrbit_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.DestroyDebugScene
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFSceneCaptureDebugCam::eventDestroyDebugScene ( )
{
	static UFunction* pFnDestroyDebugScene = NULL;

	if ( ! pFnDestroyDebugScene )
		pFnDestroyDebugScene = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.DestroyDebugScene" );

	AKFSceneCaptureDebugCam_eventDestroyDebugScene_Parms DestroyDebugScene_Parms;

	this->ProcessEvent ( pFnDestroyDebugScene, &DestroyDebugScene_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.InitDebugScene
// [0x00824002] 
// Parameters infos:

void AKFSceneCaptureDebugCam::InitDebugScene ( )
{
	static UFunction* pFnInitDebugScene = NULL;

	if ( ! pFnInitDebugScene )
		pFnInitDebugScene = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.InitDebugScene" );

	AKFSceneCaptureDebugCam_execInitDebugScene_Parms InitDebugScene_Parms;

	this->ProcessEvent ( pFnInitDebugScene, &InitDebugScene_Parms, NULL );
};

// Function KFGame.KFSceneCaptureDebugCam.GetDebugSceneViewPoint
// [0x00420500] ( FUNC_Native )
// Parameters infos:

void AKFSceneCaptureDebugCam::GetDebugSceneViewPoint ( )
{
	static UFunction* pFnGetDebugSceneViewPoint = NULL;

	if ( ! pFnGetDebugSceneViewPoint )
		pFnGetDebugSceneViewPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.GetDebugSceneViewPoint" );

	AKFSceneCaptureDebugCam_execGetDebugSceneViewPoint_Parms GetDebugSceneViewPoint_Parms;

	pFnGetDebugSceneViewPoint->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDebugSceneViewPoint, &GetDebugSceneViewPoint_Parms, NULL );

	pFnGetDebugSceneViewPoint->FunctionFlags |= 0x400;
};

// Function KFGame.KFSceneCaptureDebugCam.NativePostRenderFor
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFSceneCaptureDebugCam::NativePostRenderFor ( )
{
	static UFunction* pFnNativePostRenderFor = NULL;

	if ( ! pFnNativePostRenderFor )
		pFnNativePostRenderFor = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.NativePostRenderFor" );

	AKFSceneCaptureDebugCam_execNativePostRenderFor_Parms NativePostRenderFor_Parms;

	pFnNativePostRenderFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnNativePostRenderFor, &NativePostRenderFor_Parms, NULL );

	pFnNativePostRenderFor->FunctionFlags |= 0x400;
};

// Function KFGame.KFSceneCaptureDebugCam.CreateDebugTexture
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFSceneCaptureDebugCam::CreateDebugTexture ( )
{
	static UFunction* pFnCreateDebugTexture = NULL;

	if ( ! pFnCreateDebugTexture )
		pFnCreateDebugTexture = UObject::FindObject< UFunction > ( "Function KFGame.KFSceneCaptureDebugCam.CreateDebugTexture" );

	AKFSceneCaptureDebugCam_execCreateDebugTexture_Parms CreateDebugTexture_Parms;

	pFnCreateDebugTexture->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCreateDebugTexture, &CreateDebugTexture_Parms, NULL );

	pFnCreateDebugTexture->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugCameraController.NativeInputKey
// [0x00824002] 
// Parameters infos:

void AKFDebugCameraController::NativeInputKey ( )
{
	static UFunction* pFnNativeInputKey = NULL;

	if ( ! pFnNativeInputKey )
		pFnNativeInputKey = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.NativeInputKey" );

	AKFDebugCameraController_execNativeInputKey_Parms NativeInputKey_Parms;

	this->ProcessEvent ( pFnNativeInputKey, &NativeInputKey_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:

void AKFDebugCameraController::eventGetPlayerViewPoint ( )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.GetPlayerViewPoint" );

	AKFDebugCameraController_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.ServerUpdateCamera
// [0x00A20042] 
// Parameters infos:

void AKFDebugCameraController::ServerUpdateCamera ( )
{
	static UFunction* pFnServerUpdateCamera = NULL;

	if ( ! pFnServerUpdateCamera )
		pFnServerUpdateCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.ServerUpdateCamera" );

	AKFDebugCameraController_execServerUpdateCamera_Parms ServerUpdateCamera_Parms;

	this->ProcessEvent ( pFnServerUpdateCamera, &ServerUpdateCamera_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.GetDebugSceneViewPoint
// [0x00420002] 
// Parameters infos:

void AKFDebugCameraController::GetDebugSceneViewPoint ( )
{
	static UFunction* pFnGetDebugSceneViewPoint = NULL;

	if ( ! pFnGetDebugSceneViewPoint )
		pFnGetDebugSceneViewPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.GetDebugSceneViewPoint" );

	AKFDebugCameraController_execGetDebugSceneViewPoint_Parms GetDebugSceneViewPoint_Parms;

	this->ProcessEvent ( pFnGetDebugSceneViewPoint, &GetDebugSceneViewPoint_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.ToggleSelectedActorView
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFDebugCameraController::ToggleSelectedActorView ( )
{
	static UFunction* pFnToggleSelectedActorView = NULL;

	if ( ! pFnToggleSelectedActorView )
		pFnToggleSelectedActorView = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.ToggleSelectedActorView" );

	AKFDebugCameraController_execToggleSelectedActorView_Parms ToggleSelectedActorView_Parms;

	this->ProcessEvent ( pFnToggleSelectedActorView, &ToggleSelectedActorView_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.SetMoveOffset
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFDebugCameraController::SetMoveOffset ( )
{
	static UFunction* pFnSetMoveOffset = NULL;

	if ( ! pFnSetMoveOffset )
		pFnSetMoveOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.SetMoveOffset" );

	AKFDebugCameraController_execSetMoveOffset_Parms SetMoveOffset_Parms;

	this->ProcessEvent ( pFnSetMoveOffset, &SetMoveOffset_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.ToggleDebugViewFocus
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFDebugCameraController::ToggleDebugViewFocus ( )
{
	static UFunction* pFnToggleDebugViewFocus = NULL;

	if ( ! pFnToggleDebugViewFocus )
		pFnToggleDebugViewFocus = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.ToggleDebugViewFocus" );

	AKFDebugCameraController_execToggleDebugViewFocus_Parms ToggleDebugViewFocus_Parms;

	this->ProcessEvent ( pFnToggleDebugViewFocus, &ToggleDebugViewFocus_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.AIShowSelectedInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFDebugCameraController::AIShowSelectedInfo ( )
{
	static UFunction* pFnAIShowSelectedInfo = NULL;

	if ( ! pFnAIShowSelectedInfo )
		pFnAIShowSelectedInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.AIShowSelectedInfo" );

	AKFDebugCameraController_execAIShowSelectedInfo_Parms AIShowSelectedInfo_Parms;

	this->ProcessEvent ( pFnAIShowSelectedInfo, &AIShowSelectedInfo_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.AIMoveForward
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFDebugCameraController::AIMoveForward ( )
{
	static UFunction* pFnAIMoveForward = NULL;

	if ( ! pFnAIMoveForward )
		pFnAIMoveForward = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.AIMoveForward" );

	AKFDebugCameraController_execAIMoveForward_Parms AIMoveForward_Parms;

	this->ProcessEvent ( pFnAIMoveForward, &AIMoveForward_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.ServerCauseEvent
// [0x00220042] 
// Parameters infos:

void AKFDebugCameraController::ServerCauseEvent ( )
{
	static UFunction* pFnServerCauseEvent = NULL;

	if ( ! pFnServerCauseEvent )
		pFnServerCauseEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.ServerCauseEvent" );

	AKFDebugCameraController_execServerCauseEvent_Parms ServerCauseEvent_Parms;

	this->ProcessEvent ( pFnServerCauseEvent, &ServerCauseEvent_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.GetDebugCommand
// [0x00020002] 
// Parameters infos:

void AKFDebugCameraController::GetDebugCommand ( )
{
	static UFunction* pFnGetDebugCommand = NULL;

	if ( ! pFnGetDebugCommand )
		pFnGetDebugCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.GetDebugCommand" );

	AKFDebugCameraController_execGetDebugCommand_Parms GetDebugCommand_Parms;

	this->ProcessEvent ( pFnGetDebugCommand, &GetDebugCommand_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.AddCheats
// [0x00024002] 
// Parameters infos:

void AKFDebugCameraController::AddCheats ( )
{
	static UFunction* pFnAddCheats = NULL;

	if ( ! pFnAddCheats )
		pFnAddCheats = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.AddCheats" );

	AKFDebugCameraController_execAddCheats_Parms AddCheats_Parms;

	this->ProcessEvent ( pFnAddCheats, &AddCheats_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.OnActivate
// [0x00020002] 
// Parameters infos:

void AKFDebugCameraController::OnActivate ( )
{
	static UFunction* pFnOnActivate = NULL;

	if ( ! pFnOnActivate )
		pFnOnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.OnActivate" );

	AKFDebugCameraController_execOnActivate_Parms OnActivate_Parms;

	this->ProcessEvent ( pFnOnActivate, &OnActivate_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.DisableDebugCamera
// [0x00020002] 
// Parameters infos:

void AKFDebugCameraController::DisableDebugCamera ( )
{
	static UFunction* pFnDisableDebugCamera = NULL;

	if ( ! pFnDisableDebugCamera )
		pFnDisableDebugCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.DisableDebugCamera" );

	AKFDebugCameraController_execDisableDebugCamera_Parms DisableDebugCamera_Parms;

	this->ProcessEvent ( pFnDisableDebugCamera, &DisableDebugCamera_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.OnDeactivate
// [0x00020002] 
// Parameters infos:

void AKFDebugCameraController::OnDeactivate ( )
{
	static UFunction* pFnOnDeactivate = NULL;

	if ( ! pFnOnDeactivate )
		pFnOnDeactivate = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.OnDeactivate" );

	AKFDebugCameraController_execOnDeactivate_Parms OnDeactivate_Parms;

	this->ProcessEvent ( pFnOnDeactivate, &OnDeactivate_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDebugCameraController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.PostBeginPlay" );

	AKFDebugCameraController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFDebugCameraController.Unselect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFDebugCameraController::Unselect ( )
{
	static UFunction* pFnUnselect = NULL;

	if ( ! pFnUnselect )
		pFnUnselect = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.Unselect" );

	AKFDebugCameraController_execUnselect_Parms Unselect_Parms;

	pFnUnselect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnselect, &Unselect_Parms, NULL );

	pFnUnselect->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugCameraController.SecondarySelect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFDebugCameraController::SecondarySelect ( )
{
	static UFunction* pFnSecondarySelect = NULL;

	if ( ! pFnSecondarySelect )
		pFnSecondarySelect = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.SecondarySelect" );

	AKFDebugCameraController_execSecondarySelect_Parms SecondarySelect_Parms;

	pFnSecondarySelect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSecondarySelect, &SecondarySelect_Parms, NULL );

	pFnSecondarySelect->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugCameraController.PrimarySelect
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFDebugCameraController::PrimarySelect ( )
{
	static UFunction* pFnPrimarySelect = NULL;

	if ( ! pFnPrimarySelect )
		pFnPrimarySelect = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraController.PrimarySelect" );

	AKFDebugCameraController_execPrimarySelect_Parms PrimarySelect_Parms;

	pFnPrimarySelect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPrimarySelect, &PrimarySelect_Parms, NULL );

	pFnPrimarySelect->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.CreateDiscordGamePresence
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::CreateDiscordGamePresence ( )
{
	static UFunction* pFnCreateDiscordGamePresence = NULL;

	if ( ! pFnCreateDiscordGamePresence )
		pFnCreateDiscordGamePresence = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CreateDiscordGamePresence" );

	AKFPlayerController_execCreateDiscordGamePresence_Parms CreateDiscordGamePresence_Parms;

	this->ProcessEvent ( pFnCreateDiscordGamePresence, &CreateDiscordGamePresence_Parms, NULL );
};

// Function KFGame.KFPlayerController.CreateDiscordMenuPresence
// [0x00820102] 
// Parameters infos:

void AKFPlayerController::CreateDiscordMenuPresence ( )
{
	static UFunction* pFnCreateDiscordMenuPresence = NULL;

	if ( ! pFnCreateDiscordMenuPresence )
		pFnCreateDiscordMenuPresence = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CreateDiscordMenuPresence" );

	AKFPlayerController_execCreateDiscordMenuPresence_Parms CreateDiscordMenuPresence_Parms;

	this->ProcessEvent ( pFnCreateDiscordMenuPresence, &CreateDiscordMenuPresence_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateDiscordRichPresence
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::UpdateDiscordRichPresence ( )
{
	static UFunction* pFnUpdateDiscordRichPresence = NULL;

	if ( ! pFnUpdateDiscordRichPresence )
		pFnUpdateDiscordRichPresence = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateDiscordRichPresence" );

	AKFPlayerController_execUpdateDiscordRichPresence_Parms UpdateDiscordRichPresence_Parms;

	this->ProcessEvent ( pFnUpdateDiscordRichPresence, &UpdateDiscordRichPresence_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateDiscord
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventUpdateDiscord ( )
{
	static UFunction* pFnUpdateDiscord = NULL;

	if ( ! pFnUpdateDiscord )
		pFnUpdateDiscord = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateDiscord" );

	AKFPlayerController_eventUpdateDiscord_Parms UpdateDiscord_Parms;

	this->ProcessEvent ( pFnUpdateDiscord, &UpdateDiscord_Parms, NULL );
};

// Function KFGame.KFPlayerController.JoinDiscordLobby
// [0x00820102] 
// Parameters infos:

void AKFPlayerController::JoinDiscordLobby ( )
{
	static UFunction* pFnJoinDiscordLobby = NULL;

	if ( ! pFnJoinDiscordLobby )
		pFnJoinDiscordLobby = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.JoinDiscordLobby" );

	AKFPlayerController_execJoinDiscordLobby_Parms JoinDiscordLobby_Parms;

	this->ProcessEvent ( pFnJoinDiscordLobby, &JoinDiscordLobby_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClearDiscord
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::ClearDiscord ( )
{
	static UFunction* pFnClearDiscord = NULL;

	if ( ! pFnClearDiscord )
		pFnClearDiscord = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClearDiscord" );

	AKFPlayerController_execClearDiscord_Parms ClearDiscord_Parms;

	this->ProcessEvent ( pFnClearDiscord, &ClearDiscord_Parms, NULL );
};

// Function KFGame.KFPlayerController.InitDiscord
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::InitDiscord ( )
{
	static UFunction* pFnInitDiscord = NULL;

	if ( ! pFnInitDiscord )
		pFnInitDiscord = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.InitDiscord" );

	AKFPlayerController_execInitDiscord_Parms InitDiscord_Parms;

	this->ProcessEvent ( pFnInitDiscord, &InitDiscord_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientSpawnCameraLensEffect
// [0x01020942] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientSpawnCameraLensEffect ( )
{
	static UFunction* pFnClientSpawnCameraLensEffect = NULL;

	if ( ! pFnClientSpawnCameraLensEffect )
		pFnClientSpawnCameraLensEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSpawnCameraLensEffect" );

	AKFPlayerController_eventClientSpawnCameraLensEffect_Parms ClientSpawnCameraLensEffect_Parms;

	this->ProcessEvent ( pFnClientSpawnCameraLensEffect, &ClientSpawnCameraLensEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateAlienFX
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventUpdateAlienFX ( )
{
	static UFunction* pFnUpdateAlienFX = NULL;

	if ( ! pFnUpdateAlienFX )
		pFnUpdateAlienFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateAlienFX" );

	AKFPlayerController_eventUpdateAlienFX_Parms UpdateAlienFX_Parms;

	this->ProcessEvent ( pFnUpdateAlienFX, &UpdateAlienFX_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientInitLEDManager
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientInitLEDManager ( )
{
	static UFunction* pFnClientInitLEDManager = NULL;

	if ( ! pFnClientInitLEDManager )
		pFnClientInitLEDManager = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientInitLEDManager" );

	AKFPlayerController_execClientInitLEDManager_Parms ClientInitLEDManager_Parms;

	this->ProcessEvent ( pFnClientInitLEDManager, &ClientInitLEDManager_Parms, NULL );
};

// Function KFGame.KFPlayerController.InitLEDManager
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::InitLEDManager ( )
{
	static UFunction* pFnInitLEDManager = NULL;

	if ( ! pFnInitLEDManager )
		pFnInitLEDManager = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.InitLEDManager" );

	AKFPlayerController_execInitLEDManager_Parms InitLEDManager_Parms;

	this->ProcessEvent ( pFnInitLEDManager, &InitLEDManager_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerMoveUserToGroup
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerMoveUserToGroup ( )
{
	static UFunction* pFnMixerMoveUserToGroup = NULL;

	if ( ! pFnMixerMoveUserToGroup )
		pFnMixerMoveUserToGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerMoveUserToGroup" );

	AKFPlayerController_execMixerMoveUserToGroup_Parms MixerMoveUserToGroup_Parms;

	this->ProcessEvent ( pFnMixerMoveUserToGroup, &MixerMoveUserToGroup_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerSpawnZed
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerSpawnZed ( )
{
	static UFunction* pFnMixerSpawnZed = NULL;

	if ( ! pFnMixerSpawnZed )
		pFnMixerSpawnZed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerSpawnZed" );

	AKFPlayerController_execMixerSpawnZed_Parms MixerSpawnZed_Parms;

	this->ProcessEvent ( pFnMixerSpawnZed, &MixerSpawnZed_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerPukeUser
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerPukeUser ( )
{
	static UFunction* pFnMixerPukeUser = NULL;

	if ( ! pFnMixerPukeUser )
		pFnMixerPukeUser = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerPukeUser" );

	AKFPlayerController_execMixerPukeUser_Parms MixerPukeUser_Parms;

	this->ProcessEvent ( pFnMixerPukeUser, &MixerPukeUser_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerEnrageZeds
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerEnrageZeds ( )
{
	static UFunction* pFnMixerEnrageZeds = NULL;

	if ( ! pFnMixerEnrageZeds )
		pFnMixerEnrageZeds = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerEnrageZeds" );

	AKFPlayerController_execMixerEnrageZeds_Parms MixerEnrageZeds_Parms;

	this->ProcessEvent ( pFnMixerEnrageZeds, &MixerEnrageZeds_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerCauseZedTime
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerCauseZedTime ( )
{
	static UFunction* pFnMixerCauseZedTime = NULL;

	if ( ! pFnMixerCauseZedTime )
		pFnMixerCauseZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerCauseZedTime" );

	AKFPlayerController_execMixerCauseZedTime_Parms MixerCauseZedTime_Parms;

	this->ProcessEvent ( pFnMixerCauseZedTime, &MixerCauseZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerHealUser
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerHealUser ( )
{
	static UFunction* pFnMixerHealUser = NULL;

	if ( ! pFnMixerHealUser )
		pFnMixerHealUser = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerHealUser" );

	AKFPlayerController_execMixerHealUser_Parms MixerHealUser_Parms;

	this->ProcessEvent ( pFnMixerHealUser, &MixerHealUser_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerGiveGrenades
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerGiveGrenades ( )
{
	static UFunction* pFnMixerGiveGrenades = NULL;

	if ( ! pFnMixerGiveGrenades )
		pFnMixerGiveGrenades = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerGiveGrenades" );

	AKFPlayerController_execMixerGiveGrenades_Parms MixerGiveGrenades_Parms;

	this->ProcessEvent ( pFnMixerGiveGrenades, &MixerGiveGrenades_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerGiveDosh
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerGiveDosh ( )
{
	static UFunction* pFnMixerGiveDosh = NULL;

	if ( ! pFnMixerGiveDosh )
		pFnMixerGiveDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerGiveDosh" );

	AKFPlayerController_execMixerGiveDosh_Parms MixerGiveDosh_Parms;

	this->ProcessEvent ( pFnMixerGiveDosh, &MixerGiveDosh_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerGiveArmor
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerGiveArmor ( )
{
	static UFunction* pFnMixerGiveArmor = NULL;

	if ( ! pFnMixerGiveArmor )
		pFnMixerGiveArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerGiveArmor" );

	AKFPlayerController_execMixerGiveArmor_Parms MixerGiveArmor_Parms;

	this->ProcessEvent ( pFnMixerGiveArmor, &MixerGiveArmor_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerGiveAmmo
// [0x002440C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerGiveAmmo ( )
{
	static UFunction* pFnMixerGiveAmmo = NULL;

	if ( ! pFnMixerGiveAmmo )
		pFnMixerGiveAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerGiveAmmo" );

	AKFPlayerController_execMixerGiveAmmo_Parms MixerGiveAmmo_Parms;

	this->ProcessEvent ( pFnMixerGiveAmmo, &MixerGiveAmmo_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerServerCallback
// [0x010441C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerServerCallback ( )
{
	static UFunction* pFnMixerServerCallback = NULL;

	if ( ! pFnMixerServerCallback )
		pFnMixerServerCallback = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerServerCallback" );

	AKFPlayerController_execMixerServerCallback_Parms MixerServerCallback_Parms;

	this->ProcessEvent ( pFnMixerServerCallback, &MixerServerCallback_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerServerTest
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerServerTest ( )
{
	static UFunction* pFnMixerServerTest = NULL;

	if ( ! pFnMixerServerTest )
		pFnMixerServerTest = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerServerTest" );

	AKFPlayerController_execMixerServerTest_Parms MixerServerTest_Parms;

	this->ProcessEvent ( pFnMixerServerTest, &MixerServerTest_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerClientTest
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerClientTest ( )
{
	static UFunction* pFnMixerClientTest = NULL;

	if ( ! pFnMixerClientTest )
		pFnMixerClientTest = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerClientTest" );

	AKFPlayerController_execMixerClientTest_Parms MixerClientTest_Parms;

	this->ProcessEvent ( pFnMixerClientTest, &MixerClientTest_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleMixerButtonEvent
// [0x00440103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::HandleMixerButtonEvent ( )
{
	static UFunction* pFnHandleMixerButtonEvent = NULL;

	if ( ! pFnHandleMixerButtonEvent )
		pFnHandleMixerButtonEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleMixerButtonEvent" );

	AKFPlayerController_execHandleMixerButtonEvent_Parms HandleMixerButtonEvent_Parms;

	this->ProcessEvent ( pFnHandleMixerButtonEvent, &HandleMixerButtonEvent_Parms, NULL );
};

// Function KFGame.KFPlayerController.TestMixerCall
// [0x00420103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::TestMixerCall ( )
{
	static UFunction* pFnTestMixerCall = NULL;

	if ( ! pFnTestMixerCall )
		pFnTestMixerCall = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TestMixerCall" );

	AKFPlayerController_execTestMixerCall_Parms TestMixerCall_Parms;

	this->ProcessEvent ( pFnTestMixerCall, &TestMixerCall_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetGroupList
// [0x00420103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::GetGroupList ( )
{
	static UFunction* pFnGetGroupList = NULL;

	if ( ! pFnGetGroupList )
		pFnGetGroupList = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetGroupList" );

	AKFPlayerController_execGetGroupList_Parms GetGroupList_Parms;

	this->ProcessEvent ( pFnGetGroupList, &GetGroupList_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateMixer
// [0x00020903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventUpdateMixer ( )
{
	static UFunction* pFnUpdateMixer = NULL;

	if ( ! pFnUpdateMixer )
		pFnUpdateMixer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateMixer" );

	AKFPlayerController_eventUpdateMixer_Parms UpdateMixer_Parms;

	this->ProcessEvent ( pFnUpdateMixer, &UpdateMixer_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClearMixerDelegates
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ClearMixerDelegates ( )
{
	static UFunction* pFnClearMixerDelegates = NULL;

	if ( ! pFnClearMixerDelegates )
		pFnClearMixerDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClearMixerDelegates" );

	AKFPlayerController_execClearMixerDelegates_Parms ClearMixerDelegates_Parms;

	this->ProcessEvent ( pFnClearMixerDelegates, &ClearMixerDelegates_Parms, NULL );
};

// Function KFGame.KFPlayerController.InitMixerDelegates
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::InitMixerDelegates ( )
{
	static UFunction* pFnInitMixerDelegates = NULL;

	if ( ! pFnInitMixerDelegates )
		pFnInitMixerDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.InitMixerDelegates" );

	AKFPlayerController_execInitMixerDelegates_Parms InitMixerDelegates_Parms;

	this->ProcessEvent ( pFnInitMixerDelegates, &InitMixerDelegates_Parms, NULL );
};

// Function KFGame.KFPlayerController.ShutdownMixer
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ShutdownMixer ( )
{
	static UFunction* pFnShutdownMixer = NULL;

	if ( ! pFnShutdownMixer )
		pFnShutdownMixer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ShutdownMixer" );

	AKFPlayerController_execShutdownMixer_Parms ShutdownMixer_Parms;

	this->ProcessEvent ( pFnShutdownMixer, &ShutdownMixer_Parms, NULL );
};

// Function KFGame.KFPlayerController.InitializeMixer
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::InitializeMixer ( )
{
	static UFunction* pFnInitializeMixer = NULL;

	if ( ! pFnInitializeMixer )
		pFnInitializeMixer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.InitializeMixer" );

	AKFPlayerController_execInitializeMixer_Parms InitializeMixer_Parms;

	this->ProcessEvent ( pFnInitializeMixer, &InitializeMixer_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerMoveUsersToDefaultGroup
// [0x00080103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::MixerMoveUsersToDefaultGroup ( )
{
	static UFunction* pFnMixerMoveUsersToDefaultGroup = NULL;

	if ( ! pFnMixerMoveUsersToDefaultGroup )
		pFnMixerMoveUsersToDefaultGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerMoveUsersToDefaultGroup" );

	AKFPlayerController_execMixerMoveUsersToDefaultGroup_Parms MixerMoveUsersToDefaultGroup_Parms;

	this->ProcessEvent ( pFnMixerMoveUsersToDefaultGroup, &MixerMoveUsersToDefaultGroup_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetCurrentDefaultMixerScene
// [0x00420103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::GetCurrentDefaultMixerScene ( )
{
	static UFunction* pFnGetCurrentDefaultMixerScene = NULL;

	if ( ! pFnGetCurrentDefaultMixerScene )
		pFnGetCurrentDefaultMixerScene = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetCurrentDefaultMixerScene" );

	AKFPlayerController_execGetCurrentDefaultMixerScene_Parms GetCurrentDefaultMixerScene_Parms;

	this->ProcessEvent ( pFnGetCurrentDefaultMixerScene, &GetCurrentDefaultMixerScene_Parms, NULL );
};

// Function KFGame.KFPlayerController.MixerStartupComplete
// [0x00080102] 
// Parameters infos:

void AKFPlayerController::MixerStartupComplete ( )
{
	static UFunction* pFnMixerStartupComplete = NULL;

	if ( ! pFnMixerStartupComplete )
		pFnMixerStartupComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MixerStartupComplete" );

	AKFPlayerController_execMixerStartupComplete_Parms MixerStartupComplete_Parms;

	this->ProcessEvent ( pFnMixerStartupComplete, &MixerStartupComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientMatchEnded
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientMatchEnded ( )
{
	static UFunction* pFnClientMatchEnded = NULL;

	if ( ! pFnClientMatchEnded )
		pFnClientMatchEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientMatchEnded" );

	AKFPlayerController_execClientMatchEnded_Parms ClientMatchEnded_Parms;

	this->ProcessEvent ( pFnClientMatchEnded, &ClientMatchEnded_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientMatchStarted
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientMatchStarted ( )
{
	static UFunction* pFnClientMatchStarted = NULL;

	if ( ! pFnClientMatchStarted )
		pFnClientMatchStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientMatchStarted" );

	AKFPlayerController_execClientMatchStarted_Parms ClientMatchStarted_Parms;

	this->ProcessEvent ( pFnClientMatchStarted, &ClientMatchStarted_Parms, NULL );
};

// Function KFGame.KFPlayerController.PerformLogout
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::PerformLogout ( )
{
	static UFunction* pFnPerformLogout = NULL;

	if ( ! pFnPerformLogout )
		pFnPerformLogout = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PerformLogout" );

	AKFPlayerController_execPerformLogout_Parms PerformLogout_Parms;

	this->ProcessEvent ( pFnPerformLogout, &PerformLogout_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnClientTitleDataRead
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnClientTitleDataRead ( )
{
	static UFunction* pFnOnClientTitleDataRead = NULL;

	if ( ! pFnOnClientTitleDataRead )
		pFnOnClientTitleDataRead = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnClientTitleDataRead" );

	AKFPlayerController_execOnClientTitleDataRead_Parms OnClientTitleDataRead_Parms;

	this->ProcessEvent ( pFnOnClientTitleDataRead, &OnClientTitleDataRead_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnPlayfabLoginComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnPlayfabLoginComplete ( )
{
	static UFunction* pFnOnPlayfabLoginComplete = NULL;

	if ( ! pFnOnPlayfabLoginComplete )
		pFnOnPlayfabLoginComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnPlayfabLoginComplete" );

	AKFPlayerController_execOnPlayfabLoginComplete_Parms OnPlayfabLoginComplete_Parms;

	this->ProcessEvent ( pFnOnPlayfabLoginComplete, &OnPlayfabLoginComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnCanPlayOnlineCheckForMatchmakingComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnCanPlayOnlineCheckForMatchmakingComplete ( )
{
	static UFunction* pFnOnCanPlayOnlineCheckForMatchmakingComplete = NULL;

	if ( ! pFnOnCanPlayOnlineCheckForMatchmakingComplete )
		pFnOnCanPlayOnlineCheckForMatchmakingComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnCanPlayOnlineCheckForMatchmakingComplete" );

	AKFPlayerController_execOnCanPlayOnlineCheckForMatchmakingComplete_Parms OnCanPlayOnlineCheckForMatchmakingComplete_Parms;

	this->ProcessEvent ( pFnOnCanPlayOnlineCheckForMatchmakingComplete, &OnCanPlayOnlineCheckForMatchmakingComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnBuyGamePressed
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnBuyGamePressed ( )
{
	static UFunction* pFnOnBuyGamePressed = NULL;

	if ( ! pFnOnBuyGamePressed )
		pFnOnBuyGamePressed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnBuyGamePressed" );

	AKFPlayerController_execOnBuyGamePressed_Parms OnBuyGamePressed_Parms;

	this->ProcessEvent ( pFnOnBuyGamePressed, &OnBuyGamePressed_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckPrivilegesForMultiplayer
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CheckPrivilegesForMultiplayer ( )
{
	static UFunction* pFnCheckPrivilegesForMultiplayer = NULL;

	if ( ! pFnCheckPrivilegesForMultiplayer )
		pFnCheckPrivilegesForMultiplayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckPrivilegesForMultiplayer" );

	AKFPlayerController_execCheckPrivilegesForMultiplayer_Parms CheckPrivilegesForMultiplayer_Parms;

	this->ProcessEvent ( pFnCheckPrivilegesForMultiplayer, &CheckPrivilegesForMultiplayer_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnOSSLoginComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnOSSLoginComplete ( )
{
	static UFunction* pFnOnOSSLoginComplete = NULL;

	if ( ! pFnOnOSSLoginComplete )
		pFnOnOSSLoginComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnOSSLoginComplete" );

	AKFPlayerController_execOnOSSLoginComplete_Parms OnOSSLoginComplete_Parms;

	this->ProcessEvent ( pFnOnOSSLoginComplete, &OnOSSLoginComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.StartLogin
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::StartLogin ( )
{
	static UFunction* pFnStartLogin = NULL;

	if ( ! pFnStartLogin )
		pFnStartLogin = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.StartLogin" );

	AKFPlayerController_execStartLogin_Parms StartLogin_Parms;

	this->ProcessEvent ( pFnStartLogin, &StartLogin_Parms, NULL );
};

// Function KFGame.KFPlayerController.LoginCompleteCallback
// [0x00120000] 
// Parameters infos:

void AKFPlayerController::LoginCompleteCallback ( )
{
	static UFunction* pFnLoginCompleteCallback = NULL;

	if ( ! pFnLoginCompleteCallback )
		pFnLoginCompleteCallback = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.LoginCompleteCallback" );

	AKFPlayerController_execLoginCompleteCallback_Parms LoginCompleteCallback_Parms;

	this->ProcessEvent ( pFnLoginCompleteCallback, &LoginCompleteCallback_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnLoginCompleted
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnLoginCompleted ( )
{
	static UFunction* pFnOnLoginCompleted = NULL;

	if ( ! pFnOnLoginCompleted )
		pFnOnLoginCompleted = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnLoginCompleted" );

	AKFPlayerController_execOnLoginCompleted_Parms OnLoginCompleted_Parms;

	this->ProcessEvent ( pFnOnLoginCompleted, &OnLoginCompleted_Parms, NULL );
};

// Function KFGame.KFPlayerController.HasActiveUserEstablished
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::HasActiveUserEstablished ( )
{
	static UFunction* pFnHasActiveUserEstablished = NULL;

	if ( ! pFnHasActiveUserEstablished )
		pFnHasActiveUserEstablished = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HasActiveUserEstablished" );

	AKFPlayerController_execHasActiveUserEstablished_Parms HasActiveUserEstablished_Parms;

	this->ProcessEvent ( pFnHasActiveUserEstablished, &HasActiveUserEstablished_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckForConnectedControllers
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::CheckForConnectedControllers ( )
{
	static UFunction* pFnCheckForConnectedControllers = NULL;

	if ( ! pFnCheckForConnectedControllers )
		pFnCheckForConnectedControllers = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckForConnectedControllers" );

	AKFPlayerController_execCheckForConnectedControllers_Parms CheckForConnectedControllers_Parms;

	this->ProcessEvent ( pFnCheckForConnectedControllers, &CheckForConnectedControllers_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnControllerDisconnectDialogDismissed
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::OnControllerDisconnectDialogDismissed ( )
{
	static UFunction* pFnOnControllerDisconnectDialogDismissed = NULL;

	if ( ! pFnOnControllerDisconnectDialogDismissed )
		pFnOnControllerDisconnectDialogDismissed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnControllerDisconnectDialogDismissed" );

	AKFPlayerController_execOnControllerDisconnectDialogDismissed_Parms OnControllerDisconnectDialogDismissed_Parms;

	this->ProcessEvent ( pFnOnControllerDisconnectDialogDismissed, &OnControllerDisconnectDialogDismissed_Parms, NULL );
};

// Function KFGame.KFPlayerController.ShowControllerDisconnectedDialog
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::ShowControllerDisconnectedDialog ( )
{
	static UFunction* pFnShowControllerDisconnectedDialog = NULL;

	if ( ! pFnShowControllerDisconnectedDialog )
		pFnShowControllerDisconnectedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ShowControllerDisconnectedDialog" );

	AKFPlayerController_execShowControllerDisconnectedDialog_Parms ShowControllerDisconnectedDialog_Parms;

	this->ProcessEvent ( pFnShowControllerDisconnectedDialog, &ShowControllerDisconnectedDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnControllerChanged
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnControllerChanged ( )
{
	static UFunction* pFnOnControllerChanged = NULL;

	if ( ! pFnOnControllerChanged )
		pFnOnControllerChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnControllerChanged" );

	AKFPlayerController_execOnControllerChanged_Parms OnControllerChanged_Parms;

	this->ProcessEvent ( pFnOnControllerChanged, &OnControllerChanged_Parms, NULL );
};

// Function KFGame.KFPlayerController.GCF
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::GCF ( )
{
	static UFunction* pFnGCF = NULL;

	if ( ! pFnGCF )
		pFnGCF = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GCF" );

	AKFPlayerController_execGCF_Parms GCF_Parms;

	this->ProcessEvent ( pFnGCF, &GCF_Parms, NULL );
};

// Function KFGame.KFPlayerController.MotivatePlayerToMove
// [0x00080002] 
// Parameters infos:

void AKFPlayerController::MotivatePlayerToMove ( )
{
	static UFunction* pFnMotivatePlayerToMove = NULL;

	if ( ! pFnMotivatePlayerToMove )
		pFnMotivatePlayerToMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MotivatePlayerToMove" );

	AKFPlayerController_execMotivatePlayerToMove_Parms MotivatePlayerToMove_Parms;

	this->ProcessEvent ( pFnMotivatePlayerToMove, &MotivatePlayerToMove_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerSetNoGoActive
// [0x002808C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventServerSetNoGoActive ( )
{
	static UFunction* pFnServerSetNoGoActive = NULL;

	if ( ! pFnServerSetNoGoActive )
		pFnServerSetNoGoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSetNoGoActive" );

	AKFPlayerController_eventServerSetNoGoActive_Parms ServerSetNoGoActive_Parms;

	this->ProcessEvent ( pFnServerSetNoGoActive, &ServerSetNoGoActive_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetNoGoActive
// [0x00080400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::SetNoGoActive ( )
{
	static UFunction* pFnSetNoGoActive = NULL;

	if ( ! pFnSetNoGoActive )
		pFnSetNoGoActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetNoGoActive" );

	AKFPlayerController_execSetNoGoActive_Parms SetNoGoActive_Parms;

	pFnSetNoGoActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNoGoActive, &SetNoGoActive_Parms, NULL );

	pFnSetNoGoActive->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.SwitchTeam
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::SwitchTeam ( )
{
	static UFunction* pFnSwitchTeam = NULL;

	if ( ! pFnSwitchTeam )
		pFnSwitchTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SwitchTeam" );

	AKFPlayerController_execSwitchTeam_Parms SwitchTeam_Parms;

	this->ProcessEvent ( pFnSwitchTeam, &SwitchTeam_Parms, NULL );
};

// Function KFGame.KFPlayerController.RequestSwitchTeam
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::RequestSwitchTeam ( )
{
	static UFunction* pFnRequestSwitchTeam = NULL;

	if ( ! pFnRequestSwitchTeam )
		pFnRequestSwitchTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.RequestSwitchTeam" );

	AKFPlayerController_execRequestSwitchTeam_Parms RequestSwitchTeam_Parms;

	this->ProcessEvent ( pFnRequestSwitchTeam, &RequestSwitchTeam_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClearOnlineDelegates
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ClearOnlineDelegates ( )
{
	static UFunction* pFnClearOnlineDelegates = NULL;

	if ( ! pFnClearOnlineDelegates )
		pFnClearOnlineDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClearOnlineDelegates" );

	AKFPlayerController_execClearOnlineDelegates_Parms ClearOnlineDelegates_Parms;

	this->ProcessEvent ( pFnClearOnlineDelegates, &ClearOnlineDelegates_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnAttemptPassword
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnAttemptPassword ( )
{
	static UFunction* pFnOnAttemptPassword = NULL;

	if ( ! pFnOnAttemptPassword )
		pFnOnAttemptPassword = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnAttemptPassword" );

	AKFPlayerController_execOnAttemptPassword_Parms OnAttemptPassword_Parms;

	this->ProcessEvent ( pFnOnAttemptPassword, &OnAttemptPassword_Parms, NULL );
};

// Function KFGame.KFPlayerController.DestroyOnlineGame
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventDestroyOnlineGame ( )
{
	static UFunction* pFnDestroyOnlineGame = NULL;

	if ( ! pFnDestroyOnlineGame )
		pFnDestroyOnlineGame = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DestroyOnlineGame" );

	AKFPlayerController_eventDestroyOnlineGame_Parms DestroyOnlineGame_Parms;

	this->ProcessEvent ( pFnDestroyOnlineGame, &DestroyOnlineGame_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyDisconnect
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventNotifyDisconnect ( )
{
	static UFunction* pFnNotifyDisconnect = NULL;

	if ( ! pFnNotifyDisconnect )
		pFnNotifyDisconnect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyDisconnect" );

	AKFPlayerController_eventNotifyDisconnect_Parms NotifyDisconnect_Parms;

	this->ProcessEvent ( pFnNotifyDisconnect, &NotifyDisconnect_Parms, NULL );
};

// Function KFGame.KFPlayerController.ShowConnectionProgressPopup
// [0x010249C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventShowConnectionProgressPopup ( )
{
	static UFunction* pFnShowConnectionProgressPopup = NULL;

	if ( ! pFnShowConnectionProgressPopup )
		pFnShowConnectionProgressPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ShowConnectionProgressPopup" );

	AKFPlayerController_eventShowConnectionProgressPopup_Parms ShowConnectionProgressPopup_Parms;

	this->ProcessEvent ( pFnShowConnectionProgressPopup, &ShowConnectionProgressPopup_Parms, NULL );
};

// Function KFGame.KFPlayerController.CanDisconnect
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CanDisconnect ( )
{
	static UFunction* pFnCanDisconnect = NULL;

	if ( ! pFnCanDisconnect )
		pFnCanDisconnect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CanDisconnect" );

	AKFPlayerController_execCanDisconnect_Parms CanDisconnect_Parms;

	this->ProcessEvent ( pFnCanDisconnect, &CanDisconnect_Parms, NULL );
};

// Function KFGame.KFPlayerController.ForceDisconnect
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ForceDisconnect ( )
{
	static UFunction* pFnForceDisconnect = NULL;

	if ( ! pFnForceDisconnect )
		pFnForceDisconnect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ForceDisconnect" );

	AKFPlayerController_execForceDisconnect_Parms ForceDisconnect_Parms;

	this->ProcessEvent ( pFnForceDisconnect, &ForceDisconnect_Parms, NULL );
};

// Function KFGame.KFPlayerController.ItemExchangeTimeOut
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::ItemExchangeTimeOut ( )
{
	static UFunction* pFnItemExchangeTimeOut = NULL;

	if ( ! pFnItemExchangeTimeOut )
		pFnItemExchangeTimeOut = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ItemExchangeTimeOut" );

	AKFPlayerController_execItemExchangeTimeOut_Parms ItemExchangeTimeOut_Parms;

	this->ProcessEvent ( pFnItemExchangeTimeOut, &ItemExchangeTimeOut_Parms, NULL );
};

// Function KFGame.KFPlayerController.DoEmote
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::DoEmote ( )
{
	static UFunction* pFnDoEmote = NULL;

	if ( ! pFnDoEmote )
		pFnDoEmote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DoEmote" );

	AKFPlayerController_execDoEmote_Parms DoEmote_Parms;

	this->ProcessEvent ( pFnDoEmote, &DoEmote_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientPlayTraderEndlessWaveStartDialog
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientPlayTraderEndlessWaveStartDialog ( )
{
	static UFunction* pFnClientPlayTraderEndlessWaveStartDialog = NULL;

	if ( ! pFnClientPlayTraderEndlessWaveStartDialog )
		pFnClientPlayTraderEndlessWaveStartDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientPlayTraderEndlessWaveStartDialog" );

	AKFPlayerController_execClientPlayTraderEndlessWaveStartDialog_Parms ClientPlayTraderEndlessWaveStartDialog_Parms;

	this->ProcessEvent ( pFnClientPlayTraderEndlessWaveStartDialog, &ClientPlayTraderEndlessWaveStartDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayTraderEndlessWaveStartDialog
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::PlayTraderEndlessWaveStartDialog ( )
{
	static UFunction* pFnPlayTraderEndlessWaveStartDialog = NULL;

	if ( ! pFnPlayTraderEndlessWaveStartDialog )
		pFnPlayTraderEndlessWaveStartDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayTraderEndlessWaveStartDialog" );

	AKFPlayerController_execPlayTraderEndlessWaveStartDialog_Parms PlayTraderEndlessWaveStartDialog_Parms;

	this->ProcessEvent ( pFnPlayTraderEndlessWaveStartDialog, &PlayTraderEndlessWaveStartDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayVoiceCommsDialog
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::PlayVoiceCommsDialog ( )
{
	static UFunction* pFnPlayVoiceCommsDialog = NULL;

	if ( ! pFnPlayVoiceCommsDialog )
		pFnPlayVoiceCommsDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayVoiceCommsDialog" );

	AKFPlayerController_execPlayVoiceCommsDialog_Parms PlayVoiceCommsDialog_Parms;

	this->ProcessEvent ( pFnPlayVoiceCommsDialog, &PlayVoiceCommsDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerPlayVoiceCommsDialog
// [0x00220042] 
// Parameters infos:

void AKFPlayerController::ServerPlayVoiceCommsDialog ( )
{
	static UFunction* pFnServerPlayVoiceCommsDialog = NULL;

	if ( ! pFnServerPlayVoiceCommsDialog )
		pFnServerPlayVoiceCommsDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerPlayVoiceCommsDialog" );

	AKFPlayerController_execServerPlayVoiceCommsDialog_Parms ServerPlayVoiceCommsDialog_Parms;

	this->ProcessEvent ( pFnServerPlayVoiceCommsDialog, &ServerPlayVoiceCommsDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerPlayLevelUpDialog
// [0x00220042] 
// Parameters infos:

void AKFPlayerController::ServerPlayLevelUpDialog ( )
{
	static UFunction* pFnServerPlayLevelUpDialog = NULL;

	if ( ! pFnServerPlayLevelUpDialog )
		pFnServerPlayLevelUpDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerPlayLevelUpDialog" );

	AKFPlayerController_execServerPlayLevelUpDialog_Parms ServerPlayLevelUpDialog_Parms;

	this->ProcessEvent ( pFnServerPlayLevelUpDialog, &ServerPlayLevelUpDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayTraderSelectItemDialog
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::PlayTraderSelectItemDialog ( )
{
	static UFunction* pFnPlayTraderSelectItemDialog = NULL;

	if ( ! pFnPlayTraderSelectItemDialog )
		pFnPlayTraderSelectItemDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayTraderSelectItemDialog" );

	AKFPlayerController_execPlayTraderSelectItemDialog_Parms PlayTraderSelectItemDialog_Parms;

	this->ProcessEvent ( pFnPlayTraderSelectItemDialog, &PlayTraderSelectItemDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientPlayTraderDialog
// [0x010241C2] 
// Parameters infos:

void AKFPlayerController::ClientPlayTraderDialog ( )
{
	static UFunction* pFnClientPlayTraderDialog = NULL;

	if ( ! pFnClientPlayTraderDialog )
		pFnClientPlayTraderDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientPlayTraderDialog" );

	AKFPlayerController_execClientPlayTraderDialog_Parms ClientPlayTraderDialog_Parms;

	this->ProcessEvent ( pFnClientPlayTraderDialog, &ClientPlayTraderDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayTraderDialog
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::PlayTraderDialog ( )
{
	static UFunction* pFnPlayTraderDialog = NULL;

	if ( ! pFnPlayTraderDialog )
		pFnPlayTraderDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayTraderDialog" );

	AKFPlayerController_execPlayTraderDialog_Parms PlayTraderDialog_Parms;

	this->ProcessEvent ( pFnPlayTraderDialog, &PlayTraderDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckForZedOnDeathAchievements
// [0x00080400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::CheckForZedOnDeathAchievements ( )
{
	static UFunction* pFnCheckForZedOnDeathAchievements = NULL;

	if ( ! pFnCheckForZedOnDeathAchievements )
		pFnCheckForZedOnDeathAchievements = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckForZedOnDeathAchievements" );

	AKFPlayerController_execCheckForZedOnDeathAchievements_Parms CheckForZedOnDeathAchievements_Parms;

	pFnCheckForZedOnDeathAchievements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForZedOnDeathAchievements, &CheckForZedOnDeathAchievements_Parms, NULL );

	pFnCheckForZedOnDeathAchievements->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.NotifyKilled
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::NotifyKilled ( )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyKilled" );

	AKFPlayerController_execNotifyKilled_Parms NotifyKilled_Parms;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientHearDialog
// [0x01020942] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientHearDialog ( )
{
	static UFunction* pFnClientHearDialog = NULL;

	if ( ! pFnClientHearDialog )
		pFnClientHearDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientHearDialog" );

	AKFPlayerController_eventClientHearDialog_Parms ClientHearDialog_Parms;

	this->ProcessEvent ( pFnClientHearDialog, &ClientHearDialog_Parms, NULL );
};

// Function KFGame.KFPlayerController.ReceiveTopWeapons
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ReceiveTopWeapons ( )
{
	static UFunction* pFnReceiveTopWeapons = NULL;

	if ( ! pFnReceiveTopWeapons )
		pFnReceiveTopWeapons = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ReceiveTopWeapons" );

	AKFPlayerController_execReceiveTopWeapons_Parms ReceiveTopWeapons_Parms;

	this->ProcessEvent ( pFnReceiveTopWeapons, &ReceiveTopWeapons_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientReceiveAwardInfo
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientReceiveAwardInfo ( )
{
	static UFunction* pFnClientReceiveAwardInfo = NULL;

	if ( ! pFnClientReceiveAwardInfo )
		pFnClientReceiveAwardInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientReceiveAwardInfo" );

	AKFPlayerController_execClientReceiveAwardInfo_Parms ClientReceiveAwardInfo_Parms;

	this->ProcessEvent ( pFnClientReceiveAwardInfo, &ClientReceiveAwardInfo_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPersonalBest
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetPersonalBest ( )
{
	static UFunction* pFnGetPersonalBest = NULL;

	if ( ! pFnGetPersonalBest )
		pFnGetPersonalBest = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPersonalBest" );

	AKFPlayerController_execGetPersonalBest_Parms GetPersonalBest_Parms;

	this->ProcessEvent ( pFnGetPersonalBest, &GetPersonalBest_Parms, NULL );
};

// Function KFGame.KFPlayerController.SavePersonalBest
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SavePersonalBest ( )
{
	static UFunction* pFnSavePersonalBest = NULL;

	if ( ! pFnSavePersonalBest )
		pFnSavePersonalBest = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SavePersonalBest" );

	AKFPlayerController_execSavePersonalBest_Parms SavePersonalBest_Parms;

	this->ProcessEvent ( pFnSavePersonalBest, &SavePersonalBest_Parms, NULL );
};

// Function KFGame.KFPlayerController.SubmitPostWaveStats
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::SubmitPostWaveStats ( )
{
	static UFunction* pFnSubmitPostWaveStats = NULL;

	if ( ! pFnSubmitPostWaveStats )
		pFnSubmitPostWaveStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SubmitPostWaveStats" );

	AKFPlayerController_execSubmitPostWaveStats_Parms SubmitPostWaveStats_Parms;

	this->ProcessEvent ( pFnSubmitPostWaveStats, &SubmitPostWaveStats_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerViewPrevPlayer
// [0x00220042] 
// Parameters infos:

void AKFPlayerController::ServerViewPrevPlayer ( )
{
	static UFunction* pFnServerViewPrevPlayer = NULL;

	if ( ! pFnServerViewPrevPlayer )
		pFnServerViewPrevPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerViewPrevPlayer" );

	AKFPlayerController_execServerViewPrevPlayer_Parms ServerViewPrevPlayer_Parms;

	this->ProcessEvent ( pFnServerViewPrevPlayer, &ServerViewPrevPlayer_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerViewNextPlayer
// [0x00220042] 
// Parameters infos:

void AKFPlayerController::ServerViewNextPlayer ( )
{
	static UFunction* pFnServerViewNextPlayer = NULL;

	if ( ! pFnServerViewNextPlayer )
		pFnServerViewNextPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerViewNextPlayer" );

	AKFPlayerController_execServerViewNextPlayer_Parms ServerViewNextPlayer_Parms;

	this->ProcessEvent ( pFnServerViewNextPlayer, &ServerViewNextPlayer_Parms, NULL );
};

// Function KFGame.KFPlayerController.TryViewNextPlayer
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::TryViewNextPlayer ( )
{
	static UFunction* pFnTryViewNextPlayer = NULL;

	if ( ! pFnTryViewNextPlayer )
		pFnTryViewNextPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TryViewNextPlayer" );

	AKFPlayerController_execTryViewNextPlayer_Parms TryViewNextPlayer_Parms;

	this->ProcessEvent ( pFnTryViewNextPlayer, &TryViewNextPlayer_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerViewSelf
// [0x00224042] 
// Parameters infos:

void AKFPlayerController::ServerViewSelf ( )
{
	static UFunction* pFnServerViewSelf = NULL;

	if ( ! pFnServerViewSelf )
		pFnServerViewSelf = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerViewSelf" );

	AKFPlayerController_execServerViewSelf_Parms ServerViewSelf_Parms;

	this->ProcessEvent ( pFnServerViewSelf, &ServerViewSelf_Parms, NULL );
};

// Function KFGame.KFPlayerController.SpectateRoaming
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::SpectateRoaming ( )
{
	static UFunction* pFnSpectateRoaming = NULL;

	if ( ! pFnSpectateRoaming )
		pFnSpectateRoaming = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SpectateRoaming" );

	AKFPlayerController_execSpectateRoaming_Parms SpectateRoaming_Parms;

	this->ProcessEvent ( pFnSpectateRoaming, &SpectateRoaming_Parms, NULL );
};

// Function KFGame.KFPlayerController.SpectatePlayer
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SpectatePlayer ( )
{
	static UFunction* pFnSpectatePlayer = NULL;

	if ( ! pFnSpectatePlayer )
		pFnSpectatePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SpectatePlayer" );

	AKFPlayerController_execSpectatePlayer_Parms SpectatePlayer_Parms;

	this->ProcessEvent ( pFnSpectatePlayer, &SpectatePlayer_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerNextSpectateMode
// [0x00220042] 
// Parameters infos:

void AKFPlayerController::ServerNextSpectateMode ( )
{
	static UFunction* pFnServerNextSpectateMode = NULL;

	if ( ! pFnServerNextSpectateMode )
		pFnServerNextSpectateMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerNextSpectateMode" );

	AKFPlayerController_execServerNextSpectateMode_Parms ServerNextSpectateMode_Parms;

	this->ProcessEvent ( pFnServerNextSpectateMode, &ServerNextSpectateMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientSetViewTarget
// [0x018249C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientSetViewTarget ( )
{
	static UFunction* pFnClientSetViewTarget = NULL;

	if ( ! pFnClientSetViewTarget )
		pFnClientSetViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetViewTarget" );

	AKFPlayerController_eventClientSetViewTarget_Parms ClientSetViewTarget_Parms;

	this->ProcessEvent ( pFnClientSetViewTarget, &ClientSetViewTarget_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyChangeSpectateViewTarget
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::NotifyChangeSpectateViewTarget ( )
{
	static UFunction* pFnNotifyChangeSpectateViewTarget = NULL;

	if ( ! pFnNotifyChangeSpectateViewTarget )
		pFnNotifyChangeSpectateViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyChangeSpectateViewTarget" );

	AKFPlayerController_execNotifyChangeSpectateViewTarget_Parms NotifyChangeSpectateViewTarget_Parms;

	this->ProcessEvent ( pFnNotifyChangeSpectateViewTarget, &NotifyChangeSpectateViewTarget_Parms, NULL );
};

// Function KFGame.KFPlayerController.MoveToValidSpectatorLocation
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::MoveToValidSpectatorLocation ( )
{
	static UFunction* pFnMoveToValidSpectatorLocation = NULL;

	if ( ! pFnMoveToValidSpectatorLocation )
		pFnMoveToValidSpectatorLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MoveToValidSpectatorLocation" );

	AKFPlayerController_execMoveToValidSpectatorLocation_Parms MoveToValidSpectatorLocation_Parms;

	this->ProcessEvent ( pFnMoveToValidSpectatorLocation, &MoveToValidSpectatorLocation_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerSetSpectatorActive
// [0x00220040] 
// Parameters infos:

void AKFPlayerController::ServerSetSpectatorActive ( )
{
	static UFunction* pFnServerSetSpectatorActive = NULL;

	if ( ! pFnServerSetSpectatorActive )
		pFnServerSetSpectatorActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSetSpectatorActive" );

	AKFPlayerController_execServerSetSpectatorActive_Parms ServerSetSpectatorActive_Parms;

	this->ProcessEvent ( pFnServerSetSpectatorActive, &ServerSetSpectatorActive_Parms, NULL );
};

// Function KFGame.KFPlayerController.NextSpectateMode
// [0x00020100] 
// Parameters infos:

void AKFPlayerController::NextSpectateMode ( )
{
	static UFunction* pFnNextSpectateMode = NULL;

	if ( ! pFnNextSpectateMode )
		pFnNextSpectateMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NextSpectateMode" );

	AKFPlayerController_execNextSpectateMode_Parms NextSpectateMode_Parms;

	this->ProcessEvent ( pFnNextSpectateMode, &NextSpectateMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.StartSpectate
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::StartSpectate ( )
{
	static UFunction* pFnStartSpectate = NULL;

	if ( ! pFnStartSpectate )
		pFnStartSpectate = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.StartSpectate" );

	AKFPlayerController_execStartSpectate_Parms StartSpectate_Parms;

	this->ProcessEvent ( pFnStartSpectate, &StartSpectate_Parms, NULL );
};

// Function KFGame.KFPlayerController.Exit
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventExit ( )
{
	static UFunction* pFnExit = NULL;

	if ( ! pFnExit )
		pFnExit = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.Exit" );

	AKFPlayerController_eventExit_Parms Exit_Parms;

	this->ProcessEvent ( pFnExit, &Exit_Parms, NULL );
};

// Function KFGame.KFPlayerController.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.Destroyed" );

	AKFPlayerController_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFPlayerController.DrawNextSpawnTimeInfo
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::DrawNextSpawnTimeInfo ( )
{
	static UFunction* pFnDrawNextSpawnTimeInfo = NULL;

	if ( ! pFnDrawNextSpawnTimeInfo )
		pFnDrawNextSpawnTimeInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DrawNextSpawnTimeInfo" );

	AKFPlayerController_execDrawNextSpawnTimeInfo_Parms DrawNextSpawnTimeInfo_Parms;

	this->ProcessEvent ( pFnDrawNextSpawnTimeInfo, &DrawNextSpawnTimeInfo_Parms, NULL );
};

// Function KFGame.KFPlayerController.DrawDebugConductor
// [0x00420000] 
// Parameters infos:

void AKFPlayerController::DrawDebugConductor ( )
{
	static UFunction* pFnDrawDebugConductor = NULL;

	if ( ! pFnDrawDebugConductor )
		pFnDrawDebugConductor = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DrawDebugConductor" );

	AKFPlayerController_execDrawDebugConductor_Parms DrawDebugConductor_Parms;

	this->ProcessEvent ( pFnDrawDebugConductor, &DrawDebugConductor_Parms, NULL );
};

// Function KFGame.KFPlayerController.DrawMapElement
// [0x00024100] 
// Parameters infos:

void AKFPlayerController::DrawMapElement ( )
{
	static UFunction* pFnDrawMapElement = NULL;

	if ( ! pFnDrawMapElement )
		pFnDrawMapElement = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DrawMapElement" );

	AKFPlayerController_execDrawMapElement_Parms DrawMapElement_Parms;

	this->ProcessEvent ( pFnDrawMapElement, &DrawMapElement_Parms, NULL );
};

// Function KFGame.KFPlayerController.DrawDebugMap
// [0x00420000] 
// Parameters infos:

void AKFPlayerController::DrawDebugMap ( )
{
	static UFunction* pFnDrawDebugMap = NULL;

	if ( ! pFnDrawDebugMap )
		pFnDrawDebugMap = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DrawDebugMap" );

	AKFPlayerController_execDrawDebugMap_Parms DrawDebugMap_Parms;

	this->ProcessEvent ( pFnDrawDebugMap, &DrawDebugMap_Parms, NULL );
};

// Function KFGame.KFPlayerController.DrawDebugSpawning
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::DrawDebugSpawning ( )
{
	static UFunction* pFnDrawDebugSpawning = NULL;

	if ( ! pFnDrawDebugSpawning )
		pFnDrawDebugSpawning = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DrawDebugSpawning" );

	AKFPlayerController_execDrawDebugSpawning_Parms DrawDebugSpawning_Parms;

	this->ProcessEvent ( pFnDrawDebugSpawning, &DrawDebugSpawning_Parms, NULL );
};

// Function KFGame.KFPlayerController.DrawNextDebugLine
// [0x00424002] 
// Parameters infos:

void AKFPlayerController::DrawNextDebugLine ( )
{
	static UFunction* pFnDrawNextDebugLine = NULL;

	if ( ! pFnDrawNextDebugLine )
		pFnDrawNextDebugLine = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DrawNextDebugLine" );

	AKFPlayerController_execDrawNextDebugLine_Parms DrawNextDebugLine_Parms;

	this->ProcessEvent ( pFnDrawNextDebugLine, &DrawNextDebugLine_Parms, NULL );
};

// Function KFGame.KFPlayerController.DrawDebugDifficulty
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::DrawDebugDifficulty ( )
{
	static UFunction* pFnDrawDebugDifficulty = NULL;

	if ( ! pFnDrawDebugDifficulty )
		pFnDrawDebugDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DrawDebugDifficulty" );

	AKFPlayerController_execDrawDebugDifficulty_Parms DrawDebugDifficulty_Parms;

	this->ProcessEvent ( pFnDrawDebugDifficulty, &DrawDebugDifficulty_Parms, NULL );
};

// Function KFGame.KFPlayerController.DrawDebugMemory
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::DrawDebugMemory ( )
{
	static UFunction* pFnDrawDebugMemory = NULL;

	if ( ! pFnDrawDebugMemory )
		pFnDrawDebugMemory = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DrawDebugMemory" );

	AKFPlayerController_execDrawDebugMemory_Parms DrawDebugMemory_Parms;

	this->ProcessEvent ( pFnDrawDebugMemory, &DrawDebugMemory_Parms, NULL );
};

// Function KFGame.KFPlayerController.DisplayDebug
// [0x00420102] 
// Parameters infos:

void AKFPlayerController::DisplayDebug ( )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DisplayDebug" );

	AKFPlayerController_execDisplayDebug_Parms DisplayDebug_Parms;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );
};

// Function KFGame.KFPlayerController.LogOutBugItAIGoToLogFile
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::LogOutBugItAIGoToLogFile ( )
{
	static UFunction* pFnLogOutBugItAIGoToLogFile = NULL;

	if ( ! pFnLogOutBugItAIGoToLogFile )
		pFnLogOutBugItAIGoToLogFile = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.LogOutBugItAIGoToLogFile" );

	AKFPlayerController_execLogOutBugItAIGoToLogFile_Parms LogOutBugItAIGoToLogFile_Parms;

	pFnLogOutBugItAIGoToLogFile->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogOutBugItAIGoToLogFile, &LogOutBugItAIGoToLogFile_Parms, NULL );

	pFnLogOutBugItAIGoToLogFile->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.UnlockHoldOut
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::UnlockHoldOut ( )
{
	static UFunction* pFnUnlockHoldOut = NULL;

	if ( ! pFnUnlockHoldOut )
		pFnUnlockHoldOut = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UnlockHoldOut" );

	AKFPlayerController_execUnlockHoldOut_Parms UnlockHoldOut_Parms;

	pFnUnlockHoldOut->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUnlockHoldOut, &UnlockHoldOut_Parms, NULL );

	pFnUnlockHoldOut->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.UpdateBenefactor
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::UpdateBenefactor ( )
{
	static UFunction* pFnUpdateBenefactor = NULL;

	if ( ! pFnUpdateBenefactor )
		pFnUpdateBenefactor = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateBenefactor" );

	AKFPlayerController_execUpdateBenefactor_Parms UpdateBenefactor_Parms;

	pFnUpdateBenefactor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateBenefactor, &UpdateBenefactor_Parms, NULL );

	pFnUpdateBenefactor->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.OnEndlessWaveComplete
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventOnEndlessWaveComplete ( )
{
	static UFunction* pFnOnEndlessWaveComplete = NULL;

	if ( ! pFnOnEndlessWaveComplete )
		pFnOnEndlessWaveComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnEndlessWaveComplete" );

	AKFPlayerController_eventOnEndlessWaveComplete_Parms OnEndlessWaveComplete_Parms;

	this->ProcessEvent ( pFnOnEndlessWaveComplete, &OnEndlessWaveComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnAllMapCollectiblesFound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventOnAllMapCollectiblesFound ( )
{
	static UFunction* pFnOnAllMapCollectiblesFound = NULL;

	if ( ! pFnOnAllMapCollectiblesFound )
		pFnOnAllMapCollectiblesFound = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnAllMapCollectiblesFound" );

	AKFPlayerController_eventOnAllMapCollectiblesFound_Parms OnAllMapCollectiblesFound_Parms;

	this->ProcessEvent ( pFnOnAllMapCollectiblesFound, &OnAllMapCollectiblesFound_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnMapCollectibleFound
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventOnMapCollectibleFound ( )
{
	static UFunction* pFnOnMapCollectibleFound = NULL;

	if ( ! pFnOnMapCollectibleFound )
		pFnOnMapCollectibleFound = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnMapCollectibleFound" );

	AKFPlayerController_eventOnMapCollectibleFound_Parms OnMapCollectibleFound_Parms;

	this->ProcessEvent ( pFnOnMapCollectibleFound, &OnMapCollectibleFound_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientNotifyCheats
// [0x010401C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ClientNotifyCheats ( )
{
	static UFunction* pFnClientNotifyCheats = NULL;

	if ( ! pFnClientNotifyCheats )
		pFnClientNotifyCheats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientNotifyCheats" );

	AKFPlayerController_execClientNotifyCheats_Parms ClientNotifyCheats_Parms;

	this->ProcessEvent ( pFnClientNotifyCheats, &ClientNotifyCheats_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerEnableCheats
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ServerEnableCheats ( )
{
	static UFunction* pFnServerEnableCheats = NULL;

	if ( ! pFnServerEnableCheats )
		pFnServerEnableCheats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerEnableCheats" );

	AKFPlayerController_execServerEnableCheats_Parms ServerEnableCheats_Parms;

	this->ProcessEvent ( pFnServerEnableCheats, &ServerEnableCheats_Parms, NULL );
};

// Function KFGame.KFPlayerController.EnableCheats
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::EnableCheats ( )
{
	static UFunction* pFnEnableCheats = NULL;

	if ( ! pFnEnableCheats )
		pFnEnableCheats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.EnableCheats" );

	AKFPlayerController_execEnableCheats_Parms EnableCheats_Parms;

	this->ProcessEvent ( pFnEnableCheats, &EnableCheats_Parms, NULL );
};

// Function KFGame.KFPlayerController.LogStats
// [0x00020203] ( FUNC_Final | FUNC_Exec )
// Parameters infos:

void AKFPlayerController::LogStats ( )
{
	static UFunction* pFnLogStats = NULL;

	if ( ! pFnLogStats )
		pFnLogStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.LogStats" );

	AKFPlayerController_execLogStats_Parms LogStats_Parms;

	this->ProcessEvent ( pFnLogStats, &LogStats_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetBenefactorDoshReq
// [0x00080400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetBenefactorDoshReq ( )
{
	static UFunction* pFnGetBenefactorDoshReq = NULL;

	if ( ! pFnGetBenefactorDoshReq )
		pFnGetBenefactorDoshReq = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetBenefactorDoshReq" );

	AKFPlayerController_execGetBenefactorDoshReq_Parms GetBenefactorDoshReq_Parms;

	pFnGetBenefactorDoshReq->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBenefactorDoshReq, &GetBenefactorDoshReq_Parms, NULL );

	pFnGetBenefactorDoshReq->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ResetStats
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::ResetStats ( )
{
	static UFunction* pFnResetStats = NULL;

	if ( ! pFnResetStats )
		pFnResetStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ResetStats" );

	AKFPlayerController_execResetStats_Parms ResetStats_Parms;

	this->ProcessEvent ( pFnResetStats, &ResetStats_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddTrackedVsDamage
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddTrackedVsDamage ( )
{
	static UFunction* pFnClientAddTrackedVsDamage = NULL;

	if ( ! pFnClientAddTrackedVsDamage )
		pFnClientAddTrackedVsDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddTrackedVsDamage" );

	AKFPlayerController_execClientAddTrackedVsDamage_Parms ClientAddTrackedVsDamage_Parms;

	pFnClientAddTrackedVsDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddTrackedVsDamage, &ClientAddTrackedVsDamage_Parms, NULL );

	pFnClientAddTrackedVsDamage->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddTrackedVsDamage
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddTrackedVsDamage ( )
{
	static UFunction* pFnAddTrackedVsDamage = NULL;

	if ( ! pFnAddTrackedVsDamage )
		pFnAddTrackedVsDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddTrackedVsDamage" );

	AKFPlayerController_execAddTrackedVsDamage_Parms AddTrackedVsDamage_Parms;

	this->ProcessEvent ( pFnAddTrackedVsDamage, &AddTrackedVsDamage_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddTrackedDamage
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddTrackedDamage ( )
{
	static UFunction* pFnClientAddTrackedDamage = NULL;

	if ( ! pFnClientAddTrackedDamage )
		pFnClientAddTrackedDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddTrackedDamage" );

	AKFPlayerController_execClientAddTrackedDamage_Parms ClientAddTrackedDamage_Parms;

	pFnClientAddTrackedDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddTrackedDamage, &ClientAddTrackedDamage_Parms, NULL );

	pFnClientAddTrackedDamage->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddTrackedDamage
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddTrackedDamage ( )
{
	static UFunction* pFnAddTrackedDamage = NULL;

	if ( ! pFnAddTrackedDamage )
		pFnAddTrackedDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddTrackedDamage" );

	AKFPlayerController_execAddTrackedDamage_Parms AddTrackedDamage_Parms;

	this->ProcessEvent ( pFnAddTrackedDamage, &AddTrackedDamage_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddHealPoints
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddHealPoints ( )
{
	static UFunction* pFnClientAddHealPoints = NULL;

	if ( ! pFnClientAddHealPoints )
		pFnClientAddHealPoints = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddHealPoints" );

	AKFPlayerController_execClientAddHealPoints_Parms ClientAddHealPoints_Parms;

	pFnClientAddHealPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddHealPoints, &ClientAddHealPoints_Parms, NULL );

	pFnClientAddHealPoints->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddHealPoints
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddHealPoints ( )
{
	static UFunction* pFnAddHealPoints = NULL;

	if ( ! pFnAddHealPoints )
		pFnAddHealPoints = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddHealPoints" );

	AKFPlayerController_execAddHealPoints_Parms AddHealPoints_Parms;

	this->ProcessEvent ( pFnAddHealPoints, &AddHealPoints_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientDoorRepaired
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientDoorRepaired ( )
{
	static UFunction* pFnClientDoorRepaired = NULL;

	if ( ! pFnClientDoorRepaired )
		pFnClientDoorRepaired = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientDoorRepaired" );

	AKFPlayerController_execClientDoorRepaired_Parms ClientDoorRepaired_Parms;

	pFnClientDoorRepaired->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientDoorRepaired, &ClientDoorRepaired_Parms, NULL );

	pFnClientDoorRepaired->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.DoorRepaired
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::DoorRepaired ( )
{
	static UFunction* pFnDoorRepaired = NULL;

	if ( ! pFnDoorRepaired )
		pFnDoorRepaired = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DoorRepaired" );

	AKFPlayerController_execDoorRepaired_Parms DoorRepaired_Parms;

	this->ProcessEvent ( pFnDoorRepaired, &DoorRepaired_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddWeldPoints
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddWeldPoints ( )
{
	static UFunction* pFnClientAddWeldPoints = NULL;

	if ( ! pFnClientAddWeldPoints )
		pFnClientAddWeldPoints = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddWeldPoints" );

	AKFPlayerController_execClientAddWeldPoints_Parms ClientAddWeldPoints_Parms;

	pFnClientAddWeldPoints->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddWeldPoints, &ClientAddWeldPoints_Parms, NULL );

	pFnClientAddWeldPoints->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddWeldPoints
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddWeldPoints ( )
{
	static UFunction* pFnAddWeldPoints = NULL;

	if ( ! pFnAddWeldPoints )
		pFnAddWeldPoints = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddWeldPoints" );

	AKFPlayerController_execAddWeldPoints_Parms AddWeldPoints_Parms;

	this->ProcessEvent ( pFnAddWeldPoints, &AddWeldPoints_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddSmallRadiusKill
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddSmallRadiusKill ( )
{
	static UFunction* pFnClientAddSmallRadiusKill = NULL;

	if ( ! pFnClientAddSmallRadiusKill )
		pFnClientAddSmallRadiusKill = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddSmallRadiusKill" );

	AKFPlayerController_execClientAddSmallRadiusKill_Parms ClientAddSmallRadiusKill_Parms;

	pFnClientAddSmallRadiusKill->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddSmallRadiusKill, &ClientAddSmallRadiusKill_Parms, NULL );

	pFnClientAddSmallRadiusKill->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddSmallRadiusKill
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddSmallRadiusKill ( )
{
	static UFunction* pFnAddSmallRadiusKill = NULL;

	if ( ! pFnAddSmallRadiusKill )
		pFnAddSmallRadiusKill = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddSmallRadiusKill" );

	AKFPlayerController_execAddSmallRadiusKill_Parms AddSmallRadiusKill_Parms;

	this->ProcessEvent ( pFnAddSmallRadiusKill, &AddSmallRadiusKill_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnPlayerXPAdded
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventOnPlayerXPAdded ( )
{
	static UFunction* pFnOnPlayerXPAdded = NULL;

	if ( ! pFnOnPlayerXPAdded )
		pFnOnPlayerXPAdded = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnPlayerXPAdded" );

	AKFPlayerController_eventOnPlayerXPAdded_Parms OnPlayerXPAdded_Parms;

	this->ProcessEvent ( pFnOnPlayerXPAdded, &OnPlayerXPAdded_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddPlayerXP
// [0x01044DC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventClientAddPlayerXP ( )
{
	static UFunction* pFnClientAddPlayerXP = NULL;

	if ( ! pFnClientAddPlayerXP )
		pFnClientAddPlayerXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddPlayerXP" );

	AKFPlayerController_eventClientAddPlayerXP_Parms ClientAddPlayerXP_Parms;

	pFnClientAddPlayerXP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddPlayerXP, &ClientAddPlayerXP_Parms, NULL );

	pFnClientAddPlayerXP->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ClientAddZedHeadshot
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddZedHeadshot ( )
{
	static UFunction* pFnClientAddZedHeadshot = NULL;

	if ( ! pFnClientAddZedHeadshot )
		pFnClientAddZedHeadshot = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddZedHeadshot" );

	AKFPlayerController_execClientAddZedHeadshot_Parms ClientAddZedHeadshot_Parms;

	pFnClientAddZedHeadshot->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddZedHeadshot, &ClientAddZedHeadshot_Parms, NULL );

	pFnClientAddZedHeadshot->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddZedHeadshot
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddZedHeadshot ( )
{
	static UFunction* pFnAddZedHeadshot = NULL;

	if ( ! pFnAddZedHeadshot )
		pFnAddZedHeadshot = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddZedHeadshot" );

	AKFPlayerController_execAddZedHeadshot_Parms AddZedHeadshot_Parms;

	this->ProcessEvent ( pFnAddZedHeadshot, &AddZedHeadshot_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddZedAssist
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddZedAssist ( )
{
	static UFunction* pFnClientAddZedAssist = NULL;

	if ( ! pFnClientAddZedAssist )
		pFnClientAddZedAssist = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddZedAssist" );

	AKFPlayerController_execClientAddZedAssist_Parms ClientAddZedAssist_Parms;

	pFnClientAddZedAssist->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddZedAssist, &ClientAddZedAssist_Parms, NULL );

	pFnClientAddZedAssist->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddZedAssist
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddZedAssist ( )
{
	static UFunction* pFnAddZedAssist = NULL;

	if ( ! pFnAddZedAssist )
		pFnAddZedAssist = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddZedAssist" );

	AKFPlayerController_execAddZedAssist_Parms AddZedAssist_Parms;

	this->ProcessEvent ( pFnAddZedAssist, &AddZedAssist_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddNonZedKill
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddNonZedKill ( )
{
	static UFunction* pFnClientAddNonZedKill = NULL;

	if ( ! pFnClientAddNonZedKill )
		pFnClientAddNonZedKill = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddNonZedKill" );

	AKFPlayerController_execClientAddNonZedKill_Parms ClientAddNonZedKill_Parms;

	pFnClientAddNonZedKill->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddNonZedKill, &ClientAddNonZedKill_Parms, NULL );

	pFnClientAddNonZedKill->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddNonZedKill
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddNonZedKill ( )
{
	static UFunction* pFnAddNonZedKill = NULL;

	if ( ! pFnAddNonZedKill )
		pFnAddNonZedKill = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddNonZedKill" );

	AKFPlayerController_execAddNonZedKill_Parms AddNonZedKill_Parms;

	this->ProcessEvent ( pFnAddNonZedKill, &AddNonZedKill_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientAddZedKill
// [0x010405C1] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientAddZedKill ( )
{
	static UFunction* pFnClientAddZedKill = NULL;

	if ( ! pFnClientAddZedKill )
		pFnClientAddZedKill = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientAddZedKill" );

	AKFPlayerController_execClientAddZedKill_Parms ClientAddZedKill_Parms;

	pFnClientAddZedKill->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientAddZedKill, &ClientAddZedKill_Parms, NULL );

	pFnClientAddZedKill->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddZedKill
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddZedKill ( )
{
	static UFunction* pFnAddZedKill = NULL;

	if ( ! pFnAddZedKill )
		pFnAddZedKill = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddZedKill" );

	AKFPlayerController_execAddZedKill_Parms AddZedKill_Parms;

	this->ProcessEvent ( pFnAddZedKill, &AddZedKill_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPerkLevelFromPerkList
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventGetPerkLevelFromPerkList ( )
{
	static UFunction* pFnGetPerkLevelFromPerkList = NULL;

	if ( ! pFnGetPerkLevelFromPerkList )
		pFnGetPerkLevelFromPerkList = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkLevelFromPerkList" );

	AKFPlayerController_eventGetPerkLevelFromPerkList_Parms GetPerkLevelFromPerkList_Parms;

	this->ProcessEvent ( pFnGetPerkLevelFromPerkList, &GetPerkLevelFromPerkList_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPerkPrestigeLevelFromPerkList
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventGetPerkPrestigeLevelFromPerkList ( )
{
	static UFunction* pFnGetPerkPrestigeLevelFromPerkList = NULL;

	if ( ! pFnGetPerkPrestigeLevelFromPerkList )
		pFnGetPerkPrestigeLevelFromPerkList = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkPrestigeLevelFromPerkList" );

	AKFPlayerController_eventGetPerkPrestigeLevelFromPerkList_Parms GetPerkPrestigeLevelFromPerkList_Parms;

	this->ProcessEvent ( pFnGetPerkPrestigeLevelFromPerkList, &GetPerkPrestigeLevelFromPerkList_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPerkLevelProgressPercentage
// [0x00424002] 
// Parameters infos:

void AKFPlayerController::GetPerkLevelProgressPercentage ( )
{
	static UFunction* pFnGetPerkLevelProgressPercentage = NULL;

	if ( ! pFnGetPerkLevelProgressPercentage )
		pFnGetPerkLevelProgressPercentage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkLevelProgressPercentage" );

	AKFPlayerController_execGetPerkLevelProgressPercentage_Parms GetPerkLevelProgressPercentage_Parms;

	this->ProcessEvent ( pFnGetPerkLevelProgressPercentage, &GetPerkLevelProgressPercentage_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetXPDeltaForPerkClass
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventGetXPDeltaForPerkClass ( )
{
	static UFunction* pFnGetXPDeltaForPerkClass = NULL;

	if ( ! pFnGetXPDeltaForPerkClass )
		pFnGetXPDeltaForPerkClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetXPDeltaForPerkClass" );

	AKFPlayerController_eventGetXPDeltaForPerkClass_Parms GetXPDeltaForPerkClass_Parms;

	this->ProcessEvent ( pFnGetXPDeltaForPerkClass, &GetXPDeltaForPerkClass_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientUnlockAchievement
// [0x010249C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientUnlockAchievement ( )
{
	static UFunction* pFnClientUnlockAchievement = NULL;

	if ( ! pFnClientUnlockAchievement )
		pFnClientUnlockAchievement = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientUnlockAchievement" );

	AKFPlayerController_eventClientUnlockAchievement_Parms ClientUnlockAchievement_Parms;

	this->ProcessEvent ( pFnClientUnlockAchievement, &ClientUnlockAchievement_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientMapObjectiveCompleted
// [0x010201C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ClientMapObjectiveCompleted ( )
{
	static UFunction* pFnClientMapObjectiveCompleted = NULL;

	if ( ! pFnClientMapObjectiveCompleted )
		pFnClientMapObjectiveCompleted = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientMapObjectiveCompleted" );

	AKFPlayerController_execClientMapObjectiveCompleted_Parms ClientMapObjectiveCompleted_Parms;

	this->ProcessEvent ( pFnClientMapObjectiveCompleted, &ClientMapObjectiveCompleted_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientCompletedWeeklySurvival
// [0x010201C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ClientCompletedWeeklySurvival ( )
{
	static UFunction* pFnClientCompletedWeeklySurvival = NULL;

	if ( ! pFnClientCompletedWeeklySurvival )
		pFnClientCompletedWeeklySurvival = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientCompletedWeeklySurvival" );

	AKFPlayerController_execClientCompletedWeeklySurvival_Parms ClientCompletedWeeklySurvival_Parms;

	this->ProcessEvent ( pFnClientCompletedWeeklySurvival, &ClientCompletedWeeklySurvival_Parms, NULL );
};

// Function KFGame.KFPlayerController.CompletedWeeklySurvival
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::CompletedWeeklySurvival ( )
{
	static UFunction* pFnCompletedWeeklySurvival = NULL;

	if ( ! pFnCompletedWeeklySurvival )
		pFnCompletedWeeklySurvival = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CompletedWeeklySurvival" );

	AKFPlayerController_execCompletedWeeklySurvival_Parms CompletedWeeklySurvival_Parms;

	this->ProcessEvent ( pFnCompletedWeeklySurvival, &CompletedWeeklySurvival_Parms, NULL );
};

// Function KFGame.KFPlayerController.IsValidWeeklySurvivalMatch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::IsValidWeeklySurvivalMatch ( )
{
	static UFunction* pFnIsValidWeeklySurvivalMatch = NULL;

	if ( ! pFnIsValidWeeklySurvivalMatch )
		pFnIsValidWeeklySurvivalMatch = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsValidWeeklySurvivalMatch" );

	AKFPlayerController_execIsValidWeeklySurvivalMatch_Parms IsValidWeeklySurvivalMatch_Parms;

	pFnIsValidWeeklySurvivalMatch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidWeeklySurvivalMatch, &IsValidWeeklySurvivalMatch_Parms, NULL );

	pFnIsValidWeeklySurvivalMatch->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetMapSpecialEventIndex
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetMapSpecialEventIndex ( )
{
	static UFunction* pFnGetMapSpecialEventIndex = NULL;

	if ( ! pFnGetMapSpecialEventIndex )
		pFnGetMapSpecialEventIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetMapSpecialEventIndex" );

	AKFPlayerController_execGetMapSpecialEventIndex_Parms GetMapSpecialEventIndex_Parms;

	pFnGetMapSpecialEventIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapSpecialEventIndex, &GetMapSpecialEventIndex_Parms, NULL );

	pFnGetMapSpecialEventIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.IsValidSpecialEventMap
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::IsValidSpecialEventMap ( )
{
	static UFunction* pFnIsValidSpecialEventMap = NULL;

	if ( ! pFnIsValidSpecialEventMap )
		pFnIsValidSpecialEventMap = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsValidSpecialEventMap" );

	AKFPlayerController_execIsValidSpecialEventMap_Parms IsValidSpecialEventMap_Parms;

	pFnIsValidSpecialEventMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidSpecialEventMap, &IsValidSpecialEventMap_Parms, NULL );

	pFnIsValidSpecialEventMap->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.CheckForEventMapCompletion
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::CheckForEventMapCompletion ( )
{
	static UFunction* pFnCheckForEventMapCompletion = NULL;

	if ( ! pFnCheckForEventMapCompletion )
		pFnCheckForEventMapCompletion = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckForEventMapCompletion" );

	AKFPlayerController_execCheckForEventMapCompletion_Parms CheckForEventMapCompletion_Parms;

	pFnCheckForEventMapCompletion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckForEventMapCompletion, &CheckForEventMapCompletion_Parms, NULL );

	pFnCheckForEventMapCompletion->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ClientFinishedSpecialEvent
// [0x010209C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientFinishedSpecialEvent ( )
{
	static UFunction* pFnClientFinishedSpecialEvent = NULL;

	if ( ! pFnClientFinishedSpecialEvent )
		pFnClientFinishedSpecialEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientFinishedSpecialEvent" );

	AKFPlayerController_eventClientFinishedSpecialEvent_Parms ClientFinishedSpecialEvent_Parms;

	this->ProcessEvent ( pFnClientFinishedSpecialEvent, &ClientFinishedSpecialEvent_Parms, NULL );
};

// Function KFGame.KFPlayerController.FinishedSpecialEvent
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::FinishedSpecialEvent ( )
{
	static UFunction* pFnFinishedSpecialEvent = NULL;

	if ( ! pFnFinishedSpecialEvent )
		pFnFinishedSpecialEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.FinishedSpecialEvent" );

	AKFPlayerController_execFinishedSpecialEvent_Parms FinishedSpecialEvent_Parms;

	this->ProcessEvent ( pFnFinishedSpecialEvent, &FinishedSpecialEvent_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientGameOver
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientGameOver ( )
{
	static UFunction* pFnClientGameOver = NULL;

	if ( ! pFnClientGameOver )
		pFnClientGameOver = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientGameOver" );

	AKFPlayerController_execClientGameOver_Parms ClientGameOver_Parms;

	this->ProcessEvent ( pFnClientGameOver, &ClientGameOver_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientRoundEnded
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientRoundEnded ( )
{
	static UFunction* pFnClientRoundEnded = NULL;

	if ( ! pFnClientRoundEnded )
		pFnClientRoundEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientRoundEnded" );

	AKFPlayerController_execClientRoundEnded_Parms ClientRoundEnded_Parms;

	this->ProcessEvent ( pFnClientRoundEnded, &ClientRoundEnded_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientWonGame
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientWonGame ( )
{
	static UFunction* pFnClientWonGame = NULL;

	if ( ! pFnClientWonGame )
		pFnClientWonGame = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientWonGame" );

	AKFPlayerController_execClientWonGame_Parms ClientWonGame_Parms;

	this->ProcessEvent ( pFnClientWonGame, &ClientWonGame_Parms, NULL );
};

// Function KFGame.KFPlayerController.HasReadStats
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::HasReadStats ( )
{
	static UFunction* pFnHasReadStats = NULL;

	if ( ! pFnHasReadStats )
		pFnHasReadStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HasReadStats" );

	AKFPlayerController_execHasReadStats_Parms HasReadStats_Parms;

	this->ProcessEvent ( pFnHasReadStats, &HasReadStats_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientWriteAndFlushStats
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientWriteAndFlushStats ( )
{
	static UFunction* pFnClientWriteAndFlushStats = NULL;

	if ( ! pFnClientWriteAndFlushStats )
		pFnClientWriteAndFlushStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientWriteAndFlushStats" );

	AKFPlayerController_eventClientWriteAndFlushStats_Parms ClientWriteAndFlushStats_Parms;

	this->ProcessEvent ( pFnClientWriteAndFlushStats, &ClientWriteAndFlushStats_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnStatsInitialized
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::OnStatsInitialized ( )
{
	static UFunction* pFnOnStatsInitialized = NULL;

	if ( ! pFnOnStatsInitialized )
		pFnOnStatsInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnStatsInitialized" );

	AKFPlayerController_execOnStatsInitialized_Parms OnStatsInitialized_Parms;

	this->ProcessEvent ( pFnOnStatsInitialized, &OnStatsInitialized_Parms, NULL );
};

// Function KFGame.KFPlayerController.ReadStats
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::ReadStats ( )
{
	static UFunction* pFnReadStats = NULL;

	if ( ! pFnReadStats )
		pFnReadStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ReadStats" );

	AKFPlayerController_execReadStats_Parms ReadStats_Parms;

	this->ProcessEvent ( pFnReadStats, &ReadStats_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetStatsReadOwningPlayerId
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::SetStatsReadOwningPlayerId ( )
{
	static UFunction* pFnSetStatsReadOwningPlayerId = NULL;

	if ( ! pFnSetStatsReadOwningPlayerId )
		pFnSetStatsReadOwningPlayerId = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetStatsReadOwningPlayerId" );

	AKFPlayerController_execSetStatsReadOwningPlayerId_Parms SetStatsReadOwningPlayerId_Parms;

	this->ProcessEvent ( pFnSetStatsReadOwningPlayerId, &SetStatsReadOwningPlayerId_Parms, NULL );
};

// Function KFGame.KFPlayerController.LogStatValue
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::LogStatValue ( )
{
	static UFunction* pFnLogStatValue = NULL;

	if ( ! pFnLogStatValue )
		pFnLogStatValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.LogStatValue" );

	AKFPlayerController_execLogStatValue_Parms LogStatValue_Parms;

	this->ProcessEvent ( pFnLogStatValue, &LogStatValue_Parms, NULL );
};

// Function KFGame.KFPlayerController.InitializeStats
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventInitializeStats ( )
{
	static UFunction* pFnInitializeStats = NULL;

	if ( ! pFnInitializeStats )
		pFnInitializeStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.InitializeStats" );

	AKFPlayerController_eventInitializeStats_Parms InitializeStats_Parms;

	this->ProcessEvent ( pFnInitializeStats, &InitializeStats_Parms, NULL );
};

// Function KFGame.KFPlayerController.LogPerkBuilds
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void AKFPlayerController::LogPerkBuilds ( )
{
	static UFunction* pFnLogPerkBuilds = NULL;

	if ( ! pFnLogPerkBuilds )
		pFnLogPerkBuilds = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.LogPerkBuilds" );

	AKFPlayerController_execLogPerkBuilds_Parms LogPerkBuilds_Parms;

	pFnLogPerkBuilds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLogPerkBuilds, &LogPerkBuilds_Parms, NULL );

	pFnLogPerkBuilds->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GiveXP
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void AKFPlayerController::GiveXP ( )
{
	static UFunction* pFnGiveXP = NULL;

	if ( ! pFnGiveXP )
		pFnGiveXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GiveXP" );

	AKFPlayerController_execGiveXP_Parms GiveXP_Parms;

	pFnGiveXP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGiveXP, &GiveXP_Parms, NULL );

	pFnGiveXP->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetPerkBuildByPerkClass
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetPerkBuildByPerkClass ( )
{
	static UFunction* pFnGetPerkBuildByPerkClass = NULL;

	if ( ! pFnGetPerkBuildByPerkClass )
		pFnGetPerkBuildByPerkClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkBuildByPerkClass" );

	AKFPlayerController_execGetPerkBuildByPerkClass_Parms GetPerkBuildByPerkClass_Parms;

	pFnGetPerkBuildByPerkClass->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerkBuildByPerkClass, &GetPerkBuildByPerkClass_Parms, NULL );

	pFnGetPerkBuildByPerkClass->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetPerkXP
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetPerkXP ( )
{
	static UFunction* pFnGetPerkXP = NULL;

	if ( ! pFnGetPerkXP )
		pFnGetPerkXP = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkXP" );

	AKFPlayerController_execGetPerkXP_Parms GetPerkXP_Parms;

	pFnGetPerkXP->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerkXP, &GetPerkXP_Parms, NULL );

	pFnGetPerkXP->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetSpecialEventRewardValue
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetSpecialEventRewardValue ( )
{
	static UFunction* pFnGetSpecialEventRewardValue = NULL;

	if ( ! pFnGetSpecialEventRewardValue )
		pFnGetSpecialEventRewardValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetSpecialEventRewardValue" );

	AKFPlayerController_execGetSpecialEventRewardValue_Parms GetSpecialEventRewardValue_Parms;

	this->ProcessEvent ( pFnGetSpecialEventRewardValue, &GetSpecialEventRewardValue_Parms, NULL );
};

// Function KFGame.KFPlayerController.IsEventObjectiveComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::IsEventObjectiveComplete ( )
{
	static UFunction* pFnIsEventObjectiveComplete = NULL;

	if ( ! pFnIsEventObjectiveComplete )
		pFnIsEventObjectiveComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsEventObjectiveComplete" );

	AKFPlayerController_execIsEventObjectiveComplete_Parms IsEventObjectiveComplete_Parms;

	this->ProcessEvent ( pFnIsEventObjectiveComplete, &IsEventObjectiveComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.IsWeeklyEventComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::IsWeeklyEventComplete ( )
{
	static UFunction* pFnIsWeeklyEventComplete = NULL;

	if ( ! pFnIsWeeklyEventComplete )
		pFnIsWeeklyEventComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsWeeklyEventComplete" );

	AKFPlayerController_execIsWeeklyEventComplete_Parms IsWeeklyEventComplete_Parms;

	this->ProcessEvent ( pFnIsWeeklyEventComplete, &IsWeeklyEventComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.IsDailyObjectiveComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::IsDailyObjectiveComplete ( )
{
	static UFunction* pFnIsDailyObjectiveComplete = NULL;

	if ( ! pFnIsDailyObjectiveComplete )
		pFnIsDailyObjectiveComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsDailyObjectiveComplete" );

	AKFPlayerController_execIsDailyObjectiveComplete_Parms IsDailyObjectiveComplete_Parms;

	this->ProcessEvent ( pFnIsDailyObjectiveComplete, &IsDailyObjectiveComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetMaxDailyValue
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetMaxDailyValue ( )
{
	static UFunction* pFnGetMaxDailyValue = NULL;

	if ( ! pFnGetMaxDailyValue )
		pFnGetMaxDailyValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetMaxDailyValue" );

	AKFPlayerController_execGetMaxDailyValue_Parms GetMaxDailyValue_Parms;

	this->ProcessEvent ( pFnGetMaxDailyValue, &GetMaxDailyValue_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetCurrentDailyValue
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetCurrentDailyValue ( )
{
	static UFunction* pFnGetCurrentDailyValue = NULL;

	if ( ! pFnGetCurrentDailyValue )
		pFnGetCurrentDailyValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetCurrentDailyValue" );

	AKFPlayerController_execGetCurrentDailyValue_Parms GetCurrentDailyValue_Parms;

	this->ProcessEvent ( pFnGetCurrentDailyValue, &GetCurrentDailyValue_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetDailyObjective
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::GetDailyObjective ( )
{
	static UFunction* pFnGetDailyObjective = NULL;

	if ( ! pFnGetDailyObjective )
		pFnGetDailyObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetDailyObjective" );

	AKFPlayerController_execGetDailyObjective_Parms GetDailyObjective_Parms;

	this->ProcessEvent ( pFnGetDailyObjective, &GetDailyObjective_Parms, NULL );
};

// Function KFGame.KFPlayerController.CompletedDaily
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventCompletedDaily ( )
{
	static UFunction* pFnCompletedDaily = NULL;

	if ( ! pFnCompletedDaily )
		pFnCompletedDaily = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CompletedDaily" );

	AKFPlayerController_eventCompletedDaily_Parms CompletedDaily_Parms;

	this->ProcessEvent ( pFnCompletedDaily, &CompletedDaily_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetSpecialEventKillsInfo
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::GetSpecialEventKillsInfo ( )
{
	static UFunction* pFnGetSpecialEventKillsInfo = NULL;

	if ( ! pFnGetSpecialEventKillsInfo )
		pFnGetSpecialEventKillsInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetSpecialEventKillsInfo" );

	AKFPlayerController_execGetSpecialEventKillsInfo_Parms GetSpecialEventKillsInfo_Parms;

	this->ProcessEvent ( pFnGetSpecialEventKillsInfo, &GetSpecialEventKillsInfo_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetUIScale
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SetUIScale ( )
{
	static UFunction* pFnSetUIScale = NULL;

	if ( ! pFnSetUIScale )
		pFnSetUIScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetUIScale" );

	AKFPlayerController_execSetUIScale_Parms SetUIScale_Parms;

	this->ProcessEvent ( pFnSetUIScale, &SetUIScale_Parms, NULL );
};

// Function KFGame.KFPlayerController.changeSafeFrame
// [0x00820202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::changeSafeFrame ( )
{
	static UFunction* pFnchangeSafeFrame = NULL;

	if ( ! pFnchangeSafeFrame )
		pFnchangeSafeFrame = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.changeSafeFrame" );

	AKFPlayerController_execchangeSafeFrame_Parms changeSafeFrame_Parms;

	this->ProcessEvent ( pFnchangeSafeFrame, &changeSafeFrame_Parms, NULL );
};

// Function KFGame.KFPlayerController.PerformedUseAction
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::PerformedUseAction ( )
{
	static UFunction* pFnPerformedUseAction = NULL;

	if ( ! pFnPerformedUseAction )
		pFnPerformedUseAction = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PerformedUseAction" );

	AKFPlayerController_execPerformedUseAction_Parms PerformedUseAction_Parms;

	this->ProcessEvent ( pFnPerformedUseAction, &PerformedUseAction_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerPause
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::ServerPause ( )
{
	static UFunction* pFnServerPause = NULL;

	if ( ! pFnServerPause )
		pFnServerPause = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerPause" );

	AKFPlayerController_execServerPause_Parms ServerPause_Parms;

	this->ProcessEvent ( pFnServerPause, &ServerPause_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnExternalUIChanged
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnExternalUIChanged ( )
{
	static UFunction* pFnOnExternalUIChanged = NULL;

	if ( ! pFnOnExternalUIChanged )
		pFnOnExternalUIChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnExternalUIChanged" );

	AKFPlayerController_execOnExternalUIChanged_Parms OnExternalUIChanged_Parms;

	this->ProcessEvent ( pFnOnExternalUIChanged, &OnExternalUIChanged_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetPause
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::SetPause ( )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetPause" );

	AKFPlayerController_execSetPause_Parms SetPause_Parms;

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientPauseWwise
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientPauseWwise ( )
{
	static UFunction* pFnClientPauseWwise = NULL;

	if ( ! pFnClientPauseWwise )
		pFnClientPauseWwise = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientPauseWwise" );

	AKFPlayerController_execClientPauseWwise_Parms ClientPauseWwise_Parms;

	this->ProcessEvent ( pFnClientPauseWwise, &ClientPauseWwise_Parms, NULL );
};

// Function KFGame.KFPlayerController.PauseWwiseForAllPlayers
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::PauseWwiseForAllPlayers ( )
{
	static UFunction* pFnPauseWwiseForAllPlayers = NULL;

	if ( ! pFnPauseWwiseForAllPlayers )
		pFnPauseWwiseForAllPlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PauseWwiseForAllPlayers" );

	AKFPlayerController_execPauseWwiseForAllPlayers_Parms PauseWwiseForAllPlayers_Parms;

	this->ProcessEvent ( pFnPauseWwiseForAllPlayers, &PauseWwiseForAllPlayers_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayEcho
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::PlayEcho ( )
{
	static UFunction* pFnPlayEcho = NULL;

	if ( ! pFnPlayEcho )
		pFnPlayEcho = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayEcho" );

	AKFPlayerController_execPlayEcho_Parms PlayEcho_Parms;

	this->ProcessEvent ( pFnPlayEcho, &PlayEcho_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayDirectionalEcho
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::PlayDirectionalEcho ( )
{
	static UFunction* pFnPlayDirectionalEcho = NULL;

	if ( ! pFnPlayDirectionalEcho )
		pFnPlayDirectionalEcho = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayDirectionalEcho" );

	AKFPlayerController_execPlayDirectionalEcho_Parms PlayDirectionalEcho_Parms;

	this->ProcessEvent ( pFnPlayDirectionalEcho, &PlayDirectionalEcho_Parms, NULL );
};

// Function KFGame.KFPlayerController.HearEchoes
// [0x00820102] 
// Parameters infos:

void AKFPlayerController::HearEchoes ( )
{
	static UFunction* pFnHearEchoes = NULL;

	if ( ! pFnHearEchoes )
		pFnHearEchoes = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HearEchoes" );

	AKFPlayerController_execHearEchoes_Parms HearEchoes_Parms;

	this->ProcessEvent ( pFnHearEchoes, &HearEchoes_Parms, NULL );
};

// Function KFGame.KFPlayerController.ProcessAdvancedHearSound
// [0x00024102] 
// Parameters infos:

void AKFPlayerController::ProcessAdvancedHearSound ( )
{
	static UFunction* pFnProcessAdvancedHearSound = NULL;

	if ( ! pFnProcessAdvancedHearSound )
		pFnProcessAdvancedHearSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ProcessAdvancedHearSound" );

	AKFPlayerController_execProcessAdvancedHearSound_Parms ProcessAdvancedHearSound_Parms;

	this->ProcessEvent ( pFnProcessAdvancedHearSound, &ProcessAdvancedHearSound_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientHearSoundAdvancedRelevant
// [0x01824942] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientHearSoundAdvancedRelevant ( )
{
	static UFunction* pFnClientHearSoundAdvancedRelevant = NULL;

	if ( ! pFnClientHearSoundAdvancedRelevant )
		pFnClientHearSoundAdvancedRelevant = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientHearSoundAdvancedRelevant" );

	AKFPlayerController_eventClientHearSoundAdvancedRelevant_Parms ClientHearSoundAdvancedRelevant_Parms;

	this->ProcessEvent ( pFnClientHearSoundAdvancedRelevant, &ClientHearSoundAdvancedRelevant_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientHearSoundAdvanced
// [0x01824942] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientHearSoundAdvanced ( )
{
	static UFunction* pFnClientHearSoundAdvanced = NULL;

	if ( ! pFnClientHearSoundAdvanced )
		pFnClientHearSoundAdvanced = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientHearSoundAdvanced" );

	AKFPlayerController_eventClientHearSoundAdvanced_Parms ClientHearSoundAdvanced_Parms;

	this->ProcessEvent ( pFnClientHearSoundAdvanced, &ClientHearSoundAdvanced_Parms, NULL );
};

// Function KFGame.KFPlayerController.WwiseClientHearSound
// [0x01024942] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventWwiseClientHearSound ( )
{
	static UFunction* pFnWwiseClientHearSound = NULL;

	if ( ! pFnWwiseClientHearSound )
		pFnWwiseClientHearSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.WwiseClientHearSound" );

	AKFPlayerController_eventWwiseClientHearSound_Parms WwiseClientHearSound_Parms;

	this->ProcessEvent ( pFnWwiseClientHearSound, &WwiseClientHearSound_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPooledAkComponent
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetPooledAkComponent ( )
{
	static UFunction* pFnGetPooledAkComponent = NULL;

	if ( ! pFnGetPooledAkComponent )
		pFnGetPooledAkComponent = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPooledAkComponent" );

	AKFPlayerController_execGetPooledAkComponent_Parms GetPooledAkComponent_Parms;

	pFnGetPooledAkComponent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPooledAkComponent, &GetPooledAkComponent_Parms, NULL );

	pFnGetPooledAkComponent->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.SetObjeciveUIIcon
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SetObjeciveUIIcon ( )
{
	static UFunction* pFnSetObjeciveUIIcon = NULL;

	if ( ! pFnSetObjeciveUIIcon )
		pFnSetObjeciveUIIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetObjeciveUIIcon" );

	AKFPlayerController_execSetObjeciveUIIcon_Parms SetObjeciveUIIcon_Parms;

	this->ProcessEvent ( pFnSetObjeciveUIIcon, &SetObjeciveUIIcon_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateObjectiveUIProgress
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::UpdateObjectiveUIProgress ( )
{
	static UFunction* pFnUpdateObjectiveUIProgress = NULL;

	if ( ! pFnUpdateObjectiveUIProgress )
		pFnUpdateObjectiveUIProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateObjectiveUIProgress" );

	AKFPlayerController_execUpdateObjectiveUIProgress_Parms UpdateObjectiveUIProgress_Parms;

	this->ProcessEvent ( pFnUpdateObjectiveUIProgress, &UpdateObjectiveUIProgress_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetObjectiveUIActive
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::SetObjectiveUIActive ( )
{
	static UFunction* pFnSetObjectiveUIActive = NULL;

	if ( ! pFnSetObjectiveUIActive )
		pFnSetObjectiveUIActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetObjectiveUIActive" );

	AKFPlayerController_execSetObjectiveUIActive_Parms SetObjectiveUIActive_Parms;

	this->ProcessEvent ( pFnSetObjectiveUIActive, &SetObjectiveUIActive_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateRhythmCounterWidget
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::UpdateRhythmCounterWidget ( )
{
	static UFunction* pFnUpdateRhythmCounterWidget = NULL;

	if ( ! pFnUpdateRhythmCounterWidget )
		pFnUpdateRhythmCounterWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateRhythmCounterWidget" );

	AKFPlayerController_execUpdateRhythmCounterWidget_Parms UpdateRhythmCounterWidget_Parms;

	this->ProcessEvent ( pFnUpdateRhythmCounterWidget, &UpdateRhythmCounterWidget_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClosePostGameMenu
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ClosePostGameMenu ( )
{
	static UFunction* pFnClosePostGameMenu = NULL;

	if ( ! pFnClosePostGameMenu )
		pFnClosePostGameMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClosePostGameMenu" );

	AKFPlayerController_execClosePostGameMenu_Parms ClosePostGameMenu_Parms;

	this->ProcessEvent ( pFnClosePostGameMenu, &ClosePostGameMenu_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientShowPostGameMenu
// [0x010241C2] 
// Parameters infos:

void AKFPlayerController::ClientShowPostGameMenu ( )
{
	static UFunction* pFnClientShowPostGameMenu = NULL;

	if ( ! pFnClientShowPostGameMenu )
		pFnClientShowPostGameMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientShowPostGameMenu" );

	AKFPlayerController_execClientShowPostGameMenu_Parms ClientShowPostGameMenu_Parms;

	this->ProcessEvent ( pFnClientShowPostGameMenu, &ClientShowPostGameMenu_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClosePostRoundSummary
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ClosePostRoundSummary ( )
{
	static UFunction* pFnClosePostRoundSummary = NULL;

	if ( ! pFnClosePostRoundSummary )
		pFnClosePostRoundSummary = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClosePostRoundSummary" );

	AKFPlayerController_execClosePostRoundSummary_Parms ClosePostRoundSummary_Parms;

	this->ProcessEvent ( pFnClosePostRoundSummary, &ClosePostRoundSummary_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientOpenRoundSummary
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientOpenRoundSummary ( )
{
	static UFunction* pFnClientOpenRoundSummary = NULL;

	if ( ! pFnClientOpenRoundSummary )
		pFnClientOpenRoundSummary = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientOpenRoundSummary" );

	AKFPlayerController_execClientOpenRoundSummary_Parms ClientOpenRoundSummary_Parms;

	this->ProcessEvent ( pFnClientOpenRoundSummary, &ClientOpenRoundSummary_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyTraderDoshChanged
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::NotifyTraderDoshChanged ( )
{
	static UFunction* pFnNotifyTraderDoshChanged = NULL;

	if ( ! pFnNotifyTraderDoshChanged )
		pFnNotifyTraderDoshChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyTraderDoshChanged" );

	AKFPlayerController_execNotifyTraderDoshChanged_Parms NotifyTraderDoshChanged_Parms;

	this->ProcessEvent ( pFnNotifyTraderDoshChanged, &NotifyTraderDoshChanged_Parms, NULL );
};

// Function KFGame.KFPlayerController.CloseTraderMenu
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CloseTraderMenu ( )
{
	static UFunction* pFnCloseTraderMenu = NULL;

	if ( ! pFnCloseTraderMenu )
		pFnCloseTraderMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CloseTraderMenu" );

	AKFPlayerController_execCloseTraderMenu_Parms CloseTraderMenu_Parms;

	this->ProcessEvent ( pFnCloseTraderMenu, &CloseTraderMenu_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientOpenTraderMenu
// [0x010241C2] 
// Parameters infos:

void AKFPlayerController::ClientOpenTraderMenu ( )
{
	static UFunction* pFnClientOpenTraderMenu = NULL;

	if ( ! pFnClientOpenTraderMenu )
		pFnClientOpenTraderMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientOpenTraderMenu" );

	AKFPlayerController_execClientOpenTraderMenu_Parms ClientOpenTraderMenu_Parms;

	this->ProcessEvent ( pFnClientOpenTraderMenu, &ClientOpenTraderMenu_Parms, NULL );
};

// Function KFGame.KFPlayerController.OpenTraderMenu
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::OpenTraderMenu ( )
{
	static UFunction* pFnOpenTraderMenu = NULL;

	if ( ! pFnOpenTraderMenu )
		pFnOpenTraderMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OpenTraderMenu" );

	AKFPlayerController_execOpenTraderMenu_Parms OpenTraderMenu_Parms;

	this->ProcessEvent ( pFnOpenTraderMenu, &OpenTraderMenu_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerSetEnablePurchases
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::ServerSetEnablePurchases ( )
{
	static UFunction* pFnServerSetEnablePurchases = NULL;

	if ( ! pFnServerSetEnablePurchases )
		pFnServerSetEnablePurchases = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSetEnablePurchases" );

	AKFPlayerController_execServerSetEnablePurchases_Parms ServerSetEnablePurchases_Parms;

	this->ProcessEvent ( pFnServerSetEnablePurchases, &ServerSetEnablePurchases_Parms, NULL );
};

// Function KFGame.KFPlayerController.DoAutoPurchase
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::DoAutoPurchase ( )
{
	static UFunction* pFnDoAutoPurchase = NULL;

	if ( ! pFnDoAutoPurchase )
		pFnDoAutoPurchase = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DoAutoPurchase" );

	AKFPlayerController_execDoAutoPurchase_Parms DoAutoPurchase_Parms;

	this->ProcessEvent ( pFnDoAutoPurchase, &DoAutoPurchase_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPurchaseHelper
// [0x00024102] 
// Parameters infos:

void AKFPlayerController::GetPurchaseHelper ( )
{
	static UFunction* pFnGetPurchaseHelper = NULL;

	if ( ! pFnGetPurchaseHelper )
		pFnGetPurchaseHelper = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPurchaseHelper" );

	AKFPlayerController_execGetPurchaseHelper_Parms GetPurchaseHelper_Parms;

	this->ProcessEvent ( pFnGetPurchaseHelper, &GetPurchaseHelper_Parms, NULL );
};

// Function KFGame.KFPlayerController.StartAltFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::StartAltFire ( )
{
	static UFunction* pFnStartAltFire = NULL;

	if ( ! pFnStartAltFire )
		pFnStartAltFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.StartAltFire" );

	AKFPlayerController_execStartAltFire_Parms StartAltFire_Parms;

	this->ProcessEvent ( pFnStartAltFire, &StartAltFire_Parms, NULL );
};

// Function KFGame.KFPlayerController.StartFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.StartFire" );

	AKFPlayerController_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientSetOnlineStatus
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientSetOnlineStatus ( )
{
	static UFunction* pFnClientSetOnlineStatus = NULL;

	if ( ! pFnClientSetOnlineStatus )
		pFnClientSetOnlineStatus = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetOnlineStatus" );

	AKFPlayerController_execClientSetOnlineStatus_Parms ClientSetOnlineStatus_Parms;

	this->ProcessEvent ( pFnClientSetOnlineStatus, &ClientSetOnlineStatus_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientResetCountdown
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientResetCountdown ( )
{
	static UFunction* pFnClientResetCountdown = NULL;

	if ( ! pFnClientResetCountdown )
		pFnClientResetCountdown = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientResetCountdown" );

	AKFPlayerController_execClientResetCountdown_Parms ClientResetCountdown_Parms;

	this->ProcessEvent ( pFnClientResetCountdown, &ClientResetCountdown_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientSetCountdown
// [0x010241C2] 
// Parameters infos:

void AKFPlayerController::ClientSetCountdown ( )
{
	static UFunction* pFnClientSetCountdown = NULL;

	if ( ! pFnClientSetCountdown )
		pFnClientSetCountdown = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetCountdown" );

	AKFPlayerController_execClientSetCountdown_Parms ClientSetCountdown_Parms;

	this->ProcessEvent ( pFnClientSetCountdown, &ClientSetCountdown_Parms, NULL );
};

// Function KFGame.KFPlayerController.TeamTalk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::TeamTalk ( )
{
	static UFunction* pFnTeamTalk = NULL;

	if ( ! pFnTeamTalk )
		pFnTeamTalk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TeamTalk" );

	AKFPlayerController_execTeamTalk_Parms TeamTalk_Parms;

	this->ProcessEvent ( pFnTeamTalk, &TeamTalk_Parms, NULL );
};

// Function KFGame.KFPlayerController.Talk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::Talk ( )
{
	static UFunction* pFnTalk = NULL;

	if ( ! pFnTalk )
		pFnTalk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.Talk" );

	AKFPlayerController_execTalk_Parms Talk_Parms;

	this->ProcessEvent ( pFnTalk, &Talk_Parms, NULL );
};

// Function KFGame.KFPlayerController.OpenChatBox
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OpenChatBox ( )
{
	static UFunction* pFnOpenChatBox = NULL;

	if ( ! pFnOpenChatBox )
		pFnOpenChatBox = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OpenChatBox" );

	AKFPlayerController_execOpenChatBox_Parms OpenChatBox_Parms;

	this->ProcessEvent ( pFnOpenChatBox, &OpenChatBox_Parms, NULL );
};

// Function KFGame.KFPlayerController.RecieveChatMessage
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::RecieveChatMessage ( )
{
	static UFunction* pFnRecieveChatMessage = NULL;

	if ( ! pFnRecieveChatMessage )
		pFnRecieveChatMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.RecieveChatMessage" );

	AKFPlayerController_execRecieveChatMessage_Parms RecieveChatMessage_Parms;

	this->ProcessEvent ( pFnRecieveChatMessage, &RecieveChatMessage_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetChatChannel
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetChatChannel ( )
{
	static UFunction* pFnGetChatChannel = NULL;

	if ( ! pFnGetChatChannel )
		pFnGetChatChannel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetChatChannel" );

	AKFPlayerController_execGetChatChannel_Parms GetChatChannel_Parms;

	this->ProcessEvent ( pFnGetChatChannel, &GetChatChannel_Parms, NULL );
};

// Function KFGame.KFPlayerController.TeamMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventTeamMessage ( )
{
	static UFunction* pFnTeamMessage = NULL;

	if ( ! pFnTeamMessage )
		pFnTeamMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TeamMessage" );

	AKFPlayerController_eventTeamMessage_Parms TeamMessage_Parms;

	this->ProcessEvent ( pFnTeamMessage, &TeamMessage_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerTeamSay
// [0x00220042] 
// Parameters infos:

void AKFPlayerController::ServerTeamSay ( )
{
	static UFunction* pFnServerTeamSay = NULL;

	if ( ! pFnServerTeamSay )
		pFnServerTeamSay = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerTeamSay" );

	AKFPlayerController_execServerTeamSay_Parms ServerTeamSay_Parms;

	this->ProcessEvent ( pFnServerTeamSay, &ServerTeamSay_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerSay
// [0x00220042] 
// Parameters infos:

void AKFPlayerController::ServerSay ( )
{
	static UFunction* pFnServerSay = NULL;

	if ( ! pFnServerSay )
		pFnServerSay = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSay" );

	AKFPlayerController_execServerSay_Parms ServerSay_Parms;

	this->ProcessEvent ( pFnServerSay, &ServerSay_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnPS4AvatarDownloadComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnPS4AvatarDownloadComplete ( )
{
	static UFunction* pFnOnPS4AvatarDownloadComplete = NULL;

	if ( ! pFnOnPS4AvatarDownloadComplete )
		pFnOnPS4AvatarDownloadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnPS4AvatarDownloadComplete" );

	AKFPlayerController_execOnPS4AvatarDownloadComplete_Parms OnPS4AvatarDownloadComplete_Parms;

	this->ProcessEvent ( pFnOnPS4AvatarDownloadComplete, &OnPS4AvatarDownloadComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnAvatarURLPS4Received
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnAvatarURLPS4Received ( )
{
	static UFunction* pFnOnAvatarURLPS4Received = NULL;

	if ( ! pFnOnAvatarURLPS4Received )
		pFnOnAvatarURLPS4Received = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnAvatarURLPS4Received" );

	AKFPlayerController_execOnAvatarURLPS4Received_Parms OnAvatarURLPS4Received_Parms;

	this->ProcessEvent ( pFnOnAvatarURLPS4Received, &OnAvatarURLPS4Received_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPS4Avatar
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::GetPS4Avatar ( )
{
	static UFunction* pFnGetPS4Avatar = NULL;

	if ( ! pFnGetPS4Avatar )
		pFnGetPS4Avatar = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPS4Avatar" );

	AKFPlayerController_execGetPS4Avatar_Parms GetPS4Avatar_Parms;

	this->ProcessEvent ( pFnGetPS4Avatar, &GetPS4Avatar_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnAvatarReceived
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnAvatarReceived ( )
{
	static UFunction* pFnOnAvatarReceived = NULL;

	if ( ! pFnOnAvatarReceived )
		pFnOnAvatarReceived = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnAvatarReceived" );

	AKFPlayerController_execOnAvatarReceived_Parms OnAvatarReceived_Parms;

	this->ProcessEvent ( pFnOnAvatarReceived, &OnAvatarReceived_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetSteamAvatar
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::GetSteamAvatar ( )
{
	static UFunction* pFnGetSteamAvatar = NULL;

	if ( ! pFnGetSteamAvatar )
		pFnGetSteamAvatar = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetSteamAvatar" );

	AKFPlayerController_execGetSteamAvatar_Parms GetSteamAvatar_Parms;

	this->ProcessEvent ( pFnGetSteamAvatar, &GetSteamAvatar_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnLobbyStatusChanged
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnLobbyStatusChanged ( )
{
	static UFunction* pFnOnLobbyStatusChanged = NULL;

	if ( ! pFnOnLobbyStatusChanged )
		pFnOnLobbyStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnLobbyStatusChanged" );

	AKFPlayerController_execOnLobbyStatusChanged_Parms OnLobbyStatusChanged_Parms;

	this->ProcessEvent ( pFnOnLobbyStatusChanged, &OnLobbyStatusChanged_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyUnsuccessfulSearch
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::NotifyUnsuccessfulSearch ( )
{
	static UFunction* pFnNotifyUnsuccessfulSearch = NULL;

	if ( ! pFnNotifyUnsuccessfulSearch )
		pFnNotifyUnsuccessfulSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyUnsuccessfulSearch" );

	AKFPlayerController_execNotifyUnsuccessfulSearch_Parms NotifyUnsuccessfulSearch_Parms;

	this->ProcessEvent ( pFnNotifyUnsuccessfulSearch, &NotifyUnsuccessfulSearch_Parms, NULL );
};

// Function KFGame.KFPlayerController.SkipLobby
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::SkipLobby ( )
{
	static UFunction* pFnSkipLobby = NULL;

	if ( ! pFnSkipLobby )
		pFnSkipLobby = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SkipLobby" );

	AKFPlayerController_execSkipLobby_Parms SkipLobby_Parms;

	this->ProcessEvent ( pFnSkipLobby, &SkipLobby_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientSetFrontEnd
// [0x010241C2] 
// Parameters infos:

void AKFPlayerController::ClientSetFrontEnd ( )
{
	static UFunction* pFnClientSetFrontEnd = NULL;

	if ( ! pFnClientSetFrontEnd )
		pFnClientSetFrontEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetFrontEnd" );

	AKFPlayerController_execClientSetFrontEnd_Parms ClientSetFrontEnd_Parms;

	this->ProcessEvent ( pFnClientSetFrontEnd, &ClientSetFrontEnd_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientOnBossDied
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientOnBossDied ( )
{
	static UFunction* pFnClientOnBossDied = NULL;

	if ( ! pFnClientOnBossDied )
		pFnClientOnBossDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientOnBossDied" );

	AKFPlayerController_execClientOnBossDied_Parms ClientOnBossDied_Parms;

	this->ProcessEvent ( pFnClientOnBossDied, &ClientOnBossDied_Parms, NULL );
};

// Function KFGame.KFPlayerController.HideBossNamePlate
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::HideBossNamePlate ( )
{
	static UFunction* pFnHideBossNamePlate = NULL;

	if ( ! pFnHideBossNamePlate )
		pFnHideBossNamePlate = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HideBossNamePlate" );

	AKFPlayerController_execHideBossNamePlate_Parms HideBossNamePlate_Parms;

	this->ProcessEvent ( pFnHideBossNamePlate, &HideBossNamePlate_Parms, NULL );
};

// Function KFGame.KFPlayerController.ShowBossNameplate
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::ShowBossNameplate ( )
{
	static UFunction* pFnShowBossNameplate = NULL;

	if ( ! pFnShowBossNameplate )
		pFnShowBossNameplate = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ShowBossNameplate" );

	AKFPlayerController_execShowBossNameplate_Parms ShowBossNameplate_Parms;

	this->ProcessEvent ( pFnShowBossNameplate, &ShowBossNameplate_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetGFxHUD
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SetGFxHUD ( )
{
	static UFunction* pFnSetGFxHUD = NULL;

	if ( ! pFnSetGFxHUD )
		pFnSetGFxHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetGFxHUD" );

	AKFPlayerController_execSetGFxHUD_Parms SetGFxHUD_Parms;

	this->ProcessEvent ( pFnSetGFxHUD, &SetGFxHUD_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientRecieveNewTeam
// [0x00020000] 
// Parameters infos:

void AKFPlayerController::ClientRecieveNewTeam ( )
{
	static UFunction* pFnClientRecieveNewTeam = NULL;

	if ( ! pFnClientRecieveNewTeam )
		pFnClientRecieveNewTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientRecieveNewTeam" );

	AKFPlayerController_execClientRecieveNewTeam_Parms ClientRecieveNewTeam_Parms;

	this->ProcessEvent ( pFnClientRecieveNewTeam, &ClientRecieveNewTeam_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerNotifyTeamChanged
// [0x00020000] 
// Parameters infos:

void AKFPlayerController::ServerNotifyTeamChanged ( )
{
	static UFunction* pFnServerNotifyTeamChanged = NULL;

	if ( ! pFnServerNotifyTeamChanged )
		pFnServerNotifyTeamChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerNotifyTeamChanged" );

	AKFPlayerController_execServerNotifyTeamChanged_Parms ServerNotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnServerNotifyTeamChanged, &ServerNotifyTeamChanged_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientFadeOutZedTime
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientFadeOutZedTime ( )
{
	static UFunction* pFnClientFadeOutZedTime = NULL;

	if ( ! pFnClientFadeOutZedTime )
		pFnClientFadeOutZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientFadeOutZedTime" );

	AKFPlayerController_execClientFadeOutZedTime_Parms ClientFadeOutZedTime_Parms;

	this->ProcessEvent ( pFnClientFadeOutZedTime, &ClientFadeOutZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientEnterZedTime
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientEnterZedTime ( )
{
	static UFunction* pFnClientEnterZedTime = NULL;

	if ( ! pFnClientEnterZedTime )
		pFnClientEnterZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientEnterZedTime" );

	AKFPlayerController_execClientEnterZedTime_Parms ClientEnterZedTime_Parms;

	this->ProcessEvent ( pFnClientEnterZedTime, &ClientEnterZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientCompleteZedTime
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientCompleteZedTime ( )
{
	static UFunction* pFnClientCompleteZedTime = NULL;

	if ( ! pFnClientCompleteZedTime )
		pFnClientCompleteZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientCompleteZedTime" );

	AKFPlayerController_execClientCompleteZedTime_Parms ClientCompleteZedTime_Parms;

	this->ProcessEvent ( pFnClientCompleteZedTime, &ClientCompleteZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.CompleteZedTime
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CompleteZedTime ( )
{
	static UFunction* pFnCompleteZedTime = NULL;

	if ( ! pFnCompleteZedTime )
		pFnCompleteZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CompleteZedTime" );

	AKFPlayerController_execCompleteZedTime_Parms CompleteZedTime_Parms;

	this->ProcessEvent ( pFnCompleteZedTime, &CompleteZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.FadeOutZedTime
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::FadeOutZedTime ( )
{
	static UFunction* pFnFadeOutZedTime = NULL;

	if ( ! pFnFadeOutZedTime )
		pFnFadeOutZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.FadeOutZedTime" );

	AKFPlayerController_execFadeOutZedTime_Parms FadeOutZedTime_Parms;

	this->ProcessEvent ( pFnFadeOutZedTime, &FadeOutZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.EnterZedTime
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::EnterZedTime ( )
{
	static UFunction* pFnEnterZedTime = NULL;

	if ( ! pFnEnterZedTime )
		pFnEnterZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.EnterZedTime" );

	AKFPlayerController_execEnterZedTime_Parms EnterZedTime_Parms;

	this->ProcessEvent ( pFnEnterZedTime, &EnterZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.IsAffectedByZedTime
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::IsAffectedByZedTime ( )
{
	static UFunction* pFnIsAffectedByZedTime = NULL;

	if ( ! pFnIsAffectedByZedTime )
		pFnIsAffectedByZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsAffectedByZedTime" );

	AKFPlayerController_execIsAffectedByZedTime_Parms IsAffectedByZedTime_Parms;

	this->ProcessEvent ( pFnIsAffectedByZedTime, &IsAffectedByZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyPartialZedTimeExited
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventNotifyPartialZedTimeExited ( )
{
	static UFunction* pFnNotifyPartialZedTimeExited = NULL;

	if ( ! pFnNotifyPartialZedTimeExited )
		pFnNotifyPartialZedTimeExited = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyPartialZedTimeExited" );

	AKFPlayerController_eventNotifyPartialZedTimeExited_Parms NotifyPartialZedTimeExited_Parms;

	this->ProcessEvent ( pFnNotifyPartialZedTimeExited, &NotifyPartialZedTimeExited_Parms, NULL );
};

// Function KFGame.KFPlayerController.StartPartialZedTimeSightCounter
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::StartPartialZedTimeSightCounter ( )
{
	static UFunction* pFnStartPartialZedTimeSightCounter = NULL;

	if ( ! pFnStartPartialZedTimeSightCounter )
		pFnStartPartialZedTimeSightCounter = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.StartPartialZedTimeSightCounter" );

	AKFPlayerController_execStartPartialZedTimeSightCounter_Parms StartPartialZedTimeSightCounter_Parms;

	pFnStartPartialZedTimeSightCounter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartPartialZedTimeSightCounter, &StartPartialZedTimeSightCounter_Parms, NULL );

	pFnStartPartialZedTimeSightCounter->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.CanSeeZedTimePawn
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::CanSeeZedTimePawn ( )
{
	static UFunction* pFnCanSeeZedTimePawn = NULL;

	if ( ! pFnCanSeeZedTimePawn )
		pFnCanSeeZedTimePawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CanSeeZedTimePawn" );

	AKFPlayerController_execCanSeeZedTimePawn_Parms CanSeeZedTimePawn_Parms;

	pFnCanSeeZedTimePawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanSeeZedTimePawn, &CanSeeZedTimePawn_Parms, NULL );

	pFnCanSeeZedTimePawn->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ClientSetCinematicMode
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientSetCinematicMode ( )
{
	static UFunction* pFnClientSetCinematicMode = NULL;

	if ( ! pFnClientSetCinematicMode )
		pFnClientSetCinematicMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetCinematicMode" );

	AKFPlayerController_execClientSetCinematicMode_Parms ClientSetCinematicMode_Parms;

	this->ProcessEvent ( pFnClientSetCinematicMode, &ClientSetCinematicMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetNightVision
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::SetNightVision ( )
{
	static UFunction* pFnSetNightVision = NULL;

	if ( ! pFnSetNightVision )
		pFnSetNightVision = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetNightVision" );

	AKFPlayerController_execSetNightVision_Parms SetNightVision_Parms;

	this->ProcessEvent ( pFnSetNightVision, &SetNightVision_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetAmplificationLightEnabled
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::SetAmplificationLightEnabled ( )
{
	static UFunction* pFnSetAmplificationLightEnabled = NULL;

	if ( ! pFnSetAmplificationLightEnabled )
		pFnSetAmplificationLightEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetAmplificationLightEnabled" );

	AKFPlayerController_execSetAmplificationLightEnabled_Parms SetAmplificationLightEnabled_Parms;

	this->ProcessEvent ( pFnSetAmplificationLightEnabled, &SetAmplificationLightEnabled_Parms, NULL );
};

// Function KFGame.KFPlayerController.ToggleHealthEffects
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ToggleHealthEffects ( )
{
	static UFunction* pFnToggleHealthEffects = NULL;

	if ( ! pFnToggleHealthEffects )
		pFnToggleHealthEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ToggleHealthEffects" );

	AKFPlayerController_execToggleHealthEffects_Parms ToggleHealthEffects_Parms;

	this->ProcessEvent ( pFnToggleHealthEffects, &ToggleHealthEffects_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateLowHealthEffect
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::UpdateLowHealthEffect ( )
{
	static UFunction* pFnUpdateLowHealthEffect = NULL;

	if ( ! pFnUpdateLowHealthEffect )
		pFnUpdateLowHealthEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateLowHealthEffect" );

	AKFPlayerController_execUpdateLowHealthEffect_Parms UpdateLowHealthEffect_Parms;

	this->ProcessEvent ( pFnUpdateLowHealthEffect, &UpdateLowHealthEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateEarRingEffect
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::UpdateEarRingEffect ( )
{
	static UFunction* pFnUpdateEarRingEffect = NULL;

	if ( ! pFnUpdateEarRingEffect )
		pFnUpdateEarRingEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateEarRingEffect" );

	AKFPlayerController_execUpdateEarRingEffect_Parms UpdateEarRingEffect_Parms;

	this->ProcessEvent ( pFnUpdateEarRingEffect, &UpdateEarRingEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayEarRingEffect
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::PlayEarRingEffect ( )
{
	static UFunction* pFnPlayEarRingEffect = NULL;

	if ( ! pFnPlayEarRingEffect )
		pFnPlayEarRingEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayEarRingEffect" );

	AKFPlayerController_execPlayEarRingEffect_Parms PlayEarRingEffect_Parms;

	this->ProcessEvent ( pFnPlayEarRingEffect, &PlayEarRingEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateZEDTimeEffects
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::UpdateZEDTimeEffects ( )
{
	static UFunction* pFnUpdateZEDTimeEffects = NULL;

	if ( ! pFnUpdateZEDTimeEffects )
		pFnUpdateZEDTimeEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateZEDTimeEffects" );

	AKFPlayerController_execUpdateZEDTimeEffects_Parms UpdateZEDTimeEffects_Parms;

	this->ProcessEvent ( pFnUpdateZEDTimeEffects, &UpdateZEDTimeEffects_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetZedTimeEffectIntensity
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::SetZedTimeEffectIntensity ( )
{
	static UFunction* pFnSetZedTimeEffectIntensity = NULL;

	if ( ! pFnSetZedTimeEffectIntensity )
		pFnSetZedTimeEffectIntensity = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetZedTimeEffectIntensity" );

	AKFPlayerController_execSetZedTimeEffectIntensity_Parms SetZedTimeEffectIntensity_Parms;

	this->ProcessEvent ( pFnSetZedTimeEffectIntensity, &SetZedTimeEffectIntensity_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateScreenEffect
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::UpdateScreenEffect ( )
{
	static UFunction* pFnUpdateScreenEffect = NULL;

	if ( ! pFnUpdateScreenEffect )
		pFnUpdateScreenEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateScreenEffect" );

	AKFPlayerController_execUpdateScreenEffect_Parms UpdateScreenEffect_Parms;

	this->ProcessEvent ( pFnUpdateScreenEffect, &UpdateScreenEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.ShouldDisplayGameplayPostProcessFX
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ShouldDisplayGameplayPostProcessFX ( )
{
	static UFunction* pFnShouldDisplayGameplayPostProcessFX = NULL;

	if ( ! pFnShouldDisplayGameplayPostProcessFX )
		pFnShouldDisplayGameplayPostProcessFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ShouldDisplayGameplayPostProcessFX" );

	AKFPlayerController_execShouldDisplayGameplayPostProcessFX_Parms ShouldDisplayGameplayPostProcessFX_Parms;

	this->ProcessEvent ( pFnShouldDisplayGameplayPostProcessFX, &ShouldDisplayGameplayPostProcessFX_Parms, NULL );
};

// Function KFGame.KFPlayerController.ResetGameplayPostProcessFX
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ResetGameplayPostProcessFX ( )
{
	static UFunction* pFnResetGameplayPostProcessFX = NULL;

	if ( ! pFnResetGameplayPostProcessFX )
		pFnResetGameplayPostProcessFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ResetGameplayPostProcessFX" );

	AKFPlayerController_execResetGameplayPostProcessFX_Parms ResetGameplayPostProcessFX_Parms;

	this->ProcessEvent ( pFnResetGameplayPostProcessFX, &ResetGameplayPostProcessFX_Parms, NULL );
};

// Function KFGame.KFPlayerController.InitGameplayPostProcessFX
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::InitGameplayPostProcessFX ( )
{
	static UFunction* pFnInitGameplayPostProcessFX = NULL;

	if ( ! pFnInitGameplayPostProcessFX )
		pFnInitGameplayPostProcessFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.InitGameplayPostProcessFX" );

	AKFPlayerController_execInitGameplayPostProcessFX_Parms InitGameplayPostProcessFX_Parms;

	this->ProcessEvent ( pFnInitGameplayPostProcessFX, &InitGameplayPostProcessFX_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetPerkEffect
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SetPerkEffect ( )
{
	static UFunction* pFnSetPerkEffect = NULL;

	if ( ! pFnSetPerkEffect )
		pFnSetPerkEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetPerkEffect" );

	AKFPlayerController_execSetPerkEffect_Parms SetPerkEffect_Parms;

	this->ProcessEvent ( pFnSetPerkEffect, &SetPerkEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetGrabEffectEMP
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::SetGrabEffectEMP ( )
{
	static UFunction* pFnSetGrabEffectEMP = NULL;

	if ( ! pFnSetGrabEffectEMP )
		pFnSetGrabEffectEMP = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetGrabEffectEMP" );

	AKFPlayerController_execSetGrabEffectEMP_Parms SetGrabEffectEMP_Parms;

	this->ProcessEvent ( pFnSetGrabEffectEMP, &SetGrabEffectEMP_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetGrabEffect
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::SetGrabEffect ( )
{
	static UFunction* pFnSetGrabEffect = NULL;

	if ( ! pFnSetGrabEffect )
		pFnSetGrabEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetGrabEffect" );

	AKFPlayerController_execSetGrabEffect_Parms SetGrabEffect_Parms;

	this->ProcessEvent ( pFnSetGrabEffect, &SetGrabEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayerTick
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventPlayerTick ( )
{
	static UFunction* pFnPlayerTick = NULL;

	if ( ! pFnPlayerTick )
		pFnPlayerTick = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayerTick" );

	AKFPlayerController_eventPlayerTick_Parms PlayerTick_Parms;

	this->ProcessEvent ( pFnPlayerTick, &PlayerTick_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetEffectTimeRemaining
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::GetEffectTimeRemaining ( )
{
	static UFunction* pFnGetEffectTimeRemaining = NULL;

	if ( ! pFnGetEffectTimeRemaining )
		pFnGetEffectTimeRemaining = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetEffectTimeRemaining" );

	AKFPlayerController_execGetEffectTimeRemaining_Parms GetEffectTimeRemaining_Parms;

	this->ProcessEvent ( pFnGetEffectTimeRemaining, &GetEffectTimeRemaining_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckForReducedSirenScreamEffect
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::CheckForReducedSirenScreamEffect ( )
{
	static UFunction* pFnCheckForReducedSirenScreamEffect = NULL;

	if ( ! pFnCheckForReducedSirenScreamEffect )
		pFnCheckForReducedSirenScreamEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckForReducedSirenScreamEffect" );

	AKFPlayerController_execCheckForReducedSirenScreamEffect_Parms CheckForReducedSirenScreamEffect_Parms;

	this->ProcessEvent ( pFnCheckForReducedSirenScreamEffect, &CheckForReducedSirenScreamEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayScreenMaterialEffects
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::PlayScreenMaterialEffects ( )
{
	static UFunction* pFnPlayScreenMaterialEffects = NULL;

	if ( ! pFnPlayScreenMaterialEffects )
		pFnPlayScreenMaterialEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayScreenMaterialEffects" );

	AKFPlayerController_execPlayScreenMaterialEffects_Parms PlayScreenMaterialEffects_Parms;

	this->ProcessEvent ( pFnPlayScreenMaterialEffects, &PlayScreenMaterialEffects_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayScreenEffects
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::PlayScreenEffects ( )
{
	static UFunction* pFnPlayScreenEffects = NULL;

	if ( ! pFnPlayScreenEffects )
		pFnPlayScreenEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayScreenEffects" );

	AKFPlayerController_execPlayScreenEffects_Parms PlayScreenEffects_Parms;

	this->ProcessEvent ( pFnPlayScreenEffects, &PlayScreenEffects_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayScreenHitFX
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::PlayScreenHitFX ( )
{
	static UFunction* pFnPlayScreenHitFX = NULL;

	if ( ! pFnPlayScreenHitFX )
		pFnPlayScreenHitFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayScreenHitFX" );

	AKFPlayerController_execPlayScreenHitFX_Parms PlayScreenHitFX_Parms;

	this->ProcessEvent ( pFnPlayScreenHitFX, &PlayScreenHitFX_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckCurrentUsableActor
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CheckCurrentUsableActor ( )
{
	static UFunction* pFnCheckCurrentUsableActor = NULL;

	if ( ! pFnCheckCurrentUsableActor )
		pFnCheckCurrentUsableActor = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckCurrentUsableActor" );

	AKFPlayerController_execCheckCurrentUsableActor_Parms CheckCurrentUsableActor_Parms;

	this->ProcessEvent ( pFnCheckCurrentUsableActor, &CheckCurrentUsableActor_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateInteractionMessages
// [0x00022002] 
// Parameters infos:

void AKFPlayerController::UpdateInteractionMessages ( )
{
	static UFunction* pFnUpdateInteractionMessages = NULL;

	if ( ! pFnUpdateInteractionMessages )
		pFnUpdateInteractionMessages = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateInteractionMessages" );

	AKFPlayerController_execUpdateInteractionMessages_Parms UpdateInteractionMessages_Parms;

	this->ProcessEvent ( pFnUpdateInteractionMessages, &UpdateInteractionMessages_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdatePendingInteractionMessage
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::UpdatePendingInteractionMessage ( )
{
	static UFunction* pFnUpdatePendingInteractionMessage = NULL;

	if ( ! pFnUpdatePendingInteractionMessage )
		pFnUpdatePendingInteractionMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdatePendingInteractionMessage" );

	AKFPlayerController_execUpdatePendingInteractionMessage_Parms UpdatePendingInteractionMessage_Parms;

	this->ProcessEvent ( pFnUpdatePendingInteractionMessage, &UpdatePendingInteractionMessage_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetPendingInteractionMessage
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SetPendingInteractionMessage ( )
{
	static UFunction* pFnSetPendingInteractionMessage = NULL;

	if ( ! pFnSetPendingInteractionMessage )
		pFnSetPendingInteractionMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetPendingInteractionMessage" );

	AKFPlayerController_execSetPendingInteractionMessage_Parms SetPendingInteractionMessage_Parms;

	this->ProcessEvent ( pFnSetPendingInteractionMessage, &SetPendingInteractionMessage_Parms, NULL );
};

// Function KFGame.KFPlayerController.ReceiveLocalizedMessage
// [0x010249C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventReceiveLocalizedMessage ( )
{
	static UFunction* pFnReceiveLocalizedMessage = NULL;

	if ( ! pFnReceiveLocalizedMessage )
		pFnReceiveLocalizedMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ReceiveLocalizedMessage" );

	AKFPlayerController_eventReceiveLocalizedMessage_Parms ReceiveLocalizedMessage_Parms;

	this->ProcessEvent ( pFnReceiveLocalizedMessage, &ReceiveLocalizedMessage_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetTriggerUseList
// [0x00C20002] 
// Parameters infos:

void AKFPlayerController::GetTriggerUseList ( )
{
	static UFunction* pFnGetTriggerUseList = NULL;

	if ( ! pFnGetTriggerUseList )
		pFnGetTriggerUseList = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetTriggerUseList" );

	AKFPlayerController_execGetTriggerUseList_Parms GetTriggerUseList_Parms;

	this->ProcessEvent ( pFnGetTriggerUseList, &GetTriggerUseList_Parms, NULL );
};

// Function KFGame.KFPlayerController.TriggerInteracted
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::TriggerInteracted ( )
{
	static UFunction* pFnTriggerInteracted = NULL;

	if ( ! pFnTriggerInteracted )
		pFnTriggerInteracted = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TriggerInteracted" );

	AKFPlayerController_execTriggerInteracted_Parms TriggerInteracted_Parms;

	this->ProcessEvent ( pFnTriggerInteracted, &TriggerInteracted_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetCurrentUsableActor
// [0x00026102] 
// Parameters infos:

void AKFPlayerController::GetCurrentUsableActor ( )
{
	static UFunction* pFnGetCurrentUsableActor = NULL;

	if ( ! pFnGetCurrentUsableActor )
		pFnGetCurrentUsableActor = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetCurrentUsableActor" );

	AKFPlayerController_execGetCurrentUsableActor_Parms GetCurrentUsableActor_Parms;

	this->ProcessEvent ( pFnGetCurrentUsableActor, &GetCurrentUsableActor_Parms, NULL );
};

// Function KFGame.KFPlayerController.AimingHelp
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AimingHelp ( )
{
	static UFunction* pFnAimingHelp = NULL;

	if ( ! pFnAimingHelp )
		pFnAimingHelp = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AimingHelp" );

	AKFPlayerController_execAimingHelp_Parms AimingHelp_Parms;

	this->ProcessEvent ( pFnAimingHelp, &AimingHelp_Parms, NULL );
};

// Function KFGame.KFPlayerController.StartAutoTargeting
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::StartAutoTargeting ( )
{
	static UFunction* pFnStartAutoTargeting = NULL;

	if ( ! pFnStartAutoTargeting )
		pFnStartAutoTargeting = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.StartAutoTargeting" );

	AKFPlayerController_execStartAutoTargeting_Parms StartAutoTargeting_Parms;

	this->ProcessEvent ( pFnStartAutoTargeting, &StartAutoTargeting_Parms, NULL );
};

// Function KFGame.KFPlayerController.ModifyUpdateRotation
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::ModifyUpdateRotation ( )
{
	static UFunction* pFnModifyUpdateRotation = NULL;

	if ( ! pFnModifyUpdateRotation )
		pFnModifyUpdateRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ModifyUpdateRotation" );

	AKFPlayerController_execModifyUpdateRotation_Parms ModifyUpdateRotation_Parms;

	this->ProcessEvent ( pFnModifyUpdateRotation, &ModifyUpdateRotation_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetForceLookAtPawn
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SetForceLookAtPawn ( )
{
	static UFunction* pFnSetForceLookAtPawn = NULL;

	if ( ! pFnSetForceLookAtPawn )
		pFnSetForceLookAtPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetForceLookAtPawn" );

	AKFPlayerController_execSetForceLookAtPawn_Parms SetForceLookAtPawn_Parms;

	this->ProcessEvent ( pFnSetForceLookAtPawn, &SetForceLookAtPawn_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetServerMoveDeltaTime
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetServerMoveDeltaTime ( )
{
	static UFunction* pFnGetServerMoveDeltaTime = NULL;

	if ( ! pFnGetServerMoveDeltaTime )
		pFnGetServerMoveDeltaTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetServerMoveDeltaTime" );

	AKFPlayerController_execGetServerMoveDeltaTime_Parms GetServerMoveDeltaTime_Parms;

	this->ProcessEvent ( pFnGetServerMoveDeltaTime, &GetServerMoveDeltaTime_Parms, NULL );
};

// Function KFGame.KFPlayerController.CallServerMove
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::CallServerMove ( )
{
	static UFunction* pFnCallServerMove = NULL;

	if ( ! pFnCallServerMove )
		pFnCallServerMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CallServerMove" );

	AKFPlayerController_execCallServerMove_Parms CallServerMove_Parms;

	this->ProcessEvent ( pFnCallServerMove, &CallServerMove_Parms, NULL );
};

// Function KFGame.KFPlayerController.DualServerMove
// [0x00224042] 
// Parameters infos:

void AKFPlayerController::DualServerMove ( )
{
	static UFunction* pFnDualServerMove = NULL;

	if ( ! pFnDualServerMove )
		pFnDualServerMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DualServerMove" );

	AKFPlayerController_execDualServerMove_Parms DualServerMove_Parms;

	this->ProcessEvent ( pFnDualServerMove, &DualServerMove_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerMove
// [0x00A24042] 
// Parameters infos:

void AKFPlayerController::ServerMove ( )
{
	static UFunction* pFnServerMove = NULL;

	if ( ! pFnServerMove )
		pFnServerMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerMove" );

	AKFPlayerController_execServerMove_Parms ServerMove_Parms;

	this->ProcessEvent ( pFnServerMove, &ServerMove_Parms, NULL );
};

// Function KFGame.KFPlayerController.TickPauseMoveInput
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::TickPauseMoveInput ( )
{
	static UFunction* pFnTickPauseMoveInput = NULL;

	if ( ! pFnTickPauseMoveInput )
		pFnTickPauseMoveInput = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TickPauseMoveInput" );

	AKFPlayerController_execTickPauseMoveInput_Parms TickPauseMoveInput_Parms;

	this->ProcessEvent ( pFnTickPauseMoveInput, &TickPauseMoveInput_Parms, NULL );
};

// Function KFGame.KFPlayerController.PauseMoveInput
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::PauseMoveInput ( )
{
	static UFunction* pFnPauseMoveInput = NULL;

	if ( ! pFnPauseMoveInput )
		pFnPauseMoveInput = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PauseMoveInput" );

	AKFPlayerController_execPauseMoveInput_Parms PauseMoveInput_Parms;

	this->ProcessEvent ( pFnPauseMoveInput, &PauseMoveInput_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckJumpOrDuck
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CheckJumpOrDuck ( )
{
	static UFunction* pFnCheckJumpOrDuck = NULL;

	if ( ! pFnCheckJumpOrDuck )
		pFnCheckJumpOrDuck = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckJumpOrDuck" );

	AKFPlayerController_execCheckJumpOrDuck_Parms CheckJumpOrDuck_Parms;

	this->ProcessEvent ( pFnCheckJumpOrDuck, &CheckJumpOrDuck_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleWalking
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::HandleWalking ( )
{
	static UFunction* pFnHandleWalking = NULL;

	if ( ! pFnHandleWalking )
		pFnHandleWalking = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleWalking" );

	AKFPlayerController_execHandleWalking_Parms HandleWalking_Parms;

	this->ProcessEvent ( pFnHandleWalking, &HandleWalking_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnWeaponAsyncContentLoaded
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventOnWeaponAsyncContentLoaded ( )
{
	static UFunction* pFnOnWeaponAsyncContentLoaded = NULL;

	if ( ! pFnOnWeaponAsyncContentLoaded )
		pFnOnWeaponAsyncContentLoaded = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnWeaponAsyncContentLoaded" );

	AKFPlayerController_eventOnWeaponAsyncContentLoaded_Parms OnWeaponAsyncContentLoaded_Parms;

	this->ProcessEvent ( pFnOnWeaponAsyncContentLoaded, &OnWeaponAsyncContentLoaded_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientTriggerWeaponContentLoad
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientTriggerWeaponContentLoad ( )
{
	static UFunction* pFnClientTriggerWeaponContentLoad = NULL;

	if ( ! pFnClientTriggerWeaponContentLoad )
		pFnClientTriggerWeaponContentLoad = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientTriggerWeaponContentLoad" );

	AKFPlayerController_execClientTriggerWeaponContentLoad_Parms ClientTriggerWeaponContentLoad_Parms;

	this->ProcessEvent ( pFnClientTriggerWeaponContentLoad, &ClientTriggerWeaponContentLoad_Parms, NULL );
};

// Function KFGame.KFPlayerController.TriggerWeaponContentLoad
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventTriggerWeaponContentLoad ( )
{
	static UFunction* pFnTriggerWeaponContentLoad = NULL;

	if ( ! pFnTriggerWeaponContentLoad )
		pFnTriggerWeaponContentLoad = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TriggerWeaponContentLoad" );

	AKFPlayerController_eventTriggerWeaponContentLoad_Parms TriggerWeaponContentLoad_Parms;

	this->ProcessEvent ( pFnTriggerWeaponContentLoad, &TriggerWeaponContentLoad_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerThrowOtherWeapon
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::ServerThrowOtherWeapon ( )
{
	static UFunction* pFnServerThrowOtherWeapon = NULL;

	if ( ! pFnServerThrowOtherWeapon )
		pFnServerThrowOtherWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerThrowOtherWeapon" );

	AKFPlayerController_execServerThrowOtherWeapon_Parms ServerThrowOtherWeapon_Parms;

	this->ProcessEvent ( pFnServerThrowOtherWeapon, &ServerThrowOtherWeapon_Parms, NULL );
};

// Function KFGame.KFPlayerController.ProcessAimCorrection
// [0x00C20002] 
// Parameters infos:

void AKFPlayerController::ProcessAimCorrection ( )
{
	static UFunction* pFnProcessAimCorrection = NULL;

	if ( ! pFnProcessAimCorrection )
		pFnProcessAimCorrection = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ProcessAimCorrection" );

	AKFPlayerController_execProcessAimCorrection_Parms ProcessAimCorrection_Parms;

	this->ProcessEvent ( pFnProcessAimCorrection, &ProcessAimCorrection_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetAdjustedAimFor
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::GetAdjustedAimFor ( )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetAdjustedAimFor" );

	AKFPlayerController_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );
};

// Function KFGame.KFPlayerController.SwitchToBestWeapon
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::SwitchToBestWeapon ( )
{
	static UFunction* pFnSwitchToBestWeapon = NULL;

	if ( ! pFnSwitchToBestWeapon )
		pFnSwitchToBestWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SwitchToBestWeapon" );

	AKFPlayerController_execSwitchToBestWeapon_Parms SwitchToBestWeapon_Parms;

	this->ProcessEvent ( pFnSwitchToBestWeapon, &SwitchToBestWeapon_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPickedAimAtTarget
// [0x00424103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::GetPickedAimAtTarget ( )
{
	static UFunction* pFnGetPickedAimAtTarget = NULL;

	if ( ! pFnGetPickedAimAtTarget )
		pFnGetPickedAimAtTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPickedAimAtTarget" );

	AKFPlayerController_execGetPickedAimAtTarget_Parms GetPickedAimAtTarget_Parms;

	this->ProcessEvent ( pFnGetPickedAimAtTarget, &GetPickedAimAtTarget_Parms, NULL );
};

// Function KFGame.KFPlayerController.PickAimAtTarget
// [0x00444401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::PickAimAtTarget ( )
{
	static UFunction* pFnPickAimAtTarget = NULL;

	if ( ! pFnPickAimAtTarget )
		pFnPickAimAtTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PickAimAtTarget" );

	AKFPlayerController_execPickAimAtTarget_Parms PickAimAtTarget_Parms;

	pFnPickAimAtTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPickAimAtTarget, &PickAimAtTarget_Parms, NULL );

	pFnPickAimAtTarget->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ClientWasKicked
// [0x010209C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventClientWasKicked ( )
{
	static UFunction* pFnClientWasKicked = NULL;

	if ( ! pFnClientWasKicked )
		pFnClientWasKicked = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientWasKicked" );

	AKFPlayerController_eventClientWasKicked_Parms ClientWasKicked_Parms;

	this->ProcessEvent ( pFnClientWasKicked, &ClientWasKicked_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerAdmin
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ServerAdmin ( )
{
	static UFunction* pFnServerAdmin = NULL;

	if ( ! pFnServerAdmin )
		pFnServerAdmin = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerAdmin" );

	AKFPlayerController_execServerAdmin_Parms ServerAdmin_Parms;

	this->ProcessEvent ( pFnServerAdmin, &ServerAdmin_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerKick
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::ServerKick ( )
{
	static UFunction* pFnServerKick = NULL;

	if ( ! pFnServerKick )
		pFnServerKick = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerKick" );

	AKFPlayerController_execServerKick_Parms ServerKick_Parms;

	this->ProcessEvent ( pFnServerKick, &ServerKick_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerKickBan
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::ServerKickBan ( )
{
	static UFunction* pFnServerKickBan = NULL;

	if ( ! pFnServerKickBan )
		pFnServerKickBan = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerKickBan" );

	AKFPlayerController_execServerKickBan_Parms ServerKickBan_Parms;

	this->ProcessEvent ( pFnServerKickBan, &ServerKickBan_Parms, NULL );
};

// Function KFGame.KFPlayerController.KickBan
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::KickBan ( )
{
	static UFunction* pFnKickBan = NULL;

	if ( ! pFnKickBan )
		pFnKickBan = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.KickBan" );

	AKFPlayerController_execKickBan_Parms KickBan_Parms;

	this->ProcessEvent ( pFnKickBan, &KickBan_Parms, NULL );
};

// Function KFGame.KFPlayerController.Kick
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::Kick ( )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.Kick" );

	AKFPlayerController_execKick_Parms Kick_Parms;

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function KFGame.KFPlayerController.Admin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::Admin ( )
{
	static UFunction* pFnAdmin = NULL;

	if ( ! pFnAdmin )
		pFnAdmin = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.Admin" );

	AKFPlayerController_execAdmin_Parms Admin_Parms;

	this->ProcessEvent ( pFnAdmin, &Admin_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerAdminLogOut
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ServerAdminLogOut ( )
{
	static UFunction* pFnServerAdminLogOut = NULL;

	if ( ! pFnServerAdminLogOut )
		pFnServerAdminLogOut = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerAdminLogOut" );

	AKFPlayerController_execServerAdminLogOut_Parms ServerAdminLogOut_Parms;

	this->ProcessEvent ( pFnServerAdminLogOut, &ServerAdminLogOut_Parms, NULL );
};

// Function KFGame.KFPlayerController.AdminLogout
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::AdminLogout ( )
{
	static UFunction* pFnAdminLogout = NULL;

	if ( ! pFnAdminLogout )
		pFnAdminLogout = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AdminLogout" );

	AKFPlayerController_execAdminLogout_Parms AdminLogout_Parms;

	this->ProcessEvent ( pFnAdminLogout, &AdminLogout_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerAdminLogin
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::ServerAdminLogin ( )
{
	static UFunction* pFnServerAdminLogin = NULL;

	if ( ! pFnServerAdminLogin )
		pFnServerAdminLogin = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerAdminLogin" );

	AKFPlayerController_execServerAdminLogin_Parms ServerAdminLogin_Parms;

	this->ProcessEvent ( pFnServerAdminLogin, &ServerAdminLogin_Parms, NULL );
};

// Function KFGame.KFPlayerController.AdminLogin
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::AdminLogin ( )
{
	static UFunction* pFnAdminLogin = NULL;

	if ( ! pFnAdminLogin )
		pFnAdminLogin = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AdminLogin" );

	AKFPlayerController_execAdminLogin_Parms AdminLogin_Parms;

	this->ProcessEvent ( pFnAdminLogin, &AdminLogin_Parms, NULL );
};

// Function KFGame.KFPlayerController.AdminCmdOk
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AdminCmdOk ( )
{
	static UFunction* pFnAdminCmdOk = NULL;

	if ( ! pFnAdminCmdOk )
		pFnAdminCmdOk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AdminCmdOk" );

	AKFPlayerController_execAdminCmdOk_Parms AdminCmdOk_Parms;

	this->ProcessEvent ( pFnAdminCmdOk, &AdminCmdOk_Parms, NULL );
};

// Function KFGame.KFPlayerController.DoForceFeedbackForScreenShake
// [0x00080102] 
// Parameters infos:

void AKFPlayerController::DoForceFeedbackForScreenShake ( )
{
	static UFunction* pFnDoForceFeedbackForScreenShake = NULL;

	if ( ! pFnDoForceFeedbackForScreenShake )
		pFnDoForceFeedbackForScreenShake = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.DoForceFeedbackForScreenShake" );

	AKFPlayerController_execDoForceFeedbackForScreenShake_Parms DoForceFeedbackForScreenShake_Parms;

	this->ProcessEvent ( pFnDoForceFeedbackForScreenShake, &DoForceFeedbackForScreenShake_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientPlayCameraShake
// [0x01024142] 
// Parameters infos:

void AKFPlayerController::ClientPlayCameraShake ( )
{
	static UFunction* pFnClientPlayCameraShake = NULL;

	if ( ! pFnClientPlayCameraShake )
		pFnClientPlayCameraShake = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientPlayCameraShake" );

	AKFPlayerController_execClientPlayCameraShake_Parms ClientPlayCameraShake_Parms;

	this->ProcessEvent ( pFnClientPlayCameraShake, &ClientPlayCameraShake_Parms, NULL );
};

// Function KFGame.KFPlayerController.ResetCustomizationCamera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::ResetCustomizationCamera ( )
{
	static UFunction* pFnResetCustomizationCamera = NULL;

	if ( ! pFnResetCustomizationCamera )
		pFnResetCustomizationCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ResetCustomizationCamera" );

	AKFPlayerController_execResetCustomizationCamera_Parms ResetCustomizationCamera_Parms;

	this->ProcessEvent ( pFnResetCustomizationCamera, &ResetCustomizationCamera_Parms, NULL );
};

// Function KFGame.KFPlayerController.Camera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::Camera ( )
{
	static UFunction* pFnCamera = NULL;

	if ( ! pFnCamera )
		pFnCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.Camera" );

	AKFPlayerController_execCamera_Parms Camera_Parms;

	this->ProcessEvent ( pFnCamera, &Camera_Parms, NULL );
};

// Function KFGame.KFPlayerController.EnableReflections
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::EnableReflections ( )
{
	static UFunction* pFnEnableReflections = NULL;

	if ( ! pFnEnableReflections )
		pFnEnableReflections = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.EnableReflections" );

	AKFPlayerController_execEnableReflections_Parms EnableReflections_Parms;

	this->ProcessEvent ( pFnEnableReflections, &EnableReflections_Parms, NULL );
};

// Function KFGame.KFPlayerController.EnableIronSights
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::EnableIronSights ( )
{
	static UFunction* pFnEnableIronSights = NULL;

	if ( ! pFnEnableIronSights )
		pFnEnableIronSights = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.EnableIronSights" );

	AKFPlayerController_execEnableIronSights_Parms EnableIronSights_Parms;

	this->ProcessEvent ( pFnEnableIronSights, &EnableIronSights_Parms, NULL );
};

// Function KFGame.KFPlayerController.EnableBlur
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::EnableBlur ( )
{
	static UFunction* pFnEnableBlur = NULL;

	if ( ! pFnEnableBlur )
		pFnEnableBlur = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.EnableBlur" );

	AKFPlayerController_execEnableBlur_Parms EnableBlur_Parms;

	this->ProcessEvent ( pFnEnableBlur, &EnableBlur_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientCustomDepthOfField
// [0x01024142] 
// Parameters infos:

void AKFPlayerController::ClientCustomDepthOfField ( )
{
	static UFunction* pFnClientCustomDepthOfField = NULL;

	if ( ! pFnClientCustomDepthOfField )
		pFnClientCustomDepthOfField = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientCustomDepthOfField" );

	AKFPlayerController_execClientCustomDepthOfField_Parms ClientCustomDepthOfField_Parms;

	this->ProcessEvent ( pFnClientCustomDepthOfField, &ClientCustomDepthOfField_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientEnableDepthOfField
// [0x01024142] 
// Parameters infos:

void AKFPlayerController::ClientEnableDepthOfField ( )
{
	static UFunction* pFnClientEnableDepthOfField = NULL;

	if ( ! pFnClientEnableDepthOfField )
		pFnClientEnableDepthOfField = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientEnableDepthOfField" );

	AKFPlayerController_execClientEnableDepthOfField_Parms ClientEnableDepthOfField_Parms;

	this->ProcessEvent ( pFnClientEnableDepthOfField, &ClientEnableDepthOfField_Parms, NULL );
};

// Function KFGame.KFPlayerController.EnableDepthOfField
// [0x00024102] 
// Parameters infos:

void AKFPlayerController::EnableDepthOfField ( )
{
	static UFunction* pFnEnableDepthOfField = NULL;

	if ( ! pFnEnableDepthOfField )
		pFnEnableDepthOfField = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.EnableDepthOfField" );

	AKFPlayerController_execEnableDepthOfField_Parms EnableDepthOfField_Parms;

	this->ProcessEvent ( pFnEnableDepthOfField, &EnableDepthOfField_Parms, NULL );
};

// Function KFGame.KFPlayerController.ResetCameraMode
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventResetCameraMode ( )
{
	static UFunction* pFnResetCameraMode = NULL;

	if ( ! pFnResetCameraMode )
		pFnResetCameraMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ResetCameraMode" );

	AKFPlayerController_eventResetCameraMode_Parms ResetCameraMode_Parms;

	this->ProcessEvent ( pFnResetCameraMode, &ResetCameraMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetBossCamera
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::SetBossCamera ( )
{
	static UFunction* pFnSetBossCamera = NULL;

	if ( ! pFnSetBossCamera )
		pFnSetBossCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetBossCamera" );

	AKFPlayerController_execSetBossCamera_Parms SetBossCamera_Parms;

	this->ProcessEvent ( pFnSetBossCamera, &SetBossCamera_Parms, NULL );
};

// Function KFGame.KFPlayerController.ProcessViewRotation
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::ProcessViewRotation ( )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ProcessViewRotation" );

	AKFPlayerController_execProcessViewRotation_Parms ProcessViewRotation_Parms;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );
};

// Function KFGame.KFPlayerController.LandingShake
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::LandingShake ( )
{
	static UFunction* pFnLandingShake = NULL;

	if ( ! pFnLandingShake )
		pFnLandingShake = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.LandingShake" );

	AKFPlayerController_execLandingShake_Parms LandingShake_Parms;

	this->ProcessEvent ( pFnLandingShake, &LandingShake_Parms, NULL );
};

// Function KFGame.KFPlayerController.MoveToAdjustedFreeCamPosition
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::MoveToAdjustedFreeCamPosition ( )
{
	static UFunction* pFnMoveToAdjustedFreeCamPosition = NULL;

	if ( ! pFnMoveToAdjustedFreeCamPosition )
		pFnMoveToAdjustedFreeCamPosition = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MoveToAdjustedFreeCamPosition" );

	AKFPlayerController_execMoveToAdjustedFreeCamPosition_Parms MoveToAdjustedFreeCamPosition_Parms;

	this->ProcessEvent ( pFnMoveToAdjustedFreeCamPosition, &MoveToAdjustedFreeCamPosition_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetCameraMode
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SetCameraMode ( )
{
	static UFunction* pFnSetCameraMode = NULL;

	if ( ! pFnSetCameraMode )
		pFnSetCameraMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetCameraMode" );

	AKFPlayerController_execSetCameraMode_Parms SetCameraMode_Parms;

	this->ProcessEvent ( pFnSetCameraMode, &SetCameraMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetBoss
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetBoss ( )
{
	static UFunction* pFnGetBoss = NULL;

	if ( ! pFnGetBoss )
		pFnGetBoss = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetBoss" );

	AKFPlayerController_execGetBoss_Parms GetBoss_Parms;

	this->ProcessEvent ( pFnGetBoss, &GetBoss_Parms, NULL );
};

// Function KFGame.KFPlayerController.IsEmoteCameraMode
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::IsEmoteCameraMode ( )
{
	static UFunction* pFnIsEmoteCameraMode = NULL;

	if ( ! pFnIsEmoteCameraMode )
		pFnIsEmoteCameraMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsEmoteCameraMode" );

	AKFPlayerController_execIsEmoteCameraMode_Parms IsEmoteCameraMode_Parms;

	this->ProcessEvent ( pFnIsEmoteCameraMode, &IsEmoteCameraMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.IsBossCameraMode
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::IsBossCameraMode ( )
{
	static UFunction* pFnIsBossCameraMode = NULL;

	if ( ! pFnIsBossCameraMode )
		pFnIsBossCameraMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsBossCameraMode" );

	AKFPlayerController_execIsBossCameraMode_Parms IsBossCameraMode_Parms;

	this->ProcessEvent ( pFnIsBossCameraMode, &IsBossCameraMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientSetCameraMode
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientSetCameraMode ( )
{
	static UFunction* pFnClientSetCameraMode = NULL;

	if ( ! pFnClientSetCameraMode )
		pFnClientSetCameraMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetCameraMode" );

	AKFPlayerController_execClientSetCameraMode_Parms ClientSetCameraMode_Parms;

	this->ProcessEvent ( pFnClientSetCameraMode, &ClientSetCameraMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.FOV
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::FOV ( )
{
	static UFunction* pFnFOV = NULL;

	if ( ! pFnFOV )
		pFnFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.FOV" );

	AKFPlayerController_execFOV_Parms FOV_Parms;

	this->ProcessEvent ( pFnFOV, &FOV_Parms, NULL );
};

// Function KFGame.KFPlayerController.ResetFOV
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ResetFOV ( )
{
	static UFunction* pFnResetFOV = NULL;

	if ( ! pFnResetFOV )
		pFnResetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ResetFOV" );

	AKFPlayerController_execResetFOV_Parms ResetFOV_Parms;

	this->ProcessEvent ( pFnResetFOV, &ResetFOV_Parms, NULL );
};

// Function KFGame.KFPlayerController.FixFOV
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::FixFOV ( )
{
	static UFunction* pFnFixFOV = NULL;

	if ( ! pFnFixFOV )
		pFnFixFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.FixFOV" );

	AKFPlayerController_execFixFOV_Parms FixFOV_Parms;

	this->ProcessEvent ( pFnFixFOV, &FixFOV_Parms, NULL );
};

// Function KFGame.KFPlayerController.CalcFOVForAspectRatio
// [0x00422002] 
// Parameters infos:

void AKFPlayerController::CalcFOVForAspectRatio ( )
{
	static UFunction* pFnCalcFOVForAspectRatio = NULL;

	if ( ! pFnCalcFOVForAspectRatio )
		pFnCalcFOVForAspectRatio = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CalcFOVForAspectRatio" );

	AKFPlayerController_execCalcFOVForAspectRatio_Parms CalcFOVForAspectRatio_Parms;

	this->ProcessEvent ( pFnCalcFOVForAspectRatio, &CalcFOVForAspectRatio_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyResolutionChanged
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::NotifyResolutionChanged ( )
{
	static UFunction* pFnNotifyResolutionChanged = NULL;

	if ( ! pFnNotifyResolutionChanged )
		pFnNotifyResolutionChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyResolutionChanged" );

	AKFPlayerController_execNotifyResolutionChanged_Parms NotifyResolutionChanged_Parms;

	this->ProcessEvent ( pFnNotifyResolutionChanged, &NotifyResolutionChanged_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleTransitionFOV
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::HandleTransitionFOV ( )
{
	static UFunction* pFnHandleTransitionFOV = NULL;

	if ( ! pFnHandleTransitionFOV )
		pFnHandleTransitionFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleTransitionFOV" );

	AKFPlayerController_execHandleTransitionFOV_Parms HandleTransitionFOV_Parms;

	this->ProcessEvent ( pFnHandleTransitionFOV, &HandleTransitionFOV_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleTransitionFOVAspectAdjusted
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::HandleTransitionFOVAspectAdjusted ( )
{
	static UFunction* pFnHandleTransitionFOVAspectAdjusted = NULL;

	if ( ! pFnHandleTransitionFOVAspectAdjusted )
		pFnHandleTransitionFOVAspectAdjusted = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleTransitionFOVAspectAdjusted" );

	AKFPlayerController_execHandleTransitionFOVAspectAdjusted_Parms HandleTransitionFOVAspectAdjusted_Parms;

	this->ProcessEvent ( pFnHandleTransitionFOVAspectAdjusted, &HandleTransitionFOVAspectAdjusted_Parms, NULL );
};

// Function KFGame.KFPlayerController.ToggleScreenShotMode
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::ToggleScreenShotMode ( )
{
	static UFunction* pFnToggleScreenShotMode = NULL;

	if ( ! pFnToggleScreenShotMode )
		pFnToggleScreenShotMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ToggleScreenShotMode" );

	AKFPlayerController_execToggleScreenShotMode_Parms ToggleScreenShotMode_Parms;

	this->ProcessEvent ( pFnToggleScreenShotMode, &ToggleScreenShotMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.ShowTestDownloadNotification
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::ShowTestDownloadNotification ( )
{
	static UFunction* pFnShowTestDownloadNotification = NULL;

	if ( ! pFnShowTestDownloadNotification )
		pFnShowTestDownloadNotification = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ShowTestDownloadNotification" );

	AKFPlayerController_execShowTestDownloadNotification_Parms ShowTestDownloadNotification_Parms;

	this->ProcessEvent ( pFnShowTestDownloadNotification, &ShowTestDownloadNotification_Parms, NULL );
};

// Function KFGame.KFPlayerController.PrintOutPrestigeInfo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::PrintOutPrestigeInfo ( )
{
	static UFunction* pFnPrintOutPrestigeInfo = NULL;

	if ( ! pFnPrintOutPrestigeInfo )
		pFnPrintOutPrestigeInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PrintOutPrestigeInfo" );

	AKFPlayerController_execPrintOutPrestigeInfo_Parms PrintOutPrestigeInfo_Parms;

	this->ProcessEvent ( pFnPrintOutPrestigeInfo, &PrintOutPrestigeInfo_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateFullscreenBlur
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::UpdateFullscreenBlur ( )
{
	static UFunction* pFnUpdateFullscreenBlur = NULL;

	if ( ! pFnUpdateFullscreenBlur )
		pFnUpdateFullscreenBlur = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateFullscreenBlur" );

	AKFPlayerController_execUpdateFullscreenBlur_Parms UpdateFullscreenBlur_Parms;

	pFnUpdateFullscreenBlur->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateFullscreenBlur, &UpdateFullscreenBlur_Parms, NULL );

	pFnUpdateFullscreenBlur->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.UpdateDOFIronSightsLerpControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::UpdateDOFIronSightsLerpControl ( )
{
	static UFunction* pFnUpdateDOFIronSightsLerpControl = NULL;

	if ( ! pFnUpdateDOFIronSightsLerpControl )
		pFnUpdateDOFIronSightsLerpControl = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateDOFIronSightsLerpControl" );

	AKFPlayerController_execUpdateDOFIronSightsLerpControl_Parms UpdateDOFIronSightsLerpControl_Parms;

	pFnUpdateDOFIronSightsLerpControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDOFIronSightsLerpControl, &UpdateDOFIronSightsLerpControl_Parms, NULL );

	pFnUpdateDOFIronSightsLerpControl->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.UpdateDOFGamePlayLerpControl
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::UpdateDOFGamePlayLerpControl ( )
{
	static UFunction* pFnUpdateDOFGamePlayLerpControl = NULL;

	if ( ! pFnUpdateDOFGamePlayLerpControl )
		pFnUpdateDOFGamePlayLerpControl = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateDOFGamePlayLerpControl" );

	AKFPlayerController_execUpdateDOFGamePlayLerpControl_Parms UpdateDOFGamePlayLerpControl_Parms;

	pFnUpdateDOFGamePlayLerpControl->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDOFGamePlayLerpControl, &UpdateDOFGamePlayLerpControl_Parms, NULL );

	pFnUpdateDOFGamePlayLerpControl->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.UpdateDOF
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::UpdateDOF ( )
{
	static UFunction* pFnUpdateDOF = NULL;

	if ( ! pFnUpdateDOF )
		pFnUpdateDOF = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateDOF" );

	AKFPlayerController_execUpdateDOF_Parms UpdateDOF_Parms;

	pFnUpdateDOF->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateDOF, &UpdateDOF_Parms, NULL );

	pFnUpdateDOF->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.CameraAnimHasEnoughSpace
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::CameraAnimHasEnoughSpace ( )
{
	static UFunction* pFnCameraAnimHasEnoughSpace = NULL;

	if ( ! pFnCameraAnimHasEnoughSpace )
		pFnCameraAnimHasEnoughSpace = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CameraAnimHasEnoughSpace" );

	AKFPlayerController_execCameraAnimHasEnoughSpace_Parms CameraAnimHasEnoughSpace_Parms;

	pFnCameraAnimHasEnoughSpace->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCameraAnimHasEnoughSpace, &CameraAnimHasEnoughSpace_Parms, NULL );

	pFnCameraAnimHasEnoughSpace->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ChooseRandomCameraAnim
// [0x00424501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ChooseRandomCameraAnim ( )
{
	static UFunction* pFnChooseRandomCameraAnim = NULL;

	if ( ! pFnChooseRandomCameraAnim )
		pFnChooseRandomCameraAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ChooseRandomCameraAnim" );

	AKFPlayerController_execChooseRandomCameraAnim_Parms ChooseRandomCameraAnim_Parms;

	pFnChooseRandomCameraAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnChooseRandomCameraAnim, &ChooseRandomCameraAnim_Parms, NULL );

	pFnChooseRandomCameraAnim->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.SetViewTarget
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::SetViewTarget ( )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetViewTarget" );

	AKFPlayerController_execSetViewTarget_Parms SetViewTarget_Parms;

	pFnSetViewTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );

	pFnSetViewTarget->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.RecievedNewPerkClass
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::RecievedNewPerkClass ( )
{
	static UFunction* pFnRecievedNewPerkClass = NULL;

	if ( ! pFnRecievedNewPerkClass )
		pFnRecievedNewPerkClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.RecievedNewPerkClass" );

	AKFPlayerController_execRecievedNewPerkClass_Parms RecievedNewPerkClass_Parms;

	this->ProcessEvent ( pFnRecievedNewPerkClass, &RecievedNewPerkClass_Parms, NULL );
};

// Function KFGame.KFPlayerController.PlayRMEffect
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::PlayRMEffect ( )
{
	static UFunction* pFnPlayRMEffect = NULL;

	if ( ! pFnPlayRMEffect )
		pFnPlayRMEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PlayRMEffect" );

	AKFPlayerController_execPlayRMEffect_Parms PlayRMEffect_Parms;

	this->ProcessEvent ( pFnPlayRMEffect, &PlayRMEffect_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPerkIndexFromClass
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventGetPerkIndexFromClass ( )
{
	static UFunction* pFnGetPerkIndexFromClass = NULL;

	if ( ! pFnGetPerkIndexFromClass )
		pFnGetPerkIndexFromClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkIndexFromClass" );

	AKFPlayerController_eventGetPerkIndexFromClass_Parms GetPerkIndexFromClass_Parms;

	this->ProcessEvent ( pFnGetPerkIndexFromClass, &GetPerkIndexFromClass_Parms, NULL );
};

// Function KFGame.KFPlayerController.PostTierUnlock
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::PostTierUnlock ( )
{
	static UFunction* pFnPostTierUnlock = NULL;

	if ( ! pFnPostTierUnlock )
		pFnPostTierUnlock = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PostTierUnlock" );

	AKFPlayerController_execPostTierUnlock_Parms PostTierUnlock_Parms;

	this->ProcessEvent ( pFnPostTierUnlock, &PostTierUnlock_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyLevelUp
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::NotifyLevelUp ( )
{
	static UFunction* pFnNotifyLevelUp = NULL;

	if ( ! pFnNotifyLevelUp )
		pFnNotifyLevelUp = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyLevelUp" );

	AKFPlayerController_execNotifyLevelUp_Parms NotifyLevelUp_Parms;

	this->ProcessEvent ( pFnNotifyLevelUp, &NotifyLevelUp_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyXPGain
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::NotifyXPGain ( )
{
	static UFunction* pFnNotifyXPGain = NULL;

	if ( ! pFnNotifyXPGain )
		pFnNotifyXPGain = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyXPGain" );

	AKFPlayerController_execNotifyXPGain_Parms NotifyXPGain_Parms;

	this->ProcessEvent ( pFnNotifyXPGain, &NotifyXPGain_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyPerkUpdated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventNotifyPerkUpdated ( )
{
	static UFunction* pFnNotifyPerkUpdated = NULL;

	if ( ! pFnNotifyPerkUpdated )
		pFnNotifyPerkUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyPerkUpdated" );

	AKFPlayerController_eventNotifyPerkUpdated_Parms NotifyPerkUpdated_Parms;

	this->ProcessEvent ( pFnNotifyPerkUpdated, &NotifyPerkUpdated_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyPendingPerkChanges
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventNotifyPendingPerkChanges ( )
{
	static UFunction* pFnNotifyPendingPerkChanges = NULL;

	if ( ! pFnNotifyPendingPerkChanges )
		pFnNotifyPendingPerkChanges = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyPendingPerkChanges" );

	AKFPlayerController_eventNotifyPendingPerkChanges_Parms NotifyPendingPerkChanges_Parms;

	this->ProcessEvent ( pFnNotifyPendingPerkChanges, &NotifyPendingPerkChanges_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetHaveUpdatePerk
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventSetHaveUpdatePerk ( )
{
	static UFunction* pFnSetHaveUpdatePerk = NULL;

	if ( ! pFnSetHaveUpdatePerk )
		pFnSetHaveUpdatePerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetHaveUpdatePerk" );

	AKFPlayerController_eventSetHaveUpdatePerk_Parms SetHaveUpdatePerk_Parms;

	this->ProcessEvent ( pFnSetHaveUpdatePerk, &SetHaveUpdatePerk_Parms, NULL );
};

// Function KFGame.KFPlayerController.Timer_CheckForValidPerk
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::Timer_CheckForValidPerk ( )
{
	static UFunction* pFnTimer_CheckForValidPerk = NULL;

	if ( ! pFnTimer_CheckForValidPerk )
		pFnTimer_CheckForValidPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.Timer_CheckForValidPerk" );

	AKFPlayerController_execTimer_CheckForValidPerk_Parms Timer_CheckForValidPerk_Parms;

	this->ProcessEvent ( pFnTimer_CheckForValidPerk, &Timer_CheckForValidPerk_Parms, NULL );
};

// Function KFGame.KFPlayerController.WaitForPerkAndRespawn
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::WaitForPerkAndRespawn ( )
{
	static UFunction* pFnWaitForPerkAndRespawn = NULL;

	if ( ! pFnWaitForPerkAndRespawn )
		pFnWaitForPerkAndRespawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.WaitForPerkAndRespawn" );

	AKFPlayerController_execWaitForPerkAndRespawn_Parms WaitForPerkAndRespawn_Parms;

	this->ProcessEvent ( pFnWaitForPerkAndRespawn, &WaitForPerkAndRespawn_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdatePerkLevelMenu
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventUpdatePerkLevelMenu ( )
{
	static UFunction* pFnUpdatePerkLevelMenu = NULL;

	if ( ! pFnUpdatePerkLevelMenu )
		pFnUpdatePerkLevelMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdatePerkLevelMenu" );

	AKFPlayerController_eventUpdatePerkLevelMenu_Parms UpdatePerkLevelMenu_Parms;

	this->ProcessEvent ( pFnUpdatePerkLevelMenu, &UpdatePerkLevelMenu_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerCallOutPawnCloaking
// [0x00220042] 
// Parameters infos:

void AKFPlayerController::ServerCallOutPawnCloaking ( )
{
	static UFunction* pFnServerCallOutPawnCloaking = NULL;

	if ( ! pFnServerCallOutPawnCloaking )
		pFnServerCallOutPawnCloaking = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerCallOutPawnCloaking" );

	AKFPlayerController_execServerCallOutPawnCloaking_Parms ServerCallOutPawnCloaking_Parms;

	this->ProcessEvent ( pFnServerCallOutPawnCloaking, &ServerCallOutPawnCloaking_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPerkName
// [0x00022002] 
// Parameters infos:

void AKFPlayerController::GetPerkName ( )
{
	static UFunction* pFnGetPerkName = NULL;

	if ( ! pFnGetPerkName )
		pFnGetPerkName = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkName" );

	AKFPlayerController_execGetPerkName_Parms GetPerkName_Parms;

	this->ProcessEvent ( pFnGetPerkName, &GetPerkName_Parms, NULL );
};

// Function KFGame.KFPlayerController.ApplyPendingPerks
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ApplyPendingPerks ( )
{
	static UFunction* pFnApplyPendingPerks = NULL;

	if ( ! pFnApplyPendingPerks )
		pFnApplyPendingPerks = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ApplyPendingPerks" );

	AKFPlayerController_execApplyPendingPerks_Parms ApplyPendingPerks_Parms;

	pFnApplyPendingPerks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyPendingPerks, &ApplyPendingPerks_Parms, NULL );

	pFnApplyPendingPerks->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.WasPerkUpdatedThisRound
// [0x00020C01] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventWasPerkUpdatedThisRound ( )
{
	static UFunction* pFnWasPerkUpdatedThisRound = NULL;

	if ( ! pFnWasPerkUpdatedThisRound )
		pFnWasPerkUpdatedThisRound = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.WasPerkUpdatedThisRound" );

	AKFPlayerController_eventWasPerkUpdatedThisRound_Parms WasPerkUpdatedThisRound_Parms;

	pFnWasPerkUpdatedThisRound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnWasPerkUpdatedThisRound, &WasPerkUpdatedThisRound_Parms, NULL );

	pFnWasPerkUpdatedThisRound->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.CanUpdatePerkInfo
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::CanUpdatePerkInfo ( )
{
	static UFunction* pFnCanUpdatePerkInfo = NULL;

	if ( ! pFnCanUpdatePerkInfo )
		pFnCanUpdatePerkInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CanUpdatePerkInfo" );

	AKFPlayerController_execCanUpdatePerkInfo_Parms CanUpdatePerkInfo_Parms;

	pFnCanUpdatePerkInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCanUpdatePerkInfo, &CanUpdatePerkInfo_Parms, NULL );

	pFnCanUpdatePerkInfo->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ServerSelectPerk
// [0x00284CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventServerSelectPerk ( )
{
	static UFunction* pFnServerSelectPerk = NULL;

	if ( ! pFnServerSelectPerk )
		pFnServerSelectPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSelectPerk" );

	AKFPlayerController_eventServerSelectPerk_Parms ServerSelectPerk_Parms;

	pFnServerSelectPerk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSelectPerk, &ServerSelectPerk_Parms, NULL );

	pFnServerSelectPerk->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ServerSetSavedPerkIndex
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventServerSetSavedPerkIndex ( )
{
	static UFunction* pFnServerSetSavedPerkIndex = NULL;

	if ( ! pFnServerSetSavedPerkIndex )
		pFnServerSetSavedPerkIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSetSavedPerkIndex" );

	AKFPlayerController_eventServerSetSavedPerkIndex_Parms ServerSetSavedPerkIndex_Parms;

	pFnServerSetSavedPerkIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetSavedPerkIndex, &ServerSetSavedPerkIndex_Parms, NULL );

	pFnServerSetSavedPerkIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ServerSetPendingPerkUpdate
// [0x00244CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventServerSetPendingPerkUpdate ( )
{
	static UFunction* pFnServerSetPendingPerkUpdate = NULL;

	if ( ! pFnServerSetPendingPerkUpdate )
		pFnServerSetPendingPerkUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSetPendingPerkUpdate" );

	AKFPlayerController_eventServerSetPendingPerkUpdate_Parms ServerSetPendingPerkUpdate_Parms;

	pFnServerSetPendingPerkUpdate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetPendingPerkUpdate, &ServerSetPendingPerkUpdate_Parms, NULL );

	pFnServerSetPendingPerkUpdate->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.RequestPerkChange
// [0x00020C01] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventRequestPerkChange ( )
{
	static UFunction* pFnRequestPerkChange = NULL;

	if ( ! pFnRequestPerkChange )
		pFnRequestPerkChange = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.RequestPerkChange" );

	AKFPlayerController_eventRequestPerkChange_Parms RequestPerkChange_Parms;

	pFnRequestPerkChange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRequestPerkChange, &RequestPerkChange_Parms, NULL );

	pFnRequestPerkChange->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetPerkPrestigeNextXPMultiplier
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetPerkPrestigeNextXPMultiplier ( )
{
	static UFunction* pFnGetPerkPrestigeNextXPMultiplier = NULL;

	if ( ! pFnGetPerkPrestigeNextXPMultiplier )
		pFnGetPerkPrestigeNextXPMultiplier = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkPrestigeNextXPMultiplier" );

	AKFPlayerController_execGetPerkPrestigeNextXPMultiplier_Parms GetPerkPrestigeNextXPMultiplier_Parms;

	pFnGetPerkPrestigeNextXPMultiplier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerkPrestigeNextXPMultiplier, &GetPerkPrestigeNextXPMultiplier_Parms, NULL );

	pFnGetPerkPrestigeNextXPMultiplier->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetPerkPrestigeXPMultiplier
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetPerkPrestigeXPMultiplier ( )
{
	static UFunction* pFnGetPerkPrestigeXPMultiplier = NULL;

	if ( ! pFnGetPerkPrestigeXPMultiplier )
		pFnGetPerkPrestigeXPMultiplier = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerkPrestigeXPMultiplier" );

	AKFPlayerController_execGetPerkPrestigeXPMultiplier_Parms GetPerkPrestigeXPMultiplier_Parms;

	pFnGetPerkPrestigeXPMultiplier->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerkPrestigeXPMultiplier, &GetPerkPrestigeXPMultiplier_Parms, NULL );

	pFnGetPerkPrestigeXPMultiplier->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ClientSetPrestigeLevelCheat
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventClientSetPrestigeLevelCheat ( )
{
	static UFunction* pFnClientSetPrestigeLevelCheat = NULL;

	if ( ! pFnClientSetPrestigeLevelCheat )
		pFnClientSetPrestigeLevelCheat = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetPrestigeLevelCheat" );

	AKFPlayerController_eventClientSetPrestigeLevelCheat_Parms ClientSetPrestigeLevelCheat_Parms;

	pFnClientSetPrestigeLevelCheat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientSetPrestigeLevelCheat, &ClientSetPrestigeLevelCheat_Parms, NULL );

	pFnClientSetPrestigeLevelCheat->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.SetActivePerkPrestigeLevel
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::SetActivePerkPrestigeLevel ( )
{
	static UFunction* pFnSetActivePerkPrestigeLevel = NULL;

	if ( ! pFnSetActivePerkPrestigeLevel )
		pFnSetActivePerkPrestigeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetActivePerkPrestigeLevel" );

	AKFPlayerController_execSetActivePerkPrestigeLevel_Parms SetActivePerkPrestigeLevel_Parms;

	pFnSetActivePerkPrestigeLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActivePerkPrestigeLevel, &SetActivePerkPrestigeLevel_Parms, NULL );

	pFnSetActivePerkPrestigeLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ServerSetPrestigeLevel
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventServerSetPrestigeLevel ( )
{
	static UFunction* pFnServerSetPrestigeLevel = NULL;

	if ( ! pFnServerSetPrestigeLevel )
		pFnServerSetPrestigeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSetPrestigeLevel" );

	AKFPlayerController_eventServerSetPrestigeLevel_Parms ServerSetPrestigeLevel_Parms;

	pFnServerSetPrestigeLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetPrestigeLevel, &ServerSetPrestigeLevel_Parms, NULL );

	pFnServerSetPrestigeLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ClientSetLevelCheat
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventClientSetLevelCheat ( )
{
	static UFunction* pFnClientSetLevelCheat = NULL;

	if ( ! pFnClientSetLevelCheat )
		pFnClientSetLevelCheat = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetLevelCheat" );

	AKFPlayerController_eventClientSetLevelCheat_Parms ClientSetLevelCheat_Parms;

	pFnClientSetLevelCheat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientSetLevelCheat, &ClientSetLevelCheat_Parms, NULL );

	pFnClientSetLevelCheat->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ServerSetLevel
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventServerSetLevel ( )
{
	static UFunction* pFnServerSetLevel = NULL;

	if ( ! pFnServerSetLevel )
		pFnServerSetLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerSetLevel" );

	AKFPlayerController_eventServerSetLevel_Parms ServerSetLevel_Parms;

	pFnServerSetLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetLevel, &ServerSetLevel_Parms, NULL );

	pFnServerSetLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.SetActivePerkLevel
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::SetActivePerkLevel ( )
{
	static UFunction* pFnSetActivePerkLevel = NULL;

	if ( ! pFnSetActivePerkLevel )
		pFnSetActivePerkLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetActivePerkLevel" );

	AKFPlayerController_execSetActivePerkLevel_Parms SetActivePerkLevel_Parms;

	pFnSetActivePerkLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetActivePerkLevel, &SetActivePerkLevel_Parms, NULL );

	pFnSetActivePerkLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetLevel
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetLevel ( )
{
	static UFunction* pFnGetLevel = NULL;

	if ( ! pFnGetLevel )
		pFnGetLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetLevel" );

	AKFPlayerController_execGetLevel_Parms GetLevel_Parms;

	pFnGetLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetLevel, &GetLevel_Parms, NULL );

	pFnGetLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ReadStatsTimeout
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ReadStatsTimeout ( )
{
	static UFunction* pFnReadStatsTimeout = NULL;

	if ( ! pFnReadStatsTimeout )
		pFnReadStatsTimeout = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ReadStatsTimeout" );

	AKFPlayerController_execReadStatsTimeout_Parms ReadStatsTimeout_Parms;

	pFnReadStatsTimeout->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReadStatsTimeout, &ReadStatsTimeout_Parms, NULL );

	pFnReadStatsTimeout->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.LoadAllPerkLevels
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::LoadAllPerkLevels ( )
{
	static UFunction* pFnLoadAllPerkLevels = NULL;

	if ( ! pFnLoadAllPerkLevels )
		pFnLoadAllPerkLevels = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.LoadAllPerkLevels" );

	AKFPlayerController_execLoadAllPerkLevels_Parms LoadAllPerkLevels_Parms;

	pFnLoadAllPerkLevels->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadAllPerkLevels, &LoadAllPerkLevels_Parms, NULL );

	pFnLoadAllPerkLevels->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ResetPerkStatsLoaded
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ResetPerkStatsLoaded ( )
{
	static UFunction* pFnResetPerkStatsLoaded = NULL;

	if ( ! pFnResetPerkStatsLoaded )
		pFnResetPerkStatsLoaded = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ResetPerkStatsLoaded" );

	AKFPlayerController_execResetPerkStatsLoaded_Parms ResetPerkStatsLoaded_Parms;

	pFnResetPerkStatsLoaded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetPerkStatsLoaded, &ResetPerkStatsLoaded_Parms, NULL );

	pFnResetPerkStatsLoaded->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ClientInitializePerks
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ClientInitializePerks ( )
{
	static UFunction* pFnClientInitializePerks = NULL;

	if ( ! pFnClientInitializePerks )
		pFnClientInitializePerks = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientInitializePerks" );

	AKFPlayerController_execClientInitializePerks_Parms ClientInitializePerks_Parms;

	pFnClientInitializePerks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClientInitializePerks, &ClientInitializePerks_Parms, NULL );

	pFnClientInitializePerks->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.IsForceFeedbackAllowed
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::IsForceFeedbackAllowed ( )
{
	static UFunction* pFnIsForceFeedbackAllowed = NULL;

	if ( ! pFnIsForceFeedbackAllowed )
		pFnIsForceFeedbackAllowed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsForceFeedbackAllowed" );

	AKFPlayerController_execIsForceFeedbackAllowed_Parms IsForceFeedbackAllowed_Parms;

	this->ProcessEvent ( pFnIsForceFeedbackAllowed, &IsForceFeedbackAllowed_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientSetIgnoreButtons
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientSetIgnoreButtons ( )
{
	static UFunction* pFnClientSetIgnoreButtons = NULL;

	if ( ! pFnClientSetIgnoreButtons )
		pFnClientSetIgnoreButtons = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetIgnoreButtons" );

	AKFPlayerController_execClientSetIgnoreButtons_Parms ClientSetIgnoreButtons_Parms;

	this->ProcessEvent ( pFnClientSetIgnoreButtons, &ClientSetIgnoreButtons_Parms, NULL );
};

// Function KFGame.KFPlayerController.SetCinematicMode
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SetCinematicMode ( )
{
	static UFunction* pFnSetCinematicMode = NULL;

	if ( ! pFnSetCinematicMode )
		pFnSetCinematicMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetCinematicMode" );

	AKFPlayerController_execSetCinematicMode_Parms SetCinematicMode_Parms;

	this->ProcessEvent ( pFnSetCinematicMode, &SetCinematicMode_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerNotifyRegisteredAsLocalTalker
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::ServerNotifyRegisteredAsLocalTalker ( )
{
	static UFunction* pFnServerNotifyRegisteredAsLocalTalker = NULL;

	if ( ! pFnServerNotifyRegisteredAsLocalTalker )
		pFnServerNotifyRegisteredAsLocalTalker = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerNotifyRegisteredAsLocalTalker" );

	AKFPlayerController_execServerNotifyRegisteredAsLocalTalker_Parms ServerNotifyRegisteredAsLocalTalker_Parms;

	this->ProcessEvent ( pFnServerNotifyRegisteredAsLocalTalker, &ServerNotifyRegisteredAsLocalTalker_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientStopNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientStopNetworkedVoice ( )
{
	static UFunction* pFnClientStopNetworkedVoice = NULL;

	if ( ! pFnClientStopNetworkedVoice )
		pFnClientStopNetworkedVoice = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientStopNetworkedVoice" );

	AKFPlayerController_execClientStopNetworkedVoice_Parms ClientStopNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStopNetworkedVoice, &ClientStopNetworkedVoice_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientStartNetworkedVoice
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientStartNetworkedVoice ( )
{
	static UFunction* pFnClientStartNetworkedVoice = NULL;

	if ( ! pFnClientStartNetworkedVoice )
		pFnClientStartNetworkedVoice = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientStartNetworkedVoice" );

	AKFPlayerController_execClientStartNetworkedVoice_Parms ClientStartNetworkedVoice_Parms;

	this->ProcessEvent ( pFnClientStartNetworkedVoice, &ClientStartNetworkedVoice_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnPlayerTalking
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnPlayerTalking ( )
{
	static UFunction* pFnOnPlayerTalking = NULL;

	if ( ! pFnOnPlayerTalking )
		pFnOnPlayerTalking = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnPlayerTalking" );

	AKFPlayerController_execOnPlayerTalking_Parms OnPlayerTalking_Parms;

	this->ProcessEvent ( pFnOnPlayerTalking, &OnPlayerTalking_Parms, NULL );
};

// Function KFGame.KFPlayerController.RegisterTalkerDelegate
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::RegisterTalkerDelegate ( )
{
	static UFunction* pFnRegisterTalkerDelegate = NULL;

	if ( ! pFnRegisterTalkerDelegate )
		pFnRegisterTalkerDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.RegisterTalkerDelegate" );

	AKFPlayerController_execRegisterTalkerDelegate_Parms RegisterTalkerDelegate_Parms;

	this->ProcessEvent ( pFnRegisterTalkerDelegate, &RegisterTalkerDelegate_Parms, NULL );
};

// Function KFGame.KFPlayerController.AddHeadHit
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddHeadHit ( )
{
	static UFunction* pFnAddHeadHit = NULL;

	if ( ! pFnAddHeadHit )
		pFnAddHeadHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddHeadHit" );

	AKFPlayerController_execAddHeadHit_Parms AddHeadHit_Parms;

	this->ProcessEvent ( pFnAddHeadHit, &AddHeadHit_Parms, NULL );
};

// Function KFGame.KFPlayerController.AddShotsHit
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddShotsHit ( )
{
	static UFunction* pFnAddShotsHit = NULL;

	if ( ! pFnAddShotsHit )
		pFnAddShotsHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddShotsHit" );

	AKFPlayerController_execAddShotsHit_Parms AddShotsHit_Parms;

	this->ProcessEvent ( pFnAddShotsHit, &AddShotsHit_Parms, NULL );
};

// Function KFGame.KFPlayerController.AddShotsFired
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::AddShotsFired ( )
{
	static UFunction* pFnAddShotsFired = NULL;

	if ( ! pFnAddShotsFired )
		pFnAddShotsFired = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddShotsFired" );

	AKFPlayerController_execAddShotsFired_Parms AddShotsFired_Parms;

	this->ProcessEvent ( pFnAddShotsFired, &AddShotsFired_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckHasViewedDoshVault
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CheckHasViewedDoshVault ( )
{
	static UFunction* pFnCheckHasViewedDoshVault = NULL;

	if ( ! pFnCheckHasViewedDoshVault )
		pFnCheckHasViewedDoshVault = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckHasViewedDoshVault" );

	AKFPlayerController_execCheckHasViewedDoshVault_Parms CheckHasViewedDoshVault_Parms;

	this->ProcessEvent ( pFnCheckHasViewedDoshVault, &CheckHasViewedDoshVault_Parms, NULL );
};

// Function KFGame.KFPlayerController.VerifyDoshVaultCrates
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::VerifyDoshVaultCrates ( )
{
	static UFunction* pFnVerifyDoshVaultCrates = NULL;

	if ( ! pFnVerifyDoshVaultCrates )
		pFnVerifyDoshVaultCrates = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.VerifyDoshVaultCrates" );

	AKFPlayerController_execVerifyDoshVaultCrates_Parms VerifyDoshVaultCrates_Parms;

	this->ProcessEvent ( pFnVerifyDoshVaultCrates, &VerifyDoshVaultCrates_Parms, NULL );
};

// Function KFGame.KFPlayerController.MarkDoshVaultSeen
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::MarkDoshVaultSeen ( )
{
	static UFunction* pFnMarkDoshVaultSeen = NULL;

	if ( ! pFnMarkDoshVaultSeen )
		pFnMarkDoshVaultSeen = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.MarkDoshVaultSeen" );

	AKFPlayerController_execMarkDoshVaultSeen_Parms MarkDoshVaultSeen_Parms;

	this->ProcessEvent ( pFnMarkDoshVaultSeen, &MarkDoshVaultSeen_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckUnlockDoshVaultReward
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CheckUnlockDoshVaultReward ( )
{
	static UFunction* pFnCheckUnlockDoshVaultReward = NULL;

	if ( ! pFnCheckUnlockDoshVaultReward )
		pFnCheckUnlockDoshVaultReward = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckUnlockDoshVaultReward" );

	AKFPlayerController_execCheckUnlockDoshVaultReward_Parms CheckUnlockDoshVaultReward_Parms;

	this->ProcessEvent ( pFnCheckUnlockDoshVaultReward, &CheckUnlockDoshVaultReward_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetUnseenDoshCount
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetUnseenDoshCount ( )
{
	static UFunction* pFnGetUnseenDoshCount = NULL;

	if ( ! pFnGetUnseenDoshCount )
		pFnGetUnseenDoshCount = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetUnseenDoshCount" );

	AKFPlayerController_execGetUnseenDoshCount_Parms GetUnseenDoshCount_Parms;

	this->ProcessEvent ( pFnGetUnseenDoshCount, &GetUnseenDoshCount_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetLastSeenDoshCount
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetLastSeenDoshCount ( )
{
	static UFunction* pFnGetLastSeenDoshCount = NULL;

	if ( ! pFnGetLastSeenDoshCount )
		pFnGetLastSeenDoshCount = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetLastSeenDoshCount" );

	AKFPlayerController_execGetLastSeenDoshCount_Parms GetLastSeenDoshCount_Parms;

	this->ProcessEvent ( pFnGetLastSeenDoshCount, &GetLastSeenDoshCount_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetTotalDoshCount
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetTotalDoshCount ( )
{
	static UFunction* pFnGetTotalDoshCount = NULL;

	if ( ! pFnGetTotalDoshCount )
		pFnGetTotalDoshCount = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetTotalDoshCount" );

	AKFPlayerController_execGetTotalDoshCount_Parms GetTotalDoshCount_Parms;

	this->ProcessEvent ( pFnGetTotalDoshCount, &GetTotalDoshCount_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetDoshVaultTierValue
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetDoshVaultTierValue ( )
{
	static UFunction* pFnGetDoshVaultTierValue = NULL;

	if ( ! pFnGetDoshVaultTierValue )
		pFnGetDoshVaultTierValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetDoshVaultTierValue" );

	AKFPlayerController_execGetDoshVaultTierValue_Parms GetDoshVaultTierValue_Parms;

	this->ProcessEvent ( pFnGetDoshVaultTierValue, &GetDoshVaultTierValue_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetPreStigeValueDoshRewardValue
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetPreStigeValueDoshRewardValue ( )
{
	static UFunction* pFnGetPreStigeValueDoshRewardValue = NULL;

	if ( ! pFnGetPreStigeValueDoshRewardValue )
		pFnGetPreStigeValueDoshRewardValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPreStigeValueDoshRewardValue" );

	AKFPlayerController_execGetPreStigeValueDoshRewardValue_Parms GetPreStigeValueDoshRewardValue_Parms;

	this->ProcessEvent ( pFnGetPreStigeValueDoshRewardValue, &GetPreStigeValueDoshRewardValue_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyPlayTogetherFailed
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::NotifyPlayTogetherFailed ( )
{
	static UFunction* pFnNotifyPlayTogetherFailed = NULL;

	if ( ! pFnNotifyPlayTogetherFailed )
		pFnNotifyPlayTogetherFailed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyPlayTogetherFailed" );

	AKFPlayerController_execNotifyPlayTogetherFailed_Parms NotifyPlayTogetherFailed_Parms;

	this->ProcessEvent ( pFnNotifyPlayTogetherFailed, &NotifyPlayTogetherFailed_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnCreateGameSessionForPlayTogetherComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnCreateGameSessionForPlayTogetherComplete ( )
{
	static UFunction* pFnOnCreateGameSessionForPlayTogetherComplete = NULL;

	if ( ! pFnOnCreateGameSessionForPlayTogetherComplete )
		pFnOnCreateGameSessionForPlayTogetherComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnCreateGameSessionForPlayTogetherComplete" );

	AKFPlayerController_execOnCreateGameSessionForPlayTogetherComplete_Parms OnCreateGameSessionForPlayTogetherComplete_Parms;

	this->ProcessEvent ( pFnOnCreateGameSessionForPlayTogetherComplete, &OnCreateGameSessionForPlayTogetherComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.TryMainMenuPlayTogether
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::TryMainMenuPlayTogether ( )
{
	static UFunction* pFnTryMainMenuPlayTogether = NULL;

	if ( ! pFnTryMainMenuPlayTogether )
		pFnTryMainMenuPlayTogether = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TryMainMenuPlayTogether" );

	AKFPlayerController_execTryMainMenuPlayTogether_Parms TryMainMenuPlayTogether_Parms;

	this->ProcessEvent ( pFnTryMainMenuPlayTogether, &TryMainMenuPlayTogether_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnGameDestroyedForPlayTogetherComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnGameDestroyedForPlayTogetherComplete ( )
{
	static UFunction* pFnOnGameDestroyedForPlayTogetherComplete = NULL;

	if ( ! pFnOnGameDestroyedForPlayTogetherComplete )
		pFnOnGameDestroyedForPlayTogetherComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnGameDestroyedForPlayTogetherComplete" );

	AKFPlayerController_execOnGameDestroyedForPlayTogetherComplete_Parms OnGameDestroyedForPlayTogetherComplete_Parms;

	this->ProcessEvent ( pFnOnGameDestroyedForPlayTogetherComplete, &OnGameDestroyedForPlayTogetherComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnLoginForPlayTogetherComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnLoginForPlayTogetherComplete ( )
{
	static UFunction* pFnOnLoginForPlayTogetherComplete = NULL;

	if ( ! pFnOnLoginForPlayTogetherComplete )
		pFnOnLoginForPlayTogetherComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnLoginForPlayTogetherComplete" );

	AKFPlayerController_execOnLoginForPlayTogetherComplete_Parms OnLoginForPlayTogetherComplete_Parms;

	this->ProcessEvent ( pFnOnLoginForPlayTogetherComplete, &OnLoginForPlayTogetherComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.TryAutoLoginForPlayTogether
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::TryAutoLoginForPlayTogether ( )
{
	static UFunction* pFnTryAutoLoginForPlayTogether = NULL;

	if ( ! pFnTryAutoLoginForPlayTogether )
		pFnTryAutoLoginForPlayTogether = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TryAutoLoginForPlayTogether" );

	AKFPlayerController_execTryAutoLoginForPlayTogether_Parms TryAutoLoginForPlayTogether_Parms;

	this->ProcessEvent ( pFnTryAutoLoginForPlayTogether, &TryAutoLoginForPlayTogether_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnPlayTogetherStarted
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnPlayTogetherStarted ( )
{
	static UFunction* pFnOnPlayTogetherStarted = NULL;

	if ( ! pFnOnPlayTogetherStarted )
		pFnOnPlayTogetherStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnPlayTogetherStarted" );

	AKFPlayerController_execOnPlayTogetherStarted_Parms OnPlayTogetherStarted_Parms;

	this->ProcessEvent ( pFnOnPlayTogetherStarted, &OnPlayTogetherStarted_Parms, NULL );
};

// Function KFGame.KFPlayerController.NotifyInviteFailed
// [0x00024002] 
// Parameters infos:

void AKFPlayerController::NotifyInviteFailed ( )
{
	static UFunction* pFnNotifyInviteFailed = NULL;

	if ( ! pFnNotifyInviteFailed )
		pFnNotifyInviteFailed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.NotifyInviteFailed" );

	AKFPlayerController_execNotifyInviteFailed_Parms NotifyInviteFailed_Parms;

	this->ProcessEvent ( pFnNotifyInviteFailed, &NotifyInviteFailed_Parms, NULL );
};

// Function KFGame.KFPlayerController.JoinPlayfabServer
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::JoinPlayfabServer ( )
{
	static UFunction* pFnJoinPlayfabServer = NULL;

	if ( ! pFnJoinPlayfabServer )
		pFnJoinPlayfabServer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.JoinPlayfabServer" );

	AKFPlayerController_execJoinPlayfabServer_Parms JoinPlayfabServer_Parms;

	this->ProcessEvent ( pFnJoinPlayfabServer, &JoinPlayfabServer_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnSessionJoinComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnSessionJoinComplete ( )
{
	static UFunction* pFnOnSessionJoinComplete = NULL;

	if ( ! pFnOnSessionJoinComplete )
		pFnOnSessionJoinComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnSessionJoinComplete" );

	AKFPlayerController_execOnSessionJoinComplete_Parms OnSessionJoinComplete_Parms;

	this->ProcessEvent ( pFnOnSessionJoinComplete, &OnSessionJoinComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnGameDestroyedForInviteComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnGameDestroyedForInviteComplete ( )
{
	static UFunction* pFnOnGameDestroyedForInviteComplete = NULL;

	if ( ! pFnOnGameDestroyedForInviteComplete )
		pFnOnGameDestroyedForInviteComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnGameDestroyedForInviteComplete" );

	AKFPlayerController_execOnGameDestroyedForInviteComplete_Parms OnGameDestroyedForInviteComplete_Parms;

	this->ProcessEvent ( pFnOnGameDestroyedForInviteComplete, &OnGameDestroyedForInviteComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnLoginForGameInviteComplete
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::OnLoginForGameInviteComplete ( )
{
	static UFunction* pFnOnLoginForGameInviteComplete = NULL;

	if ( ! pFnOnLoginForGameInviteComplete )
		pFnOnLoginForGameInviteComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnLoginForGameInviteComplete" );

	AKFPlayerController_execOnLoginForGameInviteComplete_Parms OnLoginForGameInviteComplete_Parms;

	this->ProcessEvent ( pFnOnLoginForGameInviteComplete, &OnLoginForGameInviteComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.TryAutoLoginForInvite
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::TryAutoLoginForInvite ( )
{
	static UFunction* pFnTryAutoLoginForInvite = NULL;

	if ( ! pFnTryAutoLoginForInvite )
		pFnTryAutoLoginForInvite = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TryAutoLoginForInvite" );

	AKFPlayerController_execTryAutoLoginForInvite_Parms TryAutoLoginForInvite_Parms;

	this->ProcessEvent ( pFnTryAutoLoginForInvite, &TryAutoLoginForInvite_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnGameInviteAccepted
// [0x00420002] 
// Parameters infos:

void AKFPlayerController::OnGameInviteAccepted ( )
{
	static UFunction* pFnOnGameInviteAccepted = NULL;

	if ( ! pFnOnGameInviteAccepted )
		pFnOnGameInviteAccepted = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnGameInviteAccepted" );

	AKFPlayerController_execOnGameInviteAccepted_Parms OnGameInviteAccepted_Parms;

	this->ProcessEvent ( pFnOnGameInviteAccepted, &OnGameInviteAccepted_Parms, NULL );
};

// Function KFGame.KFPlayerController.PreClientTravel
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventPreClientTravel ( )
{
	static UFunction* pFnPreClientTravel = NULL;

	if ( ! pFnPreClientTravel )
		pFnPreClientTravel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PreClientTravel" );

	AKFPlayerController_eventPreClientTravel_Parms PreClientTravel_Parms;

	this->ProcessEvent ( pFnPreClientTravel, &PreClientTravel_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnJoinGameSessionComplete
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::OnJoinGameSessionComplete ( )
{
	static UFunction* pFnOnJoinGameSessionComplete = NULL;

	if ( ! pFnOnJoinGameSessionComplete )
		pFnOnJoinGameSessionComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnJoinGameSessionComplete" );

	AKFPlayerController_execOnJoinGameSessionComplete_Parms OnJoinGameSessionComplete_Parms;

	this->ProcessEvent ( pFnOnJoinGameSessionComplete, &OnJoinGameSessionComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.JoinGameSessionNow
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::JoinGameSessionNow ( )
{
	static UFunction* pFnJoinGameSessionNow = NULL;

	if ( ! pFnJoinGameSessionNow )
		pFnJoinGameSessionNow = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.JoinGameSessionNow" );

	AKFPlayerController_execJoinGameSessionNow_Parms JoinGameSessionNow_Parms;

	this->ProcessEvent ( pFnJoinGameSessionNow, &JoinGameSessionNow_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnOldSessionDestroyedForNewGameSessionJoin
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::OnOldSessionDestroyedForNewGameSessionJoin ( )
{
	static UFunction* pFnOnOldSessionDestroyedForNewGameSessionJoin = NULL;

	if ( ! pFnOnOldSessionDestroyedForNewGameSessionJoin )
		pFnOnOldSessionDestroyedForNewGameSessionJoin = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnOldSessionDestroyedForNewGameSessionJoin" );

	AKFPlayerController_execOnOldSessionDestroyedForNewGameSessionJoin_Parms OnOldSessionDestroyedForNewGameSessionJoin_Parms;

	this->ProcessEvent ( pFnOnOldSessionDestroyedForNewGameSessionJoin, &OnOldSessionDestroyedForNewGameSessionJoin_Parms, NULL );
};

// Function KFGame.KFPlayerController.TryJoinGameSession
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::TryJoinGameSession ( )
{
	static UFunction* pFnTryJoinGameSession = NULL;

	if ( ! pFnTryJoinGameSession )
		pFnTryJoinGameSession = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TryJoinGameSession" );

	AKFPlayerController_execTryJoinGameSession_Parms TryJoinGameSession_Parms;

	this->ProcessEvent ( pFnTryJoinGameSession, &TryJoinGameSession_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerGameSessionFailed
// [0x00A200C2] 
// Parameters infos:

void AKFPlayerController::ServerGameSessionFailed ( )
{
	static UFunction* pFnServerGameSessionFailed = NULL;

	if ( ! pFnServerGameSessionFailed )
		pFnServerGameSessionFailed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerGameSessionFailed" );

	AKFPlayerController_execServerGameSessionFailed_Parms ServerGameSessionFailed_Parms;

	this->ProcessEvent ( pFnServerGameSessionFailed, &ServerGameSessionFailed_Parms, NULL );
};

// Function KFGame.KFPlayerController.ServerGameSessionCreated
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::ServerGameSessionCreated ( )
{
	static UFunction* pFnServerGameSessionCreated = NULL;

	if ( ! pFnServerGameSessionCreated )
		pFnServerGameSessionCreated = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ServerGameSessionCreated" );

	AKFPlayerController_execServerGameSessionCreated_Parms ServerGameSessionCreated_Parms;

	this->ProcessEvent ( pFnServerGameSessionCreated, &ServerGameSessionCreated_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnGameSessionCreateComplete
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::OnGameSessionCreateComplete ( )
{
	static UFunction* pFnOnGameSessionCreateComplete = NULL;

	if ( ! pFnOnGameSessionCreateComplete )
		pFnOnGameSessionCreateComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnGameSessionCreateComplete" );

	AKFPlayerController_execOnGameSessionCreateComplete_Parms OnGameSessionCreateComplete_Parms;

	this->ProcessEvent ( pFnOnGameSessionCreateComplete, &OnGameSessionCreateComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.TryCreateGameSessionNow
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::TryCreateGameSessionNow ( )
{
	static UFunction* pFnTryCreateGameSessionNow = NULL;

	if ( ! pFnTryCreateGameSessionNow )
		pFnTryCreateGameSessionNow = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TryCreateGameSessionNow" );

	AKFPlayerController_execTryCreateGameSessionNow_Parms TryCreateGameSessionNow_Parms;

	this->ProcessEvent ( pFnTryCreateGameSessionNow, &TryCreateGameSessionNow_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnOldSessionDestroyedForNewGameSessionCreate
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerController::OnOldSessionDestroyedForNewGameSessionCreate ( )
{
	static UFunction* pFnOnOldSessionDestroyedForNewGameSessionCreate = NULL;

	if ( ! pFnOnOldSessionDestroyedForNewGameSessionCreate )
		pFnOnOldSessionDestroyedForNewGameSessionCreate = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnOldSessionDestroyedForNewGameSessionCreate" );

	AKFPlayerController_execOnOldSessionDestroyedForNewGameSessionCreate_Parms OnOldSessionDestroyedForNewGameSessionCreate_Parms;

	this->ProcessEvent ( pFnOnOldSessionDestroyedForNewGameSessionCreate, &OnOldSessionDestroyedForNewGameSessionCreate_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientCreateGameSession
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientCreateGameSession ( )
{
	static UFunction* pFnClientCreateGameSession = NULL;

	if ( ! pFnClientCreateGameSession )
		pFnClientCreateGameSession = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientCreateGameSession" );

	AKFPlayerController_execClientCreateGameSession_Parms ClientCreateGameSession_Parms;

	this->ProcessEvent ( pFnClientCreateGameSession, &ClientCreateGameSession_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleConsoleSessions
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::HandleConsoleSessions ( )
{
	static UFunction* pFnHandleConsoleSessions = NULL;

	if ( ! pFnHandleConsoleSessions )
		pFnHandleConsoleSessions = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleConsoleSessions" );

	AKFPlayerController_execHandleConsoleSessions_Parms HandleConsoleSessions_Parms;

	this->ProcessEvent ( pFnHandleConsoleSessions, &HandleConsoleSessions_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleReconnected
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::HandleReconnected ( )
{
	static UFunction* pFnHandleReconnected = NULL;

	if ( ! pFnHandleReconnected )
		pFnHandleReconnected = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleReconnected" );

	AKFPlayerController_execHandleReconnected_Parms HandleReconnected_Parms;

	this->ProcessEvent ( pFnHandleReconnected, &HandleReconnected_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleNetworkError
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::HandleNetworkError ( )
{
	static UFunction* pFnHandleNetworkError = NULL;

	if ( ! pFnHandleNetworkError )
		pFnHandleNetworkError = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleNetworkError" );

	AKFPlayerController_execHandleNetworkError_Parms HandleNetworkError_Parms;

	this->ProcessEvent ( pFnHandleNetworkError, &HandleNetworkError_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleLoginStatusChange
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::HandleLoginStatusChange ( )
{
	static UFunction* pFnHandleLoginStatusChange = NULL;

	if ( ! pFnHandleLoginStatusChange )
		pFnHandleLoginStatusChange = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleLoginStatusChange" );

	AKFPlayerController_execHandleLoginStatusChange_Parms HandleLoginStatusChange_Parms;

	this->ProcessEvent ( pFnHandleLoginStatusChange, &HandleLoginStatusChange_Parms, NULL );
};

// Function KFGame.KFPlayerController.HandleConnectionStatusChange
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::HandleConnectionStatusChange ( )
{
	static UFunction* pFnHandleConnectionStatusChange = NULL;

	if ( ! pFnHandleConnectionStatusChange )
		pFnHandleConnectionStatusChange = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.HandleConnectionStatusChange" );

	AKFPlayerController_execHandleConnectionStatusChange_Parms HandleConnectionStatusChange_Parms;

	this->ProcessEvent ( pFnHandleConnectionStatusChange, &HandleConnectionStatusChange_Parms, NULL );
};

// Function KFGame.KFPlayerController.OnReadProfileSettingsComplete
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::OnReadProfileSettingsComplete ( )
{
	static UFunction* pFnOnReadProfileSettingsComplete = NULL;

	if ( ! pFnOnReadProfileSettingsComplete )
		pFnOnReadProfileSettingsComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.OnReadProfileSettingsComplete" );

	AKFPlayerController_execOnReadProfileSettingsComplete_Parms OnReadProfileSettingsComplete_Parms;

	this->ProcessEvent ( pFnOnReadProfileSettingsComplete, &OnReadProfileSettingsComplete_Parms, NULL );
};

// Function KFGame.KFPlayerController.TestRegionQuery
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::TestRegionQuery ( )
{
	static UFunction* pFnTestRegionQuery = NULL;

	if ( ! pFnTestRegionQuery )
		pFnTestRegionQuery = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.TestRegionQuery" );

	AKFPlayerController_execTestRegionQuery_Parms TestRegionQuery_Parms;

	this->ProcessEvent ( pFnTestRegionQuery, &TestRegionQuery_Parms, NULL );
};

// Function KFGame.KFPlayerController.ShowBestRegionSelectedPopup
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ShowBestRegionSelectedPopup ( )
{
	static UFunction* pFnShowBestRegionSelectedPopup = NULL;

	if ( ! pFnShowBestRegionSelectedPopup )
		pFnShowBestRegionSelectedPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ShowBestRegionSelectedPopup" );

	AKFPlayerController_execShowBestRegionSelectedPopup_Parms ShowBestRegionSelectedPopup_Parms;

	this->ProcessEvent ( pFnShowBestRegionSelectedPopup, &ShowBestRegionSelectedPopup_Parms, NULL );
};

// Function KFGame.KFPlayerController.RegisterOnlineDelegates
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::RegisterOnlineDelegates ( )
{
	static UFunction* pFnRegisterOnlineDelegates = NULL;

	if ( ! pFnRegisterOnlineDelegates )
		pFnRegisterOnlineDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.RegisterOnlineDelegates" );

	AKFPlayerController_execRegisterOnlineDelegates_Parms RegisterOnlineDelegates_Parms;

	this->ProcessEvent ( pFnRegisterOnlineDelegates, &RegisterOnlineDelegates_Parms, NULL );
};

// Function KFGame.KFPlayerController.ReturnToViewTarget
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ReturnToViewTarget ( )
{
	static UFunction* pFnReturnToViewTarget = NULL;

	if ( ! pFnReturnToViewTarget )
		pFnReturnToViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ReturnToViewTarget" );

	AKFPlayerController_execReturnToViewTarget_Parms ReturnToViewTarget_Parms;

	this->ProcessEvent ( pFnReturnToViewTarget, &ReturnToViewTarget_Parms, NULL );
};

// Function KFGame.KFPlayerController.SpawnMidGameCustomizationPawn
// [0x00820002] 
// Parameters infos:

void AKFPlayerController::SpawnMidGameCustomizationPawn ( )
{
	static UFunction* pFnSpawnMidGameCustomizationPawn = NULL;

	if ( ! pFnSpawnMidGameCustomizationPawn )
		pFnSpawnMidGameCustomizationPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SpawnMidGameCustomizationPawn" );

	AKFPlayerController_execSpawnMidGameCustomizationPawn_Parms SpawnMidGameCustomizationPawn_Parms;

	this->ProcessEvent ( pFnSpawnMidGameCustomizationPawn, &SpawnMidGameCustomizationPawn_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetBestCustomizationStart
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::GetBestCustomizationStart ( )
{
	static UFunction* pFnGetBestCustomizationStart = NULL;

	if ( ! pFnGetBestCustomizationStart )
		pFnGetBestCustomizationStart = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetBestCustomizationStart" );

	AKFPlayerController_execGetBestCustomizationStart_Parms GetBestCustomizationStart_Parms;

	this->ProcessEvent ( pFnGetBestCustomizationStart, &GetBestCustomizationStart_Parms, NULL );
};

// Function KFGame.KFPlayerController.CreateCustomizationPawn
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CreateCustomizationPawn ( )
{
	static UFunction* pFnCreateCustomizationPawn = NULL;

	if ( ! pFnCreateCustomizationPawn )
		pFnCreateCustomizationPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CreateCustomizationPawn" );

	AKFPlayerController_execCreateCustomizationPawn_Parms CreateCustomizationPawn_Parms;

	this->ProcessEvent ( pFnCreateCustomizationPawn, &CreateCustomizationPawn_Parms, NULL );
};

// Function KFGame.KFPlayerController.InitInputSystem
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventInitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.InitInputSystem" );

	AKFPlayerController_eventInitInputSystem_Parms InitInputSystem_Parms;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );
};

// Function KFGame.KFPlayerController.ResetPlayerMovementInput
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ResetPlayerMovementInput ( )
{
	static UFunction* pFnResetPlayerMovementInput = NULL;

	if ( ! pFnResetPlayerMovementInput )
		pFnResetPlayerMovementInput = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ResetPlayerMovementInput" );

	AKFPlayerController_execResetPlayerMovementInput_Parms ResetPlayerMovementInput_Parms;

	this->ProcessEvent ( pFnResetPlayerMovementInput, &ResetPlayerMovementInput_Parms, NULL );
};

// Function KFGame.KFPlayerController.CanViewCinematics
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CanViewCinematics ( )
{
	static UFunction* pFnCanViewCinematics = NULL;

	if ( ! pFnCanViewCinematics )
		pFnCanViewCinematics = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CanViewCinematics" );

	AKFPlayerController_execCanViewCinematics_Parms CanViewCinematics_Parms;

	this->ProcessEvent ( pFnCanViewCinematics, &CanViewCinematics_Parms, NULL );
};

// Function KFGame.KFPlayerController.IsReadyToPlay
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::IsReadyToPlay ( )
{
	static UFunction* pFnIsReadyToPlay = NULL;

	if ( ! pFnIsReadyToPlay )
		pFnIsReadyToPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsReadyToPlay" );

	AKFPlayerController_execIsReadyToPlay_Parms IsReadyToPlay_Parms;

	this->ProcessEvent ( pFnIsReadyToPlay, &IsReadyToPlay_Parms, NULL );
};

// Function KFGame.KFPlayerController.CanRestartPlayer
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::CanRestartPlayer ( )
{
	static UFunction* pFnCanRestartPlayer = NULL;

	if ( ! pFnCanRestartPlayer )
		pFnCanRestartPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CanRestartPlayer" );

	AKFPlayerController_execCanRestartPlayer_Parms CanRestartPlayer_Parms;

	this->ProcessEvent ( pFnCanRestartPlayer, &CanRestartPlayer_Parms, NULL );
};

// Function KFGame.KFPlayerController.SpawnReconnectedPlayer
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SpawnReconnectedPlayer ( )
{
	static UFunction* pFnSpawnReconnectedPlayer = NULL;

	if ( ! pFnSpawnReconnectedPlayer )
		pFnSpawnReconnectedPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SpawnReconnectedPlayer" );

	AKFPlayerController_execSpawnReconnectedPlayer_Parms SpawnReconnectedPlayer_Parms;

	this->ProcessEvent ( pFnSpawnReconnectedPlayer, &SpawnReconnectedPlayer_Parms, NULL );
};

// Function KFGame.KFPlayerController.ListConsoleEvents
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerController::ListConsoleEvents ( )
{
	static UFunction* pFnListConsoleEvents = NULL;

	if ( ! pFnListConsoleEvents )
		pFnListConsoleEvents = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ListConsoleEvents" );

	AKFPlayerController_execListConsoleEvents_Parms ListConsoleEvents_Parms;

	this->ProcessEvent ( pFnListConsoleEvents, &ListConsoleEvents_Parms, NULL );
};

// Function KFGame.KFPlayerController.PawnDied
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::PawnDied ( )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PawnDied" );

	AKFPlayerController_execPawnDied_Parms PawnDied_Parms;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientRestart
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientRestart ( )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientRestart" );

	AKFPlayerController_execClientRestart_Parms ClientRestart_Parms;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function KFGame.KFPlayerController.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.Possess" );

	AKFPlayerController_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function KFGame.KFPlayerController.ReceivedGameClass
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::ReceivedGameClass ( )
{
	static UFunction* pFnReceivedGameClass = NULL;

	if ( ! pFnReceivedGameClass )
		pFnReceivedGameClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ReceivedGameClass" );

	AKFPlayerController_execReceivedGameClass_Parms ReceivedGameClass_Parms;

	this->ProcessEvent ( pFnReceivedGameClass, &ReceivedGameClass_Parms, NULL );
};

// Function KFGame.KFPlayerController.AskForPawn
// [0x002200C2] 
// Parameters infos:

void AKFPlayerController::AskForPawn ( )
{
	static UFunction* pFnAskForPawn = NULL;

	if ( ! pFnAskForPawn )
		pFnAskForPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AskForPawn" );

	AKFPlayerController_execAskForPawn_Parms AskForPawn_Parms;

	this->ProcessEvent ( pFnAskForPawn, &AskForPawn_Parms, NULL );
};

// Function KFGame.KFPlayerController.ReceivedPlayer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventReceivedPlayer ( )
{
	static UFunction* pFnReceivedPlayer = NULL;

	if ( ! pFnReceivedPlayer )
		pFnReceivedPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ReceivedPlayer" );

	AKFPlayerController_eventReceivedPlayer_Parms ReceivedPlayer_Parms;

	this->ProcessEvent ( pFnReceivedPlayer, &ReceivedPlayer_Parms, NULL );
};

// Function KFGame.KFPlayerController.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ReplicatedEvent" );

	AKFPlayerController_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFPlayerController.GetSeasonalStateName
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventGetSeasonalStateName ( )
{
	static UFunction* pFnGetSeasonalStateName = NULL;

	if ( ! pFnGetSeasonalStateName )
		pFnGetSeasonalStateName = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetSeasonalStateName" );

	AKFPlayerController_eventGetSeasonalStateName_Parms GetSeasonalStateName_Parms;

	this->ProcessEvent ( pFnGetSeasonalStateName, &GetSeasonalStateName_Parms, NULL );
};

// Function KFGame.KFPlayerController.PushV
// [0x002208C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventPushV ( )
{
	static UFunction* pFnPushV = NULL;

	if ( ! pFnPushV )
		pFnPushV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PushV" );

	AKFPlayerController_eventPushV_Parms PushV_Parms;

	this->ProcessEvent ( pFnPushV, &PushV_Parms, NULL );
};

// Function KFGame.KFPlayerController.AddV
// [0x002208C2] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventAddV ( )
{
	static UFunction* pFnAddV = NULL;

	if ( ! pFnAddV )
		pFnAddV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddV" );

	AKFPlayerController_eventAddV_Parms AddV_Parms;

	this->ProcessEvent ( pFnAddV, &AddV_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClearDownloadInfo
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::ClearDownloadInfo ( )
{
	static UFunction* pFnClearDownloadInfo = NULL;

	if ( ! pFnClearDownloadInfo )
		pFnClearDownloadInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClearDownloadInfo" );

	AKFPlayerController_execClearDownloadInfo_Parms ClearDownloadInfo_Parms;

	this->ProcessEvent ( pFnClearDownloadInfo, &ClearDownloadInfo_Parms, NULL );
};

// Function KFGame.KFPlayerController.UpdateSeasonalState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventUpdateSeasonalState ( )
{
	static UFunction* pFnUpdateSeasonalState = NULL;

	if ( ! pFnUpdateSeasonalState )
		pFnUpdateSeasonalState = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.UpdateSeasonalState" );

	AKFPlayerController_eventUpdateSeasonalState_Parms UpdateSeasonalState_Parms;

	this->ProcessEvent ( pFnUpdateSeasonalState, &UpdateSeasonalState_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckWeeklyEventID
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::CheckWeeklyEventID ( )
{
	static UFunction* pFnCheckWeeklyEventID = NULL;

	if ( ! pFnCheckWeeklyEventID )
		pFnCheckWeeklyEventID = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckWeeklyEventID" );

	AKFPlayerController_execCheckWeeklyEventID_Parms CheckWeeklyEventID_Parms;

	this->ProcessEvent ( pFnCheckWeeklyEventID, &CheckWeeklyEventID_Parms, NULL );
};

// Function KFGame.KFPlayerController.CheckSpecialEventID
// [0x00020102] 
// Parameters infos:

void AKFPlayerController::CheckSpecialEventID ( )
{
	static UFunction* pFnCheckSpecialEventID = NULL;

	if ( ! pFnCheckSpecialEventID )
		pFnCheckSpecialEventID = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckSpecialEventID" );

	AKFPlayerController_execCheckSpecialEventID_Parms CheckSpecialEventID_Parms;

	this->ProcessEvent ( pFnCheckSpecialEventID, &CheckSpecialEventID_Parms, NULL );
};

// Function KFGame.KFPlayerController.ClientSetHUD
// [0x010201C2] 
// Parameters infos:

void AKFPlayerController::ClientSetHUD ( )
{
	static UFunction* pFnClientSetHUD = NULL;

	if ( ! pFnClientSetHUD )
		pFnClientSetHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ClientSetHUD" );

	AKFPlayerController_execClientSetHUD_Parms ClientSetHUD_Parms;

	this->ProcessEvent ( pFnClientSetHUD, &ClientSetHUD_Parms, NULL );
};

// Function KFGame.KFPlayerController.SpawnDefaultHUD
// [0x00020002] 
// Parameters infos:

void AKFPlayerController::SpawnDefaultHUD ( )
{
	static UFunction* pFnSpawnDefaultHUD = NULL;

	if ( ! pFnSpawnDefaultHUD )
		pFnSpawnDefaultHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SpawnDefaultHUD" );

	AKFPlayerController_execSpawnDefaultHUD_Parms SpawnDefaultHUD_Parms;

	this->ProcessEvent ( pFnSpawnDefaultHUD, &SpawnDefaultHUD_Parms, NULL );
};

// Function KFGame.KFPlayerController.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerController::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PostBeginPlay" );

	AKFPlayerController_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFPlayerController.ShowPreClientTravelMovie
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::ShowPreClientTravelMovie ( )
{
	static UFunction* pFnShowPreClientTravelMovie = NULL;

	if ( ! pFnShowPreClientTravelMovie )
		pFnShowPreClientTravelMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ShowPreClientTravelMovie" );

	AKFPlayerController_execShowPreClientTravelMovie_Parms ShowPreClientTravelMovie_Parms;

	pFnShowPreClientTravelMovie->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowPreClientTravelMovie, &ShowPreClientTravelMovie_Parms, NULL );

	pFnShowPreClientTravelMovie->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.PushPlayerStats
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerController::eventPushPlayerStats ( )
{
	static UFunction* pFnPushPlayerStats = NULL;

	if ( ! pFnPushPlayerStats )
		pFnPushPlayerStats = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PushPlayerStats" );

	AKFPlayerController_eventPushPlayerStats_Parms PushPlayerStats_Parms;

	pFnPushPlayerStats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPushPlayerStats, &PushPlayerStats_Parms, NULL );

	pFnPushPlayerStats->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.PerformPrestigeReset
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::PerformPrestigeReset ( )
{
	static UFunction* pFnPerformPrestigeReset = NULL;

	if ( ! pFnPerformPrestigeReset )
		pFnPerformPrestigeReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.PerformPrestigeReset" );

	AKFPlayerController_execPerformPrestigeReset_Parms PerformPrestigeReset_Parms;

	pFnPerformPrestigeReset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformPrestigeReset, &PerformPrestigeReset_Parms, NULL );

	pFnPerformPrestigeReset->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetPerk
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetPerk ( )
{
	static UFunction* pFnGetPerk = NULL;

	if ( ! pFnGetPerk )
		pFnGetPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetPerk" );

	AKFPlayerController_execGetPerk_Parms GetPerk_Parms;

	pFnGetPerk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerk, &GetPerk_Parms, NULL );

	pFnGetPerk->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.CheckBulletWhip
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::CheckBulletWhip ( )
{
	static UFunction* pFnCheckBulletWhip = NULL;

	if ( ! pFnCheckBulletWhip )
		pFnCheckBulletWhip = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckBulletWhip" );

	AKFPlayerController_execCheckBulletWhip_Parms CheckBulletWhip_Parms;

	pFnCheckBulletWhip->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckBulletWhip, &CheckBulletWhip_Parms, NULL );

	pFnCheckBulletWhip->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.GetTargetAdhesionFrictionTarget
// [0x00424400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::GetTargetAdhesionFrictionTarget ( )
{
	static UFunction* pFnGetTargetAdhesionFrictionTarget = NULL;

	if ( ! pFnGetTargetAdhesionFrictionTarget )
		pFnGetTargetAdhesionFrictionTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.GetTargetAdhesionFrictionTarget" );

	AKFPlayerController_execGetTargetAdhesionFrictionTarget_Parms GetTargetAdhesionFrictionTarget_Parms;

	pFnGetTargetAdhesionFrictionTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetTargetAdhesionFrictionTarget, &GetTargetAdhesionFrictionTarget_Parms, NULL );

	pFnGetTargetAdhesionFrictionTarget->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.IsMouseAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::IsMouseAvailable ( )
{
	static UFunction* pFnIsMouseAvailable = NULL;

	if ( ! pFnIsMouseAvailable )
		pFnIsMouseAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsMouseAvailable" );

	AKFPlayerController_execIsMouseAvailable_Parms IsMouseAvailable_Parms;

	pFnIsMouseAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsMouseAvailable, &IsMouseAvailable_Parms, NULL );

	pFnIsMouseAvailable->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.IsKeyboardAvailable
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::IsKeyboardAvailable ( )
{
	static UFunction* pFnIsKeyboardAvailable = NULL;

	if ( ! pFnIsKeyboardAvailable )
		pFnIsKeyboardAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.IsKeyboardAvailable" );

	AKFPlayerController_execIsKeyboardAvailable_Parms IsKeyboardAvailable_Parms;

	pFnIsKeyboardAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsKeyboardAvailable, &IsKeyboardAvailable_Parms, NULL );

	pFnIsKeyboardAvailable->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.CheckPerkLevelAchievements
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::CheckPerkLevelAchievements ( )
{
	static UFunction* pFnCheckPerkLevelAchievements = NULL;

	if ( ! pFnCheckPerkLevelAchievements )
		pFnCheckPerkLevelAchievements = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.CheckPerkLevelAchievements" );

	AKFPlayerController_execCheckPerkLevelAchievements_Parms CheckPerkLevelAchievements_Parms;

	pFnCheckPerkLevelAchievements->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckPerkLevelAchievements, &CheckPerkLevelAchievements_Parms, NULL );

	pFnCheckPerkLevelAchievements->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.ResetVStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::ResetVStat ( )
{
	static UFunction* pFnResetVStat = NULL;

	if ( ! pFnResetVStat )
		pFnResetVStat = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.ResetVStat" );

	AKFPlayerController_execResetVStat_Parms ResetVStat_Parms;

	pFnResetVStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetVStat, &ResetVStat_Parms, NULL );

	pFnResetVStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.AddVStat
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::AddVStat ( )
{
	static UFunction* pFnAddVStat = NULL;

	if ( ! pFnAddVStat )
		pFnAddVStat = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.AddVStat" );

	AKFPlayerController_execAddVStat_Parms AddVStat_Parms;

	pFnAddVStat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddVStat, &AddVStat_Parms, NULL );

	pFnAddVStat->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.SyncInventoryProperties
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::SyncInventoryProperties ( )
{
	static UFunction* pFnSyncInventoryProperties = NULL;

	if ( ! pFnSyncInventoryProperties )
		pFnSyncInventoryProperties = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SyncInventoryProperties" );

	AKFPlayerController_execSyncInventoryProperties_Parms SyncInventoryProperties_Parms;

	pFnSyncInventoryProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSyncInventoryProperties, &SyncInventoryProperties_Parms, NULL );

	pFnSyncInventoryProperties->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController.SetHardwarePhysicsEnabled
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerController::SetHardwarePhysicsEnabled ( )
{
	static UFunction* pFnSetHardwarePhysicsEnabled = NULL;

	if ( ! pFnSetHardwarePhysicsEnabled )
		pFnSetHardwarePhysicsEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController.SetHardwarePhysicsEnabled" );

	AKFPlayerController_execSetHardwarePhysicsEnabled_Parms SetHardwarePhysicsEnabled_Parms;

	pFnSetHardwarePhysicsEnabled->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHardwarePhysicsEnabled, &SetHardwarePhysicsEnabled_Parms, NULL );

	pFnSetHardwarePhysicsEnabled->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerController_WeeklySurvival.RecheckZedTime
// [0x00020002] 
// Parameters infos:

void AKFPlayerController_WeeklySurvival::RecheckZedTime ( )
{
	static UFunction* pFnRecheckZedTime = NULL;

	if ( ! pFnRecheckZedTime )
		pFnRecheckZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController_WeeklySurvival.RecheckZedTime" );

	AKFPlayerController_WeeklySurvival_execRecheckZedTime_Parms RecheckZedTime_Parms;

	this->ProcessEvent ( pFnRecheckZedTime, &RecheckZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerController_WeeklySurvival.EnterZedTime
// [0x00020002] 
// Parameters infos:

void AKFPlayerController_WeeklySurvival::EnterZedTime ( )
{
	static UFunction* pFnEnterZedTime = NULL;

	if ( ! pFnEnterZedTime )
		pFnEnterZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerController_WeeklySurvival.EnterZedTime" );

	AKFPlayerController_WeeklySurvival_execEnterZedTime_Parms EnterZedTime_Parms;

	this->ProcessEvent ( pFnEnterZedTime, &EnterZedTime_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressWeaponUpgrade
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressWeaponUpgrade ( )
{
	static UFunction* pFnUnsuppressWeaponUpgrade = NULL;

	if ( ! pFnUnsuppressWeaponUpgrade )
		pFnUnsuppressWeaponUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressWeaponUpgrade" );

	UKFPlayerInput_execUnsuppressWeaponUpgrade_Parms UnsuppressWeaponUpgrade_Parms;

	this->ProcessEvent ( pFnUnsuppressWeaponUpgrade, &UnsuppressWeaponUpgrade_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressWeaponUpgrade
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressWeaponUpgrade ( )
{
	static UFunction* pFnSuppressWeaponUpgrade = NULL;

	if ( ! pFnSuppressWeaponUpgrade )
		pFnSuppressWeaponUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressWeaponUpgrade" );

	UKFPlayerInput_execSuppressWeaponUpgrade_Parms SuppressWeaponUpgrade_Parms;

	this->ProcessEvent ( pFnSuppressWeaponUpgrade, &SuppressWeaponUpgrade_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressTrader
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressTrader ( )
{
	static UFunction* pFnUnsuppressTrader = NULL;

	if ( ! pFnUnsuppressTrader )
		pFnUnsuppressTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressTrader" );

	UKFPlayerInput_execUnsuppressTrader_Parms UnsuppressTrader_Parms;

	this->ProcessEvent ( pFnUnsuppressTrader, &UnsuppressTrader_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressTrader
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressTrader ( )
{
	static UFunction* pFnSuppressTrader = NULL;

	if ( ! pFnSuppressTrader )
		pFnSuppressTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressTrader" );

	UKFPlayerInput_execSuppressTrader_Parms SuppressTrader_Parms;

	this->ProcessEvent ( pFnSuppressTrader, &SuppressTrader_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressDialog
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressDialog ( )
{
	static UFunction* pFnUnsuppressDialog = NULL;

	if ( ! pFnUnsuppressDialog )
		pFnUnsuppressDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressDialog" );

	UKFPlayerInput_execUnsuppressDialog_Parms UnsuppressDialog_Parms;

	this->ProcessEvent ( pFnUnsuppressDialog, &UnsuppressDialog_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressDialog
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressDialog ( )
{
	static UFunction* pFnSuppressDialog = NULL;

	if ( ! pFnSuppressDialog )
		pFnSuppressDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressDialog" );

	UKFPlayerInput_execSuppressDialog_Parms SuppressDialog_Parms;

	this->ProcessEvent ( pFnSuppressDialog, &SuppressDialog_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressScoring
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressScoring ( )
{
	static UFunction* pFnUnsuppressScoring = NULL;

	if ( ! pFnUnsuppressScoring )
		pFnUnsuppressScoring = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressScoring" );

	UKFPlayerInput_execUnsuppressScoring_Parms UnsuppressScoring_Parms;

	this->ProcessEvent ( pFnUnsuppressScoring, &UnsuppressScoring_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressScoring
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressScoring ( )
{
	static UFunction* pFnSuppressScoring = NULL;

	if ( ! pFnSuppressScoring )
		pFnSuppressScoring = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressScoring" );

	UKFPlayerInput_execSuppressScoring_Parms SuppressScoring_Parms;

	this->ProcessEvent ( pFnSuppressScoring, &SuppressScoring_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressWaveSpawnLogging
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressWaveSpawnLogging ( )
{
	static UFunction* pFnUnsuppressWaveSpawnLogging = NULL;

	if ( ! pFnUnsuppressWaveSpawnLogging )
		pFnUnsuppressWaveSpawnLogging = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressWaveSpawnLogging" );

	UKFPlayerInput_execUnsuppressWaveSpawnLogging_Parms UnsuppressWaveSpawnLogging_Parms;

	this->ProcessEvent ( pFnUnsuppressWaveSpawnLogging, &UnsuppressWaveSpawnLogging_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressWaveSpawnLogging
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressWaveSpawnLogging ( )
{
	static UFunction* pFnSuppressWaveSpawnLogging = NULL;

	if ( ! pFnSuppressWaveSpawnLogging )
		pFnSuppressWaveSpawnLogging = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressWaveSpawnLogging" );

	UKFPlayerInput_execSuppressWaveSpawnLogging_Parms SuppressWaveSpawnLogging_Parms;

	this->ProcessEvent ( pFnSuppressWaveSpawnLogging, &SuppressWaveSpawnLogging_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressAISpawnLogging
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressAISpawnLogging ( )
{
	static UFunction* pFnUnsuppressAISpawnLogging = NULL;

	if ( ! pFnUnsuppressAISpawnLogging )
		pFnUnsuppressAISpawnLogging = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressAISpawnLogging" );

	UKFPlayerInput_execUnsuppressAISpawnLogging_Parms UnsuppressAISpawnLogging_Parms;

	this->ProcessEvent ( pFnUnsuppressAISpawnLogging, &UnsuppressAISpawnLogging_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressAISpawnLogging
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressAISpawnLogging ( )
{
	static UFunction* pFnSuppressAISpawnLogging = NULL;

	if ( ! pFnSuppressAISpawnLogging )
		pFnSuppressAISpawnLogging = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressAISpawnLogging" );

	UKFPlayerInput_execSuppressAISpawnLogging_Parms SuppressAISpawnLogging_Parms;

	this->ProcessEvent ( pFnSuppressAISpawnLogging, &SuppressAISpawnLogging_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressPerk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressPerk ( )
{
	static UFunction* pFnUnsuppressPerk = NULL;

	if ( ! pFnUnsuppressPerk )
		pFnUnsuppressPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressPerk" );

	UKFPlayerInput_execUnsuppressPerk_Parms UnsuppressPerk_Parms;

	this->ProcessEvent ( pFnUnsuppressPerk, &UnsuppressPerk_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressPerk
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressPerk ( )
{
	static UFunction* pFnSuppressPerk = NULL;

	if ( ! pFnSuppressPerk )
		pFnSuppressPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressPerk" );

	UKFPlayerInput_execSuppressPerk_Parms SuppressPerk_Parms;

	this->ProcessEvent ( pFnSuppressPerk, &SuppressPerk_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressMelee
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressMelee ( )
{
	static UFunction* pFnUnsuppressMelee = NULL;

	if ( ! pFnUnsuppressMelee )
		pFnUnsuppressMelee = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressMelee" );

	UKFPlayerInput_execUnsuppressMelee_Parms UnsuppressMelee_Parms;

	this->ProcessEvent ( pFnUnsuppressMelee, &UnsuppressMelee_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressMelee
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressMelee ( )
{
	static UFunction* pFnSuppressMelee = NULL;

	if ( ! pFnSuppressMelee )
		pFnSuppressMelee = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressMelee" );

	UKFPlayerInput_execSuppressMelee_Parms SuppressMelee_Parms;

	this->ProcessEvent ( pFnSuppressMelee, &SuppressMelee_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressWeaponAnim
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressWeaponAnim ( )
{
	static UFunction* pFnUnsuppressWeaponAnim = NULL;

	if ( ! pFnUnsuppressWeaponAnim )
		pFnUnsuppressWeaponAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressWeaponAnim" );

	UKFPlayerInput_execUnsuppressWeaponAnim_Parms UnsuppressWeaponAnim_Parms;

	this->ProcessEvent ( pFnUnsuppressWeaponAnim, &UnsuppressWeaponAnim_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressWeaponAnim
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressWeaponAnim ( )
{
	static UFunction* pFnSuppressWeaponAnim = NULL;

	if ( ! pFnSuppressWeaponAnim )
		pFnSuppressWeaponAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressWeaponAnim" );

	UKFPlayerInput_execSuppressWeaponAnim_Parms SuppressWeaponAnim_Parms;

	this->ProcessEvent ( pFnSuppressWeaponAnim, &SuppressWeaponAnim_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressAffliction
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressAffliction ( )
{
	static UFunction* pFnUnsuppressAffliction = NULL;

	if ( ! pFnUnsuppressAffliction )
		pFnUnsuppressAffliction = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressAffliction" );

	UKFPlayerInput_execUnsuppressAffliction_Parms UnsuppressAffliction_Parms;

	this->ProcessEvent ( pFnUnsuppressAffliction, &UnsuppressAffliction_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressAffliction
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressAffliction ( )
{
	static UFunction* pFnSuppressAffliction = NULL;

	if ( ! pFnSuppressAffliction )
		pFnSuppressAffliction = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressAffliction" );

	UKFPlayerInput_execSuppressAffliction_Parms SuppressAffliction_Parms;

	this->ProcessEvent ( pFnSuppressAffliction, &SuppressAffliction_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressWeaponAttach
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressWeaponAttach ( )
{
	static UFunction* pFnUnsuppressWeaponAttach = NULL;

	if ( ! pFnUnsuppressWeaponAttach )
		pFnUnsuppressWeaponAttach = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressWeaponAttach" );

	UKFPlayerInput_execUnsuppressWeaponAttach_Parms UnsuppressWeaponAttach_Parms;

	this->ProcessEvent ( pFnUnsuppressWeaponAttach, &UnsuppressWeaponAttach_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressWeaponAttach
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressWeaponAttach ( )
{
	static UFunction* pFnSuppressWeaponAttach = NULL;

	if ( ! pFnSuppressWeaponAttach )
		pFnSuppressWeaponAttach = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressWeaponAttach" );

	UKFPlayerInput_execSuppressWeaponAttach_Parms SuppressWeaponAttach_Parms;

	this->ProcessEvent ( pFnSuppressWeaponAttach, &SuppressWeaponAttach_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressPawnAnim
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressPawnAnim ( )
{
	static UFunction* pFnUnsuppressPawnAnim = NULL;

	if ( ! pFnUnsuppressPawnAnim )
		pFnUnsuppressPawnAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressPawnAnim" );

	UKFPlayerInput_execUnsuppressPawnAnim_Parms UnsuppressPawnAnim_Parms;

	this->ProcessEvent ( pFnUnsuppressPawnAnim, &UnsuppressPawnAnim_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressPawnAnim
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressPawnAnim ( )
{
	static UFunction* pFnSuppressPawnAnim = NULL;

	if ( ! pFnSuppressPawnAnim )
		pFnSuppressPawnAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressPawnAnim" );

	UKFPlayerInput_execSuppressPawnAnim_Parms SuppressPawnAnim_Parms;

	this->ProcessEvent ( pFnSuppressPawnAnim, &SuppressPawnAnim_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressSpecialMove
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressSpecialMove ( )
{
	static UFunction* pFnUnsuppressSpecialMove = NULL;

	if ( ! pFnUnsuppressSpecialMove )
		pFnUnsuppressSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressSpecialMove" );

	UKFPlayerInput_execUnsuppressSpecialMove_Parms UnsuppressSpecialMove_Parms;

	this->ProcessEvent ( pFnUnsuppressSpecialMove, &UnsuppressSpecialMove_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressSpecialMove
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressSpecialMove ( )
{
	static UFunction* pFnSuppressSpecialMove = NULL;

	if ( ! pFnSuppressSpecialMove )
		pFnSuppressSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressSpecialMove" );

	UKFPlayerInput_execSuppressSpecialMove_Parms SuppressSpecialMove_Parms;

	this->ProcessEvent ( pFnSuppressSpecialMove, &SuppressSpecialMove_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressPhysicsBodyImpact
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressPhysicsBodyImpact ( )
{
	static UFunction* pFnUnsuppressPhysicsBodyImpact = NULL;

	if ( ! pFnUnsuppressPhysicsBodyImpact )
		pFnUnsuppressPhysicsBodyImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressPhysicsBodyImpact" );

	UKFPlayerInput_execUnsuppressPhysicsBodyImpact_Parms UnsuppressPhysicsBodyImpact_Parms;

	this->ProcessEvent ( pFnUnsuppressPhysicsBodyImpact, &UnsuppressPhysicsBodyImpact_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressPhysicsBodyImpact
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressPhysicsBodyImpact ( )
{
	static UFunction* pFnSuppressPhysicsBodyImpact = NULL;

	if ( ! pFnSuppressPhysicsBodyImpact )
		pFnSuppressPhysicsBodyImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressPhysicsBodyImpact" );

	UKFPlayerInput_execSuppressPhysicsBodyImpact_Parms SuppressPhysicsBodyImpact_Parms;

	this->ProcessEvent ( pFnSuppressPhysicsBodyImpact, &SuppressPhysicsBodyImpact_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UnsuppressTakeDamage
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::UnsuppressTakeDamage ( )
{
	static UFunction* pFnUnsuppressTakeDamage = NULL;

	if ( ! pFnUnsuppressTakeDamage )
		pFnUnsuppressTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UnsuppressTakeDamage" );

	UKFPlayerInput_execUnsuppressTakeDamage_Parms UnsuppressTakeDamage_Parms;

	this->ProcessEvent ( pFnUnsuppressTakeDamage, &UnsuppressTakeDamage_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SuppressTakeDamage
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SuppressTakeDamage ( )
{
	static UFunction* pFnSuppressTakeDamage = NULL;

	if ( ! pFnSuppressTakeDamage )
		pFnSuppressTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SuppressTakeDamage" );

	UKFPlayerInput_execSuppressTakeDamage_Parms SuppressTakeDamage_Parms;

	this->ProcessEvent ( pFnSuppressTakeDamage, &SuppressTakeDamage_Parms, NULL );
};

// Function KFGame.KFPlayerInput.JumpVersus
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::JumpVersus ( )
{
	static UFunction* pFnJumpVersus = NULL;

	if ( ! pFnJumpVersus )
		pFnJumpVersus = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.JumpVersus" );

	UKFPlayerInput_execJumpVersus_Parms JumpVersus_Parms;

	this->ProcessEvent ( pFnJumpVersus, &JumpVersus_Parms, NULL );
};

// Function KFGame.KFPlayerInput.QuickHealVersus
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::QuickHealVersus ( )
{
	static UFunction* pFnQuickHealVersus = NULL;

	if ( ! pFnQuickHealVersus )
		pFnQuickHealVersus = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.QuickHealVersus" );

	UKFPlayerInput_execQuickHealVersus_Parms QuickHealVersus_Parms;

	this->ProcessEvent ( pFnQuickHealVersus, &QuickHealVersus_Parms, NULL );
};

// Function KFGame.KFPlayerInput.CustomStopFireVersus
// [0x00024002] 
// Parameters infos:

void UKFPlayerInput::CustomStopFireVersus ( )
{
	static UFunction* pFnCustomStopFireVersus = NULL;

	if ( ! pFnCustomStopFireVersus )
		pFnCustomStopFireVersus = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.CustomStopFireVersus" );

	UKFPlayerInput_execCustomStopFireVersus_Parms CustomStopFireVersus_Parms;

	this->ProcessEvent ( pFnCustomStopFireVersus, &CustomStopFireVersus_Parms, NULL );
};

// Function KFGame.KFPlayerInput.CustomStartFireVersus
// [0x00024002] 
// Parameters infos:

void UKFPlayerInput::CustomStartFireVersus ( )
{
	static UFunction* pFnCustomStartFireVersus = NULL;

	if ( ! pFnCustomStartFireVersus )
		pFnCustomStartFireVersus = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.CustomStartFireVersus" );

	UKFPlayerInput_execCustomStartFireVersus_Parms CustomStartFireVersus_Parms;

	this->ProcessEvent ( pFnCustomStartFireVersus, &CustomStartFireVersus_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GetVersusZedMoveTypeGamepad
// [0x00020102] 
// Parameters infos:

void UKFPlayerInput::GetVersusZedMoveTypeGamepad ( )
{
	static UFunction* pFnGetVersusZedMoveTypeGamepad = NULL;

	if ( ! pFnGetVersusZedMoveTypeGamepad )
		pFnGetVersusZedMoveTypeGamepad = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetVersusZedMoveTypeGamepad" );

	UKFPlayerInput_execGetVersusZedMoveTypeGamepad_Parms GetVersusZedMoveTypeGamepad_Parms;

	this->ProcessEvent ( pFnGetVersusZedMoveTypeGamepad, &GetVersusZedMoveTypeGamepad_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GetVersusZedMoveType
// [0x00020102] 
// Parameters infos:

void UKFPlayerInput::GetVersusZedMoveType ( )
{
	static UFunction* pFnGetVersusZedMoveType = NULL;

	if ( ! pFnGetVersusZedMoveType )
		pFnGetVersusZedMoveType = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetVersusZedMoveType" );

	UKFPlayerInput_execGetVersusZedMoveType_Parms GetVersusZedMoveType_Parms;

	this->ProcessEvent ( pFnGetVersusZedMoveType, &GetVersusZedMoveType_Parms, NULL );
};

// Function KFGame.KFPlayerInput.IsAimAssistAutoTargetEnabled
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::IsAimAssistAutoTargetEnabled ( )
{
	static UFunction* pFnIsAimAssistAutoTargetEnabled = NULL;

	if ( ! pFnIsAimAssistAutoTargetEnabled )
		pFnIsAimAssistAutoTargetEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.IsAimAssistAutoTargetEnabled" );

	UKFPlayerInput_execIsAimAssistAutoTargetEnabled_Parms IsAimAssistAutoTargetEnabled_Parms;

	this->ProcessEvent ( pFnIsAimAssistAutoTargetEnabled, &IsAimAssistAutoTargetEnabled_Parms, NULL );
};

// Function KFGame.KFPlayerInput.IsAimAssistAdhesionEnabled
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::IsAimAssistAdhesionEnabled ( )
{
	static UFunction* pFnIsAimAssistAdhesionEnabled = NULL;

	if ( ! pFnIsAimAssistAdhesionEnabled )
		pFnIsAimAssistAdhesionEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.IsAimAssistAdhesionEnabled" );

	UKFPlayerInput_execIsAimAssistAdhesionEnabled_Parms IsAimAssistAdhesionEnabled_Parms;

	this->ProcessEvent ( pFnIsAimAssistAdhesionEnabled, &IsAimAssistAdhesionEnabled_Parms, NULL );
};

// Function KFGame.KFPlayerInput.IsAimAssistFrictionEnabled
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::IsAimAssistFrictionEnabled ( )
{
	static UFunction* pFnIsAimAssistFrictionEnabled = NULL;

	if ( ! pFnIsAimAssistFrictionEnabled )
		pFnIsAimAssistFrictionEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.IsAimAssistFrictionEnabled" );

	UKFPlayerInput_execIsAimAssistFrictionEnabled_Parms IsAimAssistFrictionEnabled_Parms;

	this->ProcessEvent ( pFnIsAimAssistFrictionEnabled, &IsAimAssistFrictionEnabled_Parms, NULL );
};

// Function KFGame.KFPlayerInput.DebugTargetFriction
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::DebugTargetFriction ( )
{
	static UFunction* pFnDebugTargetFriction = NULL;

	if ( ! pFnDebugTargetFriction )
		pFnDebugTargetFriction = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.DebugTargetFriction" );

	UKFPlayerInput_execDebugTargetFriction_Parms DebugTargetFriction_Parms;

	this->ProcessEvent ( pFnDebugTargetFriction, &DebugTargetFriction_Parms, NULL );
};

// Function KFGame.KFPlayerInput.DebugAutoTarget
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::DebugAutoTarget ( )
{
	static UFunction* pFnDebugAutoTarget = NULL;

	if ( ! pFnDebugAutoTarget )
		pFnDebugAutoTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.DebugAutoTarget" );

	UKFPlayerInput_execDebugAutoTarget_Parms DebugAutoTarget_Parms;

	this->ProcessEvent ( pFnDebugAutoTarget, &DebugAutoTarget_Parms, NULL );
};

// Function KFGame.KFPlayerInput.DebugTargetAdhesion
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::DebugTargetAdhesion ( )
{
	static UFunction* pFnDebugTargetAdhesion = NULL;

	if ( ! pFnDebugTargetAdhesion )
		pFnDebugTargetAdhesion = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.DebugTargetAdhesion" );

	UKFPlayerInput_execDebugTargetAdhesion_Parms DebugTargetAdhesion_Parms;

	this->ProcessEvent ( pFnDebugTargetAdhesion, &DebugTargetAdhesion_Parms, NULL );
};

// Function KFGame.KFPlayerInput.DebugViewAcceleration
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::DebugViewAcceleration ( )
{
	static UFunction* pFnDebugViewAcceleration = NULL;

	if ( ! pFnDebugViewAcceleration )
		pFnDebugViewAcceleration = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.DebugViewAcceleration" );

	UKFPlayerInput_execDebugViewAcceleration_Parms DebugViewAcceleration_Parms;

	this->ProcessEvent ( pFnDebugViewAcceleration, &DebugViewAcceleration_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GetSensitivityByFOV
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::GetSensitivityByFOV ( )
{
	static UFunction* pFnGetSensitivityByFOV = NULL;

	if ( ! pFnGetSensitivityByFOV )
		pFnGetSensitivityByFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetSensitivityByFOV" );

	UKFPlayerInput_execGetSensitivityByFOV_Parms GetSensitivityByFOV_Parms;

	this->ProcessEvent ( pFnGetSensitivityByFOV, &GetSensitivityByFOV_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GetAimAssistViewOffsetFromTarget
// [0x00C24002] 
// Parameters infos:

void UKFPlayerInput::GetAimAssistViewOffsetFromTarget ( )
{
	static UFunction* pFnGetAimAssistViewOffsetFromTarget = NULL;

	if ( ! pFnGetAimAssistViewOffsetFromTarget )
		pFnGetAimAssistViewOffsetFromTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetAimAssistViewOffsetFromTarget" );

	UKFPlayerInput_execGetAimAssistViewOffsetFromTarget_Parms GetAimAssistViewOffsetFromTarget_Parms;

	this->ProcessEvent ( pFnGetAimAssistViewOffsetFromTarget, &GetAimAssistViewOffsetFromTarget_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ApplyTargetFriction
// [0x00820002] 
// Parameters infos:

void UKFPlayerInput::ApplyTargetFriction ( )
{
	static UFunction* pFnApplyTargetFriction = NULL;

	if ( ! pFnApplyTargetFriction )
		pFnApplyTargetFriction = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ApplyTargetFriction" );

	UKFPlayerInput_execApplyTargetFriction_Parms ApplyTargetFriction_Parms;

	this->ProcessEvent ( pFnApplyTargetFriction, &ApplyTargetFriction_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ApplyTargetAdhesion
// [0x00C20002] 
// Parameters infos:

void UKFPlayerInput::ApplyTargetAdhesion ( )
{
	static UFunction* pFnApplyTargetAdhesion = NULL;

	if ( ! pFnApplyTargetAdhesion )
		pFnApplyTargetAdhesion = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ApplyTargetAdhesion" );

	UKFPlayerInput_execApplyTargetAdhesion_Parms ApplyTargetAdhesion_Parms;

	this->ProcessEvent ( pFnApplyTargetAdhesion, &ApplyTargetAdhesion_Parms, NULL );
};

// Function KFGame.KFPlayerInput.IsPawnSprinting
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::IsPawnSprinting ( )
{
	static UFunction* pFnIsPawnSprinting = NULL;

	if ( ! pFnIsPawnSprinting )
		pFnIsPawnSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.IsPawnSprinting" );

	UKFPlayerInput_execIsPawnSprinting_Parms IsPawnSprinting_Parms;

	this->ProcessEvent ( pFnIsPawnSprinting, &IsPawnSprinting_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ApplyForceLookAtPawn
// [0x00C20002] 
// Parameters infos:

void UKFPlayerInput::ApplyForceLookAtPawn ( )
{
	static UFunction* pFnApplyForceLookAtPawn = NULL;

	if ( ! pFnApplyForceLookAtPawn )
		pFnApplyForceLookAtPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ApplyForceLookAtPawn" );

	UKFPlayerInput_execApplyForceLookAtPawn_Parms ApplyForceLookAtPawn_Parms;

	this->ProcessEvent ( pFnApplyForceLookAtPawn, &ApplyForceLookAtPawn_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ApplyAutoTarget
// [0x00C20002] 
// Parameters infos:

void UKFPlayerInput::ApplyAutoTarget ( )
{
	static UFunction* pFnApplyAutoTarget = NULL;

	if ( ! pFnApplyAutoTarget )
		pFnApplyAutoTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ApplyAutoTarget" );

	UKFPlayerInput_execApplyAutoTarget_Parms ApplyAutoTarget_Parms;

	this->ProcessEvent ( pFnApplyAutoTarget, &ApplyAutoTarget_Parms, NULL );
};

// Function KFGame.KFPlayerInput.IsAutoTargetWithinCone
// [0x00C20002] 
// Parameters infos:

void UKFPlayerInput::IsAutoTargetWithinCone ( )
{
	static UFunction* pFnIsAutoTargetWithinCone = NULL;

	if ( ! pFnIsAutoTargetWithinCone )
		pFnIsAutoTargetWithinCone = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.IsAutoTargetWithinCone" );

	UKFPlayerInput_execIsAutoTargetWithinCone_Parms IsAutoTargetWithinCone_Parms;

	this->ProcessEvent ( pFnIsAutoTargetWithinCone, &IsAutoTargetWithinCone_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GetBestAutoTargetLocation
// [0x00C20002] 
// Parameters infos:

void UKFPlayerInput::GetBestAutoTargetLocation ( )
{
	static UFunction* pFnGetBestAutoTargetLocation = NULL;

	if ( ! pFnGetBestAutoTargetLocation )
		pFnGetBestAutoTargetLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetBestAutoTargetLocation" );

	UKFPlayerInput_execGetBestAutoTargetLocation_Parms GetBestAutoTargetLocation_Parms;

	this->ProcessEvent ( pFnGetBestAutoTargetLocation, &GetBestAutoTargetLocation_Parms, NULL );
};

// Function KFGame.KFPlayerInput.InitAutoTarget
// [0x00820002] 
// Parameters infos:

void UKFPlayerInput::InitAutoTarget ( )
{
	static UFunction* pFnInitAutoTarget = NULL;

	if ( ! pFnInitAutoTarget )
		pFnInitAutoTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.InitAutoTarget" );

	UKFPlayerInput_execInitAutoTarget_Parms InitAutoTarget_Parms;

	this->ProcessEvent ( pFnInitAutoTarget, &InitAutoTarget_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ApplyViewSmoothing
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::ApplyViewSmoothing ( )
{
	static UFunction* pFnApplyViewSmoothing = NULL;

	if ( ! pFnApplyViewSmoothing )
		pFnApplyViewSmoothing = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ApplyViewSmoothing" );

	UKFPlayerInput_execApplyViewSmoothing_Parms ApplyViewSmoothing_Parms;

	this->ProcessEvent ( pFnApplyViewSmoothing, &ApplyViewSmoothing_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ApplyingViewAcceleration
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::ApplyingViewAcceleration ( )
{
	static UFunction* pFnApplyingViewAcceleration = NULL;

	if ( ! pFnApplyingViewAcceleration )
		pFnApplyingViewAcceleration = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ApplyingViewAcceleration" );

	UKFPlayerInput_execApplyingViewAcceleration_Parms ApplyingViewAcceleration_Parms;

	this->ProcessEvent ( pFnApplyingViewAcceleration, &ApplyingViewAcceleration_Parms, NULL );
};

// Function KFGame.KFPlayerInput.CanApplyViewAcceleration
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::CanApplyViewAcceleration ( )
{
	static UFunction* pFnCanApplyViewAcceleration = NULL;

	if ( ! pFnCanApplyViewAcceleration )
		pFnCanApplyViewAcceleration = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.CanApplyViewAcceleration" );

	UKFPlayerInput_execCanApplyViewAcceleration_Parms CanApplyViewAcceleration_Parms;

	this->ProcessEvent ( pFnCanApplyViewAcceleration, &CanApplyViewAcceleration_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ApplyViewAcceleration
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::ApplyViewAcceleration ( )
{
	static UFunction* pFnApplyViewAcceleration = NULL;

	if ( ! pFnApplyViewAcceleration )
		pFnApplyViewAcceleration = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ApplyViewAcceleration" );

	UKFPlayerInput_execApplyViewAcceleration_Parms ApplyViewAcceleration_Parms;

	this->ProcessEvent ( pFnApplyViewAcceleration, &ApplyViewAcceleration_Parms, NULL );
};

// Function KFGame.KFPlayerInput.IsDirectingJoyStick
// [0x00820002] 
// Parameters infos:

void UKFPlayerInput::IsDirectingJoyStick ( )
{
	static UFunction* pFnIsDirectingJoyStick = NULL;

	if ( ! pFnIsDirectingJoyStick )
		pFnIsDirectingJoyStick = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.IsDirectingJoyStick" );

	UKFPlayerInput_execIsDirectingJoyStick_Parms IsDirectingJoyStick_Parms;

	this->ProcessEvent ( pFnIsDirectingJoyStick, &IsDirectingJoyStick_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UpdateExtendedSprint
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::UpdateExtendedSprint ( )
{
	static UFunction* pFnUpdateExtendedSprint = NULL;

	if ( ! pFnUpdateExtendedSprint )
		pFnUpdateExtendedSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UpdateExtendedSprint" );

	UKFPlayerInput_execUpdateExtendedSprint_Parms UpdateExtendedSprint_Parms;

	this->ProcessEvent ( pFnUpdateExtendedSprint, &UpdateExtendedSprint_Parms, NULL );
};

// Function KFGame.KFPlayerInput.PreProcessGamepadInput
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::PreProcessGamepadInput ( )
{
	static UFunction* pFnPreProcessGamepadInput = NULL;

	if ( ! pFnPreProcessGamepadInput )
		pFnPreProcessGamepadInput = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.PreProcessGamepadInput" );

	UKFPlayerInput_execPreProcessGamepadInput_Parms PreProcessGamepadInput_Parms;

	this->ProcessEvent ( pFnPreProcessGamepadInput, &PreProcessGamepadInput_Parms, NULL );
};

// Function KFGame.KFPlayerInput.PreProcessInput
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::PreProcessInput ( )
{
	static UFunction* pFnPreProcessInput = NULL;

	if ( ! pFnPreProcessInput )
		pFnPreProcessInput = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.PreProcessInput" );

	UKFPlayerInput_execPreProcessInput_Parms PreProcessInput_Parms;

	this->ProcessEvent ( pFnPreProcessInput, &PreProcessInput_Parms, NULL );
};

// Function KFGame.KFPlayerInput.StopVoiceChat
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::StopVoiceChat ( )
{
	static UFunction* pFnStopVoiceChat = NULL;

	if ( ! pFnStopVoiceChat )
		pFnStopVoiceChat = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.StopVoiceChat" );

	UKFPlayerInput_execStopVoiceChat_Parms StopVoiceChat_Parms;

	this->ProcessEvent ( pFnStopVoiceChat, &StopVoiceChat_Parms, NULL );
};

// Function KFGame.KFPlayerInput.StartVoiceChat
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::StartVoiceChat ( )
{
	static UFunction* pFnStartVoiceChat = NULL;

	if ( ! pFnStartVoiceChat )
		pFnStartVoiceChat = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.StartVoiceChat" );

	UKFPlayerInput_execStartVoiceChat_Parms StartVoiceChat_Parms;

	this->ProcessEvent ( pFnStartVoiceChat, &StartVoiceChat_Parms, NULL );
};

// Function KFGame.KFPlayerInput.InteractTimer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::InteractTimer ( )
{
	static UFunction* pFnInteractTimer = NULL;

	if ( ! pFnInteractTimer )
		pFnInteractTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.InteractTimer" );

	UKFPlayerInput_execInteractTimer_Parms InteractTimer_Parms;

	this->ProcessEvent ( pFnInteractTimer, &InteractTimer_Parms, NULL );
};

// Function KFGame.KFPlayerInput.InteractRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::InteractRelease ( )
{
	static UFunction* pFnInteractRelease = NULL;

	if ( ! pFnInteractRelease )
		pFnInteractRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.InteractRelease" );

	UKFPlayerInput_execInteractRelease_Parms InteractRelease_Parms;

	this->ProcessEvent ( pFnInteractRelease, &InteractRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.Interact
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::Interact ( )
{
	static UFunction* pFnInteract = NULL;

	if ( ! pFnInteract )
		pFnInteract = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.Interact" );

	UKFPlayerInput_execInteract_Parms Interact_Parms;

	this->ProcessEvent ( pFnInteract, &Interact_Parms, NULL );
};

// Function KFGame.KFPlayerInput.OnVoteNoRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::OnVoteNoRelease ( )
{
	static UFunction* pFnOnVoteNoRelease = NULL;

	if ( ! pFnOnVoteNoRelease )
		pFnOnVoteNoRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.OnVoteNoRelease" );

	UKFPlayerInput_execOnVoteNoRelease_Parms OnVoteNoRelease_Parms;

	this->ProcessEvent ( pFnOnVoteNoRelease, &OnVoteNoRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.OnVoteNoPressed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::OnVoteNoPressed ( )
{
	static UFunction* pFnOnVoteNoPressed = NULL;

	if ( ! pFnOnVoteNoPressed )
		pFnOnVoteNoPressed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.OnVoteNoPressed" );

	UKFPlayerInput_execOnVoteNoPressed_Parms OnVoteNoPressed_Parms;

	this->ProcessEvent ( pFnOnVoteNoPressed, &OnVoteNoPressed_Parms, NULL );
};

// Function KFGame.KFPlayerInput.OnVoteYesRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::OnVoteYesRelease ( )
{
	static UFunction* pFnOnVoteYesRelease = NULL;

	if ( ! pFnOnVoteYesRelease )
		pFnOnVoteYesRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.OnVoteYesRelease" );

	UKFPlayerInput_execOnVoteYesRelease_Parms OnVoteYesRelease_Parms;

	this->ProcessEvent ( pFnOnVoteYesRelease, &OnVoteYesRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.OnVoteYesPressed
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::OnVoteYesPressed ( )
{
	static UFunction* pFnOnVoteYesPressed = NULL;

	if ( ! pFnOnVoteYesPressed )
		pFnOnVoteYesPressed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.OnVoteYesPressed" );

	UKFPlayerInput_execOnVoteYesPressed_Parms OnVoteYesPressed_Parms;

	this->ProcessEvent ( pFnOnVoteYesPressed, &OnVoteYesPressed_Parms, NULL );
};

// Function KFGame.KFPlayerInput.HideVoiceComms
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::HideVoiceComms ( )
{
	static UFunction* pFnHideVoiceComms = NULL;

	if ( ! pFnHideVoiceComms )
		pFnHideVoiceComms = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.HideVoiceComms" );

	UKFPlayerInput_execHideVoiceComms_Parms HideVoiceComms_Parms;

	this->ProcessEvent ( pFnHideVoiceComms, &HideVoiceComms_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ShowVoiceComms
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::ShowVoiceComms ( )
{
	static UFunction* pFnShowVoiceComms = NULL;

	if ( ! pFnShowVoiceComms )
		pFnShowVoiceComms = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ShowVoiceComms" );

	UKFPlayerInput_execShowVoiceComms_Parms ShowVoiceComms_Parms;

	this->ProcessEvent ( pFnShowVoiceComms, &ShowVoiceComms_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ChangeZedCamera
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::ChangeZedCamera ( )
{
	static UFunction* pFnChangeZedCamera = NULL;

	if ( ! pFnChangeZedCamera )
		pFnChangeZedCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ChangeZedCamera" );

	UKFPlayerInput_execChangeZedCamera_Parms ChangeZedCamera_Parms;

	this->ProcessEvent ( pFnChangeZedCamera, &ChangeZedCamera_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadDpadUp
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadDpadUp ( )
{
	static UFunction* pFnGamepadDpadUp = NULL;

	if ( ! pFnGamepadDpadUp )
		pFnGamepadDpadUp = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadDpadUp" );

	UKFPlayerInput_execGamepadDpadUp_Parms GamepadDpadUp_Parms;

	this->ProcessEvent ( pFnGamepadDpadUp, &GamepadDpadUp_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadDpadRight
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadDpadRight ( )
{
	static UFunction* pFnGamepadDpadRight = NULL;

	if ( ! pFnGamepadDpadRight )
		pFnGamepadDpadRight = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadDpadRight" );

	UKFPlayerInput_execGamepadDpadRight_Parms GamepadDpadRight_Parms;

	this->ProcessEvent ( pFnGamepadDpadRight, &GamepadDpadRight_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadDpadDown
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadDpadDown ( )
{
	static UFunction* pFnGamepadDpadDown = NULL;

	if ( ! pFnGamepadDpadDown )
		pFnGamepadDpadDown = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadDpadDown" );

	UKFPlayerInput_execGamepadDpadDown_Parms GamepadDpadDown_Parms;

	this->ProcessEvent ( pFnGamepadDpadDown, &GamepadDpadDown_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadDpadLeft
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadDpadLeft ( )
{
	static UFunction* pFnGamepadDpadLeft = NULL;

	if ( ! pFnGamepadDpadLeft )
		pFnGamepadDpadLeft = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadDpadLeft" );

	UKFPlayerInput_execGamepadDpadLeft_Parms GamepadDpadLeft_Parms;

	this->ProcessEvent ( pFnGamepadDpadLeft, &GamepadDpadLeft_Parms, NULL );
};

// Function KFGame.KFPlayerInput.TossMoney
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::TossMoney ( )
{
	static UFunction* pFnTossMoney = NULL;

	if ( ! pFnTossMoney )
		pFnTossMoney = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.TossMoney" );

	UKFPlayerInput_execTossMoney_Parms TossMoney_Parms;

	this->ProcessEvent ( pFnTossMoney, &TossMoney_Parms, NULL );
};

// Function KFGame.KFPlayerInput.QuickHeal
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::QuickHeal ( )
{
	static UFunction* pFnQuickHeal = NULL;

	if ( ! pFnQuickHeal )
		pFnQuickHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.QuickHeal" );

	UKFPlayerInput_execQuickHeal_Parms QuickHeal_Parms;

	this->ProcessEvent ( pFnQuickHeal, &QuickHeal_Parms, NULL );
};

// Function KFGame.KFPlayerInput.QuickEmote
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::QuickEmote ( )
{
	static UFunction* pFnQuickEmote = NULL;

	if ( ! pFnQuickEmote )
		pFnQuickEmote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.QuickEmote" );

	UKFPlayerInput_execQuickEmote_Parms QuickEmote_Parms;

	this->ProcessEvent ( pFnQuickEmote, &QuickEmote_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SwitchWeaponGroup
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SwitchWeaponGroup ( )
{
	static UFunction* pFnSwitchWeaponGroup = NULL;

	if ( ! pFnSwitchWeaponGroup )
		pFnSwitchWeaponGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SwitchWeaponGroup" );

	UKFPlayerInput_execSwitchWeaponGroup_Parms SwitchWeaponGroup_Parms;

	this->ProcessEvent ( pFnSwitchWeaponGroup, &SwitchWeaponGroup_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadWeaponMenuTimer
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::GamepadWeaponMenuTimer ( )
{
	static UFunction* pFnGamepadWeaponMenuTimer = NULL;

	if ( ! pFnGamepadWeaponMenuTimer )
		pFnGamepadWeaponMenuTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadWeaponMenuTimer" );

	UKFPlayerInput_execGamepadWeaponMenuTimer_Parms GamepadWeaponMenuTimer_Parms;

	this->ProcessEvent ( pFnGamepadWeaponMenuTimer, &GamepadWeaponMenuTimer_Parms, NULL );
};

// Function KFGame.KFPlayerInput.CheckForWeaponMenuTimerInterrupt
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::CheckForWeaponMenuTimerInterrupt ( )
{
	static UFunction* pFnCheckForWeaponMenuTimerInterrupt = NULL;

	if ( ! pFnCheckForWeaponMenuTimerInterrupt )
		pFnCheckForWeaponMenuTimerInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.CheckForWeaponMenuTimerInterrupt" );

	UKFPlayerInput_execCheckForWeaponMenuTimerInterrupt_Parms CheckForWeaponMenuTimerInterrupt_Parms;

	this->ProcessEvent ( pFnCheckForWeaponMenuTimerInterrupt, &CheckForWeaponMenuTimerInterrupt_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ReleaseGamepadWeaponSelect
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::ReleaseGamepadWeaponSelect ( )
{
	static UFunction* pFnReleaseGamepadWeaponSelect = NULL;

	if ( ! pFnReleaseGamepadWeaponSelect )
		pFnReleaseGamepadWeaponSelect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ReleaseGamepadWeaponSelect" );

	UKFPlayerInput_execReleaseGamepadWeaponSelect_Parms ReleaseGamepadWeaponSelect_Parms;

	this->ProcessEvent ( pFnReleaseGamepadWeaponSelect, &ReleaseGamepadWeaponSelect_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadWeaponSelect
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadWeaponSelect ( )
{
	static UFunction* pFnGamepadWeaponSelect = NULL;

	if ( ! pFnGamepadWeaponSelect )
		pFnGamepadWeaponSelect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadWeaponSelect" );

	UKFPlayerInput_execGamepadWeaponSelect_Parms GamepadWeaponSelect_Parms;

	this->ProcessEvent ( pFnGamepadWeaponSelect, &GamepadWeaponSelect_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SelectLastWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SelectLastWeapon ( )
{
	static UFunction* pFnSelectLastWeapon = NULL;

	if ( ! pFnSelectLastWeapon )
		pFnSelectLastWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SelectLastWeapon" );

	UKFPlayerInput_execSelectLastWeapon_Parms SelectLastWeapon_Parms;

	this->ProcessEvent ( pFnSelectLastWeapon, &SelectLastWeapon_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SelectPrevWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SelectPrevWeapon ( )
{
	static UFunction* pFnSelectPrevWeapon = NULL;

	if ( ! pFnSelectPrevWeapon )
		pFnSelectPrevWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SelectPrevWeapon" );

	UKFPlayerInput_execSelectPrevWeapon_Parms SelectPrevWeapon_Parms;

	this->ProcessEvent ( pFnSelectPrevWeapon, &SelectPrevWeapon_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SelectNextWeapon
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SelectNextWeapon ( )
{
	static UFunction* pFnSelectNextWeapon = NULL;

	if ( ! pFnSelectNextWeapon )
		pFnSelectNextWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SelectNextWeapon" );

	UKFPlayerInput_execSelectNextWeapon_Parms SelectNextWeapon_Parms;

	this->ProcessEvent ( pFnSelectNextWeapon, &SelectNextWeapon_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SwitchFireRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SwitchFireRelease ( )
{
	static UFunction* pFnSwitchFireRelease = NULL;

	if ( ! pFnSwitchFireRelease )
		pFnSwitchFireRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SwitchFireRelease" );

	UKFPlayerInput_execSwitchFireRelease_Parms SwitchFireRelease_Parms;

	this->ProcessEvent ( pFnSwitchFireRelease, &SwitchFireRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SwitchFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SwitchFire ( )
{
	static UFunction* pFnSwitchFire = NULL;

	if ( ! pFnSwitchFire )
		pFnSwitchFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SwitchFire" );

	UKFPlayerInput_execSwitchFire_Parms SwitchFire_Parms;

	this->ProcessEvent ( pFnSwitchFire, &SwitchFire_Parms, NULL );
};

// Function KFGame.KFPlayerInput.CustomStopFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::CustomStopFire ( )
{
	static UFunction* pFnCustomStopFire = NULL;

	if ( ! pFnCustomStopFire )
		pFnCustomStopFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.CustomStopFire" );

	UKFPlayerInput_execCustomStopFire_Parms CustomStopFire_Parms;

	this->ProcessEvent ( pFnCustomStopFire, &CustomStopFire_Parms, NULL );
};

// Function KFGame.KFPlayerInput.CustomStartFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::CustomStartFire ( )
{
	static UFunction* pFnCustomStartFire = NULL;

	if ( ! pFnCustomStartFire )
		pFnCustomStartFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.CustomStartFire" );

	UKFPlayerInput_execCustomStartFire_Parms CustomStartFire_Parms;

	this->ProcessEvent ( pFnCustomStartFire, &CustomStartFire_Parms, NULL );
};

// Function KFGame.KFPlayerInput.InternalToggleNightVision
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::InternalToggleNightVision ( )
{
	static UFunction* pFnInternalToggleNightVision = NULL;

	if ( ! pFnInternalToggleNightVision )
		pFnInternalToggleNightVision = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.InternalToggleNightVision" );

	UKFPlayerInput_execInternalToggleNightVision_Parms InternalToggleNightVision_Parms;

	this->ProcessEvent ( pFnInternalToggleNightVision, &InternalToggleNightVision_Parms, NULL );
};

// Function KFGame.KFPlayerInput.InternalToggleFlashlight
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::InternalToggleFlashlight ( )
{
	static UFunction* pFnInternalToggleFlashlight = NULL;

	if ( ! pFnInternalToggleFlashlight )
		pFnInternalToggleFlashlight = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.InternalToggleFlashlight" );

	UKFPlayerInput_execInternalToggleFlashlight_Parms InternalToggleFlashlight_Parms;

	this->ProcessEvent ( pFnInternalToggleFlashlight, &InternalToggleFlashlight_Parms, NULL );
};

// Function KFGame.KFPlayerInput.FlashlightTimer
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::FlashlightTimer ( )
{
	static UFunction* pFnFlashlightTimer = NULL;

	if ( ! pFnFlashlightTimer )
		pFnFlashlightTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.FlashlightTimer" );

	UKFPlayerInput_execFlashlightTimer_Parms FlashlightTimer_Parms;

	this->ProcessEvent ( pFnFlashlightTimer, &FlashlightTimer_Parms, NULL );
};

// Function KFGame.KFPlayerInput.FlashlightRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::FlashlightRelease ( )
{
	static UFunction* pFnFlashlightRelease = NULL;

	if ( ! pFnFlashlightRelease )
		pFnFlashlightRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.FlashlightRelease" );

	UKFPlayerInput_execFlashlightRelease_Parms FlashlightRelease_Parms;

	this->ProcessEvent ( pFnFlashlightRelease, &FlashlightRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ToggleFlashlight
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::ToggleFlashlight ( )
{
	static UFunction* pFnToggleFlashlight = NULL;

	if ( ! pFnToggleFlashlight )
		pFnToggleFlashlight = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ToggleFlashlight" );

	UKFPlayerInput_execToggleFlashlight_Parms ToggleFlashlight_Parms;

	this->ProcessEvent ( pFnToggleFlashlight, &ToggleFlashlight_Parms, NULL );
};

// Function KFGame.KFPlayerInput.IronSightsRelease
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::IronSightsRelease ( )
{
	static UFunction* pFnIronSightsRelease = NULL;

	if ( ! pFnIronSightsRelease )
		pFnIronSightsRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.IronSightsRelease" );

	UKFPlayerInput_execIronSightsRelease_Parms IronSightsRelease_Parms;

	this->ProcessEvent ( pFnIronSightsRelease, &IronSightsRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.IronSights
// [0x00024302] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::IronSights ( )
{
	static UFunction* pFnIronSights = NULL;

	if ( ! pFnIronSights )
		pFnIronSights = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.IronSights" );

	UKFPlayerInput_execIronSights_Parms IronSights_Parms;

	this->ProcessEvent ( pFnIronSights, &IronSights_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ToggleCrouch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::ToggleCrouch ( )
{
	static UFunction* pFnToggleCrouch = NULL;

	if ( ! pFnToggleCrouch )
		pFnToggleCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ToggleCrouch" );

	UKFPlayerInput_execToggleCrouch_Parms ToggleCrouch_Parms;

	this->ProcessEvent ( pFnToggleCrouch, &ToggleCrouch_Parms, NULL );
};

// Function KFGame.KFPlayerInput.StopCrouch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::StopCrouch ( )
{
	static UFunction* pFnStopCrouch = NULL;

	if ( ! pFnStopCrouch )
		pFnStopCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.StopCrouch" );

	UKFPlayerInput_execStopCrouch_Parms StopCrouch_Parms;

	this->ProcessEvent ( pFnStopCrouch, &StopCrouch_Parms, NULL );
};

// Function KFGame.KFPlayerInput.StartCrouch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::StartCrouch ( )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.StartCrouch" );

	UKFPlayerInput_execStartCrouch_Parms StartCrouch_Parms;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function KFGame.KFPlayerInput.Jump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::Jump ( )
{
	static UFunction* pFnJump = NULL;

	if ( ! pFnJump )
		pFnJump = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.Jump" );

	UKFPlayerInput_execJump_Parms Jump_Parms;

	this->ProcessEvent ( pFnJump, &Jump_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadSwitchFire
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadSwitchFire ( )
{
	static UFunction* pFnGamepadSwitchFire = NULL;

	if ( ! pFnGamepadSwitchFire )
		pFnGamepadSwitchFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadSwitchFire" );

	UKFPlayerInput_execGamepadSwitchFire_Parms GamepadSwitchFire_Parms;

	this->ProcessEvent ( pFnGamepadSwitchFire, &GamepadSwitchFire_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadJumpTimer
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::GamepadJumpTimer ( )
{
	static UFunction* pFnGamepadJumpTimer = NULL;

	if ( ! pFnGamepadJumpTimer )
		pFnGamepadJumpTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadJumpTimer" );

	UKFPlayerInput_execGamepadJumpTimer_Parms GamepadJumpTimer_Parms;

	this->ProcessEvent ( pFnGamepadJumpTimer, &GamepadJumpTimer_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadJumpRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadJumpRelease ( )
{
	static UFunction* pFnGamepadJumpRelease = NULL;

	if ( ! pFnGamepadJumpRelease )
		pFnGamepadJumpRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadJumpRelease" );

	UKFPlayerInput_execGamepadJumpRelease_Parms GamepadJumpRelease_Parms;

	this->ProcessEvent ( pFnGamepadJumpRelease, &GamepadJumpRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadJump
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadJump ( )
{
	static UFunction* pFnGamepadJump = NULL;

	if ( ! pFnGamepadJump )
		pFnGamepadJump = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadJump" );

	UKFPlayerInput_execGamepadJump_Parms GamepadJump_Parms;

	this->ProcessEvent ( pFnGamepadJump, &GamepadJump_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadCrouchTimer
// [0x00020000] 
// Parameters infos:

void UKFPlayerInput::GamepadCrouchTimer ( )
{
	static UFunction* pFnGamepadCrouchTimer = NULL;

	if ( ! pFnGamepadCrouchTimer )
		pFnGamepadCrouchTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadCrouchTimer" );

	UKFPlayerInput_execGamepadCrouchTimer_Parms GamepadCrouchTimer_Parms;

	this->ProcessEvent ( pFnGamepadCrouchTimer, &GamepadCrouchTimer_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadCrouchRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadCrouchRelease ( )
{
	static UFunction* pFnGamepadCrouchRelease = NULL;

	if ( ! pFnGamepadCrouchRelease )
		pFnGamepadCrouchRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadCrouchRelease" );

	UKFPlayerInput_execGamepadCrouchRelease_Parms GamepadCrouchRelease_Parms;

	this->ProcessEvent ( pFnGamepadCrouchRelease, &GamepadCrouchRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadCrouch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadCrouch ( )
{
	static UFunction* pFnGamepadCrouch = NULL;

	if ( ! pFnGamepadCrouch )
		pFnGamepadCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadCrouch" );

	UKFPlayerInput_execGamepadCrouch_Parms GamepadCrouch_Parms;

	this->ProcessEvent ( pFnGamepadCrouch, &GamepadCrouch_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadReloadTimer
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::GamepadReloadTimer ( )
{
	static UFunction* pFnGamepadReloadTimer = NULL;

	if ( ! pFnGamepadReloadTimer )
		pFnGamepadReloadTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadReloadTimer" );

	UKFPlayerInput_execGamepadReloadTimer_Parms GamepadReloadTimer_Parms;

	this->ProcessEvent ( pFnGamepadReloadTimer, &GamepadReloadTimer_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadReloadRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadReloadRelease ( )
{
	static UFunction* pFnGamepadReloadRelease = NULL;

	if ( ! pFnGamepadReloadRelease )
		pFnGamepadReloadRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadReloadRelease" );

	UKFPlayerInput_execGamepadReloadRelease_Parms GamepadReloadRelease_Parms;

	this->ProcessEvent ( pFnGamepadReloadRelease, &GamepadReloadRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadReload
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadReload ( )
{
	static UFunction* pFnGamepadReload = NULL;

	if ( ! pFnGamepadReload )
		pFnGamepadReload = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadReload" );

	UKFPlayerInput_execGamepadReload_Parms GamepadReload_Parms;

	this->ProcessEvent ( pFnGamepadReload, &GamepadReload_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ShouldActivateGamepadSprint
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::ShouldActivateGamepadSprint ( )
{
	static UFunction* pFnShouldActivateGamepadSprint = NULL;

	if ( ! pFnShouldActivateGamepadSprint )
		pFnShouldActivateGamepadSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ShouldActivateGamepadSprint" );

	UKFPlayerInput_execShouldActivateGamepadSprint_Parms ShouldActivateGamepadSprint_Parms;

	this->ProcessEvent ( pFnShouldActivateGamepadSprint, &ShouldActivateGamepadSprint_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GetLeftAnalogDistance
// [0x00820002] 
// Parameters infos:

void UKFPlayerInput::GetLeftAnalogDistance ( )
{
	static UFunction* pFnGetLeftAnalogDistance = NULL;

	if ( ! pFnGetLeftAnalogDistance )
		pFnGetLeftAnalogDistance = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetLeftAnalogDistance" );

	UKFPlayerInput_execGetLeftAnalogDistance_Parms GetLeftAnalogDistance_Parms;

	this->ProcessEvent ( pFnGetLeftAnalogDistance, &GetLeftAnalogDistance_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadSprintRelease
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadSprintRelease ( )
{
	static UFunction* pFnGamepadSprintRelease = NULL;

	if ( ! pFnGamepadSprintRelease )
		pFnGamepadSprintRelease = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadSprintRelease" );

	UKFPlayerInput_execGamepadSprintRelease_Parms GamepadSprintRelease_Parms;

	this->ProcessEvent ( pFnGamepadSprintRelease, &GamepadSprintRelease_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadSprintTimer
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::GamepadSprintTimer ( )
{
	static UFunction* pFnGamepadSprintTimer = NULL;

	if ( ! pFnGamepadSprintTimer )
		pFnGamepadSprintTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadSprintTimer" );

	UKFPlayerInput_execGamepadSprintTimer_Parms GamepadSprintTimer_Parms;

	this->ProcessEvent ( pFnGamepadSprintTimer, &GamepadSprintTimer_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GamepadSprint
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::GamepadSprint ( )
{
	static UFunction* pFnGamepadSprint = NULL;

	if ( ! pFnGamepadSprint )
		pFnGamepadSprint = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GamepadSprint" );

	UKFPlayerInput_execGamepadSprint_Parms GamepadSprint_Parms;

	this->ProcessEvent ( pFnGamepadSprint, &GamepadSprint_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SwapPositions
// [0x00820002] 
// Parameters infos:

void UKFPlayerInput::SwapPositions ( )
{
	static UFunction* pFnSwapPositions = NULL;

	if ( ! pFnSwapPositions )
		pFnSwapPositions = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SwapPositions" );

	UKFPlayerInput_execSwapPositions_Parms SwapPositions_Parms;

	this->ProcessEvent ( pFnSwapPositions, &SwapPositions_Parms, NULL );
};

// Function KFGame.KFPlayerInput.BindKey
// [0x00820002] 
// Parameters infos:

void UKFPlayerInput::BindKey ( )
{
	static UFunction* pFnBindKey = NULL;

	if ( ! pFnBindKey )
		pFnBindKey = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.BindKey" );

	UKFPlayerInput_execBindKey_Parms BindKey_Parms;

	this->ProcessEvent ( pFnBindKey, &BindKey_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ReInitializeControlsUI
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFPlayerInput::eventReInitializeControlsUI ( )
{
	static UFunction* pFnReInitializeControlsUI = NULL;

	if ( ! pFnReInitializeControlsUI )
		pFnReInitializeControlsUI = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ReInitializeControlsUI" );

	UKFPlayerInput_eventReInitializeControlsUI_Parms ReInitializeControlsUI_Parms;

	this->ProcessEvent ( pFnReInitializeControlsUI, &ReInitializeControlsUI_Parms, NULL );
};

// Function KFGame.KFPlayerInput.AdjustMouseSensitivity
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::AdjustMouseSensitivity ( )
{
	static UFunction* pFnAdjustMouseSensitivity = NULL;

	if ( ! pFnAdjustMouseSensitivity )
		pFnAdjustMouseSensitivity = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.AdjustMouseSensitivity" );

	UKFPlayerInput_execAdjustMouseSensitivity_Parms AdjustMouseSensitivity_Parms;

	this->ProcessEvent ( pFnAdjustMouseSensitivity, &AdjustMouseSensitivity_Parms, NULL );
};

// Function KFGame.KFPlayerInput.PlayerInput
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UKFPlayerInput::eventPlayerInput ( )
{
	static UFunction* pFnPlayerInput = NULL;

	if ( ! pFnPlayerInput )
		pFnPlayerInput = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.PlayerInput" );

	UKFPlayerInput_eventPlayerInput_Parms PlayerInput_Parms;

	this->ProcessEvent ( pFnPlayerInput, &PlayerInput_Parms, NULL );
};

// Function KFGame.KFPlayerInput.CheckForDoubleClickMove
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::CheckForDoubleClickMove ( )
{
	static UFunction* pFnCheckForDoubleClickMove = NULL;

	if ( ! pFnCheckForDoubleClickMove )
		pFnCheckForDoubleClickMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.CheckForDoubleClickMove" );

	UKFPlayerInput_execCheckForDoubleClickMove_Parms CheckForDoubleClickMove_Parms;

	this->ProcessEvent ( pFnCheckForDoubleClickMove, &CheckForDoubleClickMove_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SetZoomedSensitivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SetZoomedSensitivity ( )
{
	static UFunction* pFnSetZoomedSensitivity = NULL;

	if ( ! pFnSetZoomedSensitivity )
		pFnSetZoomedSensitivity = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SetZoomedSensitivity" );

	UKFPlayerInput_execSetZoomedSensitivity_Parms SetZoomedSensitivity_Parms;

	this->ProcessEvent ( pFnSetZoomedSensitivity, &SetZoomedSensitivity_Parms, NULL );
};

// Function KFGame.KFPlayerInput.SetSensitivity
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void UKFPlayerInput::SetSensitivity ( )
{
	static UFunction* pFnSetSensitivity = NULL;

	if ( ! pFnSetSensitivity )
		pFnSetSensitivity = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SetSensitivity" );

	UKFPlayerInput_execSetSensitivity_Parms SetSensitivity_Parms;

	this->ProcessEvent ( pFnSetSensitivity, &SetSensitivity_Parms, NULL );
};

// Function KFGame.KFPlayerInput.UpdatePushToTalk
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::UpdatePushToTalk ( )
{
	static UFunction* pFnUpdatePushToTalk = NULL;

	if ( ! pFnUpdatePushToTalk )
		pFnUpdatePushToTalk = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.UpdatePushToTalk" );

	UKFPlayerInput_execUpdatePushToTalk_Parms UpdatePushToTalk_Parms;

	this->ProcessEvent ( pFnUpdatePushToTalk, &UpdatePushToTalk_Parms, NULL );
};

// Function KFGame.KFPlayerInput.ClientInitInputSystem
// [0x00020002] 
// Parameters infos:

void UKFPlayerInput::ClientInitInputSystem ( )
{
	static UFunction* pFnClientInitInputSystem = NULL;

	if ( ! pFnClientInitInputSystem )
		pFnClientInitInputSystem = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ClientInitInputSystem" );

	UKFPlayerInput_execClientInitInputSystem_Parms ClientInitInputSystem_Parms;

	this->ProcessEvent ( pFnClientInitInputSystem, &ClientInitInputSystem_Parms, NULL );
};

// Function KFGame.KFPlayerInput.DisplayDebug
// [0x00420102] 
// Parameters infos:

void UKFPlayerInput::DisplayDebug ( )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.DisplayDebug" );

	UKFPlayerInput_execDisplayDebug_Parms DisplayDebug_Parms;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );
};

// Function KFGame.KFPlayerInput.FilterButtonInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFPlayerInput::eventFilterButtonInput ( )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.FilterButtonInput" );

	UKFPlayerInput_eventFilterButtonInput_Parms FilterButtonInput_Parms;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );
};

// Function KFGame.KFPlayerInput.GetGameBindableAction
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFPlayerInput::GetGameBindableAction ( )
{
	static UFunction* pFnGetGameBindableAction = NULL;

	if ( ! pFnGetGameBindableAction )
		pFnGetGameBindableAction = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetGameBindableAction" );

	UKFPlayerInput_execGetGameBindableAction_Parms GetGameBindableAction_Parms;

	pFnGetGameBindableAction->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetGameBindableAction, &GetGameBindableAction_Parms, NULL );

	pFnGetGameBindableAction->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerInput.GetBindDisplayName
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFPlayerInput::GetBindDisplayName ( )
{
	static UFunction* pFnGetBindDisplayName = NULL;

	if ( ! pFnGetBindDisplayName )
		pFnGetBindDisplayName = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetBindDisplayName" );

	UKFPlayerInput_execGetBindDisplayName_Parms GetBindDisplayName_Parms;

	pFnGetBindDisplayName->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBindDisplayName, &GetBindDisplayName_Parms, NULL );

	pFnGetBindDisplayName->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerInput.SetGamepadLayout
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFPlayerInput::SetGamepadLayout ( )
{
	static UFunction* pFnSetGamepadLayout = NULL;

	if ( ! pFnSetGamepadLayout )
		pFnSetGamepadLayout = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SetGamepadLayout" );

	UKFPlayerInput_execSetGamepadLayout_Parms SetGamepadLayout_Parms;

	pFnSetGamepadLayout->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetGamepadLayout, &SetGamepadLayout_Parms, NULL );

	pFnSetGamepadLayout->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerInput.ResetKeysToDefault
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFPlayerInput::ResetKeysToDefault ( )
{
	static UFunction* pFnResetKeysToDefault = NULL;

	if ( ! pFnResetKeysToDefault )
		pFnResetKeysToDefault = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.ResetKeysToDefault" );

	UKFPlayerInput_execResetKeysToDefault_Parms ResetKeysToDefault_Parms;

	pFnResetKeysToDefault->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetKeysToDefault, &ResetKeysToDefault_Parms, NULL );

	pFnResetKeysToDefault->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerInput.GetBindingsIndex
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFPlayerInput::GetBindingsIndex ( )
{
	static UFunction* pFnGetBindingsIndex = NULL;

	if ( ! pFnGetBindingsIndex )
		pFnGetBindingsIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetBindingsIndex" );

	UKFPlayerInput_execGetBindingsIndex_Parms GetBindingsIndex_Parms;

	pFnGetBindingsIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetBindingsIndex, &GetBindingsIndex_Parms, NULL );

	pFnGetBindingsIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerInput.RemoveCommandFromBind
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFPlayerInput::RemoveCommandFromBind ( )
{
	static UFunction* pFnRemoveCommandFromBind = NULL;

	if ( ! pFnRemoveCommandFromBind )
		pFnRemoveCommandFromBind = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.RemoveCommandFromBind" );

	UKFPlayerInput_execRemoveCommandFromBind_Parms RemoveCommandFromBind_Parms;

	pFnRemoveCommandFromBind->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveCommandFromBind, &RemoveCommandFromBind_Parms, NULL );

	pFnRemoveCommandFromBind->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerInput.SetKeyBind
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFPlayerInput::SetKeyBind ( )
{
	static UFunction* pFnSetKeyBind = NULL;

	if ( ! pFnSetKeyBind )
		pFnSetKeyBind = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SetKeyBind" );

	UKFPlayerInput_execSetKeyBind_Parms SetKeyBind_Parms;

	pFnSetKeyBind->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetKeyBind, &SetKeyBind_Parms, NULL );

	pFnSetKeyBind->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerInput.SwapBind
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFPlayerInput::SwapBind ( )
{
	static UFunction* pFnSwapBind = NULL;

	if ( ! pFnSwapBind )
		pFnSwapBind = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.SwapBind" );

	UKFPlayerInput_execSwapBind_Parms SwapBind_Parms;

	pFnSwapBind->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwapBind, &SwapBind_Parms, NULL );

	pFnSwapBind->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerInput.GetKeyBindFromCommand
// [0x00424400] ( FUNC_Native )
// Parameters infos:

void UKFPlayerInput::GetKeyBindFromCommand ( )
{
	static UFunction* pFnGetKeyBindFromCommand = NULL;

	if ( ! pFnGetKeyBindFromCommand )
		pFnGetKeyBindFromCommand = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerInput.GetKeyBindFromCommand" );

	UKFPlayerInput_execGetKeyBindFromCommand_Parms GetKeyBindFromCommand_Parms;

	pFnGetKeyBindFromCommand->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetKeyBindFromCommand, &GetKeyBindFromCommand_Parms, NULL );

	pFnGetKeyBindFromCommand->FunctionFlags |= 0x400;
};

// Function KFGame.KFExplosionLightComponent.OnLightFinished
// [0x00120000] 
// Parameters infos:

void UKFExplosionLightComponent::OnLightFinished ( )
{
	static UFunction* pFnOnLightFinished = NULL;

	if ( ! pFnOnLightFinished )
		pFnOnLightFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionLightComponent.OnLightFinished" );

	UKFExplosionLightComponent_execOnLightFinished_Parms OnLightFinished_Parms;

	this->ProcessEvent ( pFnOnLightFinished, &OnLightFinished_Parms, NULL );
};

// Function KFGame.KFExplosionLightComponent.ResetLight
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFExplosionLightComponent::ResetLight ( )
{
	static UFunction* pFnResetLight = NULL;

	if ( ! pFnResetLight )
		pFnResetLight = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionLightComponent.ResetLight" );

	UKFExplosionLightComponent_execResetLight_Parms ResetLight_Parms;

	pFnResetLight->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnResetLight, &ResetLight_Parms, NULL );

	pFnResetLight->FunctionFlags |= 0x400;
};

// Function KFGame.KFExplosionLightComponent.SetTemplate
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFExplosionLightComponent::SetTemplate ( )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionLightComponent.SetTemplate" );

	UKFExplosionLightComponent_execSetTemplate_Parms SetTemplate_Parms;

	pFnSetTemplate->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );

	pFnSetTemplate->FunctionFlags |= 0x400;
};

// Function KFGame.KFFlashlightAttachment.ChooseBestFlashlight
// [0x00020102] 
// Parameters infos:

void UKFFlashlightAttachment::ChooseBestFlashlight ( )
{
	static UFunction* pFnChooseBestFlashlight = NULL;

	if ( ! pFnChooseBestFlashlight )
		pFnChooseBestFlashlight = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.ChooseBestFlashlight" );

	UKFFlashlightAttachment_execChooseBestFlashlight_Parms ChooseBestFlashlight_Parms;

	this->ProcessEvent ( pFnChooseBestFlashlight, &ChooseBestFlashlight_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.ChooseBestFlashlightTimer
// [0x00020102] 
// Parameters infos:

void UKFFlashlightAttachment::ChooseBestFlashlightTimer ( )
{
	static UFunction* pFnChooseBestFlashlightTimer = NULL;

	if ( ! pFnChooseBestFlashlightTimer )
		pFnChooseBestFlashlightTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.ChooseBestFlashlightTimer" );

	UKFFlashlightAttachment_execChooseBestFlashlightTimer_Parms ChooseBestFlashlightTimer_Parms;

	this->ProcessEvent ( pFnChooseBestFlashlightTimer, &ChooseBestFlashlightTimer_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.UpdateFlashlightFor
// [0x00020102] 
// Parameters infos:

void UKFFlashlightAttachment::UpdateFlashlightFor ( )
{
	static UFunction* pFnUpdateFlashlightFor = NULL;

	if ( ! pFnUpdateFlashlightFor )
		pFnUpdateFlashlightFor = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.UpdateFlashlightFor" );

	UKFFlashlightAttachment_execUpdateFlashlightFor_Parms UpdateFlashlightFor_Parms;

	this->ProcessEvent ( pFnUpdateFlashlightFor, &UpdateFlashlightFor_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.SetFirstPersonVisibility
// [0x00020102] 
// Parameters infos:

void UKFFlashlightAttachment::SetFirstPersonVisibility ( )
{
	static UFunction* pFnSetFirstPersonVisibility = NULL;

	if ( ! pFnSetFirstPersonVisibility )
		pFnSetFirstPersonVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.SetFirstPersonVisibility" );

	UKFFlashlightAttachment_execSetFirstPersonVisibility_Parms SetFirstPersonVisibility_Parms;

	this->ProcessEvent ( pFnSetFirstPersonVisibility, &SetFirstPersonVisibility_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.IsOwnerFirstPerson
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFFlashlightAttachment::IsOwnerFirstPerson ( )
{
	static UFunction* pFnIsOwnerFirstPerson = NULL;

	if ( ! pFnIsOwnerFirstPerson )
		pFnIsOwnerFirstPerson = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.IsOwnerFirstPerson" );

	UKFFlashlightAttachment_execIsOwnerFirstPerson_Parms IsOwnerFirstPerson_Parms;

	this->ProcessEvent ( pFnIsOwnerFirstPerson, &IsOwnerFirstPerson_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.SetLightingChannels
// [0x00420102] 
// Parameters infos:

void UKFFlashlightAttachment::SetLightingChannels ( )
{
	static UFunction* pFnSetLightingChannels = NULL;

	if ( ! pFnSetLightingChannels )
		pFnSetLightingChannels = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.SetLightingChannels" );

	UKFFlashlightAttachment_execSetLightingChannels_Parms SetLightingChannels_Parms;

	this->ProcessEvent ( pFnSetLightingChannels, &SetLightingChannels_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.OwnerDied
// [0x00020102] 
// Parameters infos:

void UKFFlashlightAttachment::OwnerDied ( )
{
	static UFunction* pFnOwnerDied = NULL;

	if ( ! pFnOwnerDied )
		pFnOwnerDied = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.OwnerDied" );

	UKFFlashlightAttachment_execOwnerDied_Parms OwnerDied_Parms;

	this->ProcessEvent ( pFnOwnerDied, &OwnerDied_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.AttachFlashlightComponent
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFFlashlightAttachment::AttachFlashlightComponent ( )
{
	static UFunction* pFnAttachFlashlightComponent = NULL;

	if ( ! pFnAttachFlashlightComponent )
		pFnAttachFlashlightComponent = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.AttachFlashlightComponent" );

	UKFFlashlightAttachment_execAttachFlashlightComponent_Parms AttachFlashlightComponent_Parms;

	this->ProcessEvent ( pFnAttachFlashlightComponent, &AttachFlashlightComponent_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.InitializeLight
// [0x00080002] 
// Parameters infos:

void UKFFlashlightAttachment::InitializeLight ( )
{
	static UFunction* pFnInitializeLight = NULL;

	if ( ! pFnInitializeLight )
		pFnInitializeLight = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.InitializeLight" );

	UKFFlashlightAttachment_execInitializeLight_Parms InitializeLight_Parms;

	this->ProcessEvent ( pFnInitializeLight, &InitializeLight_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.Timer_WarnAI
// [0x00820002] 
// Parameters infos:

void UKFFlashlightAttachment::Timer_WarnAI ( )
{
	static UFunction* pFnTimer_WarnAI = NULL;

	if ( ! pFnTimer_WarnAI )
		pFnTimer_WarnAI = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.Timer_WarnAI" );

	UKFFlashlightAttachment_execTimer_WarnAI_Parms Timer_WarnAI_Parms;

	this->ProcessEvent ( pFnTimer_WarnAI, &Timer_WarnAI_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.SetEnabled
// [0x00080002] 
// Parameters infos:

void UKFFlashlightAttachment::SetEnabled ( )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.SetEnabled" );

	UKFFlashlightAttachment_execSetEnabled_Parms SetEnabled_Parms;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.DetachFlashlight
// [0x00020002] 
// Parameters infos:

void UKFFlashlightAttachment::DetachFlashlight ( )
{
	static UFunction* pFnDetachFlashlight = NULL;

	if ( ! pFnDetachFlashlight )
		pFnDetachFlashlight = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.DetachFlashlight" );

	UKFFlashlightAttachment_execDetachFlashlight_Parms DetachFlashlight_Parms;

	this->ProcessEvent ( pFnDetachFlashlight, &DetachFlashlight_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.Reattach
// [0x00020002] 
// Parameters infos:

void UKFFlashlightAttachment::Reattach ( )
{
	static UFunction* pFnReattach = NULL;

	if ( ! pFnReattach )
		pFnReattach = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.Reattach" );

	UKFFlashlightAttachment_execReattach_Parms Reattach_Parms;

	this->ProcessEvent ( pFnReattach, &Reattach_Parms, NULL );
};

// Function KFGame.KFFlashlightAttachment.AttachFlashlight
// [0x00024002] 
// Parameters infos:

void UKFFlashlightAttachment::AttachFlashlight ( )
{
	static UFunction* pFnAttachFlashlight = NULL;

	if ( ! pFnAttachFlashlight )
		pFnAttachFlashlight = UObject::FindObject< UFunction > ( "Function KFGame.KFFlashlightAttachment.AttachFlashlight" );

	UKFFlashlightAttachment_execAttachFlashlight_Parms AttachFlashlight_Parms;

	this->ProcessEvent ( pFnAttachFlashlight, &AttachFlashlight_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.Reset
// [0x00020102] 
// Parameters infos:

void AKFFracturedMeshActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.Reset" );

	AKFFracturedMeshActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.SimulateRemoteHit
// [0x00420102] 
// Parameters infos:

void AKFFracturedMeshActor::SimulateRemoteHit ( )
{
	static UFunction* pFnSimulateRemoteHit = NULL;

	if ( ! pFnSimulateRemoteHit )
		pFnSimulateRemoteHit = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.SimulateRemoteHit" );

	AKFFracturedMeshActor_execSimulateRemoteHit_Parms SimulateRemoteHit_Parms;

	this->ProcessEvent ( pFnSimulateRemoteHit, &SimulateRemoteHit_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.PlayBreakOffAllParticles
// [0x00820102] 
// Parameters infos:

void AKFFracturedMeshActor::PlayBreakOffAllParticles ( )
{
	static UFunction* pFnPlayBreakOffAllParticles = NULL;

	if ( ! pFnPlayBreakOffAllParticles )
		pFnPlayBreakOffAllParticles = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.PlayBreakOffAllParticles" );

	AKFFracturedMeshActor_execPlayBreakOffAllParticles_Parms PlayBreakOffAllParticles_Parms;

	this->ProcessEvent ( pFnPlayBreakOffAllParticles, &PlayBreakOffAllParticles_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.BreakOffPartsInRadius
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshActor::eventBreakOffPartsInRadius ( )
{
	static UFunction* pFnBreakOffPartsInRadius = NULL;

	if ( ! pFnBreakOffPartsInRadius )
		pFnBreakOffPartsInRadius = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.BreakOffPartsInRadius" );

	AKFFracturedMeshActor_eventBreakOffPartsInRadius_Parms BreakOffPartsInRadius_Parms;

	this->ProcessEvent ( pFnBreakOffPartsInRadius, &BreakOffPartsInRadius_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.BreakOffAllFragments
// [0x00824102] 
// Parameters infos:

void AKFFracturedMeshActor::BreakOffAllFragments ( )
{
	static UFunction* pFnBreakOffAllFragments = NULL;

	if ( ! pFnBreakOffAllFragments )
		pFnBreakOffAllFragments = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.BreakOffAllFragments" );

	AKFFracturedMeshActor_execBreakOffAllFragments_Parms BreakOffAllFragments_Parms;

	this->ProcessEvent ( pFnBreakOffAllFragments, &BreakOffAllFragments_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.SetLoseChunkReplacementMaterial
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshActor::eventSetLoseChunkReplacementMaterial ( )
{
	static UFunction* pFnSetLoseChunkReplacementMaterial = NULL;

	if ( ! pFnSetLoseChunkReplacementMaterial )
		pFnSetLoseChunkReplacementMaterial = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.SetLoseChunkReplacementMaterial" );

	AKFFracturedMeshActor_eventSetLoseChunkReplacementMaterial_Parms SetLoseChunkReplacementMaterial_Parms;

	this->ProcessEvent ( pFnSetLoseChunkReplacementMaterial, &SetLoseChunkReplacementMaterial_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.FractureEffectIsRelevant
// [0x00420102] 
// Parameters infos:

void AKFFracturedMeshActor::FractureEffectIsRelevant ( )
{
	static UFunction* pFnFractureEffectIsRelevant = NULL;

	if ( ! pFnFractureEffectIsRelevant )
		pFnFractureEffectIsRelevant = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.FractureEffectIsRelevant" );

	AKFFracturedMeshActor_execFractureEffectIsRelevant_Parms FractureEffectIsRelevant_Parms;

	this->ProcessEvent ( pFnFractureEffectIsRelevant, &FractureEffectIsRelevant_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.IsVulnerableTo
// [0x00020002] 
// Parameters infos:

void AKFFracturedMeshActor::IsVulnerableTo ( )
{
	static UFunction* pFnIsVulnerableTo = NULL;

	if ( ! pFnIsVulnerableTo )
		pFnIsVulnerableTo = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.IsVulnerableTo" );

	AKFFracturedMeshActor_execIsVulnerableTo_Parms IsVulnerableTo_Parms;

	this->ProcessEvent ( pFnIsVulnerableTo, &IsVulnerableTo_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.TakeDamage
// [0x00824902] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshActor::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.TakeDamage" );

	AKFFracturedMeshActor_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.PreBeginPlay" );

	AKFFracturedMeshActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFFracturedMeshActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshActor::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshActor.ReplicatedEvent" );

	AKFFracturedMeshActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFFracturedMeshGlass.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:

void AKFFracturedMeshGlass::TakeRadiusDamage ( )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshGlass.TakeRadiusDamage" );

	AKFFracturedMeshGlass_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function KFGame.KFFracturedMeshGlass.StopsProjectile
// [0x00020102] 
// Parameters infos:

void AKFFracturedMeshGlass::StopsProjectile ( )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshGlass.StopsProjectile" );

	AKFFracturedMeshGlass_execStopsProjectile_Parms StopsProjectile_Parms;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );
};

// Function KFGame.KFFracturedMeshGlass.Bump
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshGlass::eventBump ( )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshGlass.Bump" );

	AKFFracturedMeshGlass_eventBump_Parms Bump_Parms;

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function KFGame.KFFracturedMeshGlass.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshGlass::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshGlass.TakeDamage" );

	AKFFracturedMeshGlass_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function KFGame.KFFracturedMeshGlass.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshGlass::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshGlass.PostBeginPlay" );

	AKFFracturedMeshGlass_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFFracturedMeshGlass.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFFracturedMeshGlass::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFFracturedMeshGlass.PreBeginPlay" );

	AKFFracturedMeshGlass_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFGoreManager.Reset
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGoreManager::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.Reset" );

	AKFGoreManager_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFGoreManager.ResetPersistantGore
// [0x00024002] 
// Parameters infos:

void AKFGoreManager::ResetPersistantGore ( )
{
	static UFunction* pFnResetPersistantGore = NULL;

	if ( ! pFnResetPersistantGore )
		pFnResetPersistantGore = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.ResetPersistantGore" );

	AKFGoreManager_execResetPersistantGore_Parms ResetPersistantGore_Parms;

	this->ProcessEvent ( pFnResetPersistantGore, &ResetPersistantGore_Parms, NULL );
};

// Function KFGame.KFGoreManager.AddCorpse
// [0x00020102] 
// Parameters infos:

void AKFGoreManager::AddCorpse ( )
{
	static UFunction* pFnAddCorpse = NULL;

	if ( ! pFnAddCorpse )
		pFnAddCorpse = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.AddCorpse" );

	AKFGoreManager_execAddCorpse_Parms AddCorpse_Parms;

	this->ProcessEvent ( pFnAddCorpse, &AddCorpse_Parms, NULL );
};

// Function KFGame.KFGoreManager.DeleteCorpse
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGoreManager::DeleteCorpse ( )
{
	static UFunction* pFnDeleteCorpse = NULL;

	if ( ! pFnDeleteCorpse )
		pFnDeleteCorpse = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.DeleteCorpse" );

	AKFGoreManager_execDeleteCorpse_Parms DeleteCorpse_Parms;

	pFnDeleteCorpse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDeleteCorpse, &DeleteCorpse_Parms, NULL );

	pFnDeleteCorpse->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.RemoveAndDeleteCorpse
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGoreManager::RemoveAndDeleteCorpse ( )
{
	static UFunction* pFnRemoveAndDeleteCorpse = NULL;

	if ( ! pFnRemoveAndDeleteCorpse )
		pFnRemoveAndDeleteCorpse = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.RemoveAndDeleteCorpse" );

	AKFGoreManager_execRemoveAndDeleteCorpse_Parms RemoveAndDeleteCorpse_Parms;

	pFnRemoveAndDeleteCorpse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRemoveAndDeleteCorpse, &RemoveAndDeleteCorpse_Parms, NULL );

	pFnRemoveAndDeleteCorpse->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.RateCorpse
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGoreManager::RateCorpse ( )
{
	static UFunction* pFnRateCorpse = NULL;

	if ( ! pFnRateCorpse )
		pFnRateCorpse = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.RateCorpse" );

	AKFGoreManager_execRateCorpse_Parms RateCorpse_Parms;

	pFnRateCorpse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRateCorpse, &RateCorpse_Parms, NULL );

	pFnRateCorpse->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.MakeRoomForCorpse
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGoreManager::MakeRoomForCorpse ( )
{
	static UFunction* pFnMakeRoomForCorpse = NULL;

	if ( ! pFnMakeRoomForCorpse )
		pFnMakeRoomForCorpse = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.MakeRoomForCorpse" );

	AKFGoreManager_execMakeRoomForCorpse_Parms MakeRoomForCorpse_Parms;

	pFnMakeRoomForCorpse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMakeRoomForCorpse, &MakeRoomForCorpse_Parms, NULL );

	pFnMakeRoomForCorpse->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.CauseObliteration
// [0x00824102] 
// Parameters infos:

void AKFGoreManager::CauseObliteration ( )
{
	static UFunction* pFnCauseObliteration = NULL;

	if ( ! pFnCauseObliteration )
		pFnCauseObliteration = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.CauseObliteration" );

	AKFGoreManager_execCauseObliteration_Parms CauseObliteration_Parms;

	this->ProcessEvent ( pFnCauseObliteration, &CauseObliteration_Parms, NULL );
};

// Function KFGame.KFGoreManager.SpawnObliterationBloodEffect
// [0x00820102] 
// Parameters infos:

void AKFGoreManager::SpawnObliterationBloodEffect ( )
{
	static UFunction* pFnSpawnObliterationBloodEffect = NULL;

	if ( ! pFnSpawnObliterationBloodEffect )
		pFnSpawnObliterationBloodEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.SpawnObliterationBloodEffect" );

	AKFGoreManager_execSpawnObliterationBloodEffect_Parms SpawnObliterationBloodEffect_Parms;

	this->ProcessEvent ( pFnSpawnObliterationBloodEffect, &SpawnObliterationBloodEffect_Parms, NULL );
};

// Function KFGame.KFGoreManager.SpawnGiblet
// [0x00824102] 
// Parameters infos:

void AKFGoreManager::SpawnGiblet ( )
{
	static UFunction* pFnSpawnGiblet = NULL;

	if ( ! pFnSpawnGiblet )
		pFnSpawnGiblet = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.SpawnGiblet" );

	AKFGoreManager_execSpawnGiblet_Parms SpawnGiblet_Parms;

	this->ProcessEvent ( pFnSpawnGiblet, &SpawnGiblet_Parms, NULL );
};

// Function KFGame.KFGoreManager.CauseGibsAndApplyImpulse
// [0x00824102] 
// Parameters infos:

void AKFGoreManager::CauseGibsAndApplyImpulse ( )
{
	static UFunction* pFnCauseGibsAndApplyImpulse = NULL;

	if ( ! pFnCauseGibsAndApplyImpulse )
		pFnCauseGibsAndApplyImpulse = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.CauseGibsAndApplyImpulse" );

	AKFGoreManager_execCauseGibsAndApplyImpulse_Parms CauseGibsAndApplyImpulse_Parms;

	this->ProcessEvent ( pFnCauseGibsAndApplyImpulse, &CauseGibsAndApplyImpulse_Parms, NULL );
};

// Function KFGame.KFGoreManager.CauseDismemberment
// [0x00820102] 
// Parameters infos:

void AKFGoreManager::CauseDismemberment ( )
{
	static UFunction* pFnCauseDismemberment = NULL;

	if ( ! pFnCauseDismemberment )
		pFnCauseDismemberment = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.CauseDismemberment" );

	AKFGoreManager_execCauseDismemberment_Parms CauseDismemberment_Parms;

	this->ProcessEvent ( pFnCauseDismemberment, &CauseDismemberment_Parms, NULL );
};

// Function KFGame.KFGoreManager.ConditionalApplyPartialGore
// [0x00824102] 
// Parameters infos:

void AKFGoreManager::ConditionalApplyPartialGore ( )
{
	static UFunction* pFnConditionalApplyPartialGore = NULL;

	if ( ! pFnConditionalApplyPartialGore )
		pFnConditionalApplyPartialGore = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.ConditionalApplyPartialGore" );

	AKFGoreManager_execConditionalApplyPartialGore_Parms ConditionalApplyPartialGore_Parms;

	this->ProcessEvent ( pFnConditionalApplyPartialGore, &ConditionalApplyPartialGore_Parms, NULL );
};

// Function KFGame.KFGoreManager.CrushBone
// [0x00020102] 
// Parameters infos:

void AKFGoreManager::CrushBone ( )
{
	static UFunction* pFnCrushBone = NULL;

	if ( ! pFnCrushBone )
		pFnCrushBone = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.CrushBone" );

	AKFGoreManager_execCrushBone_Parms CrushBone_Parms;

	this->ProcessEvent ( pFnCrushBone, &CrushBone_Parms, NULL );
};

// Function KFGame.KFGoreManager.BreakConstraint
// [0x00824103] ( FUNC_Final )
// Parameters infos:

void AKFGoreManager::BreakConstraint ( )
{
	static UFunction* pFnBreakConstraint = NULL;

	if ( ! pFnBreakConstraint )
		pFnBreakConstraint = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.BreakConstraint" );

	AKFGoreManager_execBreakConstraint_Parms BreakConstraint_Parms;

	this->ProcessEvent ( pFnBreakConstraint, &BreakConstraint_Parms, NULL );
};

// Function KFGame.KFGoreManager.AttachMutilationBloodEffects
// [0x00824103] ( FUNC_Final )
// Parameters infos:

void AKFGoreManager::AttachMutilationBloodEffects ( )
{
	static UFunction* pFnAttachMutilationBloodEffects = NULL;

	if ( ! pFnAttachMutilationBloodEffects )
		pFnAttachMutilationBloodEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.AttachMutilationBloodEffects" );

	AKFGoreManager_execAttachMutilationBloodEffects_Parms AttachMutilationBloodEffects_Parms;

	this->ProcessEvent ( pFnAttachMutilationBloodEffects, &AttachMutilationBloodEffects_Parms, NULL );
};

// Function KFGame.KFGoreManager.AllowHeadless
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFGoreManager::AllowHeadless ( )
{
	static UFunction* pFnAllowHeadless = NULL;

	if ( ! pFnAllowHeadless )
		pFnAllowHeadless = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.AllowHeadless" );

	AKFGoreManager_execAllowHeadless_Parms AllowHeadless_Parms;

	this->ProcessEvent ( pFnAllowHeadless, &AllowHeadless_Parms, NULL );
};

// Function KFGame.KFGoreManager.AllowMutilation
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFGoreManager::AllowMutilation ( )
{
	static UFunction* pFnAllowMutilation = NULL;

	if ( ! pFnAllowMutilation )
		pFnAllowMutilation = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.AllowMutilation" );

	AKFGoreManager_execAllowMutilation_Parms AllowMutilation_Parms;

	this->ProcessEvent ( pFnAllowMutilation, &AllowMutilation_Parms, NULL );
};

// Function KFGame.KFGoreManager.LeaveABloodPoolDecal
// [0x00820102] 
// Parameters infos:

void AKFGoreManager::LeaveABloodPoolDecal ( )
{
	static UFunction* pFnLeaveABloodPoolDecal = NULL;

	if ( ! pFnLeaveABloodPoolDecal )
		pFnLeaveABloodPoolDecal = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.LeaveABloodPoolDecal" );

	AKFGoreManager_execLeaveABloodPoolDecal_Parms LeaveABloodPoolDecal_Parms;

	this->ProcessEvent ( pFnLeaveABloodPoolDecal, &LeaveABloodPoolDecal_Parms, NULL );
};

// Function KFGame.KFGoreManager.GetTimeBetweenGibBloodSplats
// [0x00020102] 
// Parameters infos:

void AKFGoreManager::GetTimeBetweenGibBloodSplats ( )
{
	static UFunction* pFnGetTimeBetweenGibBloodSplats = NULL;

	if ( ! pFnGetTimeBetweenGibBloodSplats )
		pFnGetTimeBetweenGibBloodSplats = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.GetTimeBetweenGibBloodSplats" );

	AKFGoreManager_execGetTimeBetweenGibBloodSplats_Parms GetTimeBetweenGibBloodSplats_Parms;

	this->ProcessEvent ( pFnGetTimeBetweenGibBloodSplats, &GetTimeBetweenGibBloodSplats_Parms, NULL );
};

// Function KFGame.KFGoreManager.LeaveABloodSplatterDecal
// [0x00820102] 
// Parameters infos:

void AKFGoreManager::LeaveABloodSplatterDecal ( )
{
	static UFunction* pFnLeaveABloodSplatterDecal = NULL;

	if ( ! pFnLeaveABloodSplatterDecal )
		pFnLeaveABloodSplatterDecal = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.LeaveABloodSplatterDecal" );

	AKFGoreManager_execLeaveABloodSplatterDecal_Parms LeaveABloodSplatterDecal_Parms;

	this->ProcessEvent ( pFnLeaveABloodSplatterDecal, &LeaveABloodSplatterDecal_Parms, NULL );
};

// Function KFGame.KFGoreManager.CausePersistentBlood
// [0x00020102] 
// Parameters infos:

void AKFGoreManager::CausePersistentBlood ( )
{
	static UFunction* pFnCausePersistentBlood = NULL;

	if ( ! pFnCausePersistentBlood )
		pFnCausePersistentBlood = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.CausePersistentBlood" );

	AKFGoreManager_execCausePersistentBlood_Parms CausePersistentBlood_Parms;

	this->ProcessEvent ( pFnCausePersistentBlood, &CausePersistentBlood_Parms, NULL );
};

// Function KFGame.KFGoreManager.FlushPersistentBloodSplats
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGoreManager::FlushPersistentBloodSplats ( )
{
	static UFunction* pFnFlushPersistentBloodSplats = NULL;

	if ( ! pFnFlushPersistentBloodSplats )
		pFnFlushPersistentBloodSplats = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.FlushPersistentBloodSplats" );

	AKFGoreManager_execFlushPersistentBloodSplats_Parms FlushPersistentBloodSplats_Parms;

	pFnFlushPersistentBloodSplats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushPersistentBloodSplats, &FlushPersistentBloodSplats_Parms, NULL );

	pFnFlushPersistentBloodSplats->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.CacheCurrentSplattermaps
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGoreManager::CacheCurrentSplattermaps ( )
{
	static UFunction* pFnCacheCurrentSplattermaps = NULL;

	if ( ! pFnCacheCurrentSplattermaps )
		pFnCacheCurrentSplattermaps = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.CacheCurrentSplattermaps" );

	AKFGoreManager_execCacheCurrentSplattermaps_Parms CacheCurrentSplattermaps_Parms;

	pFnCacheCurrentSplattermaps->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheCurrentSplattermaps, &CacheCurrentSplattermaps_Parms, NULL );

	pFnCacheCurrentSplattermaps->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.ClearPersistentBloodSplats
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGoreManager::ClearPersistentBloodSplats ( )
{
	static UFunction* pFnClearPersistentBloodSplats = NULL;

	if ( ! pFnClearPersistentBloodSplats )
		pFnClearPersistentBloodSplats = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.ClearPersistentBloodSplats" );

	AKFGoreManager_execClearPersistentBloodSplats_Parms ClearPersistentBloodSplats_Parms;

	pFnClearPersistentBloodSplats->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearPersistentBloodSplats, &ClearPersistentBloodSplats_Parms, NULL );

	pFnClearPersistentBloodSplats->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.PerformTraceAndUpdateSplattermap
// [0x00420501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGoreManager::PerformTraceAndUpdateSplattermap ( )
{
	static UFunction* pFnPerformTraceAndUpdateSplattermap = NULL;

	if ( ! pFnPerformTraceAndUpdateSplattermap )
		pFnPerformTraceAndUpdateSplattermap = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.PerformTraceAndUpdateSplattermap" );

	AKFGoreManager_execPerformTraceAndUpdateSplattermap_Parms PerformTraceAndUpdateSplattermap_Parms;

	pFnPerformTraceAndUpdateSplattermap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPerformTraceAndUpdateSplattermap, &PerformTraceAndUpdateSplattermap_Parms, NULL );

	pFnPerformTraceAndUpdateSplattermap->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.LeaveAPersistentBloodSplat
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGoreManager::LeaveAPersistentBloodSplat ( )
{
	static UFunction* pFnLeaveAPersistentBloodSplat = NULL;

	if ( ! pFnLeaveAPersistentBloodSplat )
		pFnLeaveAPersistentBloodSplat = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.LeaveAPersistentBloodSplat" );

	AKFGoreManager_execLeaveAPersistentBloodSplat_Parms LeaveAPersistentBloodSplat_Parms;

	pFnLeaveAPersistentBloodSplat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLeaveAPersistentBloodSplat, &LeaveAPersistentBloodSplat_Parms, NULL );

	pFnLeaveAPersistentBloodSplat->FunctionFlags |= 0x400;
};

// Function KFGame.KFGoreManager.LeaveABodyWoundDecal
// [0x00820102] 
// Parameters infos:

void AKFGoreManager::LeaveABodyWoundDecal ( )
{
	static UFunction* pFnLeaveABodyWoundDecal = NULL;

	if ( ! pFnLeaveABodyWoundDecal )
		pFnLeaveABodyWoundDecal = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.LeaveABodyWoundDecal" );

	AKFGoreManager_execLeaveABodyWoundDecal_Parms LeaveABodyWoundDecal_Parms;

	this->ProcessEvent ( pFnLeaveABodyWoundDecal, &LeaveABodyWoundDecal_Parms, NULL );
};

// Function KFGame.KFGoreManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGoreManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreManager.PostBeginPlay" );

	AKFGoreManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.PlayMeleeImpact
// [0x00020100] 
// Parameters infos:

void AKFImpactEffectManager::PlayMeleeImpact ( )
{
	static UFunction* pFnPlayMeleeImpact = NULL;

	if ( ! pFnPlayMeleeImpact )
		pFnPlayMeleeImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.PlayMeleeImpact" );

	AKFImpactEffectManager_execPlayMeleeImpact_Parms PlayMeleeImpact_Parms;

	this->ProcessEvent ( pFnPlayMeleeImpact, &PlayMeleeImpact_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.AllowImpactEffects
// [0x00020102] 
// Parameters infos:

void AKFImpactEffectManager::AllowImpactEffects ( )
{
	static UFunction* pFnAllowImpactEffects = NULL;

	if ( ! pFnAllowImpactEffects )
		pFnAllowImpactEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.AllowImpactEffects" );

	AKFImpactEffectManager_execAllowImpactEffects_Parms AllowImpactEffects_Parms;

	this->ProcessEvent ( pFnAllowImpactEffects, &AllowImpactEffects_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.GetImpactEffect
// [0x00422102] 
// Parameters infos:

void AKFImpactEffectManager::GetImpactEffect ( )
{
	static UFunction* pFnGetImpactEffect = NULL;

	if ( ! pFnGetImpactEffect )
		pFnGetImpactEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.GetImpactEffect" );

	AKFImpactEffectManager_execGetImpactEffect_Parms GetImpactEffect_Parms;

	this->ProcessEvent ( pFnGetImpactEffect, &GetImpactEffect_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.ShouldExtendDecalThickness
// [0x00022002] 
// Parameters infos:

void AKFImpactEffectManager::ShouldExtendDecalThickness ( )
{
	static UFunction* pFnShouldExtendDecalThickness = NULL;

	if ( ! pFnShouldExtendDecalThickness )
		pFnShouldExtendDecalThickness = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.ShouldExtendDecalThickness" );

	AKFImpactEffectManager_execShouldExtendDecalThickness_Parms ShouldExtendDecalThickness_Parms;

	this->ProcessEvent ( pFnShouldExtendDecalThickness, &ShouldExtendDecalThickness_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.SpawnImpactDecal
// [0x00424102] 
// Parameters infos:

void AKFImpactEffectManager::SpawnImpactDecal ( )
{
	static UFunction* pFnSpawnImpactDecal = NULL;

	if ( ! pFnSpawnImpactDecal )
		pFnSpawnImpactDecal = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.SpawnImpactDecal" );

	AKFImpactEffectManager_execSpawnImpactDecal_Parms SpawnImpactDecal_Parms;

	this->ProcessEvent ( pFnSpawnImpactDecal, &SpawnImpactDecal_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.CheckBulletWhip
// [0x00020102] 
// Parameters infos:

void AKFImpactEffectManager::CheckBulletWhip ( )
{
	static UFunction* pFnCheckBulletWhip = NULL;

	if ( ! pFnCheckBulletWhip )
		pFnCheckBulletWhip = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.CheckBulletWhip" );

	AKFImpactEffectManager_execCheckBulletWhip_Parms CheckBulletWhip_Parms;

	this->ProcessEvent ( pFnCheckBulletWhip, &CheckBulletWhip_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.PlayImpactSound
// [0x00020102] 
// Parameters infos:

void AKFImpactEffectManager::PlayImpactSound ( )
{
	static UFunction* pFnPlayImpactSound = NULL;

	if ( ! pFnPlayImpactSound )
		pFnPlayImpactSound = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.PlayImpactSound" );

	AKFImpactEffectManager_execPlayImpactSound_Parms PlayImpactSound_Parms;

	this->ProcessEvent ( pFnPlayImpactSound, &PlayImpactSound_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.ShouldPlayImpactSound
// [0x00020102] 
// Parameters infos:

void AKFImpactEffectManager::ShouldPlayImpactSound ( )
{
	static UFunction* pFnShouldPlayImpactSound = NULL;

	if ( ! pFnShouldPlayImpactSound )
		pFnShouldPlayImpactSound = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.ShouldPlayImpactSound" );

	AKFImpactEffectManager_execShouldPlayImpactSound_Parms ShouldPlayImpactSound_Parms;

	this->ProcessEvent ( pFnShouldPlayImpactSound, &ShouldPlayImpactSound_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.PlayImpactEffects
// [0x00824102] 
// Parameters infos:

void AKFImpactEffectManager::PlayImpactEffects ( )
{
	static UFunction* pFnPlayImpactEffects = NULL;

	if ( ! pFnPlayImpactEffects )
		pFnPlayImpactEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.PlayImpactEffects" );

	AKFImpactEffectManager_execPlayImpactEffects_Parms PlayImpactEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactEffects, &PlayImpactEffects_Parms, NULL );
};

// Function KFGame.KFImpactEffectManager.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFImpactEffectManager::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFImpactEffectManager.PostBeginPlay" );

	AKFImpactEffectManager_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFKActorSpawnable.Reset
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFKActorSpawnable::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFKActorSpawnable.Reset" );

	AKFKActorSpawnable_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFKActorSpawnable.UnHideTimer
// [0x00020102] 
// Parameters infos:

void AKFKActorSpawnable::UnHideTimer ( )
{
	static UFunction* pFnUnHideTimer = NULL;

	if ( ! pFnUnHideTimer )
		pFnUnHideTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFKActorSpawnable.UnHideTimer" );

	AKFKActorSpawnable_execUnHideTimer_Parms UnHideTimer_Parms;

	this->ProcessEvent ( pFnUnHideTimer, &UnHideTimer_Parms, NULL );
};

// Function KFGame.KFKActorSpawnable.HideForInterval
// [0x00020102] 
// Parameters infos:

void AKFKActorSpawnable::HideForInterval ( )
{
	static UFunction* pFnHideForInterval = NULL;

	if ( ! pFnHideForInterval )
		pFnHideForInterval = UObject::FindObject< UFunction > ( "Function KFGame.KFKActorSpawnable.HideForInterval" );

	AKFKActorSpawnable_execHideForInterval_Parms HideForInterval_Parms;

	this->ProcessEvent ( pFnHideForInterval, &HideForInterval_Parms, NULL );
};

// Function KFGame.KFKActorSpawnable.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFKActorSpawnable::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFKActorSpawnable.PostBeginPlay" );

	AKFKActorSpawnable_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFLaserSightAttachment.GetFOVAdjustedLaserSocket
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFLaserSightAttachment::GetFOVAdjustedLaserSocket ( )
{
	static UFunction* pFnGetFOVAdjustedLaserSocket = NULL;

	if ( ! pFnGetFOVAdjustedLaserSocket )
		pFnGetFOVAdjustedLaserSocket = UObject::FindObject< UFunction > ( "Function KFGame.KFLaserSightAttachment.GetFOVAdjustedLaserSocket" );

	UKFLaserSightAttachment_execGetFOVAdjustedLaserSocket_Parms GetFOVAdjustedLaserSocket_Parms;

	pFnGetFOVAdjustedLaserSocket->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetFOVAdjustedLaserSocket, &GetFOVAdjustedLaserSocket_Parms, NULL );

	pFnGetFOVAdjustedLaserSocket->FunctionFlags |= 0x400;
};

// Function KFGame.KFLaserSightAttachment.AimAt
// [0x00820002] 
// Parameters infos:

void UKFLaserSightAttachment::AimAt ( )
{
	static UFunction* pFnAimAt = NULL;

	if ( ! pFnAimAt )
		pFnAimAt = UObject::FindObject< UFunction > ( "Function KFGame.KFLaserSightAttachment.AimAt" );

	UKFLaserSightAttachment_execAimAt_Parms AimAt_Parms;

	this->ProcessEvent ( pFnAimAt, &AimAt_Parms, NULL );
};

// Function KFGame.KFLaserSightAttachment.UpdateFirstPersonAImStrength
// [0x00020002] 
// Parameters infos:

void UKFLaserSightAttachment::UpdateFirstPersonAImStrength ( )
{
	static UFunction* pFnUpdateFirstPersonAImStrength = NULL;

	if ( ! pFnUpdateFirstPersonAImStrength )
		pFnUpdateFirstPersonAImStrength = UObject::FindObject< UFunction > ( "Function KFGame.KFLaserSightAttachment.UpdateFirstPersonAImStrength" );

	UKFLaserSightAttachment_execUpdateFirstPersonAImStrength_Parms UpdateFirstPersonAImStrength_Parms;

	this->ProcessEvent ( pFnUpdateFirstPersonAImStrength, &UpdateFirstPersonAImStrength_Parms, NULL );
};

// Function KFGame.KFLaserSightAttachment.Update
// [0x00820102] 
// Parameters infos:

void UKFLaserSightAttachment::Update ( )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFLaserSightAttachment.Update" );

	UKFLaserSightAttachment_execUpdate_Parms Update_Parms;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function KFGame.KFLaserSightAttachment.ChangeVisibility
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UKFLaserSightAttachment::eventChangeVisibility ( )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFLaserSightAttachment.ChangeVisibility" );

	UKFLaserSightAttachment_eventChangeVisibility_Parms ChangeVisibility_Parms;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );
};

// Function KFGame.KFLaserSightAttachment.SetMeshLightingChannels
// [0x00020102] 
// Parameters infos:

void UKFLaserSightAttachment::SetMeshLightingChannels ( )
{
	static UFunction* pFnSetMeshLightingChannels = NULL;

	if ( ! pFnSetMeshLightingChannels )
		pFnSetMeshLightingChannels = UObject::FindObject< UFunction > ( "Function KFGame.KFLaserSightAttachment.SetMeshLightingChannels" );

	UKFLaserSightAttachment_execSetMeshLightingChannels_Parms SetMeshLightingChannels_Parms;

	this->ProcessEvent ( pFnSetMeshLightingChannels, &SetMeshLightingChannels_Parms, NULL );
};

// Function KFGame.KFLaserSightAttachment.SetMeshFOV
// [0x00020102] 
// Parameters infos:

void UKFLaserSightAttachment::SetMeshFOV ( )
{
	static UFunction* pFnSetMeshFOV = NULL;

	if ( ! pFnSetMeshFOV )
		pFnSetMeshFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFLaserSightAttachment.SetMeshFOV" );

	UKFLaserSightAttachment_execSetMeshFOV_Parms SetMeshFOV_Parms;

	this->ProcessEvent ( pFnSetMeshFOV, &SetMeshFOV_Parms, NULL );
};

// Function KFGame.KFLaserSightAttachment.AttachLaserSight
// [0x00024002] 
// Parameters infos:

void UKFLaserSightAttachment::AttachLaserSight ( )
{
	static UFunction* pFnAttachLaserSight = NULL;

	if ( ! pFnAttachLaserSight )
		pFnAttachLaserSight = UObject::FindObject< UFunction > ( "Function KFGame.KFLaserSightAttachment.AttachLaserSight" );

	UKFLaserSightAttachment_execAttachLaserSight_Parms AttachLaserSight_Parms;

	this->ProcessEvent ( pFnAttachLaserSight, &AttachLaserSight_Parms, NULL );
};

// Function KFGame.KFLightPool.RegisterPointLight
// [0x00824002] 
// Parameters infos:

void AKFLightPool::RegisterPointLight ( )
{
	static UFunction* pFnRegisterPointLight = NULL;

	if ( ! pFnRegisterPointLight )
		pFnRegisterPointLight = UObject::FindObject< UFunction > ( "Function KFGame.KFLightPool.RegisterPointLight" );

	AKFLightPool_execRegisterPointLight_Parms RegisterPointLight_Parms;

	this->ProcessEvent ( pFnRegisterPointLight, &RegisterPointLight_Parms, NULL );
};

// Function KFGame.KFLightPool.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFLightPool::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFLightPool.PreBeginPlay" );

	AKFLightPool_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFMuzzleFlash.SetShellEjectLife
// [0x00024002] 
// Parameters infos:

void UKFMuzzleFlash::SetShellEjectLife ( )
{
	static UFunction* pFnSetShellEjectLife = NULL;

	if ( ! pFnSetShellEjectLife )
		pFnSetShellEjectLife = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.SetShellEjectLife" );

	UKFMuzzleFlash_execSetShellEjectLife_Parms SetShellEjectLife_Parms;

	this->ProcessEvent ( pFnSetShellEjectLife, &SetShellEjectLife_Parms, NULL );
};

// Function KFGame.KFMuzzleFlash.CauseShellEject
// [0x00020002] 
// Parameters infos:

void UKFMuzzleFlash::CauseShellEject ( )
{
	static UFunction* pFnCauseShellEject = NULL;

	if ( ! pFnCauseShellEject )
		pFnCauseShellEject = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.CauseShellEject" );

	UKFMuzzleFlash_execCauseShellEject_Parms CauseShellEject_Parms;

	this->ProcessEvent ( pFnCauseShellEject, &CauseShellEject_Parms, NULL );
};

// Function KFGame.KFMuzzleFlash.GetAltSocketName
// [0x00020002] 
// Parameters infos:

void UKFMuzzleFlash::GetAltSocketName ( )
{
	static UFunction* pFnGetAltSocketName = NULL;

	if ( ! pFnGetAltSocketName )
		pFnGetAltSocketName = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.GetAltSocketName" );

	UKFMuzzleFlash_execGetAltSocketName_Parms GetAltSocketName_Parms;

	this->ProcessEvent ( pFnGetAltSocketName, &GetAltSocketName_Parms, NULL );
};

// Function KFGame.KFMuzzleFlash.GetSocketName
// [0x00020002] 
// Parameters infos:

void UKFMuzzleFlash::GetSocketName ( )
{
	static UFunction* pFnGetSocketName = NULL;

	if ( ! pFnGetSocketName )
		pFnGetSocketName = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.GetSocketName" );

	UKFMuzzleFlash_execGetSocketName_Parms GetSocketName_Parms;

	this->ProcessEvent ( pFnGetSocketName, &GetSocketName_Parms, NULL );
};

// Function KFGame.KFMuzzleFlash.DetachMuzzleFlash
// [0x00020002] 
// Parameters infos:

void UKFMuzzleFlash::DetachMuzzleFlash ( )
{
	static UFunction* pFnDetachMuzzleFlash = NULL;

	if ( ! pFnDetachMuzzleFlash )
		pFnDetachMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.DetachMuzzleFlash" );

	UKFMuzzleFlash_execDetachMuzzleFlash_Parms DetachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnDetachMuzzleFlash, &DetachMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFMuzzleFlash.SetFOV
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UKFMuzzleFlash::eventSetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.SetFOV" );

	UKFMuzzleFlash_eventSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function KFGame.KFMuzzleFlash.AttachMuzzleFlash
// [0x00024002] 
// Parameters infos:

void UKFMuzzleFlash::AttachMuzzleFlash ( )
{
	static UFunction* pFnAttachMuzzleFlash = NULL;

	if ( ! pFnAttachMuzzleFlash )
		pFnAttachMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.AttachMuzzleFlash" );

	UKFMuzzleFlash_execAttachMuzzleFlash_Parms AttachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnAttachMuzzleFlash, &AttachMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFMuzzleFlash.MuzzleFlashAltTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMuzzleFlash::MuzzleFlashAltTimer ( )
{
	static UFunction* pFnMuzzleFlashAltTimer = NULL;

	if ( ! pFnMuzzleFlashAltTimer )
		pFnMuzzleFlashAltTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.MuzzleFlashAltTimer" );

	UKFMuzzleFlash_execMuzzleFlashAltTimer_Parms MuzzleFlashAltTimer_Parms;

	pFnMuzzleFlashAltTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMuzzleFlashAltTimer, &MuzzleFlashAltTimer_Parms, NULL );

	pFnMuzzleFlashAltTimer->FunctionFlags |= 0x400;
};

// Function KFGame.KFMuzzleFlash.MuzzleFlashTimer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMuzzleFlash::MuzzleFlashTimer ( )
{
	static UFunction* pFnMuzzleFlashTimer = NULL;

	if ( ! pFnMuzzleFlashTimer )
		pFnMuzzleFlashTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.MuzzleFlashTimer" );

	UKFMuzzleFlash_execMuzzleFlashTimer_Parms MuzzleFlashTimer_Parms;

	pFnMuzzleFlashTimer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMuzzleFlashTimer, &MuzzleFlashTimer_Parms, NULL );

	pFnMuzzleFlashTimer->FunctionFlags |= 0x400;
};

// Function KFGame.KFMuzzleFlash.StopMuzzleFlash
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFMuzzleFlash::StopMuzzleFlash ( )
{
	static UFunction* pFnStopMuzzleFlash = NULL;

	if ( ! pFnStopMuzzleFlash )
		pFnStopMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.StopMuzzleFlash" );

	UKFMuzzleFlash_execStopMuzzleFlash_Parms StopMuzzleFlash_Parms;

	pFnStopMuzzleFlash->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopMuzzleFlash, &StopMuzzleFlash_Parms, NULL );

	pFnStopMuzzleFlash->FunctionFlags |= 0x400;
};

// Function KFGame.KFMuzzleFlash.CauseMuzzleFlash
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void UKFMuzzleFlash::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFMuzzleFlash.CauseMuzzleFlash" );

	UKFMuzzleFlash_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	pFnCauseMuzzleFlash->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );

	pFnCauseMuzzleFlash->FunctionFlags |= 0x400;
};

// Function KFGame.KFParticleSystemComponent.SetFOV
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFParticleSystemComponent::SetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFParticleSystemComponent.SetFOV" );

	UKFParticleSystemComponent_execSetFOV_Parms SetFOV_Parms;

	pFnSetFOV->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );

	pFnSetFOV->FunctionFlags |= 0x400;
};

// Function KFGame.KFPersistentBloodActor.Reset
// [0x00020102] 
// Parameters infos:

void AKFPersistentBloodActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPersistentBloodActor.Reset" );

	AKFPersistentBloodActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFPersistentBloodActor.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPersistentBloodActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPersistentBloodActor.PreBeginPlay" );

	AKFPersistentBloodActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFPersistentBloodActor.LeaveBloodSplats
// [0x00820102] 
// Parameters infos:

void AKFPersistentBloodActor::LeaveBloodSplats ( )
{
	static UFunction* pFnLeaveBloodSplats = NULL;

	if ( ! pFnLeaveBloodSplats )
		pFnLeaveBloodSplats = UObject::FindObject< UFunction > ( "Function KFGame.KFPersistentBloodActor.LeaveBloodSplats" );

	AKFPersistentBloodActor_execLeaveBloodSplats_Parms LeaveBloodSplats_Parms;

	this->ProcessEvent ( pFnLeaveBloodSplats, &LeaveBloodSplats_Parms, NULL );
};

// Function KFGame.KFPersistentBloodActor.TryAddBloodSplats
// [0x00020102] 
// Parameters infos:

void AKFPersistentBloodActor::TryAddBloodSplats ( )
{
	static UFunction* pFnTryAddBloodSplats = NULL;

	if ( ! pFnTryAddBloodSplats )
		pFnTryAddBloodSplats = UObject::FindObject< UFunction > ( "Function KFGame.KFPersistentBloodActor.TryAddBloodSplats" );

	AKFPersistentBloodActor_execTryAddBloodSplats_Parms TryAddBloodSplats_Parms;

	this->ProcessEvent ( pFnTryAddBloodSplats, &TryAddBloodSplats_Parms, NULL );
};

// Function KFGame.KFReverbVolume.CalculateEchoLocationAndDelay
// [0x00C22102] 
// Parameters infos:

void AKFReverbVolume::CalculateEchoLocationAndDelay ( )
{
	static UFunction* pFnCalculateEchoLocationAndDelay = NULL;

	if ( ! pFnCalculateEchoLocationAndDelay )
		pFnCalculateEchoLocationAndDelay = UObject::FindObject< UFunction > ( "Function KFGame.KFReverbVolume.CalculateEchoLocationAndDelay" );

	AKFReverbVolume_execCalculateEchoLocationAndDelay_Parms CalculateEchoLocationAndDelay_Parms;

	this->ProcessEvent ( pFnCalculateEchoLocationAndDelay, &CalculateEchoLocationAndDelay_Parms, NULL );
};

// Function KFGame.KFReverbVolume.CalculateEchoVolumeAndDistance
// [0x00422102] 
// Parameters infos:

void AKFReverbVolume::CalculateEchoVolumeAndDistance ( )
{
	static UFunction* pFnCalculateEchoVolumeAndDistance = NULL;

	if ( ! pFnCalculateEchoVolumeAndDistance )
		pFnCalculateEchoVolumeAndDistance = UObject::FindObject< UFunction > ( "Function KFGame.KFReverbVolume.CalculateEchoVolumeAndDistance" );

	AKFReverbVolume_execCalculateEchoVolumeAndDistance_Parms CalculateEchoVolumeAndDistance_Parms;

	this->ProcessEvent ( pFnCalculateEchoVolumeAndDistance, &CalculateEchoVolumeAndDistance_Parms, NULL );
};

// Function KFGame.KFReverbVolume.GetEnvironmentEchoDistance
// [0x00020102] 
// Parameters infos:

void AKFReverbVolume::GetEnvironmentEchoDistance ( )
{
	static UFunction* pFnGetEnvironmentEchoDistance = NULL;

	if ( ! pFnGetEnvironmentEchoDistance )
		pFnGetEnvironmentEchoDistance = UObject::FindObject< UFunction > ( "Function KFGame.KFReverbVolume.GetEnvironmentEchoDistance" );

	AKFReverbVolume_execGetEnvironmentEchoDistance_Parms GetEnvironmentEchoDistance_Parms;

	this->ProcessEvent ( pFnGetEnvironmentEchoDistance, &GetEnvironmentEchoDistance_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.ShouldSetArmorValue
// [0x00420002] 
// Parameters infos:

void UKFSkinTypeEffects::ShouldSetArmorValue ( )
{
	static UFunction* pFnShouldSetArmorValue = NULL;

	if ( ! pFnShouldSetArmorValue )
		pFnShouldSetArmorValue = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.ShouldSetArmorValue" );

	UKFSkinTypeEffects_execShouldSetArmorValue_Parms ShouldSetArmorValue_Parms;

	this->ProcessEvent ( pFnShouldSetArmorValue, &ShouldSetArmorValue_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.GetImpactSound
// [0x00020002] 
// Parameters infos:

void UKFSkinTypeEffects::GetImpactSound ( )
{
	static UFunction* pFnGetImpactSound = NULL;

	if ( ! pFnGetImpactSound )
		pFnGetImpactSound = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.GetImpactSound" );

	UKFSkinTypeEffects_execGetImpactSound_Parms GetImpactSound_Parms;

	this->ProcessEvent ( pFnGetImpactSound, &GetImpactSound_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.PlayTakeHitSound
// [0x00020002] 
// Parameters infos:

void UKFSkinTypeEffects::PlayTakeHitSound ( )
{
	static UFunction* pFnPlayTakeHitSound = NULL;

	if ( ! pFnPlayTakeHitSound )
		pFnPlayTakeHitSound = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.PlayTakeHitSound" );

	UKFSkinTypeEffects_execPlayTakeHitSound_Parms PlayTakeHitSound_Parms;

	this->ProcessEvent ( pFnPlayTakeHitSound, &PlayTakeHitSound_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.GetImpactParticleEffect
// [0x00020002] 
// Parameters infos:

void UKFSkinTypeEffects::GetImpactParticleEffect ( )
{
	static UFunction* pFnGetImpactParticleEffect = NULL;

	if ( ! pFnGetImpactParticleEffect )
		pFnGetImpactParticleEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.GetImpactParticleEffect" );

	UKFSkinTypeEffects_execGetImpactParticleEffect_Parms GetImpactParticleEffect_Parms;

	this->ProcessEvent ( pFnGetImpactParticleEffect, &GetImpactParticleEffect_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.DefaultSpawnEffect
// [0x00820002] 
// Parameters infos:

void UKFSkinTypeEffects::DefaultSpawnEffect ( )
{
	static UFunction* pFnDefaultSpawnEffect = NULL;

	if ( ! pFnDefaultSpawnEffect )
		pFnDefaultSpawnEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.DefaultSpawnEffect" );

	UKFSkinTypeEffects_execDefaultSpawnEffect_Parms DefaultSpawnEffect_Parms;

	this->ProcessEvent ( pFnDefaultSpawnEffect, &DefaultSpawnEffect_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.MeleeSpawnEffect
// [0x00020002] 
// Parameters infos:

void UKFSkinTypeEffects::MeleeSpawnEffect ( )
{
	static UFunction* pFnMeleeSpawnEffect = NULL;

	if ( ! pFnMeleeSpawnEffect )
		pFnMeleeSpawnEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.MeleeSpawnEffect" );

	UKFSkinTypeEffects_execMeleeSpawnEffect_Parms MeleeSpawnEffect_Parms;

	this->ProcessEvent ( pFnMeleeSpawnEffect, &MeleeSpawnEffect_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.AttachEffectToHitLocation
// [0x00820002] 
// Parameters infos:

void UKFSkinTypeEffects::AttachEffectToHitLocation ( )
{
	static UFunction* pFnAttachEffectToHitLocation = NULL;

	if ( ! pFnAttachEffectToHitLocation )
		pFnAttachEffectToHitLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.AttachEffectToHitLocation" );

	UKFSkinTypeEffects_execAttachEffectToHitLocation_Parms AttachEffectToHitLocation_Parms;

	this->ProcessEvent ( pFnAttachEffectToHitLocation, &AttachEffectToHitLocation_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.AttachEffectToBone
// [0x00020002] 
// Parameters infos:

void UKFSkinTypeEffects::AttachEffectToBone ( )
{
	static UFunction* pFnAttachEffectToBone = NULL;

	if ( ! pFnAttachEffectToBone )
		pFnAttachEffectToBone = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.AttachEffectToBone" );

	UKFSkinTypeEffects_execAttachEffectToBone_Parms AttachEffectToBone_Parms;

	this->ProcessEvent ( pFnAttachEffectToBone, &AttachEffectToBone_Parms, NULL );
};

// Function KFGame.KFSkinTypeEffects.PlayImpactParticleEffect
// [0x00020002] 
// Parameters infos:

void UKFSkinTypeEffects::PlayImpactParticleEffect ( )
{
	static UFunction* pFnPlayImpactParticleEffect = NULL;

	if ( ! pFnPlayImpactParticleEffect )
		pFnPlayImpactParticleEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSkinTypeEffects.PlayImpactParticleEffect" );

	UKFSkinTypeEffects_execPlayImpactParticleEffect_Parms PlayImpactParticleEffect_Parms;

	this->ProcessEvent ( pFnPlayImpactParticleEffect, &PlayImpactParticleEffect_Parms, NULL );
};

// Function KFGame.KFSprayActor.GetModifiedDamage
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFSprayActor::eventGetModifiedDamage ( )
{
	static UFunction* pFnGetModifiedDamage = NULL;

	if ( ! pFnGetModifiedDamage )
		pFnGetModifiedDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.GetModifiedDamage" );

	AKFSprayActor_eventGetModifiedDamage_Parms GetModifiedDamage_Parms;

	this->ProcessEvent ( pFnGetModifiedDamage, &GetModifiedDamage_Parms, NULL );
};

// Function KFGame.KFSprayActor.SpawnImpactProjectile
// [0x00020002] 
// Parameters infos:

void AKFSprayActor::SpawnImpactProjectile ( )
{
	static UFunction* pFnSpawnImpactProjectile = NULL;

	if ( ! pFnSpawnImpactProjectile )
		pFnSpawnImpactProjectile = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.SpawnImpactProjectile" );

	AKFSprayActor_execSpawnImpactProjectile_Parms SpawnImpactProjectile_Parms;

	this->ProcessEvent ( pFnSpawnImpactProjectile, &SpawnImpactProjectile_Parms, NULL );
};

// Function KFGame.KFSprayActor.LeaveImpactProjectile
// [0x00820002] 
// Parameters infos:

void AKFSprayActor::LeaveImpactProjectile ( )
{
	static UFunction* pFnLeaveImpactProjectile = NULL;

	if ( ! pFnLeaveImpactProjectile )
		pFnLeaveImpactProjectile = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.LeaveImpactProjectile" );

	AKFSprayActor_execLeaveImpactProjectile_Parms LeaveImpactProjectile_Parms;

	this->ProcessEvent ( pFnLeaveImpactProjectile, &LeaveImpactProjectile_Parms, NULL );
};

// Function KFGame.KFSprayActor.FindOwningKFPawn
// [0x00080102] 
// Parameters infos:

void AKFSprayActor::FindOwningKFPawn ( )
{
	static UFunction* pFnFindOwningKFPawn = NULL;

	if ( ! pFnFindOwningKFPawn )
		pFnFindOwningKFPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.FindOwningKFPawn" );

	AKFSprayActor_execFindOwningKFPawn_Parms FindOwningKFPawn_Parms;

	this->ProcessEvent ( pFnFindOwningKFPawn, &FindOwningKFPawn_Parms, NULL );
};

// Function KFGame.KFSprayActor.DoSprayCollisionDetection
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSprayActor::DoSprayCollisionDetection ( )
{
	static UFunction* pFnDoSprayCollisionDetection = NULL;

	if ( ! pFnDoSprayCollisionDetection )
		pFnDoSprayCollisionDetection = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.DoSprayCollisionDetection" );

	AKFSprayActor_execDoSprayCollisionDetection_Parms DoSprayCollisionDetection_Parms;

	pFnDoSprayCollisionDetection->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoSprayCollisionDetection, &DoSprayCollisionDetection_Parms, NULL );

	pFnDoSprayCollisionDetection->FunctionFlags |= 0x400;
};

// Function KFGame.KFSprayActor.ParticleSystemCleanUp
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFSprayActor::ParticleSystemCleanUp ( )
{
	static UFunction* pFnParticleSystemCleanUp = NULL;

	if ( ! pFnParticleSystemCleanUp )
		pFnParticleSystemCleanUp = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.ParticleSystemCleanUp" );

	AKFSprayActor_execParticleSystemCleanUp_Parms ParticleSystemCleanUp_Parms;

	pFnParticleSystemCleanUp->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnParticleSystemCleanUp, &ParticleSystemCleanUp_Parms, NULL );

	pFnParticleSystemCleanUp->FunctionFlags |= 0x400;
};

// Function KFGame.KFSprayActor.GetImpactEffect
// [0x00C20902] ( FUNC_Event )
// Parameters infos:

void AKFSprayActor::eventGetImpactEffect ( )
{
	static UFunction* pFnGetImpactEffect = NULL;

	if ( ! pFnGetImpactEffect )
		pFnGetImpactEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.GetImpactEffect" );

	AKFSprayActor_eventGetImpactEffect_Parms GetImpactEffect_Parms;

	this->ProcessEvent ( pFnGetImpactEffect, &GetImpactEffect_Parms, NULL );
};

// Function KFGame.KFSprayActor.AttachToMesh
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::AttachToMesh ( )
{
	static UFunction* pFnAttachToMesh = NULL;

	if ( ! pFnAttachToMesh )
		pFnAttachToMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.AttachToMesh" );

	AKFSprayActor_execAttachToMesh_Parms AttachToMesh_Parms;

	this->ProcessEvent ( pFnAttachToMesh, &AttachToMesh_Parms, NULL );
};

// Function KFGame.KFSprayActor.TempCreatePSC
// [0x00020100] 
// Parameters infos:

void AKFSprayActor::TempCreatePSC ( )
{
	static UFunction* pFnTempCreatePSC = NULL;

	if ( ! pFnTempCreatePSC )
		pFnTempCreatePSC = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.TempCreatePSC" );

	AKFSprayActor_execTempCreatePSC_Parms TempCreatePSC_Parms;

	this->ProcessEvent ( pFnTempCreatePSC, &TempCreatePSC_Parms, NULL );
};

// Function KFGame.KFSprayActor.SetupPerBoneFireFX
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::SetupPerBoneFireFX ( )
{
	static UFunction* pFnSetupPerBoneFireFX = NULL;

	if ( ! pFnSetupPerBoneFireFX )
		pFnSetupPerBoneFireFX = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.SetupPerBoneFireFX" );

	AKFSprayActor_execSetupPerBoneFireFX_Parms SetupPerBoneFireFX_Parms;

	this->ProcessEvent ( pFnSetupPerBoneFireFX, &SetupPerBoneFireFX_Parms, NULL );
};

// Function KFGame.KFSprayActor.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFSprayActor::eventOnAnimEnd ( )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.OnAnimEnd" );

	AKFSprayActor_eventOnAnimEnd_Parms OnAnimEnd_Parms;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function KFGame.KFSprayActor.CleanupEndFire
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::CleanupEndFire ( )
{
	static UFunction* pFnCleanupEndFire = NULL;

	if ( ! pFnCleanupEndFire )
		pFnCleanupEndFire = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.CleanupEndFire" );

	AKFSprayActor_execCleanupEndFire_Parms CleanupEndFire_Parms;

	this->ProcessEvent ( pFnCleanupEndFire, &CleanupEndFire_Parms, NULL );
};

// Function KFGame.KFSprayActor.DetachAndFinish
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::DetachAndFinish ( )
{
	static UFunction* pFnDetachAndFinish = NULL;

	if ( ! pFnDetachAndFinish )
		pFnDetachAndFinish = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.DetachAndFinish" );

	AKFSprayActor_execDetachAndFinish_Parms DetachAndFinish_Parms;

	this->ProcessEvent ( pFnDetachAndFinish, &DetachAndFinish_Parms, NULL );
};

// Function KFGame.KFSprayActor.Destroyed
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.Destroyed" );

	AKFSprayActor_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFSprayActor.BeginSpray
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::BeginSpray ( )
{
	static UFunction* pFnBeginSpray = NULL;

	if ( ! pFnBeginSpray )
		pFnBeginSpray = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.BeginSpray" );

	AKFSprayActor_execBeginSpray_Parms BeginSpray_Parms;

	this->ProcessEvent ( pFnBeginSpray, &BeginSpray_Parms, NULL );
};

// Function KFGame.KFSprayActor.ClearAnimNodes
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFSprayActor::ClearAnimNodes ( )
{
	static UFunction* pFnClearAnimNodes = NULL;

	if ( ! pFnClearAnimNodes )
		pFnClearAnimNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.ClearAnimNodes" );

	AKFSprayActor_execClearAnimNodes_Parms ClearAnimNodes_Parms;

	this->ProcessEvent ( pFnClearAnimNodes, &ClearAnimNodes_Parms, NULL );
};

// Function KFGame.KFSprayActor.CacheAnimNodes
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::CacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.CacheAnimNodes" );

	AKFSprayActor_execCacheAnimNodes_Parms CacheAnimNodes_Parms;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );
};

// Function KFGame.KFSprayActor.SetupFX
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::SetupFX ( )
{
	static UFunction* pFnSetupFX = NULL;

	if ( ! pFnSetupFX )
		pFnSetupFX = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.SetupFX" );

	AKFSprayActor_execSetupFX_Parms SetupFX_Parms;

	this->ProcessEvent ( pFnSetupFX, &SetupFX_Parms, NULL );
};

// Function KFGame.KFSprayActor.SetFOV
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::SetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.SetFOV" );

	AKFSprayActor_execSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function KFGame.KFSprayActor.ProcessDirectImpact
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFSprayActor::eventProcessDirectImpact ( )
{
	static UFunction* pFnProcessDirectImpact = NULL;

	if ( ! pFnProcessDirectImpact )
		pFnProcessDirectImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.ProcessDirectImpact" );

	AKFSprayActor_eventProcessDirectImpact_Parms ProcessDirectImpact_Parms;

	this->ProcessEvent ( pFnProcessDirectImpact, &ProcessDirectImpact_Parms, NULL );
};

// Function KFGame.KFSprayActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFSprayActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.PostBeginPlay" );

	AKFSprayActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFSprayActor.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFSprayActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.PreBeginPlay" );

	AKFSprayActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFSprayActor.GetDamage
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSprayActor::GetDamage ( )
{
	static UFunction* pFnGetDamage = NULL;

	if ( ! pFnGetDamage )
		pFnGetDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.GetDamage" );

	AKFSprayActor_execGetDamage_Parms GetDamage_Parms;

	pFnGetDamage->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetDamage, &GetDamage_Parms, NULL );

	pFnGetDamage->FunctionFlags |= 0x400;
};

// Function KFGame.KFSprayActor.DebugRenderBones
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSprayActor::DebugRenderBones ( )
{
	static UFunction* pFnDebugRenderBones = NULL;

	if ( ! pFnDebugRenderBones )
		pFnDebugRenderBones = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.DebugRenderBones" );

	AKFSprayActor_execDebugRenderBones_Parms DebugRenderBones_Parms;

	pFnDebugRenderBones->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDebugRenderBones, &DebugRenderBones_Parms, NULL );

	pFnDebugRenderBones->FunctionFlags |= 0x400;
};

// Function KFGame.KFSprayActor.SetBoneSpawnParticlesActive
// [0x00080500] ( FUNC_Native )
// Parameters infos:

void AKFSprayActor::SetBoneSpawnParticlesActive ( )
{
	static UFunction* pFnSetBoneSpawnParticlesActive = NULL;

	if ( ! pFnSetBoneSpawnParticlesActive )
		pFnSetBoneSpawnParticlesActive = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.SetBoneSpawnParticlesActive" );

	AKFSprayActor_execSetBoneSpawnParticlesActive_Parms SetBoneSpawnParticlesActive_Parms;

	pFnSetBoneSpawnParticlesActive->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetBoneSpawnParticlesActive, &SetBoneSpawnParticlesActive_Parms, NULL );

	pFnSetBoneSpawnParticlesActive->FunctionFlags |= 0x400;
};

// Function KFGame.KFSprayActor.DestroyIfAllEmittersFinished
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSprayActor::DestroyIfAllEmittersFinished ( )
{
	static UFunction* pFnDestroyIfAllEmittersFinished = NULL;

	if ( ! pFnDestroyIfAllEmittersFinished )
		pFnDestroyIfAllEmittersFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.DestroyIfAllEmittersFinished" );

	AKFSprayActor_execDestroyIfAllEmittersFinished_Parms DestroyIfAllEmittersFinished_Parms;

	pFnDestroyIfAllEmittersFinished->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDestroyIfAllEmittersFinished, &DestroyIfAllEmittersFinished_Parms, NULL );

	pFnDestroyIfAllEmittersFinished->FunctionFlags |= 0x400;
};

// Function KFGame.KFSprayActor.UpdateSplashes
// [0x00040501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSprayActor::UpdateSplashes ( )
{
	static UFunction* pFnUpdateSplashes = NULL;

	if ( ! pFnUpdateSplashes )
		pFnUpdateSplashes = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.UpdateSplashes" );

	AKFSprayActor_execUpdateSplashes_Parms UpdateSplashes_Parms;

	pFnUpdateSplashes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSplashes, &UpdateSplashes_Parms, NULL );

	pFnUpdateSplashes->FunctionFlags |= 0x400;
};

// Function KFGame.KFSprayActor.UpdatePerBoneSprayFX
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFSprayActor::UpdatePerBoneSprayFX ( )
{
	static UFunction* pFnUpdatePerBoneSprayFX = NULL;

	if ( ! pFnUpdatePerBoneSprayFX )
		pFnUpdatePerBoneSprayFX = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.UpdatePerBoneSprayFX" );

	AKFSprayActor_execUpdatePerBoneSprayFX_Parms UpdatePerBoneSprayFX_Parms;

	pFnUpdatePerBoneSprayFX->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdatePerBoneSprayFX, &UpdatePerBoneSprayFX_Parms, NULL );

	pFnUpdatePerBoneSprayFX->FunctionFlags |= 0x400;
};

// Function KFGame.KFSprayActor.UpdateSeeds
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFSprayActor::UpdateSeeds ( )
{
	static UFunction* pFnUpdateSeeds = NULL;

	if ( ! pFnUpdateSeeds )
		pFnUpdateSeeds = UObject::FindObject< UFunction > ( "Function KFGame.KFSprayActor.UpdateSeeds" );

	AKFSprayActor_execUpdateSeeds_Parms UpdateSeeds_Parms;

	pFnUpdateSeeds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateSeeds, &UpdateSeeds_Parms, NULL );

	pFnUpdateSeeds->FunctionFlags |= 0x400;
};

// Function KFGame.KFWireConnector.Timer
// [0x00020102] 
// Parameters infos:

void AKFWireConnector::Timer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWireConnector.Timer" );

	AKFWireConnector_execTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function KFGame.KFWireConnector.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWireConnector::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFWireConnector.PostBeginPlay" );

	AKFWireConnector_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFWireConnector.ApplyBeamProperties
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFWireConnector::ApplyBeamProperties ( )
{
	static UFunction* pFnApplyBeamProperties = NULL;

	if ( ! pFnApplyBeamProperties )
		pFnApplyBeamProperties = UObject::FindObject< UFunction > ( "Function KFGame.KFWireConnector.ApplyBeamProperties" );

	AKFWireConnector_execApplyBeamProperties_Parms ApplyBeamProperties_Parms;

	pFnApplyBeamProperties->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnApplyBeamProperties, &ApplyBeamProperties_Parms, NULL );

	pFnApplyBeamProperties->FunctionFlags |= 0x400;
};

// Function KFGame.KFAfflictionBase.GetAttackSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::GetAttackSpeedModifier ( )
{
	static UFunction* pFnGetAttackSpeedModifier = NULL;

	if ( ! pFnGetAttackSpeedModifier )
		pFnGetAttackSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.GetAttackSpeedModifier" );

	UKFAfflictionBase_execGetAttackSpeedModifier_Parms GetAttackSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetAttackSpeedModifier, &GetAttackSpeedModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.GetSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::GetSpeedModifier ( )
{
	static UFunction* pFnGetSpeedModifier = NULL;

	if ( ! pFnGetSpeedModifier )
		pFnGetSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.GetSpeedModifier" );

	UKFAfflictionBase_execGetSpeedModifier_Parms GetSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetSpeedModifier, &GetSpeedModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.GetDamageModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::GetDamageModifier ( )
{
	static UFunction* pFnGetDamageModifier = NULL;

	if ( ! pFnGetDamageModifier )
		pFnGetDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.GetDamageModifier" );

	UKFAfflictionBase_execGetDamageModifier_Parms GetDamageModifier_Parms;

	this->ProcessEvent ( pFnGetDamageModifier, &GetDamageModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.GetStunModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::GetStunModifier ( )
{
	static UFunction* pFnGetStunModifier = NULL;

	if ( ! pFnGetStunModifier )
		pFnGetStunModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.GetStunModifier" );

	UKFAfflictionBase_execGetStunModifier_Parms GetStunModifier_Parms;

	this->ProcessEvent ( pFnGetStunModifier, &GetStunModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.GetStumbleModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::GetStumbleModifier ( )
{
	static UFunction* pFnGetStumbleModifier = NULL;

	if ( ! pFnGetStumbleModifier )
		pFnGetStumbleModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.GetStumbleModifier" );

	UKFAfflictionBase_execGetStumbleModifier_Parms GetStumbleModifier_Parms;

	this->ProcessEvent ( pFnGetStumbleModifier, &GetStumbleModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.GetKnockdownModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::GetKnockdownModifier ( )
{
	static UFunction* pFnGetKnockdownModifier = NULL;

	if ( ! pFnGetKnockdownModifier )
		pFnGetKnockdownModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.GetKnockdownModifier" );

	UKFAfflictionBase_execGetKnockdownModifier_Parms GetKnockdownModifier_Parms;

	this->ProcessEvent ( pFnGetKnockdownModifier, &GetKnockdownModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.Tick
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UKFAfflictionBase::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.Tick" );

	UKFAfflictionBase_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.SetMaterialParameter
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::SetMaterialParameter ( )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.SetMaterialParameter" );

	UKFAfflictionBase_execSetMaterialParameter_Parms SetMaterialParameter_Parms;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.ToggleEffects
// [0x00024002] 
// Parameters infos:

void UKFAfflictionBase::ToggleEffects ( )
{
	static UFunction* pFnToggleEffects = NULL;

	if ( ! pFnToggleEffects )
		pFnToggleEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.ToggleEffects" );

	UKFAfflictionBase_execToggleEffects_Parms ToggleEffects_Parms;

	this->ProcessEvent ( pFnToggleEffects, &ToggleEffects_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.ShutDown
// [0x00020000] 
// Parameters infos:

void UKFAfflictionBase::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.ShutDown" );

	UKFAfflictionBase_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.GetSpecialMoveFlags
// [0x00020000] 
// Parameters infos:

void UKFAfflictionBase::GetSpecialMoveFlags ( )
{
	static UFunction* pFnGetSpecialMoveFlags = NULL;

	if ( ! pFnGetSpecialMoveFlags )
		pFnGetSpecialMoveFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.GetSpecialMoveFlags" );

	UKFAfflictionBase_execGetSpecialMoveFlags_Parms GetSpecialMoveFlags_Parms;

	this->ProcessEvent ( pFnGetSpecialMoveFlags, &GetSpecialMoveFlags_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.Activate
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.Activate" );

	UKFAfflictionBase_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.Accrue
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::Accrue ( )
{
	static UFunction* pFnAccrue = NULL;

	if ( ! pFnAccrue )
		pFnAccrue = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.Accrue" );

	UKFAfflictionBase_execAccrue_Parms Accrue_Parms;

	this->ProcessEvent ( pFnAccrue, &Accrue_Parms, NULL );
};

// Function KFGame.KFAfflictionBase.Init
// [0x00020002] 
// Parameters infos:

void UKFAfflictionBase::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionBase.Init" );

	UKFAfflictionBase_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFPawn.DetachEmitter
// [0x00420102] 
// Parameters infos:

void AKFPawn::DetachEmitter ( )
{
	static UFunction* pFnDetachEmitter = NULL;

	if ( ! pFnDetachEmitter )
		pFnDetachEmitter = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.DetachEmitter" );

	AKFPawn_execDetachEmitter_Parms DetachEmitter_Parms;

	this->ProcessEvent ( pFnDetachEmitter, &DetachEmitter_Parms, NULL );
};

// Function KFGame.KFPawn.GetLocalizedName
// [0x00022002] 
// Parameters infos:

void AKFPawn::GetLocalizedName ( )
{
	static UFunction* pFnGetLocalizedName = NULL;

	if ( ! pFnGetLocalizedName )
		pFnGetLocalizedName = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetLocalizedName" );

	AKFPawn_execGetLocalizedName_Parms GetLocalizedName_Parms;

	this->ProcessEvent ( pFnGetLocalizedName, &GetLocalizedName_Parms, NULL );
};

// Function KFGame.KFPawn.ShouldCorpseCollideWithLivingAfterSleep
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::ShouldCorpseCollideWithLivingAfterSleep ( )
{
	static UFunction* pFnShouldCorpseCollideWithLivingAfterSleep = NULL;

	if ( ! pFnShouldCorpseCollideWithLivingAfterSleep )
		pFnShouldCorpseCollideWithLivingAfterSleep = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ShouldCorpseCollideWithLivingAfterSleep" );

	AKFPawn_execShouldCorpseCollideWithLivingAfterSleep_Parms ShouldCorpseCollideWithLivingAfterSleep_Parms;

	pFnShouldCorpseCollideWithLivingAfterSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldCorpseCollideWithLivingAfterSleep, &ShouldCorpseCollideWithLivingAfterSleep_Parms, NULL );

	pFnShouldCorpseCollideWithLivingAfterSleep->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.ShouldCorpseCollideWithDeadAfterSleep
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::ShouldCorpseCollideWithDeadAfterSleep ( )
{
	static UFunction* pFnShouldCorpseCollideWithDeadAfterSleep = NULL;

	if ( ! pFnShouldCorpseCollideWithDeadAfterSleep )
		pFnShouldCorpseCollideWithDeadAfterSleep = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ShouldCorpseCollideWithDeadAfterSleep" );

	AKFPawn_execShouldCorpseCollideWithDeadAfterSleep_Parms ShouldCorpseCollideWithDeadAfterSleep_Parms;

	pFnShouldCorpseCollideWithDeadAfterSleep->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldCorpseCollideWithDeadAfterSleep, &ShouldCorpseCollideWithDeadAfterSleep_Parms, NULL );

	pFnShouldCorpseCollideWithDeadAfterSleep->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.ShouldCorpseCollideWithLiving
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::ShouldCorpseCollideWithLiving ( )
{
	static UFunction* pFnShouldCorpseCollideWithLiving = NULL;

	if ( ! pFnShouldCorpseCollideWithLiving )
		pFnShouldCorpseCollideWithLiving = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ShouldCorpseCollideWithLiving" );

	AKFPawn_execShouldCorpseCollideWithLiving_Parms ShouldCorpseCollideWithLiving_Parms;

	pFnShouldCorpseCollideWithLiving->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldCorpseCollideWithLiving, &ShouldCorpseCollideWithLiving_Parms, NULL );

	pFnShouldCorpseCollideWithLiving->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.ShouldCorpseCollideWithDead
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::ShouldCorpseCollideWithDead ( )
{
	static UFunction* pFnShouldCorpseCollideWithDead = NULL;

	if ( ! pFnShouldCorpseCollideWithDead )
		pFnShouldCorpseCollideWithDead = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ShouldCorpseCollideWithDead" );

	AKFPawn_execShouldCorpseCollideWithDead_Parms ShouldCorpseCollideWithDead_Parms;

	pFnShouldCorpseCollideWithDead->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldCorpseCollideWithDead, &ShouldCorpseCollideWithDead_Parms, NULL );

	pFnShouldCorpseCollideWithDead->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.DisplayDebug
// [0x00420102] 
// Parameters infos:

void AKFPawn::DisplayDebug ( )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.DisplayDebug" );

	AKFPawn_execDisplayDebug_Parms DisplayDebug_Parms;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );
};

// Function KFGame.KFPawn.KFMessagePlayer
// [0x00024801] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPawn::eventKFMessagePlayer ( )
{
	static UFunction* pFnKFMessagePlayer = NULL;

	if ( ! pFnKFMessagePlayer )
		pFnKFMessagePlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.KFMessagePlayer" );

	AKFPawn_eventKFMessagePlayer_Parms KFMessagePlayer_Parms;

	this->ProcessEvent ( pFnKFMessagePlayer, &KFMessagePlayer_Parms, NULL );
};

// Function KFGame.KFPawn.CanAITargetThisPawn
// [0x00020002] 
// Parameters infos:

void AKFPawn::CanAITargetThisPawn ( )
{
	static UFunction* pFnCanAITargetThisPawn = NULL;

	if ( ! pFnCanAITargetThisPawn )
		pFnCanAITargetThisPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CanAITargetThisPawn" );

	AKFPawn_execCanAITargetThisPawn_Parms CanAITargetThisPawn_Parms;

	this->ProcessEvent ( pFnCanAITargetThisPawn, &CanAITargetThisPawn_Parms, NULL );
};

// Function KFGame.KFPawn.ShouldBeWandering
// [0x00020100] 
// Parameters infos:

void AKFPawn::ShouldBeWandering ( )
{
	static UFunction* pFnShouldBeWandering = NULL;

	if ( ! pFnShouldBeWandering )
		pFnShouldBeWandering = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ShouldBeWandering" );

	AKFPawn_execShouldBeWandering_Parms ShouldBeWandering_Parms;

	this->ProcessEvent ( pFnShouldBeWandering, &ShouldBeWandering_Parms, NULL );
};

// Function KFGame.KFPawn.CausePanicWander
// [0x00020000] 
// Parameters infos:

void AKFPawn::CausePanicWander ( )
{
	static UFunction* pFnCausePanicWander = NULL;

	if ( ! pFnCausePanicWander )
		pFnCausePanicWander = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CausePanicWander" );

	AKFPawn_execCausePanicWander_Parms CausePanicWander_Parms;

	this->ProcessEvent ( pFnCausePanicWander, &CausePanicWander_Parms, NULL );
};

// Function KFGame.KFPawn.SetWeakGrabCoolDown
// [0x00020002] 
// Parameters infos:

void AKFPawn::SetWeakGrabCoolDown ( )
{
	static UFunction* pFnSetWeakGrabCoolDown = NULL;

	if ( ! pFnSetWeakGrabCoolDown )
		pFnSetWeakGrabCoolDown = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetWeakGrabCoolDown" );

	AKFPawn_execSetWeakGrabCoolDown_Parms SetWeakGrabCoolDown_Parms;

	this->ProcessEvent ( pFnSetWeakGrabCoolDown, &SetWeakGrabCoolDown_Parms, NULL );
};

// Function KFGame.KFPawn.CanBeGrabbed
// [0x00024002] 
// Parameters infos:

void AKFPawn::CanBeGrabbed ( )
{
	static UFunction* pFnCanBeGrabbed = NULL;

	if ( ! pFnCanBeGrabbed )
		pFnCanBeGrabbed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CanBeGrabbed" );

	AKFPawn_execCanBeGrabbed_Parms CanBeGrabbed_Parms;

	this->ProcessEvent ( pFnCanBeGrabbed, &CanBeGrabbed_Parms, NULL );
};

// Function KFGame.KFPawn.IsMovementDisabledDuringSpecialMove
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventIsMovementDisabledDuringSpecialMove ( )
{
	static UFunction* pFnIsMovementDisabledDuringSpecialMove = NULL;

	if ( ! pFnIsMovementDisabledDuringSpecialMove )
		pFnIsMovementDisabledDuringSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsMovementDisabledDuringSpecialMove" );

	AKFPawn_eventIsMovementDisabledDuringSpecialMove_Parms IsMovementDisabledDuringSpecialMove_Parms;

	this->ProcessEvent ( pFnIsMovementDisabledDuringSpecialMove, &IsMovementDisabledDuringSpecialMove_Parms, NULL );
};

// Function KFGame.KFPawn.NotifySpecialMoveEnded
// [0x00020100] 
// Parameters infos:

void AKFPawn::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.NotifySpecialMoveEnded" );

	AKFPawn_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFPawn.CanDoSpecialMove
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventCanDoSpecialMove ( )
{
	static UFunction* pFnCanDoSpecialMove = NULL;

	if ( ! pFnCanDoSpecialMove )
		pFnCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CanDoSpecialMove" );

	AKFPawn_eventCanDoSpecialMove_Parms CanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnCanDoSpecialMove, &CanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFPawn.EndSpecialMove
// [0x00024903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPawn::eventEndSpecialMove ( )
{
	static UFunction* pFnEndSpecialMove = NULL;

	if ( ! pFnEndSpecialMove )
		pFnEndSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.EndSpecialMove" );

	AKFPawn_eventEndSpecialMove_Parms EndSpecialMove_Parms;

	this->ProcessEvent ( pFnEndSpecialMove, &EndSpecialMove_Parms, NULL );
};

// Function KFGame.KFPawn.ServerDoSpecialMove
// [0x002240C3] ( FUNC_Final )
// Parameters infos:

void AKFPawn::ServerDoSpecialMove ( )
{
	static UFunction* pFnServerDoSpecialMove = NULL;

	if ( ! pFnServerDoSpecialMove )
		pFnServerDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ServerDoSpecialMove" );

	AKFPawn_execServerDoSpecialMove_Parms ServerDoSpecialMove_Parms;

	this->ProcessEvent ( pFnServerDoSpecialMove, &ServerDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFPawn.DoSpecialMove
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventDoSpecialMove ( )
{
	static UFunction* pFnDoSpecialMove = NULL;

	if ( ! pFnDoSpecialMove )
		pFnDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.DoSpecialMove" );

	AKFPawn_eventDoSpecialMove_Parms DoSpecialMove_Parms;

	this->ProcessEvent ( pFnDoSpecialMove, &DoSpecialMove_Parms, NULL );
};

// Function KFGame.KFPawn.IsDoingSpecialMove
// [0x00024501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPawn::IsDoingSpecialMove ( )
{
	static UFunction* pFnIsDoingSpecialMove = NULL;

	if ( ! pFnIsDoingSpecialMove )
		pFnIsDoingSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsDoingSpecialMove" );

	AKFPawn_execIsDoingSpecialMove_Parms IsDoingSpecialMove_Parms;

	pFnIsDoingSpecialMove->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDoingSpecialMove, &IsDoingSpecialMove_Parms, NULL );

	pFnIsDoingSpecialMove->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.EndOfDialogTimer
// [0x00020002] 
// Parameters infos:

void AKFPawn::EndOfDialogTimer ( )
{
	static UFunction* pFnEndOfDialogTimer = NULL;

	if ( ! pFnEndOfDialogTimer )
		pFnEndOfDialogTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.EndOfDialogTimer" );

	AKFPawn_execEndOfDialogTimer_Parms EndOfDialogTimer_Parms;

	this->ProcessEvent ( pFnEndOfDialogTimer, &EndOfDialogTimer_Parms, NULL );
};

// Function KFGame.KFPawn.GetVoiceGroupEventDataClass
// [0x00020002] 
// Parameters infos:

void AKFPawn::GetVoiceGroupEventDataClass ( )
{
	static UFunction* pFnGetVoiceGroupEventDataClass = NULL;

	if ( ! pFnGetVoiceGroupEventDataClass )
		pFnGetVoiceGroupEventDataClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetVoiceGroupEventDataClass" );

	AKFPawn_execGetVoiceGroupEventDataClass_Parms GetVoiceGroupEventDataClass_Parms;

	this->ProcessEvent ( pFnGetVoiceGroupEventDataClass, &GetVoiceGroupEventDataClass_Parms, NULL );
};

// Function KFGame.KFPawn.HasValidVoiceEventData
// [0x00020002] 
// Parameters infos:

void AKFPawn::HasValidVoiceEventData ( )
{
	static UFunction* pFnHasValidVoiceEventData = NULL;

	if ( ! pFnHasValidVoiceEventData )
		pFnHasValidVoiceEventData = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HasValidVoiceEventData" );

	AKFPawn_execHasValidVoiceEventData_Parms HasValidVoiceEventData_Parms;

	this->ProcessEvent ( pFnHasValidVoiceEventData, &HasValidVoiceEventData_Parms, NULL );
};

// Function KFGame.KFPawn.HandleDialogResponse
// [0x00020000] 
// Parameters infos:

void AKFPawn::HandleDialogResponse ( )
{
	static UFunction* pFnHandleDialogResponse = NULL;

	if ( ! pFnHandleDialogResponse )
		pFnHandleDialogResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HandleDialogResponse" );

	AKFPawn_execHandleDialogResponse_Parms HandleDialogResponse_Parms;

	this->ProcessEvent ( pFnHandleDialogResponse, &HandleDialogResponse_Parms, NULL );
};

// Function KFGame.KFPawn.PlayDialogEvent
// [0x00020102] 
// Parameters infos:

void AKFPawn::PlayDialogEvent ( )
{
	static UFunction* pFnPlayDialogEvent = NULL;

	if ( ! pFnPlayDialogEvent )
		pFnPlayDialogEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayDialogEvent" );

	AKFPawn_execPlayDialogEvent_Parms PlayDialogEvent_Parms;

	this->ProcessEvent ( pFnPlayDialogEvent, &PlayDialogEvent_Parms, NULL );
};

// Function KFGame.KFPawn.IsPlayingDialogEvent
// [0x00020002] 
// Parameters infos:

void AKFPawn::IsPlayingDialogEvent ( )
{
	static UFunction* pFnIsPlayingDialogEvent = NULL;

	if ( ! pFnIsPlayingDialogEvent )
		pFnIsPlayingDialogEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsPlayingDialogEvent" );

	AKFPawn_execIsPlayingDialogEvent_Parms IsPlayingDialogEvent_Parms;

	this->ProcessEvent ( pFnIsPlayingDialogEvent, &IsPlayingDialogEvent_Parms, NULL );
};

// Function KFGame.KFPawn.IsSpeaking
// [0x00020002] 
// Parameters infos:

void AKFPawn::IsSpeaking ( )
{
	static UFunction* pFnIsSpeaking = NULL;

	if ( ! pFnIsSpeaking )
		pFnIsSpeaking = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsSpeaking" );

	AKFPawn_execIsSpeaking_Parms IsSpeaking_Parms;

	this->ProcessEvent ( pFnIsSpeaking, &IsSpeaking_Parms, NULL );
};

// Function KFGame.KFPawn.StopDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn::StopDialog ( )
{
	static UFunction* pFnStopDialog = NULL;

	if ( ! pFnStopDialog )
		pFnStopDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.StopDialog" );

	AKFPawn_execStopDialog_Parms StopDialog_Parms;

	this->ProcessEvent ( pFnStopDialog, &StopDialog_Parms, NULL );
};

// Function KFGame.KFPawn.PlayDialog
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::PlayDialog ( )
{
	static UFunction* pFnPlayDialog = NULL;

	if ( ! pFnPlayDialog )
		pFnPlayDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayDialog" );

	AKFPawn_execPlayDialog_Parms PlayDialog_Parms;

	pFnPlayDialog->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayDialog, &PlayDialog_Parms, NULL );

	pFnPlayDialog->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.OnStackingAfflictionChanged
// [0x00020000] 
// Parameters infos:

void AKFPawn::OnStackingAfflictionChanged ( )
{
	static UFunction* pFnOnStackingAfflictionChanged = NULL;

	if ( ! pFnOnStackingAfflictionChanged )
		pFnOnStackingAfflictionChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.OnStackingAfflictionChanged" );

	AKFPawn_execOnStackingAfflictionChanged_Parms OnStackingAfflictionChanged_Parms;

	this->ProcessEvent ( pFnOnStackingAfflictionChanged, &OnStackingAfflictionChanged_Parms, NULL );
};

// Function KFGame.KFPawn.ProcessAdditionalHitFx
// [0x00820102] 
// Parameters infos:

void AKFPawn::ProcessAdditionalHitFx ( )
{
	static UFunction* pFnProcessAdditionalHitFx = NULL;

	if ( ! pFnProcessAdditionalHitFx )
		pFnProcessAdditionalHitFx = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ProcessAdditionalHitFx" );

	AKFPawn_execProcessAdditionalHitFx_Parms ProcessAdditionalHitFx_Parms;

	this->ProcessEvent ( pFnProcessAdditionalHitFx, &ProcessAdditionalHitFx_Parms, NULL );
};

// Function KFGame.KFPawn.ProcessHitFx
// [0x00820102] 
// Parameters infos:

void AKFPawn::ProcessHitFx ( )
{
	static UFunction* pFnProcessHitFx = NULL;

	if ( ! pFnProcessHitFx )
		pFnProcessHitFx = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ProcessHitFx" );

	AKFPawn_execProcessHitFx_Parms ProcessHitFx_Parms;

	this->ProcessEvent ( pFnProcessHitFx, &ProcessHitFx_Parms, NULL );
};

// Function KFGame.KFPawn.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.Tick" );

	AKFPawn_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFPawn.SetWeaponComponentRTPCValue
// [0x00020002] 
// Parameters infos:

void AKFPawn::SetWeaponComponentRTPCValue ( )
{
	static UFunction* pFnSetWeaponComponentRTPCValue = NULL;

	if ( ! pFnSetWeaponComponentRTPCValue )
		pFnSetWeaponComponentRTPCValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetWeaponComponentRTPCValue" );

	AKFPawn_execSetWeaponComponentRTPCValue_Parms SetWeaponComponentRTPCValue_Parms;

	this->ProcessEvent ( pFnSetWeaponComponentRTPCValue, &SetWeaponComponentRTPCValue_Parms, NULL );
};

// Function KFGame.KFPawn.SetWeaponAmbientSound
// [0x00024102] 
// Parameters infos:

void AKFPawn::SetWeaponAmbientSound ( )
{
	static UFunction* pFnSetWeaponAmbientSound = NULL;

	if ( ! pFnSetWeaponAmbientSound )
		pFnSetWeaponAmbientSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetWeaponAmbientSound" );

	AKFPawn_execSetWeaponAmbientSound_Parms SetWeaponAmbientSound_Parms;

	this->ProcessEvent ( pFnSetWeaponAmbientSound, &SetWeaponAmbientSound_Parms, NULL );
};

// Function KFGame.KFPawn.SetPawnAmbientSound
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetPawnAmbientSound ( )
{
	static UFunction* pFnSetPawnAmbientSound = NULL;

	if ( ! pFnSetPawnAmbientSound )
		pFnSetPawnAmbientSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetPawnAmbientSound" );

	AKFPawn_execSetPawnAmbientSound_Parms SetPawnAmbientSound_Parms;

	this->ProcessEvent ( pFnSetPawnAmbientSound, &SetPawnAmbientSound_Parms, NULL );
};

// Function KFGame.KFPawn.GetMaterialBelowFeet
// [0x00824102] 
// Parameters infos:

void AKFPawn::GetMaterialBelowFeet ( )
{
	static UFunction* pFnGetMaterialBelowFeet = NULL;

	if ( ! pFnGetMaterialBelowFeet )
		pFnGetMaterialBelowFeet = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetMaterialBelowFeet" );

	AKFPawn_execGetMaterialBelowFeet_Parms GetMaterialBelowFeet_Parms;

	this->ProcessEvent ( pFnGetMaterialBelowFeet, &GetMaterialBelowFeet_Parms, NULL );
};

// Function KFGame.KFPawn.PlayFootStepSound
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventPlayFootStepSound ( )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayFootStepSound" );

	AKFPawn_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function KFGame.KFPawn.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventLanded ( )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.Landed" );

	AKFPawn_eventLanded_Parms Landed_Parms;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function KFGame.KFPawn.ReplicateSound
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::ReplicateSound ( )
{
	static UFunction* pFnReplicateSound = NULL;

	if ( ! pFnReplicateSound )
		pFnReplicateSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ReplicateSound" );

	AKFPawn_execReplicateSound_Parms ReplicateSound_Parms;

	pFnReplicateSound->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReplicateSound, &ReplicateSound_Parms, NULL );

	pFnReplicateSound->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.GetAKRotation
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::GetAKRotation ( )
{
	static UFunction* pFnGetAKRotation = NULL;

	if ( ! pFnGetAKRotation )
		pFnGetAKRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetAKRotation" );

	AKFPawn_execGetAKRotation_Parms GetAKRotation_Parms;

	pFnGetAKRotation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetAKRotation, &GetAKRotation_Parms, NULL );

	pFnGetAKRotation->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.SetHeadScale
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::SetHeadScale ( )
{
	static UFunction* pFnSetHeadScale = NULL;

	if ( ! pFnSetHeadScale )
		pFnSetHeadScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetHeadScale" );

	AKFPawn_execSetHeadScale_Parms SetHeadScale_Parms;

	pFnSetHeadScale->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHeadScale, &SetHeadScale_Parms, NULL );

	pFnSetHeadScale->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.OnAnimNotifyParticleSystemSpawned
// [0x00020102] 
// Parameters infos:

void AKFPawn::OnAnimNotifyParticleSystemSpawned ( )
{
	static UFunction* pFnOnAnimNotifyParticleSystemSpawned = NULL;

	if ( ! pFnOnAnimNotifyParticleSystemSpawned )
		pFnOnAnimNotifyParticleSystemSpawned = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.OnAnimNotifyParticleSystemSpawned" );

	AKFPawn_execOnAnimNotifyParticleSystemSpawned_Parms OnAnimNotifyParticleSystemSpawned_Parms;

	this->ProcessEvent ( pFnOnAnimNotifyParticleSystemSpawned, &OnAnimNotifyParticleSystemSpawned_Parms, NULL );
};

// Function KFGame.KFPawn.SetEnableFleXCollision
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetEnableFleXCollision ( )
{
	static UFunction* pFnSetEnableFleXCollision = NULL;

	if ( ! pFnSetEnableFleXCollision )
		pFnSetEnableFleXCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetEnableFleXCollision" );

	AKFPawn_execSetEnableFleXCollision_Parms SetEnableFleXCollision_Parms;

	this->ProcessEvent ( pFnSetEnableFleXCollision, &SetEnableFleXCollision_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateMeshForFleXCollision
// [0x00020102] 
// Parameters infos:

void AKFPawn::UpdateMeshForFleXCollision ( )
{
	static UFunction* pFnUpdateMeshForFleXCollision = NULL;

	if ( ! pFnUpdateMeshForFleXCollision )
		pFnUpdateMeshForFleXCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateMeshForFleXCollision" );

	AKFPawn_execUpdateMeshForFleXCollision_Parms UpdateMeshForFleXCollision_Parms;

	this->ProcessEvent ( pFnUpdateMeshForFleXCollision, &UpdateMeshForFleXCollision_Parms, NULL );
};

// Function KFGame.KFPawn.GetSpecialMoveTag
// [0x00020102] 
// Parameters infos:

void AKFPawn::GetSpecialMoveTag ( )
{
	static UFunction* pFnGetSpecialMoveTag = NULL;

	if ( ! pFnGetSpecialMoveTag )
		pFnGetSpecialMoveTag = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetSpecialMoveTag" );

	AKFPawn_execGetSpecialMoveTag_Parms GetSpecialMoveTag_Parms;

	this->ProcessEvent ( pFnGetSpecialMoveTag, &GetSpecialMoveTag_Parms, NULL );
};

// Function KFGame.KFPawn.SetDefaultAimOffsetNodesProfile
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPawn::SetDefaultAimOffsetNodesProfile ( )
{
	static UFunction* pFnSetDefaultAimOffsetNodesProfile = NULL;

	if ( ! pFnSetDefaultAimOffsetNodesProfile )
		pFnSetDefaultAimOffsetNodesProfile = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetDefaultAimOffsetNodesProfile" );

	AKFPawn_execSetDefaultAimOffsetNodesProfile_Parms SetDefaultAimOffsetNodesProfile_Parms;

	this->ProcessEvent ( pFnSetDefaultAimOffsetNodesProfile, &SetDefaultAimOffsetNodesProfile_Parms, NULL );
};

// Function KFGame.KFPawn.SetAimOffsetNodesProfile
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPawn::SetAimOffsetNodesProfile ( )
{
	static UFunction* pFnSetAimOffsetNodesProfile = NULL;

	if ( ! pFnSetAimOffsetNodesProfile )
		pFnSetAimOffsetNodesProfile = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetAimOffsetNodesProfile" );

	AKFPawn_execSetAimOffsetNodesProfile_Parms SetAimOffsetNodesProfile_Parms;

	this->ProcessEvent ( pFnSetAimOffsetNodesProfile, &SetAimOffsetNodesProfile_Parms, NULL );
};

// Function KFGame.KFPawn.StopAllAnimations
// [0x00020102] 
// Parameters infos:

void AKFPawn::StopAllAnimations ( )
{
	static UFunction* pFnStopAllAnimations = NULL;

	if ( ! pFnStopAllAnimations )
		pFnStopAllAnimations = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.StopAllAnimations" );

	AKFPawn_execStopAllAnimations_Parms StopAllAnimations_Parms;

	this->ProcessEvent ( pFnStopAllAnimations, &StopAllAnimations_Parms, NULL );
};

// Function KFGame.KFPawn.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventOnAnimEnd ( )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.OnAnimEnd" );

	AKFPawn_eventOnAnimEnd_Parms OnAnimEnd_Parms;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function KFGame.KFPawn.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PostInitAnimTree" );

	AKFPawn_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function KFGame.KFPawn.CacheAnimNodes
// [0x00020D00] ( FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPawn::eventCacheAnimNodes ( )
{
	static UFunction* pFnCacheAnimNodes = NULL;

	if ( ! pFnCacheAnimNodes )
		pFnCacheAnimNodes = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CacheAnimNodes" );

	AKFPawn_eventCacheAnimNodes_Parms CacheAnimNodes_Parms;

	pFnCacheAnimNodes->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCacheAnimNodes, &CacheAnimNodes_Parms, NULL );

	pFnCacheAnimNodes->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.ClearHeadTrackTarget
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::ClearHeadTrackTarget ( )
{
	static UFunction* pFnClearHeadTrackTarget = NULL;

	if ( ! pFnClearHeadTrackTarget )
		pFnClearHeadTrackTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ClearHeadTrackTarget" );

	AKFPawn_execClearHeadTrackTarget_Parms ClearHeadTrackTarget_Parms;

	pFnClearHeadTrackTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearHeadTrackTarget, &ClearHeadTrackTarget_Parms, NULL );

	pFnClearHeadTrackTarget->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.SetHeadTrackTarget
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::SetHeadTrackTarget ( )
{
	static UFunction* pFnSetHeadTrackTarget = NULL;

	if ( ! pFnSetHeadTrackTarget )
		pFnSetHeadTrackTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetHeadTrackTarget" );

	AKFPawn_execSetHeadTrackTarget_Parms SetHeadTrackTarget_Parms;

	pFnSetHeadTrackTarget->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetHeadTrackTarget, &SetHeadTrackTarget_Parms, NULL );

	pFnSetHeadTrackTarget->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.UpdateMeshTranslationOffset
// [0x00024500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::UpdateMeshTranslationOffset ( )
{
	static UFunction* pFnUpdateMeshTranslationOffset = NULL;

	if ( ! pFnUpdateMeshTranslationOffset )
		pFnUpdateMeshTranslationOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateMeshTranslationOffset" );

	AKFPawn_execUpdateMeshTranslationOffset_Parms UpdateMeshTranslationOffset_Parms;

	pFnUpdateMeshTranslationOffset->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMeshTranslationOffset, &UpdateMeshTranslationOffset_Parms, NULL );

	pFnUpdateMeshTranslationOffset->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.StopBodyAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::StopBodyAnim ( )
{
	static UFunction* pFnStopBodyAnim = NULL;

	if ( ! pFnStopBodyAnim )
		pFnStopBodyAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.StopBodyAnim" );

	AKFPawn_execStopBodyAnim_Parms StopBodyAnim_Parms;

	pFnStopBodyAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopBodyAnim, &StopBodyAnim_Parms, NULL );

	pFnStopBodyAnim->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.PlayBodyAnim
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::PlayBodyAnim ( )
{
	static UFunction* pFnPlayBodyAnim = NULL;

	if ( ! pFnPlayBodyAnim )
		pFnPlayBodyAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayBodyAnim" );

	AKFPawn_execPlayBodyAnim_Parms PlayBodyAnim_Parms;

	pFnPlayBodyAnim->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayBodyAnim, &PlayBodyAnim_Parms, NULL );

	pFnPlayBodyAnim->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.AnimInterruptNotifyTimer
// [0x00020000] 
// Parameters infos:

void AKFPawn::AnimInterruptNotifyTimer ( )
{
	static UFunction* pFnAnimInterruptNotifyTimer = NULL;

	if ( ! pFnAnimInterruptNotifyTimer )
		pFnAnimInterruptNotifyTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.AnimInterruptNotifyTimer" );

	AKFPawn_execAnimInterruptNotifyTimer_Parms AnimInterruptNotifyTimer_Parms;

	this->ProcessEvent ( pFnAnimInterruptNotifyTimer, &AnimInterruptNotifyTimer_Parms, NULL );
};

// Function KFGame.KFPawn.GetCurrentBattlePhase
// [0x00020102] 
// Parameters infos:

void AKFPawn::GetCurrentBattlePhase ( )
{
	static UFunction* pFnGetCurrentBattlePhase = NULL;

	if ( ! pFnGetCurrentBattlePhase )
		pFnGetCurrentBattlePhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetCurrentBattlePhase" );

	AKFPawn_execGetCurrentBattlePhase_Parms GetCurrentBattlePhase_Parms;

	this->ProcessEvent ( pFnGetCurrentBattlePhase, &GetCurrentBattlePhase_Parms, NULL );
};

// Function KFGame.KFPawn.TickDamageOverTime
// [0x00020002] 
// Parameters infos:

void AKFPawn::TickDamageOverTime ( )
{
	static UFunction* pFnTickDamageOverTime = NULL;

	if ( ! pFnTickDamageOverTime )
		pFnTickDamageOverTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.TickDamageOverTime" );

	AKFPawn_execTickDamageOverTime_Parms TickDamageOverTime_Parms;

	this->ProcessEvent ( pFnTickDamageOverTime, &TickDamageOverTime_Parms, NULL );
};

// Function KFGame.KFPawn.GetPerkDoTScaler
// [0x00024002] 
// Parameters infos:

void AKFPawn::GetPerkDoTScaler ( )
{
	static UFunction* pFnGetPerkDoTScaler = NULL;

	if ( ! pFnGetPerkDoTScaler )
		pFnGetPerkDoTScaler = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetPerkDoTScaler" );

	AKFPawn_execGetPerkDoTScaler_Parms GetPerkDoTScaler_Parms;

	this->ProcessEvent ( pFnGetPerkDoTScaler, &GetPerkDoTScaler_Parms, NULL );
};

// Function KFGame.KFPawn.ApplyDamageOverTime
// [0x00820002] 
// Parameters infos:

void AKFPawn::ApplyDamageOverTime ( )
{
	static UFunction* pFnApplyDamageOverTime = NULL;

	if ( ! pFnApplyDamageOverTime )
		pFnApplyDamageOverTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ApplyDamageOverTime" );

	AKFPawn_execApplyDamageOverTime_Parms ApplyDamageOverTime_Parms;

	this->ProcessEvent ( pFnApplyDamageOverTime, &ApplyDamageOverTime_Parms, NULL );
};

// Function KFGame.KFPawn.HandleAfflictionsOnHit
// [0x00020002] 
// Parameters infos:

void AKFPawn::HandleAfflictionsOnHit ( )
{
	static UFunction* pFnHandleAfflictionsOnHit = NULL;

	if ( ! pFnHandleAfflictionsOnHit )
		pFnHandleAfflictionsOnHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HandleAfflictionsOnHit" );

	AKFPawn_execHandleAfflictionsOnHit_Parms HandleAfflictionsOnHit_Parms;

	this->ProcessEvent ( pFnHandleAfflictionsOnHit, &HandleAfflictionsOnHit_Parms, NULL );
};

// Function KFGame.KFPawn.AdjustAffliction
// [0x00420100] 
// Parameters infos:

void AKFPawn::AdjustAffliction ( )
{
	static UFunction* pFnAdjustAffliction = NULL;

	if ( ! pFnAdjustAffliction )
		pFnAdjustAffliction = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.AdjustAffliction" );

	AKFPawn_execAdjustAffliction_Parms AdjustAffliction_Parms;

	this->ProcessEvent ( pFnAdjustAffliction, &AdjustAffliction_Parms, NULL );
};

// Function KFGame.KFPawn.GetHitZoneSkinTypeEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn::GetHitZoneSkinTypeEffects ( )
{
	static UFunction* pFnGetHitZoneSkinTypeEffects = NULL;

	if ( ! pFnGetHitZoneSkinTypeEffects )
		pFnGetHitZoneSkinTypeEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetHitZoneSkinTypeEffects" );

	AKFPawn_execGetHitZoneSkinTypeEffects_Parms GetHitZoneSkinTypeEffects_Parms;

	this->ProcessEvent ( pFnGetHitZoneSkinTypeEffects, &GetHitZoneSkinTypeEffects_Parms, NULL );
};

// Function KFGame.KFPawn.Knockdown
// [0x00024002] 
// Parameters infos:

void AKFPawn::Knockdown ( )
{
	static UFunction* pFnKnockdown = NULL;

	if ( ! pFnKnockdown )
		pFnKnockdown = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.Knockdown" );

	AKFPawn_execKnockdown_Parms Knockdown_Parms;

	this->ProcessEvent ( pFnKnockdown, &Knockdown_Parms, NULL );
};

// Function KFGame.KFPawn.SetRagdollWarningLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::SetRagdollWarningLevel ( )
{
	static UFunction* pFnSetRagdollWarningLevel = NULL;

	if ( ! pFnSetRagdollWarningLevel )
		pFnSetRagdollWarningLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetRagdollWarningLevel" );

	AKFPawn_execSetRagdollWarningLevel_Parms SetRagdollWarningLevel_Parms;

	pFnSetRagdollWarningLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetRagdollWarningLevel, &SetRagdollWarningLevel_Parms, NULL );

	pFnSetRagdollWarningLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.OnRigidBodyRefusedToSleep
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventOnRigidBodyRefusedToSleep ( )
{
	static UFunction* pFnOnRigidBodyRefusedToSleep = NULL;

	if ( ! pFnOnRigidBodyRefusedToSleep )
		pFnOnRigidBodyRefusedToSleep = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.OnRigidBodyRefusedToSleep" );

	AKFPawn_eventOnRigidBodyRefusedToSleep_Parms OnRigidBodyRefusedToSleep_Parms;

	this->ProcessEvent ( pFnOnRigidBodyRefusedToSleep, &OnRigidBodyRefusedToSleep_Parms, NULL );
};

// Function KFGame.KFPawn.OnRigidBodyLinearConstraintViolated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventOnRigidBodyLinearConstraintViolated ( )
{
	static UFunction* pFnOnRigidBodyLinearConstraintViolated = NULL;

	if ( ! pFnOnRigidBodyLinearConstraintViolated )
		pFnOnRigidBodyLinearConstraintViolated = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.OnRigidBodyLinearConstraintViolated" );

	AKFPawn_eventOnRigidBodyLinearConstraintViolated_Parms OnRigidBodyLinearConstraintViolated_Parms;

	this->ProcessEvent ( pFnOnRigidBodyLinearConstraintViolated, &OnRigidBodyLinearConstraintViolated_Parms, NULL );
};

// Function KFGame.KFPawn.RagdollArm
// [0x00020102] 
// Parameters infos:

void AKFPawn::RagdollArm ( )
{
	static UFunction* pFnRagdollArm = NULL;

	if ( ! pFnRagdollArm )
		pFnRagdollArm = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.RagdollArm" );

	AKFPawn_execRagdollArm_Parms RagdollArm_Parms;

	this->ProcessEvent ( pFnRagdollArm, &RagdollArm_Parms, NULL );
};

// Function KFGame.KFPawn.GetRBBoneFromBoneName
// [0x00020102] 
// Parameters infos:

void AKFPawn::GetRBBoneFromBoneName ( )
{
	static UFunction* pFnGetRBBoneFromBoneName = NULL;

	if ( ! pFnGetRBBoneFromBoneName )
		pFnGetRBBoneFromBoneName = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetRBBoneFromBoneName" );

	AKFPawn_execGetRBBoneFromBoneName_Parms GetRBBoneFromBoneName_Parms;

	this->ProcessEvent ( pFnGetRBBoneFromBoneName, &GetRBBoneFromBoneName_Parms, NULL );
};

// Function KFGame.KFPawn.ApplyRagdollImpulse
// [0x00824102] 
// Parameters infos:

void AKFPawn::ApplyRagdollImpulse ( )
{
	static UFunction* pFnApplyRagdollImpulse = NULL;

	if ( ! pFnApplyRagdollImpulse )
		pFnApplyRagdollImpulse = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ApplyRagdollImpulse" );

	AKFPawn_execApplyRagdollImpulse_Parms ApplyRagdollImpulse_Parms;

	this->ProcessEvent ( pFnApplyRagdollImpulse, &ApplyRagdollImpulse_Parms, NULL );
};

// Function KFGame.KFPawn.PlayDamageInstigatorHitEffects
// [0x00020100] 
// Parameters infos:

void AKFPawn::PlayDamageInstigatorHitEffects ( )
{
	static UFunction* pFnPlayDamageInstigatorHitEffects = NULL;

	if ( ! pFnPlayDamageInstigatorHitEffects )
		pFnPlayDamageInstigatorHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayDamageInstigatorHitEffects" );

	AKFPawn_execPlayDamageInstigatorHitEffects_Parms PlayDamageInstigatorHitEffects_Parms;

	this->ProcessEvent ( pFnPlayDamageInstigatorHitEffects, &PlayDamageInstigatorHitEffects_Parms, NULL );
};

// Function KFGame.KFPawn.PitchAudio
// [0x00020102] 
// Parameters infos:

void AKFPawn::PitchAudio ( )
{
	static UFunction* pFnPitchAudio = NULL;

	if ( ! pFnPitchAudio )
		pFnPitchAudio = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PitchAudio" );

	AKFPawn_execPitchAudio_Parms PitchAudio_Parms;

	this->ProcessEvent ( pFnPitchAudio, &PitchAudio_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateBodyScale
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventUpdateBodyScale ( )
{
	static UFunction* pFnUpdateBodyScale = NULL;

	if ( ! pFnUpdateBodyScale )
		pFnUpdateBodyScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateBodyScale" );

	AKFPawn_eventUpdateBodyScale_Parms UpdateBodyScale_Parms;

	this->ProcessEvent ( pFnUpdateBodyScale, &UpdateBodyScale_Parms, NULL );
};

// Function KFGame.KFPawn.PlayHealEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn::PlayHealEffects ( )
{
	static UFunction* pFnPlayHealEffects = NULL;

	if ( ! pFnPlayHealEffects )
		pFnPlayHealEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayHealEffects" );

	AKFPawn_execPlayHealEffects_Parms PlayHealEffects_Parms;

	this->ProcessEvent ( pFnPlayHealEffects, &PlayHealEffects_Parms, NULL );
};

// Function KFGame.KFPawn.PlayTakeHitEffects
// [0x00024102] 
// Parameters infos:

void AKFPawn::PlayTakeHitEffects ( )
{
	static UFunction* pFnPlayTakeHitEffects = NULL;

	if ( ! pFnPlayTakeHitEffects )
		pFnPlayTakeHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayTakeHitEffects" );

	AKFPawn_execPlayTakeHitEffects_Parms PlayTakeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayTakeHitEffects, &PlayTakeHitEffects_Parms, NULL );
};

// Function KFGame.KFPawn.HasInjuredHitZones
// [0x00020102] 
// Parameters infos:

void AKFPawn::HasInjuredHitZones ( )
{
	static UFunction* pFnHasInjuredHitZones = NULL;

	if ( ! pFnHasInjuredHitZones )
		pFnHasInjuredHitZones = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HasInjuredHitZones" );

	AKFPawn_execHasInjuredHitZones_Parms HasInjuredHitZones_Parms;

	this->ProcessEvent ( pFnHasInjuredHitZones, &HasInjuredHitZones_Parms, NULL );
};

// Function KFGame.KFPawn.CanInjureHitZone
// [0x00020002] 
// Parameters infos:

void AKFPawn::CanInjureHitZone ( )
{
	static UFunction* pFnCanInjureHitZone = NULL;

	if ( ! pFnCanInjureHitZone )
		pFnCanInjureHitZone = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CanInjureHitZone" );

	AKFPawn_execCanInjureHitZone_Parms CanInjureHitZone_Parms;

	this->ProcessEvent ( pFnCanInjureHitZone, &CanInjureHitZone_Parms, NULL );
};

// Function KFGame.KFPawn.TakeHitZoneDamage
// [0x00020002] 
// Parameters infos:

void AKFPawn::TakeHitZoneDamage ( )
{
	static UFunction* pFnTakeHitZoneDamage = NULL;

	if ( ! pFnTakeHitZoneDamage )
		pFnTakeHitZoneDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.TakeHitZoneDamage" );

	AKFPawn_execTakeHitZoneDamage_Parms TakeHitZoneDamage_Parms;

	this->ProcessEvent ( pFnTakeHitZoneDamage, &TakeHitZoneDamage_Parms, NULL );
};

// Function KFGame.KFPawn.PlayHeal
// [0x00024002] 
// Parameters infos:

void AKFPawn::PlayHeal ( )
{
	static UFunction* pFnPlayHeal = NULL;

	if ( ! pFnPlayHeal )
		pFnPlayHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayHeal" );

	AKFPawn_execPlayHeal_Parms PlayHeal_Parms;

	this->ProcessEvent ( pFnPlayHeal, &PlayHeal_Parms, NULL );
};

// Function KFGame.KFPawn.AddHitFX
// [0x00020002] 
// Parameters infos:

void AKFPawn::AddHitFX ( )
{
	static UFunction* pFnAddHitFX = NULL;

	if ( ! pFnAddHitFX )
		pFnAddHitFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.AddHitFX" );

	AKFPawn_execAddHitFX_Parms AddHitFX_Parms;

	this->ProcessEvent ( pFnAddHitFX, &AddHitFX_Parms, NULL );
};

// Function KFGame.KFPawn.PlayHit
// [0x00020002] 
// Parameters infos:

void AKFPawn::PlayHit ( )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayHit" );

	AKFPawn_execPlayHit_Parms PlayHit_Parms;

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function KFGame.KFPawn.GetHitZoneIndex
// [0x00020002] 
// Parameters infos:

void AKFPawn::GetHitZoneIndex ( )
{
	static UFunction* pFnGetHitZoneIndex = NULL;

	if ( ! pFnGetHitZoneIndex )
		pFnGetHitZoneIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetHitZoneIndex" );

	AKFPawn_execGetHitZoneIndex_Parms GetHitZoneIndex_Parms;

	this->ProcessEvent ( pFnGetHitZoneIndex, &GetHitZoneIndex_Parms, NULL );
};

// Function KFGame.KFPawn.IsLargeZed
// [0x00022002] 
// Parameters infos:

void AKFPawn::IsLargeZed ( )
{
	static UFunction* pFnIsLargeZed = NULL;

	if ( ! pFnIsLargeZed )
		pFnIsLargeZed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsLargeZed" );

	AKFPawn_execIsLargeZed_Parms IsLargeZed_Parms;

	this->ProcessEvent ( pFnIsLargeZed, &IsLargeZed_Parms, NULL );
};

// Function KFGame.KFPawn.DecodeUnitVector
// [0x00020102] 
// Parameters infos:

void AKFPawn::DecodeUnitVector ( )
{
	static UFunction* pFnDecodeUnitVector = NULL;

	if ( ! pFnDecodeUnitVector )
		pFnDecodeUnitVector = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.DecodeUnitVector" );

	AKFPawn_execDecodeUnitVector_Parms DecodeUnitVector_Parms;

	this->ProcessEvent ( pFnDecodeUnitVector, &DecodeUnitVector_Parms, NULL );
};

// Function KFGame.KFPawn.EncodeUnitVector
// [0x00020002] 
// Parameters infos:

void AKFPawn::EncodeUnitVector ( )
{
	static UFunction* pFnEncodeUnitVector = NULL;

	if ( ! pFnEncodeUnitVector )
		pFnEncodeUnitVector = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.EncodeUnitVector" );

	AKFPawn_execEncodeUnitVector_Parms EncodeUnitVector_Parms;

	this->ProcessEvent ( pFnEncodeUnitVector, &EncodeUnitVector_Parms, NULL );
};

// Function KFGame.KFPawn.NotifyMeleeTakeHit
// [0x00020000] 
// Parameters infos:

void AKFPawn::NotifyMeleeTakeHit ( )
{
	static UFunction* pFnNotifyMeleeTakeHit = NULL;

	if ( ! pFnNotifyMeleeTakeHit )
		pFnNotifyMeleeTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.NotifyMeleeTakeHit" );

	AKFPawn_execNotifyMeleeTakeHit_Parms NotifyMeleeTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyMeleeTakeHit, &NotifyMeleeTakeHit_Parms, NULL );
};

// Function KFGame.KFPawn.HitZoneInjured
// [0x00024100] 
// Parameters infos:

void AKFPawn::HitZoneInjured ( )
{
	static UFunction* pFnHitZoneInjured = NULL;

	if ( ! pFnHitZoneInjured )
		pFnHitZoneInjured = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HitZoneInjured" );

	AKFPawn_execHitZoneInjured_Parms HitZoneInjured_Parms;

	this->ProcessEvent ( pFnHitZoneInjured, &HitZoneInjured_Parms, NULL );
};

// Function KFGame.KFPawn.InitPartialKinematics
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::InitPartialKinematics ( )
{
	static UFunction* pFnInitPartialKinematics = NULL;

	if ( ! pFnInitPartialKinematics )
		pFnInitPartialKinematics = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.InitPartialKinematics" );

	AKFPawn_execInitPartialKinematics_Parms InitPartialKinematics_Parms;

	pFnInitPartialKinematics->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitPartialKinematics, &InitPartialKinematics_Parms, NULL );

	pFnInitPartialKinematics->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.GetImpactPhysicsImpulse
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::GetImpactPhysicsImpulse ( )
{
	static UFunction* pFnGetImpactPhysicsImpulse = NULL;

	if ( ! pFnGetImpactPhysicsImpulse )
		pFnGetImpactPhysicsImpulse = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetImpactPhysicsImpulse" );

	AKFPawn_execGetImpactPhysicsImpulse_Parms GetImpactPhysicsImpulse_Parms;

	pFnGetImpactPhysicsImpulse->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetImpactPhysicsImpulse, &GetImpactPhysicsImpulse_Parms, NULL );

	pFnGetImpactPhysicsImpulse->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.StopPhysicsBodyImpact
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::StopPhysicsBodyImpact ( )
{
	static UFunction* pFnStopPhysicsBodyImpact = NULL;

	if ( ! pFnStopPhysicsBodyImpact )
		pFnStopPhysicsBodyImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.StopPhysicsBodyImpact" );

	AKFPawn_execStopPhysicsBodyImpact_Parms StopPhysicsBodyImpact_Parms;

	pFnStopPhysicsBodyImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStopPhysicsBodyImpact, &StopPhysicsBodyImpact_Parms, NULL );

	pFnStopPhysicsBodyImpact->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.StartPhysicsBodyImpact
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::StartPhysicsBodyImpact ( )
{
	static UFunction* pFnStartPhysicsBodyImpact = NULL;

	if ( ! pFnStartPhysicsBodyImpact )
		pFnStartPhysicsBodyImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.StartPhysicsBodyImpact" );

	AKFPawn_execStartPhysicsBodyImpact_Parms StartPhysicsBodyImpact_Parms;

	pFnStartPhysicsBodyImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnStartPhysicsBodyImpact, &StartPhysicsBodyImpact_Parms, NULL );

	pFnStartPhysicsBodyImpact->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.PlayPhysicsBodyImpact
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::PlayPhysicsBodyImpact ( )
{
	static UFunction* pFnPlayPhysicsBodyImpact = NULL;

	if ( ! pFnPlayPhysicsBodyImpact )
		pFnPlayPhysicsBodyImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayPhysicsBodyImpact" );

	AKFPawn_execPlayPhysicsBodyImpact_Parms PlayPhysicsBodyImpact_Parms;

	pFnPlayPhysicsBodyImpact->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPlayPhysicsBodyImpact, &PlayPhysicsBodyImpact_Parms, NULL );

	pFnPlayPhysicsBodyImpact->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.DamagedHitZones
// [0x00420405] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPawn::DamagedHitZones ( )
{
	static UFunction* pFnDamagedHitZones = NULL;

	if ( ! pFnDamagedHitZones )
		pFnDamagedHitZones = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.DamagedHitZones" );

	AKFPawn_execDamagedHitZones_Parms DamagedHitZones_Parms;

	pFnDamagedHitZones->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDamagedHitZones, &DamagedHitZones_Parms, NULL );

	pFnDamagedHitZones->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.CalcQuadRegion
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::CalcQuadRegion ( )
{
	static UFunction* pFnCalcQuadRegion = NULL;

	if ( ! pFnCalcQuadRegion )
		pFnCalcQuadRegion = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CalcQuadRegion" );

	AKFPawn_execCalcQuadRegion_Parms CalcQuadRegion_Parms;

	pFnCalcQuadRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcQuadRegion, &CalcQuadRegion_Parms, NULL );

	pFnCalcQuadRegion->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.CalcOctagonRegion
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::CalcOctagonRegion ( )
{
	static UFunction* pFnCalcOctagonRegion = NULL;

	if ( ! pFnCalcOctagonRegion )
		pFnCalcOctagonRegion = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CalcOctagonRegion" );

	AKFPawn_execCalcOctagonRegion_Parms CalcOctagonRegion_Parms;

	pFnCalcOctagonRegion->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCalcOctagonRegion, &CalcOctagonRegion_Parms, NULL );

	pFnCalcOctagonRegion->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.TerminateEffectsOnDeath" );

	AKFPawn_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function KFGame.KFPawn.IsHeadless
// [0x00020100] 
// Parameters infos:

void AKFPawn::IsHeadless ( )
{
	static UFunction* pFnIsHeadless = NULL;

	if ( ! pFnIsHeadless )
		pFnIsHeadless = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsHeadless" );

	AKFPawn_execIsHeadless_Parms IsHeadless_Parms;

	this->ProcessEvent ( pFnIsHeadless, &IsHeadless_Parms, NULL );
};

// Function KFGame.KFPawn.IsIncapacitated
// [0x00020102] 
// Parameters infos:

void AKFPawn::IsIncapacitated ( )
{
	static UFunction* pFnIsIncapacitated = NULL;

	if ( ! pFnIsIncapacitated )
		pFnIsIncapacitated = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsIncapacitated" );

	AKFPawn_execIsIncapacitated_Parms IsIncapacitated_Parms;

	this->ProcessEvent ( pFnIsIncapacitated, &IsIncapacitated_Parms, NULL );
};

// Function KFGame.KFPawn.IsImpaired
// [0x00020100] 
// Parameters infos:

void AKFPawn::IsImpaired ( )
{
	static UFunction* pFnIsImpaired = NULL;

	if ( ! pFnIsImpaired )
		pFnIsImpaired = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsImpaired" );

	AKFPawn_execIsImpaired_Parms IsImpaired_Parms;

	this->ProcessEvent ( pFnIsImpaired, &IsImpaired_Parms, NULL );
};

// Function KFGame.KFPawn.IsCombatCapable
// [0x00020102] 
// Parameters infos:

void AKFPawn::IsCombatCapable ( )
{
	static UFunction* pFnIsCombatCapable = NULL;

	if ( ! pFnIsCombatCapable )
		pFnIsCombatCapable = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsCombatCapable" );

	AKFPawn_execIsCombatCapable_Parms IsCombatCapable_Parms;

	this->ProcessEvent ( pFnIsCombatCapable, &IsCombatCapable_Parms, NULL );
};

// Function KFGame.KFPawn.NotifyAttackParried
// [0x00020002] 
// Parameters infos:

void AKFPawn::NotifyAttackParried ( )
{
	static UFunction* pFnNotifyAttackParried = NULL;

	if ( ! pFnNotifyAttackParried )
		pFnNotifyAttackParried = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.NotifyAttackParried" );

	AKFPawn_execNotifyAttackParried_Parms NotifyAttackParried_Parms;

	this->ProcessEvent ( pFnNotifyAttackParried, &NotifyAttackParried_Parms, NULL );
};

// Function KFGame.KFPawn.CrushedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn::CrushedBy ( )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CrushedBy" );

	AKFPawn_execCrushedBy_Parms CrushedBy_Parms;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function KFGame.KFPawn.EncroachedBy
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventEncroachedBy ( )
{
	static UFunction* pFnEncroachedBy = NULL;

	if ( ! pFnEncroachedBy )
		pFnEncroachedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.EncroachedBy" );

	AKFPawn_eventEncroachedBy_Parms EncroachedBy_Parms;

	this->ProcessEvent ( pFnEncroachedBy, &EncroachedBy_Parms, NULL );
};

// Function KFGame.KFPawn.Died
// [0x00020002] 
// Parameters infos:

void AKFPawn::Died ( )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.Died" );

	AKFPawn_execDied_Parms Died_Parms;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );
};

// Function KFGame.KFPawn.PlayDyingSound
// [0x00020102] 
// Parameters infos:

void AKFPawn::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayDyingSound" );

	AKFPawn_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function KFGame.KFPawn.HideMeshOnDeath
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventHideMeshOnDeath ( )
{
	static UFunction* pFnHideMeshOnDeath = NULL;

	if ( ! pFnHideMeshOnDeath )
		pFnHideMeshOnDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HideMeshOnDeath" );

	AKFPawn_eventHideMeshOnDeath_Parms HideMeshOnDeath_Parms;

	this->ProcessEvent ( pFnHideMeshOnDeath, &HideMeshOnDeath_Parms, NULL );
};

// Function KFGame.KFPawn.PlayRagdollDeath
// [0x00820102] 
// Parameters infos:

void AKFPawn::PlayRagdollDeath ( )
{
	static UFunction* pFnPlayRagdollDeath = NULL;

	if ( ! pFnPlayRagdollDeath )
		pFnPlayRagdollDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayRagdollDeath" );

	AKFPawn_execPlayRagdollDeath_Parms PlayRagdollDeath_Parms;

	this->ProcessEvent ( pFnPlayRagdollDeath, &PlayRagdollDeath_Parms, NULL );
};

// Function KFGame.KFPawn.ShouldRagdollOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn::ShouldRagdollOnDeath ( )
{
	static UFunction* pFnShouldRagdollOnDeath = NULL;

	if ( ! pFnShouldRagdollOnDeath )
		pFnShouldRagdollOnDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ShouldRagdollOnDeath" );

	AKFPawn_execShouldRagdollOnDeath_Parms ShouldRagdollOnDeath_Parms;

	this->ProcessEvent ( pFnShouldRagdollOnDeath, &ShouldRagdollOnDeath_Parms, NULL );
};

// Function KFGame.KFPawn.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayDying" );

	AKFPawn_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function KFGame.KFPawn.PrepareRagdoll
// [0x00020102] 
// Parameters infos:

void AKFPawn::PrepareRagdoll ( )
{
	static UFunction* pFnPrepareRagdoll = NULL;

	if ( ! pFnPrepareRagdoll )
		pFnPrepareRagdoll = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PrepareRagdoll" );

	AKFPawn_execPrepareRagdoll_Parms PrepareRagdoll_Parms;

	this->ProcessEvent ( pFnPrepareRagdoll, &PrepareRagdoll_Parms, NULL );
};

// Function KFGame.KFPawn.GetExposureTo
// [0x00020002] 
// Parameters infos:

void AKFPawn::GetExposureTo ( )
{
	static UFunction* pFnGetExposureTo = NULL;

	if ( ! pFnGetExposureTo )
		pFnGetExposureTo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetExposureTo" );

	AKFPawn_execGetExposureTo_Parms GetExposureTo_Parms;

	this->ProcessEvent ( pFnGetExposureTo, &GetExposureTo_Parms, NULL );
};

// Function KFGame.KFPawn.GetBestAggroEnemy
// [0x00820002] 
// Parameters infos:

void AKFPawn::GetBestAggroEnemy ( )
{
	static UFunction* pFnGetBestAggroEnemy = NULL;

	if ( ! pFnGetBestAggroEnemy )
		pFnGetBestAggroEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetBestAggroEnemy" );

	AKFPawn_execGetBestAggroEnemy_Parms GetBestAggroEnemy_Parms;

	this->ProcessEvent ( pFnGetBestAggroEnemy, &GetBestAggroEnemy_Parms, NULL );
};

// Function KFGame.KFPawn.GetUsedWeaponPerk
// [0x00020002] 
// Parameters infos:

void AKFPawn::GetUsedWeaponPerk ( )
{
	static UFunction* pFnGetUsedWeaponPerk = NULL;

	if ( ! pFnGetUsedWeaponPerk )
		pFnGetUsedWeaponPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetUsedWeaponPerk" );

	AKFPawn_execGetUsedWeaponPerk_Parms GetUsedWeaponPerk_Parms;

	this->ProcessEvent ( pFnGetUsedWeaponPerk, &GetUsedWeaponPerk_Parms, NULL );
};

// Function KFGame.KFPawn.NotifyFriendlyAIDamageTaken
// [0x00020000] 
// Parameters infos:

void AKFPawn::NotifyFriendlyAIDamageTaken ( )
{
	static UFunction* pFnNotifyFriendlyAIDamageTaken = NULL;

	if ( ! pFnNotifyFriendlyAIDamageTaken )
		pFnNotifyFriendlyAIDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.NotifyFriendlyAIDamageTaken" );

	AKFPawn_execNotifyFriendlyAIDamageTaken_Parms NotifyFriendlyAIDamageTaken_Parms;

	this->ProcessEvent ( pFnNotifyFriendlyAIDamageTaken, &NotifyFriendlyAIDamageTaken_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateDamageHistoryValues
// [0x00420002] 
// Parameters infos:

void AKFPawn::UpdateDamageHistoryValues ( )
{
	static UFunction* pFnUpdateDamageHistoryValues = NULL;

	if ( ! pFnUpdateDamageHistoryValues )
		pFnUpdateDamageHistoryValues = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateDamageHistoryValues" );

	AKFPawn_execUpdateDamageHistoryValues_Parms UpdateDamageHistoryValues_Parms;

	this->ProcessEvent ( pFnUpdateDamageHistoryValues, &UpdateDamageHistoryValues_Parms, NULL );
};

// Function KFGame.KFPawn.GetDamageHistory
// [0x00420002] 
// Parameters infos:

void AKFPawn::GetDamageHistory ( )
{
	static UFunction* pFnGetDamageHistory = NULL;

	if ( ! pFnGetDamageHistory )
		pFnGetDamageHistory = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetDamageHistory" );

	AKFPawn_execGetDamageHistory_Parms GetDamageHistory_Parms;

	this->ProcessEvent ( pFnGetDamageHistory, &GetDamageHistory_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateDamageHistory
// [0x00820002] 
// Parameters infos:

void AKFPawn::UpdateDamageHistory ( )
{
	static UFunction* pFnUpdateDamageHistory = NULL;

	if ( ! pFnUpdateDamageHistory )
		pFnUpdateDamageHistory = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateDamageHistory" );

	AKFPawn_execUpdateDamageHistory_Parms UpdateDamageHistory_Parms;

	this->ProcessEvent ( pFnUpdateDamageHistory, &UpdateDamageHistory_Parms, NULL );
};

// Function KFGame.KFPawn.AddTakenDamage
// [0x00020002] 
// Parameters infos:

void AKFPawn::AddTakenDamage ( )
{
	static UFunction* pFnAddTakenDamage = NULL;

	if ( ! pFnAddTakenDamage )
		pFnAddTakenDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.AddTakenDamage" );

	AKFPawn_execAddTakenDamage_Parms AddTakenDamage_Parms;

	this->ProcessEvent ( pFnAddTakenDamage, &AddTakenDamage_Parms, NULL );
};

// Function KFGame.KFPawn.RecentDamageFrom
// [0x00424002] 
// Parameters infos:

void AKFPawn::RecentDamageFrom ( )
{
	static UFunction* pFnRecentDamageFrom = NULL;

	if ( ! pFnRecentDamageFrom )
		pFnRecentDamageFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.RecentDamageFrom" );

	AKFPawn_execRecentDamageFrom_Parms RecentDamageFrom_Parms;

	this->ProcessEvent ( pFnRecentDamageFrom, &RecentDamageFrom_Parms, NULL );
};

// Function KFGame.KFPawn.GetMostRecentDamageHistoryIndexFor
// [0x00020002] 
// Parameters infos:

void AKFPawn::GetMostRecentDamageHistoryIndexFor ( )
{
	static UFunction* pFnGetMostRecentDamageHistoryIndexFor = NULL;

	if ( ! pFnGetMostRecentDamageHistoryIndexFor )
		pFnGetMostRecentDamageHistoryIndexFor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetMostRecentDamageHistoryIndexFor" );

	AKFPawn_execGetMostRecentDamageHistoryIndexFor_Parms GetMostRecentDamageHistoryIndexFor_Parms;

	this->ProcessEvent ( pFnGetMostRecentDamageHistoryIndexFor, &GetMostRecentDamageHistoryIndexFor_Parms, NULL );
};

// Function KFGame.KFPawn.WeeklyShouldExplodeOnDeath
// [0x00020002] 
// Parameters infos:

void AKFPawn::WeeklyShouldExplodeOnDeath ( )
{
	static UFunction* pFnWeeklyShouldExplodeOnDeath = NULL;

	if ( ! pFnWeeklyShouldExplodeOnDeath )
		pFnWeeklyShouldExplodeOnDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.WeeklyShouldExplodeOnDeath" );

	AKFPawn_execWeeklyShouldExplodeOnDeath_Parms WeeklyShouldExplodeOnDeath_Parms;

	this->ProcessEvent ( pFnWeeklyShouldExplodeOnDeath, &WeeklyShouldExplodeOnDeath_Parms, NULL );
};

// Function KFGame.KFPawn.CanCountHeadshots
// [0x00020002] 
// Parameters infos:

void AKFPawn::CanCountHeadshots ( )
{
	static UFunction* pFnCanCountHeadshots = NULL;

	if ( ! pFnCanCountHeadshots )
		pFnCanCountHeadshots = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CanCountHeadshots" );

	AKFPawn_execCanCountHeadshots_Parms CanCountHeadshots_Parms;

	this->ProcessEvent ( pFnCanCountHeadshots, &CanCountHeadshots_Parms, NULL );
};

// Function KFGame.KFPawn.AdjustRadiusDamage
// [0x00420002] 
// Parameters infos:

void AKFPawn::AdjustRadiusDamage ( )
{
	static UFunction* pFnAdjustRadiusDamage = NULL;

	if ( ! pFnAdjustRadiusDamage )
		pFnAdjustRadiusDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.AdjustRadiusDamage" );

	AKFPawn_execAdjustRadiusDamage_Parms AdjustRadiusDamage_Parms;

	this->ProcessEvent ( pFnAdjustRadiusDamage, &AdjustRadiusDamage_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateLastTimeDamageHappened
// [0x00020002] 
// Parameters infos:

void AKFPawn::UpdateLastTimeDamageHappened ( )
{
	static UFunction* pFnUpdateLastTimeDamageHappened = NULL;

	if ( ! pFnUpdateLastTimeDamageHappened )
		pFnUpdateLastTimeDamageHappened = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateLastTimeDamageHappened" );

	AKFPawn_execUpdateLastTimeDamageHappened_Parms UpdateLastTimeDamageHappened_Parms;

	this->ProcessEvent ( pFnUpdateLastTimeDamageHappened, &UpdateLastTimeDamageHappened_Parms, NULL );
};

// Function KFGame.KFPawn.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFPawn::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.AdjustDamage" );

	AKFPawn_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function KFGame.KFPawn.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.TakeDamage" );

	AKFPawn_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function KFGame.KFPawn.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:

void AKFPawn::TakeRadiusDamage ( )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.TakeRadiusDamage" );

	AKFPawn_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function KFGame.KFPawn.TakeFallingDamage
// [0x00020002] 
// Parameters infos:

void AKFPawn::TakeFallingDamage ( )
{
	static UFunction* pFnTakeFallingDamage = NULL;

	if ( ! pFnTakeFallingDamage )
		pFnTakeFallingDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.TakeFallingDamage" );

	AKFPawn_execTakeFallingDamage_Parms TakeFallingDamage_Parms;

	this->ProcessEvent ( pFnTakeFallingDamage, &TakeFallingDamage_Parms, NULL );
};

// Function KFGame.KFPawn.HealDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventHealDamage ( )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HealDamage" );

	AKFPawn_eventHealDamage_Parms HealDamage_Parms;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );
};

// Function KFGame.KFPawn.HandleMomentum
// [0x00024002] 
// Parameters infos:

void AKFPawn::HandleMomentum ( )
{
	static UFunction* pFnHandleMomentum = NULL;

	if ( ! pFnHandleMomentum )
		pFnHandleMomentum = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HandleMomentum" );

	AKFPawn_execHandleMomentum_Parms HandleMomentum_Parms;

	this->ProcessEvent ( pFnHandleMomentum, &HandleMomentum_Parms, NULL );
};

// Function KFGame.KFPawn.GetHealthPercentage
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPawn::GetHealthPercentage ( )
{
	static UFunction* pFnGetHealthPercentage = NULL;

	if ( ! pFnGetHealthPercentage )
		pFnGetHealthPercentage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetHealthPercentage" );

	AKFPawn_execGetHealthPercentage_Parms GetHealthPercentage_Parms;

	this->ProcessEvent ( pFnGetHealthPercentage, &GetHealthPercentage_Parms, NULL );
};

// Function KFGame.KFPawn.IsResistantTo
// [0x00424000] 
// Parameters infos:

void AKFPawn::IsResistantTo ( )
{
	static UFunction* pFnIsResistantTo = NULL;

	if ( ! pFnIsResistantTo )
		pFnIsResistantTo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsResistantTo" );

	AKFPawn_execIsResistantTo_Parms IsResistantTo_Parms;

	this->ProcessEvent ( pFnIsResistantTo, &IsResistantTo_Parms, NULL );
};

// Function KFGame.KFPawn.IsVulnerableTo
// [0x00424000] 
// Parameters infos:

void AKFPawn::IsVulnerableTo ( )
{
	static UFunction* pFnIsVulnerableTo = NULL;

	if ( ! pFnIsVulnerableTo )
		pFnIsVulnerableTo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsVulnerableTo" );

	AKFPawn_execIsVulnerableTo_Parms IsVulnerableTo_Parms;

	this->ProcessEvent ( pFnIsVulnerableTo, &IsVulnerableTo_Parms, NULL );
};

// Function KFGame.KFPawn.SetThirdPersonAttachmentVisibility
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetThirdPersonAttachmentVisibility ( )
{
	static UFunction* pFnSetThirdPersonAttachmentVisibility = NULL;

	if ( ! pFnSetThirdPersonAttachmentVisibility )
		pFnSetThirdPersonAttachmentVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetThirdPersonAttachmentVisibility" );

	AKFPawn_execSetThirdPersonAttachmentVisibility_Parms SetThirdPersonAttachmentVisibility_Parms;

	this->ProcessEvent ( pFnSetThirdPersonAttachmentVisibility, &SetThirdPersonAttachmentVisibility_Parms, NULL );
};

// Function KFGame.KFPawn.HideHead
// [0x00020102] 
// Parameters infos:

void AKFPawn::HideHead ( )
{
	static UFunction* pFnHideHead = NULL;

	if ( ! pFnHideHead )
		pFnHideHead = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.HideHead" );

	AKFPawn_execHideHead_Parms HideHead_Parms;

	this->ProcessEvent ( pFnHideHead, &HideHead_Parms, NULL );
};

// Function KFGame.KFPawn.SetMeshLightingChannels
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetMeshLightingChannels ( )
{
	static UFunction* pFnSetMeshLightingChannels = NULL;

	if ( ! pFnSetMeshLightingChannels )
		pFnSetMeshLightingChannels = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetMeshLightingChannels" );

	AKFPawn_execSetMeshLightingChannels_Parms SetMeshLightingChannels_Parms;

	this->ProcessEvent ( pFnSetMeshLightingChannels, &SetMeshLightingChannels_Parms, NULL );
};

// Function KFGame.KFPawn.SetMeshVisibility
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetMeshVisibility ( )
{
	static UFunction* pFnSetMeshVisibility = NULL;

	if ( ! pFnSetMeshVisibility )
		pFnSetMeshVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetMeshVisibility" );

	AKFPawn_execSetMeshVisibility_Parms SetMeshVisibility_Parms;

	this->ProcessEvent ( pFnSetMeshVisibility, &SetMeshVisibility_Parms, NULL );
};

// Function KFGame.KFPawn.PostTeleport
// [0x00020002] 
// Parameters infos:

void AKFPawn::PostTeleport ( )
{
	static UFunction* pFnPostTeleport = NULL;

	if ( ! pFnPostTeleport )
		pFnPostTeleport = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PostTeleport" );

	AKFPawn_execPostTeleport_Parms PostTeleport_Parms;

	this->ProcessEvent ( pFnPostTeleport, &PostTeleport_Parms, NULL );
};

// Function KFGame.KFPawn.RestoreAirControlTimer
// [0x00020002] 
// Parameters infos:

void AKFPawn::RestoreAirControlTimer ( )
{
	static UFunction* pFnRestoreAirControlTimer = NULL;

	if ( ! pFnRestoreAirControlTimer )
		pFnRestoreAirControlTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.RestoreAirControlTimer" );

	AKFPawn_execRestoreAirControlTimer_Parms RestoreAirControlTimer_Parms;

	this->ProcessEvent ( pFnRestoreAirControlTimer, &RestoreAirControlTimer_Parms, NULL );
};

// Function KFGame.KFPawn.JumpOffPawn
// [0x00020002] 
// Parameters infos:

void AKFPawn::JumpOffPawn ( )
{
	static UFunction* pFnJumpOffPawn = NULL;

	if ( ! pFnJumpOffPawn )
		pFnJumpOffPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.JumpOffPawn" );

	AKFPawn_execJumpOffPawn_Parms JumpOffPawn_Parms;

	this->ProcessEvent ( pFnJumpOffPawn, &JumpOffPawn_Parms, NULL );
};

// Function KFGame.KFPawn.CanBeBaseForPawn
// [0x00020102] 
// Parameters infos:

void AKFPawn::CanBeBaseForPawn ( )
{
	static UFunction* pFnCanBeBaseForPawn = NULL;

	if ( ! pFnCanBeBaseForPawn )
		pFnCanBeBaseForPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CanBeBaseForPawn" );

	AKFPawn_execCanBeBaseForPawn_Parms CanBeBaseForPawn_Parms;

	this->ProcessEvent ( pFnCanBeBaseForPawn, &CanBeBaseForPawn_Parms, NULL );
};

// Function KFGame.KFPawn.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.Touch" );

	AKFPawn_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFPawn.CannotJumpNow
// [0x00020002] 
// Parameters infos:

void AKFPawn::CannotJumpNow ( )
{
	static UFunction* pFnCannotJumpNow = NULL;

	if ( ! pFnCannotJumpNow )
		pFnCannotJumpNow = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CannotJumpNow" );

	AKFPawn_execCannotJumpNow_Parms CannotJumpNow_Parms;

	this->ProcessEvent ( pFnCannotJumpNow, &CannotJumpNow_Parms, NULL );
};

// Function KFGame.KFPawn.DoJump
// [0x00020002] 
// Parameters infos:

void AKFPawn::DoJump ( )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.DoJump" );

	AKFPawn_execDoJump_Parms DoJump_Parms;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );
};

// Function KFGame.KFPawn.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetSprinting" );

	AKFPawn_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateSprinting
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventUpdateSprinting ( )
{
	static UFunction* pFnUpdateSprinting = NULL;

	if ( ! pFnUpdateSprinting )
		pFnUpdateSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateSprinting" );

	AKFPawn_eventUpdateSprinting_Parms UpdateSprinting_Parms;

	this->ProcessEvent ( pFnUpdateSprinting, &UpdateSprinting_Parms, NULL );
};

// Function KFGame.KFPawn.IsSurrounded
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::IsSurrounded ( )
{
	static UFunction* pFnIsSurrounded = NULL;

	if ( ! pFnIsSurrounded )
		pFnIsSurrounded = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsSurrounded" );

	AKFPawn_execIsSurrounded_Parms IsSurrounded_Parms;

	pFnIsSurrounded->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsSurrounded, &IsSurrounded_Parms, NULL );

	pFnIsSurrounded->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.IsPawnMovingTowardMe
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::IsPawnMovingTowardMe ( )
{
	static UFunction* pFnIsPawnMovingTowardMe = NULL;

	if ( ! pFnIsPawnMovingTowardMe )
		pFnIsPawnMovingTowardMe = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsPawnMovingTowardMe" );

	AKFPawn_execIsPawnMovingTowardMe_Parms IsPawnMovingTowardMe_Parms;

	pFnIsPawnMovingTowardMe->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnMovingTowardMe, &IsPawnMovingTowardMe_Parms, NULL );

	pFnIsPawnMovingTowardMe->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.IsPawnMovingAwayFromMe
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::IsPawnMovingAwayFromMe ( )
{
	static UFunction* pFnIsPawnMovingAwayFromMe = NULL;

	if ( ! pFnIsPawnMovingAwayFromMe )
		pFnIsPawnMovingAwayFromMe = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsPawnMovingAwayFromMe" );

	AKFPawn_execIsPawnMovingAwayFromMe_Parms IsPawnMovingAwayFromMe_Parms;

	pFnIsPawnMovingAwayFromMe->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnMovingAwayFromMe, &IsPawnMovingAwayFromMe_Parms, NULL );

	pFnIsPawnMovingAwayFromMe->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.IsUsingSuperSpeed
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPawn::IsUsingSuperSpeed ( )
{
	static UFunction* pFnIsUsingSuperSpeed = NULL;

	if ( ! pFnIsUsingSuperSpeed )
		pFnIsUsingSuperSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsUsingSuperSpeed" );

	AKFPawn_execIsUsingSuperSpeed_Parms IsUsingSuperSpeed_Parms;

	pFnIsUsingSuperSpeed->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsUsingSuperSpeed, &IsUsingSuperSpeed_Parms, NULL );

	pFnIsUsingSuperSpeed->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.SetCloaked
// [0x00020000] 
// Parameters infos:

void AKFPawn::SetCloaked ( )
{
	static UFunction* pFnSetCloaked = NULL;

	if ( ! pFnSetCloaked )
		pFnSetCloaked = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetCloaked" );

	AKFPawn_execSetCloaked_Parms SetCloaked_Parms;

	this->ProcessEvent ( pFnSetCloaked, &SetCloaked_Parms, NULL );
};

// Function KFGame.KFPawn.GetAutoLookAtLocation
// [0x00820102] 
// Parameters infos:

void AKFPawn::GetAutoLookAtLocation ( )
{
	static UFunction* pFnGetAutoLookAtLocation = NULL;

	if ( ! pFnGetAutoLookAtLocation )
		pFnGetAutoLookAtLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetAutoLookAtLocation" );

	AKFPawn_execGetAutoLookAtLocation_Parms GetAutoLookAtLocation_Parms;

	this->ProcessEvent ( pFnGetAutoLookAtLocation, &GetAutoLookAtLocation_Parms, NULL );
};

// Function KFGame.KFPawn.GetAutoTargetBones
// [0x00420102] 
// Parameters infos:

void AKFPawn::GetAutoTargetBones ( )
{
	static UFunction* pFnGetAutoTargetBones = NULL;

	if ( ! pFnGetAutoTargetBones )
		pFnGetAutoTargetBones = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetAutoTargetBones" );

	AKFPawn_execGetAutoTargetBones_Parms GetAutoTargetBones_Parms;

	this->ProcessEvent ( pFnGetAutoTargetBones, &GetAutoTargetBones_Parms, NULL );
};

// Function KFGame.KFPawn.GetAdjustedAimFor
// [0x00020102] 
// Parameters infos:

void AKFPawn::GetAdjustedAimFor ( )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetAdjustedAimFor" );

	AKFPawn_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );
};

// Function KFGame.KFPawn.GetBaseAimRotation
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventGetBaseAimRotation ( )
{
	static UFunction* pFnGetBaseAimRotation = NULL;

	if ( ! pFnGetBaseAimRotation )
		pFnGetBaseAimRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetBaseAimRotation" );

	AKFPawn_eventGetBaseAimRotation_Parms GetBaseAimRotation_Parms;

	this->ProcessEvent ( pFnGetBaseAimRotation, &GetBaseAimRotation_Parms, NULL );
};

// Function KFGame.KFPawn.ANIMNOTIFY_SpawnedKActor
// [0x00020100] 
// Parameters infos:

void AKFPawn::ANIMNOTIFY_SpawnedKActor ( )
{
	static UFunction* pFnANIMNOTIFY_SpawnedKActor = NULL;

	if ( ! pFnANIMNOTIFY_SpawnedKActor )
		pFnANIMNOTIFY_SpawnedKActor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ANIMNOTIFY_SpawnedKActor" );

	AKFPawn_execANIMNOTIFY_SpawnedKActor_Parms ANIMNOTIFY_SpawnedKActor_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_SpawnedKActor, &ANIMNOTIFY_SpawnedKActor_Parms, NULL );
};

// Function KFGame.KFPawn.ANIMNOTIFY_ShellEject
// [0x00020102] 
// Parameters infos:

void AKFPawn::ANIMNOTIFY_ShellEject ( )
{
	static UFunction* pFnANIMNOTIFY_ShellEject = NULL;

	if ( ! pFnANIMNOTIFY_ShellEject )
		pFnANIMNOTIFY_ShellEject = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ANIMNOTIFY_ShellEject" );

	AKFPawn_execANIMNOTIFY_ShellEject_Parms ANIMNOTIFY_ShellEject_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_ShellEject, &ANIMNOTIFY_ShellEject_Parms, NULL );
};

// Function KFGame.KFPawn.SetNightVisionLight
// [0x00020100] 
// Parameters infos:

void AKFPawn::SetNightVisionLight ( )
{
	static UFunction* pFnSetNightVisionLight = NULL;

	if ( ! pFnSetNightVisionLight )
		pFnSetNightVisionLight = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetNightVisionLight" );

	AKFPawn_execSetNightVisionLight_Parms SetNightVisionLight_Parms;

	this->ProcessEvent ( pFnSetNightVisionLight, &SetNightVisionLight_Parms, NULL );
};

// Function KFGame.KFPawn.StopPartialZedTime
// [0x00020002] 
// Parameters infos:

void AKFPawn::StopPartialZedTime ( )
{
	static UFunction* pFnStopPartialZedTime = NULL;

	if ( ! pFnStopPartialZedTime )
		pFnStopPartialZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.StopPartialZedTime" );

	AKFPawn_execStopPartialZedTime_Parms StopPartialZedTime_Parms;

	this->ProcessEvent ( pFnStopPartialZedTime, &StopPartialZedTime_Parms, NULL );
};

// Function KFGame.KFPawn.ShouldPlaySpecialMeleeAnims
// [0x00020000] 
// Parameters infos:

void AKFPawn::ShouldPlaySpecialMeleeAnims ( )
{
	static UFunction* pFnShouldPlaySpecialMeleeAnims = NULL;

	if ( ! pFnShouldPlaySpecialMeleeAnims )
		pFnShouldPlaySpecialMeleeAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ShouldPlaySpecialMeleeAnims" );

	AKFPawn_execShouldPlaySpecialMeleeAnims_Parms ShouldPlaySpecialMeleeAnims_Parms;

	this->ProcessEvent ( pFnShouldPlaySpecialMeleeAnims, &ShouldPlaySpecialMeleeAnims_Parms, NULL );
};

// Function KFGame.KFPawn.ShouldPlayHeadlessMeleeAnims
// [0x00020000] 
// Parameters infos:

void AKFPawn::ShouldPlayHeadlessMeleeAnims ( )
{
	static UFunction* pFnShouldPlayHeadlessMeleeAnims = NULL;

	if ( ! pFnShouldPlayHeadlessMeleeAnims )
		pFnShouldPlayHeadlessMeleeAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ShouldPlayHeadlessMeleeAnims" );

	AKFPawn_execShouldPlayHeadlessMeleeAnims_Parms ShouldPlayHeadlessMeleeAnims_Parms;

	this->ProcessEvent ( pFnShouldPlayHeadlessMeleeAnims, &ShouldPlayHeadlessMeleeAnims_Parms, NULL );
};

// Function KFGame.KFPawn.ThrowActiveWeapon
// [0x00024002] 
// Parameters infos:

void AKFPawn::ThrowActiveWeapon ( )
{
	static UFunction* pFnThrowActiveWeapon = NULL;

	if ( ! pFnThrowActiveWeapon )
		pFnThrowActiveWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ThrowActiveWeapon" );

	AKFPawn_execThrowActiveWeapon_Parms ThrowActiveWeapon_Parms;

	this->ProcessEvent ( pFnThrowActiveWeapon, &ThrowActiveWeapon_Parms, NULL );
};

// Function KFGame.KFPawn.CanReloadWeapon
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPawn::CanReloadWeapon ( )
{
	static UFunction* pFnCanReloadWeapon = NULL;

	if ( ! pFnCanReloadWeapon )
		pFnCanReloadWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CanReloadWeapon" );

	AKFPawn_execCanReloadWeapon_Parms CanReloadWeapon_Parms;

	this->ProcessEvent ( pFnCanReloadWeapon, &CanReloadWeapon_Parms, NULL );
};

// Function KFGame.KFPawn.WeaponBob
// [0x00820102] 
// Parameters infos:

void AKFPawn::WeaponBob ( )
{
	static UFunction* pFnWeaponBob = NULL;

	if ( ! pFnWeaponBob )
		pFnWeaponBob = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.WeaponBob" );

	AKFPawn_execWeaponBob_Parms WeaponBob_Parms;

	this->ProcessEvent ( pFnWeaponBob, &WeaponBob_Parms, NULL );
};

// Function KFGame.KFPawn.GetWeaponAttachmentAnimRateByte
// [0x00020102] 
// Parameters infos:

void AKFPawn::GetWeaponAttachmentAnimRateByte ( )
{
	static UFunction* pFnGetWeaponAttachmentAnimRateByte = NULL;

	if ( ! pFnGetWeaponAttachmentAnimRateByte )
		pFnGetWeaponAttachmentAnimRateByte = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetWeaponAttachmentAnimRateByte" );

	AKFPawn_execGetWeaponAttachmentAnimRateByte_Parms GetWeaponAttachmentAnimRateByte_Parms;

	this->ProcessEvent ( pFnGetWeaponAttachmentAnimRateByte, &GetWeaponAttachmentAnimRateByte_Parms, NULL );
};

// Function KFGame.KFPawn.WeaponStoppedFiring
// [0x00020102] 
// Parameters infos:

void AKFPawn::WeaponStoppedFiring ( )
{
	static UFunction* pFnWeaponStoppedFiring = NULL;

	if ( ! pFnWeaponStoppedFiring )
		pFnWeaponStoppedFiring = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.WeaponStoppedFiring" );

	AKFPawn_execWeaponStoppedFiring_Parms WeaponStoppedFiring_Parms;

	this->ProcessEvent ( pFnWeaponStoppedFiring, &WeaponStoppedFiring_Parms, NULL );
};

// Function KFGame.KFPawn.WeaponFired
// [0x00024102] 
// Parameters infos:

void AKFPawn::WeaponFired ( )
{
	static UFunction* pFnWeaponFired = NULL;

	if ( ! pFnWeaponFired )
		pFnWeaponFired = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.WeaponFired" );

	AKFPawn_execWeaponFired_Parms WeaponFired_Parms;

	this->ProcessEvent ( pFnWeaponFired, &WeaponFired_Parms, NULL );
};

// Function KFGame.KFPawn.OnStartFire
// [0x00020102] 
// Parameters infos:

void AKFPawn::OnStartFire ( )
{
	static UFunction* pFnOnStartFire = NULL;

	if ( ! pFnOnStartFire )
		pFnOnStartFire = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.OnStartFire" );

	AKFPawn_execOnStartFire_Parms OnStartFire_Parms;

	this->ProcessEvent ( pFnOnStartFire, &OnStartFire_Parms, NULL );
};

// Function KFGame.KFPawn.SetWeaponAttachmentFromWeaponClass
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetWeaponAttachmentFromWeaponClass ( )
{
	static UFunction* pFnSetWeaponAttachmentFromWeaponClass = NULL;

	if ( ! pFnSetWeaponAttachmentFromWeaponClass )
		pFnSetWeaponAttachmentFromWeaponClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetWeaponAttachmentFromWeaponClass" );

	AKFPawn_execSetWeaponAttachmentFromWeaponClass_Parms SetWeaponAttachmentFromWeaponClass_Parms;

	this->ProcessEvent ( pFnSetWeaponAttachmentFromWeaponClass, &SetWeaponAttachmentFromWeaponClass_Parms, NULL );
};

// Function KFGame.KFPawn.WeaponAttachmentChanged
// [0x00024102] 
// Parameters infos:

void AKFPawn::WeaponAttachmentChanged ( )
{
	static UFunction* pFnWeaponAttachmentChanged = NULL;

	if ( ! pFnWeaponAttachmentChanged )
		pFnWeaponAttachmentChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.WeaponAttachmentChanged" );

	AKFPawn_execWeaponAttachmentChanged_Parms WeaponAttachmentChanged_Parms;

	this->ProcessEvent ( pFnWeaponAttachmentChanged, &WeaponAttachmentChanged_Parms, NULL );
};

// Function KFGame.KFPawn.SetFirstPersonVisibility
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetFirstPersonVisibility ( )
{
	static UFunction* pFnSetFirstPersonVisibility = NULL;

	if ( ! pFnSetFirstPersonVisibility )
		pFnSetFirstPersonVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetFirstPersonVisibility" );

	AKFPawn_execSetFirstPersonVisibility_Parms SetFirstPersonVisibility_Parms;

	this->ProcessEvent ( pFnSetFirstPersonVisibility, &SetFirstPersonVisibility_Parms, NULL );
};

// Function KFGame.KFPawn.AddDefaultInventory
// [0x00020002] 
// Parameters infos:

void AKFPawn::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.AddDefaultInventory" );

	AKFPawn_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function KFGame.KFPawn.PlayWeaponSwitch
// [0x00020102] 
// Parameters infos:

void AKFPawn::PlayWeaponSwitch ( )
{
	static UFunction* pFnPlayWeaponSwitch = NULL;

	if ( ! pFnPlayWeaponSwitch )
		pFnPlayWeaponSwitch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PlayWeaponSwitch" );

	AKFPawn_execPlayWeaponSwitch_Parms PlayWeaponSwitch_Parms;

	this->ProcessEvent ( pFnPlayWeaponSwitch, &PlayWeaponSwitch_Parms, NULL );
};

// Function KFGame.KFPawn.NotifyInventoryWeightChanged
// [0x00020002] 
// Parameters infos:

void AKFPawn::NotifyInventoryWeightChanged ( )
{
	static UFunction* pFnNotifyInventoryWeightChanged = NULL;

	if ( ! pFnNotifyInventoryWeightChanged )
		pFnNotifyInventoryWeightChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.NotifyInventoryWeightChanged" );

	AKFPawn_execNotifyInventoryWeightChanged_Parms NotifyInventoryWeightChanged_Parms;

	this->ProcessEvent ( pFnNotifyInventoryWeightChanged, &NotifyInventoryWeightChanged_Parms, NULL );
};

// Function KFGame.KFPawn.ToggleEquipment
// [0x00020100] 
// Parameters infos:

void AKFPawn::ToggleEquipment ( )
{
	static UFunction* pFnToggleEquipment = NULL;

	if ( ! pFnToggleEquipment )
		pFnToggleEquipment = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ToggleEquipment" );

	AKFPawn_execToggleEquipment_Parms ToggleEquipment_Parms;

	this->ProcessEvent ( pFnToggleEquipment, &ToggleEquipment_Parms, NULL );
};

// Function KFGame.KFPawn.SetAttackSpeedModifier
// [0x00020002] 
// Parameters infos:

void AKFPawn::SetAttackSpeedModifier ( )
{
	static UFunction* pFnSetAttackSpeedModifier = NULL;

	if ( ! pFnSetAttackSpeedModifier )
		pFnSetAttackSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetAttackSpeedModifier" );

	AKFPawn_execSetAttackSpeedModifier_Parms SetAttackSpeedModifier_Parms;

	this->ProcessEvent ( pFnSetAttackSpeedModifier, &SetAttackSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPawn.SetAfflictionSpeedModifier
// [0x00020002] 
// Parameters infos:

void AKFPawn::SetAfflictionSpeedModifier ( )
{
	static UFunction* pFnSetAfflictionSpeedModifier = NULL;

	if ( ! pFnSetAfflictionSpeedModifier )
		pFnSetAfflictionSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetAfflictionSpeedModifier" );

	AKFPawn_execSetAfflictionSpeedModifier_Parms SetAfflictionSpeedModifier_Parms;

	this->ProcessEvent ( pFnSetAfflictionSpeedModifier, &SetAfflictionSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateGroundSpeed
// [0x00020000] 
// Parameters infos:

void AKFPawn::UpdateGroundSpeed ( )
{
	static UFunction* pFnUpdateGroundSpeed = NULL;

	if ( ! pFnUpdateGroundSpeed )
		pFnUpdateGroundSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateGroundSpeed" );

	AKFPawn_execUpdateGroundSpeed_Parms UpdateGroundSpeed_Parms;

	this->ProcessEvent ( pFnUpdateGroundSpeed, &UpdateGroundSpeed_Parms, NULL );
};

// Function KFGame.KFPawn.WeaponStateChanged
// [0x00024100] 
// Parameters infos:

void AKFPawn::WeaponStateChanged ( )
{
	static UFunction* pFnWeaponStateChanged = NULL;

	if ( ! pFnWeaponStateChanged )
		pFnWeaponStateChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.WeaponStateChanged" );

	AKFPawn_execWeaponStateChanged_Parms WeaponStateChanged_Parms;

	this->ProcessEvent ( pFnWeaponStateChanged, &WeaponStateChanged_Parms, NULL );
};

// Function KFGame.KFPawn.MeleeImpactNotify
// [0x00020100] 
// Parameters infos:

void AKFPawn::MeleeImpactNotify ( )
{
	static UFunction* pFnMeleeImpactNotify = NULL;

	if ( ! pFnMeleeImpactNotify )
		pFnMeleeImpactNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.MeleeImpactNotify" );

	AKFPawn_execMeleeImpactNotify_Parms MeleeImpactNotify_Parms;

	this->ProcessEvent ( pFnMeleeImpactNotify, &MeleeImpactNotify_Parms, NULL );
};

// Function KFGame.KFPawn.IsDoingMeleeAttack
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::IsDoingMeleeAttack ( )
{
	static UFunction* pFnIsDoingMeleeAttack = NULL;

	if ( ! pFnIsDoingMeleeAttack )
		pFnIsDoingMeleeAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsDoingMeleeAttack" );

	AKFPawn_execIsDoingMeleeAttack_Parms IsDoingMeleeAttack_Parms;

	pFnIsDoingMeleeAttack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsDoingMeleeAttack, &IsDoingMeleeAttack_Parms, NULL );

	pFnIsDoingMeleeAttack->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.SetWeaponAttachmentVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::SetWeaponAttachmentVisibility ( )
{
	static UFunction* pFnSetWeaponAttachmentVisibility = NULL;

	if ( ! pFnSetWeaponAttachmentVisibility )
		pFnSetWeaponAttachmentVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetWeaponAttachmentVisibility" );

	AKFPawn_execSetWeaponAttachmentVisibility_Parms SetWeaponAttachmentVisibility_Parms;

	pFnSetWeaponAttachmentVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetWeaponAttachmentVisibility, &SetWeaponAttachmentVisibility_Parms, NULL );

	pFnSetWeaponAttachmentVisibility->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.StartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventStartCrouch ( )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.StartCrouch" );

	AKFPawn_eventStartCrouch_Parms StartCrouch_Parms;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function KFGame.KFPawn.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventEndCrouch ( )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.EndCrouch" );

	AKFPawn_eventEndCrouch_Parms EndCrouch_Parms;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function KFGame.KFPawn.EndViewTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventEndViewTarget ( )
{
	static UFunction* pFnEndViewTarget = NULL;

	if ( ! pFnEndViewTarget )
		pFnEndViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.EndViewTarget" );

	AKFPawn_eventEndViewTarget_Parms EndViewTarget_Parms;

	this->ProcessEvent ( pFnEndViewTarget, &EndViewTarget_Parms, NULL );
};

// Function KFGame.KFPawn.BecomeViewTarget
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventBecomeViewTarget ( )
{
	static UFunction* pFnBecomeViewTarget = NULL;

	if ( ! pFnBecomeViewTarget )
		pFnBecomeViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.BecomeViewTarget" );

	AKFPawn_eventBecomeViewTarget_Parms BecomeViewTarget_Parms;

	this->ProcessEvent ( pFnBecomeViewTarget, &BecomeViewTarget_Parms, NULL );
};

// Function KFGame.KFPawn.GetEyeHeight
// [0x00020102] 
// Parameters infos:

void AKFPawn::GetEyeHeight ( )
{
	static UFunction* pFnGetEyeHeight = NULL;

	if ( ! pFnGetEyeHeight )
		pFnGetEyeHeight = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetEyeHeight" );

	AKFPawn_execGetEyeHeight_Parms GetEyeHeight_Parms;

	this->ProcessEvent ( pFnGetEyeHeight, &GetEyeHeight_Parms, NULL );
};

// Function KFGame.KFPawn.GetPawnViewLocation
// [0x00020102] 
// Parameters infos:

void AKFPawn::GetPawnViewLocation ( )
{
	static UFunction* pFnGetPawnViewLocation = NULL;

	if ( ! pFnGetPawnViewLocation )
		pFnGetPawnViewLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetPawnViewLocation" );

	AKFPawn_execGetPawnViewLocation_Parms GetPawnViewLocation_Parms;

	this->ProcessEvent ( pFnGetPawnViewLocation, &GetPawnViewLocation_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateWalkBob
// [0x00840003] ( FUNC_Final )
// Parameters infos:

void AKFPawn::UpdateWalkBob ( )
{
	static UFunction* pFnUpdateWalkBob = NULL;

	if ( ! pFnUpdateWalkBob )
		pFnUpdateWalkBob = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateWalkBob" );

	AKFPawn_execUpdateWalkBob_Parms UpdateWalkBob_Parms;

	this->ProcessEvent ( pFnUpdateWalkBob, &UpdateWalkBob_Parms, NULL );
};

// Function KFGame.KFPawn.SmoothEyeHeight
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPawn::SmoothEyeHeight ( )
{
	static UFunction* pFnSmoothEyeHeight = NULL;

	if ( ! pFnSmoothEyeHeight )
		pFnSmoothEyeHeight = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SmoothEyeHeight" );

	AKFPawn_execSmoothEyeHeight_Parms SmoothEyeHeight_Parms;

	this->ProcessEvent ( pFnSmoothEyeHeight, &SmoothEyeHeight_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateEyeHeight
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventUpdateEyeHeight ( )
{
	static UFunction* pFnUpdateEyeHeight = NULL;

	if ( ! pFnUpdateEyeHeight )
		pFnUpdateEyeHeight = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateEyeHeight" );

	AKFPawn_eventUpdateEyeHeight_Parms UpdateEyeHeight_Parms;

	this->ProcessEvent ( pFnUpdateEyeHeight, &UpdateEyeHeight_Parms, NULL );
};

// Function KFGame.KFPawn.SetBaseEyeheight
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetBaseEyeheight ( )
{
	static UFunction* pFnSetBaseEyeheight = NULL;

	if ( ! pFnSetBaseEyeheight )
		pFnSetBaseEyeheight = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetBaseEyeheight" );

	AKFPawn_execSetBaseEyeheight_Parms SetBaseEyeheight_Parms;

	this->ProcessEvent ( pFnSetBaseEyeheight, &SetBaseEyeheight_Parms, NULL );
};

// Function KFGame.KFPawn.BaseChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.BaseChange" );

	AKFPawn_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function KFGame.KFPawn.CalcCamera
// [0x00420102] 
// Parameters infos:

void AKFPawn::CalcCamera ( )
{
	static UFunction* pFnCalcCamera = NULL;

	if ( ! pFnCalcCamera )
		pFnCalcCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.CalcCamera" );

	AKFPawn_execCalcCamera_Parms CalcCamera_Parms;

	this->ProcessEvent ( pFnCalcCamera, &CalcCamera_Parms, NULL );
};

// Function KFGame.KFPawn.UsePlayerControlledZedSkin
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventUsePlayerControlledZedSkin ( )
{
	static UFunction* pFnUsePlayerControlledZedSkin = NULL;

	if ( ! pFnUsePlayerControlledZedSkin )
		pFnUsePlayerControlledZedSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UsePlayerControlledZedSkin" );

	AKFPawn_eventUsePlayerControlledZedSkin_Parms UsePlayerControlledZedSkin_Parms;

	this->ProcessEvent ( pFnUsePlayerControlledZedSkin, &UsePlayerControlledZedSkin_Parms, NULL );
};

// Function KFGame.KFPawn.UpdateGameplayMICParams
// [0x00020102] 
// Parameters infos:

void AKFPawn::UpdateGameplayMICParams ( )
{
	static UFunction* pFnUpdateGameplayMICParams = NULL;

	if ( ! pFnUpdateGameplayMICParams )
		pFnUpdateGameplayMICParams = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UpdateGameplayMICParams" );

	AKFPawn_execUpdateGameplayMICParams_Parms UpdateGameplayMICParams_Parms;

	this->ProcessEvent ( pFnUpdateGameplayMICParams, &UpdateGameplayMICParams_Parms, NULL );
};

// Function KFGame.KFPawn.SetCharacterAnimationInfo
// [0x00020102] 
// Parameters infos:

void AKFPawn::SetCharacterAnimationInfo ( )
{
	static UFunction* pFnSetCharacterAnimationInfo = NULL;

	if ( ! pFnSetCharacterAnimationInfo )
		pFnSetCharacterAnimationInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetCharacterAnimationInfo" );

	AKFPawn_execSetCharacterAnimationInfo_Parms SetCharacterAnimationInfo_Parms;

	this->ProcessEvent ( pFnSetCharacterAnimationInfo, &SetCharacterAnimationInfo_Parms, NULL );
};

// Function KFGame.KFPawn.ProcessViewRotation
// [0x00420102] 
// Parameters infos:

void AKFPawn::ProcessViewRotation ( )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ProcessViewRotation" );

	AKFPawn_execProcessViewRotation_Parms ProcessViewRotation_Parms;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );
};

// Function KFGame.KFPawn.SetCharacterArch
// [0x00024102] 
// Parameters infos:

void AKFPawn::SetCharacterArch ( )
{
	static UFunction* pFnSetCharacterArch = NULL;

	if ( ! pFnSetCharacterArch )
		pFnSetCharacterArch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.SetCharacterArch" );

	AKFPawn_execSetCharacterArch_Parms SetCharacterArch_Parms;

	this->ProcessEvent ( pFnSetCharacterArch, &SetCharacterArch_Parms, NULL );
};

// Function KFGame.KFPawn.OnCharacterMeshChanged
// [0x00020100] 
// Parameters infos:

void AKFPawn::OnCharacterMeshChanged ( )
{
	static UFunction* pFnOnCharacterMeshChanged = NULL;

	if ( ! pFnOnCharacterMeshChanged )
		pFnOnCharacterMeshChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.OnCharacterMeshChanged" );

	AKFPawn_execOnCharacterMeshChanged_Parms OnCharacterMeshChanged_Parms;

	this->ProcessEvent ( pFnOnCharacterMeshChanged, &OnCharacterMeshChanged_Parms, NULL );
};

// Function KFGame.KFPawn.InitRBSettings
// [0x00020102] 
// Parameters infos:

void AKFPawn::InitRBSettings ( )
{
	static UFunction* pFnInitRBSettings = NULL;

	if ( ! pFnInitRBSettings )
		pFnInitRBSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.InitRBSettings" );

	AKFPawn_execInitRBSettings_Parms InitRBSettings_Parms;

	this->ProcessEvent ( pFnInitRBSettings, &InitRBSettings_Parms, NULL );
};

// Function KFGame.KFPawn.IsSameTeam
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventIsSameTeam ( )
{
	static UFunction* pFnIsSameTeam = NULL;

	if ( ! pFnIsSameTeam )
		pFnIsSameTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.IsSameTeam" );

	AKFPawn_eventIsSameTeam_Parms IsSameTeam_Parms;

	this->ProcessEvent ( pFnIsSameTeam, &IsSameTeam_Parms, NULL );
};

// Function KFGame.KFPawn.UnPossessed
// [0x00020002] 
// Parameters infos:

void AKFPawn::UnPossessed ( )
{
	static UFunction* pFnUnPossessed = NULL;

	if ( ! pFnUnPossessed )
		pFnUnPossessed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.UnPossessed" );

	AKFPawn_execUnPossessed_Parms UnPossessed_Parms;

	this->ProcessEvent ( pFnUnPossessed, &UnPossessed_Parms, NULL );
};

// Function KFGame.KFPawn.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PossessedBy" );

	AKFPawn_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function KFGame.KFPawn.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ReplicatedEvent" );

	AKFPawn_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFPawn.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.Destroyed" );

	AKFPawn_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFPawn.Reset
// [0x00020002] 
// Parameters infos:

void AKFPawn::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.Reset" );

	AKFPawn_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFPawn.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PostBeginPlay" );

	AKFPawn_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFPawn.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.PreBeginPlay" );

	AKFPawn_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFPawn.ForceUnCrouch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::ForceUnCrouch ( )
{
	static UFunction* pFnForceUnCrouch = NULL;

	if ( ! pFnForceUnCrouch )
		pFnForceUnCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ForceUnCrouch" );

	AKFPawn_execForceUnCrouch_Parms ForceUnCrouch_Parms;

	pFnForceUnCrouch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnForceUnCrouch, &ForceUnCrouch_Parms, NULL );

	pFnForceUnCrouch->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.ClearBloodDecals
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::ClearBloodDecals ( )
{
	static UFunction* pFnClearBloodDecals = NULL;

	if ( ! pFnClearBloodDecals )
		pFnClearBloodDecals = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ClearBloodDecals" );

	AKFPawn_execClearBloodDecals_Parms ClearBloodDecals_Parms;

	pFnClearBloodDecals->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearBloodDecals, &ClearBloodDecals_Parms, NULL );

	pFnClearBloodDecals->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.AllowFirstPersonPreshadows
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn::AllowFirstPersonPreshadows ( )
{
	static UFunction* pFnAllowFirstPersonPreshadows = NULL;

	if ( ! pFnAllowFirstPersonPreshadows )
		pFnAllowFirstPersonPreshadows = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.AllowFirstPersonPreshadows" );

	AKFPawn_execAllowFirstPersonPreshadows_Parms AllowFirstPersonPreshadows_Parms;

	pFnAllowFirstPersonPreshadows->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAllowFirstPersonPreshadows, &AllowFirstPersonPreshadows_Parms, NULL );

	pFnAllowFirstPersonPreshadows->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.GetPerk
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::GetPerk ( )
{
	static UFunction* pFnGetPerk = NULL;

	if ( ! pFnGetPerk )
		pFnGetPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetPerk" );

	AKFPawn_execGetPerk_Parms GetPerk_Parms;

	pFnGetPerk->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetPerk, &GetPerk_Parms, NULL );

	pFnGetPerk->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.GetCharacterInfo
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn::GetCharacterInfo ( )
{
	static UFunction* pFnGetCharacterInfo = NULL;

	if ( ! pFnGetCharacterInfo )
		pFnGetCharacterInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.GetCharacterInfo" );

	AKFPawn_execGetCharacterInfo_Parms GetCharacterInfo_Parms;

	pFnGetCharacterInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCharacterInfo, &GetCharacterInfo_Parms, NULL );

	pFnGetCharacterInfo->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn.ForceOpenActorChannel
// [0x010201C0] 
// Parameters infos:

void AKFPawn::ForceOpenActorChannel ( )
{
	static UFunction* pFnForceOpenActorChannel = NULL;

	if ( ! pFnForceOpenActorChannel )
		pFnForceOpenActorChannel = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.ForceOpenActorChannel" );

	AKFPawn_execForceOpenActorChannel_Parms ForceOpenActorChannel_Parms;

	this->ProcessEvent ( pFnForceOpenActorChannel, &ForceOpenActorChannel_Parms, NULL );
};

// Function KFGame.KFPawn.FitCollision
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPawn::FitCollision ( )
{
	static UFunction* pFnFitCollision = NULL;

	if ( ! pFnFitCollision )
		pFnFitCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn.FitCollision" );

	AKFPawn_execFitCollision_Parms FitCollision_Parms;

	pFnFitCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFitCollision, &FitCollision_Parms, NULL );

	pFnFitCollision->FunctionFlags |= 0x400;
};

// Function KFGame.KFAfflictionManager.UpdateMaterialParameter
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::UpdateMaterialParameter ( )
{
	static UFunction* pFnUpdateMaterialParameter = NULL;

	if ( ! pFnUpdateMaterialParameter )
		pFnUpdateMaterialParameter = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.UpdateMaterialParameter" );

	UKFAfflictionManager_execUpdateMaterialParameter_Parms UpdateMaterialParameter_Parms;

	this->ProcessEvent ( pFnUpdateMaterialParameter, &UpdateMaterialParameter_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.ToggleEffects
// [0x00024002] 
// Parameters infos:

void UKFAfflictionManager::ToggleEffects ( )
{
	static UFunction* pFnToggleEffects = NULL;

	if ( ! pFnToggleEffects )
		pFnToggleEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.ToggleEffects" );

	UKFAfflictionManager_execToggleEffects_Parms ToggleEffects_Parms;

	this->ProcessEvent ( pFnToggleEffects, &ToggleEffects_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.ShutDown
// [0x00020102] 
// Parameters infos:

void UKFAfflictionManager::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.ShutDown" );

	UKFAfflictionManager_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetAfflictionAttackSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::GetAfflictionAttackSpeedModifier ( )
{
	static UFunction* pFnGetAfflictionAttackSpeedModifier = NULL;

	if ( ! pFnGetAfflictionAttackSpeedModifier )
		pFnGetAfflictionAttackSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetAfflictionAttackSpeedModifier" );

	UKFAfflictionManager_execGetAfflictionAttackSpeedModifier_Parms GetAfflictionAttackSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetAfflictionAttackSpeedModifier, &GetAfflictionAttackSpeedModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetAfflictionSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::GetAfflictionSpeedModifier ( )
{
	static UFunction* pFnGetAfflictionSpeedModifier = NULL;

	if ( ! pFnGetAfflictionSpeedModifier )
		pFnGetAfflictionSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetAfflictionSpeedModifier" );

	UKFAfflictionManager_execGetAfflictionSpeedModifier_Parms GetAfflictionSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetAfflictionSpeedModifier, &GetAfflictionSpeedModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetAfflictionDamageModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::GetAfflictionDamageModifier ( )
{
	static UFunction* pFnGetAfflictionDamageModifier = NULL;

	if ( ! pFnGetAfflictionDamageModifier )
		pFnGetAfflictionDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetAfflictionDamageModifier" );

	UKFAfflictionManager_execGetAfflictionDamageModifier_Parms GetAfflictionDamageModifier_Parms;

	this->ProcessEvent ( pFnGetAfflictionDamageModifier, &GetAfflictionDamageModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetAfflictionStunModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::GetAfflictionStunModifier ( )
{
	static UFunction* pFnGetAfflictionStunModifier = NULL;

	if ( ! pFnGetAfflictionStunModifier )
		pFnGetAfflictionStunModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetAfflictionStunModifier" );

	UKFAfflictionManager_execGetAfflictionStunModifier_Parms GetAfflictionStunModifier_Parms;

	this->ProcessEvent ( pFnGetAfflictionStunModifier, &GetAfflictionStunModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetAfflictionStumbleModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::GetAfflictionStumbleModifier ( )
{
	static UFunction* pFnGetAfflictionStumbleModifier = NULL;

	if ( ! pFnGetAfflictionStumbleModifier )
		pFnGetAfflictionStumbleModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetAfflictionStumbleModifier" );

	UKFAfflictionManager_execGetAfflictionStumbleModifier_Parms GetAfflictionStumbleModifier_Parms;

	this->ProcessEvent ( pFnGetAfflictionStumbleModifier, &GetAfflictionStumbleModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetAfflictionKnockdownModifier
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::GetAfflictionKnockdownModifier ( )
{
	static UFunction* pFnGetAfflictionKnockdownModifier = NULL;

	if ( ! pFnGetAfflictionKnockdownModifier )
		pFnGetAfflictionKnockdownModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetAfflictionKnockdownModifier" );

	UKFAfflictionManager_execGetAfflictionKnockdownModifier_Parms GetAfflictionKnockdownModifier_Parms;

	this->ProcessEvent ( pFnGetAfflictionKnockdownModifier, &GetAfflictionKnockdownModifier_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetAfflictionDuration
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::GetAfflictionDuration ( )
{
	static UFunction* pFnGetAfflictionDuration = NULL;

	if ( ! pFnGetAfflictionDuration )
		pFnGetAfflictionDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetAfflictionDuration" );

	UKFAfflictionManager_execGetAfflictionDuration_Parms GetAfflictionDuration_Parms;

	this->ProcessEvent ( pFnGetAfflictionDuration, &GetAfflictionDuration_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.VerifyAfflictionInstance
// [0x00020102] 
// Parameters infos:

void UKFAfflictionManager::VerifyAfflictionInstance ( )
{
	static UFunction* pFnVerifyAfflictionInstance = NULL;

	if ( ! pFnVerifyAfflictionInstance )
		pFnVerifyAfflictionInstance = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.VerifyAfflictionInstance" );

	UKFAfflictionManager_execVerifyAfflictionInstance_Parms VerifyAfflictionInstance_Parms;

	this->ProcessEvent ( pFnVerifyAfflictionInstance, &VerifyAfflictionInstance_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetAfflictionVulnerability
// [0x00020102] 
// Parameters infos:

void UKFAfflictionManager::GetAfflictionVulnerability ( )
{
	static UFunction* pFnGetAfflictionVulnerability = NULL;

	if ( ! pFnGetAfflictionVulnerability )
		pFnGetAfflictionVulnerability = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetAfflictionVulnerability" );

	UKFAfflictionManager_execGetAfflictionVulnerability_Parms GetAfflictionVulnerability_Parms;

	this->ProcessEvent ( pFnGetAfflictionVulnerability, &GetAfflictionVulnerability_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.AccrueAffliction
// [0x00024002] 
// Parameters infos:

void UKFAfflictionManager::AccrueAffliction ( )
{
	static UFunction* pFnAccrueAffliction = NULL;

	if ( ! pFnAccrueAffliction )
		pFnAccrueAffliction = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.AccrueAffliction" );

	UKFAfflictionManager_execAccrueAffliction_Parms AccrueAffliction_Parms;

	this->ProcessEvent ( pFnAccrueAffliction, &AccrueAffliction_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.ProcessEffectBasedAfflictions
// [0x00080002] 
// Parameters infos:

void UKFAfflictionManager::ProcessEffectBasedAfflictions ( )
{
	static UFunction* pFnProcessEffectBasedAfflictions = NULL;

	if ( ! pFnProcessEffectBasedAfflictions )
		pFnProcessEffectBasedAfflictions = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.ProcessEffectBasedAfflictions" );

	UKFAfflictionManager_execProcessEffectBasedAfflictions_Parms ProcessEffectBasedAfflictions_Parms;

	this->ProcessEvent ( pFnProcessEffectBasedAfflictions, &ProcessEffectBasedAfflictions_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.ProcessHitReactionAfflictions
// [0x00080002] 
// Parameters infos:

void UKFAfflictionManager::ProcessHitReactionAfflictions ( )
{
	static UFunction* pFnProcessHitReactionAfflictions = NULL;

	if ( ! pFnProcessHitReactionAfflictions )
		pFnProcessHitReactionAfflictions = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.ProcessHitReactionAfflictions" );

	UKFAfflictionManager_execProcessHitReactionAfflictions_Parms ProcessHitReactionAfflictions_Parms;

	this->ProcessEvent ( pFnProcessHitReactionAfflictions, &ProcessHitReactionAfflictions_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.ProcessSpecialMoveAfflictions
// [0x00080002] 
// Parameters infos:

void UKFAfflictionManager::ProcessSpecialMoveAfflictions ( )
{
	static UFunction* pFnProcessSpecialMoveAfflictions = NULL;

	if ( ! pFnProcessSpecialMoveAfflictions )
		pFnProcessSpecialMoveAfflictions = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.ProcessSpecialMoveAfflictions" );

	UKFAfflictionManager_execProcessSpecialMoveAfflictions_Parms ProcessSpecialMoveAfflictions_Parms;

	this->ProcessEvent ( pFnProcessSpecialMoveAfflictions, &ProcessSpecialMoveAfflictions_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.GetPredictedHitReaction
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::GetPredictedHitReaction ( )
{
	static UFunction* pFnGetPredictedHitReaction = NULL;

	if ( ! pFnGetPredictedHitReaction )
		pFnGetPredictedHitReaction = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.GetPredictedHitReaction" );

	UKFAfflictionManager_execGetPredictedHitReaction_Parms GetPredictedHitReaction_Parms;

	this->ProcessEvent ( pFnGetPredictedHitReaction, &GetPredictedHitReaction_Parms, NULL );
};

// Function KFGame.KFAfflictionManager.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void UKFAfflictionManager::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionManager.NotifyTakeHit" );

	UKFAfflictionManager_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function KFGame.KFCharacterInfoBase.SetCharacterAnimFromArch
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfoBase::SetCharacterAnimFromArch ( )
{
	static UFunction* pFnSetCharacterAnimFromArch = NULL;

	if ( ! pFnSetCharacterAnimFromArch )
		pFnSetCharacterAnimFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfoBase.SetCharacterAnimFromArch" );

	UKFCharacterInfoBase_execSetCharacterAnimFromArch_Parms SetCharacterAnimFromArch_Parms;

	this->ProcessEvent ( pFnSetCharacterAnimFromArch, &SetCharacterAnimFromArch_Parms, NULL );
};

// Function KFGame.KFCharacterInfoBase.GetWeaponAnimSetIdx
// [0x00022002] 
// Parameters infos:

void UKFCharacterInfoBase::GetWeaponAnimSetIdx ( )
{
	static UFunction* pFnGetWeaponAnimSetIdx = NULL;

	if ( ! pFnGetWeaponAnimSetIdx )
		pFnGetWeaponAnimSetIdx = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfoBase.GetWeaponAnimSetIdx" );

	UKFCharacterInfoBase_execGetWeaponAnimSetIdx_Parms GetWeaponAnimSetIdx_Parms;

	this->ProcessEvent ( pFnGetWeaponAnimSetIdx, &GetWeaponAnimSetIdx_Parms, NULL );
};

// Function KFGame.KFCharacterInfoBase.SetFirstPersonArmsFromArch
// [0x00024000] 
// Parameters infos:

void UKFCharacterInfoBase::SetFirstPersonArmsFromArch ( )
{
	static UFunction* pFnSetFirstPersonArmsFromArch = NULL;

	if ( ! pFnSetFirstPersonArmsFromArch )
		pFnSetFirstPersonArmsFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfoBase.SetFirstPersonArmsFromArch" );

	UKFCharacterInfoBase_execSetFirstPersonArmsFromArch_Parms SetFirstPersonArmsFromArch_Parms;

	this->ProcessEvent ( pFnSetFirstPersonArmsFromArch, &SetFirstPersonArmsFromArch_Parms, NULL );
};

// Function KFGame.KFCharacterInfoBase.SetBodySkin
// [0x00020100] 
// Parameters infos:

void UKFCharacterInfoBase::SetBodySkin ( )
{
	static UFunction* pFnSetBodySkin = NULL;

	if ( ! pFnSetBodySkin )
		pFnSetBodySkin = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfoBase.SetBodySkin" );

	UKFCharacterInfoBase_execSetBodySkin_Parms SetBodySkin_Parms;

	this->ProcessEvent ( pFnSetBodySkin, &SetBodySkin_Parms, NULL );
};

// Function KFGame.KFCharacterInfoBase.SetBodyMesh
// [0x00024100] 
// Parameters infos:

void UKFCharacterInfoBase::SetBodyMesh ( )
{
	static UFunction* pFnSetBodyMesh = NULL;

	if ( ! pFnSetBodyMesh )
		pFnSetBodyMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfoBase.SetBodyMesh" );

	UKFCharacterInfoBase_execSetBodyMesh_Parms SetBodyMesh_Parms;

	this->ProcessEvent ( pFnSetBodyMesh, &SetBodyMesh_Parms, NULL );
};

// Function KFGame.KFCharacterInfoBase.SetCharacterMeshFromArch
// [0x00024100] 
// Parameters infos:

void UKFCharacterInfoBase::SetCharacterMeshFromArch ( )
{
	static UFunction* pFnSetCharacterMeshFromArch = NULL;

	if ( ! pFnSetCharacterMeshFromArch )
		pFnSetCharacterMeshFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfoBase.SetCharacterMeshFromArch" );

	UKFCharacterInfoBase_execSetCharacterMeshFromArch_Parms SetCharacterMeshFromArch_Parms;

	this->ProcessEvent ( pFnSetCharacterMeshFromArch, &SetCharacterMeshFromArch_Parms, NULL );
};

// Function KFGame.KFCharacterInfoBase.SetCharacterFromArch
// [0x00024102] 
// Parameters infos:

void UKFCharacterInfoBase::SetCharacterFromArch ( )
{
	static UFunction* pFnSetCharacterFromArch = NULL;

	if ( ! pFnSetCharacterFromArch )
		pFnSetCharacterFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfoBase.SetCharacterFromArch" );

	UKFCharacterInfoBase_execSetCharacterFromArch_Parms SetCharacterFromArch_Parms;

	this->ProcessEvent ( pFnSetCharacterFromArch, &SetCharacterFromArch_Parms, NULL );
};

// Function KFGame.KFCharacterInfoBase.GetCharPortrait
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfoBase::GetCharPortrait ( )
{
	static UFunction* pFnGetCharPortrait = NULL;

	if ( ! pFnGetCharPortrait )
		pFnGetCharPortrait = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfoBase.GetCharPortrait" );

	UKFCharacterInfoBase_execGetCharPortrait_Parms GetCharPortrait_Parms;

	this->ProcessEvent ( pFnGetCharPortrait, &GetCharPortrait_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetCharacterAnimFromArch
// [0x00020102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetCharacterAnimFromArch ( )
{
	static UFunction* pFnSetCharacterAnimFromArch = NULL;

	if ( ! pFnSetCharacterAnimFromArch )
		pFnSetCharacterAnimFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetCharacterAnimFromArch" );

	UKFCharacterInfo_Human_execSetCharacterAnimFromArch_Parms SetCharacterAnimFromArch_Parms;

	this->ProcessEvent ( pFnSetCharacterAnimFromArch, &SetCharacterAnimFromArch_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.GetWeaponAnimSetIdx
// [0x00022002] 
// Parameters infos:

void UKFCharacterInfo_Human::GetWeaponAnimSetIdx ( )
{
	static UFunction* pFnGetWeaponAnimSetIdx = NULL;

	if ( ! pFnGetWeaponAnimSetIdx )
		pFnGetWeaponAnimSetIdx = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.GetWeaponAnimSetIdx" );

	UKFCharacterInfo_Human_execGetWeaponAnimSetIdx_Parms GetWeaponAnimSetIdx_Parms;

	this->ProcessEvent ( pFnGetWeaponAnimSetIdx, &GetWeaponAnimSetIdx_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetArmsMeshAndSkin
// [0x00020102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetArmsMeshAndSkin ( )
{
	static UFunction* pFnSetArmsMeshAndSkin = NULL;

	if ( ! pFnSetArmsMeshAndSkin )
		pFnSetArmsMeshAndSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetArmsMeshAndSkin" );

	UKFCharacterInfo_Human_execSetArmsMeshAndSkin_Parms SetArmsMeshAndSkin_Parms;

	this->ProcessEvent ( pFnSetArmsMeshAndSkin, &SetArmsMeshAndSkin_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetFirstPersonArmsFromArch
// [0x00024102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetFirstPersonArmsFromArch ( )
{
	static UFunction* pFnSetFirstPersonArmsFromArch = NULL;

	if ( ! pFnSetFirstPersonArmsFromArch )
		pFnSetFirstPersonArmsFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetFirstPersonArmsFromArch" );

	UKFCharacterInfo_Human_execSetFirstPersonArmsFromArch_Parms SetFirstPersonArmsFromArch_Parms;

	this->ProcessEvent ( pFnSetFirstPersonArmsFromArch, &SetFirstPersonArmsFromArch_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.DetachAttachment
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfo_Human::DetachAttachment ( )
{
	static UFunction* pFnDetachAttachment = NULL;

	if ( ! pFnDetachAttachment )
		pFnDetachAttachment = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.DetachAttachment" );

	UKFCharacterInfo_Human_execDetachAttachment_Parms DetachAttachment_Parms;

	this->ProcessEvent ( pFnDetachAttachment, &DetachAttachment_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.RemoveAttachmentMeshAndSkin
// [0x00024102] 
// Parameters infos:

void UKFCharacterInfo_Human::RemoveAttachmentMeshAndSkin ( )
{
	static UFunction* pFnRemoveAttachmentMeshAndSkin = NULL;

	if ( ! pFnRemoveAttachmentMeshAndSkin )
		pFnRemoveAttachmentMeshAndSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.RemoveAttachmentMeshAndSkin" );

	UKFCharacterInfo_Human_execRemoveAttachmentMeshAndSkin_Parms RemoveAttachmentMeshAndSkin_Parms;

	this->ProcessEvent ( pFnRemoveAttachmentMeshAndSkin, &RemoveAttachmentMeshAndSkin_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.GetAttachmentSlotIndex
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfo_Human::GetAttachmentSlotIndex ( )
{
	static UFunction* pFnGetAttachmentSlotIndex = NULL;

	if ( ! pFnGetAttachmentSlotIndex )
		pFnGetAttachmentSlotIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.GetAttachmentSlotIndex" );

	UKFCharacterInfo_Human_execGetAttachmentSlotIndex_Parms GetAttachmentSlotIndex_Parms;

	this->ProcessEvent ( pFnGetAttachmentSlotIndex, &GetAttachmentSlotIndex_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.GetOverrideCase
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfo_Human::GetOverrideCase ( )
{
	static UFunction* pFnGetOverrideCase = NULL;

	if ( ! pFnGetOverrideCase )
		pFnGetOverrideCase = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.GetOverrideCase" );

	UKFCharacterInfo_Human_execGetOverrideCase_Parms GetOverrideCase_Parms;

	this->ProcessEvent ( pFnGetOverrideCase, &GetOverrideCase_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.DetachConflictingAttachments
// [0x00024002] 
// Parameters infos:

void UKFCharacterInfo_Human::DetachConflictingAttachments ( )
{
	static UFunction* pFnDetachConflictingAttachments = NULL;

	if ( ! pFnDetachConflictingAttachments )
		pFnDetachConflictingAttachments = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.DetachConflictingAttachments" );

	UKFCharacterInfo_Human_execDetachConflictingAttachments_Parms DetachConflictingAttachments_Parms;

	this->ProcessEvent ( pFnDetachConflictingAttachments, &DetachConflictingAttachments_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetAttachmentMeshAndSkin
// [0x00044003] ( FUNC_Final )
// Parameters infos:

void UKFCharacterInfo_Human::SetAttachmentMeshAndSkin ( )
{
	static UFunction* pFnSetAttachmentMeshAndSkin = NULL;

	if ( ! pFnSetAttachmentMeshAndSkin )
		pFnSetAttachmentMeshAndSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetAttachmentMeshAndSkin" );

	UKFCharacterInfo_Human_execSetAttachmentMeshAndSkin_Parms SetAttachmentMeshAndSkin_Parms;

	this->ProcessEvent ( pFnSetAttachmentMeshAndSkin, &SetAttachmentMeshAndSkin_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetAttachmentSkinMaterial
// [0x00484102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetAttachmentSkinMaterial ( )
{
	static UFunction* pFnSetAttachmentSkinMaterial = NULL;

	if ( ! pFnSetAttachmentSkinMaterial )
		pFnSetAttachmentSkinMaterial = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetAttachmentSkinMaterial" );

	UKFCharacterInfo_Human_execSetAttachmentSkinMaterial_Parms SetAttachmentSkinMaterial_Parms;

	this->ProcessEvent ( pFnSetAttachmentSkinMaterial, &SetAttachmentSkinMaterial_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetAttachmentMesh
// [0x00884102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetAttachmentMesh ( )
{
	static UFunction* pFnSetAttachmentMesh = NULL;

	if ( ! pFnSetAttachmentMesh )
		pFnSetAttachmentMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetAttachmentMesh" );

	UKFCharacterInfo_Human_execSetAttachmentMesh_Parms SetAttachmentMesh_Parms;

	this->ProcessEvent ( pFnSetAttachmentMesh, &SetAttachmentMesh_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetFirstPersonCosmeticAttachment
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFCharacterInfo_Human::SetFirstPersonCosmeticAttachment ( )
{
	static UFunction* pFnSetFirstPersonCosmeticAttachment = NULL;

	if ( ! pFnSetFirstPersonCosmeticAttachment )
		pFnSetFirstPersonCosmeticAttachment = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetFirstPersonCosmeticAttachment" );

	UKFCharacterInfo_Human_execSetFirstPersonCosmeticAttachment_Parms SetFirstPersonCosmeticAttachment_Parms;

	pFnSetFirstPersonCosmeticAttachment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetFirstPersonCosmeticAttachment, &SetFirstPersonCosmeticAttachment_Parms, NULL );

	pFnSetFirstPersonCosmeticAttachment->FunctionFlags |= 0x400;
};

// Function KFGame.KFCharacterInfo_Human.IsAttachmentAvailable
// [0x00420002] 
// Parameters infos:

void UKFCharacterInfo_Human::IsAttachmentAvailable ( )
{
	static UFunction* pFnIsAttachmentAvailable = NULL;

	if ( ! pFnIsAttachmentAvailable )
		pFnIsAttachmentAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.IsAttachmentAvailable" );

	UKFCharacterInfo_Human_execIsAttachmentAvailable_Parms IsAttachmentAvailable_Parms;

	this->ProcessEvent ( pFnIsAttachmentAvailable, &IsAttachmentAvailable_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetHeadMeshAndSkin
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFCharacterInfo_Human::SetHeadMeshAndSkin ( )
{
	static UFunction* pFnSetHeadMeshAndSkin = NULL;

	if ( ! pFnSetHeadMeshAndSkin )
		pFnSetHeadMeshAndSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetHeadMeshAndSkin" );

	UKFCharacterInfo_Human_execSetHeadMeshAndSkin_Parms SetHeadMeshAndSkin_Parms;

	this->ProcessEvent ( pFnSetHeadMeshAndSkin, &SetHeadMeshAndSkin_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetHeadSkinMaterial
// [0x00080102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetHeadSkinMaterial ( )
{
	static UFunction* pFnSetHeadSkinMaterial = NULL;

	if ( ! pFnSetHeadSkinMaterial )
		pFnSetHeadSkinMaterial = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetHeadSkinMaterial" );

	UKFCharacterInfo_Human_execSetHeadSkinMaterial_Parms SetHeadSkinMaterial_Parms;

	this->ProcessEvent ( pFnSetHeadSkinMaterial, &SetHeadSkinMaterial_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetBodySkinMaterial
// [0x00080102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetBodySkinMaterial ( )
{
	static UFunction* pFnSetBodySkinMaterial = NULL;

	if ( ! pFnSetBodySkinMaterial )
		pFnSetBodySkinMaterial = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetBodySkinMaterial" );

	UKFCharacterInfo_Human_execSetBodySkinMaterial_Parms SetBodySkinMaterial_Parms;

	this->ProcessEvent ( pFnSetBodySkinMaterial, &SetBodySkinMaterial_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetBodyMeshAndSkin
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFCharacterInfo_Human::SetBodyMeshAndSkin ( )
{
	static UFunction* pFnSetBodyMeshAndSkin = NULL;

	if ( ! pFnSetBodyMeshAndSkin )
		pFnSetBodyMeshAndSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetBodyMeshAndSkin" );

	UKFCharacterInfo_Human_execSetBodyMeshAndSkin_Parms SetBodyMeshAndSkin_Parms;

	this->ProcessEvent ( pFnSetBodyMeshAndSkin, &SetBodyMeshAndSkin_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.InitCharacterMICs
// [0x00044003] ( FUNC_Final )
// Parameters infos:

void UKFCharacterInfo_Human::InitCharacterMICs ( )
{
	static UFunction* pFnInitCharacterMICs = NULL;

	if ( ! pFnInitCharacterMICs )
		pFnInitCharacterMICs = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.InitCharacterMICs" );

	UKFCharacterInfo_Human_execInitCharacterMICs_Parms InitCharacterMICs_Parms;

	this->ProcessEvent ( pFnInitCharacterMICs, &InitCharacterMICs_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetCharacterMeshFromArch
// [0x00024102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetCharacterMeshFromArch ( )
{
	static UFunction* pFnSetCharacterMeshFromArch = NULL;

	if ( ! pFnSetCharacterMeshFromArch )
		pFnSetCharacterMeshFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetCharacterMeshFromArch" );

	UKFCharacterInfo_Human_execSetCharacterMeshFromArch_Parms SetCharacterMeshFromArch_Parms;

	this->ProcessEvent ( pFnSetCharacterMeshFromArch, &SetCharacterMeshFromArch_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.SetCharacterFromArch
// [0x00024102] 
// Parameters infos:

void UKFCharacterInfo_Human::SetCharacterFromArch ( )
{
	static UFunction* pFnSetCharacterFromArch = NULL;

	if ( ! pFnSetCharacterFromArch )
		pFnSetCharacterFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.SetCharacterFromArch" );

	UKFCharacterInfo_Human_execSetCharacterFromArch_Parms SetCharacterFromArch_Parms;

	this->ProcessEvent ( pFnSetCharacterFromArch, &SetCharacterFromArch_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.GetFavoriteWeaponIndexOf
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfo_Human::GetFavoriteWeaponIndexOf ( )
{
	static UFunction* pFnGetFavoriteWeaponIndexOf = NULL;

	if ( ! pFnGetFavoriteWeaponIndexOf )
		pFnGetFavoriteWeaponIndexOf = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.GetFavoriteWeaponIndexOf" );

	UKFCharacterInfo_Human_execGetFavoriteWeaponIndexOf_Parms GetFavoriteWeaponIndexOf_Parms;

	this->ProcessEvent ( pFnGetFavoriteWeaponIndexOf, &GetFavoriteWeaponIndexOf_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.GetFirstPersonArms
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfo_Human::GetFirstPersonArms ( )
{
	static UFunction* pFnGetFirstPersonArms = NULL;

	if ( ! pFnGetFirstPersonArms )
		pFnGetFirstPersonArms = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.GetFirstPersonArms" );

	UKFCharacterInfo_Human_execGetFirstPersonArms_Parms GetFirstPersonArms_Parms;

	this->ProcessEvent ( pFnGetFirstPersonArms, &GetFirstPersonArms_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.Get1pMeshByIndex
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfo_Human::Get1pMeshByIndex ( )
{
	static UFunction* pFnGet1pMeshByIndex = NULL;

	if ( ! pFnGet1pMeshByIndex )
		pFnGet1pMeshByIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.Get1pMeshByIndex" );

	UKFCharacterInfo_Human_execGet1pMeshByIndex_Parms Get1pMeshByIndex_Parms;

	this->ProcessEvent ( pFnGet1pMeshByIndex, &Get1pMeshByIndex_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.Get1pMesh
// [0x00420002] 
// Parameters infos:

void UKFCharacterInfo_Human::Get1pMesh ( )
{
	static UFunction* pFnGet1pMesh = NULL;

	if ( ! pFnGet1pMesh )
		pFnGet1pMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.Get1pMesh" );

	UKFCharacterInfo_Human_execGet1pMesh_Parms Get1pMesh_Parms;

	this->ProcessEvent ( pFnGet1pMesh, &Get1pMesh_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.GetMeshByIndex
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfo_Human::GetMeshByIndex ( )
{
	static UFunction* pFnGetMeshByIndex = NULL;

	if ( ! pFnGetMeshByIndex )
		pFnGetMeshByIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.GetMeshByIndex" );

	UKFCharacterInfo_Human_execGetMeshByIndex_Parms GetMeshByIndex_Parms;

	this->ProcessEvent ( pFnGetMeshByIndex, &GetMeshByIndex_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.GetMesh
// [0x00420002] 
// Parameters infos:

void UKFCharacterInfo_Human::GetMesh ( )
{
	static UFunction* pFnGetMesh = NULL;

	if ( ! pFnGetMesh )
		pFnGetMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.GetMesh" );

	UKFCharacterInfo_Human_execGetMesh_Parms GetMesh_Parms;

	this->ProcessEvent ( pFnGetMesh, &GetMesh_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Human.GetAssetId
// [0x00020002] 
// Parameters infos:

void UKFCharacterInfo_Human::GetAssetId ( )
{
	static UFunction* pFnGetAssetId = NULL;

	if ( ! pFnGetAssetId )
		pFnGetAssetId = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Human.GetAssetId" );

	UKFCharacterInfo_Human_execGetAssetId_Parms GetAssetId_Parms;

	this->ProcessEvent ( pFnGetAssetId, &GetAssetId_Parms, NULL );
};

// Function KFGame.KFCharacterInfo_Monster.SetCharacterMeshFromArch
// [0x00824102] 
// Parameters infos:

void UKFCharacterInfo_Monster::SetCharacterMeshFromArch ( )
{
	static UFunction* pFnSetCharacterMeshFromArch = NULL;

	if ( ! pFnSetCharacterMeshFromArch )
		pFnSetCharacterMeshFromArch = UObject::FindObject< UFunction > ( "Function KFGame.KFCharacterInfo_Monster.SetCharacterMeshFromArch" );

	UKFCharacterInfo_Monster_execSetCharacterMeshFromArch_Parms SetCharacterMeshFromArch_Parms;

	this->ProcessEvent ( pFnSetCharacterMeshFromArch, &SetCharacterMeshFromArch_Parms, NULL );
};

// Function KFGame.KFPawn_Human.DisplayDebug
// [0x00420102] 
// Parameters infos:

void AKFPawn_Human::DisplayDebug ( )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.DisplayDebug" );

	AKFPawn_Human_execDisplayDebug_Parms DisplayDebug_Parms;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );
};

// Function KFGame.KFPawn_Human.DrawPerkHUD
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::DrawPerkHUD ( )
{
	static UFunction* pFnDrawPerkHUD = NULL;

	if ( ! pFnDrawPerkHUD )
		pFnDrawPerkHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.DrawPerkHUD" );

	AKFPawn_Human_execDrawPerkHUD_Parms DrawPerkHUD_Parms;

	this->ProcessEvent ( pFnDrawPerkHUD, &DrawPerkHUD_Parms, NULL );
};

// Function KFGame.KFPawn_Human.DrawHUD
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.DrawHUD" );

	AKFPawn_Human_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function KFGame.KFPawn_Human.DrawDoors
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Human::DrawDoors ( )
{
	static UFunction* pFnDrawDoors = NULL;

	if ( ! pFnDrawDoors )
		pFnDrawDoors = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.DrawDoors" );

	AKFPawn_Human_execDrawDoors_Parms DrawDoors_Parms;

	pFnDrawDoors->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDoors, &DrawDoors_Parms, NULL );

	pFnDrawDoors->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Human.SetMeshLightingChannels
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::SetMeshLightingChannels ( )
{
	static UFunction* pFnSetMeshLightingChannels = NULL;

	if ( ! pFnSetMeshLightingChannels )
		pFnSetMeshLightingChannels = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SetMeshLightingChannels" );

	AKFPawn_Human_execSetMeshLightingChannels_Parms SetMeshLightingChannels_Parms;

	this->ProcessEvent ( pFnSetMeshLightingChannels, &SetMeshLightingChannels_Parms, NULL );
};

// Function KFGame.KFPawn_Human.SetFirstPersonVisibility
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::SetFirstPersonVisibility ( )
{
	static UFunction* pFnSetFirstPersonVisibility = NULL;

	if ( ! pFnSetFirstPersonVisibility )
		pFnSetFirstPersonVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SetFirstPersonVisibility" );

	AKFPawn_Human_execSetFirstPersonVisibility_Parms SetFirstPersonVisibility_Parms;

	this->ProcessEvent ( pFnSetFirstPersonVisibility, &SetFirstPersonVisibility_Parms, NULL );
};

// Function KFGame.KFPawn_Human.NotifyOutOfBattery
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventNotifyOutOfBattery ( )
{
	static UFunction* pFnNotifyOutOfBattery = NULL;

	if ( ! pFnNotifyOutOfBattery )
		pFnNotifyOutOfBattery = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.NotifyOutOfBattery" );

	AKFPawn_Human_eventNotifyOutOfBattery_Parms NotifyOutOfBattery_Parms;

	this->ProcessEvent ( pFnNotifyOutOfBattery, &NotifyOutOfBattery_Parms, NULL );
};

// Function KFGame.KFPawn_Human.ServerSetFlashlight
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPawn_Human::ServerSetFlashlight ( )
{
	static UFunction* pFnServerSetFlashlight = NULL;

	if ( ! pFnServerSetFlashlight )
		pFnServerSetFlashlight = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.ServerSetFlashlight" );

	AKFPawn_Human_execServerSetFlashlight_Parms ServerSetFlashlight_Parms;

	this->ProcessEvent ( pFnServerSetFlashlight, &ServerSetFlashlight_Parms, NULL );
};

// Function KFGame.KFPawn_Human.SetFlashlight
// [0x00024102] 
// Parameters infos:

void AKFPawn_Human::SetFlashlight ( )
{
	static UFunction* pFnSetFlashlight = NULL;

	if ( ! pFnSetFlashlight )
		pFnSetFlashlight = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SetFlashlight" );

	AKFPawn_Human_execSetFlashlight_Parms SetFlashlight_Parms;

	this->ProcessEvent ( pFnSetFlashlight, &SetFlashlight_Parms, NULL );
};

// Function KFGame.KFPawn_Human.ToggleEquipment
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::ToggleEquipment ( )
{
	static UFunction* pFnToggleEquipment = NULL;

	if ( ! pFnToggleEquipment )
		pFnToggleEquipment = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.ToggleEquipment" );

	AKFPawn_Human_execToggleEquipment_Parms ToggleEquipment_Parms;

	this->ProcessEvent ( pFnToggleEquipment, &ToggleEquipment_Parms, NULL );
};

// Function KFGame.KFPawn_Human.Timer_CheckSurrounded
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::Timer_CheckSurrounded ( )
{
	static UFunction* pFnTimer_CheckSurrounded = NULL;

	if ( ! pFnTimer_CheckSurrounded )
		pFnTimer_CheckSurrounded = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.Timer_CheckSurrounded" );

	AKFPawn_Human_execTimer_CheckSurrounded_Parms Timer_CheckSurrounded_Parms;

	this->ProcessEvent ( pFnTimer_CheckSurrounded, &Timer_CheckSurrounded_Parms, NULL );
};

// Function KFGame.KFPawn_Human.Bump
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventBump ( )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.Bump" );

	AKFPawn_Human_eventBump_Parms Bump_Parms;

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function KFGame.KFPawn_Human.DoJump
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::DoJump ( )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.DoJump" );

	AKFPawn_Human_execDoJump_Parms DoJump_Parms;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );
};

// Function KFGame.KFPawn_Human.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SetSprinting" );

	AKFPawn_Human_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function KFGame.KFPawn_Human.StopTraderDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::StopTraderDialog ( )
{
	static UFunction* pFnStopTraderDialog = NULL;

	if ( ! pFnStopTraderDialog )
		pFnStopTraderDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.StopTraderDialog" );

	AKFPawn_Human_execStopTraderDialog_Parms StopTraderDialog_Parms;

	this->ProcessEvent ( pFnStopTraderDialog, &StopTraderDialog_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PlayTraderDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::PlayTraderDialog ( )
{
	static UFunction* pFnPlayTraderDialog = NULL;

	if ( ! pFnPlayTraderDialog )
		pFnPlayTraderDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PlayTraderDialog" );

	AKFPawn_Human_execPlayTraderDialog_Parms PlayTraderDialog_Parms;

	this->ProcessEvent ( pFnPlayTraderDialog, &PlayTraderDialog_Parms, NULL );
};

// Function KFGame.KFPawn_Human.TimeSpentIdling
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::TimeSpentIdling ( )
{
	static UFunction* pFnTimeSpentIdling = NULL;

	if ( ! pFnTimeSpentIdling )
		pFnTimeSpentIdling = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.TimeSpentIdling" );

	AKFPawn_Human_execTimeSpentIdling_Parms TimeSpentIdling_Parms;

	this->ProcessEvent ( pFnTimeSpentIdling, &TimeSpentIdling_Parms, NULL );
};

// Function KFGame.KFPawn_Human.ResetIdleStartTime
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::ResetIdleStartTime ( )
{
	static UFunction* pFnResetIdleStartTime = NULL;

	if ( ! pFnResetIdleStartTime )
		pFnResetIdleStartTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.ResetIdleStartTime" );

	AKFPawn_Human_execResetIdleStartTime_Parms ResetIdleStartTime_Parms;

	this->ProcessEvent ( pFnResetIdleStartTime, &ResetIdleStartTime_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateContinuousDamage
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::UpdateContinuousDamage ( )
{
	static UFunction* pFnUpdateContinuousDamage = NULL;

	if ( ! pFnUpdateContinuousDamage )
		pFnUpdateContinuousDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateContinuousDamage" );

	AKFPawn_Human_execUpdateContinuousDamage_Parms UpdateContinuousDamage_Parms;

	this->ProcessEvent ( pFnUpdateContinuousDamage, &UpdateContinuousDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateDamageTakenStreak
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::UpdateDamageTakenStreak ( )
{
	static UFunction* pFnUpdateDamageTakenStreak = NULL;

	if ( ! pFnUpdateDamageTakenStreak )
		pFnUpdateDamageTakenStreak = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateDamageTakenStreak" );

	AKFPawn_Human_execUpdateDamageTakenStreak_Parms UpdateDamageTakenStreak_Parms;

	this->ProcessEvent ( pFnUpdateDamageTakenStreak, &UpdateDamageTakenStreak_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateKillStreak
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::UpdateKillStreak ( )
{
	static UFunction* pFnUpdateKillStreak = NULL;

	if ( ! pFnUpdateKillStreak )
		pFnUpdateKillStreak = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateKillStreak" );

	AKFPawn_Human_execUpdateKillStreak_Parms UpdateKillStreak_Parms;

	this->ProcessEvent ( pFnUpdateKillStreak, &UpdateKillStreak_Parms, NULL );
};

// Function KFGame.KFPawn_Human.CaughtDoshDialogTimer
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::CaughtDoshDialogTimer ( )
{
	static UFunction* pFnCaughtDoshDialogTimer = NULL;

	if ( ! pFnCaughtDoshDialogTimer )
		pFnCaughtDoshDialogTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.CaughtDoshDialogTimer" );

	AKFPawn_Human_execCaughtDoshDialogTimer_Parms CaughtDoshDialogTimer_Parms;

	this->ProcessEvent ( pFnCaughtDoshDialogTimer, &CaughtDoshDialogTimer_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateDoshCaught
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::UpdateDoshCaught ( )
{
	static UFunction* pFnUpdateDoshCaught = NULL;

	if ( ! pFnUpdateDoshCaught )
		pFnUpdateDoshCaught = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateDoshCaught" );

	AKFPawn_Human_execUpdateDoshCaught_Parms UpdateDoshCaught_Parms;

	this->ProcessEvent ( pFnUpdateDoshCaught, &UpdateDoshCaught_Parms, NULL );
};

// Function KFGame.KFPawn_Human.SetDialogResponseDelegate
// [0x00024002] 
// Parameters infos:

void AKFPawn_Human::SetDialogResponseDelegate ( )
{
	static UFunction* pFnSetDialogResponseDelegate = NULL;

	if ( ! pFnSetDialogResponseDelegate )
		pFnSetDialogResponseDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SetDialogResponseDelegate" );

	AKFPawn_Human_execSetDialogResponseDelegate_Parms SetDialogResponseDelegate_Parms;

	this->ProcessEvent ( pFnSetDialogResponseDelegate, &SetDialogResponseDelegate_Parms, NULL );
};

// Function KFGame.KFPawn_Human.HandleDialogResponse
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::HandleDialogResponse ( )
{
	static UFunction* pFnHandleDialogResponse = NULL;

	if ( ! pFnHandleDialogResponse )
		pFnHandleDialogResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.HandleDialogResponse" );

	AKFPawn_Human_execHandleDialogResponse_Parms HandleDialogResponse_Parms;

	this->ProcessEvent ( pFnHandleDialogResponse, &HandleDialogResponse_Parms, NULL );
};

// Function KFGame.KFPawn_Human.OnFinishedDialog
// [0x00520000] 
// Parameters infos:

void AKFPawn_Human::OnFinishedDialog ( )
{
	static UFunction* pFnOnFinishedDialog = NULL;

	if ( ! pFnOnFinishedDialog )
		pFnOnFinishedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.OnFinishedDialog" );

	AKFPawn_Human_execOnFinishedDialog_Parms OnFinishedDialog_Parms;

	this->ProcessEvent ( pFnOnFinishedDialog, &OnFinishedDialog_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GetUpdatedSkillIndicators
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::GetUpdatedSkillIndicators ( )
{
	static UFunction* pFnGetUpdatedSkillIndicators = NULL;

	if ( ! pFnGetUpdatedSkillIndicators )
		pFnGetUpdatedSkillIndicators = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GetUpdatedSkillIndicators" );

	AKFPawn_Human_execGetUpdatedSkillIndicators_Parms GetUpdatedSkillIndicators_Parms;

	this->ProcessEvent ( pFnGetUpdatedSkillIndicators, &GetUpdatedSkillIndicators_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GetPerkDoTScaler
// [0x00024002] 
// Parameters infos:

void AKFPawn_Human::GetPerkDoTScaler ( )
{
	static UFunction* pFnGetPerkDoTScaler = NULL;

	if ( ! pFnGetPerkDoTScaler )
		pFnGetPerkDoTScaler = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GetPerkDoTScaler" );

	AKFPawn_Human_execGetPerkDoTScaler_Parms GetPerkDoTScaler_Parms;

	this->ProcessEvent ( pFnGetPerkDoTScaler, &GetPerkDoTScaler_Parms, NULL );
};

// Function KFGame.KFPawn_Human.HasExplosiveResistance
// [0x00080002] 
// Parameters infos:

void AKFPawn_Human::HasExplosiveResistance ( )
{
	static UFunction* pFnHasExplosiveResistance = NULL;

	if ( ! pFnHasExplosiveResistance )
		pFnHasExplosiveResistance = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.HasExplosiveResistance" );

	AKFPawn_Human_execHasExplosiveResistance_Parms HasExplosiveResistance_Parms;

	this->ProcessEvent ( pFnHasExplosiveResistance, &HasExplosiveResistance_Parms, NULL );
};

// Function KFGame.KFPawn_Human.ResetHealingShield
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::ResetHealingShield ( )
{
	static UFunction* pFnResetHealingShield = NULL;

	if ( ! pFnResetHealingShield )
		pFnResetHealingShield = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.ResetHealingShield" );

	AKFPawn_Human_execResetHealingShield_Parms ResetHealingShield_Parms;

	this->ProcessEvent ( pFnResetHealingShield, &ResetHealingShield_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateHealingShield
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::UpdateHealingShield ( )
{
	static UFunction* pFnUpdateHealingShield = NULL;

	if ( ! pFnUpdateHealingShield )
		pFnUpdateHealingShield = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateHealingShield" );

	AKFPawn_Human_execUpdateHealingShield_Parms UpdateHealingShield_Parms;

	this->ProcessEvent ( pFnUpdateHealingShield, &UpdateHealingShield_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GetHealingShieldModifier
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::GetHealingShieldModifier ( )
{
	static UFunction* pFnGetHealingShieldModifier = NULL;

	if ( ! pFnGetHealingShieldModifier )
		pFnGetHealingShieldModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GetHealingShieldModifier" );

	AKFPawn_Human_execGetHealingShieldModifier_Parms GetHealingShieldModifier_Parms;

	this->ProcessEvent ( pFnGetHealingShieldModifier, &GetHealingShieldModifier_Parms, NULL );
};

// Function KFGame.KFPawn_Human.ResetHealingDamageBoost
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::ResetHealingDamageBoost ( )
{
	static UFunction* pFnResetHealingDamageBoost = NULL;

	if ( ! pFnResetHealingDamageBoost )
		pFnResetHealingDamageBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.ResetHealingDamageBoost" );

	AKFPawn_Human_execResetHealingDamageBoost_Parms ResetHealingDamageBoost_Parms;

	this->ProcessEvent ( pFnResetHealingDamageBoost, &ResetHealingDamageBoost_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateHealingDamageBoost
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::UpdateHealingDamageBoost ( )
{
	static UFunction* pFnUpdateHealingDamageBoost = NULL;

	if ( ! pFnUpdateHealingDamageBoost )
		pFnUpdateHealingDamageBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateHealingDamageBoost" );

	AKFPawn_Human_execUpdateHealingDamageBoost_Parms UpdateHealingDamageBoost_Parms;

	this->ProcessEvent ( pFnUpdateHealingDamageBoost, &UpdateHealingDamageBoost_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GetHealingDamageBoostModifier
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::GetHealingDamageBoostModifier ( )
{
	static UFunction* pFnGetHealingDamageBoostModifier = NULL;

	if ( ! pFnGetHealingDamageBoostModifier )
		pFnGetHealingDamageBoostModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GetHealingDamageBoostModifier" );

	AKFPawn_Human_execGetHealingDamageBoostModifier_Parms GetHealingDamageBoostModifier_Parms;

	this->ProcessEvent ( pFnGetHealingDamageBoostModifier, &GetHealingDamageBoostModifier_Parms, NULL );
};

// Function KFGame.KFPawn_Human.ResetHealingSpeedBoost
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::ResetHealingSpeedBoost ( )
{
	static UFunction* pFnResetHealingSpeedBoost = NULL;

	if ( ! pFnResetHealingSpeedBoost )
		pFnResetHealingSpeedBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.ResetHealingSpeedBoost" );

	AKFPawn_Human_execResetHealingSpeedBoost_Parms ResetHealingSpeedBoost_Parms;

	this->ProcessEvent ( pFnResetHealingSpeedBoost, &ResetHealingSpeedBoost_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateHealingSpeedBoost
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::UpdateHealingSpeedBoost ( )
{
	static UFunction* pFnUpdateHealingSpeedBoost = NULL;

	if ( ! pFnUpdateHealingSpeedBoost )
		pFnUpdateHealingSpeedBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateHealingSpeedBoost" );

	AKFPawn_Human_execUpdateHealingSpeedBoost_Parms UpdateHealingSpeedBoost_Parms;

	this->ProcessEvent ( pFnUpdateHealingSpeedBoost, &UpdateHealingSpeedBoost_Parms, NULL );
};

// Function KFGame.KFPawn_Human.StartAirBorneAgentEvent
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::StartAirBorneAgentEvent ( )
{
	static UFunction* pFnStartAirBorneAgentEvent = NULL;

	if ( ! pFnStartAirBorneAgentEvent )
		pFnStartAirBorneAgentEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.StartAirBorneAgentEvent" );

	AKFPawn_Human_execStartAirBorneAgentEvent_Parms StartAirBorneAgentEvent_Parms;

	this->ProcessEvent ( pFnStartAirBorneAgentEvent, &StartAirBorneAgentEvent_Parms, NULL );
};

// Function KFGame.KFPawn_Human.SacrificeExplode
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::SacrificeExplode ( )
{
	static UFunction* pFnSacrificeExplode = NULL;

	if ( ! pFnSacrificeExplode )
		pFnSacrificeExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SacrificeExplode" );

	AKFPawn_Human_execSacrificeExplode_Parms SacrificeExplode_Parms;

	this->ProcessEvent ( pFnSacrificeExplode, &SacrificeExplode_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateDeathMaterialEffect
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::UpdateDeathMaterialEffect ( )
{
	static UFunction* pFnUpdateDeathMaterialEffect = NULL;

	if ( ! pFnUpdateDeathMaterialEffect )
		pFnUpdateDeathMaterialEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateDeathMaterialEffect" );

	AKFPawn_Human_execUpdateDeathMaterialEffect_Parms UpdateDeathMaterialEffect_Parms;

	this->ProcessEvent ( pFnUpdateDeathMaterialEffect, &UpdateDeathMaterialEffect_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PlayDeathMaterialEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::PlayDeathMaterialEffects ( )
{
	static UFunction* pFnPlayDeathMaterialEffects = NULL;

	if ( ! pFnPlayDeathMaterialEffects )
		pFnPlayDeathMaterialEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PlayDeathMaterialEffects" );

	AKFPawn_Human_execPlayDeathMaterialEffects_Parms PlayDeathMaterialEffects_Parms;

	this->ProcessEvent ( pFnPlayDeathMaterialEffects, &PlayDeathMaterialEffects_Parms, NULL );
};

// Function KFGame.KFPawn_Human.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.TakeDamage" );

	AKFPawn_Human_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Human.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFPawn_Human::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.AdjustDamage" );

	AKFPawn_Human_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Human.Died
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::Died ( )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.Died" );

	AKFPawn_Human_execDied_Parms Died_Parms;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PlayDying" );

	AKFPawn_Human_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function KFGame.KFPawn_Human.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.TerminateEffectsOnDeath" );

	AKFPawn_Human_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function KFGame.KFPawn_Human.SetNightVisionLight
// [0x00020100] 
// Parameters infos:

void AKFPawn_Human::SetNightVisionLight ( )
{
	static UFunction* pFnSetNightVisionLight = NULL;

	if ( ! pFnSetNightVisionLight )
		pFnSetNightVisionLight = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SetNightVisionLight" );

	AKFPawn_Human_execSetNightVisionLight_Parms SetNightVisionLight_Parms;

	this->ProcessEvent ( pFnSetNightVisionLight, &SetNightVisionLight_Parms, NULL );
};

// Function KFGame.KFPawn_Human.AddBattleBlood
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::AddBattleBlood ( )
{
	static UFunction* pFnAddBattleBlood = NULL;

	if ( ! pFnAddBattleBlood )
		pFnAddBattleBlood = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.AddBattleBlood" );

	AKFPawn_Human_execAddBattleBlood_Parms AddBattleBlood_Parms;

	this->ProcessEvent ( pFnAddBattleBlood, &AddBattleBlood_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PlayDamageInstigatorHitEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::PlayDamageInstigatorHitEffects ( )
{
	static UFunction* pFnPlayDamageInstigatorHitEffects = NULL;

	if ( ! pFnPlayDamageInstigatorHitEffects )
		pFnPlayDamageInstigatorHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PlayDamageInstigatorHitEffects" );

	AKFPawn_Human_execPlayDamageInstigatorHitEffects_Parms PlayDamageInstigatorHitEffects_Parms;

	this->ProcessEvent ( pFnPlayDamageInstigatorHitEffects, &PlayDamageInstigatorHitEffects_Parms, NULL );
};

// Function KFGame.KFPawn_Human.RigidBodyCollision
// [0x00C20902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventRigidBodyCollision ( )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.RigidBodyCollision" );

	AKFPawn_Human_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PlayTakeHitEffects
// [0x00024102] 
// Parameters infos:

void AKFPawn_Human::PlayTakeHitEffects ( )
{
	static UFunction* pFnPlayTakeHitEffects = NULL;

	if ( ! pFnPlayTakeHitEffects )
		pFnPlayTakeHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PlayTakeHitEffects" );

	AKFPawn_Human_execPlayTakeHitEffects_Parms PlayTakeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayTakeHitEffects, &PlayTakeHitEffects_Parms, NULL );
};

// Function KFGame.KFPawn_Human.LeaveBloodPool
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::LeaveBloodPool ( )
{
	static UFunction* pFnLeaveBloodPool = NULL;

	if ( ! pFnLeaveBloodPool )
		pFnLeaveBloodPool = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.LeaveBloodPool" );

	AKFPawn_Human_execLeaveBloodPool_Parms LeaveBloodPool_Parms;

	this->ProcessEvent ( pFnLeaveBloodPool, &LeaveBloodPool_Parms, NULL );
};

// Function KFGame.KFPawn_Human.ShieldAbsorb
// [0x00420002] 
// Parameters infos:

void AKFPawn_Human::ShieldAbsorb ( )
{
	static UFunction* pFnShieldAbsorb = NULL;

	if ( ! pFnShieldAbsorb )
		pFnShieldAbsorb = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.ShieldAbsorb" );

	AKFPawn_Human_execShieldAbsorb_Parms ShieldAbsorb_Parms;

	this->ProcessEvent ( pFnShieldAbsorb, &ShieldAbsorb_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GetMaxArmor
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::GetMaxArmor ( )
{
	static UFunction* pFnGetMaxArmor = NULL;

	if ( ! pFnGetMaxArmor )
		pFnGetMaxArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GetMaxArmor" );

	AKFPawn_Human_execGetMaxArmor_Parms GetMaxArmor_Parms;

	this->ProcessEvent ( pFnGetMaxArmor, &GetMaxArmor_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GiveMaxArmor
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::GiveMaxArmor ( )
{
	static UFunction* pFnGiveMaxArmor = NULL;

	if ( ! pFnGiveMaxArmor )
		pFnGiveMaxArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GiveMaxArmor" );

	AKFPawn_Human_execGiveMaxArmor_Parms GiveMaxArmor_Parms;

	this->ProcessEvent ( pFnGiveMaxArmor, &GiveMaxArmor_Parms, NULL );
};

// Function KFGame.KFPawn_Human.AddArmor
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::AddArmor ( )
{
	static UFunction* pFnAddArmor = NULL;

	if ( ! pFnAddArmor )
		pFnAddArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.AddArmor" );

	AKFPawn_Human_execAddArmor_Parms AddArmor_Parms;

	this->ProcessEvent ( pFnAddArmor, &AddArmor_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GiveHealthOverTime
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::GiveHealthOverTime ( )
{
	static UFunction* pFnGiveHealthOverTime = NULL;

	if ( ! pFnGiveHealthOverTime )
		pFnGiveHealthOverTime = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GiveHealthOverTime" );

	AKFPawn_Human_execGiveHealthOverTime_Parms GiveHealthOverTime_Parms;

	this->ProcessEvent ( pFnGiveHealthOverTime, &GiveHealthOverTime_Parms, NULL );
};

// Function KFGame.KFPawn_Human.HealDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventHealDamage ( )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.HealDamage" );

	AKFPawn_Human_eventHealDamage_Parms HealDamage_Parms;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Human.CheckAndEndActiveEMoteSpecialMove
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::CheckAndEndActiveEMoteSpecialMove ( )
{
	static UFunction* pFnCheckAndEndActiveEMoteSpecialMove = NULL;

	if ( ! pFnCheckAndEndActiveEMoteSpecialMove )
		pFnCheckAndEndActiveEMoteSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.CheckAndEndActiveEMoteSpecialMove" );

	AKFPawn_Human_execCheckAndEndActiveEMoteSpecialMove_Parms CheckAndEndActiveEMoteSpecialMove_Parms;

	this->ProcessEvent ( pFnCheckAndEndActiveEMoteSpecialMove, &CheckAndEndActiveEMoteSpecialMove_Parms, NULL );
};

// Function KFGame.KFPawn_Human.StopAllAnimations
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::StopAllAnimations ( )
{
	static UFunction* pFnStopAllAnimations = NULL;

	if ( ! pFnStopAllAnimations )
		pFnStopAllAnimations = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.StopAllAnimations" );

	AKFPawn_Human_execStopAllAnimations_Parms StopAllAnimations_Parms;

	this->ProcessEvent ( pFnStopAllAnimations, &StopAllAnimations_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PostInitAnimTree" );

	AKFPawn_Human_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GetWeaponAttachmentAnimRateByte
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::GetWeaponAttachmentAnimRateByte ( )
{
	static UFunction* pFnGetWeaponAttachmentAnimRateByte = NULL;

	if ( ! pFnGetWeaponAttachmentAnimRateByte )
		pFnGetWeaponAttachmentAnimRateByte = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GetWeaponAttachmentAnimRateByte" );

	AKFPawn_Human_execGetWeaponAttachmentAnimRateByte_Parms GetWeaponAttachmentAnimRateByte_Parms;

	this->ProcessEvent ( pFnGetWeaponAttachmentAnimRateByte, &GetWeaponAttachmentAnimRateByte_Parms, NULL );
};

// Function KFGame.KFPawn_Human.SetWeaponAttachmentAnimRateByte
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::SetWeaponAttachmentAnimRateByte ( )
{
	static UFunction* pFnSetWeaponAttachmentAnimRateByte = NULL;

	if ( ! pFnSetWeaponAttachmentAnimRateByte )
		pFnSetWeaponAttachmentAnimRateByte = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SetWeaponAttachmentAnimRateByte" );

	AKFPawn_Human_execSetWeaponAttachmentAnimRateByte_Parms SetWeaponAttachmentAnimRateByte_Parms;

	this->ProcessEvent ( pFnSetWeaponAttachmentAnimRateByte, &SetWeaponAttachmentAnimRateByte_Parms, NULL );
};

// Function KFGame.KFPawn_Human.WeaponStateChanged
// [0x00024102] 
// Parameters infos:

void AKFPawn_Human::WeaponStateChanged ( )
{
	static UFunction* pFnWeaponStateChanged = NULL;

	if ( ! pFnWeaponStateChanged )
		pFnWeaponStateChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.WeaponStateChanged" );

	AKFPawn_Human_execWeaponStateChanged_Parms WeaponStateChanged_Parms;

	this->ProcessEvent ( pFnWeaponStateChanged, &WeaponStateChanged_Parms, NULL );
};

// Function KFGame.KFPawn_Human.GetHealthMod
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::GetHealthMod ( )
{
	static UFunction* pFnGetHealthMod = NULL;

	if ( ! pFnGetHealthMod )
		pFnGetHealthMod = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.GetHealthMod" );

	AKFPawn_Human_execGetHealthMod_Parms GetHealthMod_Parms;

	this->ProcessEvent ( pFnGetHealthMod, &GetHealthMod_Parms, NULL );
};

// Function KFGame.KFPawn_Human.UpdateGroundSpeed
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::UpdateGroundSpeed ( )
{
	static UFunction* pFnUpdateGroundSpeed = NULL;

	if ( ! pFnUpdateGroundSpeed )
		pFnUpdateGroundSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.UpdateGroundSpeed" );

	AKFPawn_Human_execUpdateGroundSpeed_Parms UpdateGroundSpeed_Parms;

	this->ProcessEvent ( pFnUpdateGroundSpeed, &UpdateGroundSpeed_Parms, NULL );
};

// Function KFGame.KFPawn_Human.EndCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventEndCrouch ( )
{
	static UFunction* pFnEndCrouch = NULL;

	if ( ! pFnEndCrouch )
		pFnEndCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.EndCrouch" );

	AKFPawn_Human_eventEndCrouch_Parms EndCrouch_Parms;

	this->ProcessEvent ( pFnEndCrouch, &EndCrouch_Parms, NULL );
};

// Function KFGame.KFPawn_Human.StartCrouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventStartCrouch ( )
{
	static UFunction* pFnStartCrouch = NULL;

	if ( ! pFnStartCrouch )
		pFnStartCrouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.StartCrouch" );

	AKFPawn_Human_eventStartCrouch_Parms StartCrouch_Parms;

	this->ProcessEvent ( pFnStartCrouch, &StartCrouch_Parms, NULL );
};

// Function KFGame.KFPawn_Human.CanThrowWeapon
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::CanThrowWeapon ( )
{
	static UFunction* pFnCanThrowWeapon = NULL;

	if ( ! pFnCanThrowWeapon )
		pFnCanThrowWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.CanThrowWeapon" );

	AKFPawn_Human_execCanThrowWeapon_Parms CanThrowWeapon_Parms;

	this->ProcessEvent ( pFnCanThrowWeapon, &CanThrowWeapon_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PlayWeaponSwitch
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::PlayWeaponSwitch ( )
{
	static UFunction* pFnPlayWeaponSwitch = NULL;

	if ( ! pFnPlayWeaponSwitch )
		pFnPlayWeaponSwitch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PlayWeaponSwitch" );

	AKFPawn_Human_execPlayWeaponSwitch_Parms PlayWeaponSwitch_Parms;

	this->ProcessEvent ( pFnPlayWeaponSwitch, &PlayWeaponSwitch_Parms, NULL );
};

// Function KFGame.KFPawn_Human.AddDefaultInventory
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::AddDefaultInventory ( )
{
	static UFunction* pFnAddDefaultInventory = NULL;

	if ( ! pFnAddDefaultInventory )
		pFnAddDefaultInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.AddDefaultInventory" );

	AKFPawn_Human_execAddDefaultInventory_Parms AddDefaultInventory_Parms;

	this->ProcessEvent ( pFnAddDefaultInventory, &AddDefaultInventory_Parms, NULL );
};

// Function KFGame.KFPawn_Human.OnCharacterMeshChanged
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::OnCharacterMeshChanged ( )
{
	static UFunction* pFnOnCharacterMeshChanged = NULL;

	if ( ! pFnOnCharacterMeshChanged )
		pFnOnCharacterMeshChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.OnCharacterMeshChanged" );

	AKFPawn_Human_execOnCharacterMeshChanged_Parms OnCharacterMeshChanged_Parms;

	this->ProcessEvent ( pFnOnCharacterMeshChanged, &OnCharacterMeshChanged_Parms, NULL );
};

// Function KFGame.KFPawn_Human.SetCharacterArch
// [0x00024102] 
// Parameters infos:

void AKFPawn_Human::SetCharacterArch ( )
{
	static UFunction* pFnSetCharacterArch = NULL;

	if ( ! pFnSetCharacterArch )
		pFnSetCharacterArch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.SetCharacterArch" );

	AKFPawn_Human_execSetCharacterArch_Parms SetCharacterArch_Parms;

	this->ProcessEvent ( pFnSetCharacterArch, &SetCharacterArch_Parms, NULL );
};

// Function KFGame.KFPawn_Human.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.Destroyed" );

	AKFPawn_Human_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFPawn_Human.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.ReplicatedEvent" );

	AKFPawn_Human_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFPawn_Human.NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.NotifyTeamChanged" );

	AKFPawn_Human_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_Human::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PossessedBy" );

	AKFPawn_Human_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function KFGame.KFPawn_Human.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.PreBeginPlay" );

	AKFPawn_Human_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFPawn_Human.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Human::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Human.Tick" );

	AKFPawn_Human_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.Reset
// [0x00020000] 
// Parameters infos:

void AKFPawn_Customization::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.Reset" );

	AKFPawn_Customization_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.InitializeCustomizationPawn
// [0x00020002] 
// Parameters infos:

void AKFPawn_Customization::InitializeCustomizationPawn ( )
{
	static UFunction* pFnInitializeCustomizationPawn = NULL;

	if ( ! pFnInitializeCustomizationPawn )
		pFnInitializeCustomizationPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.InitializeCustomizationPawn" );

	AKFPawn_Customization_execInitializeCustomizationPawn_Parms InitializeCustomizationPawn_Parms;

	this->ProcessEvent ( pFnInitializeCustomizationPawn, &InitializeCustomizationPawn_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Customization::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.TakeDamage" );

	AKFPawn_Customization_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.MoveToCustomizationPoint
// [0x00020002] 
// Parameters infos:

void AKFPawn_Customization::MoveToCustomizationPoint ( )
{
	static UFunction* pFnMoveToCustomizationPoint = NULL;

	if ( ! pFnMoveToCustomizationPoint )
		pFnMoveToCustomizationPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.MoveToCustomizationPoint" );

	AKFPawn_Customization_execMoveToCustomizationPoint_Parms MoveToCustomizationPoint_Parms;

	this->ProcessEvent ( pFnMoveToCustomizationPoint, &MoveToCustomizationPoint_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void AKFPawn_Customization::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.NotifyTeamChanged" );

	AKFPawn_Customization_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.OnAnimEnd
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Customization::eventOnAnimEnd ( )
{
	static UFunction* pFnOnAnimEnd = NULL;

	if ( ! pFnOnAnimEnd )
		pFnOnAnimEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.OnAnimEnd" );

	AKFPawn_Customization_eventOnAnimEnd_Parms OnAnimEnd_Parms;

	this->ProcessEvent ( pFnOnAnimEnd, &OnAnimEnd_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.PlayEmoteAnimation
// [0x00024102] 
// Parameters infos:

void AKFPawn_Customization::PlayEmoteAnimation ( )
{
	static UFunction* pFnPlayEmoteAnimation = NULL;

	if ( ! pFnPlayEmoteAnimation )
		pFnPlayEmoteAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.PlayEmoteAnimation" );

	AKFPawn_Customization_execPlayEmoteAnimation_Parms PlayEmoteAnimation_Parms;

	this->ProcessEvent ( pFnPlayEmoteAnimation, &PlayEmoteAnimation_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.PlayRandomIdleAnimation
// [0x00024102] 
// Parameters infos:

void AKFPawn_Customization::PlayRandomIdleAnimation ( )
{
	static UFunction* pFnPlayRandomIdleAnimation = NULL;

	if ( ! pFnPlayRandomIdleAnimation )
		pFnPlayRandomIdleAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.PlayRandomIdleAnimation" );

	AKFPawn_Customization_execPlayRandomIdleAnimation_Parms PlayRandomIdleAnimation_Parms;

	this->ProcessEvent ( pFnPlayRandomIdleAnimation, &PlayRandomIdleAnimation_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.AttachWeaponByItemDefinition
// [0x00020002] 
// Parameters infos:

void AKFPawn_Customization::AttachWeaponByItemDefinition ( )
{
	static UFunction* pFnAttachWeaponByItemDefinition = NULL;

	if ( ! pFnAttachWeaponByItemDefinition )
		pFnAttachWeaponByItemDefinition = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.AttachWeaponByItemDefinition" );

	AKFPawn_Customization_execAttachWeaponByItemDefinition_Parms AttachWeaponByItemDefinition_Parms;

	this->ProcessEvent ( pFnAttachWeaponByItemDefinition, &AttachWeaponByItemDefinition_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.SetCharacterAnimationInfo
// [0x00020102] 
// Parameters infos:

void AKFPawn_Customization::SetCharacterAnimationInfo ( )
{
	static UFunction* pFnSetCharacterAnimationInfo = NULL;

	if ( ! pFnSetCharacterAnimationInfo )
		pFnSetCharacterAnimationInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.SetCharacterAnimationInfo" );

	AKFPawn_Customization_execSetCharacterAnimationInfo_Parms SetCharacterAnimationInfo_Parms;

	this->ProcessEvent ( pFnSetCharacterAnimationInfo, &SetCharacterAnimationInfo_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Customization::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.PostInitAnimTree" );

	AKFPawn_Customization_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.FaceRotation
// [0x00020100] 
// Parameters infos:

void AKFPawn_Customization::FaceRotation ( )
{
	static UFunction* pFnFaceRotation = NULL;

	if ( ! pFnFaceRotation )
		pFnFaceRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.FaceRotation" );

	AKFPawn_Customization_execFaceRotation_Parms FaceRotation_Parms;

	this->ProcessEvent ( pFnFaceRotation, &FaceRotation_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.ClientSetRotation
// [0x00020000] 
// Parameters infos:

void AKFPawn_Customization::ClientSetRotation ( )
{
	static UFunction* pFnClientSetRotation = NULL;

	if ( ! pFnClientSetRotation )
		pFnClientSetRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.ClientSetRotation" );

	AKFPawn_Customization_execClientSetRotation_Parms ClientSetRotation_Parms;

	this->ProcessEvent ( pFnClientSetRotation, &ClientSetRotation_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.SetServerHidden
// [0x00020002] 
// Parameters infos:

void AKFPawn_Customization::SetServerHidden ( )
{
	static UFunction* pFnSetServerHidden = NULL;

	if ( ! pFnSetServerHidden )
		pFnSetServerHidden = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.SetServerHidden" );

	AKFPawn_Customization_execSetServerHidden_Parms SetServerHidden_Parms;

	this->ProcessEvent ( pFnSetServerHidden, &SetServerHidden_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.OnMovementDataUpdated
// [0x00020102] 
// Parameters infos:

void AKFPawn_Customization::OnMovementDataUpdated ( )
{
	static UFunction* pFnOnMovementDataUpdated = NULL;

	if ( ! pFnOnMovementDataUpdated )
		pFnOnMovementDataUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.OnMovementDataUpdated" );

	AKFPawn_Customization_execOnMovementDataUpdated_Parms OnMovementDataUpdated_Parms;

	this->ProcessEvent ( pFnOnMovementDataUpdated, &OnMovementDataUpdated_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.SetUpdatedMovementData
// [0x00020002] 
// Parameters infos:

void AKFPawn_Customization::SetUpdatedMovementData ( )
{
	static UFunction* pFnSetUpdatedMovementData = NULL;

	if ( ! pFnSetUpdatedMovementData )
		pFnSetUpdatedMovementData = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.SetUpdatedMovementData" );

	AKFPawn_Customization_execSetUpdatedMovementData_Parms SetUpdatedMovementData_Parms;

	this->ProcessEvent ( pFnSetUpdatedMovementData, &SetUpdatedMovementData_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Customization::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.ReplicatedEvent" );

	AKFPawn_Customization_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFPawn_Customization.UpdateCustomizationPawnVisibility
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Customization::UpdateCustomizationPawnVisibility ( )
{
	static UFunction* pFnUpdateCustomizationPawnVisibility = NULL;

	if ( ! pFnUpdateCustomizationPawnVisibility )
		pFnUpdateCustomizationPawnVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Customization.UpdateCustomizationPawnVisibility" );

	AKFPawn_Customization_execUpdateCustomizationPawnVisibility_Parms UpdateCustomizationPawnVisibility_Parms;

	pFnUpdateCustomizationPawnVisibility->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateCustomizationPawnVisibility, &UpdateCustomizationPawnVisibility_Parms, NULL );

	pFnUpdateCustomizationPawnVisibility->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.StopExtraVFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::StopExtraVFX ( )
{
	static UFunction* pFnStopExtraVFX = NULL;

	if ( ! pFnStopExtraVFX )
		pFnStopExtraVFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.StopExtraVFX" );

	AKFPawn_Monster_execStopExtraVFX_Parms StopExtraVFX_Parms;

	this->ProcessEvent ( pFnStopExtraVFX, &StopExtraVFX_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayExtraVFX
// [0x00820102] 
// Parameters infos:

void AKFPawn_Monster::PlayExtraVFX ( )
{
	static UFunction* pFnPlayExtraVFX = NULL;

	if ( ! pFnPlayExtraVFX )
		pFnPlayExtraVFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayExtraVFX" );

	AKFPawn_Monster_execPlayExtraVFX_Parms PlayExtraVFX_Parms;

	this->ProcessEvent ( pFnPlayExtraVFX, &PlayExtraVFX_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.DisablebOnDeathAchivement
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::DisablebOnDeathAchivement ( )
{
	static UFunction* pFnDisablebOnDeathAchivement = NULL;

	if ( ! pFnDisablebOnDeathAchivement )
		pFnDisablebOnDeathAchivement = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.DisablebOnDeathAchivement" );

	AKFPawn_Monster_execDisablebOnDeathAchivement_Parms DisablebOnDeathAchivement_Parms;

	pFnDisablebOnDeathAchivement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDisablebOnDeathAchivement, &DisablebOnDeathAchivement_Parms, NULL );

	pFnDisablebOnDeathAchivement->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.GetZedOnDeathAchievement
// [0x00080400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::GetZedOnDeathAchievement ( )
{
	static UFunction* pFnGetZedOnDeathAchievement = NULL;

	if ( ! pFnGetZedOnDeathAchievement )
		pFnGetZedOnDeathAchievement = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetZedOnDeathAchievement" );

	AKFPawn_Monster_execGetZedOnDeathAchievement_Parms GetZedOnDeathAchievement_Parms;

	pFnGetZedOnDeathAchievement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetZedOnDeathAchievement, &GetZedOnDeathAchievement_Parms, NULL );

	pFnGetZedOnDeathAchievement->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.ShouldGrandOnDeathAchievement
// [0x00080400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::ShouldGrandOnDeathAchievement ( )
{
	static UFunction* pFnShouldGrandOnDeathAchievement = NULL;

	if ( ! pFnShouldGrandOnDeathAchievement )
		pFnShouldGrandOnDeathAchievement = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ShouldGrandOnDeathAchievement" );

	AKFPawn_Monster_execShouldGrandOnDeathAchievement_Parms ShouldGrandOnDeathAchievement_Parms;

	pFnShouldGrandOnDeathAchievement->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShouldGrandOnDeathAchievement, &ShouldGrandOnDeathAchievement_Parms, NULL );

	pFnShouldGrandOnDeathAchievement->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.ZedExplodeArmor
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::ZedExplodeArmor ( )
{
	static UFunction* pFnZedExplodeArmor = NULL;

	if ( ! pFnZedExplodeArmor )
		pFnZedExplodeArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ZedExplodeArmor" );

	AKFPawn_Monster_execZedExplodeArmor_Parms ZedExplodeArmor_Parms;

	this->ProcessEvent ( pFnZedExplodeArmor, &ZedExplodeArmor_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetSeasonalLocalizationSuffix
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::GetSeasonalLocalizationSuffix ( )
{
	static UFunction* pFnGetSeasonalLocalizationSuffix = NULL;

	if ( ! pFnGetSeasonalLocalizationSuffix )
		pFnGetSeasonalLocalizationSuffix = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetSeasonalLocalizationSuffix" );

	AKFPawn_Monster_execGetSeasonalLocalizationSuffix_Parms GetSeasonalLocalizationSuffix_Parms;

	this->ProcessEvent ( pFnGetSeasonalLocalizationSuffix, &GetSeasonalLocalizationSuffix_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetLocalizedName
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::GetLocalizedName ( )
{
	static UFunction* pFnGetLocalizedName = NULL;

	if ( ! pFnGetLocalizedName )
		pFnGetLocalizedName = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetLocalizedName" );

	AKFPawn_Monster_execGetLocalizedName_Parms GetLocalizedName_Parms;

	this->ProcessEvent ( pFnGetLocalizedName, &GetLocalizedName_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.MotivatePlayerToAttack
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::MotivatePlayerToAttack ( )
{
	static UFunction* pFnMotivatePlayerToAttack = NULL;

	if ( ! pFnMotivatePlayerToAttack )
		pFnMotivatePlayerToAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.MotivatePlayerToAttack" );

	AKFPawn_Monster_execMotivatePlayerToAttack_Parms MotivatePlayerToAttack_Parms;

	this->ProcessEvent ( pFnMotivatePlayerToAttack, &MotivatePlayerToAttack_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayLandedDialog
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::PlayLandedDialog ( )
{
	static UFunction* pFnPlayLandedDialog = NULL;

	if ( ! pFnPlayLandedDialog )
		pFnPlayLandedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayLandedDialog" );

	AKFPawn_Monster_execPlayLandedDialog_Parms PlayLandedDialog_Parms;

	this->ProcessEvent ( pFnPlayLandedDialog, &PlayLandedDialog_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayLeapedDialog
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::PlayLeapedDialog ( )
{
	static UFunction* pFnPlayLeapedDialog = NULL;

	if ( ! pFnPlayLeapedDialog )
		pFnPlayLeapedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayLeapedDialog" );

	AKFPawn_Monster_execPlayLeapedDialog_Parms PlayLeapedDialog_Parms;

	this->ProcessEvent ( pFnPlayLeapedDialog, &PlayLeapedDialog_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetTraderAdviceID" );

	AKFPawn_Monster_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.UpdateDeadHorseStreak
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::UpdateDeadHorseStreak ( )
{
	static UFunction* pFnUpdateDeadHorseStreak = NULL;

	if ( ! pFnUpdateDeadHorseStreak )
		pFnUpdateDeadHorseStreak = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.UpdateDeadHorseStreak" );

	AKFPawn_Monster_execUpdateDeadHorseStreak_Parms UpdateDeadHorseStreak_Parms;

	this->ProcessEvent ( pFnUpdateDeadHorseStreak, &UpdateDeadHorseStreak_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetSpotterDialogID" );

	AKFPawn_Monster_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetKillerDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetKillerDialogID" );

	AKFPawn_Monster_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetOverheadDebugText
// [0x00420102] 
// Parameters infos:

void AKFPawn_Monster::GetOverheadDebugText ( )
{
	static UFunction* pFnGetOverheadDebugText = NULL;

	if ( ! pFnGetOverheadDebugText )
		pFnGetOverheadDebugText = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetOverheadDebugText" );

	AKFPawn_Monster_execGetOverheadDebugText_Parms GetOverheadDebugText_Parms;

	this->ProcessEvent ( pFnGetOverheadDebugText, &GetOverheadDebugText_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.DrawDebugOverheadSprintingText
// [0x00820002] 
// Parameters infos:

void AKFPawn_Monster::DrawDebugOverheadSprintingText ( )
{
	static UFunction* pFnDrawDebugOverheadSprintingText = NULL;

	if ( ! pFnDrawDebugOverheadSprintingText )
		pFnDrawDebugOverheadSprintingText = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.DrawDebugOverheadSprintingText" );

	AKFPawn_Monster_execDrawDebugOverheadSprintingText_Parms DrawDebugOverheadSprintingText_Parms;

	this->ProcessEvent ( pFnDrawDebugOverheadSprintingText, &DrawDebugOverheadSprintingText_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.DrawDebugOverheadText
// [0x00C20002] 
// Parameters infos:

void AKFPawn_Monster::DrawDebugOverheadText ( )
{
	static UFunction* pFnDrawDebugOverheadText = NULL;

	if ( ! pFnDrawDebugOverheadText )
		pFnDrawDebugOverheadText = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.DrawDebugOverheadText" );

	AKFPawn_Monster_execDrawDebugOverheadText_Parms DrawDebugOverheadText_Parms;

	this->ProcessEvent ( pFnDrawDebugOverheadText, &DrawDebugOverheadText_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PostRenderFor
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventPostRenderFor ( )
{
	static UFunction* pFnPostRenderFor = NULL;

	if ( ! pFnPostRenderFor )
		pFnPostRenderFor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PostRenderFor" );

	AKFPawn_Monster_eventPostRenderFor_Parms PostRenderFor_Parms;

	this->ProcessEvent ( pFnPostRenderFor, &PostRenderFor_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetDebugTextRendering
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::SetDebugTextRendering ( )
{
	static UFunction* pFnSetDebugTextRendering = NULL;

	if ( ! pFnSetDebugTextRendering )
		pFnSetDebugTextRendering = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetDebugTextRendering" );

	AKFPawn_Monster_execSetDebugTextRendering_Parms SetDebugTextRendering_Parms;

	this->ProcessEvent ( pFnSetDebugTextRendering, &SetDebugTextRendering_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetPerkDoTScaler
// [0x00024002] 
// Parameters infos:

void AKFPawn_Monster::GetPerkDoTScaler ( )
{
	static UFunction* pFnGetPerkDoTScaler = NULL;

	if ( ! pFnGetPerkDoTScaler )
		pFnGetPerkDoTScaler = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetPerkDoTScaler" );

	AKFPawn_Monster_execGetPerkDoTScaler_Parms GetPerkDoTScaler_Parms;

	this->ProcessEvent ( pFnGetPerkDoTScaler, &GetPerkDoTScaler_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsBloatClass
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::IsBloatClass ( )
{
	static UFunction* pFnIsBloatClass = NULL;

	if ( ! pFnIsBloatClass )
		pFnIsBloatClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsBloatClass" );

	AKFPawn_Monster_execIsBloatClass_Parms IsBloatClass_Parms;

	this->ProcessEvent ( pFnIsBloatClass, &IsBloatClass_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsClotClass
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::IsClotClass ( )
{
	static UFunction* pFnIsClotClass = NULL;

	if ( ! pFnIsClotClass )
		pFnIsClotClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsClotClass" );

	AKFPawn_Monster_execIsClotClass_Parms IsClotClass_Parms;

	this->ProcessEvent ( pFnIsClotClass, &IsClotClass_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsFleshpoundClass
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::IsFleshpoundClass ( )
{
	static UFunction* pFnIsFleshpoundClass = NULL;

	if ( ! pFnIsFleshpoundClass )
		pFnIsFleshpoundClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsFleshpoundClass" );

	AKFPawn_Monster_execIsFleshpoundClass_Parms IsFleshpoundClass_Parms;

	this->ProcessEvent ( pFnIsFleshpoundClass, &IsFleshpoundClass_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsCrawlerClass
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::IsCrawlerClass ( )
{
	static UFunction* pFnIsCrawlerClass = NULL;

	if ( ! pFnIsCrawlerClass )
		pFnIsCrawlerClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsCrawlerClass" );

	AKFPawn_Monster_execIsCrawlerClass_Parms IsCrawlerClass_Parms;

	this->ProcessEvent ( pFnIsCrawlerClass, &IsCrawlerClass_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsStalkerClass
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::IsStalkerClass ( )
{
	static UFunction* pFnIsStalkerClass = NULL;

	if ( ! pFnIsStalkerClass )
		pFnIsStalkerClass = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsStalkerClass" );

	AKFPawn_Monster_execIsStalkerClass_Parms IsStalkerClass_Parms;

	this->ProcessEvent ( pFnIsStalkerClass, &IsStalkerClass_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.UpdateSpottedStatus
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventUpdateSpottedStatus ( )
{
	static UFunction* pFnUpdateSpottedStatus = NULL;

	if ( ! pFnUpdateSpottedStatus )
		pFnUpdateSpottedStatus = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.UpdateSpottedStatus" );

	AKFPawn_Monster_eventUpdateSpottedStatus_Parms UpdateSpottedStatus_Parms;

	this->ProcessEvent ( pFnUpdateSpottedStatus, &UpdateSpottedStatus_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsABoss
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventIsABoss ( )
{
	static UFunction* pFnIsABoss = NULL;

	if ( ! pFnIsABoss )
		pFnIsABoss = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsABoss" );

	AKFPawn_Monster_eventIsABoss_Parms IsABoss_Parms;

	this->ProcessEvent ( pFnIsABoss, &IsABoss_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsLargeZed
// [0x00022002] 
// Parameters infos:

void AKFPawn_Monster::IsLargeZed ( )
{
	static UFunction* pFnIsLargeZed = NULL;

	if ( ! pFnIsLargeZed )
		pFnIsLargeZed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsLargeZed" );

	AKFPawn_Monster_execIsLargeZed_Parms IsLargeZed_Parms;

	this->ProcessEvent ( pFnIsLargeZed, &IsLargeZed_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SpawnHeadShotFX
// [0x00840103] ( FUNC_Final )
// Parameters infos:

void AKFPawn_Monster::SpawnHeadShotFX ( )
{
	static UFunction* pFnSpawnHeadShotFX = NULL;

	if ( ! pFnSpawnHeadShotFX )
		pFnSpawnHeadShotFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SpawnHeadShotFX" );

	AKFPawn_Monster_execSpawnHeadShotFX_Parms SpawnHeadShotFX_Parms;

	this->ProcessEvent ( pFnSpawnHeadShotFX, &SpawnHeadShotFX_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.UpdateBleedIncapFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::UpdateBleedIncapFX ( )
{
	static UFunction* pFnUpdateBleedIncapFX = NULL;

	if ( ! pFnUpdateBleedIncapFX )
		pFnUpdateBleedIncapFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.UpdateBleedIncapFX" );

	AKFPawn_Monster_execUpdateBleedIncapFX_Parms UpdateBleedIncapFX_Parms;

	this->ProcessEvent ( pFnUpdateBleedIncapFX, &UpdateBleedIncapFX_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HandleDamageInflation
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::HandleDamageInflation ( )
{
	static UFunction* pFnHandleDamageInflation = NULL;

	if ( ! pFnHandleDamageInflation )
		pFnHandleDamageInflation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HandleDamageInflation" );

	AKFPawn_Monster_execHandleDamageInflation_Parms HandleDamageInflation_Parms;

	this->ProcessEvent ( pFnHandleDamageInflation, &HandleDamageInflation_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetCurrentInflation
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::GetCurrentInflation ( )
{
	static UFunction* pFnGetCurrentInflation = NULL;

	if ( ! pFnGetCurrentInflation )
		pFnGetCurrentInflation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetCurrentInflation" );

	AKFPawn_Monster_execGetCurrentInflation_Parms GetCurrentInflation_Parms;

	this->ProcessEvent ( pFnGetCurrentInflation, &GetCurrentInflation_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetDamageInflation
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventSetDamageInflation ( )
{
	static UFunction* pFnSetDamageInflation = NULL;

	if ( ! pFnSetDamageInflation )
		pFnSetDamageInflation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetDamageInflation" );

	AKFPawn_Monster_eventSetDamageInflation_Parms SetDamageInflation_Parms;

	this->ProcessEvent ( pFnSetDamageInflation, &SetDamageInflation_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ChokePointTimer
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ChokePointTimer ( )
{
	static UFunction* pFnChokePointTimer = NULL;

	if ( ! pFnChokePointTimer )
		pFnChokePointTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ChokePointTimer" );

	AKFPawn_Monster_execChokePointTimer_Parms ChokePointTimer_Parms;

	this->ProcessEvent ( pFnChokePointTimer, &ChokePointTimer_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyMeleeAttackFinished
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::NotifyMeleeAttackFinished ( )
{
	static UFunction* pFnNotifyMeleeAttackFinished = NULL;

	if ( ! pFnNotifyMeleeAttackFinished )
		pFnNotifyMeleeAttackFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyMeleeAttackFinished" );

	AKFPawn_Monster_execNotifyMeleeAttackFinished_Parms NotifyMeleeAttackFinished_Parms;

	this->ProcessEvent ( pFnNotifyMeleeAttackFinished, &NotifyMeleeAttackFinished_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ForceBreakAllConstraints
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ForceBreakAllConstraints ( )
{
	static UFunction* pFnForceBreakAllConstraints = NULL;

	if ( ! pFnForceBreakAllConstraints )
		pFnForceBreakAllConstraints = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ForceBreakAllConstraints" );

	AKFPawn_Monster_execForceBreakAllConstraints_Parms ForceBreakAllConstraints_Parms;

	this->ProcessEvent ( pFnForceBreakAllConstraints, &ForceBreakAllConstraints_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HasMouth
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventHasMouth ( )
{
	static UFunction* pFnHasMouth = NULL;

	if ( ! pFnHasMouth )
		pFnHasMouth = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HasMouth" );

	AKFPawn_Monster_eventHasMouth_Parms HasMouth_Parms;

	this->ProcessEvent ( pFnHasMouth, &HasMouth_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ShouldPlayHeadlessMeleeAnims
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ShouldPlayHeadlessMeleeAnims ( )
{
	static UFunction* pFnShouldPlayHeadlessMeleeAnims = NULL;

	if ( ! pFnShouldPlayHeadlessMeleeAnims )
		pFnShouldPlayHeadlessMeleeAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ShouldPlayHeadlessMeleeAnims" );

	AKFPawn_Monster_execShouldPlayHeadlessMeleeAnims_Parms ShouldPlayHeadlessMeleeAnims_Parms;

	this->ProcessEvent ( pFnShouldPlayHeadlessMeleeAnims, &ShouldPlayHeadlessMeleeAnims_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetHeadHealthPercent
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::GetHeadHealthPercent ( )
{
	static UFunction* pFnGetHeadHealthPercent = NULL;

	if ( ! pFnGetHeadHealthPercent )
		pFnGetHeadHealthPercent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetHeadHealthPercent" );

	AKFPawn_Monster_execGetHeadHealthPercent_Parms GetHeadHealthPercent_Parms;

	this->ProcessEvent ( pFnGetHeadHealthPercent, &GetHeadHealthPercent_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.TakeHitZoneDamage
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::TakeHitZoneDamage ( )
{
	static UFunction* pFnTakeHitZoneDamage = NULL;

	if ( ! pFnTakeHitZoneDamage )
		pFnTakeHitZoneDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.TakeHitZoneDamage" );

	AKFPawn_Monster_execTakeHitZoneDamage_Parms TakeHitZoneDamage_Parms;

	this->ProcessEvent ( pFnTakeHitZoneDamage, &TakeHitZoneDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayDismemberment
// [0x00024102] 
// Parameters infos:

void AKFPawn_Monster::PlayDismemberment ( )
{
	static UFunction* pFnPlayDismemberment = NULL;

	if ( ! pFnPlayDismemberment )
		pFnPlayDismemberment = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayDismemberment" );

	AKFPawn_Monster_execPlayDismemberment_Parms PlayDismemberment_Parms;

	this->ProcessEvent ( pFnPlayDismemberment, &PlayDismemberment_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayHeadAsplode
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::PlayHeadAsplode ( )
{
	static UFunction* pFnPlayHeadAsplode = NULL;

	if ( ! pFnPlayHeadAsplode )
		pFnPlayHeadAsplode = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayHeadAsplode" );

	AKFPawn_Monster_execPlayHeadAsplode_Parms PlayHeadAsplode_Parms;

	this->ProcessEvent ( pFnPlayHeadAsplode, &PlayHeadAsplode_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HitZoneInjured
// [0x00024102] 
// Parameters infos:

void AKFPawn_Monster::HitZoneInjured ( )
{
	static UFunction* pFnHitZoneInjured = NULL;

	if ( ! pFnHitZoneInjured )
		pFnHitZoneInjured = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HitZoneInjured" );

	AKFPawn_Monster_execHitZoneInjured_Parms HitZoneInjured_Parms;

	this->ProcessEvent ( pFnHitZoneInjured, &HitZoneInjured_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ApplyHeadChunkGore
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ApplyHeadChunkGore ( )
{
	static UFunction* pFnApplyHeadChunkGore = NULL;

	if ( ! pFnApplyHeadChunkGore )
		pFnApplyHeadChunkGore = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ApplyHeadChunkGore" );

	AKFPawn_Monster_execApplyHeadChunkGore_Parms ApplyHeadChunkGore_Parms;

	this->ProcessEvent ( pFnApplyHeadChunkGore, &ApplyHeadChunkGore_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ApplyTakeHitFxGore
// [0x00820102] 
// Parameters infos:

void AKFPawn_Monster::ApplyTakeHitFxGore ( )
{
	static UFunction* pFnApplyTakeHitFxGore = NULL;

	if ( ! pFnApplyTakeHitFxGore )
		pFnApplyTakeHitFxGore = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ApplyTakeHitFxGore" );

	AKFPawn_Monster_execApplyTakeHitFxGore_Parms ApplyTakeHitFxGore_Parms;

	this->ProcessEvent ( pFnApplyTakeHitFxGore, &ApplyTakeHitFxGore_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ApplyObliterationFxGore
// [0x00820102] 
// Parameters infos:

void AKFPawn_Monster::ApplyObliterationFxGore ( )
{
	static UFunction* pFnApplyObliterationFxGore = NULL;

	if ( ! pFnApplyObliterationFxGore )
		pFnApplyObliterationFxGore = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ApplyObliterationFxGore" );

	AKFPawn_Monster_execApplyObliterationFxGore_Parms ApplyObliterationFxGore_Parms;

	this->ProcessEvent ( pFnApplyObliterationFxGore, &ApplyObliterationFxGore_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ApplyRadialFxGore
// [0x00820102] 
// Parameters infos:

void AKFPawn_Monster::ApplyRadialFxGore ( )
{
	static UFunction* pFnApplyRadialFxGore = NULL;

	if ( ! pFnApplyRadialFxGore )
		pFnApplyRadialFxGore = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ApplyRadialFxGore" );

	AKFPawn_Monster_execApplyRadialFxGore_Parms ApplyRadialFxGore_Parms;

	this->ProcessEvent ( pFnApplyRadialFxGore, &ApplyRadialFxGore_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HandlePartialGoreAndGibs
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::HandlePartialGoreAndGibs ( )
{
	static UFunction* pFnHandlePartialGoreAndGibs = NULL;

	if ( ! pFnHandlePartialGoreAndGibs )
		pFnHandlePartialGoreAndGibs = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HandlePartialGoreAndGibs" );

	AKFPawn_Monster_execHandlePartialGoreAndGibs_Parms HandlePartialGoreAndGibs_Parms;

	this->ProcessEvent ( pFnHandlePartialGoreAndGibs, &HandlePartialGoreAndGibs_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ApplyBloodDecals
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ApplyBloodDecals ( )
{
	static UFunction* pFnApplyBloodDecals = NULL;

	if ( ! pFnApplyBloodDecals )
		pFnApplyBloodDecals = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ApplyBloodDecals" );

	AKFPawn_Monster_execApplyBloodDecals_Parms ApplyBloodDecals_Parms;

	this->ProcessEvent ( pFnApplyBloodDecals, &ApplyBloodDecals_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.TryPlayHitReactionAnim
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::TryPlayHitReactionAnim ( )
{
	static UFunction* pFnTryPlayHitReactionAnim = NULL;

	if ( ! pFnTryPlayHitReactionAnim )
		pFnTryPlayHitReactionAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.TryPlayHitReactionAnim" );

	AKFPawn_Monster_execTryPlayHitReactionAnim_Parms TryPlayHitReactionAnim_Parms;

	this->ProcessEvent ( pFnTryPlayHitReactionAnim, &TryPlayHitReactionAnim_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HandleGoreChunkAttachments
// [0x00820102] 
// Parameters infos:

void AKFPawn_Monster::HandleGoreChunkAttachments ( )
{
	static UFunction* pFnHandleGoreChunkAttachments = NULL;

	if ( ! pFnHandleGoreChunkAttachments )
		pFnHandleGoreChunkAttachments = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HandleGoreChunkAttachments" );

	AKFPawn_Monster_execHandleGoreChunkAttachments_Parms HandleGoreChunkAttachments_Parms;

	this->ProcessEvent ( pFnHandleGoreChunkAttachments, &HandleGoreChunkAttachments_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ShouldDetachSkullChunk
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ShouldDetachSkullChunk ( )
{
	static UFunction* pFnShouldDetachSkullChunk = NULL;

	if ( ! pFnShouldDetachSkullChunk )
		pFnShouldDetachSkullChunk = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ShouldDetachSkullChunk" );

	AKFPawn_Monster_execShouldDetachSkullChunk_Parms ShouldDetachSkullChunk_Parms;

	this->ProcessEvent ( pFnShouldDetachSkullChunk, &ShouldDetachSkullChunk_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ShouldAttachSkullChunk
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ShouldAttachSkullChunk ( )
{
	static UFunction* pFnShouldAttachSkullChunk = NULL;

	if ( ! pFnShouldAttachSkullChunk )
		pFnShouldAttachSkullChunk = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ShouldAttachSkullChunk" );

	AKFPawn_Monster_execShouldAttachSkullChunk_Parms ShouldAttachSkullChunk_Parms;

	this->ProcessEvent ( pFnShouldAttachSkullChunk, &ShouldAttachSkullChunk_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.UpdateGoreChunkData
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::UpdateGoreChunkData ( )
{
	static UFunction* pFnUpdateGoreChunkData = NULL;

	if ( ! pFnUpdateGoreChunkData )
		pFnUpdateGoreChunkData = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.UpdateGoreChunkData" );

	AKFPawn_Monster_execUpdateGoreChunkData_Parms UpdateGoreChunkData_Parms;

	this->ProcessEvent ( pFnUpdateGoreChunkData, &UpdateGoreChunkData_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ShouldAllowHeadBoneToBreak
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ShouldAllowHeadBoneToBreak ( )
{
	static UFunction* pFnShouldAllowHeadBoneToBreak = NULL;

	if ( ! pFnShouldAllowHeadBoneToBreak )
		pFnShouldAllowHeadBoneToBreak = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ShouldAllowHeadBoneToBreak" );

	AKFPawn_Monster_execShouldAllowHeadBoneToBreak_Parms ShouldAllowHeadBoneToBreak_Parms;

	this->ProcessEvent ( pFnShouldAllowHeadBoneToBreak, &ShouldAllowHeadBoneToBreak_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.AddBrokenHeadBone
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::AddBrokenHeadBone ( )
{
	static UFunction* pFnAddBrokenHeadBone = NULL;

	if ( ! pFnAddBrokenHeadBone )
		pFnAddBrokenHeadBone = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.AddBrokenHeadBone" );

	AKFPawn_Monster_execAddBrokenHeadBone_Parms AddBrokenHeadBone_Parms;

	this->ProcessEvent ( pFnAddBrokenHeadBone, &AddBrokenHeadBone_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HeadBoneAlreadyBroken
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::HeadBoneAlreadyBroken ( )
{
	static UFunction* pFnHeadBoneAlreadyBroken = NULL;

	if ( ! pFnHeadBoneAlreadyBroken )
		pFnHeadBoneAlreadyBroken = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HeadBoneAlreadyBroken" );

	AKFPawn_Monster_execHeadBoneAlreadyBroken_Parms HeadBoneAlreadyBroken_Parms;

	this->ProcessEvent ( pFnHeadBoneAlreadyBroken, &HeadBoneAlreadyBroken_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayHitZoneGoreSounds
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::PlayHitZoneGoreSounds ( )
{
	static UFunction* pFnPlayHitZoneGoreSounds = NULL;

	if ( ! pFnPlayHitZoneGoreSounds )
		pFnPlayHitZoneGoreSounds = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayHitZoneGoreSounds" );

	AKFPawn_Monster_execPlayHitZoneGoreSounds_Parms PlayHitZoneGoreSounds_Parms;

	this->ProcessEvent ( pFnPlayHitZoneGoreSounds, &PlayHitZoneGoreSounds_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayDyingSound
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayDyingSound" );

	AKFPawn_Monster_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayLivingHitEffects
// [0x00024102] 
// Parameters infos:

void AKFPawn_Monster::PlayLivingHitEffects ( )
{
	static UFunction* pFnPlayLivingHitEffects = NULL;

	if ( ! pFnPlayLivingHitEffects )
		pFnPlayLivingHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayLivingHitEffects" );

	AKFPawn_Monster_execPlayLivingHitEffects_Parms PlayLivingHitEffects_Parms;

	this->ProcessEvent ( pFnPlayLivingHitEffects, &PlayLivingHitEffects_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HandleRagdollImpulseEffects
// [0x00824102] 
// Parameters infos:

void AKFPawn_Monster::HandleRagdollImpulseEffects ( )
{
	static UFunction* pFnHandleRagdollImpulseEffects = NULL;

	if ( ! pFnHandleRagdollImpulseEffects )
		pFnHandleRagdollImpulseEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HandleRagdollImpulseEffects" );

	AKFPawn_Monster_execHandleRagdollImpulseEffects_Parms HandleRagdollImpulseEffects_Parms;

	this->ProcessEvent ( pFnHandleRagdollImpulseEffects, &HandleRagdollImpulseEffects_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayDeadHitEffects
// [0x00024102] 
// Parameters infos:

void AKFPawn_Monster::PlayDeadHitEffects ( )
{
	static UFunction* pFnPlayDeadHitEffects = NULL;

	if ( ! pFnPlayDeadHitEffects )
		pFnPlayDeadHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayDeadHitEffects" );

	AKFPawn_Monster_execPlayDeadHitEffects_Parms PlayDeadHitEffects_Parms;

	this->ProcessEvent ( pFnPlayDeadHitEffects, &PlayDeadHitEffects_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayTakeHitEffects
// [0x00024102] 
// Parameters infos:

void AKFPawn_Monster::PlayTakeHitEffects ( )
{
	static UFunction* pFnPlayTakeHitEffects = NULL;

	if ( ! pFnPlayTakeHitEffects )
		pFnPlayTakeHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayTakeHitEffects" );

	AKFPawn_Monster_execPlayTakeHitEffects_Parms PlayTakeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayTakeHitEffects, &PlayTakeHitEffects_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.RigidBodyCollision
// [0x00C20902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventRigidBodyCollision ( )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.RigidBodyCollision" );

	AKFPawn_Monster_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetClosestHitBones
// [0x00420102] 
// Parameters infos:

void AKFPawn_Monster::GetClosestHitBones ( )
{
	static UFunction* pFnGetClosestHitBones = NULL;

	if ( ! pFnGetClosestHitBones )
		pFnGetClosestHitBones = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetClosestHitBones" );

	AKFPawn_Monster_execGetClosestHitBones_Parms GetClosestHitBones_Parms;

	this->ProcessEvent ( pFnGetClosestHitBones, &GetClosestHitBones_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyGoreMeshActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventNotifyGoreMeshActive ( )
{
	static UFunction* pFnNotifyGoreMeshActive = NULL;

	if ( ! pFnNotifyGoreMeshActive )
		pFnNotifyGoreMeshActive = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyGoreMeshActive" );

	AKFPawn_Monster_eventNotifyGoreMeshActive_Parms NotifyGoreMeshActive_Parms;

	this->ProcessEvent ( pFnNotifyGoreMeshActive, &NotifyGoreMeshActive_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SwitchToGoreMesh
// [0x00020501] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::SwitchToGoreMesh ( )
{
	static UFunction* pFnSwitchToGoreMesh = NULL;

	if ( ! pFnSwitchToGoreMesh )
		pFnSwitchToGoreMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SwitchToGoreMesh" );

	AKFPawn_Monster_execSwitchToGoreMesh_Parms SwitchToGoreMesh_Parms;

	pFnSwitchToGoreMesh->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSwitchToGoreMesh, &SwitchToGoreMesh_Parms, NULL );

	pFnSwitchToGoreMesh->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.StopLookingAtPawn
// [0x00024102] 
// Parameters infos:

void AKFPawn_Monster::StopLookingAtPawn ( )
{
	static UFunction* pFnStopLookingAtPawn = NULL;

	if ( ! pFnStopLookingAtPawn )
		pFnStopLookingAtPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.StopLookingAtPawn" );

	AKFPawn_Monster_execStopLookingAtPawn_Parms StopLookingAtPawn_Parms;

	this->ProcessEvent ( pFnStopLookingAtPawn, &StopLookingAtPawn_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.LookAtPawn
// [0x00024102] 
// Parameters infos:

void AKFPawn_Monster::LookAtPawn ( )
{
	static UFunction* pFnLookAtPawn = NULL;

	if ( ! pFnLookAtPawn )
		pFnLookAtPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.LookAtPawn" );

	AKFPawn_Monster_execLookAtPawn_Parms LookAtPawn_Parms;

	this->ProcessEvent ( pFnLookAtPawn, &LookAtPawn_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetPawnToLookAt
// [0x00024002] 
// Parameters infos:

void AKFPawn_Monster::GetPawnToLookAt ( )
{
	static UFunction* pFnGetPawnToLookAt = NULL;

	if ( ! pFnGetPawnToLookAt )
		pFnGetPawnToLookAt = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetPawnToLookAt" );

	AKFPawn_Monster_execGetPawnToLookAt_Parms GetPawnToLookAt_Parms;

	this->ProcessEvent ( pFnGetPawnToLookAt, &GetPawnToLookAt_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetStepBackInCombatOdds
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::GetStepBackInCombatOdds ( )
{
	static UFunction* pFnGetStepBackInCombatOdds = NULL;

	if ( ! pFnGetStepBackInCombatOdds )
		pFnGetStepBackInCombatOdds = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetStepBackInCombatOdds" );

	AKFPawn_Monster_execGetStepBackInCombatOdds_Parms GetStepBackInCombatOdds_Parms;

	this->ProcessEvent ( pFnGetStepBackInCombatOdds, &GetStepBackInCombatOdds_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetCircleStrafeDuration
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::GetCircleStrafeDuration ( )
{
	static UFunction* pFnGetCircleStrafeDuration = NULL;

	if ( ! pFnGetCircleStrafeDuration )
		pFnGetCircleStrafeDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetCircleStrafeDuration" );

	AKFPawn_Monster_execGetCircleStrafeDuration_Parms GetCircleStrafeDuration_Parms;

	this->ProcessEvent ( pFnGetCircleStrafeDuration, &GetCircleStrafeDuration_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.msg
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::msg ( )
{
	static UFunction* pFnmsg = NULL;

	if ( ! pFnmsg )
		pFnmsg = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.msg" );

	AKFPawn_Monster_execmsg_Parms msg_Parms;

	this->ProcessEvent ( pFnmsg, &msg_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyAnimInterrupt
// [0x00024000] 
// Parameters infos:

void AKFPawn_Monster::NotifyAnimInterrupt ( )
{
	static UFunction* pFnNotifyAnimInterrupt = NULL;

	if ( ! pFnNotifyAnimInterrupt )
		pFnNotifyAnimInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyAnimInterrupt" );

	AKFPawn_Monster_execNotifyAnimInterrupt_Parms NotifyAnimInterrupt_Parms;

	this->ProcessEvent ( pFnNotifyAnimInterrupt, &NotifyAnimInterrupt_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ANIMNOTIFY_Knockdown
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::ANIMNOTIFY_Knockdown ( )
{
	static UFunction* pFnANIMNOTIFY_Knockdown = NULL;

	if ( ! pFnANIMNOTIFY_Knockdown )
		pFnANIMNOTIFY_Knockdown = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ANIMNOTIFY_Knockdown" );

	AKFPawn_Monster_execANIMNOTIFY_Knockdown_Parms ANIMNOTIFY_Knockdown_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_Knockdown, &ANIMNOTIFY_Knockdown_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.MeleeSpecialMoveEnded
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::MeleeSpecialMoveEnded ( )
{
	static UFunction* pFnMeleeSpecialMoveEnded = NULL;

	if ( ! pFnMeleeSpecialMoveEnded )
		pFnMeleeSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.MeleeSpecialMoveEnded" );

	AKFPawn_Monster_execMeleeSpecialMoveEnded_Parms MeleeSpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnMeleeSpecialMoveEnded, &MeleeSpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CallOutCloaking
// [0x00024000] 
// Parameters infos:

void AKFPawn_Monster::CallOutCloaking ( )
{
	static UFunction* pFnCallOutCloaking = NULL;

	if ( ! pFnCallOutCloaking )
		pFnCallOutCloaking = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CallOutCloaking" );

	AKFPawn_Monster_execCallOutCloaking_Parms CallOutCloaking_Parms;

	this->ProcessEvent ( pFnCallOutCloaking, &CallOutCloaking_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetCloaked
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::SetCloaked ( )
{
	static UFunction* pFnSetCloaked = NULL;

	if ( ! pFnSetCloaked )
		pFnSetCloaked = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetCloaked" );

	AKFPawn_Monster_execSetCloaked_Parms SetCloaked_Parms;

	this->ProcessEvent ( pFnSetCloaked, &SetCloaked_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyAttackParried
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::NotifyAttackParried ( )
{
	static UFunction* pFnNotifyAttackParried = NULL;

	if ( ! pFnNotifyAttackParried )
		pFnNotifyAttackParried = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyAttackParried" );

	AKFPawn_Monster_execNotifyAttackParried_Parms NotifyAttackParried_Parms;

	this->ProcessEvent ( pFnNotifyAttackParried, &NotifyAttackParried_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.UpdateGameplayMICParams
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::UpdateGameplayMICParams ( )
{
	static UFunction* pFnUpdateGameplayMICParams = NULL;

	if ( ! pFnUpdateGameplayMICParams )
		pFnUpdateGameplayMICParams = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.UpdateGameplayMICParams" );

	AKFPawn_Monster_execUpdateGameplayMICParams_Parms UpdateGameplayMICParams_Parms;

	this->ProcessEvent ( pFnUpdateGameplayMICParams, &UpdateGameplayMICParams_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsImpaired
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::IsImpaired ( )
{
	static UFunction* pFnIsImpaired = NULL;

	if ( ! pFnIsImpaired )
		pFnIsImpaired = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsImpaired" );

	AKFPawn_Monster_execIsImpaired_Parms IsImpaired_Parms;

	this->ProcessEvent ( pFnIsImpaired, &IsImpaired_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsHeadless
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::IsHeadless ( )
{
	static UFunction* pFnIsHeadless = NULL;

	if ( ! pFnIsHeadless )
		pFnIsHeadless = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsHeadless" );

	AKFPawn_Monster_execIsHeadless_Parms IsHeadless_Parms;

	this->ProcessEvent ( pFnIsHeadless, &IsHeadless_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ShouldBeWandering
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::ShouldBeWandering ( )
{
	static UFunction* pFnShouldBeWandering = NULL;

	if ( ! pFnShouldBeWandering )
		pFnShouldBeWandering = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ShouldBeWandering" );

	AKFPawn_Monster_execShouldBeWandering_Parms ShouldBeWandering_Parms;

	this->ProcessEvent ( pFnShouldBeWandering, &ShouldBeWandering_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.EndPanicWander
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::EndPanicWander ( )
{
	static UFunction* pFnEndPanicWander = NULL;

	if ( ! pFnEndPanicWander )
		pFnEndPanicWander = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.EndPanicWander" );

	AKFPawn_Monster_execEndPanicWander_Parms EndPanicWander_Parms;

	this->ProcessEvent ( pFnEndPanicWander, &EndPanicWander_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CausePanicWander
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::CausePanicWander ( )
{
	static UFunction* pFnCausePanicWander = NULL;

	if ( ! pFnCausePanicWander )
		pFnCausePanicWander = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CausePanicWander" );

	AKFPawn_Monster_execCausePanicWander_Parms CausePanicWander_Parms;

	this->ProcessEvent ( pFnCausePanicWander, &CausePanicWander_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.OnStackingAfflictionChanged
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::OnStackingAfflictionChanged ( )
{
	static UFunction* pFnOnStackingAfflictionChanged = NULL;

	if ( ! pFnOnStackingAfflictionChanged )
		pFnOnStackingAfflictionChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.OnStackingAfflictionChanged" );

	AKFPawn_Monster_execOnStackingAfflictionChanged_Parms OnStackingAfflictionChanged_Parms;

	this->ProcessEvent ( pFnOnStackingAfflictionChanged, &OnStackingAfflictionChanged_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_Monster::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CauseHeadTrauma" );

	AKFPawn_Monster_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.UpdateVisualInflation
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::UpdateVisualInflation ( )
{
	static UFunction* pFnUpdateVisualInflation = NULL;

	if ( ! pFnUpdateVisualInflation )
		pFnUpdateVisualInflation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.UpdateVisualInflation" );

	AKFPawn_Monster_execUpdateVisualInflation_Parms UpdateVisualInflation_Parms;

	this->ProcessEvent ( pFnUpdateVisualInflation, &UpdateVisualInflation_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ShrapnelExplode
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::ShrapnelExplode ( )
{
	static UFunction* pFnShrapnelExplode = NULL;

	if ( ! pFnShrapnelExplode )
		pFnShrapnelExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ShrapnelExplode" );

	AKFPawn_Monster_execShrapnelExplode_Parms ShrapnelExplode_Parms;

	this->ProcessEvent ( pFnShrapnelExplode, &ShrapnelExplode_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.InfectWithNapalm
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::InfectWithNapalm ( )
{
	static UFunction* pFnInfectWithNapalm = NULL;

	if ( ! pFnInfectWithNapalm )
		pFnInfectWithNapalm = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.InfectWithNapalm" );

	AKFPawn_Monster_execInfectWithNapalm_Parms InfectWithNapalm_Parms;

	this->ProcessEvent ( pFnInfectWithNapalm, &InfectWithNapalm_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CanNapalmInfect
// [0x00420002] 
// Parameters infos:

void AKFPawn_Monster::CanNapalmInfect ( )
{
	static UFunction* pFnCanNapalmInfect = NULL;

	if ( ! pFnCanNapalmInfect )
		pFnCanNapalmInfect = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CanNapalmInfect" );

	AKFPawn_Monster_execCanNapalmInfect_Parms CanNapalmInfect_Parms;

	this->ProcessEvent ( pFnCanNapalmInfect, &CanNapalmInfect_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsNapalmInfected
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::IsNapalmInfected ( )
{
	static UFunction* pFnIsNapalmInfected = NULL;

	if ( ! pFnIsNapalmInfected )
		pFnIsNapalmInfected = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsNapalmInfected" );

	AKFPawn_Monster_execIsNapalmInfected_Parms IsNapalmInfected_Parms;

	this->ProcessEvent ( pFnIsNapalmInfected, &IsNapalmInfected_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CanShowHealth
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::CanShowHealth ( )
{
	static UFunction* pFnCanShowHealth = NULL;

	if ( ! pFnCanShowHealth )
		pFnCanShowHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CanShowHealth" );

	AKFPawn_Monster_execCanShowHealth_Parms CanShowHealth_Parms;

	this->ProcessEvent ( pFnCanShowHealth, &CanShowHealth_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ResetHealthVisibilty
// [0x00080102] 
// Parameters infos:

void AKFPawn_Monster::ResetHealthVisibilty ( )
{
	static UFunction* pFnResetHealthVisibilty = NULL;

	if ( ! pFnResetHealthVisibilty )
		pFnResetHealthVisibilty = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ResetHealthVisibilty" );

	AKFPawn_Monster_execResetHealthVisibilty_Parms ResetHealthVisibilty_Parms;

	this->ProcessEvent ( pFnResetHealthVisibilty, &ResetHealthVisibilty_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.OnRigidBodyLinearConstraintViolated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventOnRigidBodyLinearConstraintViolated ( )
{
	static UFunction* pFnOnRigidBodyLinearConstraintViolated = NULL;

	if ( ! pFnOnRigidBodyLinearConstraintViolated )
		pFnOnRigidBodyLinearConstraintViolated = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.OnRigidBodyLinearConstraintViolated" );

	AKFPawn_Monster_eventOnRigidBodyLinearConstraintViolated_Parms OnRigidBodyLinearConstraintViolated_Parms;

	this->ProcessEvent ( pFnOnRigidBodyLinearConstraintViolated, &OnRigidBodyLinearConstraintViolated_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.Destroyed" );

	AKFPawn_Monster_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.OnZedDied
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::OnZedDied ( )
{
	static UFunction* pFnOnZedDied = NULL;

	if ( ! pFnOnZedDied )
		pFnOnZedDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.OnZedDied" );

	AKFPawn_Monster_execOnZedDied_Parms OnZedDied_Parms;

	this->ProcessEvent ( pFnOnZedDied, &OnZedDied_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.Died
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::Died ( )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.Died" );

	AKFPawn_Monster_execDied_Parms Died_Parms;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetRallyBoostResistance
// [0x00820102] 
// Parameters infos:

void AKFPawn_Monster::GetRallyBoostResistance ( )
{
	static UFunction* pFnGetRallyBoostResistance = NULL;

	if ( ! pFnGetRallyBoostResistance )
		pFnGetRallyBoostResistance = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetRallyBoostResistance" );

	AKFPawn_Monster_execGetRallyBoostResistance_Parms GetRallyBoostResistance_Parms;

	this->ProcessEvent ( pFnGetRallyBoostResistance, &GetRallyBoostResistance_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetRallyBoostDamage
// [0x00820102] 
// Parameters infos:

void AKFPawn_Monster::GetRallyBoostDamage ( )
{
	static UFunction* pFnGetRallyBoostDamage = NULL;

	if ( ! pFnGetRallyBoostDamage )
		pFnGetRallyBoostDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetRallyBoostDamage" );

	AKFPawn_Monster_execGetRallyBoostDamage_Parms GetRallyBoostDamage_Parms;

	this->ProcessEvent ( pFnGetRallyBoostDamage, &GetRallyBoostDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetDifficultyRallyInfo
// [0x00420102] 
// Parameters infos:

void AKFPawn_Monster::GetDifficultyRallyInfo ( )
{
	static UFunction* pFnGetDifficultyRallyInfo = NULL;

	if ( ! pFnGetDifficultyRallyInfo )
		pFnGetDifficultyRallyInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetDifficultyRallyInfo" );

	AKFPawn_Monster_execGetDifficultyRallyInfo_Parms GetDifficultyRallyInfo_Parms;

	this->ProcessEvent ( pFnGetDifficultyRallyInfo, &GetDifficultyRallyInfo_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetRallySettings
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::SetRallySettings ( )
{
	static UFunction* pFnSetRallySettings = NULL;

	if ( ! pFnSetRallySettings )
		pFnSetRallySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetRallySettings" );

	AKFPawn_Monster_execSetRallySettings_Parms SetRallySettings_Parms;

	this->ProcessEvent ( pFnSetRallySettings, &SetRallySettings_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.Timer_EndRallyBoost
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::Timer_EndRallyBoost ( )
{
	static UFunction* pFnTimer_EndRallyBoost = NULL;

	if ( ! pFnTimer_EndRallyBoost )
		pFnTimer_EndRallyBoost = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.Timer_EndRallyBoost" );

	AKFPawn_Monster_execTimer_EndRallyBoost_Parms Timer_EndRallyBoost_Parms;

	this->ProcessEvent ( pFnTimer_EndRallyBoost, &Timer_EndRallyBoost_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.Rally
// [0x00824102] 
// Parameters infos:

void AKFPawn_Monster::Rally ( )
{
	static UFunction* pFnRally = NULL;

	if ( ! pFnRally )
		pFnRally = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.Rally" );

	AKFPawn_Monster_execRally_Parms Rally_Parms;

	this->ProcessEvent ( pFnRally, &Rally_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.BleedOutTimer
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::BleedOutTimer ( )
{
	static UFunction* pFnBleedOutTimer = NULL;

	if ( ! pFnBleedOutTimer )
		pFnBleedOutTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.BleedOutTimer" );

	AKFPawn_Monster_execBleedOutTimer_Parms BleedOutTimer_Parms;

	this->ProcessEvent ( pFnBleedOutTimer, &BleedOutTimer_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyMeleeTakeHit
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::NotifyMeleeTakeHit ( )
{
	static UFunction* pFnNotifyMeleeTakeHit = NULL;

	if ( ! pFnNotifyMeleeTakeHit )
		pFnNotifyMeleeTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyMeleeTakeHit" );

	AKFPawn_Monster_execNotifyMeleeTakeHit_Parms NotifyMeleeTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyMeleeTakeHit, &NotifyMeleeTakeHit_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::PlayHit ( )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayHit" );

	AKFPawn_Monster_execPlayHit_Parms PlayHit_Parms;

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyTakeHit" );

	AKFPawn_Monster_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HasReducedMeleeDamage
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::HasReducedMeleeDamage ( )
{
	static UFunction* pFnHasReducedMeleeDamage = NULL;

	if ( ! pFnHasReducedMeleeDamage )
		pFnHasReducedMeleeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HasReducedMeleeDamage" );

	AKFPawn_Monster_execHasReducedMeleeDamage_Parms HasReducedMeleeDamage_Parms;

	this->ProcessEvent ( pFnHasReducedMeleeDamage, &HasReducedMeleeDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HealDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventHealDamage ( )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HealDamage" );

	AKFPawn_Monster_eventHealDamage_Parms HealDamage_Parms;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ApplyBlockingDamageModifier
// [0x00C20002] 
// Parameters infos:

void AKFPawn_Monster::ApplyBlockingDamageModifier ( )
{
	static UFunction* pFnApplyBlockingDamageModifier = NULL;

	if ( ! pFnApplyBlockingDamageModifier )
		pFnApplyBlockingDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ApplyBlockingDamageModifier" );

	AKFPawn_Monster_execApplyBlockingDamageModifier_Parms ApplyBlockingDamageModifier_Parms;

	this->ProcessEvent ( pFnApplyBlockingDamageModifier, &ApplyBlockingDamageModifier_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.AppendLiveDamageTypeModifiers
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::AppendLiveDamageTypeModifiers ( )
{
	static UFunction* pFnAppendLiveDamageTypeModifiers = NULL;

	if ( ! pFnAppendLiveDamageTypeModifiers )
		pFnAppendLiveDamageTypeModifiers = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.AppendLiveDamageTypeModifiers" );

	AKFPawn_Monster_execAppendLiveDamageTypeModifiers_Parms AppendLiveDamageTypeModifiers_Parms;

	this->ProcessEvent ( pFnAppendLiveDamageTypeModifiers, &AppendLiveDamageTypeModifiers_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetDamageTypeModifier
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::GetDamageTypeModifier ( )
{
	static UFunction* pFnGetDamageTypeModifier = NULL;

	if ( ! pFnGetDamageTypeModifier )
		pFnGetDamageTypeModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetDamageTypeModifier" );

	AKFPawn_Monster_execGetDamageTypeModifier_Parms GetDamageTypeModifier_Parms;

	this->ProcessEvent ( pFnGetDamageTypeModifier, &GetDamageTypeModifier_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFPawn_Monster::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.AdjustDamage" );

	AKFPawn_Monster_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.TakeDamage" );

	AKFPawn_Monster_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CanCountHeadshots
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::CanCountHeadshots ( )
{
	static UFunction* pFnCanCountHeadshots = NULL;

	if ( ! pFnCanCountHeadshots )
		pFnCanCountHeadshots = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CanCountHeadshots" );

	AKFPawn_Monster_execCanCountHeadshots_Parms CanCountHeadshots_Parms;

	this->ProcessEvent ( pFnCanCountHeadshots, &CanCountHeadshots_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.InflationExplode
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::InflationExplode ( )
{
	static UFunction* pFnInflationExplode = NULL;

	if ( ! pFnInflationExplode )
		pFnInflationExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.InflationExplode" );

	AKFPawn_Monster_execInflationExplode_Parms InflationExplode_Parms;

	this->ProcessEvent ( pFnInflationExplode, &InflationExplode_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayExplosiveDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::PlayExplosiveDeath ( )
{
	static UFunction* pFnPlayExplosiveDeath = NULL;

	if ( ! pFnPlayExplosiveDeath )
		pFnPlayExplosiveDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayExplosiveDeath" );

	AKFPawn_Monster_execPlayExplosiveDeath_Parms PlayExplosiveDeath_Parms;

	this->ProcessEvent ( pFnPlayExplosiveDeath, &PlayExplosiveDeath_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayInflationDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::PlayInflationDeath ( )
{
	static UFunction* pFnPlayInflationDeath = NULL;

	if ( ! pFnPlayInflationDeath )
		pFnPlayInflationDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayInflationDeath" );

	AKFPawn_Monster_execPlayInflationDeath_Parms PlayInflationDeath_Parms;

	this->ProcessEvent ( pFnPlayInflationDeath, &PlayInflationDeath_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayDying" );

	AKFPawn_Monster_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ShouldDrawBossIcon
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::ShouldDrawBossIcon ( )
{
	static UFunction* pFnShouldDrawBossIcon = NULL;

	if ( ! pFnShouldDrawBossIcon )
		pFnShouldDrawBossIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ShouldDrawBossIcon" );

	AKFPawn_Monster_execShouldDrawBossIcon_Parms ShouldDrawBossIcon_Parms;

	this->ProcessEvent ( pFnShouldDrawBossIcon, &ShouldDrawBossIcon_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.AdjustAffliction
// [0x00420102] 
// Parameters infos:

void AKFPawn_Monster::AdjustAffliction ( )
{
	static UFunction* pFnAdjustAffliction = NULL;

	if ( ! pFnAdjustAffliction )
		pFnAdjustAffliction = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.AdjustAffliction" );

	AKFPawn_Monster_execAdjustAffliction_Parms AdjustAffliction_Parms;

	this->ProcessEvent ( pFnAdjustAffliction, &AdjustAffliction_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetMinBlockFOV
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::GetMinBlockFOV ( )
{
	static UFunction* pFnGetMinBlockFOV = NULL;

	if ( ! pFnGetMinBlockFOV )
		pFnGetMinBlockFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetMinBlockFOV" );

	AKFPawn_Monster_execGetMinBlockFOV_Parms GetMinBlockFOV_Parms;

	this->ProcessEvent ( pFnGetMinBlockFOV, &GetMinBlockFOV_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetBlockSettings
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::GetBlockSettings ( )
{
	static UFunction* pFnGetBlockSettings = NULL;

	if ( ! pFnGetBlockSettings )
		pFnGetBlockSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetBlockSettings" );

	AKFPawn_Monster_execGetBlockSettings_Parms GetBlockSettings_Parms;

	this->ProcessEvent ( pFnGetBlockSettings, &GetBlockSettings_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetBlockSettings
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::SetBlockSettings ( )
{
	static UFunction* pFnSetBlockSettings = NULL;

	if ( ! pFnSetBlockSettings )
		pFnSetBlockSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetBlockSettings" );

	AKFPawn_Monster_execSetBlockSettings_Parms SetBlockSettings_Parms;

	this->ProcessEvent ( pFnSetBlockSettings, &SetBlockSettings_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CanBlock
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::CanBlock ( )
{
	static UFunction* pFnCanBlock = NULL;

	if ( ! pFnCanBlock )
		pFnCanBlock = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CanBlock" );

	AKFPawn_Monster_execCanBlock_Parms CanBlock_Parms;

	this->ProcessEvent ( pFnCanBlock, &CanBlock_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.UseAdjustedControllerSensitivity
// [0x00020100] 
// Parameters infos:

void AKFPawn_Monster::UseAdjustedControllerSensitivity ( )
{
	static UFunction* pFnUseAdjustedControllerSensitivity = NULL;

	if ( ! pFnUseAdjustedControllerSensitivity )
		pFnUseAdjustedControllerSensitivity = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.UseAdjustedControllerSensitivity" );

	AKFPawn_Monster_execUseAdjustedControllerSensitivity_Parms UseAdjustedControllerSensitivity_Parms;

	this->ProcessEvent ( pFnUseAdjustedControllerSensitivity, &UseAdjustedControllerSensitivity_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PutAllMovesOnCooldown
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::PutAllMovesOnCooldown ( )
{
	static UFunction* pFnPutAllMovesOnCooldown = NULL;

	if ( ! pFnPutAllMovesOnCooldown )
		pFnPutAllMovesOnCooldown = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PutAllMovesOnCooldown" );

	AKFPawn_Monster_execPutAllMovesOnCooldown_Parms PutAllMovesOnCooldown_Parms;

	this->ProcessEvent ( pFnPutAllMovesOnCooldown, &PutAllMovesOnCooldown_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetSpecialMoveCooldowns
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::GetSpecialMoveCooldowns ( )
{
	static UFunction* pFnGetSpecialMoveCooldowns = NULL;

	if ( ! pFnGetSpecialMoveCooldowns )
		pFnGetSpecialMoveCooldowns = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetSpecialMoveCooldowns" );

	AKFPawn_Monster_execGetSpecialMoveCooldowns_Parms GetSpecialMoveCooldowns_Parms;

	this->ProcessEvent ( pFnGetSpecialMoveCooldowns, &GetSpecialMoveCooldowns_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetSpecialMoveCooldownTimeRemaining
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::GetSpecialMoveCooldownTimeRemaining ( )
{
	static UFunction* pFnGetSpecialMoveCooldownTimeRemaining = NULL;

	if ( ! pFnGetSpecialMoveCooldownTimeRemaining )
		pFnGetSpecialMoveCooldownTimeRemaining = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetSpecialMoveCooldownTimeRemaining" );

	AKFPawn_Monster_execGetSpecialMoveCooldownTimeRemaining_Parms GetSpecialMoveCooldownTimeRemaining_Parms;

	this->ProcessEvent ( pFnGetSpecialMoveCooldownTimeRemaining, &GetSpecialMoveCooldownTimeRemaining_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetSpecialMoveCooldownPercent
// [0x00420002] 
// Parameters infos:

void AKFPawn_Monster::GetSpecialMoveCooldownPercent ( )
{
	static UFunction* pFnGetSpecialMoveCooldownPercent = NULL;

	if ( ! pFnGetSpecialMoveCooldownPercent )
		pFnGetSpecialMoveCooldownPercent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetSpecialMoveCooldownPercent" );

	AKFPawn_Monster_execGetSpecialMoveCooldownPercent_Parms GetSpecialMoveCooldownPercent_Parms;

	this->ProcessEvent ( pFnGetSpecialMoveCooldownPercent, &GetSpecialMoveCooldownPercent_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifySpecialMoveEnded
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifySpecialMoveEnded" );

	AKFPawn_Monster_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.StopPlayerZedMove
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::StopPlayerZedMove ( )
{
	static UFunction* pFnStopPlayerZedMove = NULL;

	if ( ! pFnStopPlayerZedMove )
		pFnStopPlayerZedMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.StopPlayerZedMove" );

	AKFPawn_Monster_execStopPlayerZedMove_Parms StopPlayerZedMove_Parms;

	this->ProcessEvent ( pFnStopPlayerZedMove, &StopPlayerZedMove_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.StartPlayerZedMove
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::StartPlayerZedMove ( )
{
	static UFunction* pFnStartPlayerZedMove = NULL;

	if ( ! pFnStartPlayerZedMove )
		pFnStartPlayerZedMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.StartPlayerZedMove" );

	AKFPawn_Monster_execStartPlayerZedMove_Parms StartPlayerZedMove_Parms;

	this->ProcessEvent ( pFnStartPlayerZedMove, &StartPlayerZedMove_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsInAnyAttackTagRange
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventIsInAnyAttackTagRange ( )
{
	static UFunction* pFnIsInAnyAttackTagRange = NULL;

	if ( ! pFnIsInAnyAttackTagRange )
		pFnIsInAnyAttackTagRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsInAnyAttackTagRange" );

	AKFPawn_Monster_eventIsInAnyAttackTagRange_Parms IsInAnyAttackTagRange_Parms;

	this->ProcessEvent ( pFnIsInAnyAttackTagRange, &IsInAnyAttackTagRange_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsInAttackTagRange
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventIsInAttackTagRange ( )
{
	static UFunction* pFnIsInAttackTagRange = NULL;

	if ( ! pFnIsInAttackTagRange )
		pFnIsInAttackTagRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsInAttackTagRange" );

	AKFPawn_Monster_eventIsInAttackTagRange_Parms IsInAttackTagRange_Parms;

	this->ProcessEvent ( pFnIsInAttackTagRange, &IsInAttackTagRange_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyMeleeDamageDealt
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::NotifyMeleeDamageDealt ( )
{
	static UFunction* pFnNotifyMeleeDamageDealt = NULL;

	if ( ! pFnNotifyMeleeDamageDealt )
		pFnNotifyMeleeDamageDealt = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyMeleeDamageDealt" );

	AKFPawn_Monster_execNotifyMeleeDamageDealt_Parms NotifyMeleeDamageDealt_Parms;

	this->ProcessEvent ( pFnNotifyMeleeDamageDealt, &NotifyMeleeDamageDealt_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.MeleeImpactNotify
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::MeleeImpactNotify ( )
{
	static UFunction* pFnMeleeImpactNotify = NULL;

	if ( ! pFnMeleeImpactNotify )
		pFnMeleeImpactNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.MeleeImpactNotify" );

	AKFPawn_Monster_execMeleeImpactNotify_Parms MeleeImpactNotify_Parms;

	this->ProcessEvent ( pFnMeleeImpactNotify, &MeleeImpactNotify_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyFriendlyAIDamageTaken
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::NotifyFriendlyAIDamageTaken ( )
{
	static UFunction* pFnNotifyFriendlyAIDamageTaken = NULL;

	if ( ! pFnNotifyFriendlyAIDamageTaken )
		pFnNotifyFriendlyAIDamageTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyFriendlyAIDamageTaken" );

	AKFPawn_Monster_execNotifyFriendlyAIDamageTaken_Parms NotifyFriendlyAIDamageTaken_Parms;

	this->ProcessEvent ( pFnNotifyFriendlyAIDamageTaken, &NotifyFriendlyAIDamageTaken_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsEnraged
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventIsEnraged ( )
{
	static UFunction* pFnIsEnraged = NULL;

	if ( ! pFnIsEnraged )
		pFnIsEnraged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsEnraged" );

	AKFPawn_Monster_eventIsEnraged_Parms IsEnraged_Parms;

	this->ProcessEvent ( pFnIsEnraged, &IsEnraged_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetEnraged
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::SetEnraged ( )
{
	static UFunction* pFnSetEnraged = NULL;

	if ( ! pFnSetEnraged )
		pFnSetEnraged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetEnraged" );

	AKFPawn_Monster_execSetEnraged_Parms SetEnraged_Parms;

	this->ProcessEvent ( pFnSetEnraged, &SetEnraged_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.IsLocationValidForCombat
// [0x00020401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::IsLocationValidForCombat ( )
{
	static UFunction* pFnIsLocationValidForCombat = NULL;

	if ( ! pFnIsLocationValidForCombat )
		pFnIsLocationValidForCombat = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsLocationValidForCombat" );

	AKFPawn_Monster_execIsLocationValidForCombat_Parms IsLocationValidForCombat_Parms;

	pFnIsLocationValidForCombat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsLocationValidForCombat, &IsLocationValidForCombat_Parms, NULL );

	pFnIsLocationValidForCombat->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.GetEnemy
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::GetEnemy ( )
{
	static UFunction* pFnGetEnemy = NULL;

	if ( ! pFnGetEnemy )
		pFnGetEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetEnemy" );

	AKFPawn_Monster_execGetEnemy_Parms GetEnemy_Parms;

	pFnGetEnemy->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetEnemy, &GetEnemy_Parms, NULL );

	pFnGetEnemy->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.InAnyAttackTagRange
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::InAnyAttackTagRange ( )
{
	static UFunction* pFnInAnyAttackTagRange = NULL;

	if ( ! pFnInAnyAttackTagRange )
		pFnInAnyAttackTagRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.InAnyAttackTagRange" );

	AKFPawn_Monster_execInAnyAttackTagRange_Parms InAnyAttackTagRange_Parms;

	pFnInAnyAttackTagRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInAnyAttackTagRange, &InAnyAttackTagRange_Parms, NULL );

	pFnInAnyAttackTagRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.InAttackTagRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::InAttackTagRange ( )
{
	static UFunction* pFnInAttackTagRange = NULL;

	if ( ! pFnInAttackTagRange )
		pFnInAttackTagRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.InAttackTagRange" );

	AKFPawn_Monster_execInAttackTagRange_Parms InAttackTagRange_Parms;

	pFnInAttackTagRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInAttackTagRange, &InAttackTagRange_Parms, NULL );

	pFnInAttackTagRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.InMeleeRange
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::InMeleeRange ( )
{
	static UFunction* pFnInMeleeRange = NULL;

	if ( ! pFnInMeleeRange )
		pFnInMeleeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.InMeleeRange" );

	AKFPawn_Monster_execInMeleeRange_Parms InMeleeRange_Parms;

	pFnInMeleeRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInMeleeRange, &InMeleeRange_Parms, NULL );

	pFnInMeleeRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.InChargeRange
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::InChargeRange ( )
{
	static UFunction* pFnInChargeRange = NULL;

	if ( ! pFnInChargeRange )
		pFnInChargeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.InChargeRange" );

	AKFPawn_Monster_execInChargeRange_Parms InChargeRange_Parms;

	pFnInChargeRange->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInChargeRange, &InChargeRange_Parms, NULL );

	pFnInChargeRange->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.IsValidEnemyTargetFor
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::IsValidEnemyTargetFor ( )
{
	static UFunction* pFnIsValidEnemyTargetFor = NULL;

	if ( ! pFnIsValidEnemyTargetFor )
		pFnIsValidEnemyTargetFor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.IsValidEnemyTargetFor" );

	AKFPawn_Monster_execIsValidEnemyTargetFor_Parms IsValidEnemyTargetFor_Parms;

	pFnIsValidEnemyTargetFor->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsValidEnemyTargetFor, &IsValidEnemyTargetFor_Parms, NULL );

	pFnIsValidEnemyTargetFor->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.SetZedTimeSpeedScale
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::SetZedTimeSpeedScale ( )
{
	static UFunction* pFnSetZedTimeSpeedScale = NULL;

	if ( ! pFnSetZedTimeSpeedScale )
		pFnSetZedTimeSpeedScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetZedTimeSpeedScale" );

	AKFPawn_Monster_execSetZedTimeSpeedScale_Parms SetZedTimeSpeedScale_Parms;

	this->ProcessEvent ( pFnSetZedTimeSpeedScale, &SetZedTimeSpeedScale_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CrushedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::CrushedBy ( )
{
	static UFunction* pFnCrushedBy = NULL;

	if ( ! pFnCrushedBy )
		pFnCrushedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CrushedBy" );

	AKFPawn_Monster_execCrushedBy_Parms CrushedBy_Parms;

	this->ProcessEvent ( pFnCrushedBy, &CrushedBy_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetMovementPhysics
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::SetMovementPhysics ( )
{
	static UFunction* pFnSetMovementPhysics = NULL;

	if ( ! pFnSetMovementPhysics )
		pFnSetMovementPhysics = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetMovementPhysics" );

	AKFPawn_Monster_execSetMovementPhysics_Parms SetMovementPhysics_Parms;

	this->ProcessEvent ( pFnSetMovementPhysics, &SetMovementPhysics_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.Landed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventLanded ( )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.Landed" );

	AKFPawn_Monster_eventLanded_Parms Landed_Parms;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.TakeFallingDamage
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::TakeFallingDamage ( )
{
	static UFunction* pFnTakeFallingDamage = NULL;

	if ( ! pFnTakeFallingDamage )
		pFnTakeFallingDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.TakeFallingDamage" );

	AKFPawn_Monster_execTakeFallingDamage_Parms TakeFallingDamage_Parms;

	this->ProcessEvent ( pFnTakeFallingDamage, &TakeFallingDamage_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetBumpAttackDamageType
// [0x00020000] 
// Parameters infos:

void AKFPawn_Monster::GetBumpAttackDamageType ( )
{
	static UFunction* pFnGetBumpAttackDamageType = NULL;

	if ( ! pFnGetBumpAttackDamageType )
		pFnGetBumpAttackDamageType = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetBumpAttackDamageType" );

	AKFPawn_Monster_execGetBumpAttackDamageType_Parms GetBumpAttackDamageType_Parms;

	this->ProcessEvent ( pFnGetBumpAttackDamageType, &GetBumpAttackDamageType_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetDirectionalJumpScale
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::GetDirectionalJumpScale ( )
{
	static UFunction* pFnGetDirectionalJumpScale = NULL;

	if ( ! pFnGetDirectionalJumpScale )
		pFnGetDirectionalJumpScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetDirectionalJumpScale" );

	AKFPawn_Monster_execGetDirectionalJumpScale_Parms GetDirectionalJumpScale_Parms;

	this->ProcessEvent ( pFnGetDirectionalJumpScale, &GetDirectionalJumpScale_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetSprintJumpVelocity
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::GetSprintJumpVelocity ( )
{
	static UFunction* pFnGetSprintJumpVelocity = NULL;

	if ( ! pFnGetSprintJumpVelocity )
		pFnGetSprintJumpVelocity = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetSprintJumpVelocity" );

	AKFPawn_Monster_execGetSprintJumpVelocity_Parms GetSprintJumpVelocity_Parms;

	this->ProcessEvent ( pFnGetSprintJumpVelocity, &GetSprintJumpVelocity_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetJumpZ
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::GetJumpZ ( )
{
	static UFunction* pFnGetJumpZ = NULL;

	if ( ! pFnGetJumpZ )
		pFnGetJumpZ = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetJumpZ" );

	AKFPawn_Monster_execGetJumpZ_Parms GetJumpZ_Parms;

	this->ProcessEvent ( pFnGetJumpZ, &GetJumpZ_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.DoJump
// [0x00820002] 
// Parameters infos:

void AKFPawn_Monster::DoJump ( )
{
	static UFunction* pFnDoJump = NULL;

	if ( ! pFnDoJump )
		pFnDoJump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.DoJump" );

	AKFPawn_Monster_execDoJump_Parms DoJump_Parms;

	this->ProcessEvent ( pFnDoJump, &DoJump_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.StuckOnPawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventStuckOnPawn ( )
{
	static UFunction* pFnStuckOnPawn = NULL;

	if ( ! pFnStuckOnPawn )
		pFnStuckOnPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.StuckOnPawn" );

	AKFPawn_Monster_eventStuckOnPawn_Parms StuckOnPawn_Parms;

	this->ProcessEvent ( pFnStuckOnPawn, &StuckOnPawn_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetSprinting" );

	AKFPawn_Monster_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.Touch" );

	AKFPawn_Monster_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HandleDestructibleBump
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::HandleDestructibleBump ( )
{
	static UFunction* pFnHandleDestructibleBump = NULL;

	if ( ! pFnHandleDestructibleBump )
		pFnHandleDestructibleBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HandleDestructibleBump" );

	AKFPawn_Monster_execHandleDestructibleBump_Parms HandleDestructibleBump_Parms;

	this->ProcessEvent ( pFnHandleDestructibleBump, &HandleDestructibleBump_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyCollideWithActor
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::NotifyCollideWithActor ( )
{
	static UFunction* pFnNotifyCollideWithActor = NULL;

	if ( ! pFnNotifyCollideWithActor )
		pFnNotifyCollideWithActor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyCollideWithActor" );

	AKFPawn_Monster_execNotifyCollideWithActor_Parms NotifyCollideWithActor_Parms;

	this->ProcessEvent ( pFnNotifyCollideWithActor, &NotifyCollideWithActor_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CanObliterateDoors
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::CanObliterateDoors ( )
{
	static UFunction* pFnCanObliterateDoors = NULL;

	if ( ! pFnCanObliterateDoors )
		pFnCanObliterateDoors = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CanObliterateDoors" );

	AKFPawn_Monster_execCanObliterateDoors_Parms CanObliterateDoors_Parms;

	this->ProcessEvent ( pFnCanObliterateDoors, &CanObliterateDoors_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.TryDestroyDoor
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::TryDestroyDoor ( )
{
	static UFunction* pFnTryDestroyDoor = NULL;

	if ( ! pFnTryDestroyDoor )
		pFnTryDestroyDoor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.TryDestroyDoor" );

	AKFPawn_Monster_execTryDestroyDoor_Parms TryDestroyDoor_Parms;

	this->ProcessEvent ( pFnTryDestroyDoor, &TryDestroyDoor_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HandleAIDoorBump
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::HandleAIDoorBump ( )
{
	static UFunction* pFnHandleAIDoorBump = NULL;

	if ( ! pFnHandleAIDoorBump )
		pFnHandleAIDoorBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HandleAIDoorBump" );

	AKFPawn_Monster_execHandleAIDoorBump_Parms HandleAIDoorBump_Parms;

	this->ProcessEvent ( pFnHandleAIDoorBump, &HandleAIDoorBump_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HitWall
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HitWall" );

	AKFPawn_Monster_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.HandleMonsterBump
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::HandleMonsterBump ( )
{
	static UFunction* pFnHandleMonsterBump = NULL;

	if ( ! pFnHandleMonsterBump )
		pFnHandleMonsterBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.HandleMonsterBump" );

	AKFPawn_Monster_execHandleMonsterBump_Parms HandleMonsterBump_Parms;

	this->ProcessEvent ( pFnHandleMonsterBump, &HandleMonsterBump_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.Bump
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventBump ( )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.Bump" );

	AKFPawn_Monster_eventBump_Parms Bump_Parms;

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SpiderBumpLevel
// [0x00024800] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventSpiderBumpLevel ( )
{
	static UFunction* pFnSpiderBumpLevel = NULL;

	if ( ! pFnSpiderBumpLevel )
		pFnSpiderBumpLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SpiderBumpLevel" );

	AKFPawn_Monster_eventSpiderBumpLevel_Parms SpiderBumpLevel_Parms;

	this->ProcessEvent ( pFnSpiderBumpLevel, &SpiderBumpLevel_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PlayFootStepSound
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventPlayFootStepSound ( )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PlayFootStepSound" );

	AKFPawn_Monster_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.AdjustMovementSpeed
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::AdjustMovementSpeed ( )
{
	static UFunction* pFnAdjustMovementSpeed = NULL;

	if ( ! pFnAdjustMovementSpeed )
		pFnAdjustMovementSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.AdjustMovementSpeed" );

	AKFPawn_Monster_execAdjustMovementSpeed_Parms AdjustMovementSpeed_Parms;

	this->ProcessEvent ( pFnAdjustMovementSpeed, &AdjustMovementSpeed_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetBlockingSprintSpeedModifier
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::GetBlockingSprintSpeedModifier ( )
{
	static UFunction* pFnGetBlockingSprintSpeedModifier = NULL;

	if ( ! pFnGetBlockingSprintSpeedModifier )
		pFnGetBlockingSprintSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetBlockingSprintSpeedModifier" );

	AKFPawn_Monster_execGetBlockingSprintSpeedModifier_Parms GetBlockingSprintSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetBlockingSprintSpeedModifier, &GetBlockingSprintSpeedModifier_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.UsePlayerControlledZedSkin
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventUsePlayerControlledZedSkin ( )
{
	static UFunction* pFnUsePlayerControlledZedSkin = NULL;

	if ( ! pFnUsePlayerControlledZedSkin )
		pFnUsePlayerControlledZedSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.UsePlayerControlledZedSkin" );

	AKFPawn_Monster_eventUsePlayerControlledZedSkin_Parms UsePlayerControlledZedSkin_Parms;

	this->ProcessEvent ( pFnUsePlayerControlledZedSkin, &UsePlayerControlledZedSkin_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetCharacterMonsterInfo
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::GetCharacterMonsterInfo ( )
{
	static UFunction* pFnGetCharacterMonsterInfo = NULL;

	if ( ! pFnGetCharacterMonsterInfo )
		pFnGetCharacterMonsterInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetCharacterMonsterInfo" );

	AKFPawn_Monster_execGetCharacterMonsterInfo_Parms GetCharacterMonsterInfo_Parms;

	pFnGetCharacterMonsterInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCharacterMonsterInfo, &GetCharacterMonsterInfo_Parms, NULL );

	pFnGetCharacterMonsterInfo->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.SetCharacterArch
// [0x00024102] 
// Parameters infos:

void AKFPawn_Monster::SetCharacterArch ( )
{
	static UFunction* pFnSetCharacterArch = NULL;

	if ( ! pFnSetCharacterArch )
		pFnSetCharacterArch = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetCharacterArch" );

	AKFPawn_Monster_execSetCharacterArch_Parms SetCharacterArch_Parms;

	this->ProcessEvent ( pFnSetCharacterArch, &SetCharacterArch_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.Tick" );

	AKFPawn_Monster_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CanTakeOver
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::CanTakeOver ( )
{
	static UFunction* pFnCanTakeOver = NULL;

	if ( ! pFnCanTakeOver )
		pFnCanTakeOver = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CanTakeOver" );

	AKFPawn_Monster_execCanTakeOver_Parms CanTakeOver_Parms;

	this->ProcessEvent ( pFnCanTakeOver, &CanTakeOver_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetShieldScale
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::SetShieldScale ( )
{
	static UFunction* pFnSetShieldScale = NULL;

	if ( ! pFnSetShieldScale )
		pFnSetShieldScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetShieldScale" );

	AKFPawn_Monster_execSetShieldScale_Parms SetShieldScale_Parms;

	this->ProcessEvent ( pFnSetShieldScale, &SetShieldScale_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ApplySpecialZoneHealthMod
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::ApplySpecialZoneHealthMod ( )
{
	static UFunction* pFnApplySpecialZoneHealthMod = NULL;

	if ( ! pFnApplySpecialZoneHealthMod )
		pFnApplySpecialZoneHealthMod = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ApplySpecialZoneHealthMod" );

	AKFPawn_Monster_execApplySpecialZoneHealthMod_Parms ApplySpecialZoneHealthMod_Parms;

	this->ProcessEvent ( pFnApplySpecialZoneHealthMod, &ApplySpecialZoneHealthMod_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PostInitAnimTree" );

	AKFPawn_Monster_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.BaseChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.BaseChange" );

	AKFPawn_Monster_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_Monster::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PossessedBy" );

	AKFPawn_Monster_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.NotifyTeamChanged
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::NotifyTeamChanged ( )
{
	static UFunction* pFnNotifyTeamChanged = NULL;

	if ( ! pFnNotifyTeamChanged )
		pFnNotifyTeamChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.NotifyTeamChanged" );

	AKFPawn_Monster_execNotifyTeamChanged_Parms NotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnNotifyTeamChanged, &NotifyTeamChanged_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.SetMeshLightingChannels
// [0x00020102] 
// Parameters infos:

void AKFPawn_Monster::SetMeshLightingChannels ( )
{
	static UFunction* pFnSetMeshLightingChannels = NULL;

	if ( ! pFnSetMeshLightingChannels )
		pFnSetMeshLightingChannels = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetMeshLightingChannels" );

	AKFPawn_Monster_execSetMeshLightingChannels_Parms SetMeshLightingChannels_Parms;

	this->ProcessEvent ( pFnSetMeshLightingChannels, &SetMeshLightingChannels_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PostBeginPlay" );

	AKFPawn_Monster_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CheckShouldAlwaysBeRelevant
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventCheckShouldAlwaysBeRelevant ( )
{
	static UFunction* pFnCheckShouldAlwaysBeRelevant = NULL;

	if ( ! pFnCheckShouldAlwaysBeRelevant )
		pFnCheckShouldAlwaysBeRelevant = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CheckShouldAlwaysBeRelevant" );

	AKFPawn_Monster_eventCheckShouldAlwaysBeRelevant_Parms CheckShouldAlwaysBeRelevant_Parms;

	this->ProcessEvent ( pFnCheckShouldAlwaysBeRelevant, &CheckShouldAlwaysBeRelevant_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PreBeginPlay" );

	AKFPawn_Monster_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.LastChanceLoad
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::LastChanceLoad ( )
{
	static UFunction* pFnLastChanceLoad = NULL;

	if ( ! pFnLastChanceLoad )
		pFnLastChanceLoad = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.LastChanceLoad" );

	AKFPawn_Monster_execLastChanceLoad_Parms LastChanceLoad_Parms;

	pFnLastChanceLoad->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLastChanceLoad, &LastChanceLoad_Parms, NULL );

	pFnLastChanceLoad->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.PreloadContent
// [0x00022401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::PreloadContent ( )
{
	static UFunction* pFnPreloadContent = NULL;

	if ( ! pFnPreloadContent )
		pFnPreloadContent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.PreloadContent" );

	AKFPawn_Monster_execPreloadContent_Parms PreloadContent_Parms;

	pFnPreloadContent->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnPreloadContent, &PreloadContent_Parms, NULL );

	pFnPreloadContent->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.GetAIPawnClassToSpawn
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventGetAIPawnClassToSpawn ( )
{
	static UFunction* pFnGetAIPawnClassToSpawn = NULL;

	if ( ! pFnGetAIPawnClassToSpawn )
		pFnGetAIPawnClassToSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetAIPawnClassToSpawn" );

	AKFPawn_Monster_eventGetAIPawnClassToSpawn_Parms GetAIPawnClassToSpawn_Parms;

	this->ProcessEvent ( pFnGetAIPawnClassToSpawn, &GetAIPawnClassToSpawn_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetXPValue
// [0x00022102] 
// Parameters infos:

void AKFPawn_Monster::GetXPValue ( )
{
	static UFunction* pFnGetXPValue = NULL;

	if ( ! pFnGetXPValue )
		pFnGetXPValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetXPValue" );

	AKFPawn_Monster_execGetXPValue_Parms GetXPValue_Parms;

	this->ProcessEvent ( pFnGetXPValue, &GetXPValue_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GetDoshValue
// [0x00022102] 
// Parameters infos:

void AKFPawn_Monster::GetDoshValue ( )
{
	static UFunction* pFnGetDoshValue = NULL;

	if ( ! pFnGetDoshValue )
		pFnGetDoshValue = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GetDoshValue" );

	AKFPawn_Monster_execGetDoshValue_Parms GetDoshValue_Parms;

	this->ProcessEvent ( pFnGetDoshValue, &GetDoshValue_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_Monster::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.ReplicatedEvent" );

	AKFPawn_Monster_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.CheckEncroachingWorldGeometry
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::CheckEncroachingWorldGeometry ( )
{
	static UFunction* pFnCheckEncroachingWorldGeometry = NULL;

	if ( ! pFnCheckEncroachingWorldGeometry )
		pFnCheckEncroachingWorldGeometry = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.CheckEncroachingWorldGeometry" );

	AKFPawn_Monster_execCheckEncroachingWorldGeometry_Parms CheckEncroachingWorldGeometry_Parms;

	pFnCheckEncroachingWorldGeometry->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCheckEncroachingWorldGeometry, &CheckEncroachingWorldGeometry_Parms, NULL );

	pFnCheckEncroachingWorldGeometry->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.SetChokePointCollision
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::SetChokePointCollision ( )
{
	static UFunction* pFnSetChokePointCollision = NULL;

	if ( ! pFnSetChokePointCollision )
		pFnSetChokePointCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SetChokePointCollision" );

	AKFPawn_Monster_execSetChokePointCollision_Parms SetChokePointCollision_Parms;

	pFnSetChokePointCollision->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetChokePointCollision, &SetChokePointCollision_Parms, NULL );

	pFnSetChokePointCollision->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.SpiderPhysicsWallAdjust
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_Monster::SpiderPhysicsWallAdjust ( )
{
	static UFunction* pFnSpiderPhysicsWallAdjust = NULL;

	if ( ! pFnSpiderPhysicsWallAdjust )
		pFnSpiderPhysicsWallAdjust = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.SpiderPhysicsWallAdjust" );

	AKFPawn_Monster_execSpiderPhysicsWallAdjust_Parms SpiderPhysicsWallAdjust_Parms;

	pFnSpiderPhysicsWallAdjust->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpiderPhysicsWallAdjust, &SpiderPhysicsWallAdjust_Parms, NULL );

	pFnSpiderPhysicsWallAdjust->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_Monster.GoreChunkDetachmentCriteria
// [0x00120100] 
// Parameters infos:

void AKFPawn_Monster::GoreChunkDetachmentCriteria ( )
{
	static UFunction* pFnGoreChunkDetachmentCriteria = NULL;

	if ( ! pFnGoreChunkDetachmentCriteria )
		pFnGoreChunkDetachmentCriteria = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GoreChunkDetachmentCriteria" );

	AKFPawn_Monster_execGoreChunkDetachmentCriteria_Parms GoreChunkDetachmentCriteria_Parms;

	this->ProcessEvent ( pFnGoreChunkDetachmentCriteria, &GoreChunkDetachmentCriteria_Parms, NULL );
};

// Function KFGame.KFPawn_Monster.GoreChunkAttachmentCriteria
// [0x00120100] 
// Parameters infos:

void AKFPawn_Monster::GoreChunkAttachmentCriteria ( )
{
	static UFunction* pFnGoreChunkAttachmentCriteria = NULL;

	if ( ! pFnGoreChunkAttachmentCriteria )
		pFnGoreChunkAttachmentCriteria = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_Monster.GoreChunkAttachmentCriteria" );

	AKFPawn_Monster_execGoreChunkAttachmentCriteria_Parms GoreChunkAttachmentCriteria_Parms;

	this->ProcessEvent ( pFnGoreChunkAttachmentCriteria, &GoreChunkAttachmentCriteria_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayGrabKilledDialog
// [0x00020000] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayGrabKilledDialog ( )
{
	static UFunction* pFnPlayGrabKilledDialog = NULL;

	if ( ! pFnPlayGrabKilledDialog )
		pFnPlayGrabKilledDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayGrabKilledDialog" );

	AKFPawn_MonsterBoss_execPlayGrabKilledDialog_Parms PlayGrabKilledDialog_Parms;

	this->ProcessEvent ( pFnPlayGrabKilledDialog, &PlayGrabKilledDialog_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayGrabbedPlayerDialog
// [0x00020000] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayGrabbedPlayerDialog ( )
{
	static UFunction* pFnPlayGrabbedPlayerDialog = NULL;

	if ( ! pFnPlayGrabbedPlayerDialog )
		pFnPlayGrabbedPlayerDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayGrabbedPlayerDialog" );

	AKFPawn_MonsterBoss_execPlayGrabbedPlayerDialog_Parms PlayGrabbedPlayerDialog_Parms;

	this->ProcessEvent ( pFnPlayGrabbedPlayerDialog, &PlayGrabbedPlayerDialog_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayLandedDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayLandedDialog ( )
{
	static UFunction* pFnPlayLandedDialog = NULL;

	if ( ! pFnPlayLandedDialog )
		pFnPlayLandedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayLandedDialog" );

	AKFPawn_MonsterBoss_execPlayLandedDialog_Parms PlayLandedDialog_Parms;

	this->ProcessEvent ( pFnPlayLandedDialog, &PlayLandedDialog_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayLeapedDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayLeapedDialog ( )
{
	static UFunction* pFnPlayLeapedDialog = NULL;

	if ( ! pFnPlayLeapedDialog )
		pFnPlayLeapedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayLeapedDialog" );

	AKFPawn_MonsterBoss_execPlayLeapedDialog_Parms PlayLeapedDialog_Parms;

	this->ProcessEvent ( pFnPlayLeapedDialog, &PlayLeapedDialog_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayHealDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayHealDialog ( )
{
	static UFunction* pFnPlayHealDialog = NULL;

	if ( ! pFnPlayHealDialog )
		pFnPlayHealDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayHealDialog" );

	AKFPawn_MonsterBoss_execPlayHealDialog_Parms PlayHealDialog_Parms;

	this->ProcessEvent ( pFnPlayHealDialog, &PlayHealDialog_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayGrabDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayGrabDialog ( )
{
	static UFunction* pFnPlayGrabDialog = NULL;

	if ( ! pFnPlayGrabDialog )
		pFnPlayGrabDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayGrabDialog" );

	AKFPawn_MonsterBoss_execPlayGrabDialog_Parms PlayGrabDialog_Parms;

	this->ProcessEvent ( pFnPlayGrabDialog, &PlayGrabDialog_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayHeadAsplode
// [0x00020100] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayHeadAsplode ( )
{
	static UFunction* pFnPlayHeadAsplode = NULL;

	if ( ! pFnPlayHeadAsplode )
		pFnPlayHeadAsplode = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayHeadAsplode" );

	AKFPawn_MonsterBoss_execPlayHeadAsplode_Parms PlayHeadAsplode_Parms;

	this->ProcessEvent ( pFnPlayHeadAsplode, &PlayHeadAsplode_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.CauseHeadTrauma
// [0x00024000] 
// Parameters infos:

void AKFPawn_MonsterBoss::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.CauseHeadTrauma" );

	AKFPawn_MonsterBoss_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayBossMusic
// [0x00020000] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayBossMusic ( )
{
	static UFunction* pFnPlayBossMusic = NULL;

	if ( ! pFnPlayBossMusic )
		pFnPlayBossMusic = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayBossMusic" );

	AKFPawn_MonsterBoss_execPlayBossMusic_Parms PlayBossMusic_Parms;

	this->ProcessEvent ( pFnPlayBossMusic, &PlayBossMusic_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.Died
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::Died ( )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.Died" );

	AKFPawn_MonsterBoss_execDied_Parms Died_Parms;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.LocalIsOnePlayerLeftInTeamGame
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPawn_MonsterBoss::LocalIsOnePlayerLeftInTeamGame ( )
{
	static UFunction* pFnLocalIsOnePlayerLeftInTeamGame = NULL;

	if ( ! pFnLocalIsOnePlayerLeftInTeamGame )
		pFnLocalIsOnePlayerLeftInTeamGame = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.LocalIsOnePlayerLeftInTeamGame" );

	AKFPawn_MonsterBoss_execLocalIsOnePlayerLeftInTeamGame_Parms LocalIsOnePlayerLeftInTeamGame_Parms;

	pFnLocalIsOnePlayerLeftInTeamGame->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLocalIsOnePlayerLeftInTeamGame, &LocalIsOnePlayerLeftInTeamGame_Parms, NULL );

	pFnLocalIsOnePlayerLeftInTeamGame->FunctionFlags |= 0x400;
};

// Function KFGame.KFPawn_MonsterBoss.IsOnePlayerLeftInTeamGame
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::IsOnePlayerLeftInTeamGame ( )
{
	static UFunction* pFnIsOnePlayerLeftInTeamGame = NULL;

	if ( ! pFnIsOnePlayerLeftInTeamGame )
		pFnIsOnePlayerLeftInTeamGame = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.IsOnePlayerLeftInTeamGame" );

	AKFPawn_MonsterBoss_execIsOnePlayerLeftInTeamGame_Parms IsOnePlayerLeftInTeamGame_Parms;

	this->ProcessEvent ( pFnIsOnePlayerLeftInTeamGame, &IsOnePlayerLeftInTeamGame_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetAttackRangeScale
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetAttackRangeScale ( )
{
	static UFunction* pFnGetAttackRangeScale = NULL;

	if ( ! pFnGetAttackRangeScale )
		pFnGetAttackRangeScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetAttackRangeScale" );

	AKFPawn_MonsterBoss_execGetAttackRangeScale_Parms GetAttackRangeScale_Parms;

	this->ProcessEvent ( pFnGetAttackRangeScale, &GetAttackRangeScale_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.UpdateBattlePhaseOnLocalPlayerUI
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::UpdateBattlePhaseOnLocalPlayerUI ( )
{
	static UFunction* pFnUpdateBattlePhaseOnLocalPlayerUI = NULL;

	if ( ! pFnUpdateBattlePhaseOnLocalPlayerUI )
		pFnUpdateBattlePhaseOnLocalPlayerUI = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.UpdateBattlePhaseOnLocalPlayerUI" );

	AKFPawn_MonsterBoss_execUpdateBattlePhaseOnLocalPlayerUI_Parms UpdateBattlePhaseOnLocalPlayerUI_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseOnLocalPlayerUI, &UpdateBattlePhaseOnLocalPlayerUI_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.OnBattlePhaseChanged
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::OnBattlePhaseChanged ( )
{
	static UFunction* pFnOnBattlePhaseChanged = NULL;

	if ( ! pFnOnBattlePhaseChanged )
		pFnOnBattlePhaseChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.OnBattlePhaseChanged" );

	AKFPawn_MonsterBoss_execOnBattlePhaseChanged_Parms OnBattlePhaseChanged_Parms;

	this->ProcessEvent ( pFnOnBattlePhaseChanged, &OnBattlePhaseChanged_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetCurrentBattlePhase
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetCurrentBattlePhase ( )
{
	static UFunction* pFnGetCurrentBattlePhase = NULL;

	if ( ! pFnGetCurrentBattlePhase )
		pFnGetCurrentBattlePhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetCurrentBattlePhase" );

	AKFPawn_MonsterBoss_execGetCurrentBattlePhase_Parms GetCurrentBattlePhase_Parms;

	this->ProcessEvent ( pFnGetCurrentBattlePhase, &GetCurrentBattlePhase_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.UpdateGameplayMICParams
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::UpdateGameplayMICParams ( )
{
	static UFunction* pFnUpdateGameplayMICParams = NULL;

	if ( ! pFnUpdateGameplayMICParams )
		pFnUpdateGameplayMICParams = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.UpdateGameplayMICParams" );

	AKFPawn_MonsterBoss_execUpdateGameplayMICParams_Parms UpdateGameplayMICParams_Parms;

	this->ProcessEvent ( pFnUpdateGameplayMICParams, &UpdateGameplayMICParams_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.TerminateEffectsOnDeath" );

	AKFPawn_MonsterBoss_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PlayDyingSound
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PlayDyingSound" );

	AKFPawn_MonsterBoss_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.CanAITargetThisPawn
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::CanAITargetThisPawn ( )
{
	static UFunction* pFnCanAITargetThisPawn = NULL;

	if ( ! pFnCanAITargetThisPawn )
		pFnCanAITargetThisPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.CanAITargetThisPawn" );

	AKFPawn_MonsterBoss_execCanAITargetThisPawn_Parms CanAITargetThisPawn_Parms;

	this->ProcessEvent ( pFnCanAITargetThisPawn, &CanAITargetThisPawn_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.NotifyTakeHit" );

	AKFPawn_MonsterBoss_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.Timer_IncreaseSpeed
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::Timer_IncreaseSpeed ( )
{
	static UFunction* pFnTimer_IncreaseSpeed = NULL;

	if ( ! pFnTimer_IncreaseSpeed )
		pFnTimer_IncreaseSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.Timer_IncreaseSpeed" );

	AKFPawn_MonsterBoss_execTimer_IncreaseSpeed_Parms Timer_IncreaseSpeed_Parms;

	this->ProcessEvent ( pFnTimer_IncreaseSpeed, &Timer_IncreaseSpeed_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PossessedBy" );

	AKFPawn_MonsterBoss_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_MonsterBoss::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PostBeginPlay" );

	AKFPawn_MonsterBoss_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_MonsterBoss::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.PreBeginPlay" );

	AKFPawn_MonsterBoss_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_MonsterBoss::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.ReplicatedEvent" );

	AKFPawn_MonsterBoss_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetNumMinionsToSpawn
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetNumMinionsToSpawn ( )
{
	static UFunction* pFnGetNumMinionsToSpawn = NULL;

	if ( ! pFnGetNumMinionsToSpawn )
		pFnGetNumMinionsToSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetNumMinionsToSpawn" );

	AKFPawn_MonsterBoss_execGetNumMinionsToSpawn_Parms GetNumMinionsToSpawn_Parms;

	this->ProcessEvent ( pFnGetNumMinionsToSpawn, &GetNumMinionsToSpawn_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetWaveInfo
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetWaveInfo ( )
{
	static UFunction* pFnGetWaveInfo = NULL;

	if ( ! pFnGetWaveInfo )
		pFnGetWaveInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetWaveInfo" );

	AKFPawn_MonsterBoss_execGetWaveInfo_Parms GetWaveInfo_Parms;

	this->ProcessEvent ( pFnGetWaveInfo, &GetWaveInfo_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.OnZedDied
// [0x00020002] 
// Parameters infos:

void AKFPawn_MonsterBoss::OnZedDied ( )
{
	static UFunction* pFnOnZedDied = NULL;

	if ( ! pFnOnZedDied )
		pFnOnZedDied = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.OnZedDied" );

	AKFPawn_MonsterBoss_execOnZedDied_Parms OnZedDied_Parms;

	this->ProcessEvent ( pFnOnZedDied, &OnZedDied_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetBossCameraOffset
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetBossCameraOffset ( )
{
	static UFunction* pFnGetBossCameraOffset = NULL;

	if ( ! pFnGetBossCameraOffset )
		pFnGetBossCameraOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetBossCameraOffset" );

	AKFPawn_MonsterBoss_execGetBossCameraOffset_Parms GetBossCameraOffset_Parms;

	this->ProcessEvent ( pFnGetBossCameraOffset, &GetBossCameraOffset_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetBossCameraSocket
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetBossCameraSocket ( )
{
	static UFunction* pFnGetBossCameraSocket = NULL;

	if ( ! pFnGetBossCameraSocket )
		pFnGetBossCameraSocket = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetBossCameraSocket" );

	AKFPawn_MonsterBoss_execGetBossCameraSocket_Parms GetBossCameraSocket_Parms;

	this->ProcessEvent ( pFnGetBossCameraSocket, &GetBossCameraSocket_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.UseAnimatedBossCamera
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::UseAnimatedBossCamera ( )
{
	static UFunction* pFnUseAnimatedBossCamera = NULL;

	if ( ! pFnUseAnimatedBossCamera )
		pFnUseAnimatedBossCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.UseAnimatedBossCamera" );

	AKFPawn_MonsterBoss_execUseAnimatedBossCamera_Parms UseAnimatedBossCamera_Parms;

	this->ProcessEvent ( pFnUseAnimatedBossCamera, &UseAnimatedBossCamera_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.SetAnimatedBossCamera
// [0x00024102] 
// Parameters infos:

void AKFPawn_MonsterBoss::SetAnimatedBossCamera ( )
{
	static UFunction* pFnSetAnimatedBossCamera = NULL;

	if ( ! pFnSetAnimatedBossCamera )
		pFnSetAnimatedBossCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.SetAnimatedBossCamera" );

	AKFPawn_MonsterBoss_execSetAnimatedBossCamera_Parms SetAnimatedBossCamera_Parms;

	this->ProcessEvent ( pFnSetAnimatedBossCamera, &SetAnimatedBossCamera_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetHealthPercent
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetHealthPercent ( )
{
	static UFunction* pFnGetHealthPercent = NULL;

	if ( ! pFnGetHealthPercent )
		pFnGetHealthPercent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetHealthPercent" );

	AKFPawn_MonsterBoss_execGetHealthPercent_Parms GetHealthPercent_Parms;

	this->ProcessEvent ( pFnGetHealthPercent, &GetHealthPercent_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.IsABoss
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_MonsterBoss::eventIsABoss ( )
{
	static UFunction* pFnIsABoss = NULL;

	if ( ! pFnIsABoss )
		pFnIsABoss = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.IsABoss" );

	AKFPawn_MonsterBoss_eventIsABoss_Parms IsABoss_Parms;

	this->ProcessEvent ( pFnIsABoss, &IsABoss_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetRandomBossCaption
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetRandomBossCaption ( )
{
	static UFunction* pFnGetRandomBossCaption = NULL;

	if ( ! pFnGetRandomBossCaption )
		pFnGetRandomBossCaption = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetRandomBossCaption" );

	AKFPawn_MonsterBoss_execGetRandomBossCaption_Parms GetRandomBossCaption_Parms;

	this->ProcessEvent ( pFnGetRandomBossCaption, &GetRandomBossCaption_Parms, NULL );
};

// Function KFGame.KFPawn_MonsterBoss.GetMonsterPawn
// [0x00020102] 
// Parameters infos:

void AKFPawn_MonsterBoss::GetMonsterPawn ( )
{
	static UFunction* pFnGetMonsterPawn = NULL;

	if ( ! pFnGetMonsterPawn )
		pFnGetMonsterPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_MonsterBoss.GetMonsterPawn" );

	AKFPawn_MonsterBoss_execGetMonsterPawn_Parms GetMonsterPawn_Parms;

	this->ProcessEvent ( pFnGetMonsterPawn, &GetMonsterPawn_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.SetModifiedGameDifficulty
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventSetModifiedGameDifficulty ( )
{
	static UFunction* pFnSetModifiedGameDifficulty = NULL;

	if ( ! pFnSetModifiedGameDifficulty )
		pFnSetModifiedGameDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.SetModifiedGameDifficulty" );

	AKFGameReplicationInfo_eventSetModifiedGameDifficulty_Parms SetModifiedGameDifficulty_Parms;

	this->ProcessEvent ( pFnSetModifiedGameDifficulty, &SetModifiedGameDifficulty_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetModifiedGameDifficulty
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventGetModifiedGameDifficulty ( )
{
	static UFunction* pFnGetModifiedGameDifficulty = NULL;

	if ( ! pFnGetModifiedGameDifficulty )
		pFnGetModifiedGameDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetModifiedGameDifficulty" );

	AKFGameReplicationInfo_eventGetModifiedGameDifficulty_Parms GetModifiedGameDifficulty_Parms;

	this->ProcessEvent ( pFnGetModifiedGameDifficulty, &GetModifiedGameDifficulty_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetMapObjectiveSpawnRateMod
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::GetMapObjectiveSpawnRateMod ( )
{
	static UFunction* pFnGetMapObjectiveSpawnRateMod = NULL;

	if ( ! pFnGetMapObjectiveSpawnRateMod )
		pFnGetMapObjectiveSpawnRateMod = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetMapObjectiveSpawnRateMod" );

	AKFGameReplicationInfo_execGetMapObjectiveSpawnRateMod_Parms GetMapObjectiveSpawnRateMod_Parms;

	this->ProcessEvent ( pFnGetMapObjectiveSpawnRateMod, &GetMapObjectiveSpawnRateMod_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.Timer_ActivateObjective
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::Timer_ActivateObjective ( )
{
	static UFunction* pFnTimer_ActivateObjective = NULL;

	if ( ! pFnTimer_ActivateObjective )
		pFnTimer_ActivateObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.Timer_ActivateObjective" );

	AKFGameReplicationInfo_execTimer_ActivateObjective_Parms Timer_ActivateObjective_Parms;

	this->ProcessEvent ( pFnTimer_ActivateObjective, &Timer_ActivateObjective_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ClearPreviousObjective
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::ClearPreviousObjective ( )
{
	static UFunction* pFnClearPreviousObjective = NULL;

	if ( ! pFnClearPreviousObjective )
		pFnClearPreviousObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ClearPreviousObjective" );

	AKFGameReplicationInfo_execClearPreviousObjective_Parms ClearPreviousObjective_Parms;

	this->ProcessEvent ( pFnClearPreviousObjective, &ClearPreviousObjective_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.DeactivateObjective
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::DeactivateObjective ( )
{
	static UFunction* pFnDeactivateObjective = NULL;

	if ( ! pFnDeactivateObjective )
		pFnDeactivateObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.DeactivateObjective" );

	AKFGameReplicationInfo_execDeactivateObjective_Parms DeactivateObjective_Parms;

	this->ProcessEvent ( pFnDeactivateObjective, &DeactivateObjective_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ActivateObjective
// [0x00024002] 
// Parameters infos:

void AKFGameReplicationInfo::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ActivateObjective" );

	AKFGameReplicationInfo_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.AttemptObjectiveActivation
// [0x00024002] 
// Parameters infos:

void AKFGameReplicationInfo::AttemptObjectiveActivation ( )
{
	static UFunction* pFnAttemptObjectiveActivation = NULL;

	if ( ! pFnAttemptObjectiveActivation )
		pFnAttemptObjectiveActivation = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.AttemptObjectiveActivation" );

	AKFGameReplicationInfo_execAttemptObjectiveActivation_Parms AttemptObjectiveActivation_Parms;

	this->ProcessEvent ( pFnAttemptObjectiveActivation, &AttemptObjectiveActivation_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.StartNextRandomObjective
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::StartNextRandomObjective ( )
{
	static UFunction* pFnStartNextRandomObjective = NULL;

	if ( ! pFnStartNextRandomObjective )
		pFnStartNextRandomObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.StartNextRandomObjective" );

	AKFGameReplicationInfo_execStartNextRandomObjective_Parms StartNextRandomObjective_Parms;

	this->ProcessEvent ( pFnStartNextRandomObjective, &StartNextRandomObjective_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetPresetObjectiveLength
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::GetPresetObjectiveLength ( )
{
	static UFunction* pFnGetPresetObjectiveLength = NULL;

	if ( ! pFnGetPresetObjectiveLength )
		pFnGetPresetObjectiveLength = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetPresetObjectiveLength" );

	AKFGameReplicationInfo_execGetPresetObjectiveLength_Parms GetPresetObjectiveLength_Parms;

	this->ProcessEvent ( pFnGetPresetObjectiveLength, &GetPresetObjectiveLength_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.StartNextPresetObjective
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::StartNextPresetObjective ( )
{
	static UFunction* pFnStartNextPresetObjective = NULL;

	if ( ! pFnStartNextPresetObjective )
		pFnStartNextPresetObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.StartNextPresetObjective" );

	AKFGameReplicationInfo_execStartNextPresetObjective_Parms StartNextPresetObjective_Parms;

	this->ProcessEvent ( pFnStartNextPresetObjective, &StartNextPresetObjective_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.StartNextObjective
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::StartNextObjective ( )
{
	static UFunction* pFnStartNextObjective = NULL;

	if ( ! pFnStartNextObjective )
		pFnStartNextObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.StartNextObjective" );

	AKFGameReplicationInfo_execStartNextObjective_Parms StartNextObjective_Parms;

	this->ProcessEvent ( pFnStartNextObjective, &StartNextObjective_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.IsStatsSessionValid
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventIsStatsSessionValid ( )
{
	static UFunction* pFnIsStatsSessionValid = NULL;

	if ( ! pFnIsStatsSessionValid )
		pFnIsStatsSessionValid = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.IsStatsSessionValid" );

	AKFGameReplicationInfo_eventIsStatsSessionValid_Parms IsStatsSessionValid_Parms;

	this->ProcessEvent ( pFnIsStatsSessionValid, &IsStatsSessionValid_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.AreTeamsOutOfBalanced
// [0x00020100] 
// Parameters infos:

void AKFGameReplicationInfo::AreTeamsOutOfBalanced ( )
{
	static UFunction* pFnAreTeamsOutOfBalanced = NULL;

	if ( ! pFnAreTeamsOutOfBalanced )
		pFnAreTeamsOutOfBalanced = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.AreTeamsOutOfBalanced" );

	AKFGameReplicationInfo_execAreTeamsOutOfBalanced_Parms AreTeamsOutOfBalanced_Parms;

	this->ProcessEvent ( pFnAreTeamsOutOfBalanced, &AreTeamsOutOfBalanced_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetCurrentRoundNumber
// [0x00020000] 
// Parameters infos:

void AKFGameReplicationInfo::GetCurrentRoundNumber ( )
{
	static UFunction* pFnGetCurrentRoundNumber = NULL;

	if ( ! pFnGetCurrentRoundNumber )
		pFnGetCurrentRoundNumber = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetCurrentRoundNumber" );

	AKFGameReplicationInfo_execGetCurrentRoundNumber_Parms GetCurrentRoundNumber_Parms;

	this->ProcessEvent ( pFnGetCurrentRoundNumber, &GetCurrentRoundNumber_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.NotifyGameUnranked
// [0x00040803] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventNotifyGameUnranked ( )
{
	static UFunction* pFnNotifyGameUnranked = NULL;

	if ( ! pFnNotifyGameUnranked )
		pFnNotifyGameUnranked = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.NotifyGameUnranked" );

	AKFGameReplicationInfo_eventNotifyGameUnranked_Parms NotifyGameUnranked_Parms;

	this->ProcessEvent ( pFnNotifyGameUnranked, &NotifyGameUnranked_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ReceiveVoteMap
// [0x002200C2] 
// Parameters infos:

void AKFGameReplicationInfo::ReceiveVoteMap ( )
{
	static UFunction* pFnReceiveVoteMap = NULL;

	if ( ! pFnReceiveVoteMap )
		pFnReceiveVoteMap = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ReceiveVoteMap" );

	AKFGameReplicationInfo_execReceiveVoteMap_Parms ReceiveVoteMap_Parms;

	this->ProcessEvent ( pFnReceiveVoteMap, &ReceiveVoteMap_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.RecieveVoteKick
// [0x002200C2] 
// Parameters infos:

void AKFGameReplicationInfo::RecieveVoteKick ( )
{
	static UFunction* pFnRecieveVoteKick = NULL;

	if ( ! pFnRecieveVoteKick )
		pFnRecieveVoteKick = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.RecieveVoteKick" );

	AKFGameReplicationInfo_execRecieveVoteKick_Parms RecieveVoteKick_Parms;

	this->ProcessEvent ( pFnRecieveVoteKick, &RecieveVoteKick_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ServerStartVoteKick
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::ServerStartVoteKick ( )
{
	static UFunction* pFnServerStartVoteKick = NULL;

	if ( ! pFnServerStartVoteKick )
		pFnServerStartVoteKick = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ServerStartVoteKick" );

	AKFGameReplicationInfo_execServerStartVoteKick_Parms ServerStartVoteKick_Parms;

	this->ProcessEvent ( pFnServerStartVoteKick, &ServerStartVoteKick_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ForceNewMusicTrack
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::ForceNewMusicTrack ( )
{
	static UFunction* pFnForceNewMusicTrack = NULL;

	if ( ! pFnForceNewMusicTrack )
		pFnForceNewMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ForceNewMusicTrack" );

	AKFGameReplicationInfo_execForceNewMusicTrack_Parms ForceNewMusicTrack_Parms;

	this->ProcessEvent ( pFnForceNewMusicTrack, &ForceNewMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.PlayNewMusicTrack
// [0x00024102] 
// Parameters infos:

void AKFGameReplicationInfo::PlayNewMusicTrack ( )
{
	static UFunction* pFnPlayNewMusicTrack = NULL;

	if ( ! pFnPlayNewMusicTrack )
		pFnPlayNewMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.PlayNewMusicTrack" );

	AKFGameReplicationInfo_execPlayNewMusicTrack_Parms PlayNewMusicTrack_Parms;

	this->ProcessEvent ( pFnPlayNewMusicTrack, &PlayNewMusicTrack_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.UpdateMusicTrack
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameReplicationInfo::UpdateMusicTrack ( )
{
	static UFunction* pFnUpdateMusicTrack = NULL;

	if ( ! pFnUpdateMusicTrack )
		pFnUpdateMusicTrack = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.UpdateMusicTrack" );

	AKFGameReplicationInfo_execUpdateMusicTrack_Parms UpdateMusicTrack_Parms;

	pFnUpdateMusicTrack->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateMusicTrack, &UpdateMusicTrack_Parms, NULL );

	pFnUpdateMusicTrack->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameReplicationInfo.UpdateHumanList
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::UpdateHumanList ( )
{
	static UFunction* pFnUpdateHumanList = NULL;

	if ( ! pFnUpdateHumanList )
		pFnUpdateHumanList = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.UpdateHumanList" );

	AKFGameReplicationInfo_execUpdateHumanList_Parms UpdateHumanList_Parms;

	this->ProcessEvent ( pFnUpdateHumanList, &UpdateHumanList_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.UpdateZedList
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::UpdateZedList ( )
{
	static UFunction* pFnUpdateZedList = NULL;

	if ( ! pFnUpdateZedList )
		pFnUpdateZedList = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.UpdateZedList" );

	AKFGameReplicationInfo_execUpdateZedList_Parms UpdateZedList_Parms;

	this->ProcessEvent ( pFnUpdateZedList, &UpdateZedList_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.UpdateSpawnVolumes
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::UpdateSpawnVolumes ( )
{
	static UFunction* pFnUpdateSpawnVolumes = NULL;

	if ( ! pFnUpdateSpawnVolumes )
		pFnUpdateSpawnVolumes = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.UpdateSpawnVolumes" );

	AKFGameReplicationInfo_execUpdateSpawnVolumes_Parms UpdateSpawnVolumes_Parms;

	this->ProcessEvent ( pFnUpdateSpawnVolumes, &UpdateSpawnVolumes_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.UpdatePickupList
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::UpdatePickupList ( )
{
	static UFunction* pFnUpdatePickupList = NULL;

	if ( ! pFnUpdatePickupList )
		pFnUpdatePickupList = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.UpdatePickupList" );

	AKFGameReplicationInfo_execUpdatePickupList_Parms UpdatePickupList_Parms;

	this->ProcessEvent ( pFnUpdatePickupList, &UpdatePickupList_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.Tick" );

	AKFGameReplicationInfo_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.AddFailedSpawn
// [0x00024002] 
// Parameters infos:

void AKFGameReplicationInfo::AddFailedSpawn ( )
{
	static UFunction* pFnAddFailedSpawn = NULL;

	if ( ! pFnAddFailedSpawn )
		pFnAddFailedSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.AddFailedSpawn" );

	AKFGameReplicationInfo_execAddFailedSpawn_Parms AddFailedSpawn_Parms;

	this->ProcessEvent ( pFnAddFailedSpawn, &AddFailedSpawn_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.AddRecentSpawnVolume
// [0x00024002] 
// Parameters infos:

void AKFGameReplicationInfo::AddRecentSpawnVolume ( )
{
	static UFunction* pFnAddRecentSpawnVolume = NULL;

	if ( ! pFnAddRecentSpawnVolume )
		pFnAddRecentSpawnVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.AddRecentSpawnVolume" );

	AKFGameReplicationInfo_execAddRecentSpawnVolume_Parms AddRecentSpawnVolume_Parms;

	this->ProcessEvent ( pFnAddRecentSpawnVolume, &AddRecentSpawnVolume_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.AnyPlayersAlive
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::AnyPlayersAlive ( )
{
	static UFunction* pFnAnyPlayersAlive = NULL;

	if ( ! pFnAnyPlayersAlive )
		pFnAnyPlayersAlive = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.AnyPlayersAlive" );

	AKFGameReplicationInfo_execAnyPlayersAlive_Parms AnyPlayersAlive_Parms;

	this->ProcessEvent ( pFnAnyPlayersAlive, &AnyPlayersAlive_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetNumPlayersAlive
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::GetNumPlayersAlive ( )
{
	static UFunction* pFnGetNumPlayersAlive = NULL;

	if ( ! pFnGetNumPlayersAlive )
		pFnGetNumPlayersAlive = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetNumPlayersAlive" );

	AKFGameReplicationInfo_execGetNumPlayersAlive_Parms GetNumPlayersAlive_Parms;

	this->ProcessEvent ( pFnGetNumPlayersAlive, &GetNumPlayersAlive_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetNumPlayers
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::GetNumPlayers ( )
{
	static UFunction* pFnGetNumPlayers = NULL;

	if ( ! pFnGetNumPlayers )
		pFnGetNumPlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetNumPlayers" );

	AKFGameReplicationInfo_execGetNumPlayers_Parms GetNumPlayers_Parms;

	this->ProcessEvent ( pFnGetNumPlayers, &GetNumPlayers_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.DisplayDebug
// [0x00420102] 
// Parameters infos:

void AKFGameReplicationInfo::DisplayDebug ( )
{
	static UFunction* pFnDisplayDebug = NULL;

	if ( ! pFnDisplayDebug )
		pFnDisplayDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.DisplayDebug" );

	AKFGameReplicationInfo_execDisplayDebug_Parms DisplayDebug_Parms;

	this->ProcessEvent ( pFnDisplayDebug, &DisplayDebug_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.CanChangePerks
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventCanChangePerks ( )
{
	static UFunction* pFnCanChangePerks = NULL;

	if ( ! pFnCanChangePerks )
		pFnCanChangePerks = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.CanChangePerks" );

	AKFGameReplicationInfo_eventCanChangePerks_Parms CanChangePerks_Parms;

	this->ProcessEvent ( pFnCanChangePerks, &CanChangePerks_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.RemovePRI
// [0x00820102] 
// Parameters infos:

void AKFGameReplicationInfo::RemovePRI ( )
{
	static UFunction* pFnRemovePRI = NULL;

	if ( ! pFnRemovePRI )
		pFnRemovePRI = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.RemovePRI" );

	AKFGameReplicationInfo_execRemovePRI_Parms RemovePRI_Parms;

	this->ProcessEvent ( pFnRemovePRI, &RemovePRI_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.Timer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.Timer" );

	AKFGameReplicationInfo_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.IsEndlessWave
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::IsEndlessWave ( )
{
	static UFunction* pFnIsEndlessWave = NULL;

	if ( ! pFnIsEndlessWave )
		pFnIsEndlessWave = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.IsEndlessWave" );

	AKFGameReplicationInfo_execIsEndlessWave_Parms IsEndlessWave_Parms;

	this->ProcessEvent ( pFnIsEndlessWave, &IsEndlessWave_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.IsWeeklyWave
// [0x00420102] 
// Parameters infos:

void AKFGameReplicationInfo::IsWeeklyWave ( )
{
	static UFunction* pFnIsWeeklyWave = NULL;

	if ( ! pFnIsWeeklyWave )
		pFnIsWeeklyWave = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.IsWeeklyWave" );

	AKFGameReplicationInfo_execIsWeeklyWave_Parms IsWeeklyWave_Parms;

	this->ProcessEvent ( pFnIsWeeklyWave, &IsWeeklyWave_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.IsSpecialWave
// [0x00420102] 
// Parameters infos:

void AKFGameReplicationInfo::IsSpecialWave ( )
{
	static UFunction* pFnIsSpecialWave = NULL;

	if ( ! pFnIsSpecialWave )
		pFnIsSpecialWave = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.IsSpecialWave" );

	AKFGameReplicationInfo_execIsSpecialWave_Parms IsSpecialWave_Parms;

	this->ProcessEvent ( pFnIsSpecialWave, &IsSpecialWave_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.IsBossWaveNext
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::IsBossWaveNext ( )
{
	static UFunction* pFnIsBossWaveNext = NULL;

	if ( ! pFnIsBossWaveNext )
		pFnIsBossWaveNext = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.IsBossWaveNext" );

	AKFGameReplicationInfo_execIsBossWaveNext_Parms IsBossWaveNext_Parms;

	this->ProcessEvent ( pFnIsBossWaveNext, &IsBossWaveNext_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.IsInfiniteWave
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::IsInfiniteWave ( )
{
	static UFunction* pFnIsInfiniteWave = NULL;

	if ( ! pFnIsInfiniteWave )
		pFnIsInfiniteWave = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.IsInfiniteWave" );

	AKFGameReplicationInfo_execIsInfiniteWave_Parms IsInfiniteWave_Parms;

	this->ProcessEvent ( pFnIsInfiniteWave, &IsInfiniteWave_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.IsBossWave
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::IsBossWave ( )
{
	static UFunction* pFnIsBossWave = NULL;

	if ( ! pFnIsBossWave )
		pFnIsBossWave = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.IsBossWave" );

	AKFGameReplicationInfo_execIsBossWave_Parms IsBossWave_Parms;

	this->ProcessEvent ( pFnIsBossWave, &IsBossWave_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.IsFinalWave
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::IsFinalWave ( )
{
	static UFunction* pFnIsFinalWave = NULL;

	if ( ! pFnIsFinalWave )
		pFnIsFinalWave = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.IsFinalWave" );

	AKFGameReplicationInfo_execIsFinalWave_Parms IsFinalWave_Parms;

	this->ProcessEvent ( pFnIsFinalWave, &IsFinalWave_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.SetWaveActive
// [0x00024002] 
// Parameters infos:

void AKFGameReplicationInfo::SetWaveActive ( )
{
	static UFunction* pFnSetWaveActive = NULL;

	if ( ! pFnSetWaveActive )
		pFnSetWaveActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.SetWaveActive" );

	AKFGameReplicationInfo_execSetWaveActive_Parms SetWaveActive_Parms;

	this->ProcessEvent ( pFnSetWaveActive, &SetWaveActive_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetNextMapTimeRemaining
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::GetNextMapTimeRemaining ( )
{
	static UFunction* pFnGetNextMapTimeRemaining = NULL;

	if ( ! pFnGetNextMapTimeRemaining )
		pFnGetNextMapTimeRemaining = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetNextMapTimeRemaining" );

	AKFGameReplicationInfo_execGetNextMapTimeRemaining_Parms GetNextMapTimeRemaining_Parms;

	this->ProcessEvent ( pFnGetNextMapTimeRemaining, &GetNextMapTimeRemaining_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.SendPlayfabGameTimeUpdate
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventSendPlayfabGameTimeUpdate ( )
{
	static UFunction* pFnSendPlayfabGameTimeUpdate = NULL;

	if ( ! pFnSendPlayfabGameTimeUpdate )
		pFnSendPlayfabGameTimeUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.SendPlayfabGameTimeUpdate" );

	AKFGameReplicationInfo_eventSendPlayfabGameTimeUpdate_Parms SendPlayfabGameTimeUpdate_Parms;

	this->ProcessEvent ( pFnSendPlayfabGameTimeUpdate, &SendPlayfabGameTimeUpdate_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ProcessChanceDrop
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::ProcessChanceDrop ( )
{
	static UFunction* pFnProcessChanceDrop = NULL;

	if ( ! pFnProcessChanceDrop )
		pFnProcessChanceDrop = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ProcessChanceDrop" );

	AKFGameReplicationInfo_execProcessChanceDrop_Parms ProcessChanceDrop_Parms;

	this->ProcessEvent ( pFnProcessChanceDrop, &ProcessChanceDrop_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.OnOpenAfterActionReport
// [0x00024102] 
// Parameters infos:

void AKFGameReplicationInfo::OnOpenAfterActionReport ( )
{
	static UFunction* pFnOnOpenAfterActionReport = NULL;

	if ( ! pFnOnOpenAfterActionReport )
		pFnOnOpenAfterActionReport = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.OnOpenAfterActionReport" );

	AKFGameReplicationInfo_execOnOpenAfterActionReport_Parms OnOpenAfterActionReport_Parms;

	this->ProcessEvent ( pFnOnOpenAfterActionReport, &OnOpenAfterActionReport_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetHeartbeatAccumulatorAmount
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::GetHeartbeatAccumulatorAmount ( )
{
	static UFunction* pFnGetHeartbeatAccumulatorAmount = NULL;

	if ( ! pFnGetHeartbeatAccumulatorAmount )
		pFnGetHeartbeatAccumulatorAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetHeartbeatAccumulatorAmount" );

	AKFGameReplicationInfo_execGetHeartbeatAccumulatorAmount_Parms GetHeartbeatAccumulatorAmount_Parms;

	this->ProcessEvent ( pFnGetHeartbeatAccumulatorAmount, &GetHeartbeatAccumulatorAmount_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.TriggerClientWaveStartEvents
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::TriggerClientWaveStartEvents ( )
{
	static UFunction* pFnTriggerClientWaveStartEvents = NULL;

	if ( ! pFnTriggerClientWaveStartEvents )
		pFnTriggerClientWaveStartEvents = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.TriggerClientWaveStartEvents" );

	AKFGameReplicationInfo_execTriggerClientWaveStartEvents_Parms TriggerClientWaveStartEvents_Parms;

	this->ProcessEvent ( pFnTriggerClientWaveStartEvents, &TriggerClientWaveStartEvents_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetTraderTimeRemaining
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::GetTraderTimeRemaining ( )
{
	static UFunction* pFnGetTraderTimeRemaining = NULL;

	if ( ! pFnGetTraderTimeRemaining )
		pFnGetTraderTimeRemaining = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetTraderTimeRemaining" );

	AKFGameReplicationInfo_execGetTraderTimeRemaining_Parms GetTraderTimeRemaining_Parms;

	this->ProcessEvent ( pFnGetTraderTimeRemaining, &GetTraderTimeRemaining_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.CloseTrader
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::CloseTrader ( )
{
	static UFunction* pFnCloseTrader = NULL;

	if ( ! pFnCloseTrader )
		pFnCloseTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.CloseTrader" );

	AKFGameReplicationInfo_execCloseTrader_Parms CloseTrader_Parms;

	this->ProcessEvent ( pFnCloseTrader, &CloseTrader_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.OpenTraderNext
// [0x00024102] 
// Parameters infos:

void AKFGameReplicationInfo::OpenTraderNext ( )
{
	static UFunction* pFnOpenTraderNext = NULL;

	if ( ! pFnOpenTraderNext )
		pFnOpenTraderNext = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.OpenTraderNext" );

	AKFGameReplicationInfo_execOpenTraderNext_Parms OpenTraderNext_Parms;

	this->ProcessEvent ( pFnOpenTraderNext, &OpenTraderNext_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.OpenTrader
// [0x00024102] 
// Parameters infos:

void AKFGameReplicationInfo::OpenTrader ( )
{
	static UFunction* pFnOpenTrader = NULL;

	if ( ! pFnOpenTrader )
		pFnOpenTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.OpenTrader" );

	AKFGameReplicationInfo_execOpenTrader_Parms OpenTrader_Parms;

	this->ProcessEvent ( pFnOpenTrader, &OpenTrader_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.StartScavengeTime
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfo::StartScavengeTime ( )
{
	static UFunction* pFnStartScavengeTime = NULL;

	if ( ! pFnStartScavengeTime )
		pFnStartScavengeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.StartScavengeTime" );

	AKFGameReplicationInfo_execStartScavengeTime_Parms StartScavengeTime_Parms;

	this->ProcessEvent ( pFnStartScavengeTime, &StartScavengeTime_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.FadeOutLingeringExplosions
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::FadeOutLingeringExplosions ( )
{
	static UFunction* pFnFadeOutLingeringExplosions = NULL;

	if ( ! pFnFadeOutLingeringExplosions )
		pFnFadeOutLingeringExplosions = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.FadeOutLingeringExplosions" );

	AKFGameReplicationInfo_execFadeOutLingeringExplosions_Parms FadeOutLingeringExplosions_Parms;

	this->ProcessEvent ( pFnFadeOutLingeringExplosions, &FadeOutLingeringExplosions_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetKFPRIArray
// [0x00424102] 
// Parameters infos:

void AKFGameReplicationInfo::GetKFPRIArray ( )
{
	static UFunction* pFnGetKFPRIArray = NULL;

	if ( ! pFnGetKFPRIArray )
		pFnGetKFPRIArray = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetKFPRIArray" );

	AKFGameReplicationInfo_execGetKFPRIArray_Parms GetKFPRIArray_Parms;

	this->ProcessEvent ( pFnGetKFPRIArray, &GetKFPRIArray_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ShowPreGameServerWelcomeScreen
// [0x010203C2] ( FUNC_Exec )
// Parameters infos:

void AKFGameReplicationInfo::ShowPreGameServerWelcomeScreen ( )
{
	static UFunction* pFnShowPreGameServerWelcomeScreen = NULL;

	if ( ! pFnShowPreGameServerWelcomeScreen )
		pFnShowPreGameServerWelcomeScreen = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ShowPreGameServerWelcomeScreen" );

	AKFGameReplicationInfo_execShowPreGameServerWelcomeScreen_Parms ShowPreGameServerWelcomeScreen_Parms;

	this->ProcessEvent ( pFnShowPreGameServerWelcomeScreen, &ShowPreGameServerWelcomeScreen_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.EndGame
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::EndGame ( )
{
	static UFunction* pFnEndGame = NULL;

	if ( ! pFnEndGame )
		pFnEndGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.EndGame" );

	AKFGameReplicationInfo_execEndGame_Parms EndGame_Parms;

	this->ProcessEvent ( pFnEndGame, &EndGame_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.NotifyWaveStart
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::NotifyWaveStart ( )
{
	static UFunction* pFnNotifyWaveStart = NULL;

	if ( ! pFnNotifyWaveStart )
		pFnNotifyWaveStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.NotifyWaveStart" );

	AKFGameReplicationInfo_execNotifyWaveStart_Parms NotifyWaveStart_Parms;

	this->ProcessEvent ( pFnNotifyWaveStart, &NotifyWaveStart_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.NotifyWaveEnded
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::NotifyWaveEnded ( )
{
	static UFunction* pFnNotifyWaveEnded = NULL;

	if ( ! pFnNotifyWaveEnded )
		pFnNotifyWaveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.NotifyWaveEnded" );

	AKFGameReplicationInfo_execNotifyWaveEnded_Parms NotifyWaveEnded_Parms;

	this->ProcessEvent ( pFnNotifyWaveEnded, &NotifyWaveEnded_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.UpdateHUDWaveCount
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::UpdateHUDWaveCount ( )
{
	static UFunction* pFnUpdateHUDWaveCount = NULL;

	if ( ! pFnUpdateHUDWaveCount )
		pFnUpdateHUDWaveCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.UpdateHUDWaveCount" );

	AKFGameReplicationInfo_execUpdateHUDWaveCount_Parms UpdateHUDWaveCount_Parms;

	this->ProcessEvent ( pFnUpdateHUDWaveCount, &UpdateHUDWaveCount_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.SetCachedBossArchetype
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameReplicationInfo::SetCachedBossArchetype ( )
{
	static UFunction* pFnSetCachedBossArchetype = NULL;

	if ( ! pFnSetCachedBossArchetype )
		pFnSetCachedBossArchetype = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.SetCachedBossArchetype" );

	AKFGameReplicationInfo_execSetCachedBossArchetype_Parms SetCachedBossArchetype_Parms;

	pFnSetCachedBossArchetype->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetCachedBossArchetype, &SetCachedBossArchetype_Parms, NULL );

	pFnSetCachedBossArchetype->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameReplicationInfo.CacheSelectedBoss
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::CacheSelectedBoss ( )
{
	static UFunction* pFnCacheSelectedBoss = NULL;

	if ( ! pFnCacheSelectedBoss )
		pFnCacheSelectedBoss = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.CacheSelectedBoss" );

	AKFGameReplicationInfo_execCacheSelectedBoss_Parms CacheSelectedBoss_Parms;

	this->ProcessEvent ( pFnCacheSelectedBoss, &CacheSelectedBoss_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ReceivedGameClass
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::ReceivedGameClass ( )
{
	static UFunction* pFnReceivedGameClass = NULL;

	if ( ! pFnReceivedGameClass )
		pFnReceivedGameClass = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ReceivedGameClass" );

	AKFGameReplicationInfo_execReceivedGameClass_Parms ReceivedGameClass_Parms;

	this->ProcessEvent ( pFnReceivedGameClass, &ReceivedGameClass_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.GetKFSeqEventLevelLoadedIndices
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::GetKFSeqEventLevelLoadedIndices ( )
{
	static UFunction* pFnGetKFSeqEventLevelLoadedIndices = NULL;

	if ( ! pFnGetKFSeqEventLevelLoadedIndices )
		pFnGetKFSeqEventLevelLoadedIndices = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.GetKFSeqEventLevelLoadedIndices" );

	AKFGameReplicationInfo_execGetKFSeqEventLevelLoadedIndices_Parms GetKFSeqEventLevelLoadedIndices_Parms;

	this->ProcessEvent ( pFnGetKFSeqEventLevelLoadedIndices, &GetKFSeqEventLevelLoadedIndices_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ActivateLevelLoadedEvents
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo::ActivateLevelLoadedEvents ( )
{
	static UFunction* pFnActivateLevelLoadedEvents = NULL;

	if ( ! pFnActivateLevelLoadedEvents )
		pFnActivateLevelLoadedEvents = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ActivateLevelLoadedEvents" );

	AKFGameReplicationInfo_execActivateLevelLoadedEvents_Parms ActivateLevelLoadedEvents_Parms;

	this->ProcessEvent ( pFnActivateLevelLoadedEvents, &ActivateLevelLoadedEvents_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.PostBeginPlay" );

	AKFGameReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfo::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.ReplicatedEvent" );

	AKFGameReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFGameReplicationInfo.EndOfWave
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFGameReplicationInfo::EndOfWave ( )
{
	static UFunction* pFnEndOfWave = NULL;

	if ( ! pFnEndOfWave )
		pFnEndOfWave = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.EndOfWave" );

	AKFGameReplicationInfo_execEndOfWave_Parms EndOfWave_Parms;

	pFnEndOfWave->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnEndOfWave, &EndOfWave_Parms, NULL );

	pFnEndOfWave->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameReplicationInfo.SendSteamRequestItemDrop
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameReplicationInfo::SendSteamRequestItemDrop ( )
{
	static UFunction* pFnSendSteamRequestItemDrop = NULL;

	if ( ! pFnSendSteamRequestItemDrop )
		pFnSendSteamRequestItemDrop = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.SendSteamRequestItemDrop" );

	AKFGameReplicationInfo_execSendSteamRequestItemDrop_Parms SendSteamRequestItemDrop_Parms;

	pFnSendSteamRequestItemDrop->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendSteamRequestItemDrop, &SendSteamRequestItemDrop_Parms, NULL );

	pFnSendSteamRequestItemDrop->FunctionFlags |= 0x400;
};

// Function KFGame.KFGameReplicationInfo.SendSteamHeartbeat
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFGameReplicationInfo::SendSteamHeartbeat ( )
{
	static UFunction* pFnSendSteamHeartbeat = NULL;

	if ( ! pFnSendSteamHeartbeat )
		pFnSendSteamHeartbeat = UObject::FindObject< UFunction > ( "Function KFGame.KFGameReplicationInfo.SendSteamHeartbeat" );

	AKFGameReplicationInfo_execSendSteamHeartbeat_Parms SendSteamHeartbeat_Parms;

	pFnSendSteamHeartbeat->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSendSteamHeartbeat, &SendSteamHeartbeat_Parms, NULL );

	pFnSendSteamHeartbeat->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.GetCurrentIconToDisplay
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::GetCurrentIconToDisplay ( )
{
	static UFunction* pFnGetCurrentIconToDisplay = NULL;

	if ( ! pFnGetCurrentIconToDisplay )
		pFnGetCurrentIconToDisplay = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.GetCurrentIconToDisplay" );

	AKFPlayerReplicationInfo_execGetCurrentIconToDisplay_Parms GetCurrentIconToDisplay_Parms;

	this->ProcessEvent ( pFnGetCurrentIconToDisplay, &GetCurrentIconToDisplay_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ClearVoiceCommsRequest
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::ClearVoiceCommsRequest ( )
{
	static UFunction* pFnClearVoiceCommsRequest = NULL;

	if ( ! pFnClearVoiceCommsRequest )
		pFnClearVoiceCommsRequest = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ClearVoiceCommsRequest" );

	AKFPlayerReplicationInfo_execClearVoiceCommsRequest_Parms ClearVoiceCommsRequest_Parms;

	this->ProcessEvent ( pFnClearVoiceCommsRequest, &ClearVoiceCommsRequest_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.SetCurrentIconToVoiceCommsIcon
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::SetCurrentIconToVoiceCommsIcon ( )
{
	static UFunction* pFnSetCurrentIconToVoiceCommsIcon = NULL;

	if ( ! pFnSetCurrentIconToVoiceCommsIcon )
		pFnSetCurrentIconToVoiceCommsIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.SetCurrentIconToVoiceCommsIcon" );

	AKFPlayerReplicationInfo_execSetCurrentIconToVoiceCommsIcon_Parms SetCurrentIconToVoiceCommsIcon_Parms;

	this->ProcessEvent ( pFnSetCurrentIconToVoiceCommsIcon, &SetCurrentIconToVoiceCommsIcon_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.SetCurrentIconToPerkIcon
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::SetCurrentIconToPerkIcon ( )
{
	static UFunction* pFnSetCurrentIconToPerkIcon = NULL;

	if ( ! pFnSetCurrentIconToPerkIcon )
		pFnSetCurrentIconToPerkIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.SetCurrentIconToPerkIcon" );

	AKFPlayerReplicationInfo_execSetCurrentIconToPerkIcon_Parms SetCurrentIconToPerkIcon_Parms;

	this->ProcessEvent ( pFnSetCurrentIconToPerkIcon, &SetCurrentIconToPerkIcon_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.SetCurrentVoiceCommsRequest
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::SetCurrentVoiceCommsRequest ( )
{
	static UFunction* pFnSetCurrentVoiceCommsRequest = NULL;

	if ( ! pFnSetCurrentVoiceCommsRequest )
		pFnSetCurrentVoiceCommsRequest = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.SetCurrentVoiceCommsRequest" );

	AKFPlayerReplicationInfo_execSetCurrentVoiceCommsRequest_Parms SetCurrentVoiceCommsRequest_Parms;

	this->ProcessEvent ( pFnSetCurrentVoiceCommsRequest, &SetCurrentVoiceCommsRequest_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.HasHadInitialSpawn
// [0x00020500] ( FUNC_Native )
// Parameters infos:

void AKFPlayerReplicationInfo::HasHadInitialSpawn ( )
{
	static UFunction* pFnHasHadInitialSpawn = NULL;

	if ( ! pFnHasHadInitialSpawn )
		pFnHasHadInitialSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.HasHadInitialSpawn" );

	AKFPlayerReplicationInfo_execHasHadInitialSpawn_Parms HasHadInitialSpawn_Parms;

	pFnHasHadInitialSpawn->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHasHadInitialSpawn, &HasHadInitialSpawn_Parms, NULL );

	pFnHasHadInitialSpawn->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.NotifyWaveStart
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::NotifyWaveStart ( )
{
	static UFunction* pFnNotifyWaveStart = NULL;

	if ( ! pFnNotifyWaveStart )
		pFnNotifyWaveStart = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.NotifyWaveStart" );

	AKFPlayerReplicationInfo_execNotifyWaveStart_Parms NotifyWaveStart_Parms;

	this->ProcessEvent ( pFnNotifyWaveStart, &NotifyWaveStart_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.NotifyWaveEnded
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::NotifyWaveEnded ( )
{
	static UFunction* pFnNotifyWaveEnded = NULL;

	if ( ! pFnNotifyWaveEnded )
		pFnNotifyWaveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.NotifyWaveEnded" );

	AKFPlayerReplicationInfo_execNotifyWaveEnded_Parms NotifyWaveEnded_Parms;

	this->ProcessEvent ( pFnNotifyWaveEnded, &NotifyWaveEnded_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ResetSupplierUsed
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::ResetSupplierUsed ( )
{
	static UFunction* pFnResetSupplierUsed = NULL;

	if ( ! pFnResetSupplierUsed )
		pFnResetSupplierUsed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ResetSupplierUsed" );

	AKFPlayerReplicationInfo_execResetSupplierUsed_Parms ResetSupplierUsed_Parms;

	this->ProcessEvent ( pFnResetSupplierUsed, &ResetSupplierUsed_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.MarkSupplierUsed
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::MarkSupplierUsed ( )
{
	static UFunction* pFnMarkSupplierUsed = NULL;

	if ( ! pFnMarkSupplierUsed )
		pFnMarkSupplierUsed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.MarkSupplierUsed" );

	AKFPlayerReplicationInfo_execMarkSupplierUsed_Parms MarkSupplierUsed_Parms;

	this->ProcessEvent ( pFnMarkSupplierUsed, &MarkSupplierUsed_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.MarkSupplierOwnerUsed
// [0x010241C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::MarkSupplierOwnerUsed ( )
{
	static UFunction* pFnMarkSupplierOwnerUsed = NULL;

	if ( ! pFnMarkSupplierOwnerUsed )
		pFnMarkSupplierOwnerUsed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.MarkSupplierOwnerUsed" );

	AKFPlayerReplicationInfo_execMarkSupplierOwnerUsed_Parms MarkSupplierOwnerUsed_Parms;

	this->ProcessEvent ( pFnMarkSupplierOwnerUsed, &MarkSupplierOwnerUsed_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.IncrementDeaths
// [0x00024002] 
// Parameters infos:

void AKFPlayerReplicationInfo::IncrementDeaths ( )
{
	static UFunction* pFnIncrementDeaths = NULL;

	if ( ! pFnIncrementDeaths )
		pFnIncrementDeaths = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.IncrementDeaths" );

	AKFPlayerReplicationInfo_execIncrementDeaths_Parms IncrementDeaths_Parms;

	this->ProcessEvent ( pFnIncrementDeaths, &IncrementDeaths_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.NotifyHUDofPRIDestroyed
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::NotifyHUDofPRIDestroyed ( )
{
	static UFunction* pFnNotifyHUDofPRIDestroyed = NULL;

	if ( ! pFnNotifyHUDofPRIDestroyed )
		pFnNotifyHUDofPRIDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.NotifyHUDofPRIDestroyed" );

	AKFPlayerReplicationInfo_execNotifyHUDofPRIDestroyed_Parms NotifyHUDofPRIDestroyed_Parms;

	this->ProcessEvent ( pFnNotifyHUDofPRIDestroyed, &NotifyHUDofPRIDestroyed_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerReplicationInfo::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.Destroyed" );

	AKFPlayerReplicationInfo_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.UpdateTraderDosh
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::UpdateTraderDosh ( )
{
	static UFunction* pFnUpdateTraderDosh = NULL;

	if ( ! pFnUpdateTraderDosh )
		pFnUpdateTraderDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.UpdateTraderDosh" );

	AKFPlayerReplicationInfo_execUpdateTraderDosh_Parms UpdateTraderDosh_Parms;

	this->ProcessEvent ( pFnUpdateTraderDosh, &UpdateTraderDosh_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.AddDosh
// [0x00024002] 
// Parameters infos:

void AKFPlayerReplicationInfo::AddDosh ( )
{
	static UFunction* pFnAddDosh = NULL;

	if ( ! pFnAddDosh )
		pFnAddDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.AddDosh" );

	AKFPlayerReplicationInfo_execAddDosh_Parms AddDosh_Parms;

	this->ProcessEvent ( pFnAddDosh, &AddDosh_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerSetPlayerReady
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFPlayerReplicationInfo::ServerSetPlayerReady ( )
{
	static UFunction* pFnServerSetPlayerReady = NULL;

	if ( ! pFnServerSetPlayerReady )
		pFnServerSetPlayerReady = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerSetPlayerReady" );

	AKFPlayerReplicationInfo_execServerSetPlayerReady_Parms ServerSetPlayerReady_Parms;

	this->ProcessEvent ( pFnServerSetPlayerReady, &ServerSetPlayerReady_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.SetPlayerReady
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::SetPlayerReady ( )
{
	static UFunction* pFnSetPlayerReady = NULL;

	if ( ! pFnSetPlayerReady )
		pFnSetPlayerReady = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.SetPlayerReady" );

	AKFPlayerReplicationInfo_execSetPlayerReady_Parms SetPlayerReady_Parms;

	this->ProcessEvent ( pFnSetPlayerReady, &SetPlayerReady_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.GetSmoothedPawnIconLocation
// [0x00820102] 
// Parameters infos:

void AKFPlayerReplicationInfo::GetSmoothedPawnIconLocation ( )
{
	static UFunction* pFnGetSmoothedPawnIconLocation = NULL;

	if ( ! pFnGetSmoothedPawnIconLocation )
		pFnGetSmoothedPawnIconLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.GetSmoothedPawnIconLocation" );

	AKFPlayerReplicationInfo_execGetSmoothedPawnIconLocation_Parms GetSmoothedPawnIconLocation_Parms;

	this->ProcessEvent ( pFnGetSmoothedPawnIconLocation, &GetSmoothedPawnIconLocation_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.SetSmoothedPawnIconLocation
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::SetSmoothedPawnIconLocation ( )
{
	static UFunction* pFnSetSmoothedPawnIconLocation = NULL;

	if ( ! pFnSetSmoothedPawnIconLocation )
		pFnSetSmoothedPawnIconLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.SetSmoothedPawnIconLocation" );

	AKFPlayerReplicationInfo_execSetSmoothedPawnIconLocation_Parms SetSmoothedPawnIconLocation_Parms;

	this->ProcessEvent ( pFnSetSmoothedPawnIconLocation, &SetSmoothedPawnIconLocation_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.UpdateReplicatedPlayerHealth
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::UpdateReplicatedPlayerHealth ( )
{
	static UFunction* pFnUpdateReplicatedPlayerHealth = NULL;

	if ( ! pFnUpdateReplicatedPlayerHealth )
		pFnUpdateReplicatedPlayerHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.UpdateReplicatedPlayerHealth" );

	AKFPlayerReplicationInfo_execUpdateReplicatedPlayerHealth_Parms UpdateReplicatedPlayerHealth_Parms;

	this->ProcessEvent ( pFnUpdateReplicatedPlayerHealth, &UpdateReplicatedPlayerHealth_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.UpdatePawnLocation
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::UpdatePawnLocation ( )
{
	static UFunction* pFnUpdatePawnLocation = NULL;

	if ( ! pFnUpdatePawnLocation )
		pFnUpdatePawnLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.UpdatePawnLocation" );

	AKFPlayerReplicationInfo_execUpdatePawnLocation_Parms UpdatePawnLocation_Parms;

	this->ProcessEvent ( pFnUpdatePawnLocation, &UpdatePawnLocation_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.UpdateReplicatedVariables
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::UpdateReplicatedVariables ( )
{
	static UFunction* pFnUpdateReplicatedVariables = NULL;

	if ( ! pFnUpdateReplicatedVariables )
		pFnUpdateReplicatedVariables = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.UpdateReplicatedVariables" );

	AKFPlayerReplicationInfo_execUpdateReplicatedVariables_Parms UpdateReplicatedVariables_Parms;

	this->ProcessEvent ( pFnUpdateReplicatedVariables, &UpdateReplicatedVariables_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.SetPlayerTeam
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::SetPlayerTeam ( )
{
	static UFunction* pFnSetPlayerTeam = NULL;

	if ( ! pFnSetPlayerTeam )
		pFnSetPlayerTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.SetPlayerTeam" );

	AKFPlayerReplicationInfo_execSetPlayerTeam_Parms SetPlayerTeam_Parms;

	this->ProcessEvent ( pFnSetPlayerTeam, &SetPlayerTeam_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.OverrideWith
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::OverrideWith ( )
{
	static UFunction* pFnOverrideWith = NULL;

	if ( ! pFnOverrideWith )
		pFnOverrideWith = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.OverrideWith" );

	AKFPlayerReplicationInfo_execOverrideWith_Parms OverrideWith_Parms;

	this->ProcessEvent ( pFnOverrideWith, &OverrideWith_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.Duplicate
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::Duplicate ( )
{
	static UFunction* pFnDuplicate = NULL;

	if ( ! pFnDuplicate )
		pFnDuplicate = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.Duplicate" );

	AKFPlayerReplicationInfo_execDuplicate_Parms Duplicate_Parms;

	this->ProcessEvent ( pFnDuplicate, &Duplicate_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerAnnounceNewSharedContent
// [0x002408C3] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPlayerReplicationInfo::eventServerAnnounceNewSharedContent ( )
{
	static UFunction* pFnServerAnnounceNewSharedContent = NULL;

	if ( ! pFnServerAnnounceNewSharedContent )
		pFnServerAnnounceNewSharedContent = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerAnnounceNewSharedContent" );

	AKFPlayerReplicationInfo_eventServerAnnounceNewSharedContent_Parms ServerAnnounceNewSharedContent_Parms;

	this->ProcessEvent ( pFnServerAnnounceNewSharedContent, &ServerAnnounceNewSharedContent_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.CharacterCustomizationChanged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerReplicationInfo::eventCharacterCustomizationChanged ( )
{
	static UFunction* pFnCharacterCustomizationChanged = NULL;

	if ( ! pFnCharacterCustomizationChanged )
		pFnCharacterCustomizationChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.CharacterCustomizationChanged" );

	AKFPlayerReplicationInfo_eventCharacterCustomizationChanged_Parms CharacterCustomizationChanged_Parms;

	this->ProcessEvent ( pFnCharacterCustomizationChanged, &CharacterCustomizationChanged_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.GetCharacterConfigSection
// [0x00040903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void AKFPlayerReplicationInfo::eventGetCharacterConfigSection ( )
{
	static UFunction* pFnGetCharacterConfigSection = NULL;

	if ( ! pFnGetCharacterConfigSection )
		pFnGetCharacterConfigSection = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.GetCharacterConfigSection" );

	AKFPlayerReplicationInfo_eventGetCharacterConfigSection_Parms GetCharacterConfigSection_Parms;

	this->ProcessEvent ( pFnGetCharacterConfigSection, &GetCharacterConfigSection_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.GetAnyAvailableCharacter
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerReplicationInfo::GetAnyAvailableCharacter ( )
{
	static UFunction* pFnGetAnyAvailableCharacter = NULL;

	if ( ! pFnGetAnyAvailableCharacter )
		pFnGetAnyAvailableCharacter = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.GetAnyAvailableCharacter" );

	AKFPlayerReplicationInfo_execGetAnyAvailableCharacter_Parms GetAnyAvailableCharacter_Parms;

	this->ProcessEvent ( pFnGetAnyAvailableCharacter, &GetAnyAvailableCharacter_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.SelectCharacter
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerReplicationInfo::eventSelectCharacter ( )
{
	static UFunction* pFnSelectCharacter = NULL;

	if ( ! pFnSelectCharacter )
		pFnSelectCharacter = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.SelectCharacter" );

	AKFPlayerReplicationInfo_eventSelectCharacter_Parms SelectCharacter_Parms;

	this->ProcessEvent ( pFnSelectCharacter, &SelectCharacter_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.OnInventoryReadComplete_Playfab
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::OnInventoryReadComplete_Playfab ( )
{
	static UFunction* pFnOnInventoryReadComplete_Playfab = NULL;

	if ( ! pFnOnInventoryReadComplete_Playfab )
		pFnOnInventoryReadComplete_Playfab = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.OnInventoryReadComplete_Playfab" );

	AKFPlayerReplicationInfo_execOnInventoryReadComplete_Playfab_Parms OnInventoryReadComplete_Playfab_Parms;

	this->ProcessEvent ( pFnOnInventoryReadComplete_Playfab, &OnInventoryReadComplete_Playfab_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.OnInventoryReadComplete_Steamworks
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::OnInventoryReadComplete_Steamworks ( )
{
	static UFunction* pFnOnInventoryReadComplete_Steamworks = NULL;

	if ( ! pFnOnInventoryReadComplete_Steamworks )
		pFnOnInventoryReadComplete_Steamworks = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.OnInventoryReadComplete_Steamworks" );

	AKFPlayerReplicationInfo_execOnInventoryReadComplete_Steamworks_Parms OnInventoryReadComplete_Steamworks_Parms;

	this->ProcessEvent ( pFnOnInventoryReadComplete_Steamworks, &OnInventoryReadComplete_Steamworks_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ClientInitialize
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::ClientInitialize ( )
{
	static UFunction* pFnClientInitialize = NULL;

	if ( ! pFnClientInitialize )
		pFnClientInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ClientInitialize" );

	AKFPlayerReplicationInfo_execClientInitialize_Parms ClientInitialize_Parms;

	this->ProcessEvent ( pFnClientInitialize, &ClientInitialize_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ClearCharacterAttachment
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void AKFPlayerReplicationInfo::ClearCharacterAttachment ( )
{
	static UFunction* pFnClearCharacterAttachment = NULL;

	if ( ! pFnClearCharacterAttachment )
		pFnClearCharacterAttachment = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ClearCharacterAttachment" );

	AKFPlayerReplicationInfo_execClearCharacterAttachment_Parms ClearCharacterAttachment_Parms;

	pFnClearCharacterAttachment->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnClearCharacterAttachment, &ClearCharacterAttachment_Parms, NULL );

	pFnClearCharacterAttachment->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.RetryCharacterOwnership
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerReplicationInfo::RetryCharacterOwnership ( )
{
	static UFunction* pFnRetryCharacterOwnership = NULL;

	if ( ! pFnRetryCharacterOwnership )
		pFnRetryCharacterOwnership = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.RetryCharacterOwnership" );

	AKFPlayerReplicationInfo_execRetryCharacterOwnership_Parms RetryCharacterOwnership_Parms;

	pFnRetryCharacterOwnership->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRetryCharacterOwnership, &RetryCharacterOwnership_Parms, NULL );

	pFnRetryCharacterOwnership->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.LoadCharacterConfig
// [0x00440401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerReplicationInfo::LoadCharacterConfig ( )
{
	static UFunction* pFnLoadCharacterConfig = NULL;

	if ( ! pFnLoadCharacterConfig )
		pFnLoadCharacterConfig = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.LoadCharacterConfig" );

	AKFPlayerReplicationInfo_execLoadCharacterConfig_Parms LoadCharacterConfig_Parms;

	pFnLoadCharacterConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnLoadCharacterConfig, &LoadCharacterConfig_Parms, NULL );

	pFnLoadCharacterConfig->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.SaveCharacterConfig
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void AKFPlayerReplicationInfo::SaveCharacterConfig ( )
{
	static UFunction* pFnSaveCharacterConfig = NULL;

	if ( ! pFnSaveCharacterConfig )
		pFnSaveCharacterConfig = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.SaveCharacterConfig" );

	AKFPlayerReplicationInfo_execSaveCharacterConfig_Parms SaveCharacterConfig_Parms;

	pFnSaveCharacterConfig->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSaveCharacterConfig, &SaveCharacterConfig_Parms, NULL );

	pFnSaveCharacterConfig->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.GetHeadShotEffectID
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerReplicationInfo::GetHeadShotEffectID ( )
{
	static UFunction* pFnGetHeadShotEffectID = NULL;

	if ( ! pFnGetHeadShotEffectID )
		pFnGetHeadShotEffectID = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.GetHeadShotEffectID" );

	AKFPlayerReplicationInfo_execGetHeadShotEffectID_Parms GetHeadShotEffectID_Parms;

	this->ProcessEvent ( pFnGetHeadShotEffectID, &GetHeadShotEffectID_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerSetCurrentHeadShotEffect
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerReplicationInfo::eventServerSetCurrentHeadShotEffect ( )
{
	static UFunction* pFnServerSetCurrentHeadShotEffect = NULL;

	if ( ! pFnServerSetCurrentHeadShotEffect )
		pFnServerSetCurrentHeadShotEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerSetCurrentHeadShotEffect" );

	AKFPlayerReplicationInfo_eventServerSetCurrentHeadShotEffect_Parms ServerSetCurrentHeadShotEffect_Parms;

	pFnServerSetCurrentHeadShotEffect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetCurrentHeadShotEffect, &ServerSetCurrentHeadShotEffect_Parms, NULL );

	pFnServerSetCurrentHeadShotEffect->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.ServerSetCharacterCustomization
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerReplicationInfo::eventServerSetCharacterCustomization ( )
{
	static UFunction* pFnServerSetCharacterCustomization = NULL;

	if ( ! pFnServerSetCharacterCustomization )
		pFnServerSetCharacterCustomization = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerSetCharacterCustomization" );

	AKFPlayerReplicationInfo_eventServerSetCharacterCustomization_Parms ServerSetCharacterCustomization_Parms;

	pFnServerSetCharacterCustomization->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetCharacterCustomization, &ServerSetCharacterCustomization_Parms, NULL );

	pFnServerSetCharacterCustomization->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.ServerSetSharedUnlocks
// [0x00240CC1] ( FUNC_Final | FUNC_Event | FUNC_Native )
// Parameters infos:

void AKFPlayerReplicationInfo::eventServerSetSharedUnlocks ( )
{
	static UFunction* pFnServerSetSharedUnlocks = NULL;

	if ( ! pFnServerSetSharedUnlocks )
		pFnServerSetSharedUnlocks = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerSetSharedUnlocks" );

	AKFPlayerReplicationInfo_eventServerSetSharedUnlocks_Parms ServerSetSharedUnlocks_Parms;

	pFnServerSetSharedUnlocks->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerSetSharedUnlocks, &ServerSetSharedUnlocks_Parms, NULL );

	pFnServerSetSharedUnlocks->FunctionFlags |= 0x400;
};

// Function KFGame.KFPlayerReplicationInfo.RecieveTopMaps
// [0x010201C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::RecieveTopMaps ( )
{
	static UFunction* pFnRecieveTopMaps = NULL;

	if ( ! pFnRecieveTopMaps )
		pFnRecieveTopMaps = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.RecieveTopMaps" );

	AKFPlayerReplicationInfo_execRecieveTopMaps_Parms RecieveTopMaps_Parms;

	this->ProcessEvent ( pFnRecieveTopMaps, &RecieveTopMaps_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.RecieveAARMapOption
// [0x010201C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::RecieveAARMapOption ( )
{
	static UFunction* pFnRecieveAARMapOption = NULL;

	if ( ! pFnRecieveAARMapOption )
		pFnRecieveAARMapOption = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.RecieveAARMapOption" );

	AKFPlayerReplicationInfo_execRecieveAARMapOption_Parms RecieveAARMapOption_Parms;

	this->ProcessEvent ( pFnRecieveAARMapOption, &RecieveAARMapOption_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerCastMapVote
// [0x002200C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerCastMapVote ( )
{
	static UFunction* pFnServerCastMapVote = NULL;

	if ( ! pFnServerCastMapVote )
		pFnServerCastMapVote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerCastMapVote" );

	AKFPlayerReplicationInfo_execServerCastMapVote_Parms ServerCastMapVote_Parms;

	this->ProcessEvent ( pFnServerCastMapVote, &ServerCastMapVote_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.CastMapVote
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::CastMapVote ( )
{
	static UFunction* pFnCastMapVote = NULL;

	if ( ! pFnCastMapVote )
		pFnCastMapVote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.CastMapVote" );

	AKFPlayerReplicationInfo_execCastMapVote_Parms CastMapVote_Parms;

	this->ProcessEvent ( pFnCastMapVote, &CastMapVote_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerRequestSkipTrader
// [0x002200C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerRequestSkipTrader ( )
{
	static UFunction* pFnServerRequestSkipTrader = NULL;

	if ( ! pFnServerRequestSkipTrader )
		pFnServerRequestSkipTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerRequestSkipTrader" );

	AKFPlayerReplicationInfo_execServerRequestSkipTrader_Parms ServerRequestSkipTrader_Parms;

	this->ProcessEvent ( pFnServerRequestSkipTrader, &ServerRequestSkipTrader_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.RequestSkiptTrader
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::RequestSkiptTrader ( )
{
	static UFunction* pFnRequestSkiptTrader = NULL;

	if ( ! pFnRequestSkiptTrader )
		pFnRequestSkiptTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.RequestSkiptTrader" );

	AKFPlayerReplicationInfo_execRequestSkiptTrader_Parms RequestSkiptTrader_Parms;

	this->ProcessEvent ( pFnRequestSkiptTrader, &RequestSkiptTrader_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerCastKickVote
// [0x002200C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerCastKickVote ( )
{
	static UFunction* pFnServerCastKickVote = NULL;

	if ( ! pFnServerCastKickVote )
		pFnServerCastKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerCastKickVote" );

	AKFPlayerReplicationInfo_execServerCastKickVote_Parms ServerCastKickVote_Parms;

	this->ProcessEvent ( pFnServerCastKickVote, &ServerCastKickVote_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.CastKickVote
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::CastKickVote ( )
{
	static UFunction* pFnCastKickVote = NULL;

	if ( ! pFnCastKickVote )
		pFnCastKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.CastKickVote" );

	AKFPlayerReplicationInfo_execCastKickVote_Parms CastKickVote_Parms;

	this->ProcessEvent ( pFnCastKickVote, &CastKickVote_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerStartKickVote
// [0x002200C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerStartKickVote ( )
{
	static UFunction* pFnServerStartKickVote = NULL;

	if ( ! pFnServerStartKickVote )
		pFnServerStartKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerStartKickVote" );

	AKFPlayerReplicationInfo_execServerStartKickVote_Parms ServerStartKickVote_Parms;

	this->ProcessEvent ( pFnServerStartKickVote, &ServerStartKickVote_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.HideKickVote
// [0x010201C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::HideKickVote ( )
{
	static UFunction* pFnHideKickVote = NULL;

	if ( ! pFnHideKickVote )
		pFnHideKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.HideKickVote" );

	AKFPlayerReplicationInfo_execHideKickVote_Parms HideKickVote_Parms;

	this->ProcessEvent ( pFnHideKickVote, &HideKickVote_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ShowKickVote
// [0x010201C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::ShowKickVote ( )
{
	static UFunction* pFnShowKickVote = NULL;

	if ( ! pFnShowKickVote )
		pFnShowKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ShowKickVote" );

	AKFPlayerReplicationInfo_execShowKickVote_Parms ShowKickVote_Parms;

	this->ProcessEvent ( pFnShowKickVote, &ShowKickVote_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.UnregisterPlayerFromSession
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::UnregisterPlayerFromSession ( )
{
	static UFunction* pFnUnregisterPlayerFromSession = NULL;

	if ( ! pFnUnregisterPlayerFromSession )
		pFnUnregisterPlayerFromSession = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.UnregisterPlayerFromSession" );

	AKFPlayerReplicationInfo_execUnregisterPlayerFromSession_Parms UnregisterPlayerFromSession_Parms;

	this->ProcessEvent ( pFnUnregisterPlayerFromSession, &UnregisterPlayerFromSession_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.OnTalkerRegistered
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::OnTalkerRegistered ( )
{
	static UFunction* pFnOnTalkerRegistered = NULL;

	if ( ! pFnOnTalkerRegistered )
		pFnOnTalkerRegistered = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.OnTalkerRegistered" );

	AKFPlayerReplicationInfo_execOnTalkerRegistered_Parms OnTalkerRegistered_Parms;

	this->ProcessEvent ( pFnOnTalkerRegistered, &OnTalkerRegistered_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.VOIPStatusChanged
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::VOIPStatusChanged ( )
{
	static UFunction* pFnVOIPStatusChanged = NULL;

	if ( ! pFnVOIPStatusChanged )
		pFnVOIPStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.VOIPStatusChanged" );

	AKFPlayerReplicationInfo_execVOIPStatusChanged_Parms VOIPStatusChanged_Parms;

	this->ProcessEvent ( pFnVOIPStatusChanged, &VOIPStatusChanged_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerNotifyStopVOIP
// [0x002200C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerNotifyStopVOIP ( )
{
	static UFunction* pFnServerNotifyStopVOIP = NULL;

	if ( ! pFnServerNotifyStopVOIP )
		pFnServerNotifyStopVOIP = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerNotifyStopVOIP" );

	AKFPlayerReplicationInfo_execServerNotifyStopVOIP_Parms ServerNotifyStopVOIP_Parms;

	this->ProcessEvent ( pFnServerNotifyStopVOIP, &ServerNotifyStopVOIP_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerStartSpectatorVoiceChat
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerStartSpectatorVoiceChat ( )
{
	static UFunction* pFnServerStartSpectatorVoiceChat = NULL;

	if ( ! pFnServerStartSpectatorVoiceChat )
		pFnServerStartSpectatorVoiceChat = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerStartSpectatorVoiceChat" );

	AKFPlayerReplicationInfo_execServerStartSpectatorVoiceChat_Parms ServerStartSpectatorVoiceChat_Parms;

	this->ProcessEvent ( pFnServerStartSpectatorVoiceChat, &ServerStartSpectatorVoiceChat_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerNotifyStartTeamVoip
// [0x002200C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerNotifyStartTeamVoip ( )
{
	static UFunction* pFnServerNotifyStartTeamVoip = NULL;

	if ( ! pFnServerNotifyStartTeamVoip )
		pFnServerNotifyStartTeamVoip = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerNotifyStartTeamVoip" );

	AKFPlayerReplicationInfo_execServerNotifyStartTeamVoip_Parms ServerNotifyStartTeamVoip_Parms;

	this->ProcessEvent ( pFnServerNotifyStartTeamVoip, &ServerNotifyStartTeamVoip_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerNotifyStartVoip
// [0x002200C2] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerNotifyStartVoip ( )
{
	static UFunction* pFnServerNotifyStartVoip = NULL;

	if ( ! pFnServerNotifyStartVoip )
		pFnServerNotifyStartVoip = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerNotifyStartVoip" );

	AKFPlayerReplicationInfo_execServerNotifyStartVoip_Parms ServerNotifyStartVoip_Parms;

	this->ProcessEvent ( pFnServerNotifyStartVoip, &ServerNotifyStartVoip_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.GetActivePerkPrestigeLevel
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::GetActivePerkPrestigeLevel ( )
{
	static UFunction* pFnGetActivePerkPrestigeLevel = NULL;

	if ( ! pFnGetActivePerkPrestigeLevel )
		pFnGetActivePerkPrestigeLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.GetActivePerkPrestigeLevel" );

	AKFPlayerReplicationInfo_execGetActivePerkPrestigeLevel_Parms GetActivePerkPrestigeLevel_Parms;

	this->ProcessEvent ( pFnGetActivePerkPrestigeLevel, &GetActivePerkPrestigeLevel_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.GetActivePerkLevel
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfo::GetActivePerkLevel ( )
{
	static UFunction* pFnGetActivePerkLevel = NULL;

	if ( ! pFnGetActivePerkLevel )
		pFnGetActivePerkLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.GetActivePerkLevel" );

	AKFPlayerReplicationInfo_execGetActivePerkLevel_Parms GetActivePerkLevel_Parms;

	this->ProcessEvent ( pFnGetActivePerkLevel, &GetActivePerkLevel_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ClientRecieveNewTeam
// [0x010201C0] 
// Parameters infos:

void AKFPlayerReplicationInfo::ClientRecieveNewTeam ( )
{
	static UFunction* pFnClientRecieveNewTeam = NULL;

	if ( ! pFnClientRecieveNewTeam )
		pFnClientRecieveNewTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ClientRecieveNewTeam" );

	AKFPlayerReplicationInfo_execClientRecieveNewTeam_Parms ClientRecieveNewTeam_Parms;

	this->ProcessEvent ( pFnClientRecieveNewTeam, &ClientRecieveNewTeam_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ServerSwitchTeam
// [0x002200C0] 
// Parameters infos:

void AKFPlayerReplicationInfo::ServerSwitchTeam ( )
{
	static UFunction* pFnServerSwitchTeam = NULL;

	if ( ! pFnServerSwitchTeam )
		pFnServerSwitchTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ServerSwitchTeam" );

	AKFPlayerReplicationInfo_execServerSwitchTeam_Parms ServerSwitchTeam_Parms;

	this->ProcessEvent ( pFnServerSwitchTeam, &ServerSwitchTeam_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerReplicationInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.PostBeginPlay" );

	AKFPlayerReplicationInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfo.ReplicatedEvent
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFPlayerReplicationInfo::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfo.ReplicatedEvent" );

	AKFPlayerReplicationInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.Reset
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.Reset" );

	AKFPlayerReplicationInfoVersus_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.IncrementDeaths
// [0x00024002] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::IncrementDeaths ( )
{
	static UFunction* pFnIncrementDeaths = NULL;

	if ( ! pFnIncrementDeaths )
		pFnIncrementDeaths = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.IncrementDeaths" );

	AKFPlayerReplicationInfoVersus_execIncrementDeaths_Parms IncrementDeaths_Parms;

	this->ProcessEvent ( pFnIncrementDeaths, &IncrementDeaths_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.RecordEndGameInfo
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::RecordEndGameInfo ( )
{
	static UFunction* pFnRecordEndGameInfo = NULL;

	if ( ! pFnRecordEndGameInfo )
		pFnRecordEndGameInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.RecordEndGameInfo" );

	AKFPlayerReplicationInfoVersus_execRecordEndGameInfo_Parms RecordEndGameInfo_Parms;

	this->ProcessEvent ( pFnRecordEndGameInfo, &RecordEndGameInfo_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.VOIPStatusChanged
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::VOIPStatusChanged ( )
{
	static UFunction* pFnVOIPStatusChanged = NULL;

	if ( ! pFnVOIPStatusChanged )
		pFnVOIPStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.VOIPStatusChanged" );

	AKFPlayerReplicationInfoVersus_execVOIPStatusChanged_Parms VOIPStatusChanged_Parms;

	this->ProcessEvent ( pFnVOIPStatusChanged, &VOIPStatusChanged_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.ClientRecieveNewTeam
// [0x010201C2] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::ClientRecieveNewTeam ( )
{
	static UFunction* pFnClientRecieveNewTeam = NULL;

	if ( ! pFnClientRecieveNewTeam )
		pFnClientRecieveNewTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.ClientRecieveNewTeam" );

	AKFPlayerReplicationInfoVersus_execClientRecieveNewTeam_Parms ClientRecieveNewTeam_Parms;

	this->ProcessEvent ( pFnClientRecieveNewTeam, &ClientRecieveNewTeam_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.ClientRefusedTeamSwitch
// [0x010201C2] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::ClientRefusedTeamSwitch ( )
{
	static UFunction* pFnClientRefusedTeamSwitch = NULL;

	if ( ! pFnClientRefusedTeamSwitch )
		pFnClientRefusedTeamSwitch = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.ClientRefusedTeamSwitch" );

	AKFPlayerReplicationInfoVersus_execClientRefusedTeamSwitch_Parms ClientRefusedTeamSwitch_Parms;

	this->ProcessEvent ( pFnClientRefusedTeamSwitch, &ClientRefusedTeamSwitch_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.WillMaintainTeamBalance
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::WillMaintainTeamBalance ( )
{
	static UFunction* pFnWillMaintainTeamBalance = NULL;

	if ( ! pFnWillMaintainTeamBalance )
		pFnWillMaintainTeamBalance = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.WillMaintainTeamBalance" );

	AKFPlayerReplicationInfoVersus_execWillMaintainTeamBalance_Parms WillMaintainTeamBalance_Parms;

	this->ProcessEvent ( pFnWillMaintainTeamBalance, &WillMaintainTeamBalance_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.ServerSwitchTeam
// [0x002200C2] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::ServerSwitchTeam ( )
{
	static UFunction* pFnServerSwitchTeam = NULL;

	if ( ! pFnServerSwitchTeam )
		pFnServerSwitchTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.ServerSwitchTeam" );

	AKFPlayerReplicationInfoVersus_execServerSwitchTeam_Parms ServerSwitchTeam_Parms;

	this->ProcessEvent ( pFnServerSwitchTeam, &ServerSwitchTeam_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.SetPlayerTeam
// [0x00020002] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::SetPlayerTeam ( )
{
	static UFunction* pFnSetPlayerTeam = NULL;

	if ( ! pFnSetPlayerTeam )
		pFnSetPlayerTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.SetPlayerTeam" );

	AKFPlayerReplicationInfoVersus_execSetPlayerTeam_Parms SetPlayerTeam_Parms;

	this->ProcessEvent ( pFnSetPlayerTeam, &SetPlayerTeam_Parms, NULL );
};

// Function KFGame.KFPlayerReplicationInfoVersus.GetOwnerPawn
// [0x00020102] 
// Parameters infos:

void AKFPlayerReplicationInfoVersus::GetOwnerPawn ( )
{
	static UFunction* pFnGetOwnerPawn = NULL;

	if ( ! pFnGetOwnerPawn )
		pFnGetOwnerPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerReplicationInfoVersus.GetOwnerPawn" );

	AKFPlayerReplicationInfoVersus_execGetOwnerPawn_Parms GetOwnerPawn_Parms;

	this->ProcessEvent ( pFnGetOwnerPawn, &GetOwnerPawn_Parms, NULL );
};

// Function KFGame.KFSpecialMove.GetSMAimRotation
// [0x00420000] 
// Parameters infos:

void UKFSpecialMove::GetSMAimRotation ( )
{
	static UFunction* pFnGetSMAimRotation = NULL;

	if ( ! pFnGetSMAimRotation )
		pFnGetSMAimRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.GetSMAimRotation" );

	UKFSpecialMove_execGetSMAimRotation_Parms GetSMAimRotation_Parms;

	this->ProcessEvent ( pFnGetSMAimRotation, &GetSMAimRotation_Parms, NULL );
};

// Function KFGame.KFSpecialMove.CanDrawCrosshair
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::CanDrawCrosshair ( )
{
	static UFunction* pFnCanDrawCrosshair = NULL;

	if ( ! pFnCanDrawCrosshair )
		pFnCanDrawCrosshair = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.CanDrawCrosshair" );

	UKFSpecialMove_execCanDrawCrosshair_Parms CanDrawCrosshair_Parms;

	this->ProcessEvent ( pFnCanDrawCrosshair, &CanDrawCrosshair_Parms, NULL );
};

// Function KFGame.KFSpecialMove.ModifyInteractionPawn
// [0x00420800] ( FUNC_Event )
// Parameters infos:

void UKFSpecialMove::eventModifyInteractionPawn ( )
{
	static UFunction* pFnModifyInteractionPawn = NULL;

	if ( ! pFnModifyInteractionPawn )
		pFnModifyInteractionPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.ModifyInteractionPawn" );

	UKFSpecialMove_eventModifyInteractionPawn_Parms ModifyInteractionPawn_Parms;

	this->ProcessEvent ( pFnModifyInteractionPawn, &ModifyInteractionPawn_Parms, NULL );
};

// Function KFGame.KFSpecialMove.OnEMPDisrupted
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::OnEMPDisrupted ( )
{
	static UFunction* pFnOnEMPDisrupted = NULL;

	if ( ! pFnOnEMPDisrupted )
		pFnOnEMPDisrupted = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.OnEMPDisrupted" );

	UKFSpecialMove_execOnEMPDisrupted_Parms OnEMPDisrupted_Parms;

	this->ProcessEvent ( pFnOnEMPDisrupted, &OnEMPDisrupted_Parms, NULL );
};

// Function KFGame.KFSpecialMove.OnGoreMeshSwap
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::OnGoreMeshSwap ( )
{
	static UFunction* pFnOnGoreMeshSwap = NULL;

	if ( ! pFnOnGoreMeshSwap )
		pFnOnGoreMeshSwap = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.OnGoreMeshSwap" );

	UKFSpecialMove_execOnGoreMeshSwap_Parms OnGoreMeshSwap_Parms;

	this->ProcessEvent ( pFnOnGoreMeshSwap, &OnGoreMeshSwap_Parms, NULL );
};

// Function KFGame.KFSpecialMove.CanInterruptWithParry
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::CanInterruptWithParry ( )
{
	static UFunction* pFnCanInterruptWithParry = NULL;

	if ( ! pFnCanInterruptWithParry )
		pFnCanInterruptWithParry = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.CanInterruptWithParry" );

	UKFSpecialMove_execCanInterruptWithParry_Parms CanInterruptWithParry_Parms;

	this->ProcessEvent ( pFnCanInterruptWithParry, &CanInterruptWithParry_Parms, NULL );
};

// Function KFGame.KFSpecialMove.NotifyHitReactionInterrupt
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::NotifyHitReactionInterrupt ( )
{
	static UFunction* pFnNotifyHitReactionInterrupt = NULL;

	if ( ! pFnNotifyHitReactionInterrupt )
		pFnNotifyHitReactionInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.NotifyHitReactionInterrupt" );

	UKFSpecialMove_execNotifyHitReactionInterrupt_Parms NotifyHitReactionInterrupt_Parms;

	this->ProcessEvent ( pFnNotifyHitReactionInterrupt, &NotifyHitReactionInterrupt_Parms, NULL );
};

// Function KFGame.KFSpecialMove.NotifyOwnerTakeHit
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::NotifyOwnerTakeHit ( )
{
	static UFunction* pFnNotifyOwnerTakeHit = NULL;

	if ( ! pFnNotifyOwnerTakeHit )
		pFnNotifyOwnerTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.NotifyOwnerTakeHit" );

	UKFSpecialMove_execNotifyOwnerTakeHit_Parms NotifyOwnerTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyOwnerTakeHit, &NotifyOwnerTakeHit_Parms, NULL );
};

// Function KFGame.KFSpecialMove.AbortedByAICommand
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::AbortedByAICommand ( )
{
	static UFunction* pFnAbortedByAICommand = NULL;

	if ( ! pFnAbortedByAICommand )
		pFnAbortedByAICommand = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.AbortedByAICommand" );

	UKFSpecialMove_execAbortedByAICommand_Parms AbortedByAICommand_Parms;

	this->ProcessEvent ( pFnAbortedByAICommand, &AbortedByAICommand_Parms, NULL );
};

// Function KFGame.KFSpecialMove.OnAnimNotifyParticleSystemSpawned
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::OnAnimNotifyParticleSystemSpawned ( )
{
	static UFunction* pFnOnAnimNotifyParticleSystemSpawned = NULL;

	if ( ! pFnOnAnimNotifyParticleSystemSpawned )
		pFnOnAnimNotifyParticleSystemSpawned = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.OnAnimNotifyParticleSystemSpawned" );

	UKFSpecialMove_execOnAnimNotifyParticleSystemSpawned_Parms OnAnimNotifyParticleSystemSpawned_Parms;

	this->ProcessEvent ( pFnOnAnimNotifyParticleSystemSpawned, &OnAnimNotifyParticleSystemSpawned_Parms, NULL );
};

// Function KFGame.KFSpecialMove.DeferOnAnimEnd
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::DeferOnAnimEnd ( )
{
	static UFunction* pFnDeferOnAnimEnd = NULL;

	if ( ! pFnDeferOnAnimEnd )
		pFnDeferOnAnimEnd = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.DeferOnAnimEnd" );

	UKFSpecialMove_execDeferOnAnimEnd_Parms DeferOnAnimEnd_Parms;

	this->ProcessEvent ( pFnDeferOnAnimEnd, &DeferOnAnimEnd_Parms, NULL );
};

// Function KFGame.KFSpecialMove.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.AnimEndNotify" );

	UKFSpecialMove_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function KFGame.KFSpecialMove.AbortSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::AbortSpecialMove ( )
{
	static UFunction* pFnAbortSpecialMove = NULL;

	if ( ! pFnAbortSpecialMove )
		pFnAbortSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.AbortSpecialMove" );

	UKFSpecialMove_execAbortSpecialMove_Parms AbortSpecialMove_Parms;

	this->ProcessEvent ( pFnAbortSpecialMove, &AbortSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMove.PlaySpecialMoveAnim
// [0x00024102] 
// Parameters infos:

void UKFSpecialMove::PlaySpecialMoveAnim ( )
{
	static UFunction* pFnPlaySpecialMoveAnim = NULL;

	if ( ! pFnPlaySpecialMoveAnim )
		pFnPlaySpecialMoveAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.PlaySpecialMoveAnim" );

	UKFSpecialMove_execPlaySpecialMoveAnim_Parms PlaySpecialMoveAnim_Parms;

	this->ProcessEvent ( pFnPlaySpecialMoveAnim, &PlaySpecialMoveAnim_Parms, NULL );
};

// Function KFGame.KFSpecialMove.PlayCameraAnim
// [0x00024002] 
// Parameters infos:

void UKFSpecialMove::PlayCameraAnim ( )
{
	static UFunction* pFnPlayCameraAnim = NULL;

	if ( ! pFnPlayCameraAnim )
		pFnPlayCameraAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.PlayCameraAnim" );

	UKFSpecialMove_execPlayCameraAnim_Parms PlayCameraAnim_Parms;

	this->ProcessEvent ( pFnPlayCameraAnim, &PlayCameraAnim_Parms, NULL );
};

// Function KFGame.KFSpecialMove.ProcessViewRotation
// [0x00420000] 
// Parameters infos:

void UKFSpecialMove::ProcessViewRotation ( )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.ProcessViewRotation" );

	UKFSpecialMove_execProcessViewRotation_Parms ProcessViewRotation_Parms;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );
};

// Function KFGame.KFSpecialMove.SetLockPawnRotation
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMove::SetLockPawnRotation ( )
{
	static UFunction* pFnSetLockPawnRotation = NULL;

	if ( ! pFnSetLockPawnRotation )
		pFnSetLockPawnRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.SetLockPawnRotation" );

	UKFSpecialMove_execSetLockPawnRotation_Parms SetLockPawnRotation_Parms;

	this->ProcessEvent ( pFnSetLockPawnRotation, &SetLockPawnRotation_Parms, NULL );
};

// Function KFGame.KFSpecialMove.Tick
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.Tick" );

	UKFSpecialMove_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFSpecialMove.DisableRootMotion
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::DisableRootMotion ( )
{
	static UFunction* pFnDisableRootMotion = NULL;

	if ( ! pFnDisableRootMotion )
		pFnDisableRootMotion = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.DisableRootMotion" );

	UKFSpecialMove_execDisableRootMotion_Parms DisableRootMotion_Parms;

	this->ProcessEvent ( pFnDisableRootMotion, &DisableRootMotion_Parms, NULL );
};

// Function KFGame.KFSpecialMove.EnableRootMotion
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::EnableRootMotion ( )
{
	static UFunction* pFnEnableRootMotion = NULL;

	if ( ! pFnEnableRootMotion )
		pFnEnableRootMotion = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.EnableRootMotion" );

	UKFSpecialMove_execEnableRootMotion_Parms EnableRootMotion_Parms;

	this->ProcessEvent ( pFnEnableRootMotion, &EnableRootMotion_Parms, NULL );
};

// Function KFGame.KFSpecialMove.GetSprintSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::GetSprintSpeedModifier ( )
{
	static UFunction* pFnGetSprintSpeedModifier = NULL;

	if ( ! pFnGetSprintSpeedModifier )
		pFnGetSprintSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.GetSprintSpeedModifier" );

	UKFSpecialMove_execGetSprintSpeedModifier_Parms GetSprintSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetSprintSpeedModifier, &GetSprintSpeedModifier_Parms, NULL );
};

// Function KFGame.KFSpecialMove.SetMovementLock
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMove::SetMovementLock ( )
{
	static UFunction* pFnSetMovementLock = NULL;

	if ( ! pFnSetMovementLock )
		pFnSetMovementLock = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.SetMovementLock" );

	UKFSpecialMove_execSetMovementLock_Parms SetMovementLock_Parms;

	this->ProcessEvent ( pFnSetMovementLock, &SetMovementLock_Parms, NULL );
};

// Function KFGame.KFSpecialMove.RestoreCameraDefaults
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::RestoreCameraDefaults ( )
{
	static UFunction* pFnRestoreCameraDefaults = NULL;

	if ( ! pFnRestoreCameraDefaults )
		pFnRestoreCameraDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.RestoreCameraDefaults" );

	UKFSpecialMove_execRestoreCameraDefaults_Parms RestoreCameraDefaults_Parms;

	this->ProcessEvent ( pFnRestoreCameraDefaults, &RestoreCameraDefaults_Parms, NULL );
};

// Function KFGame.KFSpecialMove.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.SpecialMoveEnded" );

	UKFSpecialMove_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSpecialMove.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.SpecialMoveStarted" );

	UKFSpecialMove_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSpecialMove.InitSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSpecialMove::InitSpecialMove ( )
{
	static UFunction* pFnInitSpecialMove = NULL;

	if ( ! pFnInitSpecialMove )
		pFnInitSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.InitSpecialMove" );

	UKFSpecialMove_execInitSpecialMove_Parms InitSpecialMove_Parms;

	this->ProcessEvent ( pFnInitSpecialMove, &InitSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMove.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSpecialMove::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.InternalCanDoSpecialMove" );

	UKFSpecialMove_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMove.SpecialMoveButtonReleased
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.SpecialMoveButtonReleased" );

	UKFSpecialMove_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function KFGame.KFSpecialMove.SpecialMoveButtonRetriggered
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.SpecialMoveButtonRetriggered" );

	UKFSpecialMove_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function KFGame.KFSpecialMove.InteractionPawnUpdated
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::InteractionPawnUpdated ( )
{
	static UFunction* pFnInteractionPawnUpdated = NULL;

	if ( ! pFnInteractionPawnUpdated )
		pFnInteractionPawnUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.InteractionPawnUpdated" );

	UKFSpecialMove_execInteractionPawnUpdated_Parms InteractionPawnUpdated_Parms;

	this->ProcessEvent ( pFnInteractionPawnUpdated, &InteractionPawnUpdated_Parms, NULL );
};

// Function KFGame.KFSpecialMove.NotifyBump
// [0x00020000] 
// Parameters infos:

void UKFSpecialMove::NotifyBump ( )
{
	static UFunction* pFnNotifyBump = NULL;

	if ( ! pFnNotifyBump )
		pFnNotifyBump = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.NotifyBump" );

	UKFSpecialMove_execNotifyBump_Parms NotifyBump_Parms;

	this->ProcessEvent ( pFnNotifyBump, &NotifyBump_Parms, NULL );
};

// Function KFGame.KFSpecialMove.PackFlagsBase
// [0x00022000] 
// Parameters infos:

void UKFSpecialMove::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.PackFlagsBase" );

	UKFSpecialMove_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function KFGame.KFSpecialMove.IsPawnPathClear
// [0x00026400] ( FUNC_Native )
// Parameters infos:

void UKFSpecialMove::IsPawnPathClear ( )
{
	static UFunction* pFnIsPawnPathClear = NULL;

	if ( ! pFnIsPawnPathClear )
		pFnIsPawnPathClear = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMove.IsPawnPathClear" );

	UKFSpecialMove_execIsPawnPathClear_Parms IsPawnPathClear_Parms;

	pFnIsPawnPathClear->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsPawnPathClear, &IsPawnPathClear_Parms, NULL );

	pFnIsPawnPathClear->FunctionFlags |= 0x400;
};

// Function KFGame.KFSM_InteractionPawnLeader.CanInteractWithPawn
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::CanInteractWithPawn ( )
{
	static UFunction* pFnCanInteractWithPawn = NULL;

	if ( ! pFnCanInteractWithPawn )
		pFnCanInteractWithPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.CanInteractWithPawn" );

	UKFSM_InteractionPawnLeader_execCanInteractWithPawn_Parms CanInteractWithPawn_Parms;

	this->ProcessEvent ( pFnCanInteractWithPawn, &CanInteractWithPawn_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.DetachPawnHelper
// [0x00022002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::DetachPawnHelper ( )
{
	static UFunction* pFnDetachPawnHelper = NULL;

	if ( ! pFnDetachPawnHelper )
		pFnDetachPawnHelper = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.DetachPawnHelper" );

	UKFSM_InteractionPawnLeader_execDetachPawnHelper_Parms DetachPawnHelper_Parms;

	this->ProcessEvent ( pFnDetachPawnHelper, &DetachPawnHelper_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.DetachPawn
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::DetachPawn ( )
{
	static UFunction* pFnDetachPawn = NULL;

	if ( ! pFnDetachPawn )
		pFnDetachPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.DetachPawn" );

	UKFSM_InteractionPawnLeader_execDetachPawn_Parms DetachPawn_Parms;

	this->ProcessEvent ( pFnDetachPawn, &DetachPawn_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.AttachFollowerToLeader
// [0x00024002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::AttachFollowerToLeader ( )
{
	static UFunction* pFnAttachFollowerToLeader = NULL;

	if ( ! pFnAttachFollowerToLeader )
		pFnAttachFollowerToLeader = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.AttachFollowerToLeader" );

	UKFSM_InteractionPawnLeader_execAttachFollowerToLeader_Parms AttachFollowerToLeader_Parms;

	this->ProcessEvent ( pFnAttachFollowerToLeader, &AttachFollowerToLeader_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.PlayExecutionCameraAnim
// [0x00C24002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::PlayExecutionCameraAnim ( )
{
	static UFunction* pFnPlayExecutionCameraAnim = NULL;

	if ( ! pFnPlayExecutionCameraAnim )
		pFnPlayExecutionCameraAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.PlayExecutionCameraAnim" );

	UKFSM_InteractionPawnLeader_execPlayExecutionCameraAnim_Parms PlayExecutionCameraAnim_Parms;

	this->ProcessEvent ( pFnPlayExecutionCameraAnim, &PlayExecutionCameraAnim_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.DebugSocketRelativeLocation
// [0x00820002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::DebugSocketRelativeLocation ( )
{
	static UFunction* pFnDebugSocketRelativeLocation = NULL;

	if ( ! pFnDebugSocketRelativeLocation )
		pFnDebugSocketRelativeLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.DebugSocketRelativeLocation" );

	UKFSM_InteractionPawnLeader_execDebugSocketRelativeLocation_Parms DebugSocketRelativeLocation_Parms;

	this->ProcessEvent ( pFnDebugSocketRelativeLocation, &DebugSocketRelativeLocation_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.OnFollowerLeavingSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::OnFollowerLeavingSpecialMove ( )
{
	static UFunction* pFnOnFollowerLeavingSpecialMove = NULL;

	if ( ! pFnOnFollowerLeavingSpecialMove )
		pFnOnFollowerLeavingSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.OnFollowerLeavingSpecialMove" );

	UKFSM_InteractionPawnLeader_execOnFollowerLeavingSpecialMove_Parms OnFollowerLeavingSpecialMove_Parms;

	this->ProcessEvent ( pFnOnFollowerLeavingSpecialMove, &OnFollowerLeavingSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.MessageEvent
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::MessageEvent ( )
{
	static UFunction* pFnMessageEvent = NULL;

	if ( ! pFnMessageEvent )
		pFnMessageEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.MessageEvent" );

	UKFSM_InteractionPawnLeader_execMessageEvent_Parms MessageEvent_Parms;

	this->ProcessEvent ( pFnMessageEvent, &MessageEvent_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.IsFollowerReachable
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::IsFollowerReachable ( )
{
	static UFunction* pFnIsFollowerReachable = NULL;

	if ( ! pFnIsFollowerReachable )
		pFnIsFollowerReachable = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.IsFollowerReachable" );

	UKFSM_InteractionPawnLeader_execIsFollowerReachable_Parms IsFollowerReachable_Parms;

	this->ProcessEvent ( pFnIsFollowerReachable, &IsFollowerReachable_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.RetryCollisionTimer
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::RetryCollisionTimer ( )
{
	static UFunction* pFnRetryCollisionTimer = NULL;

	if ( ! pFnRetryCollisionTimer )
		pFnRetryCollisionTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.RetryCollisionTimer" );

	UKFSM_InteractionPawnLeader_execRetryCollisionTimer_Parms RetryCollisionTimer_Parms;

	this->ProcessEvent ( pFnRetryCollisionTimer, &RetryCollisionTimer_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.StartInteraction
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.StartInteraction" );

	UKFSM_InteractionPawnLeader_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.IsReadyToStartInteraction
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::IsReadyToStartInteraction ( )
{
	static UFunction* pFnIsReadyToStartInteraction = NULL;

	if ( ! pFnIsReadyToStartInteraction )
		pFnIsReadyToStartInteraction = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.IsReadyToStartInteraction" );

	UKFSM_InteractionPawnLeader_execIsReadyToStartInteraction_Parms IsReadyToStartInteraction_Parms;

	this->ProcessEvent ( pFnIsReadyToStartInteraction, &IsReadyToStartInteraction_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.CheckReadyToStartInteraction
// [0x00020003] ( FUNC_Final )
// Parameters infos:

void UKFSM_InteractionPawnLeader::CheckReadyToStartInteraction ( )
{
	static UFunction* pFnCheckReadyToStartInteraction = NULL;

	if ( ! pFnCheckReadyToStartInteraction )
		pFnCheckReadyToStartInteraction = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.CheckReadyToStartInteraction" );

	UKFSM_InteractionPawnLeader_execCheckReadyToStartInteraction_Parms CheckReadyToStartInteraction_Parms;

	this->ProcessEvent ( pFnCheckReadyToStartInteraction, &CheckReadyToStartInteraction_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.InteractionStartTimedOut
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::InteractionStartTimedOut ( )
{
	static UFunction* pFnInteractionStartTimedOut = NULL;

	if ( ! pFnInteractionStartTimedOut )
		pFnInteractionStartTimedOut = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.InteractionStartTimedOut" );

	UKFSM_InteractionPawnLeader_execInteractionStartTimedOut_Parms InteractionStartTimedOut_Parms;

	this->ProcessEvent ( pFnInteractionStartTimedOut, &InteractionStartTimedOut_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.SpecialMoveEnded" );

	UKFSM_InteractionPawnLeader_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnLeader::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.SpecialMoveStarted" );

	UKFSM_InteractionPawnLeader_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnLeader.GetClipSafeMeshTranslation
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFSM_InteractionPawnLeader::GetClipSafeMeshTranslation ( )
{
	static UFunction* pFnGetClipSafeMeshTranslation = NULL;

	if ( ! pFnGetClipSafeMeshTranslation )
		pFnGetClipSafeMeshTranslation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnLeader.GetClipSafeMeshTranslation" );

	UKFSM_InteractionPawnLeader_execGetClipSafeMeshTranslation_Parms GetClipSafeMeshTranslation_Parms;

	pFnGetClipSafeMeshTranslation->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetClipSafeMeshTranslation, &GetClipSafeMeshTranslation_Parms, NULL );

	pFnGetClipSafeMeshTranslation->FunctionFlags |= 0x400;
};

// Function KFGame.KFSM_GrappleCombined.CheckIfPlayerReleasedGrapple
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::CheckIfPlayerReleasedGrapple ( )
{
	static UFunction* pFnCheckIfPlayerReleasedGrapple = NULL;

	if ( ! pFnCheckIfPlayerReleasedGrapple )
		pFnCheckIfPlayerReleasedGrapple = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.CheckIfPlayerReleasedGrapple" );

	UKFSM_GrappleCombined_execCheckIfPlayerReleasedGrapple_Parms CheckIfPlayerReleasedGrapple_Parms;

	this->ProcessEvent ( pFnCheckIfPlayerReleasedGrapple, &CheckIfPlayerReleasedGrapple_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.SpecialMoveButtonReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.SpecialMoveButtonReleased" );

	UKFSM_GrappleCombined_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.SpecialMoveButtonRetriggered
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.SpecialMoveButtonRetriggered" );

	UKFSM_GrappleCombined_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.NotifyHitReactionInterrupt
// [0x00820002] 
// Parameters infos:

void UKFSM_GrappleCombined::NotifyHitReactionInterrupt ( )
{
	static UFunction* pFnNotifyHitReactionInterrupt = NULL;

	if ( ! pFnNotifyHitReactionInterrupt )
		pFnNotifyHitReactionInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.NotifyHitReactionInterrupt" );

	UKFSM_GrappleCombined_execNotifyHitReactionInterrupt_Parms NotifyHitReactionInterrupt_Parms;

	this->ProcessEvent ( pFnNotifyHitReactionInterrupt, &NotifyHitReactionInterrupt_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.NotifyOwnerTakeHit
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::NotifyOwnerTakeHit ( )
{
	static UFunction* pFnNotifyOwnerTakeHit = NULL;

	if ( ! pFnNotifyOwnerTakeHit )
		pFnNotifyOwnerTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.NotifyOwnerTakeHit" );

	UKFSM_GrappleCombined_execNotifyOwnerTakeHit_Parms NotifyOwnerTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyOwnerTakeHit, &NotifyOwnerTakeHit_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.SpecialMoveEnded" );

	UKFSM_GrappleCombined_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.OnFollowerLeavingSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::OnFollowerLeavingSpecialMove ( )
{
	static UFunction* pFnOnFollowerLeavingSpecialMove = NULL;

	if ( ! pFnOnFollowerLeavingSpecialMove )
		pFnOnFollowerLeavingSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.OnFollowerLeavingSpecialMove" );

	UKFSM_GrappleCombined_execOnFollowerLeavingSpecialMove_Parms OnFollowerLeavingSpecialMove_Parms;

	this->ProcessEvent ( pFnOnFollowerLeavingSpecialMove, &OnFollowerLeavingSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.PlayGrappleLoopAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::PlayGrappleLoopAnim ( )
{
	static UFunction* pFnPlayGrappleLoopAnim = NULL;

	if ( ! pFnPlayGrappleLoopAnim )
		pFnPlayGrappleLoopAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.PlayGrappleLoopAnim" );

	UKFSM_GrappleCombined_execPlayGrappleLoopAnim_Parms PlayGrappleLoopAnim_Parms;

	this->ProcessEvent ( pFnPlayGrappleLoopAnim, &PlayGrappleLoopAnim_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.SpecialMoveFlagsUpdated" );

	UKFSM_GrappleCombined_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.AnimEndNotify" );

	UKFSM_GrappleCombined_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.StartInteraction
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.StartInteraction" );

	UKFSM_GrappleCombined_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.BeginGrapple
// [0x00024002] 
// Parameters infos:

void UKFSM_GrappleCombined::BeginGrapple ( )
{
	static UFunction* pFnBeginGrapple = NULL;

	if ( ! pFnBeginGrapple )
		pFnBeginGrapple = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.BeginGrapple" );

	UKFSM_GrappleCombined_execBeginGrapple_Parms BeginGrapple_Parms;

	this->ProcessEvent ( pFnBeginGrapple, &BeginGrapple_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.CanInteractWithPawn
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::CanInteractWithPawn ( )
{
	static UFunction* pFnCanInteractWithPawn = NULL;

	if ( ! pFnCanInteractWithPawn )
		pFnCanInteractWithPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.CanInteractWithPawn" );

	UKFSM_GrappleCombined_execCanInteractWithPawn_Parms CanInteractWithPawn_Parms;

	this->ProcessEvent ( pFnCanInteractWithPawn, &CanInteractWithPawn_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.FindPlayerGrabTarget
// [0x00820002] 
// Parameters infos:

void UKFSM_GrappleCombined::FindPlayerGrabTarget ( )
{
	static UFunction* pFnFindPlayerGrabTarget = NULL;

	if ( ! pFnFindPlayerGrabTarget )
		pFnFindPlayerGrabTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.FindPlayerGrabTarget" );

	UKFSM_GrappleCombined_execFindPlayerGrabTarget_Parms FindPlayerGrabTarget_Parms;

	this->ProcessEvent ( pFnFindPlayerGrabTarget, &FindPlayerGrabTarget_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.CheckGrapple
// [0x00820002] 
// Parameters infos:

void UKFSM_GrappleCombined::CheckGrapple ( )
{
	static UFunction* pFnCheckGrapple = NULL;

	if ( ! pFnCheckGrapple )
		pFnCheckGrapple = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.CheckGrapple" );

	UKFSM_GrappleCombined_execCheckGrapple_Parms CheckGrapple_Parms;

	this->ProcessEvent ( pFnCheckGrapple, &CheckGrapple_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.PlayGrabAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::PlayGrabAnim ( )
{
	static UFunction* pFnPlayGrabAnim = NULL;

	if ( ! pFnPlayGrabAnim )
		pFnPlayGrabAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.PlayGrabAnim" );

	UKFSM_GrappleCombined_execPlayGrabAnim_Parms PlayGrabAnim_Parms;

	this->ProcessEvent ( pFnPlayGrabAnim, &PlayGrabAnim_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.SpecialMoveStarted" );

	UKFSM_GrappleCombined_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_GrappleCombined::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.PackFlagsBase" );

	UKFSM_GrappleCombined_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.CanInterruptWithParry
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::CanInterruptWithParry ( )
{
	static UFunction* pFnCanInterruptWithParry = NULL;

	if ( ! pFnCanInterruptWithParry )
		pFnCanInterruptWithParry = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.CanInterruptWithParry" );

	UKFSM_GrappleCombined_execCanInterruptWithParry_Parms CanInterruptWithParry_Parms;

	this->ProcessEvent ( pFnCanInterruptWithParry, &CanInterruptWithParry_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.CanOverrideMoveWith
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleCombined::CanOverrideMoveWith ( )
{
	static UFunction* pFnCanOverrideMoveWith = NULL;

	if ( ! pFnCanOverrideMoveWith )
		pFnCanOverrideMoveWith = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.CanOverrideMoveWith" );

	UKFSM_GrappleCombined_execCanOverrideMoveWith_Parms CanOverrideMoveWith_Parms;

	this->ProcessEvent ( pFnCanOverrideMoveWith, &CanOverrideMoveWith_Parms, NULL );
};

// Function KFGame.KFSM_GrappleCombined.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_GrappleCombined::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleCombined.InternalCanDoSpecialMove" );

	UKFSM_GrappleCombined_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.PlayerReleasedGrapple
// [0x00020000] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::PlayerReleasedGrapple ( )
{
	static UFunction* pFnPlayerReleasedGrapple = NULL;

	if ( ! pFnPlayerReleasedGrapple )
		pFnPlayerReleasedGrapple = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.PlayerReleasedGrapple" );

	UKFSM_Patriarch_Grapple_execPlayerReleasedGrapple_Parms PlayerReleasedGrapple_Parms;

	this->ProcessEvent ( pFnPlayerReleasedGrapple, &PlayerReleasedGrapple_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveButtonReleased
// [0x00020000] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveButtonReleased" );

	UKFSM_Patriarch_Grapple_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveButtonRetriggered
// [0x00020000] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveButtonRetriggered" );

	UKFSM_Patriarch_Grapple_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveEnded" );

	UKFSM_Patriarch_Grapple_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.ResetFollowerPhysics
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::ResetFollowerPhysics ( )
{
	static UFunction* pFnResetFollowerPhysics = NULL;

	if ( ! pFnResetFollowerPhysics )
		pFnResetFollowerPhysics = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.ResetFollowerPhysics" );

	UKFSM_Patriarch_Grapple_execResetFollowerPhysics_Parms ResetFollowerPhysics_Parms;

	this->ProcessEvent ( pFnResetFollowerPhysics, &ResetFollowerPhysics_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.OnFollowerLeavingSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::OnFollowerLeavingSpecialMove ( )
{
	static UFunction* pFnOnFollowerLeavingSpecialMove = NULL;

	if ( ! pFnOnFollowerLeavingSpecialMove )
		pFnOnFollowerLeavingSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.OnFollowerLeavingSpecialMove" );

	UKFSM_Patriarch_Grapple_execOnFollowerLeavingSpecialMove_Parms OnFollowerLeavingSpecialMove_Parms;

	this->ProcessEvent ( pFnOnFollowerLeavingSpecialMove, &OnFollowerLeavingSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.NotifyOwnerTakeHit
// [0x00020000] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::NotifyOwnerTakeHit ( )
{
	static UFunction* pFnNotifyOwnerTakeHit = NULL;

	if ( ! pFnNotifyOwnerTakeHit )
		pFnNotifyOwnerTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.NotifyOwnerTakeHit" );

	UKFSM_Patriarch_Grapple_execNotifyOwnerTakeHit_Parms NotifyOwnerTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyOwnerTakeHit, &NotifyOwnerTakeHit_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.AnimEndNotify" );

	UKFSM_Patriarch_Grapple_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.DetachGrabbedPawn
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSM_Patriarch_Grapple::eventDetachGrabbedPawn ( )
{
	static UFunction* pFnDetachGrabbedPawn = NULL;

	if ( ! pFnDetachGrabbedPawn )
		pFnDetachGrabbedPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.DetachGrabbedPawn" );

	UKFSM_Patriarch_Grapple_eventDetachGrabbedPawn_Parms DetachGrabbedPawn_Parms;

	this->ProcessEvent ( pFnDetachGrabbedPawn, &DetachGrabbedPawn_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.SetSkelControlsActive
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::SetSkelControlsActive ( )
{
	static UFunction* pFnSetSkelControlsActive = NULL;

	if ( ! pFnSetSkelControlsActive )
		pFnSetSkelControlsActive = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.SetSkelControlsActive" );

	UKFSM_Patriarch_Grapple_execSetSkelControlsActive_Parms SetSkelControlsActive_Parms;

	this->ProcessEvent ( pFnSetSkelControlsActive, &SetSkelControlsActive_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.InitializeSkelControls
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::InitializeSkelControls ( )
{
	static UFunction* pFnInitializeSkelControls = NULL;

	if ( ! pFnInitializeSkelControls )
		pFnInitializeSkelControls = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.InitializeSkelControls" );

	UKFSM_Patriarch_Grapple_execInitializeSkelControls_Parms InitializeSkelControls_Parms;

	this->ProcessEvent ( pFnInitializeSkelControls, &InitializeSkelControls_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveFlagsUpdated" );

	UKFSM_Patriarch_Grapple_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.OnGrabMissed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSM_Patriarch_Grapple::eventOnGrabMissed ( )
{
	static UFunction* pFnOnGrabMissed = NULL;

	if ( ! pFnOnGrabMissed )
		pFnOnGrabMissed = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.OnGrabMissed" );

	UKFSM_Patriarch_Grapple_eventOnGrabMissed_Parms OnGrabMissed_Parms;

	this->ProcessEvent ( pFnOnGrabMissed, &OnGrabMissed_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.StartInteraction
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.StartInteraction" );

	UKFSM_Patriarch_Grapple_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.BeginGrapple
// [0x00024002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::BeginGrapple ( )
{
	static UFunction* pFnBeginGrapple = NULL;

	if ( ! pFnBeginGrapple )
		pFnBeginGrapple = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.BeginGrapple" );

	UKFSM_Patriarch_Grapple_execBeginGrapple_Parms BeginGrapple_Parms;

	this->ProcessEvent ( pFnBeginGrapple, &BeginGrapple_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.DamageFollower
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::DamageFollower ( )
{
	static UFunction* pFnDamageFollower = NULL;

	if ( ! pFnDamageFollower )
		pFnDamageFollower = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.DamageFollower" );

	UKFSM_Patriarch_Grapple_execDamageFollower_Parms DamageFollower_Parms;

	this->ProcessEvent ( pFnDamageFollower, &DamageFollower_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.CheckGrapple
// [0x00820002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::CheckGrapple ( )
{
	static UFunction* pFnCheckGrapple = NULL;

	if ( ! pFnCheckGrapple )
		pFnCheckGrapple = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.CheckGrapple" );

	UKFSM_Patriarch_Grapple_execCheckGrapple_Parms CheckGrapple_Parms;

	this->ProcessEvent ( pFnCheckGrapple, &CheckGrapple_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.BeginTentacleControls
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::BeginTentacleControls ( )
{
	static UFunction* pFnBeginTentacleControls = NULL;

	if ( ! pFnBeginTentacleControls )
		pFnBeginTentacleControls = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.BeginTentacleControls" );

	UKFSM_Patriarch_Grapple_execBeginTentacleControls_Parms BeginTentacleControls_Parms;

	this->ProcessEvent ( pFnBeginTentacleControls, &BeginTentacleControls_Parms, NULL );
};

// Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Grapple::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Patriarch_Grapple.SpecialMoveStarted" );

	UKFSM_Patriarch_Grapple_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_PlaySingleAnim.NotifyHitReactionInterrupt
// [0x00020002] 
// Parameters infos:

void UKFSM_PlaySingleAnim::NotifyHitReactionInterrupt ( )
{
	static UFunction* pFnNotifyHitReactionInterrupt = NULL;

	if ( ! pFnNotifyHitReactionInterrupt )
		pFnNotifyHitReactionInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlaySingleAnim.NotifyHitReactionInterrupt" );

	UKFSM_PlaySingleAnim_execNotifyHitReactionInterrupt_Parms NotifyHitReactionInterrupt_Parms;

	this->ProcessEvent ( pFnNotifyHitReactionInterrupt, &NotifyHitReactionInterrupt_Parms, NULL );
};

// Function KFGame.KFSM_PlaySingleAnim.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_PlaySingleAnim::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlaySingleAnim.AnimEndNotify" );

	UKFSM_PlaySingleAnim_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function KFGame.KFSM_PlaySingleAnim.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_PlaySingleAnim::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlaySingleAnim.PlayAnimation" );

	UKFSM_PlaySingleAnim_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_PlaySingleAnim.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_PlaySingleAnim::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlaySingleAnim.SpecialMoveEnded" );

	UKFSM_PlaySingleAnim_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_PlaySingleAnim.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlaySingleAnim::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlaySingleAnim.SpecialMoveStarted" );

	UKFSM_PlaySingleAnim_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.CanInterruptWithParry
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::CanInterruptWithParry ( )
{
	static UFunction* pFnCanInterruptWithParry = NULL;

	if ( ! pFnCanInterruptWithParry )
		pFnCanInterruptWithParry = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.CanInterruptWithParry" );

	UKFSM_MeleeAttack_execCanInterruptWithParry_Parms CanInterruptWithParry_Parms;

	this->ProcessEvent ( pFnCanInterruptWithParry, &CanInterruptWithParry_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.InterruptCheckTimer
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::InterruptCheckTimer ( )
{
	static UFunction* pFnInterruptCheckTimer = NULL;

	if ( ! pFnInterruptCheckTimer )
		pFnInterruptCheckTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.InterruptCheckTimer" );

	UKFSM_MeleeAttack_execInterruptCheckTimer_Parms InterruptCheckTimer_Parms;

	this->ProcessEvent ( pFnInterruptCheckTimer, &InterruptCheckTimer_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.AbortedByAICommand
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::AbortedByAICommand ( )
{
	static UFunction* pFnAbortedByAICommand = NULL;

	if ( ! pFnAbortedByAICommand )
		pFnAbortedByAICommand = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.AbortedByAICommand" );

	UKFSM_MeleeAttack_execAbortedByAICommand_Parms AbortedByAICommand_Parms;

	this->ProcessEvent ( pFnAbortedByAICommand, &AbortedByAICommand_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.NotifyHitReactionInterrupt
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::NotifyHitReactionInterrupt ( )
{
	static UFunction* pFnNotifyHitReactionInterrupt = NULL;

	if ( ! pFnNotifyHitReactionInterrupt )
		pFnNotifyHitReactionInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.NotifyHitReactionInterrupt" );

	UKFSM_MeleeAttack_execNotifyHitReactionInterrupt_Parms NotifyHitReactionInterrupt_Parms;

	this->ProcessEvent ( pFnNotifyHitReactionInterrupt, &NotifyHitReactionInterrupt_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.PlayAnimation" );

	UKFSM_MeleeAttack_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.SpecialMoveEnded" );

	UKFSM_MeleeAttack_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.SpecialMoveStarted" );

	UKFSM_MeleeAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.CanOverrideMoveWith
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::CanOverrideMoveWith ( )
{
	static UFunction* pFnCanOverrideMoveWith = NULL;

	if ( ! pFnCanOverrideMoveWith )
		pFnCanOverrideMoveWith = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.CanOverrideMoveWith" );

	UKFSM_MeleeAttack_execCanOverrideMoveWith_Parms CanOverrideMoveWith_Parms;

	this->ProcessEvent ( pFnCanOverrideMoveWith, &CanOverrideMoveWith_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.UnpackSpecialMoveFlags
// [0x00020002] 
// Parameters infos:

void UKFSM_MeleeAttack::UnpackSpecialMoveFlags ( )
{
	static UFunction* pFnUnpackSpecialMoveFlags = NULL;

	if ( ! pFnUnpackSpecialMoveFlags )
		pFnUnpackSpecialMoveFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.UnpackSpecialMoveFlags" );

	UKFSM_MeleeAttack_execUnpackSpecialMoveFlags_Parms UnpackSpecialMoveFlags_Parms;

	this->ProcessEvent ( pFnUnpackSpecialMoveFlags, &UnpackSpecialMoveFlags_Parms, NULL );
};

// Function KFGame.KFSM_MeleeAttack.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_MeleeAttack::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_MeleeAttack.PackFlagsBase" );

	UKFSM_MeleeAttack_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function KFGame.KFSM_DoorMeleeAttack.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_DoorMeleeAttack::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DoorMeleeAttack.InternalCanDoSpecialMove" );

	UKFSM_DoorMeleeAttack_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_DoorMeleeAttack.UnpackSpecialMoveFlags
// [0x00020002] 
// Parameters infos:

void UKFSM_DoorMeleeAttack::UnpackSpecialMoveFlags ( )
{
	static UFunction* pFnUnpackSpecialMoveFlags = NULL;

	if ( ! pFnUnpackSpecialMoveFlags )
		pFnUnpackSpecialMoveFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DoorMeleeAttack.UnpackSpecialMoveFlags" );

	UKFSM_DoorMeleeAttack_execUnpackSpecialMoveFlags_Parms UnpackSpecialMoveFlags_Parms;

	this->ProcessEvent ( pFnUnpackSpecialMoveFlags, &UnpackSpecialMoveFlags_Parms, NULL );
};

// Function KFGame.KFSM_DoorMeleeAttack.PackSMFlags
// [0x00026002] 
// Parameters infos:

void UKFSM_DoorMeleeAttack::PackSMFlags ( )
{
	static UFunction* pFnPackSMFlags = NULL;

	if ( ! pFnPackSMFlags )
		pFnPackSMFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DoorMeleeAttack.PackSMFlags" );

	UKFSM_DoorMeleeAttack_execPackSMFlags_Parms PackSMFlags_Parms;

	this->ProcessEvent ( pFnPackSMFlags, &PackSMFlags_Parms, NULL );
};

// Function KFGame.KFSM_DoorMeleeAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_DoorMeleeAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DoorMeleeAttack.SpecialMoveStarted" );

	UKFSM_DoorMeleeAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_RecoverFromRagdoll.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_RecoverFromRagdoll::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RecoverFromRagdoll.SpecialMoveEnded" );

	UKFSM_RecoverFromRagdoll_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_RecoverFromRagdoll.FinishedBlendToGetUp
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void UKFSM_RecoverFromRagdoll::eventFinishedBlendToGetUp ( )
{
	static UFunction* pFnFinishedBlendToGetUp = NULL;

	if ( ! pFnFinishedBlendToGetUp )
		pFnFinishedBlendToGetUp = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RecoverFromRagdoll.FinishedBlendToGetUp" );

	UKFSM_RecoverFromRagdoll_eventFinishedBlendToGetUp_Parms FinishedBlendToGetUp_Parms;

	this->ProcessEvent ( pFnFinishedBlendToGetUp, &FinishedBlendToGetUp_Parms, NULL );
};

// Function KFGame.KFSM_RecoverFromRagdoll.GetRecoveryAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_RecoverFromRagdoll::GetRecoveryAnim ( )
{
	static UFunction* pFnGetRecoveryAnim = NULL;

	if ( ! pFnGetRecoveryAnim )
		pFnGetRecoveryAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RecoverFromRagdoll.GetRecoveryAnim" );

	UKFSM_RecoverFromRagdoll_execGetRecoveryAnim_Parms GetRecoveryAnim_Parms;

	this->ProcessEvent ( pFnGetRecoveryAnim, &GetRecoveryAnim_Parms, NULL );
};

// Function KFGame.KFSM_RecoverFromRagdoll.PlayRecoveryAnim
// [0x00820002] 
// Parameters infos:

void UKFSM_RecoverFromRagdoll::PlayRecoveryAnim ( )
{
	static UFunction* pFnPlayRecoveryAnim = NULL;

	if ( ! pFnPlayRecoveryAnim )
		pFnPlayRecoveryAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RecoverFromRagdoll.PlayRecoveryAnim" );

	UKFSM_RecoverFromRagdoll_execPlayRecoveryAnim_Parms PlayRecoveryAnim_Parms;

	this->ProcessEvent ( pFnPlayRecoveryAnim, &PlayRecoveryAnim_Parms, NULL );
};

// Function KFGame.KFSM_RecoverFromRagdoll.MoveOffGeometry
// [0x00020102] 
// Parameters infos:

void UKFSM_RecoverFromRagdoll::MoveOffGeometry ( )
{
	static UFunction* pFnMoveOffGeometry = NULL;

	if ( ! pFnMoveOffGeometry )
		pFnMoveOffGeometry = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RecoverFromRagdoll.MoveOffGeometry" );

	UKFSM_RecoverFromRagdoll_execMoveOffGeometry_Parms MoveOffGeometry_Parms;

	this->ProcessEvent ( pFnMoveOffGeometry, &MoveOffGeometry_Parms, NULL );
};

// Function KFGame.KFSM_RecoverFromRagdoll.TraceNoPawns
// [0x00C20102] 
// Parameters infos:

void UKFSM_RecoverFromRagdoll::TraceNoPawns ( )
{
	static UFunction* pFnTraceNoPawns = NULL;

	if ( ! pFnTraceNoPawns )
		pFnTraceNoPawns = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RecoverFromRagdoll.TraceNoPawns" );

	UKFSM_RecoverFromRagdoll_execTraceNoPawns_Parms TraceNoPawns_Parms;

	this->ProcessEvent ( pFnTraceNoPawns, &TraceNoPawns_Parms, NULL );
};

// Function KFGame.KFSM_RecoverFromRagdoll.SpecialMoveStarted
// [0x00820002] 
// Parameters infos:

void UKFSM_RecoverFromRagdoll::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RecoverFromRagdoll.SpecialMoveStarted" );

	UKFSM_RecoverFromRagdoll_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_RecoverFromRagdoll.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_RecoverFromRagdoll::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RecoverFromRagdoll.InternalCanDoSpecialMove" );

	UKFSM_RecoverFromRagdoll_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AddTransactionAmmo
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFAutoPurchaseHelper::AddTransactionAmmo ( )
{
	static UFunction* pFnAddTransactionAmmo = NULL;

	if ( ! pFnAddTransactionAmmo )
		pFnAddTransactionAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AddTransactionAmmo" );

	UKFAutoPurchaseHelper_execAddTransactionAmmo_Parms AddTransactionAmmo_Parms;

	pFnAddTransactionAmmo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnAddTransactionAmmo, &AddTransactionAmmo_Parms, NULL );

	pFnAddTransactionAmmo->FunctionFlags |= 0x400;
};

// Function KFGame.KFAutoPurchaseHelper.GetTraderItems
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetTraderItems ( )
{
	static UFunction* pFnGetTraderItems = NULL;

	if ( ! pFnGetTraderItems )
		pFnGetTraderItems = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetTraderItems" );

	UKFAutoPurchaseHelper_execGetTraderItems_Parms GetTraderItems_Parms;

	this->ProcessEvent ( pFnGetTraderItems, &GetTraderItems_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AddBlocks
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AddBlocks ( )
{
	static UFunction* pFnAddBlocks = NULL;

	if ( ! pFnAddBlocks )
		pFnAddBlocks = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AddBlocks" );

	UKFAutoPurchaseHelper_execAddBlocks_Parms AddBlocks_Parms;

	this->ProcessEvent ( pFnAddBlocks, &AddBlocks_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AddItemByPriority
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AddItemByPriority ( )
{
	static UFunction* pFnAddItemByPriority = NULL;

	if ( ! pFnAddItemByPriority )
		pFnAddItemByPriority = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AddItemByPriority" );

	UKFAutoPurchaseHelper_execAddItemByPriority_Parms AddItemByPriority_Parms;

	this->ProcessEvent ( pFnAddItemByPriority, &AddItemByPriority_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.MergeSingleIntoDual
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::MergeSingleIntoDual ( )
{
	static UFunction* pFnMergeSingleIntoDual = NULL;

	if ( ! pFnMergeSingleIntoDual )
		pFnMergeSingleIntoDual = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.MergeSingleIntoDual" );

	UKFAutoPurchaseHelper_execMergeSingleIntoDual_Parms MergeSingleIntoDual_Parms;

	this->ProcessEvent ( pFnMergeSingleIntoDual, &MergeSingleIntoDual_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.RemoveWeaponFromOwnedItemList
// [0x00824002] 
// Parameters infos:

void UKFAutoPurchaseHelper::RemoveWeaponFromOwnedItemList ( )
{
	static UFunction* pFnRemoveWeaponFromOwnedItemList = NULL;

	if ( ! pFnRemoveWeaponFromOwnedItemList )
		pFnRemoveWeaponFromOwnedItemList = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.RemoveWeaponFromOwnedItemList" );

	UKFAutoPurchaseHelper_execRemoveWeaponFromOwnedItemList_Parms RemoveWeaponFromOwnedItemList_Parms;

	this->ProcessEvent ( pFnRemoveWeaponFromOwnedItemList, &RemoveWeaponFromOwnedItemList_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AddWeaponToOwnedItemList
// [0x00824002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AddWeaponToOwnedItemList ( )
{
	static UFunction* pFnAddWeaponToOwnedItemList = NULL;

	if ( ! pFnAddWeaponToOwnedItemList )
		pFnAddWeaponToOwnedItemList = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AddWeaponToOwnedItemList" );

	UKFAutoPurchaseHelper_execAddWeaponToOwnedItemList_Parms AddWeaponToOwnedItemList_Parms;

	this->ProcessEvent ( pFnAddWeaponToOwnedItemList, &AddWeaponToOwnedItemList_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.SetWeaponInfo
// [0x00C20002] 
// Parameters infos:

void UKFAutoPurchaseHelper::SetWeaponInfo ( )
{
	static UFunction* pFnSetWeaponInfo = NULL;

	if ( ! pFnSetWeaponInfo )
		pFnSetWeaponInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.SetWeaponInfo" );

	UKFAutoPurchaseHelper_execSetWeaponInfo_Parms SetWeaponInfo_Parms;

	this->ProcessEvent ( pFnSetWeaponInfo, &SetWeaponInfo_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.SetWeaponInformation
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::SetWeaponInformation ( )
{
	static UFunction* pFnSetWeaponInformation = NULL;

	if ( ! pFnSetWeaponInformation )
		pFnSetWeaponInformation = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.SetWeaponInformation" );

	UKFAutoPurchaseHelper_execSetWeaponInformation_Parms SetWeaponInformation_Parms;

	this->ProcessEvent ( pFnSetWeaponInformation, &SetWeaponInformation_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.BoughtAmmo
// [0x00024002] 
// Parameters infos:

void UKFAutoPurchaseHelper::BoughtAmmo ( )
{
	static UFunction* pFnBoughtAmmo = NULL;

	if ( ! pFnBoughtAmmo )
		pFnBoughtAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.BoughtAmmo" );

	UKFAutoPurchaseHelper_execBoughtAmmo_Parms BoughtAmmo_Parms;

	this->ProcessEvent ( pFnBoughtAmmo, &BoughtAmmo_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.UpdateCurrentDosh
// [0x00020102] 
// Parameters infos:

void UKFAutoPurchaseHelper::UpdateCurrentDosh ( )
{
	static UFunction* pFnUpdateCurrentDosh = NULL;

	if ( ! pFnUpdateCurrentDosh )
		pFnUpdateCurrentDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.UpdateCurrentDosh" );

	UKFAutoPurchaseHelper_execUpdateCurrentDosh_Parms UpdateCurrentDosh_Parms;

	this->ProcessEvent ( pFnUpdateCurrentDosh, &UpdateCurrentDosh_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.NotifyDoshChanged
// [0x00020102] 
// Parameters infos:

void UKFAutoPurchaseHelper::NotifyDoshChanged ( )
{
	static UFunction* pFnNotifyDoshChanged = NULL;

	if ( ! pFnNotifyDoshChanged )
		pFnNotifyDoshChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.NotifyDoshChanged" );

	UKFAutoPurchaseHelper_execNotifyDoshChanged_Parms NotifyDoshChanged_Parms;

	this->ProcessEvent ( pFnNotifyDoshChanged, &NotifyDoshChanged_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AddDosh
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AddDosh ( )
{
	static UFunction* pFnAddDosh = NULL;

	if ( ! pFnAddDosh )
		pFnAddDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AddDosh" );

	UKFAutoPurchaseHelper_execAddDosh_Parms AddDosh_Parms;

	this->ProcessEvent ( pFnAddDosh, &AddDosh_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.IsInOwnedItemList
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::IsInOwnedItemList ( )
{
	static UFunction* pFnIsInOwnedItemList = NULL;

	if ( ! pFnIsInOwnedItemList )
		pFnIsInOwnedItemList = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.IsInOwnedItemList" );

	UKFAutoPurchaseHelper_execIsInOwnedItemList_Parms IsInOwnedItemList_Parms;

	this->ProcessEvent ( pFnIsInOwnedItemList, &IsInOwnedItemList_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetItemUpgradeLevelByClassName
// [0x00020102] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetItemUpgradeLevelByClassName ( )
{
	static UFunction* pFnGetItemUpgradeLevelByClassName = NULL;

	if ( ! pFnGetItemUpgradeLevelByClassName )
		pFnGetItemUpgradeLevelByClassName = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetItemUpgradeLevelByClassName" );

	UKFAutoPurchaseHelper_execGetItemUpgradeLevelByClassName_Parms GetItemUpgradeLevelByClassName_Parms;

	this->ProcessEvent ( pFnGetItemUpgradeLevelByClassName, &GetItemUpgradeLevelByClassName_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetAdjustedUpgradePriceFor
// [0x00420102] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetAdjustedUpgradePriceFor ( )
{
	static UFunction* pFnGetAdjustedUpgradePriceFor = NULL;

	if ( ! pFnGetAdjustedUpgradePriceFor )
		pFnGetAdjustedUpgradePriceFor = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetAdjustedUpgradePriceFor" );

	UKFAutoPurchaseHelper_execGetAdjustedUpgradePriceFor_Parms GetAdjustedUpgradePriceFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedUpgradePriceFor, &GetAdjustedUpgradePriceFor_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetAdjustedSellPriceFor
// [0x00420102] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetAdjustedSellPriceFor ( )
{
	static UFunction* pFnGetAdjustedSellPriceFor = NULL;

	if ( ! pFnGetAdjustedSellPriceFor )
		pFnGetAdjustedSellPriceFor = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetAdjustedSellPriceFor" );

	UKFAutoPurchaseHelper_execGetAdjustedSellPriceFor_Parms GetAdjustedSellPriceFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedSellPriceFor, &GetAdjustedSellPriceFor_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetAdjustedBuyPriceFor
// [0x00420102] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetAdjustedBuyPriceFor ( )
{
	static UFunction* pFnGetAdjustedBuyPriceFor = NULL;

	if ( ! pFnGetAdjustedBuyPriceFor )
		pFnGetAdjustedBuyPriceFor = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetAdjustedBuyPriceFor" );

	UKFAutoPurchaseHelper_execGetAdjustedBuyPriceFor_Parms GetAdjustedBuyPriceFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedBuyPriceFor, &GetAdjustedBuyPriceFor_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.IsSellable
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::IsSellable ( )
{
	static UFunction* pFnIsSellable = NULL;

	if ( ! pFnIsSellable )
		pFnIsSellable = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.IsSellable" );

	UKFAutoPurchaseHelper_execIsSellable_Parms IsSellable_Parms;

	this->ProcessEvent ( pFnIsSellable, &IsSellable_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.InitializeOwnedItemList
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::InitializeOwnedItemList ( )
{
	static UFunction* pFnInitializeOwnedItemList = NULL;

	if ( ! pFnInitializeOwnedItemList )
		pFnInitializeOwnedItemList = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.InitializeOwnedItemList" );

	UKFAutoPurchaseHelper_execInitializeOwnedItemList_Parms InitializeOwnedItemList_Parms;

	this->ProcessEvent ( pFnInitializeOwnedItemList, &InitializeOwnedItemList_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetAutoFillCost
// [0x00820002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetAutoFillCost ( )
{
	static UFunction* pFnGetAutoFillCost = NULL;

	if ( ! pFnGetAutoFillCost )
		pFnGetAutoFillCost = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetAutoFillCost" );

	UKFAutoPurchaseHelper_execGetAutoFillCost_Parms GetAutoFillCost_Parms;

	this->ProcessEvent ( pFnGetAutoFillCost, &GetAutoFillCost_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.StartAutoFill
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::StartAutoFill ( )
{
	static UFunction* pFnStartAutoFill = NULL;

	if ( ! pFnStartAutoFill )
		pFnStartAutoFill = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.StartAutoFill" );

	UKFAutoPurchaseHelper_execStartAutoFill_Parms StartAutoFill_Parms;

	this->ProcessEvent ( pFnStartAutoFill, &StartAutoFill_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AutoFillOwnedItems
// [0x00C20002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AutoFillOwnedItems ( )
{
	static UFunction* pFnAutoFillOwnedItems = NULL;

	if ( ! pFnAutoFillOwnedItems )
		pFnAutoFillOwnedItems = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AutoFillOwnedItems" );

	UKFAutoPurchaseHelper_execAutoFillOwnedItems_Parms AutoFillOwnedItems_Parms;

	this->ProcessEvent ( pFnAutoFillOwnedItems, &AutoFillOwnedItems_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.ClearAutoFillDosh
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::ClearAutoFillDosh ( )
{
	static UFunction* pFnClearAutoFillDosh = NULL;

	if ( ! pFnClearAutoFillDosh )
		pFnClearAutoFillDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.ClearAutoFillDosh" );

	UKFAutoPurchaseHelper_execClearAutoFillDosh_Parms ClearAutoFillDosh_Parms;

	this->ProcessEvent ( pFnClearAutoFillDosh, &ClearAutoFillDosh_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.RePoolAutoFillDosh
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::RePoolAutoFillDosh ( )
{
	static UFunction* pFnRePoolAutoFillDosh = NULL;

	if ( ! pFnRePoolAutoFillDosh )
		pFnRePoolAutoFillDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.RePoolAutoFillDosh" );

	UKFAutoPurchaseHelper_execRePoolAutoFillDosh_Parms RePoolAutoFillDosh_Parms;

	this->ProcessEvent ( pFnRePoolAutoFillDosh, &RePoolAutoFillDosh_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AttemptAutoFillOnItem
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AttemptAutoFillOnItem ( )
{
	static UFunction* pFnAttemptAutoFillOnItem = NULL;

	if ( ! pFnAttemptAutoFillOnItem )
		pFnAttemptAutoFillOnItem = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AttemptAutoFillOnItem" );

	UKFAutoPurchaseHelper_execAttemptAutoFillOnItem_Parms AttemptAutoFillOnItem_Parms;

	this->ProcessEvent ( pFnAttemptAutoFillOnItem, &AttemptAutoFillOnItem_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetFillAmmoCost
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetFillAmmoCost ( )
{
	static UFunction* pFnGetFillAmmoCost = NULL;

	if ( ! pFnGetFillAmmoCost )
		pFnGetFillAmmoCost = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetFillAmmoCost" );

	UKFAutoPurchaseHelper_execGetFillAmmoCost_Parms GetFillAmmoCost_Parms;

	this->ProcessEvent ( pFnGetFillAmmoCost, &GetFillAmmoCost_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.FillAmmo
// [0x00424002] 
// Parameters infos:

void UKFAutoPurchaseHelper::FillAmmo ( )
{
	static UFunction* pFnFillAmmo = NULL;

	if ( ! pFnFillAmmo )
		pFnFillAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.FillAmmo" );

	UKFAutoPurchaseHelper_execFillAmmo_Parms FillAmmo_Parms;

	this->ProcessEvent ( pFnFillAmmo, &FillAmmo_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.BuyItemMagazine
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::BuyItemMagazine ( )
{
	static UFunction* pFnBuyItemMagazine = NULL;

	if ( ! pFnBuyItemMagazine )
		pFnBuyItemMagazine = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.BuyItemMagazine" );

	UKFAutoPurchaseHelper_execBuyItemMagazine_Parms BuyItemMagazine_Parms;

	this->ProcessEvent ( pFnBuyItemMagazine, &BuyItemMagazine_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.BuyMagazine
// [0x00820002] 
// Parameters infos:

void UKFAutoPurchaseHelper::BuyMagazine ( )
{
	static UFunction* pFnBuyMagazine = NULL;

	if ( ! pFnBuyMagazine )
		pFnBuyMagazine = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.BuyMagazine" );

	UKFAutoPurchaseHelper_execBuyMagazine_Parms BuyMagazine_Parms;

	this->ProcessEvent ( pFnBuyMagazine, &BuyMagazine_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.BuySecondaryAmmoMag
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::BuySecondaryAmmoMag ( )
{
	static UFunction* pFnBuySecondaryAmmoMag = NULL;

	if ( ! pFnBuySecondaryAmmoMag )
		pFnBuySecondaryAmmoMag = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.BuySecondaryAmmoMag" );

	UKFAutoPurchaseHelper_execBuySecondaryAmmoMag_Parms BuySecondaryAmmoMag_Parms;

	this->ProcessEvent ( pFnBuySecondaryAmmoMag, &BuySecondaryAmmoMag_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.BuyGrenade
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::BuyGrenade ( )
{
	static UFunction* pFnBuyGrenade = NULL;

	if ( ! pFnBuyGrenade )
		pFnBuyGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.BuyGrenade" );

	UKFAutoPurchaseHelper_execBuyGrenade_Parms BuyGrenade_Parms;

	this->ProcessEvent ( pFnBuyGrenade, &BuyGrenade_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetFillGrenadeCost
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetFillGrenadeCost ( )
{
	static UFunction* pFnGetFillGrenadeCost = NULL;

	if ( ! pFnGetFillGrenadeCost )
		pFnGetFillGrenadeCost = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetFillGrenadeCost" );

	UKFAutoPurchaseHelper_execGetFillGrenadeCost_Parms GetFillGrenadeCost_Parms;

	this->ProcessEvent ( pFnGetFillGrenadeCost, &GetFillGrenadeCost_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AttemptBuyArmorChunk
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AttemptBuyArmorChunk ( )
{
	static UFunction* pFnAttemptBuyArmorChunk = NULL;

	if ( ! pFnAttemptBuyArmorChunk )
		pFnAttemptBuyArmorChunk = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AttemptBuyArmorChunk" );

	UKFAutoPurchaseHelper_execAttemptBuyArmorChunk_Parms AttemptBuyArmorChunk_Parms;

	this->ProcessEvent ( pFnAttemptBuyArmorChunk, &AttemptBuyArmorChunk_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.FillArmor
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::FillArmor ( )
{
	static UFunction* pFnFillArmor = NULL;

	if ( ! pFnFillArmor )
		pFnFillArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.FillArmor" );

	UKFAutoPurchaseHelper_execFillArmor_Parms FillArmor_Parms;

	this->ProcessEvent ( pFnFillArmor, &FillArmor_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetFillArmorCost
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetFillArmorCost ( )
{
	static UFunction* pFnGetFillArmorCost = NULL;

	if ( ! pFnGetFillArmorCost )
		pFnGetFillArmorCost = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetFillArmorCost" );

	UKFAutoPurchaseHelper_execGetFillArmorCost_Parms GetFillArmorCost_Parms;

	this->ProcessEvent ( pFnGetFillArmorCost, &GetFillArmorCost_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.UpgradeWeapon
// [0x00820002] 
// Parameters infos:

void UKFAutoPurchaseHelper::UpgradeWeapon ( )
{
	static UFunction* pFnUpgradeWeapon = NULL;

	if ( ! pFnUpgradeWeapon )
		pFnUpgradeWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.UpgradeWeapon" );

	UKFAutoPurchaseHelper_execUpgradeWeapon_Parms UpgradeWeapon_Parms;

	this->ProcessEvent ( pFnUpgradeWeapon, &UpgradeWeapon_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.SellWeapon
// [0x00024002] 
// Parameters infos:

void UKFAutoPurchaseHelper::SellWeapon ( )
{
	static UFunction* pFnSellWeapon = NULL;

	if ( ! pFnSellWeapon )
		pFnSellWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.SellWeapon" );

	UKFAutoPurchaseHelper_execSellWeapon_Parms SellWeapon_Parms;

	this->ProcessEvent ( pFnSellWeapon, &SellWeapon_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.PurchaseWeapon
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::PurchaseWeapon ( )
{
	static UFunction* pFnPurchaseWeapon = NULL;

	if ( ! pFnPurchaseWeapon )
		pFnPurchaseWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.PurchaseWeapon" );

	UKFAutoPurchaseHelper_execPurchaseWeapon_Parms PurchaseWeapon_Parms;

	this->ProcessEvent ( pFnPurchaseWeapon, &PurchaseWeapon_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.CanUpgrade
// [0x00424002] 
// Parameters infos:

void UKFAutoPurchaseHelper::CanUpgrade ( )
{
	static UFunction* pFnCanUpgrade = NULL;

	if ( ! pFnCanUpgrade )
		pFnCanUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.CanUpgrade" );

	UKFAutoPurchaseHelper_execCanUpgrade_Parms CanUpgrade_Parms;

	this->ProcessEvent ( pFnCanUpgrade, &CanUpgrade_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.CanCarry
// [0x00424002] 
// Parameters infos:

void UKFAutoPurchaseHelper::CanCarry ( )
{
	static UFunction* pFnCanCarry = NULL;

	if ( ! pFnCanCarry )
		pFnCanCarry = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.CanCarry" );

	UKFAutoPurchaseHelper_execCanCarry_Parms CanCarry_Parms;

	this->ProcessEvent ( pFnCanCarry, &CanCarry_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetCanAfford
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetCanAfford ( )
{
	static UFunction* pFnGetCanAfford = NULL;

	if ( ! pFnGetCanAfford )
		pFnGetCanAfford = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetCanAfford" );

	UKFAutoPurchaseHelper_execGetCanAfford_Parms GetCanAfford_Parms;

	this->ProcessEvent ( pFnGetCanAfford, &GetCanAfford_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.bCanPurchase
// [0x00024002] 
// Parameters infos:

void UKFAutoPurchaseHelper::bCanPurchase ( )
{
	static UFunction* pFnbCanPurchase = NULL;

	if ( ! pFnbCanPurchase )
		pFnbCanPurchase = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.bCanPurchase" );

	UKFAutoPurchaseHelper_execbCanPurchase_Parms bCanPurchase_Parms;

	this->ProcessEvent ( pFnbCanPurchase, &bCanPurchase_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetPotentialDosh
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetPotentialDosh ( )
{
	static UFunction* pFnGetPotentialDosh = NULL;

	if ( ! pFnGetPotentialDosh )
		pFnGetPotentialDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetPotentialDosh" );

	UKFAutoPurchaseHelper_execGetPotentialDosh_Parms GetPotentialDosh_Parms;

	this->ProcessEvent ( pFnGetPotentialDosh, &GetPotentialDosh_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.DoIOwnThisWeapon
// [0x00420002] 
// Parameters infos:

void UKFAutoPurchaseHelper::DoIOwnThisWeapon ( )
{
	static UFunction* pFnDoIOwnThisWeapon = NULL;

	if ( ! pFnDoIOwnThisWeapon )
		pFnDoIOwnThisWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.DoIOwnThisWeapon" );

	UKFAutoPurchaseHelper_execDoIOwnThisWeapon_Parms DoIOwnThisWeapon_Parms;

	this->ProcessEvent ( pFnDoIOwnThisWeapon, &DoIOwnThisWeapon_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.SellOffPerkWeapons
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::SellOffPerkWeapons ( )
{
	static UFunction* pFnSellOffPerkWeapons = NULL;

	if ( ! pFnSellOffPerkWeapons )
		pFnSellOffPerkWeapons = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.SellOffPerkWeapons" );

	UKFAutoPurchaseHelper_execSellOffPerkWeapons_Parms SellOffPerkWeapons_Parms;

	this->ProcessEvent ( pFnSellOffPerkWeapons, &SellOffPerkWeapons_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.SellOnPerkWeapons
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::SellOnPerkWeapons ( )
{
	static UFunction* pFnSellOnPerkWeapons = NULL;

	if ( ! pFnSellOnPerkWeapons )
		pFnSellOnPerkWeapons = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.SellOnPerkWeapons" );

	UKFAutoPurchaseHelper_execSellOnPerkWeapons_Parms SellOnPerkWeapons_Parms;

	this->ProcessEvent ( pFnSellOnPerkWeapons, &SellOnPerkWeapons_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetHighValuedWeapon
// [0x00C20002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetHighValuedWeapon ( )
{
	static UFunction* pFnGetHighValuedWeapon = NULL;

	if ( ! pFnGetHighValuedWeapon )
		pFnGetHighValuedWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetHighValuedWeapon" );

	UKFAutoPurchaseHelper_execGetHighValuedWeapon_Parms GetHighValuedWeapon_Parms;

	this->ProcessEvent ( pFnGetHighValuedWeapon, &GetHighValuedWeapon_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetHighValuedOnPerkWeapon
// [0x00C20002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetHighValuedOnPerkWeapon ( )
{
	static UFunction* pFnGetHighValuedOnPerkWeapon = NULL;

	if ( ! pFnGetHighValuedOnPerkWeapon )
		pFnGetHighValuedOnPerkWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetHighValuedOnPerkWeapon" );

	UKFAutoPurchaseHelper_execGetHighValuedOnPerkWeapon_Parms GetHighValuedOnPerkWeapon_Parms;

	this->ProcessEvent ( pFnGetHighValuedOnPerkWeapon, &GetHighValuedOnPerkWeapon_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetLastAffordableItemIndex
// [0x00C24002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetLastAffordableItemIndex ( )
{
	static UFunction* pFnGetLastAffordableItemIndex = NULL;

	if ( ! pFnGetLastAffordableItemIndex )
		pFnGetLastAffordableItemIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetLastAffordableItemIndex" );

	UKFAutoPurchaseHelper_execGetLastAffordableItemIndex_Parms GetLastAffordableItemIndex_Parms;

	this->ProcessEvent ( pFnGetLastAffordableItemIndex, &GetLastAffordableItemIndex_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AttemptUpgrade
// [0x00C24002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AttemptUpgrade ( )
{
	static UFunction* pFnAttemptUpgrade = NULL;

	if ( ! pFnAttemptUpgrade )
		pFnAttemptUpgrade = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AttemptUpgrade" );

	UKFAutoPurchaseHelper_execAttemptUpgrade_Parms AttemptUpgrade_Parms;

	this->ProcessEvent ( pFnAttemptUpgrade, &AttemptUpgrade_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.GetTopTierWeapon
// [0x00C20002] 
// Parameters infos:

void UKFAutoPurchaseHelper::GetTopTierWeapon ( )
{
	static UFunction* pFnGetTopTierWeapon = NULL;

	if ( ! pFnGetTopTierWeapon )
		pFnGetTopTierWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.GetTopTierWeapon" );

	UKFAutoPurchaseHelper_execGetTopTierWeapon_Parms GetTopTierWeapon_Parms;

	this->ProcessEvent ( pFnGetTopTierWeapon, &GetTopTierWeapon_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.AttemptToPurchaseNextLowerTier
// [0x00C20002] 
// Parameters infos:

void UKFAutoPurchaseHelper::AttemptToPurchaseNextLowerTier ( )
{
	static UFunction* pFnAttemptToPurchaseNextLowerTier = NULL;

	if ( ! pFnAttemptToPurchaseNextLowerTier )
		pFnAttemptToPurchaseNextLowerTier = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.AttemptToPurchaseNextLowerTier" );

	UKFAutoPurchaseHelper_execAttemptToPurchaseNextLowerTier_Parms AttemptToPurchaseNextLowerTier_Parms;

	this->ProcessEvent ( pFnAttemptToPurchaseNextLowerTier, &AttemptToPurchaseNextLowerTier_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.DoAutoPurchase
// [0x00820002] 
// Parameters infos:

void UKFAutoPurchaseHelper::DoAutoPurchase ( )
{
	static UFunction* pFnDoAutoPurchase = NULL;

	if ( ! pFnDoAutoPurchase )
		pFnDoAutoPurchase = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.DoAutoPurchase" );

	UKFAutoPurchaseHelper_execDoAutoPurchase_Parms DoAutoPurchase_Parms;

	this->ProcessEvent ( pFnDoAutoPurchase, &DoAutoPurchase_Parms, NULL );
};

// Function KFGame.KFAutoPurchaseHelper.Initialize
// [0x00020002] 
// Parameters infos:

void UKFAutoPurchaseHelper::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFAutoPurchaseHelper.Initialize" );

	UKFAutoPurchaseHelper_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFDataStore_OnlineGameSearch.GetCurrentKFGameSearch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFDataStore_OnlineGameSearch::GetCurrentKFGameSearch ( )
{
	static UFunction* pFnGetCurrentKFGameSearch = NULL;

	if ( ! pFnGetCurrentKFGameSearch )
		pFnGetCurrentKFGameSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFDataStore_OnlineGameSearch.GetCurrentKFGameSearch" );

	UKFDataStore_OnlineGameSearch_execGetCurrentKFGameSearch_Parms GetCurrentKFGameSearch_Parms;

	pFnGetCurrentKFGameSearch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentKFGameSearch, &GetCurrentKFGameSearch_Parms, NULL );

	pFnGetCurrentKFGameSearch->FunctionFlags |= 0x400;
};

// Function KFGame.KFDataStore_OnlineGameSearch.GetActiveKFGameSearch
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFDataStore_OnlineGameSearch::GetActiveKFGameSearch ( )
{
	static UFunction* pFnGetActiveKFGameSearch = NULL;

	if ( ! pFnGetActiveKFGameSearch )
		pFnGetActiveKFGameSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFDataStore_OnlineGameSearch.GetActiveKFGameSearch" );

	UKFDataStore_OnlineGameSearch_execGetActiveKFGameSearch_Parms GetActiveKFGameSearch_Parms;

	pFnGetActiveKFGameSearch->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetActiveKFGameSearch, &GetActiveKFGameSearch_Parms, NULL );

	pFnGetActiveKFGameSearch->FunctionFlags |= 0x400;
};

// Function KFGame.KFDataStore_OnlineGameSearch.CancelFindServerPlayerList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFDataStore_OnlineGameSearch::CancelFindServerPlayerList ( )
{
	static UFunction* pFnCancelFindServerPlayerList = NULL;

	if ( ! pFnCancelFindServerPlayerList )
		pFnCancelFindServerPlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFDataStore_OnlineGameSearch.CancelFindServerPlayerList" );

	UKFDataStore_OnlineGameSearch_execCancelFindServerPlayerList_Parms CancelFindServerPlayerList_Parms;

	pFnCancelFindServerPlayerList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnCancelFindServerPlayerList, &CancelFindServerPlayerList_Parms, NULL );

	pFnCancelFindServerPlayerList->FunctionFlags |= 0x400;
};

// Function KFGame.KFDataStore_OnlineGameSearch.FindServerPlayerList
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFDataStore_OnlineGameSearch::FindServerPlayerList ( )
{
	static UFunction* pFnFindServerPlayerList = NULL;

	if ( ! pFnFindServerPlayerList )
		pFnFindServerPlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFDataStore_OnlineGameSearch.FindServerPlayerList" );

	UKFDataStore_OnlineGameSearch_execFindServerPlayerList_Parms FindServerPlayerList_Parms;

	pFnFindServerPlayerList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFindServerPlayerList, &FindServerPlayerList_Parms, NULL );

	pFnFindServerPlayerList->FunctionFlags |= 0x400;
};

// Function KFGame.KFDataStore_OnlineGameSearch.OnSearchComplete
// [0x00020002] 
// Parameters infos:

void UKFDataStore_OnlineGameSearch::OnSearchComplete ( )
{
	static UFunction* pFnOnSearchComplete = NULL;

	if ( ! pFnOnSearchComplete )
		pFnOnSearchComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFDataStore_OnlineGameSearch.OnSearchComplete" );

	UKFDataStore_OnlineGameSearch_execOnSearchComplete_Parms OnSearchComplete_Parms;

	this->ProcessEvent ( pFnOnSearchComplete, &OnSearchComplete_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.GetAssociationIdentifier
// [0x00020002] 
// Parameters infos:

void UKFGameViewportClient::GetAssociationIdentifier ( )
{
	static UFunction* pFnGetAssociationIdentifier = NULL;

	if ( ! pFnGetAssociationIdentifier )
		pFnGetAssociationIdentifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.GetAssociationIdentifier" );

	UKFGameViewportClient_execGetAssociationIdentifier_Parms GetAssociationIdentifier_Parms;

	this->ProcessEvent ( pFnGetAssociationIdentifier, &GetAssociationIdentifier_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.DrawMapInfo
// [0x00020002] 
// Parameters infos:

void UKFGameViewportClient::DrawMapInfo ( )
{
	static UFunction* pFnDrawMapInfo = NULL;

	if ( ! pFnDrawMapInfo )
		pFnDrawMapInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.DrawMapInfo" );

	UKFGameViewportClient_execDrawMapInfo_Parms DrawMapInfo_Parms;

	this->ProcessEvent ( pFnDrawMapInfo, &DrawMapInfo_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.DrawCancelString
// [0x00020002] 
// Parameters infos:

void UKFGameViewportClient::DrawCancelString ( )
{
	static UFunction* pFnDrawCancelString = NULL;

	if ( ! pFnDrawCancelString )
		pFnDrawCancelString = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.DrawCancelString" );

	UKFGameViewportClient_execDrawCancelString_Parms DrawCancelString_Parms;

	this->ProcessEvent ( pFnDrawCancelString, &DrawCancelString_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.DrawDownloadingString
// [0x00020002] 
// Parameters infos:

void UKFGameViewportClient::DrawDownloadingString ( )
{
	static UFunction* pFnDrawDownloadingString = NULL;

	if ( ! pFnDrawDownloadingString )
		pFnDrawDownloadingString = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.DrawDownloadingString" );

	UKFGameViewportClient_execDrawDownloadingString_Parms DrawDownloadingString_Parms;

	this->ProcessEvent ( pFnDrawDownloadingString, &DrawDownloadingString_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.DrawTransitionMessage
// [0x00020002] 
// Parameters infos:

void UKFGameViewportClient::DrawTransitionMessage ( )
{
	static UFunction* pFnDrawTransitionMessage = NULL;

	if ( ! pFnDrawTransitionMessage )
		pFnDrawTransitionMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.DrawTransitionMessage" );

	UKFGameViewportClient_execDrawTransitionMessage_Parms DrawTransitionMessage_Parms;

	this->ProcessEvent ( pFnDrawTransitionMessage, &DrawTransitionMessage_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.GetRandomLoadingMessage
// [0x00020002] 
// Parameters infos:

void UKFGameViewportClient::GetRandomLoadingMessage ( )
{
	static UFunction* pFnGetRandomLoadingMessage = NULL;

	if ( ! pFnGetRandomLoadingMessage )
		pFnGetRandomLoadingMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.GetRandomLoadingMessage" );

	UKFGameViewportClient_execGetRandomLoadingMessage_Parms GetRandomLoadingMessage_Parms;

	this->ProcessEvent ( pFnGetRandomLoadingMessage, &GetRandomLoadingMessage_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.DrawTransition
// [0x00020002] 
// Parameters infos:

void UKFGameViewportClient::DrawTransition ( )
{
	static UFunction* pFnDrawTransition = NULL;

	if ( ! pFnDrawTransition )
		pFnDrawTransition = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.DrawTransition" );

	UKFGameViewportClient_execDrawTransition_Parms DrawTransition_Parms;

	this->ProcessEvent ( pFnDrawTransition, &DrawTransition_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.GetErrorMessage
// [0x00420002] 
// Parameters infos:

void UKFGameViewportClient::GetErrorMessage ( )
{
	static UFunction* pFnGetErrorMessage = NULL;

	if ( ! pFnGetErrorMessage )
		pFnGetErrorMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.GetErrorMessage" );

	UKFGameViewportClient_execGetErrorMessage_Parms GetErrorMessage_Parms;

	this->ProcessEvent ( pFnGetErrorMessage, &GetErrorMessage_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.PreBrowse
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGameViewportClient::eventPreBrowse ( )
{
	static UFunction* pFnPreBrowse = NULL;

	if ( ! pFnPreBrowse )
		pFnPreBrowse = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.PreBrowse" );

	UKFGameViewportClient_eventPreBrowse_Parms PreBrowse_Parms;

	this->ProcessEvent ( pFnPreBrowse, &PreBrowse_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.ClearDownloadInfo
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGameViewportClient::eventClearDownloadInfo ( )
{
	static UFunction* pFnClearDownloadInfo = NULL;

	if ( ! pFnClearDownloadInfo )
		pFnClearDownloadInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.ClearDownloadInfo" );

	UKFGameViewportClient_eventClearDownloadInfo_Parms ClearDownloadInfo_Parms;

	this->ProcessEvent ( pFnClearDownloadInfo, &ClearDownloadInfo_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.NotifyDownloadProgress
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void UKFGameViewportClient::eventNotifyDownloadProgress ( )
{
	static UFunction* pFnNotifyDownloadProgress = NULL;

	if ( ! pFnNotifyDownloadProgress )
		pFnNotifyDownloadProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.NotifyDownloadProgress" );

	UKFGameViewportClient_eventNotifyDownloadProgress_Parms NotifyDownloadProgress_Parms;

	this->ProcessEvent ( pFnNotifyDownloadProgress, &NotifyDownloadProgress_Parms, NULL );
};

// Function KFGame.KFGameViewportClient.NotifyConnectionError
// [0x00024002] 
// Parameters infos:

void UKFGameViewportClient::NotifyConnectionError ( )
{
	static UFunction* pFnNotifyConnectionError = NULL;

	if ( ! pFnNotifyConnectionError )
		pFnNotifyConnectionError = UObject::FindObject< UFunction > ( "Function KFGame.KFGameViewportClient.NotifyConnectionError" );

	UKFGameViewportClient_execNotifyConnectionError_Parms NotifyConnectionError_Parms;

	this->ProcessEvent ( pFnNotifyConnectionError, &NotifyConnectionError_Parms, NULL );
};

// Function KFGame.KFGFxObject_Container.SetChatWindowMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Container::SetChatWindowMessage ( )
{
	static UFunction* pFnSetChatWindowMessage = NULL;

	if ( ! pFnSetChatWindowMessage )
		pFnSetChatWindowMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Container.SetChatWindowMessage" );

	UKFGFxObject_Container_execSetChatWindowMessage_Parms SetChatWindowMessage_Parms;

	this->ProcessEvent ( pFnSetChatWindowMessage, &SetChatWindowMessage_Parms, NULL );
};

// Function KFGame.KFGFxObject_Container.SetComponentInactive
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Container::SetComponentInactive ( )
{
	static UFunction* pFnSetComponentInactive = NULL;

	if ( ! pFnSetComponentInactive )
		pFnSetComponentInactive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Container.SetComponentInactive" );

	UKFGFxObject_Container_execSetComponentInactive_Parms SetComponentInactive_Parms;

	this->ProcessEvent ( pFnSetComponentInactive, &SetComponentInactive_Parms, NULL );
};

// Function KFGame.KFGFxObject_Container.SetMainComponent
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Container::SetMainComponent ( )
{
	static UFunction* pFnSetMainComponent = NULL;

	if ( ! pFnSetMainComponent )
		pFnSetMainComponent = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Container.SetMainComponent" );

	UKFGFxObject_Container_execSetMainComponent_Parms SetMainComponent_Parms;

	this->ProcessEvent ( pFnSetMainComponent, &SetMainComponent_Parms, NULL );
};

// Function KFGame.KFGFxObject_Container.ConsoleLocalize
// [0x00024002] 
// Parameters infos:

void UKFGFxObject_Container::ConsoleLocalize ( )
{
	static UFunction* pFnConsoleLocalize = NULL;

	if ( ! pFnConsoleLocalize )
		pFnConsoleLocalize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Container.ConsoleLocalize" );

	UKFGFxObject_Container_execConsoleLocalize_Parms ConsoleLocalize_Parms;

	this->ProcessEvent ( pFnConsoleLocalize, &ConsoleLocalize_Parms, NULL );
};

// Function KFGame.KFGFxObject_Container.OneSecondLoop
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Container::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Container.OneSecondLoop" );

	UKFGFxObject_Container_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxObject_Container.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Container::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Container.Initialize" );

	UKFGFxObject_Container_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.GetBoolByEFilter_Key
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::GetBoolByEFilter_Key ( )
{
	static UFunction* pFnGetBoolByEFilter_Key = NULL;

	if ( ! pFnGetBoolByEFilter_Key )
		pFnGetBoolByEFilter_Key = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.GetBoolByEFilter_Key" );

	UKFGFxServerBrowser_Filters_execGetBoolByEFilter_Key_Parms GetBoolByEFilter_Key_Parms;

	this->ProcessEvent ( pFnGetBoolByEFilter_Key, &GetBoolByEFilter_Key_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.SetBoolByEFilter_Key
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::SetBoolByEFilter_Key ( )
{
	static UFunction* pFnSetBoolByEFilter_Key = NULL;

	if ( ! pFnSetBoolByEFilter_Key )
		pFnSetBoolByEFilter_Key = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.SetBoolByEFilter_Key" );

	UKFGFxServerBrowser_Filters_execSetBoolByEFilter_Key_Parms SetBoolByEFilter_Key_Parms;

	this->ProcessEvent ( pFnSetBoolByEFilter_Key, &SetBoolByEFilter_Key_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.ResetFilters
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::ResetFilters ( )
{
	static UFunction* pFnResetFilters = NULL;

	if ( ! pFnResetFilters )
		pFnResetFilters = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.ResetFilters" );

	UKFGFxServerBrowser_Filters_execResetFilters_Parms ResetFilters_Parms;

	this->ProcessEvent ( pFnResetFilters, &ResetFilters_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.ClearPendingValues
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::ClearPendingValues ( )
{
	static UFunction* pFnClearPendingValues = NULL;

	if ( ! pFnClearPendingValues )
		pFnClearPendingValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.ClearPendingValues" );

	UKFGFxServerBrowser_Filters_execClearPendingValues_Parms ClearPendingValues_Parms;

	this->ProcessEvent ( pFnClearPendingValues, &ClearPendingValues_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.ApplyFilters
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::ApplyFilters ( )
{
	static UFunction* pFnApplyFilters = NULL;

	if ( ! pFnApplyFilters )
		pFnApplyFilters = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.ApplyFilters" );

	UKFGFxServerBrowser_Filters_execApplyFilters_Parms ApplyFilters_Parms;

	this->ProcessEvent ( pFnApplyFilters, &ApplyFilters_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.PingChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::PingChanged ( )
{
	static UFunction* pFnPingChanged = NULL;

	if ( ! pFnPingChanged )
		pFnPingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.PingChanged" );

	UKFGFxServerBrowser_Filters_execPingChanged_Parms PingChanged_Parms;

	this->ProcessEvent ( pFnPingChanged, &PingChanged_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.LengthChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::LengthChanged ( )
{
	static UFunction* pFnLengthChanged = NULL;

	if ( ! pFnLengthChanged )
		pFnLengthChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.LengthChanged" );

	UKFGFxServerBrowser_Filters_execLengthChanged_Parms LengthChanged_Parms;

	this->ProcessEvent ( pFnLengthChanged, &LengthChanged_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.DifficultyChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::DifficultyChanged ( )
{
	static UFunction* pFnDifficultyChanged = NULL;

	if ( ! pFnDifficultyChanged )
		pFnDifficultyChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.DifficultyChanged" );

	UKFGFxServerBrowser_Filters_execDifficultyChanged_Parms DifficultyChanged_Parms;

	this->ProcessEvent ( pFnDifficultyChanged, &DifficultyChanged_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.MapChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::MapChanged ( )
{
	static UFunction* pFnMapChanged = NULL;

	if ( ! pFnMapChanged )
		pFnMapChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.MapChanged" );

	UKFGFxServerBrowser_Filters_execMapChanged_Parms MapChanged_Parms;

	this->ProcessEvent ( pFnMapChanged, &MapChanged_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.ModeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::ModeChanged ( )
{
	static UFunction* pFnModeChanged = NULL;

	if ( ! pFnModeChanged )
		pFnModeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.ModeChanged" );

	UKFGFxServerBrowser_Filters_execModeChanged_Parms ModeChanged_Parms;

	this->ProcessEvent ( pFnModeChanged, &ModeChanged_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.CreateList
// [0x00024002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::CreateList ( )
{
	static UFunction* pFnCreateList = NULL;

	if ( ! pFnCreateList )
		pFnCreateList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.CreateList" );

	UKFGFxServerBrowser_Filters_execCreateList_Parms CreateList_Parms;

	this->ProcessEvent ( pFnCreateList, &CreateList_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.SetModeMenus
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::SetModeMenus ( )
{
	static UFunction* pFnSetModeMenus = NULL;

	if ( ! pFnSetModeMenus )
		pFnSetModeMenus = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.SetModeMenus" );

	UKFGFxServerBrowser_Filters_execSetModeMenus_Parms SetModeMenus_Parms;

	this->ProcessEvent ( pFnSetModeMenus, &SetModeMenus_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.LocalizeCheckBoxes
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::LocalizeCheckBoxes ( )
{
	static UFunction* pFnLocalizeCheckBoxes = NULL;

	if ( ! pFnLocalizeCheckBoxes )
		pFnLocalizeCheckBoxes = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.LocalizeCheckBoxes" );

	UKFGFxServerBrowser_Filters_execLocalizeCheckBoxes_Parms LocalizeCheckBoxes_Parms;

	this->ProcessEvent ( pFnLocalizeCheckBoxes, &LocalizeCheckBoxes_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.LocalizeText" );

	UKFGFxServerBrowser_Filters_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.InitFiltersArray
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::InitFiltersArray ( )
{
	static UFunction* pFnInitFiltersArray = NULL;

	if ( ! pFnInitFiltersArray )
		pFnInitFiltersArray = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.InitFiltersArray" );

	UKFGFxServerBrowser_Filters_execInitFiltersArray_Parms InitFiltersArray_Parms;

	this->ProcessEvent ( pFnInitFiltersArray, &InitFiltersArray_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.GetSelectedGameLength
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFGFxServerBrowser_Filters::GetSelectedGameLength ( )
{
	static UFunction* pFnGetSelectedGameLength = NULL;

	if ( ! pFnGetSelectedGameLength )
		pFnGetSelectedGameLength = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.GetSelectedGameLength" );

	UKFGFxServerBrowser_Filters_execGetSelectedGameLength_Parms GetSelectedGameLength_Parms;

	pFnGetSelectedGameLength->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedGameLength, &GetSelectedGameLength_Parms, NULL );

	pFnGetSelectedGameLength->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxServerBrowser_Filters.GetSelectedDifficulty
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFGFxServerBrowser_Filters::GetSelectedDifficulty ( )
{
	static UFunction* pFnGetSelectedDifficulty = NULL;

	if ( ! pFnGetSelectedDifficulty )
		pFnGetSelectedDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.GetSelectedDifficulty" );

	UKFGFxServerBrowser_Filters_execGetSelectedDifficulty_Parms GetSelectedDifficulty_Parms;

	pFnGetSelectedDifficulty->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedDifficulty, &GetSelectedDifficulty_Parms, NULL );

	pFnGetSelectedDifficulty->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxServerBrowser_Filters.GetSelectedMap
// [0x00020600] ( FUNC_Exec | FUNC_Native )
// Parameters infos:

void UKFGFxServerBrowser_Filters::GetSelectedMap ( )
{
	static UFunction* pFnGetSelectedMap = NULL;

	if ( ! pFnGetSelectedMap )
		pFnGetSelectedMap = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.GetSelectedMap" );

	UKFGFxServerBrowser_Filters_execGetSelectedMap_Parms GetSelectedMap_Parms;

	pFnGetSelectedMap->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSelectedMap, &GetSelectedMap_Parms, NULL );

	pFnGetSelectedMap->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxServerBrowser_Filters.AdjustSavedFiltersToMode
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::AdjustSavedFiltersToMode ( )
{
	static UFunction* pFnAdjustSavedFiltersToMode = NULL;

	if ( ! pFnAdjustSavedFiltersToMode )
		pFnAdjustSavedFiltersToMode = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.AdjustSavedFiltersToMode" );

	UKFGFxServerBrowser_Filters_execAdjustSavedFiltersToMode_Parms AdjustSavedFiltersToMode_Parms;

	this->ProcessEvent ( pFnAdjustSavedFiltersToMode, &AdjustSavedFiltersToMode_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.GetUsableGameMode
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::GetUsableGameMode ( )
{
	static UFunction* pFnGetUsableGameMode = NULL;

	if ( ! pFnGetUsableGameMode )
		pFnGetUsableGameMode = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.GetUsableGameMode" );

	UKFGFxServerBrowser_Filters_execGetUsableGameMode_Parms GetUsableGameMode_Parms;

	this->ProcessEvent ( pFnGetUsableGameMode, &GetUsableGameMode_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_Filters.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_Filters::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_Filters.Initialize" );

	UKFGFxServerBrowser_Filters_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.SetSelectedServerFavorited
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::SetSelectedServerFavorited ( )
{
	static UFunction* pFnSetSelectedServerFavorited = NULL;

	if ( ! pFnSetSelectedServerFavorited )
		pFnSetSelectedServerFavorited = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.SetSelectedServerFavorited" );

	UKFGFxServerBrowser_ServerList_execSetSelectedServerFavorited_Parms SetSelectedServerFavorited_Parms;

	this->ProcessEvent ( pFnSetSelectedServerFavorited, &SetSelectedServerFavorited_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.IsSelectedServerFavorited
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::IsSelectedServerFavorited ( )
{
	static UFunction* pFnIsSelectedServerFavorited = NULL;

	if ( ! pFnIsSelectedServerFavorited )
		pFnIsSelectedServerFavorited = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.IsSelectedServerFavorited" );

	UKFGFxServerBrowser_ServerList_execIsSelectedServerFavorited_Parms IsSelectedServerFavorited_Parms;

	this->ProcessEvent ( pFnIsSelectedServerFavorited, &IsSelectedServerFavorited_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.IsEndlessModeIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::IsEndlessModeIndex ( )
{
	static UFunction* pFnIsEndlessModeIndex = NULL;

	if ( ! pFnIsEndlessModeIndex )
		pFnIsEndlessModeIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.IsEndlessModeIndex" );

	UKFGFxServerBrowser_ServerList_execIsEndlessModeIndex_Parms IsEndlessModeIndex_Parms;

	this->ProcessEvent ( pFnIsEndlessModeIndex, &IsEndlessModeIndex_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.UpdateListDataProvider
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::UpdateListDataProvider ( )
{
	static UFunction* pFnUpdateListDataProvider = NULL;

	if ( ! pFnUpdateListDataProvider )
		pFnUpdateListDataProvider = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.UpdateListDataProvider" );

	UKFGFxServerBrowser_ServerList_execUpdateListDataProvider_Parms UpdateListDataProvider_Parms;

	this->ProcessEvent ( pFnUpdateListDataProvider, &UpdateListDataProvider_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnServerSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnServerSelected ( )
{
	static UFunction* pFnOnServerSelected = NULL;

	if ( ! pFnOnServerSelected )
		pFnOnServerSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnServerSelected" );

	UKFGFxServerBrowser_ServerList_execOnServerSelected_Parms OnServerSelected_Parms;

	this->ProcessEvent ( pFnOnServerSelected, &OnServerSelected_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.SetRefreshingIndicator
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::SetRefreshingIndicator ( )
{
	static UFunction* pFnSetRefreshingIndicator = NULL;

	if ( ! pFnSetRefreshingIndicator )
		pFnSetRefreshingIndicator = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.SetRefreshingIndicator" );

	UKFGFxServerBrowser_ServerList_execSetRefreshingIndicator_Parms SetRefreshingIndicator_Parms;

	this->ProcessEvent ( pFnSetRefreshingIndicator, &SetRefreshingIndicator_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.GetServerDetails
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::GetServerDetails ( )
{
	static UFunction* pFnGetServerDetails = NULL;

	if ( ! pFnGetServerDetails )
		pFnGetServerDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.GetServerDetails" );

	UKFGFxServerBrowser_ServerList_execGetServerDetails_Parms GetServerDetails_Parms;

	this->ProcessEvent ( pFnGetServerDetails, &GetServerDetails_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.ClearSearchResults
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::ClearSearchResults ( )
{
	static UFunction* pFnClearSearchResults = NULL;

	if ( ! pFnClearSearchResults )
		pFnClearSearchResults = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.ClearSearchResults" );

	UKFGFxServerBrowser_ServerList_execClearSearchResults_Parms ClearSearchResults_Parms;

	this->ProcessEvent ( pFnClearSearchResults, &ClearSearchResults_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnRefreshServerDetails
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnRefreshServerDetails ( )
{
	static UFunction* pFnOnRefreshServerDetails = NULL;

	if ( ! pFnOnRefreshServerDetails )
		pFnOnRefreshServerDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnRefreshServerDetails" );

	UKFGFxServerBrowser_ServerList_execOnRefreshServerDetails_Parms OnRefreshServerDetails_Parms;

	this->ProcessEvent ( pFnOnRefreshServerDetails, &OnRefreshServerDetails_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.BuildJoinFiltersRequestURL
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::BuildJoinFiltersRequestURL ( )
{
	static UFunction* pFnBuildJoinFiltersRequestURL = NULL;

	if ( ! pFnBuildJoinFiltersRequestURL )
		pFnBuildJoinFiltersRequestURL = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.BuildJoinFiltersRequestURL" );

	UKFGFxServerBrowser_ServerList_execBuildJoinFiltersRequestURL_Parms BuildJoinFiltersRequestURL_Parms;

	this->ProcessEvent ( pFnBuildJoinFiltersRequestURL, &BuildJoinFiltersRequestURL_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.BuildJoinURL
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::BuildJoinURL ( )
{
	static UFunction* pFnBuildJoinURL = NULL;

	if ( ! pFnBuildJoinURL )
		pFnBuildJoinURL = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.BuildJoinURL" );

	UKFGFxServerBrowser_ServerList_execBuildJoinURL_Parms BuildJoinURL_Parms;

	this->ProcessEvent ( pFnBuildJoinURL, &BuildJoinURL_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.JoinGameURL
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::JoinGameURL ( )
{
	static UFunction* pFnJoinGameURL = NULL;

	if ( ! pFnJoinGameURL )
		pFnJoinGameURL = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.JoinGameURL" );

	UKFGFxServerBrowser_ServerList_execJoinGameURL_Parms JoinGameURL_Parms;

	this->ProcessEvent ( pFnJoinGameURL, &JoinGameURL_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.ServerConnect
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFGFxServerBrowser_ServerList::ServerConnect ( )
{
	static UFunction* pFnServerConnect = NULL;

	if ( ! pFnServerConnect )
		pFnServerConnect = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.ServerConnect" );

	UKFGFxServerBrowser_ServerList_execServerConnect_Parms ServerConnect_Parms;

	pFnServerConnect->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnServerConnect, &ServerConnect_Parms, NULL );

	pFnServerConnect->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnHandshakeComplete
// [0x00420002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnHandshakeComplete ( )
{
	static UFunction* pFnOnHandshakeComplete = NULL;

	if ( ! pFnOnHandshakeComplete )
		pFnOnHandshakeComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnHandshakeComplete" );

	UKFGFxServerBrowser_ServerList_execOnHandshakeComplete_Parms OnHandshakeComplete_Parms;

	this->ProcessEvent ( pFnOnHandshakeComplete, &OnHandshakeComplete_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnQueryAdditionalServerInfoComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnQueryAdditionalServerInfoComplete ( )
{
	static UFunction* pFnOnQueryAdditionalServerInfoComplete = NULL;

	if ( ! pFnOnQueryAdditionalServerInfoComplete )
		pFnOnQueryAdditionalServerInfoComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnQueryAdditionalServerInfoComplete" );

	UKFGFxServerBrowser_ServerList_execOnQueryAdditionalServerInfoComplete_Parms OnQueryAdditionalServerInfoComplete_Parms;

	this->ProcessEvent ( pFnOnQueryAdditionalServerInfoComplete, &OnQueryAdditionalServerInfoComplete_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnJoinGameComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnJoinGameComplete ( )
{
	static UFunction* pFnOnJoinGameComplete = NULL;

	if ( ! pFnOnJoinGameComplete )
		pFnOnJoinGameComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnJoinGameComplete" );

	UKFGFxServerBrowser_ServerList_execOnJoinGameComplete_Parms OnJoinGameComplete_Parms;

	this->ProcessEvent ( pFnOnJoinGameComplete, &OnJoinGameComplete_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.ProcessJoin
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFGFxServerBrowser_ServerList::ProcessJoin ( )
{
	static UFunction* pFnProcessJoin = NULL;

	if ( ! pFnProcessJoin )
		pFnProcessJoin = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.ProcessJoin" );

	UKFGFxServerBrowser_ServerList_execProcessJoin_Parms ProcessJoin_Parms;

	this->ProcessEvent ( pFnProcessJoin, &ProcessJoin_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.JoinServer
// [0x00824002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::JoinServer ( )
{
	static UFunction* pFnJoinServer = NULL;

	if ( ! pFnJoinServer )
		pFnJoinServer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.JoinServer" );

	UKFGFxServerBrowser_ServerList_execJoinServer_Parms JoinServer_Parms;

	this->ProcessEvent ( pFnJoinServer, &JoinServer_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.DelayedRefresh
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::DelayedRefresh ( )
{
	static UFunction* pFnDelayedRefresh = NULL;

	if ( ! pFnDelayedRefresh )
		pFnDelayedRefresh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.DelayedRefresh" );

	UKFGFxServerBrowser_ServerList_execDelayedRefresh_Parms DelayedRefresh_Parms;

	this->ProcessEvent ( pFnDelayedRefresh, &DelayedRefresh_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnCancelSearchComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnCancelSearchComplete ( )
{
	static UFunction* pFnOnCancelSearchComplete = NULL;

	if ( ! pFnOnCancelSearchComplete )
		pFnOnCancelSearchComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnCancelSearchComplete" );

	UKFGFxServerBrowser_ServerList_execOnCancelSearchComplete_Parms OnCancelSearchComplete_Parms;

	this->ProcessEvent ( pFnOnCancelSearchComplete, &OnCancelSearchComplete_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.CancelQuery
// [0x00024002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::CancelQuery ( )
{
	static UFunction* pFnCancelQuery = NULL;

	if ( ! pFnCancelQuery )
		pFnCancelQuery = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.CancelQuery" );

	UKFGFxServerBrowser_ServerList_execCancelQuery_Parms CancelQuery_Parms;

	this->ProcessEvent ( pFnCancelQuery, &CancelQuery_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnFindOnlineGamesComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnFindOnlineGamesComplete ( )
{
	static UFunction* pFnOnFindOnlineGamesComplete = NULL;

	if ( ! pFnOnFindOnlineGamesComplete )
		pFnOnFindOnlineGamesComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnFindOnlineGamesComplete" );

	UKFGFxServerBrowser_ServerList_execOnFindOnlineGamesComplete_Parms OnFindOnlineGamesComplete_Parms;

	this->ProcessEvent ( pFnOnFindOnlineGamesComplete, &OnFindOnlineGamesComplete_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnGetPlayerListComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnGetPlayerListComplete ( )
{
	static UFunction* pFnOnGetPlayerListComplete = NULL;

	if ( ! pFnOnGetPlayerListComplete )
		pFnOnGetPlayerListComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnGetPlayerListComplete" );

	UKFGFxServerBrowser_ServerList_execOnGetPlayerListComplete_Parms OnGetPlayerListComplete_Parms;

	this->ProcessEvent ( pFnOnGetPlayerListComplete, &OnGetPlayerListComplete_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnClose
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnClose" );

	UKFGFxServerBrowser_ServerList_execOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnFindOnlineGamesCompleteDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnFindOnlineGamesCompleteDelegate ( )
{
	static UFunction* pFnOnFindOnlineGamesCompleteDelegate = NULL;

	if ( ! pFnOnFindOnlineGamesCompleteDelegate )
		pFnOnFindOnlineGamesCompleteDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnFindOnlineGamesCompleteDelegate" );

	UKFGFxServerBrowser_ServerList_execOnFindOnlineGamesCompleteDelegate_Parms OnFindOnlineGamesCompleteDelegate_Parms;

	this->ProcessEvent ( pFnOnFindOnlineGamesCompleteDelegate, &OnFindOnlineGamesCompleteDelegate_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.FilterEntry
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxServerBrowser_ServerList::FilterEntry ( )
{
	static UFunction* pFnFilterEntry = NULL;

	if ( ! pFnFilterEntry )
		pFnFilterEntry = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.FilterEntry" );

	UKFGFxServerBrowser_ServerList_execFilterEntry_Parms FilterEntry_Parms;

	pFnFilterEntry->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFilterEntry, &FilterEntry_Parms, NULL );

	pFnFilterEntry->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxServerBrowser_ServerList.SubmitServerListQuery
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::SubmitServerListQuery ( )
{
	static UFunction* pFnSubmitServerListQuery = NULL;

	if ( ! pFnSubmitServerListQuery )
		pFnSubmitServerListQuery = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.SubmitServerListQuery" );

	UKFGFxServerBrowser_ServerList_execSubmitServerListQuery_Parms SubmitServerListQuery_Parms;

	this->ProcessEvent ( pFnSubmitServerListQuery, &SubmitServerListQuery_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.BuildServerFilters
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::BuildServerFilters ( )
{
	static UFunction* pFnBuildServerFilters = NULL;

	if ( ! pFnBuildServerFilters )
		pFnBuildServerFilters = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.BuildServerFilters" );

	UKFGFxServerBrowser_ServerList_execBuildServerFilters_Parms BuildServerFilters_Parms;

	this->ProcessEvent ( pFnBuildServerFilters, &BuildServerFilters_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.RefreshServerList
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::RefreshServerList ( )
{
	static UFunction* pFnRefreshServerList = NULL;

	if ( ! pFnRefreshServerList )
		pFnRefreshServerList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.RefreshServerList" );

	UKFGFxServerBrowser_ServerList_execRefreshServerList_Parms RefreshServerList_Parms;

	this->ProcessEvent ( pFnRefreshServerList, &RefreshServerList_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.ClearGFXServerList
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::ClearGFXServerList ( )
{
	static UFunction* pFnClearGFXServerList = NULL;

	if ( ! pFnClearGFXServerList )
		pFnClearGFXServerList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.ClearGFXServerList" );

	UKFGFxServerBrowser_ServerList_execClearGFXServerList_Parms ClearGFXServerList_Parms;

	this->ProcessEvent ( pFnClearGFXServerList, &ClearGFXServerList_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnRefeshClick
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnRefeshClick ( )
{
	static UFunction* pFnOnRefeshClick = NULL;

	if ( ! pFnOnRefeshClick )
		pFnOnRefeshClick = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnRefeshClick" );

	UKFGFxServerBrowser_ServerList_execOnRefeshClick_Parms OnRefeshClick_Parms;

	this->ProcessEvent ( pFnOnRefeshClick, &OnRefeshClick_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.LocalizeText" );

	UKFGFxServerBrowser_ServerList_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.ChangeSearchType
// [0x00024002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::ChangeSearchType ( )
{
	static UFunction* pFnChangeSearchType = NULL;

	if ( ! pFnChangeSearchType )
		pFnChangeSearchType = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.ChangeSearchType" );

	UKFGFxServerBrowser_ServerList_execChangeSearchType_Parms ChangeSearchType_Parms;

	this->ProcessEvent ( pFnChangeSearchType, &ChangeSearchType_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.ValidateServerType
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::ValidateServerType ( )
{
	static UFunction* pFnValidateServerType = NULL;

	if ( ! pFnValidateServerType )
		pFnValidateServerType = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.ValidateServerType" );

	UKFGFxServerBrowser_ServerList_execValidateServerType_Parms ValidateServerType_Parms;

	this->ProcessEvent ( pFnValidateServerType, &ValidateServerType_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.SortServerResultsRequest
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::SortServerResultsRequest ( )
{
	static UFunction* pFnSortServerResultsRequest = NULL;

	if ( ! pFnSortServerResultsRequest )
		pFnSortServerResultsRequest = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.SortServerResultsRequest" );

	UKFGFxServerBrowser_ServerList_execSortServerResultsRequest_Parms SortServerResultsRequest_Parms;

	this->ProcessEvent ( pFnSortServerResultsRequest, &SortServerResultsRequest_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.OnViewActivated
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::OnViewActivated ( )
{
	static UFunction* pFnOnViewActivated = NULL;

	if ( ! pFnOnViewActivated )
		pFnOnViewActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.OnViewActivated" );

	UKFGFxServerBrowser_ServerList_execOnViewActivated_Parms OnViewActivated_Parms;

	this->ProcessEvent ( pFnOnViewActivated, &OnViewActivated_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerList.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerList::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerList.Initialize" );

	UKFGFxServerBrowser_ServerList_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.DoesFilterMatchGameSettings
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxStartGameContainer_Options::DoesFilterMatchGameSettings ( )
{
	static UFunction* pFnDoesFilterMatchGameSettings = NULL;

	if ( ! pFnDoesFilterMatchGameSettings )
		pFnDoesFilterMatchGameSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.DoesFilterMatchGameSettings" );

	UKFGFxStartGameContainer_Options_execDoesFilterMatchGameSettings_Parms DoesFilterMatchGameSettings_Parms;

	pFnDoesFilterMatchGameSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDoesFilterMatchGameSettings, &DoesFilterMatchGameSettings_Parms, NULL );

	pFnDoesFilterMatchGameSettings->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxStartGameContainer_Options.GetAdjustedGameModeIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxStartGameContainer_Options::eventGetAdjustedGameModeIndex ( )
{
	static UFunction* pFnGetAdjustedGameModeIndex = NULL;

	if ( ! pFnGetAdjustedGameModeIndex )
		pFnGetAdjustedGameModeIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetAdjustedGameModeIndex" );

	UKFGFxStartGameContainer_Options_eventGetAdjustedGameModeIndex_Parms GetAdjustedGameModeIndex_Parms;

	this->ProcessEvent ( pFnGetAdjustedGameModeIndex, &GetAdjustedGameModeIndex_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetPartyPrivacy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxStartGameContainer_Options::eventGetPartyPrivacy ( )
{
	static UFunction* pFnGetPartyPrivacy = NULL;

	if ( ! pFnGetPartyPrivacy )
		pFnGetPartyPrivacy = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetPartyPrivacy" );

	UKFGFxStartGameContainer_Options_eventGetPartyPrivacy_Parms GetPartyPrivacy_Parms;

	this->ProcessEvent ( pFnGetPartyPrivacy, &GetPartyPrivacy_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetMapName
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::GetMapName ( )
{
	static UFunction* pFnGetMapName = NULL;

	if ( ! pFnGetMapName )
		pFnGetMapName = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetMapName" );

	UKFGFxStartGameContainer_Options_execGetMapName_Parms GetMapName_Parms;

	this->ProcessEvent ( pFnGetMapName, &GetMapName_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetPrivacyIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::GetPrivacyIndex ( )
{
	static UFunction* pFnGetPrivacyIndex = NULL;

	if ( ! pFnGetPrivacyIndex )
		pFnGetPrivacyIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetPrivacyIndex" );

	UKFGFxStartGameContainer_Options_execGetPrivacyIndex_Parms GetPrivacyIndex_Parms;

	this->ProcessEvent ( pFnGetPrivacyIndex, &GetPrivacyIndex_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::GetDifficulty ( )
{
	static UFunction* pFnGetDifficulty = NULL;

	if ( ! pFnGetDifficulty )
		pFnGetDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetDifficulty" );

	UKFGFxStartGameContainer_Options_execGetDifficulty_Parms GetDifficulty_Parms;

	this->ProcessEvent ( pFnGetDifficulty, &GetDifficulty_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetLengthIndex
// [0x00024002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::GetLengthIndex ( )
{
	static UFunction* pFnGetLengthIndex = NULL;

	if ( ! pFnGetLengthIndex )
		pFnGetLengthIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetLengthIndex" );

	UKFGFxStartGameContainer_Options_execGetLengthIndex_Parms GetLengthIndex_Parms;

	this->ProcessEvent ( pFnGetLengthIndex, &GetLengthIndex_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetDifficultyIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::GetDifficultyIndex ( )
{
	static UFunction* pFnGetDifficultyIndex = NULL;

	if ( ! pFnGetDifficultyIndex )
		pFnGetDifficultyIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetDifficultyIndex" );

	UKFGFxStartGameContainer_Options_execGetDifficultyIndex_Parms GetDifficultyIndex_Parms;

	this->ProcessEvent ( pFnGetDifficultyIndex, &GetDifficultyIndex_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetModeIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::GetModeIndex ( )
{
	static UFunction* pFnGetModeIndex = NULL;

	if ( ! pFnGetModeIndex )
		pFnGetModeIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetModeIndex" );

	UKFGFxStartGameContainer_Options_execGetModeIndex_Parms GetModeIndex_Parms;

	this->ProcessEvent ( pFnGetModeIndex, &GetModeIndex_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.HandleNoPref
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFGFxStartGameContainer_Options::HandleNoPref ( )
{
	static UFunction* pFnHandleNoPref = NULL;

	if ( ! pFnHandleNoPref )
		pFnHandleNoPref = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.HandleNoPref" );

	UKFGFxStartGameContainer_Options_execHandleNoPref_Parms HandleNoPref_Parms;

	this->ProcessEvent ( pFnHandleNoPref, &HandleNoPref_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetGameLength
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxStartGameContainer_Options::eventGetGameLength ( )
{
	static UFunction* pFnGetGameLength = NULL;

	if ( ! pFnGetGameLength )
		pFnGetGameLength = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetGameLength" );

	UKFGFxStartGameContainer_Options_eventGetGameLength_Parms GetGameLength_Parms;

	this->ProcessEvent ( pFnGetGameLength, &GetGameLength_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.UpdateFilters
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::UpdateFilters ( )
{
	static UFunction* pFnUpdateFilters = NULL;

	if ( ! pFnUpdateFilters )
		pFnUpdateFilters = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.UpdateFilters" );

	UKFGFxStartGameContainer_Options_execUpdateFilters_Parms UpdateFilters_Parms;

	this->ProcessEvent ( pFnUpdateFilters, &UpdateFilters_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.SetRegionIndex
// [0x00024002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::SetRegionIndex ( )
{
	static UFunction* pFnSetRegionIndex = NULL;

	if ( ! pFnSetRegionIndex )
		pFnSetRegionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.SetRegionIndex" );

	UKFGFxStartGameContainer_Options_execSetRegionIndex_Parms SetRegionIndex_Parms;

	this->ProcessEvent ( pFnSetRegionIndex, &SetRegionIndex_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.PrivacyChanged
// [0x00024002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::PrivacyChanged ( )
{
	static UFunction* pFnPrivacyChanged = NULL;

	if ( ! pFnPrivacyChanged )
		pFnPrivacyChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.PrivacyChanged" );

	UKFGFxStartGameContainer_Options_execPrivacyChanged_Parms PrivacyChanged_Parms;

	this->ProcessEvent ( pFnPrivacyChanged, &PrivacyChanged_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.MapChanged
// [0x00024002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::MapChanged ( )
{
	static UFunction* pFnMapChanged = NULL;

	if ( ! pFnMapChanged )
		pFnMapChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.MapChanged" );

	UKFGFxStartGameContainer_Options_execMapChanged_Parms MapChanged_Parms;

	this->ProcessEvent ( pFnMapChanged, &MapChanged_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.DifficultyChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::DifficultyChanged ( )
{
	static UFunction* pFnDifficultyChanged = NULL;

	if ( ! pFnDifficultyChanged )
		pFnDifficultyChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.DifficultyChanged" );

	UKFGFxStartGameContainer_Options_execDifficultyChanged_Parms DifficultyChanged_Parms;

	this->ProcessEvent ( pFnDifficultyChanged, &DifficultyChanged_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.LengthChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::LengthChanged ( )
{
	static UFunction* pFnLengthChanged = NULL;

	if ( ! pFnLengthChanged )
		pFnLengthChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.LengthChanged" );

	UKFGFxStartGameContainer_Options_execLengthChanged_Parms LengthChanged_Parms;

	this->ProcessEvent ( pFnLengthChanged, &LengthChanged_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.ModeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::ModeChanged ( )
{
	static UFunction* pFnModeChanged = NULL;

	if ( ! pFnModeChanged )
		pFnModeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.ModeChanged" );

	UKFGFxStartGameContainer_Options_execModeChanged_Parms ModeChanged_Parms;

	this->ProcessEvent ( pFnModeChanged, &ModeChanged_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetMakeNewServer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxStartGameContainer_Options::eventGetMakeNewServer ( )
{
	static UFunction* pFnGetMakeNewServer = NULL;

	if ( ! pFnGetMakeNewServer )
		pFnGetMakeNewServer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetMakeNewServer" );

	UKFGFxStartGameContainer_Options_eventGetMakeNewServer_Parms GetMakeNewServer_Parms;

	this->ProcessEvent ( pFnGetMakeNewServer, &GetMakeNewServer_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.SetSearching
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::SetSearching ( )
{
	static UFunction* pFnSetSearching = NULL;

	if ( ! pFnSetSearching )
		pFnSetSearching = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.SetSearching" );

	UKFGFxStartGameContainer_Options_execSetSearching_Parms SetSearching_Parms;

	this->ProcessEvent ( pFnSetSearching, &SetSearching_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.SetOptions
// [0x00024002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::SetOptions ( )
{
	static UFunction* pFnSetOptions = NULL;

	if ( ! pFnSetOptions )
		pFnSetOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.SetOptions" );

	UKFGFxStartGameContainer_Options_execSetOptions_Parms SetOptions_Parms;

	this->ProcessEvent ( pFnSetOptions, &SetOptions_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.CreateList
// [0x00024002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::CreateList ( )
{
	static UFunction* pFnCreateList = NULL;

	if ( ! pFnCreateList )
		pFnCreateList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.CreateList" );

	UKFGFxStartGameContainer_Options_execCreateList_Parms CreateList_Parms;

	this->ProcessEvent ( pFnCreateList, &CreateList_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.InitializeGameOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::InitializeGameOptions ( )
{
	static UFunction* pFnInitializeGameOptions = NULL;

	if ( ! pFnInitializeGameOptions )
		pFnInitializeGameOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.InitializeGameOptions" );

	UKFGFxStartGameContainer_Options_execInitializeGameOptions_Parms InitializeGameOptions_Parms;

	this->ProcessEvent ( pFnInitializeGameOptions, &InitializeGameOptions_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.SetModeMenus
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::SetModeMenus ( )
{
	static UFunction* pFnSetModeMenus = NULL;

	if ( ! pFnSetModeMenus )
		pFnSetModeMenus = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.SetModeMenus" );

	UKFGFxStartGameContainer_Options_execSetModeMenus_Parms SetModeMenus_Parms;

	this->ProcessEvent ( pFnSetModeMenus, &SetModeMenus_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.SetHelpText
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::SetHelpText ( )
{
	static UFunction* pFnSetHelpText = NULL;

	if ( ! pFnSetHelpText )
		pFnSetHelpText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.SetHelpText" );

	UKFGFxStartGameContainer_Options_execSetHelpText_Parms SetHelpText_Parms;

	this->ProcessEvent ( pFnSetHelpText, &SetHelpText_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.UpdateButtonsEnabled
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::UpdateButtonsEnabled ( )
{
	static UFunction* pFnUpdateButtonsEnabled = NULL;

	if ( ! pFnUpdateButtonsEnabled )
		pFnUpdateButtonsEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.UpdateButtonsEnabled" );

	UKFGFxStartGameContainer_Options_execUpdateButtonsEnabled_Parms UpdateButtonsEnabled_Parms;

	this->ProcessEvent ( pFnUpdateButtonsEnabled, &UpdateButtonsEnabled_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.ClampSavedFiltersToMode
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::ClampSavedFiltersToMode ( )
{
	static UFunction* pFnClampSavedFiltersToMode = NULL;

	if ( ! pFnClampSavedFiltersToMode )
		pFnClampSavedFiltersToMode = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.ClampSavedFiltersToMode" );

	UKFGFxStartGameContainer_Options_execClampSavedFiltersToMode_Parms ClampSavedFiltersToMode_Parms;

	this->ProcessEvent ( pFnClampSavedFiltersToMode, &ClampSavedFiltersToMode_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.GetButtons
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::GetButtons ( )
{
	static UFunction* pFnGetButtons = NULL;

	if ( ! pFnGetButtons )
		pFnGetButtons = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.GetButtons" );

	UKFGFxStartGameContainer_Options_execGetButtons_Parms GetButtons_Parms;

	this->ProcessEvent ( pFnGetButtons, &GetButtons_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_Options.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_Options::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_Options.Initialize" );

	UKFGFxStartGameContainer_Options_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_MouseMoved
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_MouseMoved ( )
{
	static UFunction* pFnCallback_MouseMoved = NULL;

	if ( ! pFnCallback_MouseMoved )
		pFnCallback_MouseMoved = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_MouseMoved" );

	UKFGFxObject_Menu_execCallback_MouseMoved_Parms Callback_MouseMoved_Parms;

	this->ProcessEvent ( pFnCallback_MouseMoved, &Callback_MouseMoved_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.SetControlScheme
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::SetControlScheme ( )
{
	static UFunction* pFnSetControlScheme = NULL;

	if ( ! pFnSetControlScheme )
		pFnSetControlScheme = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.SetControlScheme" );

	UKFGFxObject_Menu_execSetControlScheme_Parms SetControlScheme_Parms;

	this->ProcessEvent ( pFnSetControlScheme, &SetControlScheme_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.FilterButtonInput
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UKFGFxObject_Menu::eventFilterButtonInput ( )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.FilterButtonInput" );

	UKFGFxObject_Menu_eventFilterButtonInput_Parms FilterButtonInput_Parms;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_ChatFocusOut
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_ChatFocusOut ( )
{
	static UFunction* pFnCallback_ChatFocusOut = NULL;

	if ( ! pFnCallback_ChatFocusOut )
		pFnCallback_ChatFocusOut = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_ChatFocusOut" );

	UKFGFxObject_Menu_execCallback_ChatFocusOut_Parms Callback_ChatFocusOut_Parms;

	this->ProcessEvent ( pFnCallback_ChatFocusOut, &Callback_ChatFocusOut_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_ChatFocusIn
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_ChatFocusIn ( )
{
	static UFunction* pFnCallback_ChatFocusIn = NULL;

	if ( ! pFnCallback_ChatFocusIn )
		pFnCallback_ChatFocusIn = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_ChatFocusIn" );

	UKFGFxObject_Menu_execCallback_ChatFocusIn_Parms Callback_ChatFocusIn_Parms;

	this->ProcessEvent ( pFnCallback_ChatFocusIn, &Callback_ChatFocusIn_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_BroadcastChatMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_BroadcastChatMessage ( )
{
	static UFunction* pFnCallback_BroadcastChatMessage = NULL;

	if ( ! pFnCallback_BroadcastChatMessage )
		pFnCallback_BroadcastChatMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_BroadcastChatMessage" );

	UKFGFxObject_Menu_execCallback_BroadcastChatMessage_Parms Callback_BroadcastChatMessage_Parms;

	this->ProcessEvent ( pFnCallback_BroadcastChatMessage, &Callback_BroadcastChatMessage_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.PlayCloseAnimation
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::PlayCloseAnimation ( )
{
	static UFunction* pFnPlayCloseAnimation = NULL;

	if ( ! pFnPlayCloseAnimation )
		pFnPlayCloseAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.PlayCloseAnimation" );

	UKFGFxObject_Menu_execPlayCloseAnimation_Parms PlayCloseAnimation_Parms;

	this->ProcessEvent ( pFnPlayCloseAnimation, &PlayCloseAnimation_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.PlayOpenAnimation
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Menu::PlayOpenAnimation ( )
{
	static UFunction* pFnPlayOpenAnimation = NULL;

	if ( ! pFnPlayOpenAnimation )
		pFnPlayOpenAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.PlayOpenAnimation" );

	UKFGFxObject_Menu_execPlayOpenAnimation_Parms PlayOpenAnimation_Parms;

	this->ProcessEvent ( pFnPlayOpenAnimation, &PlayOpenAnimation_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_InviteFriend
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_InviteFriend ( )
{
	static UFunction* pFnCallback_InviteFriend = NULL;

	if ( ! pFnCallback_InviteFriend )
		pFnCallback_InviteFriend = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_InviteFriend" );

	UKFGFxObject_Menu_execCallback_InviteFriend_Parms Callback_InviteFriend_Parms;

	this->ProcessEvent ( pFnCallback_InviteFriend, &Callback_InviteFriend_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_OpenPlayerList
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_OpenPlayerList ( )
{
	static UFunction* pFnCallback_OpenPlayerList = NULL;

	if ( ! pFnCallback_OpenPlayerList )
		pFnCallback_OpenPlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_OpenPlayerList" );

	UKFGFxObject_Menu_execCallback_OpenPlayerList_Parms Callback_OpenPlayerList_Parms;

	this->ProcessEvent ( pFnCallback_OpenPlayerList, &Callback_OpenPlayerList_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_LeaveParty
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_LeaveParty ( )
{
	static UFunction* pFnCallback_LeaveParty = NULL;

	if ( ! pFnCallback_LeaveParty )
		pFnCallback_LeaveParty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_LeaveParty" );

	UKFGFxObject_Menu_execCallback_LeaveParty_Parms Callback_LeaveParty_Parms;

	this->ProcessEvent ( pFnCallback_LeaveParty, &Callback_LeaveParty_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_CreateParty
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_CreateParty ( )
{
	static UFunction* pFnCallback_CreateParty = NULL;

	if ( ! pFnCallback_CreateParty )
		pFnCallback_CreateParty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_CreateParty" );

	UKFGFxObject_Menu_execCallback_CreateParty_Parms Callback_CreateParty_Parms;

	this->ProcessEvent ( pFnCallback_CreateParty, &Callback_CreateParty_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_ProfileOption
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_ProfileOption ( )
{
	static UFunction* pFnCallback_ProfileOption = NULL;

	if ( ! pFnCallback_ProfileOption )
		pFnCallback_ProfileOption = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_ProfileOption" );

	UKFGFxObject_Menu_execCallback_ProfileOption_Parms Callback_ProfileOption_Parms;

	this->ProcessEvent ( pFnCallback_ProfileOption, &Callback_ProfileOption_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_PerkChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_PerkChanged ( )
{
	static UFunction* pFnCallback_PerkChanged = NULL;

	if ( ! pFnCallback_PerkChanged )
		pFnCallback_PerkChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_PerkChanged" );

	UKFGFxObject_Menu_execCallback_PerkChanged_Parms Callback_PerkChanged_Parms;

	this->ProcessEvent ( pFnCallback_PerkChanged, &Callback_PerkChanged_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_PlayerClicked
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_PlayerClicked ( )
{
	static UFunction* pFnCallback_PlayerClicked = NULL;

	if ( ! pFnCallback_PlayerClicked )
		pFnCallback_PlayerClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_PlayerClicked" );

	UKFGFxObject_Menu_execCallback_PlayerClicked_Parms Callback_PlayerClicked_Parms;

	this->ProcessEvent ( pFnCallback_PlayerClicked, &Callback_PlayerClicked_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_ReadyClicked
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_ReadyClicked ( )
{
	static UFunction* pFnCallback_ReadyClicked = NULL;

	if ( ! pFnCallback_ReadyClicked )
		pFnCallback_ReadyClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_ReadyClicked" );

	UKFGFxObject_Menu_execCallback_ReadyClicked_Parms Callback_ReadyClicked_Parms;

	this->ProcessEvent ( pFnCallback_ReadyClicked, &Callback_ReadyClicked_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_RequestTeamSwitch
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_RequestTeamSwitch ( )
{
	static UFunction* pFnCallback_RequestTeamSwitch = NULL;

	if ( ! pFnCallback_RequestTeamSwitch )
		pFnCallback_RequestTeamSwitch = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_RequestTeamSwitch" );

	UKFGFxObject_Menu_execCallback_RequestTeamSwitch_Parms Callback_RequestTeamSwitch_Parms;

	this->ProcessEvent ( pFnCallback_RequestTeamSwitch, &Callback_RequestTeamSwitch_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_MenuBarTabChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_MenuBarTabChanged ( )
{
	static UFunction* pFnCallback_MenuBarTabChanged = NULL;

	if ( ! pFnCallback_MenuBarTabChanged )
		pFnCallback_MenuBarTabChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_MenuBarTabChanged" );

	UKFGFxObject_Menu_execCallback_MenuBarTabChanged_Parms Callback_MenuBarTabChanged_Parms;

	this->ProcessEvent ( pFnCallback_MenuBarTabChanged, &Callback_MenuBarTabChanged_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_MenusFinishedClosing
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_MenusFinishedClosing ( )
{
	static UFunction* pFnCallback_MenusFinishedClosing = NULL;

	if ( ! pFnCallback_MenusFinishedClosing )
		pFnCallback_MenusFinishedClosing = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_MenusFinishedClosing" );

	UKFGFxObject_Menu_execCallback_MenusFinishedClosing_Parms Callback_MenusFinishedClosing_Parms;

	this->ProcessEvent ( pFnCallback_MenusFinishedClosing, &Callback_MenusFinishedClosing_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_Quit
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_Quit ( )
{
	static UFunction* pFnCallback_Quit = NULL;

	if ( ! pFnCallback_Quit )
		pFnCallback_Quit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_Quit" );

	UKFGFxObject_Menu_execCallback_Quit_Parms Callback_Quit_Parms;

	this->ProcessEvent ( pFnCallback_Quit, &Callback_Quit_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.Callback_ControllerCloseMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::Callback_ControllerCloseMenu ( )
{
	static UFunction* pFnCallback_ControllerCloseMenu = NULL;

	if ( ! pFnCallback_ControllerCloseMenu )
		pFnCallback_ControllerCloseMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.Callback_ControllerCloseMenu" );

	UKFGFxObject_Menu_execCallback_ControllerCloseMenu_Parms Callback_ControllerCloseMenu_Parms;

	this->ProcessEvent ( pFnCallback_ControllerCloseMenu, &Callback_ControllerCloseMenu_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.ConsoleLocalize
// [0x00024002] 
// Parameters infos:

void UKFGFxObject_Menu::ConsoleLocalize ( )
{
	static UFunction* pFnConsoleLocalize = NULL;

	if ( ! pFnConsoleLocalize )
		pFnConsoleLocalize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.ConsoleLocalize" );

	UKFGFxObject_Menu_execConsoleLocalize_Parms ConsoleLocalize_Parms;

	this->ProcessEvent ( pFnConsoleLocalize, &ConsoleLocalize_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.CancelLeaveParty
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Menu::CancelLeaveParty ( )
{
	static UFunction* pFnCancelLeaveParty = NULL;

	if ( ! pFnCancelLeaveParty )
		pFnCancelLeaveParty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.CancelLeaveParty" );

	UKFGFxObject_Menu_execCancelLeaveParty_Parms CancelLeaveParty_Parms;

	this->ProcessEvent ( pFnCancelLeaveParty, &CancelLeaveParty_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.ConfirmLeaveParty
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::ConfirmLeaveParty ( )
{
	static UFunction* pFnConfirmLeaveParty = NULL;

	if ( ! pFnConfirmLeaveParty )
		pFnConfirmLeaveParty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.ConfirmLeaveParty" );

	UKFGFxObject_Menu_execConfirmLeaveParty_Parms ConfirmLeaveParty_Parms;

	this->ProcessEvent ( pFnConfirmLeaveParty, &ConfirmLeaveParty_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.ShowLeavePartyPopUp
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::ShowLeavePartyPopUp ( )
{
	static UFunction* pFnShowLeavePartyPopUp = NULL;

	if ( ! pFnShowLeavePartyPopUp )
		pFnShowLeavePartyPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.ShowLeavePartyPopUp" );

	UKFGFxObject_Menu_execShowLeavePartyPopUp_Parms ShowLeavePartyPopUp_Parms;

	this->ProcessEvent ( pFnShowLeavePartyPopUp, &ShowLeavePartyPopUp_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OnLobbyStatusChanged
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Menu::OnLobbyStatusChanged ( )
{
	static UFunction* pFnOnLobbyStatusChanged = NULL;

	if ( ! pFnOnLobbyStatusChanged )
		pFnOnLobbyStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OnLobbyStatusChanged" );

	UKFGFxObject_Menu_execOnLobbyStatusChanged_Parms OnLobbyStatusChanged_Parms;

	this->ProcessEvent ( pFnOnLobbyStatusChanged, &OnLobbyStatusChanged_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OnClose
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UKFGFxObject_Menu::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OnClose" );

	UKFGFxObject_Menu_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OnRoundOver
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Menu::OnRoundOver ( )
{
	static UFunction* pFnOnRoundOver = NULL;

	if ( ! pFnOnRoundOver )
		pFnOnRoundOver = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OnRoundOver" );

	UKFGFxObject_Menu_execOnRoundOver_Parms OnRoundOver_Parms;

	this->ProcessEvent ( pFnOnRoundOver, &OnRoundOver_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OnTraderTimeStart
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UKFGFxObject_Menu::eventOnTraderTimeStart ( )
{
	static UFunction* pFnOnTraderTimeStart = NULL;

	if ( ! pFnOnTraderTimeStart )
		pFnOnTraderTimeStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OnTraderTimeStart" );

	UKFGFxObject_Menu_eventOnTraderTimeStart_Parms OnTraderTimeStart_Parms;

	this->ProcessEvent ( pFnOnTraderTimeStart, &OnTraderTimeStart_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OnAxisModified
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UKFGFxObject_Menu::eventOnAxisModified ( )
{
	static UFunction* pFnOnAxisModified = NULL;

	if ( ! pFnOnAxisModified )
		pFnOnAxisModified = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OnAxisModified" );

	UKFGFxObject_Menu_eventOnAxisModified_Parms OnAxisModified_Parms;

	this->ProcessEvent ( pFnOnAxisModified, &OnAxisModified_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OneSecondLoop
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Menu::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OneSecondLoop" );

	UKFGFxObject_Menu_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OnInputTypeChanged
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Menu::OnInputTypeChanged ( )
{
	static UFunction* pFnOnInputTypeChanged = NULL;

	if ( ! pFnOnInputTypeChanged )
		pFnOnInputTypeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OnInputTypeChanged" );

	UKFGFxObject_Menu_execOnInputTypeChanged_Parms OnInputTypeChanged_Parms;

	this->ProcessEvent ( pFnOnInputTypeChanged, &OnInputTypeChanged_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OnR3Pressed
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::OnR3Pressed ( )
{
	static UFunction* pFnOnR3Pressed = NULL;

	if ( ! pFnOnR3Pressed )
		pFnOnR3Pressed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OnR3Pressed" );

	UKFGFxObject_Menu_execOnR3Pressed_Parms OnR3Pressed_Parms;

	this->ProcessEvent ( pFnOnR3Pressed, &OnR3Pressed_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.InitOnlineLobby
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::InitOnlineLobby ( )
{
	static UFunction* pFnInitOnlineLobby = NULL;

	if ( ! pFnInitOnlineLobby )
		pFnInitOnlineLobby = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.InitOnlineLobby" );

	UKFGFxObject_Menu_execInitOnlineLobby_Parms InitOnlineLobby_Parms;

	this->ProcessEvent ( pFnInitOnlineLobby, &InitOnlineLobby_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.OnOpen
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Menu::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.OnOpen" );

	UKFGFxObject_Menu_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxObject_Menu.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Menu::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Menu.InitializeMenu" );

	UKFGFxObject_Menu_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.SelectCustomizationOption
// [0x00044401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFGFxMenu_Gear::SelectCustomizationOption ( )
{
	static UFunction* pFnSelectCustomizationOption = NULL;

	if ( ! pFnSelectCustomizationOption )
		pFnSelectCustomizationOption = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.SelectCustomizationOption" );

	UKFGFxMenu_Gear_execSelectCustomizationOption_Parms SelectCustomizationOption_Parms;

	pFnSelectCustomizationOption->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectCustomizationOption, &SelectCustomizationOption_Parms, NULL );

	pFnSelectCustomizationOption->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_Gear.SelectCharacter
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFGFxMenu_Gear::SelectCharacter ( )
{
	static UFunction* pFnSelectCharacter = NULL;

	if ( ! pFnSelectCharacter )
		pFnSelectCharacter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.SelectCharacter" );

	UKFGFxMenu_Gear_execSelectCharacter_Parms SelectCharacter_Parms;

	pFnSelectCharacter->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSelectCharacter, &SelectCharacter_Parms, NULL );

	pFnSelectCharacter->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_Gear.RelayFromCheatManager
// [0x00024002] 
// Parameters infos:

void UKFGFxMenu_Gear::RelayFromCheatManager ( )
{
	static UFunction* pFnRelayFromCheatManager = NULL;

	if ( ! pFnRelayFromCheatManager )
		pFnRelayFromCheatManager = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.RelayFromCheatManager" );

	UKFGFxMenu_Gear_execRelayFromCheatManager_Parms RelayFromCheatManager_Parms;

	this->ProcessEvent ( pFnRelayFromCheatManager, &RelayFromCheatManager_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_Attachment
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFGFxMenu_Gear::Callback_Attachment ( )
{
	static UFunction* pFnCallback_Attachment = NULL;

	if ( ! pFnCallback_Attachment )
		pFnCallback_Attachment = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_Attachment" );

	UKFGFxMenu_Gear_execCallback_Attachment_Parms Callback_Attachment_Parms;

	this->ProcessEvent ( pFnCallback_Attachment, &Callback_Attachment_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_Body
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFGFxMenu_Gear::Callback_Body ( )
{
	static UFunction* pFnCallback_Body = NULL;

	if ( ! pFnCallback_Body )
		pFnCallback_Body = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_Body" );

	UKFGFxMenu_Gear_execCallback_Body_Parms Callback_Body_Parms;

	this->ProcessEvent ( pFnCallback_Body, &Callback_Body_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_Head
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFGFxMenu_Gear::Callback_Head ( )
{
	static UFunction* pFnCallback_Head = NULL;

	if ( ! pFnCallback_Head )
		pFnCallback_Head = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_Head" );

	UKFGFxMenu_Gear_execCallback_Head_Parms Callback_Head_Parms;

	this->ProcessEvent ( pFnCallback_Head, &Callback_Head_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_Character
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFGFxMenu_Gear::Callback_Character ( )
{
	static UFunction* pFnCallback_Character = NULL;

	if ( ! pFnCallback_Character )
		pFnCallback_Character = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_Character" );

	UKFGFxMenu_Gear_execCallback_Character_Parms Callback_Character_Parms;

	this->ProcessEvent ( pFnCallback_Character, &Callback_Character_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_Emote
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void UKFGFxMenu_Gear::Callback_Emote ( )
{
	static UFunction* pFnCallback_Emote = NULL;

	if ( ! pFnCallback_Emote )
		pFnCallback_Emote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_Emote" );

	UKFGFxMenu_Gear_execCallback_Emote_Parms Callback_Emote_Parms;

	this->ProcessEvent ( pFnCallback_Emote, &Callback_Emote_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_HeadCamera
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::Callback_HeadCamera ( )
{
	static UFunction* pFnCallback_HeadCamera = NULL;

	if ( ! pFnCallback_HeadCamera )
		pFnCallback_HeadCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_HeadCamera" );

	UKFGFxMenu_Gear_execCallback_HeadCamera_Parms Callback_HeadCamera_Parms;

	this->ProcessEvent ( pFnCallback_HeadCamera, &Callback_HeadCamera_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_BodyCamera
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::Callback_BodyCamera ( )
{
	static UFunction* pFnCallback_BodyCamera = NULL;

	if ( ! pFnCallback_BodyCamera )
		pFnCallback_BodyCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_BodyCamera" );

	UKFGFxMenu_Gear_execCallback_BodyCamera_Parms Callback_BodyCamera_Parms;

	this->ProcessEvent ( pFnCallback_BodyCamera, &Callback_BodyCamera_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_EndRotateCamera
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::Callback_EndRotateCamera ( )
{
	static UFunction* pFnCallback_EndRotateCamera = NULL;

	if ( ! pFnCallback_EndRotateCamera )
		pFnCallback_EndRotateCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_EndRotateCamera" );

	UKFGFxMenu_Gear_execCallback_EndRotateCamera_Parms Callback_EndRotateCamera_Parms;

	this->ProcessEvent ( pFnCallback_EndRotateCamera, &Callback_EndRotateCamera_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.Callback_RotateCamera
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::Callback_RotateCamera ( )
{
	static UFunction* pFnCallback_RotateCamera = NULL;

	if ( ! pFnCallback_RotateCamera )
		pFnCallback_RotateCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.Callback_RotateCamera" );

	UKFGFxMenu_Gear_execCallback_RotateCamera_Parms Callback_RotateCamera_Parms;

	this->ProcessEvent ( pFnCallback_RotateCamera, &Callback_RotateCamera_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.OnAxisModified
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_Gear::eventOnAxisModified ( )
{
	static UFunction* pFnOnAxisModified = NULL;

	if ( ! pFnOnAxisModified )
		pFnOnAxisModified = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.OnAxisModified" );

	UKFGFxMenu_Gear_eventOnAxisModified_Parms OnAxisModified_Parms;

	this->ProcessEvent ( pFnOnAxisModified, &OnAxisModified_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_Gear::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.OnClose" );

	UKFGFxMenu_Gear_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.SetAttachmentButtons
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::SetAttachmentButtons ( )
{
	static UFunction* pFnSetAttachmentButtons = NULL;

	if ( ! pFnSetAttachmentButtons )
		pFnSetAttachmentButtons = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.SetAttachmentButtons" );

	UKFGFxMenu_Gear_execSetAttachmentButtons_Parms SetAttachmentButtons_Parms;

	this->ProcessEvent ( pFnSetAttachmentButtons, &SetAttachmentButtons_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.SetGearButtons
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::SetGearButtons ( )
{
	static UFunction* pFnSetGearButtons = NULL;

	if ( ! pFnSetGearButtons )
		pFnSetGearButtons = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.SetGearButtons" );

	UKFGFxMenu_Gear_execSetGearButtons_Parms SetGearButtons_Parms;

	this->ProcessEvent ( pFnSetGearButtons, &SetGearButtons_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.SetEmoteButton
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::SetEmoteButton ( )
{
	static UFunction* pFnSetEmoteButton = NULL;

	if ( ! pFnSetEmoteButton )
		pFnSetEmoteButton = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.SetEmoteButton" );

	UKFGFxMenu_Gear_execSetEmoteButton_Parms SetEmoteButton_Parms;

	this->ProcessEvent ( pFnSetEmoteButton, &SetEmoteButton_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.SetCurrentCharacterButtons
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::SetCurrentCharacterButtons ( )
{
	static UFunction* pFnSetCurrentCharacterButtons = NULL;

	if ( ! pFnSetCurrentCharacterButtons )
		pFnSetCurrentCharacterButtons = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.SetCurrentCharacterButtons" );

	UKFGFxMenu_Gear_execSetCurrentCharacterButtons_Parms SetCurrentCharacterButtons_Parms;

	this->ProcessEvent ( pFnSetCurrentCharacterButtons, &SetCurrentCharacterButtons_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.UpdateOutfitVariants
// [0x00C20002] 
// Parameters infos:

void UKFGFxMenu_Gear::UpdateOutfitVariants ( )
{
	static UFunction* pFnUpdateOutfitVariants = NULL;

	if ( ! pFnUpdateOutfitVariants )
		pFnUpdateOutfitVariants = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.UpdateOutfitVariants" );

	UKFGFxMenu_Gear_execUpdateOutfitVariants_Parms UpdateOutfitVariants_Parms;

	this->ProcessEvent ( pFnUpdateOutfitVariants, &UpdateOutfitVariants_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.UpdateCosmeticVariants
// [0x00C20002] 
// Parameters infos:

void UKFGFxMenu_Gear::UpdateCosmeticVariants ( )
{
	static UFunction* pFnUpdateCosmeticVariants = NULL;

	if ( ! pFnUpdateCosmeticVariants )
		pFnUpdateCosmeticVariants = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.UpdateCosmeticVariants" );

	UKFGFxMenu_Gear_execUpdateCosmeticVariants_Parms UpdateCosmeticVariants_Parms;

	this->ProcessEvent ( pFnUpdateCosmeticVariants, &UpdateCosmeticVariants_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.UpdateAttachmentsList
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Gear::UpdateAttachmentsList ( )
{
	static UFunction* pFnUpdateAttachmentsList = NULL;

	if ( ! pFnUpdateAttachmentsList )
		pFnUpdateAttachmentsList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.UpdateAttachmentsList" );

	UKFGFxMenu_Gear_execUpdateAttachmentsList_Parms UpdateAttachmentsList_Parms;

	this->ProcessEvent ( pFnUpdateAttachmentsList, &UpdateAttachmentsList_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.UpdateMeshList
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Gear::UpdateMeshList ( )
{
	static UFunction* pFnUpdateMeshList = NULL;

	if ( ! pFnUpdateMeshList )
		pFnUpdateMeshList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.UpdateMeshList" );

	UKFGFxMenu_Gear_execUpdateMeshList_Parms UpdateMeshList_Parms;

	this->ProcessEvent ( pFnUpdateMeshList, &UpdateMeshList_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.ReInitMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::ReInitMenu ( )
{
	static UFunction* pFnReInitMenu = NULL;

	if ( ! pFnReInitMenu )
		pFnReInitMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.ReInitMenu" );

	UKFGFxMenu_Gear_execReInitMenu_Parms ReInitMenu_Parms;

	this->ProcessEvent ( pFnReInitMenu, &ReInitMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.UpdateGear
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::UpdateGear ( )
{
	static UFunction* pFnUpdateGear = NULL;

	if ( ! pFnUpdateGear )
		pFnUpdateGear = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.UpdateGear" );

	UKFGFxMenu_Gear_execUpdateGear_Parms UpdateGear_Parms;

	this->ProcessEvent ( pFnUpdateGear, &UpdateGear_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.UpdateCharacterList
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::UpdateCharacterList ( )
{
	static UFunction* pFnUpdateCharacterList = NULL;

	if ( ! pFnUpdateCharacterList )
		pFnUpdateCharacterList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.UpdateCharacterList" );

	UKFGFxMenu_Gear_execUpdateCharacterList_Parms UpdateCharacterList_Parms;

	this->ProcessEvent ( pFnUpdateCharacterList, &UpdateCharacterList_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.UpdateEmoteList
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::UpdateEmoteList ( )
{
	static UFunction* pFnUpdateEmoteList = NULL;

	if ( ! pFnUpdateEmoteList )
		pFnUpdateEmoteList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.UpdateEmoteList" );

	UKFGFxMenu_Gear_execUpdateEmoteList_Parms UpdateEmoteList_Parms;

	this->ProcessEvent ( pFnUpdateEmoteList, &UpdateEmoteList_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.LocalizeText" );

	UKFGFxMenu_Gear_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.SaveChanges
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::SaveChanges ( )
{
	static UFunction* pFnSaveChanges = NULL;

	if ( ! pFnSaveChanges )
		pFnSaveChanges = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.SaveChanges" );

	UKFGFxMenu_Gear_execSaveChanges_Parms SaveChanges_Parms;

	this->ProcessEvent ( pFnSaveChanges, &SaveChanges_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.CheckForCustomizationPawn
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::CheckForCustomizationPawn ( )
{
	static UFunction* pFnCheckForCustomizationPawn = NULL;

	if ( ! pFnCheckForCustomizationPawn )
		pFnCheckForCustomizationPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.CheckForCustomizationPawn" );

	UKFGFxMenu_Gear_execCheckForCustomizationPawn_Parms CheckForCustomizationPawn_Parms;

	this->ProcessEvent ( pFnCheckForCustomizationPawn, &CheckForCustomizationPawn_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.OnOpen" );

	UKFGFxMenu_Gear_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Gear.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Gear::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Gear.InitializeMenu" );

	UKFGFxMenu_Gear_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.NotifyLoginFailed
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::NotifyLoginFailed ( )
{
	static UFunction* pFnNotifyLoginFailed = NULL;

	if ( ! pFnNotifyLoginFailed )
		pFnNotifyLoginFailed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.NotifyLoginFailed" );

	UKFGFxMenu_IIS_execNotifyLoginFailed_Parms NotifyLoginFailed_Parms;

	this->ProcessEvent ( pFnNotifyLoginFailed, &NotifyLoginFailed_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.DelayedOpenGammaPopup
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::DelayedOpenGammaPopup ( )
{
	static UFunction* pFnDelayedOpenGammaPopup = NULL;

	if ( ! pFnDelayedOpenGammaPopup )
		pFnDelayedOpenGammaPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.DelayedOpenGammaPopup" );

	UKFGFxMenu_IIS_execDelayedOpenGammaPopup_Parms DelayedOpenGammaPopup_Parms;

	this->ProcessEvent ( pFnDelayedOpenGammaPopup, &DelayedOpenGammaPopup_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnPS4StatsRead
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::OnPS4StatsRead ( )
{
	static UFunction* pFnOnPS4StatsRead = NULL;

	if ( ! pFnOnPS4StatsRead )
		pFnOnPS4StatsRead = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnPS4StatsRead" );

	UKFGFxMenu_IIS_execOnPS4StatsRead_Parms OnPS4StatsRead_Parms;

	this->ProcessEvent ( pFnOnPS4StatsRead, &OnPS4StatsRead_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.ProceedToMainMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::ProceedToMainMenu ( )
{
	static UFunction* pFnProceedToMainMenu = NULL;

	if ( ! pFnProceedToMainMenu )
		pFnProceedToMainMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.ProceedToMainMenu" );

	UKFGFxMenu_IIS_execProceedToMainMenu_Parms ProceedToMainMenu_Parms;

	this->ProcessEvent ( pFnProceedToMainMenu, &ProceedToMainMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnStatsRead
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::OnStatsRead ( )
{
	static UFunction* pFnOnStatsRead = NULL;

	if ( ! pFnOnStatsRead )
		pFnOnStatsRead = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnStatsRead" );

	UKFGFxMenu_IIS_execOnStatsRead_Parms OnStatsRead_Parms;

	this->ProcessEvent ( pFnOnStatsRead, &OnStatsRead_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnLoginToGameComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::OnLoginToGameComplete ( )
{
	static UFunction* pFnOnLoginToGameComplete = NULL;

	if ( ! pFnOnLoginToGameComplete )
		pFnOnLoginToGameComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnLoginToGameComplete" );

	UKFGFxMenu_IIS_execOnLoginToGameComplete_Parms OnLoginToGameComplete_Parms;

	this->ProcessEvent ( pFnOnLoginToGameComplete, &OnLoginToGameComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnReadProfileSettingsComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::OnReadProfileSettingsComplete ( )
{
	static UFunction* pFnOnReadProfileSettingsComplete = NULL;

	if ( ! pFnOnReadProfileSettingsComplete )
		pFnOnReadProfileSettingsComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnReadProfileSettingsComplete" );

	UKFGFxMenu_IIS_execOnReadProfileSettingsComplete_Parms OnReadProfileSettingsComplete_Parms;

	this->ProcessEvent ( pFnOnReadProfileSettingsComplete, &OnReadProfileSettingsComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.LoginToGame
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_IIS::LoginToGame ( )
{
	static UFunction* pFnLoginToGame = NULL;

	if ( ! pFnLoginToGame )
		pFnLoginToGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.LoginToGame" );

	UKFGFxMenu_IIS_execLoginToGame_Parms LoginToGame_Parms;

	this->ProcessEvent ( pFnLoginToGame, &LoginToGame_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnLoginStatusChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::OnLoginStatusChanged ( )
{
	static UFunction* pFnOnLoginStatusChanged = NULL;

	if ( ! pFnOnLoginStatusChanged )
		pFnOnLoginStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnLoginStatusChanged" );

	UKFGFxMenu_IIS_execOnLoginStatusChanged_Parms OnLoginStatusChanged_Parms;

	this->ProcessEvent ( pFnOnLoginStatusChanged, &OnLoginStatusChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnConfirmPlayOffline
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::OnConfirmPlayOffline ( )
{
	static UFunction* pFnOnConfirmPlayOffline = NULL;

	if ( ! pFnOnConfirmPlayOffline )
		pFnOnConfirmPlayOffline = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnConfirmPlayOffline" );

	UKFGFxMenu_IIS_execOnConfirmPlayOffline_Parms OnConfirmPlayOffline_Parms;

	this->ProcessEvent ( pFnOnConfirmPlayOffline, &OnConfirmPlayOffline_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnLoginCancelled
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::OnLoginCancelled ( )
{
	static UFunction* pFnOnLoginCancelled = NULL;

	if ( ! pFnOnLoginCancelled )
		pFnOnLoginCancelled = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnLoginCancelled" );

	UKFGFxMenu_IIS_execOnLoginCancelled_Parms OnLoginCancelled_Parms;

	this->ProcessEvent ( pFnOnLoginCancelled, &OnLoginCancelled_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.ShowLoginUI
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::ShowLoginUI ( )
{
	static UFunction* pFnShowLoginUI = NULL;

	if ( ! pFnShowLoginUI )
		pFnShowLoginUI = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.ShowLoginUI" );

	UKFGFxMenu_IIS_execShowLoginUI_Parms ShowLoginUI_Parms;

	this->ProcessEvent ( pFnShowLoginUI, &ShowLoginUI_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.ValidateActiveAccount
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_IIS::ValidateActiveAccount ( )
{
	static UFunction* pFnValidateActiveAccount = NULL;

	if ( ! pFnValidateActiveAccount )
		pFnValidateActiveAccount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.ValidateActiveAccount" );

	UKFGFxMenu_IIS_execValidateActiveAccount_Parms ValidateActiveAccount_Parms;

	this->ProcessEvent ( pFnValidateActiveAccount, &ValidateActiveAccount_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.FilterButtonInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_IIS::eventFilterButtonInput ( )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.FilterButtonInput" );

	UKFGFxMenu_IIS_eventFilterButtonInput_Parms FilterButtonInput_Parms;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.UnRegisterDelegates
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::UnRegisterDelegates ( )
{
	static UFunction* pFnUnRegisterDelegates = NULL;

	if ( ! pFnUnRegisterDelegates )
		pFnUnRegisterDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.UnRegisterDelegates" );

	UKFGFxMenu_IIS_execUnRegisterDelegates_Parms UnRegisterDelegates_Parms;

	this->ProcessEvent ( pFnUnRegisterDelegates, &UnRegisterDelegates_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_IIS::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnClose" );

	UKFGFxMenu_IIS_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_IIS::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnOpen" );

	UKFGFxMenu_IIS_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.AttemptAutoLogin
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_IIS::eventAttemptAutoLogin ( )
{
	static UFunction* pFnAttemptAutoLogin = NULL;

	if ( ! pFnAttemptAutoLogin )
		pFnAttemptAutoLogin = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.AttemptAutoLogin" );

	UKFGFxMenu_IIS_eventAttemptAutoLogin_Parms AttemptAutoLogin_Parms;

	this->ProcessEvent ( pFnAttemptAutoLogin, &AttemptAutoLogin_Parms, NULL );
};

// Function KFGame.KFGFxMenu_IIS.OnAutoLoginComplete
// [0x00120000] 
// Parameters infos:

void UKFGFxMenu_IIS::OnAutoLoginComplete ( )
{
	static UFunction* pFnOnAutoLoginComplete = NULL;

	if ( ! pFnOnAutoLoginComplete )
		pFnOnAutoLoginComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_IIS.OnAutoLoginComplete" );

	UKFGFxMenu_IIS_execOnAutoLoginComplete_Parms OnAutoLoginComplete_Parms;

	this->ProcessEvent ( pFnOnAutoLoginComplete, &OnAutoLoginComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnPartyLeave
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnPartyLeave ( )
{
	static UFunction* pFnOnPartyLeave = NULL;

	if ( ! pFnOnPartyLeave )
		pFnOnPartyLeave = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnPartyLeave" );

	UKFGFxMenu_StartGame_execOnPartyLeave_Parms OnPartyLeave_Parms;

	this->ProcessEvent ( pFnOnPartyLeave, &OnPartyLeave_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ShowOverview
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ShowOverview ( )
{
	static UFunction* pFnShowOverview = NULL;

	if ( ! pFnShowOverview )
		pFnShowOverview = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ShowOverview" );

	UKFGFxMenu_StartGame_execShowOverview_Parms ShowOverview_Parms;

	this->ProcessEvent ( pFnShowOverview, &ShowOverview_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GetGameModeIndex
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventGetGameModeIndex ( )
{
	static UFunction* pFnGetGameModeIndex = NULL;

	if ( ! pFnGetGameModeIndex )
		pFnGetGameModeIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GetGameModeIndex" );

	UKFGFxMenu_StartGame_eventGetGameModeIndex_Parms GetGameModeIndex_Parms;

	this->ProcessEvent ( pFnGetGameModeIndex, &GetGameModeIndex_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnCancelSearchComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnCancelSearchComplete ( )
{
	static UFunction* pFnOnCancelSearchComplete = NULL;

	if ( ! pFnOnCancelSearchComplete )
		pFnOnCancelSearchComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnCancelSearchComplete" );

	UKFGFxMenu_StartGame_execOnCancelSearchComplete_Parms OnCancelSearchComplete_Parms;

	this->ProcessEvent ( pFnOnCancelSearchComplete, &OnCancelSearchComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.CancelGameSearch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventCancelGameSearch ( )
{
	static UFunction* pFnCancelGameSearch = NULL;

	if ( ! pFnCancelGameSearch )
		pFnCancelGameSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.CancelGameSearch" );

	UKFGFxMenu_StartGame_eventCancelGameSearch_Parms CancelGameSearch_Parms;

	this->ProcessEvent ( pFnCancelGameSearch, &CancelGameSearch_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.UnpauseTryingServers
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::UnpauseTryingServers ( )
{
	static UFunction* pFnUnpauseTryingServers = NULL;

	if ( ! pFnUnpauseTryingServers )
		pFnUnpauseTryingServers = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.UnpauseTryingServers" );

	UKFGFxMenu_StartGame_execUnpauseTryingServers_Parms UnpauseTryingServers_Parms;

	this->ProcessEvent ( pFnUnpauseTryingServers, &UnpauseTryingServers_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnBuyGamePressed
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnBuyGamePressed ( )
{
	static UFunction* pFnOnBuyGamePressed = NULL;

	if ( ! pFnOnBuyGamePressed )
		pFnOnBuyGamePressed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnBuyGamePressed" );

	UKFGFxMenu_StartGame_execOnBuyGamePressed_Parms OnBuyGamePressed_Parms;

	this->ProcessEvent ( pFnOnBuyGamePressed, &OnBuyGamePressed_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_CreateOnlineGame
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_CreateOnlineGame ( )
{
	static UFunction* pFnCallback_CreateOnlineGame = NULL;

	if ( ! pFnCallback_CreateOnlineGame )
		pFnCallback_CreateOnlineGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_CreateOnlineGame" );

	UKFGFxMenu_StartGame_execCallback_CreateOnlineGame_Parms Callback_CreateOnlineGame_Parms;

	this->ProcessEvent ( pFnCallback_CreateOnlineGame, &Callback_CreateOnlineGame_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_StartOnlineGame
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_StartOnlineGame ( )
{
	static UFunction* pFnCallback_StartOnlineGame = NULL;

	if ( ! pFnCallback_StartOnlineGame )
		pFnCallback_StartOnlineGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_StartOnlineGame" );

	UKFGFxMenu_StartGame_execCallback_StartOnlineGame_Parms Callback_StartOnlineGame_Parms;

	this->ProcessEvent ( pFnCallback_StartOnlineGame, &Callback_StartOnlineGame_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GenerateRandomPassword
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::GenerateRandomPassword ( )
{
	static UFunction* pFnGenerateRandomPassword = NULL;

	if ( ! pFnGenerateRandomPassword )
		pFnGenerateRandomPassword = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GenerateRandomPassword" );

	UKFGFxMenu_StartGame_execGenerateRandomPassword_Parms GenerateRandomPassword_Parms;

	pFnGenerateRandomPassword->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGenerateRandomPassword, &GenerateRandomPassword_Parms, NULL );

	pFnGenerateRandomPassword->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.OnSetTakoverServerPassword
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnSetTakoverServerPassword ( )
{
	static UFunction* pFnOnSetTakoverServerPassword = NULL;

	if ( ! pFnOnSetTakoverServerPassword )
		pFnOnSetTakoverServerPassword = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnSetTakoverServerPassword" );

	UKFGFxMenu_StartGame_execOnSetTakoverServerPassword_Parms OnSetTakoverServerPassword_Parms;

	this->ProcessEvent ( pFnOnSetTakoverServerPassword, &OnSetTakoverServerPassword_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ShowServerTakeoverPasswordPrompt
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ShowServerTakeoverPasswordPrompt ( )
{
	static UFunction* pFnShowServerTakeoverPasswordPrompt = NULL;

	if ( ! pFnShowServerTakeoverPasswordPrompt )
		pFnShowServerTakeoverPasswordPrompt = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ShowServerTakeoverPasswordPrompt" );

	UKFGFxMenu_StartGame_execShowServerTakeoverPasswordPrompt_Parms ShowServerTakeoverPasswordPrompt_Parms;

	this->ProcessEvent ( pFnShowServerTakeoverPasswordPrompt, &ShowServerTakeoverPasswordPrompt_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.StartOnlineGame
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventStartOnlineGame ( )
{
	static UFunction* pFnStartOnlineGame = NULL;

	if ( ! pFnStartOnlineGame )
		pFnStartOnlineGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.StartOnlineGame" );

	UKFGFxMenu_StartGame_eventStartOnlineGame_Parms StartOnlineGame_Parms;

	this->ProcessEvent ( pFnStartOnlineGame, &StartOnlineGame_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_StartOfflineGame
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_StartOfflineGame ( )
{
	static UFunction* pFnCallback_StartOfflineGame = NULL;

	if ( ! pFnCallback_StartOfflineGame )
		pFnCallback_StartOfflineGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_StartOfflineGame" );

	UKFGFxMenu_StartGame_execCallback_StartOfflineGame_Parms Callback_StartOfflineGame_Parms;

	this->ProcessEvent ( pFnCallback_StartOfflineGame, &Callback_StartOfflineGame_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_StartGame
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_StartGame ( )
{
	static UFunction* pFnCallback_StartGame = NULL;

	if ( ! pFnCallback_StartGame )
		pFnCallback_StartGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_StartGame" );

	UKFGFxMenu_StartGame_execCallback_StartGame_Parms Callback_StartGame_Parms;

	this->ProcessEvent ( pFnCallback_StartGame, &Callback_StartGame_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ShouldUseLengthFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ShouldUseLengthFilter ( )
{
	static UFunction* pFnShouldUseLengthFilter = NULL;

	if ( ! pFnShouldUseLengthFilter )
		pFnShouldUseLengthFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ShouldUseLengthFilter" );

	UKFGFxMenu_StartGame_execShouldUseLengthFilter_Parms ShouldUseLengthFilter_Parms;

	this->ProcessEvent ( pFnShouldUseLengthFilter, &ShouldUseLengthFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ShouldUseDifficultyFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ShouldUseDifficultyFilter ( )
{
	static UFunction* pFnShouldUseDifficultyFilter = NULL;

	if ( ! pFnShouldUseDifficultyFilter )
		pFnShouldUseDifficultyFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ShouldUseDifficultyFilter" );

	UKFGFxMenu_StartGame_execShouldUseDifficultyFilter_Parms ShouldUseDifficultyFilter_Parms;

	this->ProcessEvent ( pFnShouldUseDifficultyFilter, &ShouldUseDifficultyFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.BuildServerFilters
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_StartGame::BuildServerFilters ( )
{
	static UFunction* pFnBuildServerFilters = NULL;

	if ( ! pFnBuildServerFilters )
		pFnBuildServerFilters = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.BuildServerFilters" );

	UKFGFxMenu_StartGame_execBuildServerFilters_Parms BuildServerFilters_Parms;

	this->ProcessEvent ( pFnBuildServerFilters, &BuildServerFilters_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.AddLobbyFilter
// [0x00C20002] 
// Parameters infos:

void UKFGFxMenu_StartGame::AddLobbyFilter ( )
{
	static UFunction* pFnAddLobbyFilter = NULL;

	if ( ! pFnAddLobbyFilter )
		pFnAddLobbyFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.AddLobbyFilter" );

	UKFGFxMenu_StartGame_execAddLobbyFilter_Parms AddLobbyFilter_Parms;

	this->ProcessEvent ( pFnAddLobbyFilter, &AddLobbyFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnClose" );

	UKFGFxMenu_StartGame_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnHandshakeComplete
// [0x00420002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnHandshakeComplete ( )
{
	static UFunction* pFnOnHandshakeComplete = NULL;

	if ( ! pFnOnHandshakeComplete )
		pFnOnHandshakeComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnHandshakeComplete" );

	UKFGFxMenu_StartGame_execOnHandshakeComplete_Parms OnHandshakeComplete_Parms;

	this->ProcessEvent ( pFnOnHandshakeComplete, &OnHandshakeComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnOpen" );

	UKFGFxMenu_StartGame_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ServerConnectGiveUp
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ServerConnectGiveUp ( )
{
	static UFunction* pFnServerConnectGiveUp = NULL;

	if ( ! pFnServerConnectGiveUp )
		pFnServerConnectGiveUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ServerConnectGiveUp" );

	UKFGFxMenu_StartGame_execServerConnectGiveUp_Parms ServerConnectGiveUp_Parms;

	this->ProcessEvent ( pFnServerConnectGiveUp, &ServerConnectGiveUp_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.AddJoinGameCompleteDelegate
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventAddJoinGameCompleteDelegate ( )
{
	static UFunction* pFnAddJoinGameCompleteDelegate = NULL;

	if ( ! pFnAddJoinGameCompleteDelegate )
		pFnAddJoinGameCompleteDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.AddJoinGameCompleteDelegate" );

	UKFGFxMenu_StartGame_eventAddJoinGameCompleteDelegate_Parms AddJoinGameCompleteDelegate_Parms;

	this->ProcessEvent ( pFnAddJoinGameCompleteDelegate, &AddJoinGameCompleteDelegate_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.SetServerConnectGiveUpTimer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventSetServerConnectGiveUpTimer ( )
{
	static UFunction* pFnSetServerConnectGiveUpTimer = NULL;

	if ( ! pFnSetServerConnectGiveUpTimer )
		pFnSetServerConnectGiveUpTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SetServerConnectGiveUpTimer" );

	UKFGFxMenu_StartGame_eventSetServerConnectGiveUpTimer_Parms SetServerConnectGiveUpTimer_Parms;

	this->ProcessEvent ( pFnSetServerConnectGiveUpTimer, &SetServerConnectGiveUpTimer_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ConnectToPlayfabServer
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ConnectToPlayfabServer ( )
{
	static UFunction* pFnConnectToPlayfabServer = NULL;

	if ( ! pFnConnectToPlayfabServer )
		pFnConnectToPlayfabServer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ConnectToPlayfabServer" );

	UKFGFxMenu_StartGame_execConnectToPlayfabServer_Parms ConnectToPlayfabServer_Parms;

	this->ProcessEvent ( pFnConnectToPlayfabServer, &ConnectToPlayfabServer_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnJoinGameComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnJoinGameComplete ( )
{
	static UFunction* pFnOnJoinGameComplete = NULL;

	if ( ! pFnOnJoinGameComplete )
		pFnOnJoinGameComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnJoinGameComplete" );

	UKFGFxMenu_StartGame_execOnJoinGameComplete_Parms OnJoinGameComplete_Parms;

	this->ProcessEvent ( pFnOnJoinGameComplete, &OnJoinGameComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.SecureTakeover
// [0x00440401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::SecureTakeover ( )
{
	static UFunction* pFnSecureTakeover = NULL;

	if ( ! pFnSecureTakeover )
		pFnSecureTakeover = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SecureTakeover" );

	UKFGFxMenu_StartGame_execSecureTakeover_Parms SecureTakeover_Parms;

	pFnSecureTakeover->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSecureTakeover, &SecureTakeover_Parms, NULL );

	pFnSecureTakeover->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.BuildTakeoverURL
// [0x00424002] 
// Parameters infos:

void UKFGFxMenu_StartGame::BuildTakeoverURL ( )
{
	static UFunction* pFnBuildTakeoverURL = NULL;

	if ( ! pFnBuildTakeoverURL )
		pFnBuildTakeoverURL = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.BuildTakeoverURL" );

	UKFGFxMenu_StartGame_execBuildTakeoverURL_Parms BuildTakeoverURL_Parms;

	this->ProcessEvent ( pFnBuildTakeoverURL, &BuildTakeoverURL_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.BuildJoinFiltersRequestURL
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::BuildJoinFiltersRequestURL ( )
{
	static UFunction* pFnBuildJoinFiltersRequestURL = NULL;

	if ( ! pFnBuildJoinFiltersRequestURL )
		pFnBuildJoinFiltersRequestURL = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.BuildJoinFiltersRequestURL" );

	UKFGFxMenu_StartGame_execBuildJoinFiltersRequestURL_Parms BuildJoinFiltersRequestURL_Parms;

	this->ProcessEvent ( pFnBuildJoinFiltersRequestURL, &BuildJoinFiltersRequestURL_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.RandomizeSearchResults
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::RandomizeSearchResults ( )
{
	static UFunction* pFnRandomizeSearchResults = NULL;

	if ( ! pFnRandomizeSearchResults )
		pFnRandomizeSearchResults = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.RandomizeSearchResults" );

	UKFGFxMenu_StartGame_execRandomizeSearchResults_Parms RandomizeSearchResults_Parms;

	pFnRandomizeSearchResults->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRandomizeSearchResults, &RandomizeSearchResults_Parms, NULL );

	pFnRandomizeSearchResults->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.SortServers
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::SortServers ( )
{
	static UFunction* pFnSortServers = NULL;

	if ( ! pFnSortServers )
		pFnSortServers = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SortServers" );

	UKFGFxMenu_StartGame_execSortServers_Parms SortServers_Parms;

	pFnSortServers->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortServers, &SortServers_Parms, NULL );

	pFnSortServers->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.SortLastEntry
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::SortLastEntry ( )
{
	static UFunction* pFnSortLastEntry = NULL;

	if ( ! pFnSortLastEntry )
		pFnSortLastEntry = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SortLastEntry" );

	UKFGFxMenu_StartGame_execSortLastEntry_Parms SortLastEntry_Parms;

	pFnSortLastEntry->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortLastEntry, &SortLastEntry_Parms, NULL );

	pFnSortLastEntry->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.MapGood
// [0x00424400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::MapGood ( )
{
	static UFunction* pFnMapGood = NULL;

	if ( ! pFnMapGood )
		pFnMapGood = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.MapGood" );

	UKFGFxMenu_StartGame_execMapGood_Parms MapGood_Parms;

	pFnMapGood->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnMapGood, &MapGood_Parms, NULL );

	pFnMapGood->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.SpaceAvailable
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::SpaceAvailable ( )
{
	static UFunction* pFnSpaceAvailable = NULL;

	if ( ! pFnSpaceAvailable )
		pFnSpaceAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SpaceAvailable" );

	UKFGFxMenu_StartGame_execSpaceAvailable_Parms SpaceAvailable_Parms;

	pFnSpaceAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSpaceAvailable, &SpaceAvailable_Parms, NULL );

	pFnSpaceAvailable->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.OnFindGameServerComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnFindGameServerComplete ( )
{
	static UFunction* pFnOnFindGameServerComplete = NULL;

	if ( ! pFnOnFindGameServerComplete )
		pFnOnFindGameServerComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnFindGameServerComplete" );

	UKFGFxMenu_StartGame_execOnFindGameServerComplete_Parms OnFindGameServerComplete_Parms;

	this->ProcessEvent ( pFnOnFindGameServerComplete, &OnFindGameServerComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GetLobbySize
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventGetLobbySize ( )
{
	static UFunction* pFnGetLobbySize = NULL;

	if ( ! pFnGetLobbySize )
		pFnGetLobbySize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GetLobbySize" );

	UKFGFxMenu_StartGame_eventGetLobbySize_Parms GetLobbySize_Parms;

	this->ProcessEvent ( pFnGetLobbySize, &GetLobbySize_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OpenNotFoundPopup
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventOpenNotFoundPopup ( )
{
	static UFunction* pFnOpenNotFoundPopup = NULL;

	if ( ! pFnOpenNotFoundPopup )
		pFnOpenNotFoundPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OpenNotFoundPopup" );

	UKFGFxMenu_StartGame_eventOpenNotFoundPopup_Parms OpenNotFoundPopup_Parms;

	this->ProcessEvent ( pFnOpenNotFoundPopup, &OpenNotFoundPopup_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.HandleSearchOver
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::HandleSearchOver ( )
{
	static UFunction* pFnHandleSearchOver = NULL;

	if ( ! pFnHandleSearchOver )
		pFnHandleSearchOver = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.HandleSearchOver" );

	UKFGFxMenu_StartGame_execHandleSearchOver_Parms HandleSearchOver_Parms;

	pFnHandleSearchOver->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHandleSearchOver, &HandleSearchOver_Parms, NULL );

	pFnHandleSearchOver->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.TryNextServer
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::TryNextServer ( )
{
	static UFunction* pFnTryNextServer = NULL;

	if ( ! pFnTryNextServer )
		pFnTryNextServer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.TryNextServer" );

	UKFGFxMenu_StartGame_execTryNextServer_Parms TryNextServer_Parms;

	pFnTryNextServer->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnTryNextServer, &TryNextServer_Parms, NULL );

	pFnTryNextServer->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.GetSearchComplete
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::GetSearchComplete ( )
{
	static UFunction* pFnGetSearchComplete = NULL;

	if ( ! pFnGetSearchComplete )
		pFnGetSearchComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GetSearchComplete" );

	UKFGFxMenu_StartGame_execGetSearchComplete_Parms GetSearchComplete_Parms;

	pFnGetSearchComplete->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetSearchComplete, &GetSearchComplete_Parms, NULL );

	pFnGetSearchComplete->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.MakeMapURL
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::MakeMapURL ( )
{
	static UFunction* pFnMakeMapURL = NULL;

	if ( ! pFnMakeMapURL )
		pFnMakeMapURL = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.MakeMapURL" );

	UKFGFxMenu_StartGame_execMakeMapURL_Parms MakeMapURL_Parms;

	this->ProcessEvent ( pFnMakeMapURL, &MakeMapURL_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.SetLobbyData
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::SetLobbyData ( )
{
	static UFunction* pFnSetLobbyData = NULL;

	if ( ! pFnSetLobbyData )
		pFnSetLobbyData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SetLobbyData" );

	UKFGFxMenu_StartGame_execSetLobbyData_Parms SetLobbyData_Parms;

	this->ProcessEvent ( pFnSetLobbyData, &SetLobbyData_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_Region
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_Region ( )
{
	static UFunction* pFnCallback_Region = NULL;

	if ( ! pFnCallback_Region )
		pFnCallback_Region = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_Region" );

	UKFGFxMenu_StartGame_execCallback_Region_Parms Callback_Region_Parms;

	this->ProcessEvent ( pFnCallback_Region, &Callback_Region_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_MapSelection
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_MapSelection ( )
{
	static UFunction* pFnCallback_MapSelection = NULL;

	if ( ! pFnCallback_MapSelection )
		pFnCallback_MapSelection = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_MapSelection" );

	UKFGFxMenu_StartGame_execCallback_MapSelection_Parms Callback_MapSelection_Parms;

	this->ProcessEvent ( pFnCallback_MapSelection, &Callback_MapSelection_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_Privacy
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_Privacy ( )
{
	static UFunction* pFnCallback_Privacy = NULL;

	if ( ! pFnCallback_Privacy )
		pFnCallback_Privacy = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_Privacy" );

	UKFGFxMenu_StartGame_execCallback_Privacy_Parms Callback_Privacy_Parms;

	this->ProcessEvent ( pFnCallback_Privacy, &Callback_Privacy_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_Difficulty
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_Difficulty ( )
{
	static UFunction* pFnCallback_Difficulty = NULL;

	if ( ! pFnCallback_Difficulty )
		pFnCallback_Difficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_Difficulty" );

	UKFGFxMenu_StartGame_execCallback_Difficulty_Parms Callback_Difficulty_Parms;

	this->ProcessEvent ( pFnCallback_Difficulty, &Callback_Difficulty_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_Length
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_Length ( )
{
	static UFunction* pFnCallback_Length = NULL;

	if ( ! pFnCallback_Length )
		pFnCallback_Length = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_Length" );

	UKFGFxMenu_StartGame_execCallback_Length_Parms Callback_Length_Parms;

	this->ProcessEvent ( pFnCallback_Length, &Callback_Length_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_Mode
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_Mode ( )
{
	static UFunction* pFnCallback_Mode = NULL;

	if ( ! pFnCallback_Mode )
		pFnCallback_Mode = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_Mode" );

	UKFGFxMenu_StartGame_execCallback_Mode_Parms Callback_Mode_Parms;

	this->ProcessEvent ( pFnCallback_Mode, &Callback_Mode_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_StartMenuChange
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_StartMenuChange ( )
{
	static UFunction* pFnCallback_StartMenuChange = NULL;

	if ( ! pFnCallback_StartMenuChange )
		pFnCallback_StartMenuChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_StartMenuChange" );

	UKFGFxMenu_StartGame_execCallback_StartMenuChange_Parms Callback_StartMenuChange_Parms;

	this->ProcessEvent ( pFnCallback_StartMenuChange, &Callback_StartMenuChange_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_StartMenuRequestReinit
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_StartMenuRequestReinit ( )
{
	static UFunction* pFnCallback_StartMenuRequestReinit = NULL;

	if ( ! pFnCallback_StartMenuRequestReinit )
		pFnCallback_StartMenuRequestReinit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_StartMenuRequestReinit" );

	UKFGFxMenu_StartGame_execCallback_StartMenuRequestReinit_Parms Callback_StartMenuRequestReinit_Parms;

	this->ProcessEvent ( pFnCallback_StartMenuRequestReinit, &Callback_StartMenuRequestReinit_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnCanPlayOnlineCheckComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnCanPlayOnlineCheckComplete ( )
{
	static UFunction* pFnOnCanPlayOnlineCheckComplete = NULL;

	if ( ! pFnOnCanPlayOnlineCheckComplete )
		pFnOnCanPlayOnlineCheckComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnCanPlayOnlineCheckComplete" );

	UKFGFxMenu_StartGame_execOnCanPlayOnlineCheckComplete_Parms OnCanPlayOnlineCheckComplete_Parms;

	this->ProcessEvent ( pFnOnCanPlayOnlineCheckComplete, &OnCanPlayOnlineCheckComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_OpenServerBrowser
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_OpenServerBrowser ( )
{
	static UFunction* pFnCallback_OpenServerBrowser = NULL;

	if ( ! pFnCallback_OpenServerBrowser )
		pFnCallback_OpenServerBrowser = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_OpenServerBrowser" );

	UKFGFxMenu_StartGame_execCallback_OpenServerBrowser_Parms Callback_OpenServerBrowser_Parms;

	this->ProcessEvent ( pFnCallback_OpenServerBrowser, &Callback_OpenServerBrowser_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ProceedToMatchMaking
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ProceedToMatchMaking ( )
{
	static UFunction* pFnProceedToMatchMaking = NULL;

	if ( ! pFnProceedToMatchMaking )
		pFnProceedToMatchMaking = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ProceedToMatchMaking" );

	UKFGFxMenu_StartGame_execProceedToMatchMaking_Parms ProceedToMatchMaking_Parms;

	this->ProcessEvent ( pFnProceedToMatchMaking, &ProceedToMatchMaking_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_OpenMatchMaking
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_OpenMatchMaking ( )
{
	static UFunction* pFnCallback_OpenMatchMaking = NULL;

	if ( ! pFnCallback_OpenMatchMaking )
		pFnCallback_OpenMatchMaking = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_OpenMatchMaking" );

	UKFGFxMenu_StartGame_execCallback_OpenMatchMaking_Parms Callback_OpenMatchMaking_Parms;

	this->ProcessEvent ( pFnCallback_OpenMatchMaking, &Callback_OpenMatchMaking_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_InGamePermissionChange
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_InGamePermissionChange ( )
{
	static UFunction* pFnCallback_InGamePermissionChange = NULL;

	if ( ! pFnCallback_InGamePermissionChange )
		pFnCallback_InGamePermissionChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_InGamePermissionChange" );

	UKFGFxMenu_StartGame_execCallback_InGamePermissionChange_Parms Callback_InGamePermissionChange_Parms;

	this->ProcessEvent ( pFnCallback_InGamePermissionChange, &Callback_InGamePermissionChange_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_OptionListOpened
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_OptionListOpened ( )
{
	static UFunction* pFnCallback_OptionListOpened = NULL;

	if ( ! pFnCallback_OptionListOpened )
		pFnCallback_OptionListOpened = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_OptionListOpened" );

	UKFGFxMenu_StartGame_execCallback_OptionListOpened_Parms Callback_OptionListOpened_Parms;

	this->ProcessEvent ( pFnCallback_OptionListOpened, &Callback_OptionListOpened_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_CancelSearch
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_CancelSearch ( )
{
	static UFunction* pFnCallback_CancelSearch = NULL;

	if ( ! pFnCallback_CancelSearch )
		pFnCallback_CancelSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_CancelSearch" );

	UKFGFxMenu_StartGame_execCallback_CancelSearch_Parms Callback_CancelSearch_Parms;

	this->ProcessEvent ( pFnCallback_CancelSearch, &Callback_CancelSearch_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_OnWebLinkClicked
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_OnWebLinkClicked ( )
{
	static UFunction* pFnCallback_OnWebLinkClicked = NULL;

	if ( ! pFnCallback_OnWebLinkClicked )
		pFnCallback_OnWebLinkClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_OnWebLinkClicked" );

	UKFGFxMenu_StartGame_execCallback_OnWebLinkClicked_Parms Callback_OnWebLinkClicked_Parms;

	this->ProcessEvent ( pFnCallback_OnWebLinkClicked, &Callback_OnWebLinkClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_StartTutorial
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_StartTutorial ( )
{
	static UFunction* pFnCallback_StartTutorial = NULL;

	if ( ! pFnCallback_StartTutorial )
		pFnCallback_StartTutorial = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_StartTutorial" );

	UKFGFxMenu_StartGame_execCallback_StartTutorial_Parms Callback_StartTutorial_Parms;

	this->ProcessEvent ( pFnCallback_StartTutorial, &Callback_StartTutorial_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_SoloButtonPressed
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_SoloButtonPressed ( )
{
	static UFunction* pFnCallback_SoloButtonPressed = NULL;

	if ( ! pFnCallback_SoloButtonPressed )
		pFnCallback_SoloButtonPressed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_SoloButtonPressed" );

	UKFGFxMenu_StartGame_execCallback_SoloButtonPressed_Parms Callback_SoloButtonPressed_Parms;

	this->ProcessEvent ( pFnCallback_SoloButtonPressed, &Callback_SoloButtonPressed_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_NewsButtonPressed
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_NewsButtonPressed ( )
{
	static UFunction* pFnCallback_NewsButtonPressed = NULL;

	if ( ! pFnCallback_NewsButtonPressed )
		pFnCallback_NewsButtonPressed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_NewsButtonPressed" );

	UKFGFxMenu_StartGame_execCallback_NewsButtonPressed_Parms Callback_NewsButtonPressed_Parms;

	this->ProcessEvent ( pFnCallback_NewsButtonPressed, &Callback_NewsButtonPressed_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.Callback_OnWhatsNewClicked
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::Callback_OnWhatsNewClicked ( )
{
	static UFunction* pFnCallback_OnWhatsNewClicked = NULL;

	if ( ! pFnCallback_OnWhatsNewClicked )
		pFnCallback_OnWhatsNewClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.Callback_OnWhatsNewClicked" );

	UKFGFxMenu_StartGame_execCallback_OnWhatsNewClicked_Parms Callback_OnWhatsNewClicked_Parms;

	this->ProcessEvent ( pFnCallback_OnWhatsNewClicked, &Callback_OnWhatsNewClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.PostPartyDisbandTutorial
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::PostPartyDisbandTutorial ( )
{
	static UFunction* pFnPostPartyDisbandTutorial = NULL;

	if ( ! pFnPostPartyDisbandTutorial )
		pFnPostPartyDisbandTutorial = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.PostPartyDisbandTutorial" );

	UKFGFxMenu_StartGame_execPostPartyDisbandTutorial_Parms PostPartyDisbandTutorial_Parms;

	this->ProcessEvent ( pFnPostPartyDisbandTutorial, &PostPartyDisbandTutorial_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ProceedToSoloMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ProceedToSoloMenu ( )
{
	static UFunction* pFnProceedToSoloMenu = NULL;

	if ( ! pFnProceedToSoloMenu )
		pFnProceedToSoloMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ProceedToSoloMenu" );

	UKFGFxMenu_StartGame_execProceedToSoloMenu_Parms ProceedToSoloMenu_Parms;

	this->ProcessEvent ( pFnProceedToSoloMenu, &ProceedToSoloMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ProceedToTutorial
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ProceedToTutorial ( )
{
	static UFunction* pFnProceedToTutorial = NULL;

	if ( ! pFnProceedToTutorial )
		pFnProceedToTutorial = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ProceedToTutorial" );

	UKFGFxMenu_StartGame_execProceedToTutorial_Parms ProceedToTutorial_Parms;

	this->ProcessEvent ( pFnProceedToTutorial, &ProceedToTutorial_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.UpdateStartMenuState
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::UpdateStartMenuState ( )
{
	static UFunction* pFnUpdateStartMenuState = NULL;

	if ( ! pFnUpdateStartMenuState )
		pFnUpdateStartMenuState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.UpdateStartMenuState" );

	UKFGFxMenu_StartGame_execUpdateStartMenuState_Parms UpdateStartMenuState_Parms;

	this->ProcessEvent ( pFnUpdateStartMenuState, &UpdateStartMenuState_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ClearLeaveMenuFlag
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ClearLeaveMenuFlag ( )
{
	static UFunction* pFnClearLeaveMenuFlag = NULL;

	if ( ! pFnClearLeaveMenuFlag )
		pFnClearLeaveMenuFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ClearLeaveMenuFlag" );

	UKFGFxMenu_StartGame_execClearLeaveMenuFlag_Parms ClearLeaveMenuFlag_Parms;

	this->ProcessEvent ( pFnClearLeaveMenuFlag, &ClearLeaveMenuFlag_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.CancelLeaveMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::CancelLeaveMenu ( )
{
	static UFunction* pFnCancelLeaveMenu = NULL;

	if ( ! pFnCancelLeaveMenu )
		pFnCancelLeaveMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.CancelLeaveMenu" );

	UKFGFxMenu_StartGame_execCancelLeaveMenu_Parms CancelLeaveMenu_Parms;

	this->ProcessEvent ( pFnCancelLeaveMenu, &CancelLeaveMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GoToServerBrowser
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::GoToServerBrowser ( )
{
	static UFunction* pFnGoToServerBrowser = NULL;

	if ( ! pFnGoToServerBrowser )
		pFnGoToServerBrowser = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GoToServerBrowser" );

	UKFGFxMenu_StartGame_execGoToServerBrowser_Parms GoToServerBrowser_Parms;

	this->ProcessEvent ( pFnGoToServerBrowser, &GoToServerBrowser_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ApproveMatchMakingLeave
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ApproveMatchMakingLeave ( )
{
	static UFunction* pFnApproveMatchMakingLeave = NULL;

	if ( ! pFnApproveMatchMakingLeave )
		pFnApproveMatchMakingLeave = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ApproveMatchMakingLeave" );

	UKFGFxMenu_StartGame_execApproveMatchMakingLeave_Parms ApproveMatchMakingLeave_Parms;

	this->ProcessEvent ( pFnApproveMatchMakingLeave, &ApproveMatchMakingLeave_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ReceiveLeaderOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::ReceiveLeaderOptions ( )
{
	static UFunction* pFnReceiveLeaderOptions = NULL;

	if ( ! pFnReceiveLeaderOptions )
		pFnReceiveLeaderOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ReceiveLeaderOptions" );

	UKFGFxMenu_StartGame_execReceiveLeaderOptions_Parms ReceiveLeaderOptions_Parms;

	this->ProcessEvent ( pFnReceiveLeaderOptions, &ReceiveLeaderOptions_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.SendLeaderOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::SendLeaderOptions ( )
{
	static UFunction* pFnSendLeaderOptions = NULL;

	if ( ! pFnSendLeaderOptions )
		pFnSendLeaderOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SendLeaderOptions" );

	UKFGFxMenu_StartGame_execSendLeaderOptions_Parms SendLeaderOptions_Parms;

	this->ProcessEvent ( pFnSendLeaderOptions, &SendLeaderOptions_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.UpdateMenu
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_StartGame::UpdateMenu ( )
{
	static UFunction* pFnUpdateMenu = NULL;

	if ( ! pFnUpdateMenu )
		pFnUpdateMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.UpdateMenu" );

	UKFGFxMenu_StartGame_execUpdateMenu_Parms UpdateMenu_Parms;

	this->ProcessEvent ( pFnUpdateMenu, &UpdateMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.SendToOverviewOnChange
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::SendToOverviewOnChange ( )
{
	static UFunction* pFnSendToOverviewOnChange = NULL;

	if ( ! pFnSendToOverviewOnChange )
		pFnSendToOverviewOnChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SendToOverviewOnChange" );

	UKFGFxMenu_StartGame_execSendToOverviewOnChange_Parms SendToOverviewOnChange_Parms;

	this->ProcessEvent ( pFnSendToOverviewOnChange, &SendToOverviewOnChange_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.HandleSteamLobbyLeaderTakeOver
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::HandleSteamLobbyLeaderTakeOver ( )
{
	static UFunction* pFnHandleSteamLobbyLeaderTakeOver = NULL;

	if ( ! pFnHandleSteamLobbyLeaderTakeOver )
		pFnHandleSteamLobbyLeaderTakeOver = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.HandleSteamLobbyLeaderTakeOver" );

	UKFGFxMenu_StartGame_execHandleSteamLobbyLeaderTakeOver_Parms HandleSteamLobbyLeaderTakeOver_Parms;

	this->ProcessEvent ( pFnHandleSteamLobbyLeaderTakeOver, &HandleSteamLobbyLeaderTakeOver_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GetMapSource
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::GetMapSource ( )
{
	static UFunction* pFnGetMapSource = NULL;

	if ( ! pFnGetMapSource )
		pFnGetMapSource = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GetMapSource" );

	UKFGFxMenu_StartGame_execGetMapSource_Parms GetMapSource_Parms;

	this->ProcessEvent ( pFnGetMapSource, &GetMapSource_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GetStartMenuState
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::GetStartMenuState ( )
{
	static UFunction* pFnGetStartMenuState = NULL;

	if ( ! pFnGetStartMenuState )
		pFnGetStartMenuState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GetStartMenuState" );

	UKFGFxMenu_StartGame_execGetStartMenuState_Parms GetStartMenuState_Parms;

	this->ProcessEvent ( pFnGetStartMenuState, &GetStartMenuState_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OneSecondLoop" );

	UKFGFxMenu_StartGame_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.OnPlayerReadiedUp
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::OnPlayerReadiedUp ( )
{
	static UFunction* pFnOnPlayerReadiedUp = NULL;

	if ( ! pFnOnPlayerReadiedUp )
		pFnOnPlayerReadiedUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.OnPlayerReadiedUp" );

	UKFGFxMenu_StartGame_execOnPlayerReadiedUp_Parms OnPlayerReadiedUp_Parms;

	this->ProcessEvent ( pFnOnPlayerReadiedUp, &OnPlayerReadiedUp_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.SetOverview
// [0x00824002] 
// Parameters infos:

void UKFGFxMenu_StartGame::SetOverview ( )
{
	static UFunction* pFnSetOverview = NULL;

	if ( ! pFnSetOverview )
		pFnSetOverview = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SetOverview" );

	UKFGFxMenu_StartGame_execSetOverview_Parms SetOverview_Parms;

	this->ProcessEvent ( pFnSetOverview, &SetOverview_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.ReloadSounds
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::ReloadSounds ( )
{
	static UFunction* pFnReloadSounds = NULL;

	if ( ! pFnReloadSounds )
		pFnReloadSounds = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.ReloadSounds" );

	UKFGFxMenu_StartGame_execReloadSounds_Parms ReloadSounds_Parms;

	pFnReloadSounds->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnReloadSounds, &ReloadSounds_Parms, NULL );

	pFnReloadSounds->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_StartGame.CheckGameFullyInstalled
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::CheckGameFullyInstalled ( )
{
	static UFunction* pFnCheckGameFullyInstalled = NULL;

	if ( ! pFnCheckGameFullyInstalled )
		pFnCheckGameFullyInstalled = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.CheckGameFullyInstalled" );

	UKFGFxMenu_StartGame_execCheckGameFullyInstalled_Parms CheckGameFullyInstalled_Parms;

	this->ProcessEvent ( pFnCheckGameFullyInstalled, &CheckGameFullyInstalled_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GetCouldNotFindGameDescription
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::GetCouldNotFindGameDescription ( )
{
	static UFunction* pFnGetCouldNotFindGameDescription = NULL;

	if ( ! pFnGetCouldNotFindGameDescription )
		pFnGetCouldNotFindGameDescription = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GetCouldNotFindGameDescription" );

	UKFGFxMenu_StartGame_execGetCouldNotFindGameDescription_Parms GetCouldNotFindGameDescription_Parms;

	this->ProcessEvent ( pFnGetCouldNotFindGameDescription, &GetCouldNotFindGameDescription_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_StartGame::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.WidgetInitialized" );

	UKFGFxMenu_StartGame_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GetSpecialEventClass
// [0x00022002] 
// Parameters infos:

void UKFGFxMenu_StartGame::GetSpecialEventClass ( )
{
	static UFunction* pFnGetSpecialEventClass = NULL;

	if ( ! pFnGetSpecialEventClass )
		pFnGetSpecialEventClass = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GetSpecialEventClass" );

	UKFGFxMenu_StartGame_execGetSpecialEventClass_Parms GetSpecialEventClass_Parms;

	this->ProcessEvent ( pFnGetSpecialEventClass, &GetSpecialEventClass_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.SetSeasonalEventClass
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_StartGame::SetSeasonalEventClass ( )
{
	static UFunction* pFnSetSeasonalEventClass = NULL;

	if ( ! pFnSetSeasonalEventClass )
		pFnSetSeasonalEventClass = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.SetSeasonalEventClass" );

	UKFGFxMenu_StartGame_execSetSeasonalEventClass_Parms SetSeasonalEventClass_Parms;

	this->ProcessEvent ( pFnSetSeasonalEventClass, &SetSeasonalEventClass_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_StartGame::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.InitializeMenu" );

	UKFGFxMenu_StartGame_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_StartGame.GetMapList
// [0x00426400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_StartGame::GetMapList ( )
{
	static UFunction* pFnGetMapList = NULL;

	if ( ! pFnGetMapList )
		pFnGetMapList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_StartGame.GetMapList" );

	UKFGFxMenu_StartGame_execGetMapList_Parms GetMapList_Parms;

	pFnGetMapList->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetMapList, &GetMapList_Parms, NULL );

	pFnGetMapList->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_Store.CheckForEmptyStore
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::CheckForEmptyStore ( )
{
	static UFunction* pFnCheckForEmptyStore = NULL;

	if ( ! pFnCheckForEmptyStore )
		pFnCheckForEmptyStore = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.CheckForEmptyStore" );

	UKFGFxMenu_Store_execCheckForEmptyStore_Parms CheckForEmptyStore_Parms;

	this->ProcessEvent ( pFnCheckForEmptyStore, &CheckForEmptyStore_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.CreateStoreItem
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::CreateStoreItem ( )
{
	static UFunction* pFnCreateStoreItem = NULL;

	if ( ! pFnCreateStoreItem )
		pFnCreateStoreItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.CreateStoreItem" );

	UKFGFxMenu_Store_execCreateStoreItem_Parms CreateStoreItem_Parms;

	this->ProcessEvent ( pFnCreateStoreItem, &CreateStoreItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.CallBack_ItemDetailsClicked
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Store::CallBack_ItemDetailsClicked ( )
{
	static UFunction* pFnCallBack_ItemDetailsClicked = NULL;

	if ( ! pFnCallBack_ItemDetailsClicked )
		pFnCallBack_ItemDetailsClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.CallBack_ItemDetailsClicked" );

	UKFGFxMenu_Store_execCallBack_ItemDetailsClicked_Parms CallBack_ItemDetailsClicked_Parms;

	this->ProcessEvent ( pFnCallBack_ItemDetailsClicked, &CallBack_ItemDetailsClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.Callback_AddToCartClicked
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Store::Callback_AddToCartClicked ( )
{
	static UFunction* pFnCallback_AddToCartClicked = NULL;

	if ( ! pFnCallback_AddToCartClicked )
		pFnCallback_AddToCartClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.Callback_AddToCartClicked" );

	UKFGFxMenu_Store_execCallback_AddToCartClicked_Parms Callback_AddToCartClicked_Parms;

	this->ProcessEvent ( pFnCallback_AddToCartClicked, &Callback_AddToCartClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.Callback_StoreSectionChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::Callback_StoreSectionChanged ( )
{
	static UFunction* pFnCallback_StoreSectionChanged = NULL;

	if ( ! pFnCallback_StoreSectionChanged )
		pFnCallback_StoreSectionChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.Callback_StoreSectionChanged" );

	UKFGFxMenu_Store_execCallback_StoreSectionChanged_Parms Callback_StoreSectionChanged_Parms;

	this->ProcessEvent ( pFnCallback_StoreSectionChanged, &Callback_StoreSectionChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_Store::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.WidgetInitialized" );

	UKFGFxMenu_Store_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.LocalizeText" );

	UKFGFxMenu_Store_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.RefreshItemList
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::RefreshItemList ( )
{
	static UFunction* pFnRefreshItemList = NULL;

	if ( ! pFnRefreshItemList )
		pFnRefreshItemList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.RefreshItemList" );

	UKFGFxMenu_Store_execRefreshItemList_Parms RefreshItemList_Parms;

	this->ProcessEvent ( pFnRefreshItemList, &RefreshItemList_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.OnReadPlayfabInventoryComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::OnReadPlayfabInventoryComplete ( )
{
	static UFunction* pFnOnReadPlayfabInventoryComplete = NULL;

	if ( ! pFnOnReadPlayfabInventoryComplete )
		pFnOnReadPlayfabInventoryComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.OnReadPlayfabInventoryComplete" );

	UKFGFxMenu_Store_execOnReadPlayfabInventoryComplete_Parms OnReadPlayfabInventoryComplete_Parms;

	this->ProcessEvent ( pFnOnReadPlayfabInventoryComplete, &OnReadPlayfabInventoryComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.OnInventoryReadComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::OnInventoryReadComplete ( )
{
	static UFunction* pFnOnInventoryReadComplete = NULL;

	if ( ! pFnOnInventoryReadComplete )
		pFnOnInventoryReadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.OnInventoryReadComplete" );

	UKFGFxMenu_Store_execOnInventoryReadComplete_Parms OnInventoryReadComplete_Parms;

	this->ProcessEvent ( pFnOnInventoryReadComplete, &OnInventoryReadComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.OnClose
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::OnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.OnClose" );

	UKFGFxMenu_Store_execOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.OnOpen" );

	UKFGFxMenu_Store_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Store::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.InitializeMenu" );

	UKFGFxMenu_Store_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Store.HideSystemStoreIcon
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_Store::HideSystemStoreIcon ( )
{
	static UFunction* pFnHideSystemStoreIcon = NULL;

	if ( ! pFnHideSystemStoreIcon )
		pFnHideSystemStoreIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.HideSystemStoreIcon" );

	UKFGFxMenu_Store_execHideSystemStoreIcon_Parms HideSystemStoreIcon_Parms;

	pFnHideSystemStoreIcon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnHideSystemStoreIcon, &HideSystemStoreIcon_Parms, NULL );

	pFnHideSystemStoreIcon->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_Store.ShowSystemStoreIcon
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxMenu_Store::ShowSystemStoreIcon ( )
{
	static UFunction* pFnShowSystemStoreIcon = NULL;

	if ( ! pFnShowSystemStoreIcon )
		pFnShowSystemStoreIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Store.ShowSystemStoreIcon" );

	UKFGFxMenu_Store_execShowSystemStoreIcon_Parms ShowSystemStoreIcon_Parms;

	pFnShowSystemStoreIcon->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnShowSystemStoreIcon, &ShowSystemStoreIcon_Parms, NULL );

	pFnShowSystemStoreIcon->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxMenu_Trader.Callback_Close
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_Close ( )
{
	static UFunction* pFnCallback_Close = NULL;

	if ( ! pFnCallback_Close )
		pFnCallback_Close = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_Close" );

	UKFGFxMenu_Trader_execCallback_Close_Parms Callback_Close_Parms;

	this->ProcessEvent ( pFnCallback_Close, &Callback_Close_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_PerkChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_PerkChanged ( )
{
	static UFunction* pFnCallback_PerkChanged = NULL;

	if ( ! pFnCallback_PerkChanged )
		pFnCallback_PerkChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_PerkChanged" );

	UKFGFxMenu_Trader_execCallback_PerkChanged_Parms Callback_PerkChanged_Parms;

	this->ProcessEvent ( pFnCallback_PerkChanged, &Callback_PerkChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_GrenadeItemSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_GrenadeItemSelected ( )
{
	static UFunction* pFnCallback_GrenadeItemSelected = NULL;

	if ( ! pFnCallback_GrenadeItemSelected )
		pFnCallback_GrenadeItemSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_GrenadeItemSelected" );

	UKFGFxMenu_Trader_execCallback_GrenadeItemSelected_Parms Callback_GrenadeItemSelected_Parms;

	this->ProcessEvent ( pFnCallback_GrenadeItemSelected, &Callback_GrenadeItemSelected_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_ArmorItemSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_ArmorItemSelected ( )
{
	static UFunction* pFnCallback_ArmorItemSelected = NULL;

	if ( ! pFnCallback_ArmorItemSelected )
		pFnCallback_ArmorItemSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_ArmorItemSelected" );

	UKFGFxMenu_Trader_execCallback_ArmorItemSelected_Parms Callback_ArmorItemSelected_Parms;

	this->ProcessEvent ( pFnCallback_ArmorItemSelected, &Callback_ArmorItemSelected_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_PlayerItemSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_PlayerItemSelected ( )
{
	static UFunction* pFnCallback_PlayerItemSelected = NULL;

	if ( ! pFnCallback_PlayerItemSelected )
		pFnCallback_PlayerItemSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_PlayerItemSelected" );

	UKFGFxMenu_Trader_execCallback_PlayerItemSelected_Parms Callback_PlayerItemSelected_Parms;

	this->ProcessEvent ( pFnCallback_PlayerItemSelected, &Callback_PlayerItemSelected_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_ShopItemSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_ShopItemSelected ( )
{
	static UFunction* pFnCallback_ShopItemSelected = NULL;

	if ( ! pFnCallback_ShopItemSelected )
		pFnCallback_ShopItemSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_ShopItemSelected" );

	UKFGFxMenu_Trader_execCallback_ShopItemSelected_Parms Callback_ShopItemSelected_Parms;

	this->ProcessEvent ( pFnCallback_ShopItemSelected, &Callback_ShopItemSelected_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_AutoFill
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_AutoFill ( )
{
	static UFunction* pFnCallback_AutoFill = NULL;

	if ( ! pFnCallback_AutoFill )
		pFnCallback_AutoFill = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_AutoFill" );

	UKFGFxMenu_Trader_execCallback_AutoFill_Parms Callback_AutoFill_Parms;

	this->ProcessEvent ( pFnCallback_AutoFill, &Callback_AutoFill_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_BuyMagazine
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_BuyMagazine ( )
{
	static UFunction* pFnCallback_BuyMagazine = NULL;

	if ( ! pFnCallback_BuyMagazine )
		pFnCallback_BuyMagazine = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_BuyMagazine" );

	UKFGFxMenu_Trader_execCallback_BuyMagazine_Parms Callback_BuyMagazine_Parms;

	this->ProcessEvent ( pFnCallback_BuyMagazine, &Callback_BuyMagazine_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_FillAmmo
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_FillAmmo ( )
{
	static UFunction* pFnCallback_FillAmmo = NULL;

	if ( ! pFnCallback_FillAmmo )
		pFnCallback_FillAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_FillAmmo" );

	UKFGFxMenu_Trader_execCallback_FillAmmo_Parms Callback_FillAmmo_Parms;

	this->ProcessEvent ( pFnCallback_FillAmmo, &Callback_FillAmmo_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_FillArmor
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_FillArmor ( )
{
	static UFunction* pFnCallback_FillArmor = NULL;

	if ( ! pFnCallback_FillArmor )
		pFnCallback_FillArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_FillArmor" );

	UKFGFxMenu_Trader_execCallback_FillArmor_Parms Callback_FillArmor_Parms;

	this->ProcessEvent ( pFnCallback_FillArmor, &Callback_FillArmor_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_FillGrenades
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_FillGrenades ( )
{
	static UFunction* pFnCallback_FillGrenades = NULL;

	if ( ! pFnCallback_FillGrenades )
		pFnCallback_FillGrenades = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_FillGrenades" );

	UKFGFxMenu_Trader_execCallback_FillGrenades_Parms Callback_FillGrenades_Parms;

	this->ProcessEvent ( pFnCallback_FillGrenades, &Callback_FillGrenades_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_BuyGrenade
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_BuyGrenade ( )
{
	static UFunction* pFnCallback_BuyGrenade = NULL;

	if ( ! pFnCallback_BuyGrenade )
		pFnCallback_BuyGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_BuyGrenade" );

	UKFGFxMenu_Trader_execCallback_BuyGrenade_Parms Callback_BuyGrenade_Parms;

	this->ProcessEvent ( pFnCallback_BuyGrenade, &Callback_BuyGrenade_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_UpgradeItem
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_UpgradeItem ( )
{
	static UFunction* pFnCallback_UpgradeItem = NULL;

	if ( ! pFnCallback_UpgradeItem )
		pFnCallback_UpgradeItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_UpgradeItem" );

	UKFGFxMenu_Trader_execCallback_UpgradeItem_Parms Callback_UpgradeItem_Parms;

	this->ProcessEvent ( pFnCallback_UpgradeItem, &Callback_UpgradeItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_TabChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_TabChanged ( )
{
	static UFunction* pFnCallback_TabChanged = NULL;

	if ( ! pFnCallback_TabChanged )
		pFnCallback_TabChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_TabChanged" );

	UKFGFxMenu_Trader_execCallback_TabChanged_Parms Callback_TabChanged_Parms;

	this->ProcessEvent ( pFnCallback_TabChanged, &Callback_TabChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_FilterChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_FilterChanged ( )
{
	static UFunction* pFnCallback_FilterChanged = NULL;

	if ( ! pFnCallback_FilterChanged )
		pFnCallback_FilterChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_FilterChanged" );

	UKFGFxMenu_Trader_execCallback_FilterChanged_Parms Callback_FilterChanged_Parms;

	this->ProcessEvent ( pFnCallback_FilterChanged, &Callback_FilterChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_FavoriteItem
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_FavoriteItem ( )
{
	static UFunction* pFnCallback_FavoriteItem = NULL;

	if ( ! pFnCallback_FavoriteItem )
		pFnCallback_FavoriteItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_FavoriteItem" );

	UKFGFxMenu_Trader_execCallback_FavoriteItem_Parms Callback_FavoriteItem_Parms;

	this->ProcessEvent ( pFnCallback_FavoriteItem, &Callback_FavoriteItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.Callback_BuyOrSellItem
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Trader::Callback_BuyOrSellItem ( )
{
	static UFunction* pFnCallback_BuyOrSellItem = NULL;

	if ( ! pFnCallback_BuyOrSellItem )
		pFnCallback_BuyOrSellItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.Callback_BuyOrSellItem" );

	UKFGFxMenu_Trader_execCallback_BuyOrSellItem_Parms Callback_BuyOrSellItem_Parms;

	this->ProcessEvent ( pFnCallback_BuyOrSellItem, &Callback_BuyOrSellItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.PurchaseError
// [0x00020102] 
// Parameters infos:

void UKFGFxMenu_Trader::PurchaseError ( )
{
	static UFunction* pFnPurchaseError = NULL;

	if ( ! pFnPurchaseError )
		pFnPurchaseError = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.PurchaseError" );

	UKFGFxMenu_Trader_execPurchaseError_Parms PurchaseError_Parms;

	this->ProcessEvent ( pFnPurchaseError, &PurchaseError_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.GetDisplayedBlocksRequiredFor
// [0x00424102] 
// Parameters infos:

void UKFGFxMenu_Trader::GetDisplayedBlocksRequiredFor ( )
{
	static UFunction* pFnGetDisplayedBlocksRequiredFor = NULL;

	if ( ! pFnGetDisplayedBlocksRequiredFor )
		pFnGetDisplayedBlocksRequiredFor = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.GetDisplayedBlocksRequiredFor" );

	UKFGFxMenu_Trader_execGetDisplayedBlocksRequiredFor_Parms GetDisplayedBlocksRequiredFor_Parms;

	this->ProcessEvent ( pFnGetDisplayedBlocksRequiredFor, &GetDisplayedBlocksRequiredFor_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.ToggleFavorite
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::ToggleFavorite ( )
{
	static UFunction* pFnToggleFavorite = NULL;

	if ( ! pFnToggleFavorite )
		pFnToggleFavorite = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.ToggleFavorite" );

	UKFGFxMenu_Trader_execToggleFavorite_Parms ToggleFavorite_Parms;

	this->ProcessEvent ( pFnToggleFavorite, &ToggleFavorite_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.GetIsFavorite
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::GetIsFavorite ( )
{
	static UFunction* pFnGetIsFavorite = NULL;

	if ( ! pFnGetIsFavorite )
		pFnGetIsFavorite = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.GetIsFavorite" );

	UKFGFxMenu_Trader_execGetIsFavorite_Parms GetIsFavorite_Parms;

	this->ProcessEvent ( pFnGetIsFavorite, &GetIsFavorite_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.RefreshShopItemList
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::RefreshShopItemList ( )
{
	static UFunction* pFnRefreshShopItemList = NULL;

	if ( ! pFnRefreshShopItemList )
		pFnRefreshShopItemList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.RefreshShopItemList" );

	UKFGFxMenu_Trader_execRefreshShopItemList_Parms RefreshShopItemList_Parms;

	this->ProcessEvent ( pFnRefreshShopItemList, &RefreshShopItemList_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.RefreshItemComponents
// [0x00024002] 
// Parameters infos:

void UKFGFxMenu_Trader::RefreshItemComponents ( )
{
	static UFunction* pFnRefreshItemComponents = NULL;

	if ( ! pFnRefreshItemComponents )
		pFnRefreshItemComponents = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.RefreshItemComponents" );

	UKFGFxMenu_Trader_execRefreshItemComponents_Parms RefreshItemComponents_Parms;

	this->ProcessEvent ( pFnRefreshItemComponents, &RefreshItemComponents_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.OnPerkChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::OnPerkChanged ( )
{
	static UFunction* pFnOnPerkChanged = NULL;

	if ( ! pFnOnPerkChanged )
		pFnOnPerkChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.OnPerkChanged" );

	UKFGFxMenu_Trader_execOnPerkChanged_Parms OnPerkChanged_Parms;

	this->ProcessEvent ( pFnOnPerkChanged, &OnPerkChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.SetNewSelectedIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::SetNewSelectedIndex ( )
{
	static UFunction* pFnSetNewSelectedIndex = NULL;

	if ( ! pFnSetNewSelectedIndex )
		pFnSetNewSelectedIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.SetNewSelectedIndex" );

	UKFGFxMenu_Trader_execSetNewSelectedIndex_Parms SetNewSelectedIndex_Parms;

	this->ProcessEvent ( pFnSetNewSelectedIndex, &SetNewSelectedIndex_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.SetGenericItemDetails
// [0x00420002] 
// Parameters infos:

void UKFGFxMenu_Trader::SetGenericItemDetails ( )
{
	static UFunction* pFnSetGenericItemDetails = NULL;

	if ( ! pFnSetGenericItemDetails )
		pFnSetGenericItemDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.SetGenericItemDetails" );

	UKFGFxMenu_Trader_execSetGenericItemDetails_Parms SetGenericItemDetails_Parms;

	this->ProcessEvent ( pFnSetGenericItemDetails, &SetGenericItemDetails_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.SetPlayerItemDetails
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Trader::SetPlayerItemDetails ( )
{
	static UFunction* pFnSetPlayerItemDetails = NULL;

	if ( ! pFnSetPlayerItemDetails )
		pFnSetPlayerItemDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.SetPlayerItemDetails" );

	UKFGFxMenu_Trader_execSetPlayerItemDetails_Parms SetPlayerItemDetails_Parms;

	this->ProcessEvent ( pFnSetPlayerItemDetails, &SetPlayerItemDetails_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.SetTraderItemDetails
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Trader::SetTraderItemDetails ( )
{
	static UFunction* pFnSetTraderItemDetails = NULL;

	if ( ! pFnSetTraderItemDetails )
		pFnSetTraderItemDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.SetTraderItemDetails" );

	UKFGFxMenu_Trader_execSetTraderItemDetails_Parms SetTraderItemDetails_Parms;

	this->ProcessEvent ( pFnSetTraderItemDetails, &SetTraderItemDetails_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.GiveExternalWeapon
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::GiveExternalWeapon ( )
{
	static UFunction* pFnGiveExternalWeapon = NULL;

	if ( ! pFnGiveExternalWeapon )
		pFnGiveExternalWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.GiveExternalWeapon" );

	UKFGFxMenu_Trader_execGiveExternalWeapon_Parms GiveExternalWeapon_Parms;

	this->ProcessEvent ( pFnGiveExternalWeapon, &GiveExternalWeapon_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.UpdatePlayerInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::UpdatePlayerInfo ( )
{
	static UFunction* pFnUpdatePlayerInfo = NULL;

	if ( ! pFnUpdatePlayerInfo )
		pFnUpdatePlayerInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.UpdatePlayerInfo" );

	UKFGFxMenu_Trader_execUpdatePlayerInfo_Parms UpdatePlayerInfo_Parms;

	this->ProcessEvent ( pFnUpdatePlayerInfo, &UpdatePlayerInfo_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.OneSecondLoop" );

	UKFGFxMenu_Trader_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_Trader::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.OnClose" );

	UKFGFxMenu_Trader_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.GetPerkIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::GetPerkIndex ( )
{
	static UFunction* pFnGetPerkIndex = NULL;

	if ( ! pFnGetPerkIndex )
		pFnGetPerkIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.GetPerkIndex" );

	UKFGFxMenu_Trader_execGetPerkIndex_Parms GetPerkIndex_Parms;

	this->ProcessEvent ( pFnGetPerkIndex, &GetPerkIndex_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_Trader::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.WidgetInitialized" );

	UKFGFxMenu_Trader_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.OnOpen" );

	UKFGFxMenu_Trader_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.LocalizeText" );

	UKFGFxMenu_Trader_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.OnR3Pressed
// [0x00020000] 
// Parameters infos:

void UKFGFxMenu_Trader::OnR3Pressed ( )
{
	static UFunction* pFnOnR3Pressed = NULL;

	if ( ! pFnOnR3Pressed )
		pFnOnR3Pressed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.OnR3Pressed" );

	UKFGFxMenu_Trader_execOnR3Pressed_Parms OnR3Pressed_Parms;

	this->ProcessEvent ( pFnOnR3Pressed, &OnR3Pressed_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Trader.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Trader::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Trader.InitializeMenu" );

	UKFGFxMenu_Trader_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.Callback_OpenGamma
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::Callback_OpenGamma ( )
{
	static UFunction* pFnCallback_OpenGamma = NULL;

	if ( ! pFnCallback_OpenGamma )
		pFnCallback_OpenGamma = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.Callback_OpenGamma" );

	UKFGFxOptionsMenu_Graphics_execCallback_OpenGamma_Parms Callback_OpenGamma_Parms;

	this->ProcessEvent ( pFnCallback_OpenGamma, &Callback_OpenGamma_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.Callback_ResetDefaultVideo
// [0x00820002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::Callback_ResetDefaultVideo ( )
{
	static UFunction* pFnCallback_ResetDefaultVideo = NULL;

	if ( ! pFnCallback_ResetDefaultVideo )
		pFnCallback_ResetDefaultVideo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.Callback_ResetDefaultVideo" );

	UKFGFxOptionsMenu_Graphics_execCallback_ResetDefaultVideo_Parms Callback_ResetDefaultVideo_Parms;

	this->ProcessEvent ( pFnCallback_ResetDefaultVideo, &Callback_ResetDefaultVideo_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.Callback_CancelVideo
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::Callback_CancelVideo ( )
{
	static UFunction* pFnCallback_CancelVideo = NULL;

	if ( ! pFnCallback_CancelVideo )
		pFnCallback_CancelVideo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.Callback_CancelVideo" );

	UKFGFxOptionsMenu_Graphics_execCallback_CancelVideo_Parms Callback_CancelVideo_Parms;

	this->ProcessEvent ( pFnCallback_CancelVideo, &Callback_CancelVideo_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.Callback_ApplyVideo
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::Callback_ApplyVideo ( )
{
	static UFunction* pFnCallback_ApplyVideo = NULL;

	if ( ! pFnCallback_ApplyVideo )
		pFnCallback_ApplyVideo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.Callback_ApplyVideo" );

	UKFGFxOptionsMenu_Graphics_execCallback_ApplyVideo_Parms Callback_ApplyVideo_Parms;

	this->ProcessEvent ( pFnCallback_ApplyVideo, &Callback_ApplyVideo_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.Callback_FleXOptionChange
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::Callback_FleXOptionChange ( )
{
	static UFunction* pFnCallback_FleXOptionChange = NULL;

	if ( ! pFnCallback_FleXOptionChange )
		pFnCallback_FleXOptionChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.Callback_FleXOptionChange" );

	UKFGFxOptionsMenu_Graphics_execCallback_FleXOptionChange_Parms Callback_FleXOptionChange_Parms;

	this->ProcessEvent ( pFnCallback_FleXOptionChange, &Callback_FleXOptionChange_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.Callback_CloseMenu
// [0x00820002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::Callback_CloseMenu ( )
{
	static UFunction* pFnCallback_CloseMenu = NULL;

	if ( ! pFnCallback_CloseMenu )
		pFnCallback_CloseMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.Callback_CloseMenu" );

	UKFGFxOptionsMenu_Graphics_execCallback_CloseMenu_Parms Callback_CloseMenu_Parms;

	this->ProcessEvent ( pFnCallback_CloseMenu, &Callback_CloseMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnSaveCancel
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnSaveCancel ( )
{
	static UFunction* pFnOnSaveCancel = NULL;

	if ( ! pFnOnSaveCancel )
		pFnOnSaveCancel = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnSaveCancel" );

	UKFGFxOptionsMenu_Graphics_execOnSaveCancel_Parms OnSaveCancel_Parms;

	this->ProcessEvent ( pFnOnSaveCancel, &OnSaveCancel_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnSaveConfirm
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnSaveConfirm ( )
{
	static UFunction* pFnOnSaveConfirm = NULL;

	if ( ! pFnOnSaveConfirm )
		pFnOnSaveConfirm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnSaveConfirm" );

	UKFGFxOptionsMenu_Graphics_execOnSaveConfirm_Parms OnSaveConfirm_Parms;

	this->ProcessEvent ( pFnOnSaveConfirm, &OnSaveConfirm_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnSettingsRevert
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnSettingsRevert ( )
{
	static UFunction* pFnOnSettingsRevert = NULL;

	if ( ! pFnOnSettingsRevert )
		pFnOnSettingsRevert = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnSettingsRevert" );

	UKFGFxOptionsMenu_Graphics_execOnSettingsRevert_Parms OnSettingsRevert_Parms;

	this->ProcessEvent ( pFnOnSettingsRevert, &OnSettingsRevert_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnRestartConfirm
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnRestartConfirm ( )
{
	static UFunction* pFnOnRestartConfirm = NULL;

	if ( ! pFnOnRestartConfirm )
		pFnOnRestartConfirm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnRestartConfirm" );

	UKFGFxOptionsMenu_Graphics_execOnRestartConfirm_Parms OnRestartConfirm_Parms;

	this->ProcessEvent ( pFnOnRestartConfirm, &OnRestartConfirm_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnSettingsConfirm
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnSettingsConfirm ( )
{
	static UFunction* pFnOnSettingsConfirm = NULL;

	if ( ! pFnOnSettingsConfirm )
		pFnOnSettingsConfirm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnSettingsConfirm" );

	UKFGFxOptionsMenu_Graphics_execOnSettingsConfirm_Parms OnSettingsConfirm_Parms;

	this->ProcessEvent ( pFnOnSettingsConfirm, &OnSettingsConfirm_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnFlexSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnFlexSettingChanged ( )
{
	static UFunction* pFnOnFlexSettingChanged = NULL;

	if ( ! pFnOnFlexSettingChanged )
		pFnOnFlexSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnFlexSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnFlexSettingChanged_Parms OnFlexSettingChanged_Parms;

	this->ProcessEvent ( pFnOnFlexSettingChanged, &OnFlexSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnLightShaftsSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnLightShaftsSettingChanged ( )
{
	static UFunction* pFnOnLightShaftsSettingChanged = NULL;

	if ( ! pFnOnLightShaftsSettingChanged )
		pFnOnLightShaftsSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnLightShaftsSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnLightShaftsSettingChanged_Parms OnLightShaftsSettingChanged_Parms;

	this->ProcessEvent ( pFnOnLightShaftsSettingChanged, &OnLightShaftsSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnLensFlareSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnLensFlareSettingChanged ( )
{
	static UFunction* pFnOnLensFlareSettingChanged = NULL;

	if ( ! pFnOnLensFlareSettingChanged )
		pFnOnLensFlareSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnLensFlareSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnLensFlareSettingChanged_Parms OnLensFlareSettingChanged_Parms;

	this->ProcessEvent ( pFnOnLensFlareSettingChanged, &OnLensFlareSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnVolumetricLightingSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnVolumetricLightingSettingChanged ( )
{
	static UFunction* pFnOnVolumetricLightingSettingChanged = NULL;

	if ( ! pFnOnVolumetricLightingSettingChanged )
		pFnOnVolumetricLightingSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnVolumetricLightingSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnVolumetricLightingSettingChanged_Parms OnVolumetricLightingSettingChanged_Parms;

	this->ProcessEvent ( pFnOnVolumetricLightingSettingChanged, &OnVolumetricLightingSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnDOFSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnDOFSettingChanged ( )
{
	static UFunction* pFnOnDOFSettingChanged = NULL;

	if ( ! pFnOnDOFSettingChanged )
		pFnOnDOFSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnDOFSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnDOFSettingChanged_Parms OnDOFSettingChanged_Parms;

	this->ProcessEvent ( pFnOnDOFSettingChanged, &OnDOFSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnAmbientOcclusionSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnAmbientOcclusionSettingChanged ( )
{
	static UFunction* pFnOnAmbientOcclusionSettingChanged = NULL;

	if ( ! pFnOnAmbientOcclusionSettingChanged )
		pFnOnAmbientOcclusionSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnAmbientOcclusionSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnAmbientOcclusionSettingChanged_Parms OnAmbientOcclusionSettingChanged_Parms;

	this->ProcessEvent ( pFnOnAmbientOcclusionSettingChanged, &OnAmbientOcclusionSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnMotionBlurSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnMotionBlurSettingChanged ( )
{
	static UFunction* pFnOnMotionBlurSettingChanged = NULL;

	if ( ! pFnOnMotionBlurSettingChanged )
		pFnOnMotionBlurSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnMotionBlurSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnMotionBlurSettingChanged_Parms OnMotionBlurSettingChanged_Parms;

	this->ProcessEvent ( pFnOnMotionBlurSettingChanged, &OnMotionBlurSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnBloomSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnBloomSettingChanged ( )
{
	static UFunction* pFnOnBloomSettingChanged = NULL;

	if ( ! pFnOnBloomSettingChanged )
		pFnOnBloomSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnBloomSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnBloomSettingChanged_Parms OnBloomSettingChanged_Parms;

	this->ProcessEvent ( pFnOnBloomSettingChanged, &OnBloomSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnAntiAliasingSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnAntiAliasingSettingChanged ( )
{
	static UFunction* pFnOnAntiAliasingSettingChanged = NULL;

	if ( ! pFnOnAntiAliasingSettingChanged )
		pFnOnAntiAliasingSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnAntiAliasingSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnAntiAliasingSettingChanged_Parms OnAntiAliasingSettingChanged_Parms;

	this->ProcessEvent ( pFnOnAntiAliasingSettingChanged, &OnAntiAliasingSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnReflectionSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnReflectionSettingChanged ( )
{
	static UFunction* pFnOnReflectionSettingChanged = NULL;

	if ( ! pFnOnReflectionSettingChanged )
		pFnOnReflectionSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnReflectionSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnReflectionSettingChanged_Parms OnReflectionSettingChanged_Parms;

	this->ProcessEvent ( pFnOnReflectionSettingChanged, &OnReflectionSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnShadowQualitySettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnShadowQualitySettingChanged ( )
{
	static UFunction* pFnOnShadowQualitySettingChanged = NULL;

	if ( ! pFnOnShadowQualitySettingChanged )
		pFnOnShadowQualitySettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnShadowQualitySettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnShadowQualitySettingChanged_Parms OnShadowQualitySettingChanged_Parms;

	this->ProcessEvent ( pFnOnShadowQualitySettingChanged, &OnShadowQualitySettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnTextureFilteringSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnTextureFilteringSettingChanged ( )
{
	static UFunction* pFnOnTextureFilteringSettingChanged = NULL;

	if ( ! pFnOnTextureFilteringSettingChanged )
		pFnOnTextureFilteringSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnTextureFilteringSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnTextureFilteringSettingChanged_Parms OnTextureFilteringSettingChanged_Parms;

	this->ProcessEvent ( pFnOnTextureFilteringSettingChanged, &OnTextureFilteringSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnTextureResolutionSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnTextureResolutionSettingChanged ( )
{
	static UFunction* pFnOnTextureResolutionSettingChanged = NULL;

	if ( ! pFnOnTextureResolutionSettingChanged )
		pFnOnTextureResolutionSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnTextureResolutionSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnTextureResolutionSettingChanged_Parms OnTextureResolutionSettingChanged_Parms;

	this->ProcessEvent ( pFnOnTextureResolutionSettingChanged, &OnTextureResolutionSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnFXQualitySettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnFXQualitySettingChanged ( )
{
	static UFunction* pFnOnFXQualitySettingChanged = NULL;

	if ( ! pFnOnFXQualitySettingChanged )
		pFnOnFXQualitySettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnFXQualitySettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnFXQualitySettingChanged_Parms OnFXQualitySettingChanged_Parms;

	this->ProcessEvent ( pFnOnFXQualitySettingChanged, &OnFXQualitySettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnCharacterDetailSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnCharacterDetailSettingChanged ( )
{
	static UFunction* pFnOnCharacterDetailSettingChanged = NULL;

	if ( ! pFnOnCharacterDetailSettingChanged )
		pFnOnCharacterDetailSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnCharacterDetailSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnCharacterDetailSettingChanged_Parms OnCharacterDetailSettingChanged_Parms;

	this->ProcessEvent ( pFnOnCharacterDetailSettingChanged, &OnCharacterDetailSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnEnvironmentDetailSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnEnvironmentDetailSettingChanged ( )
{
	static UFunction* pFnOnEnvironmentDetailSettingChanged = NULL;

	if ( ! pFnOnEnvironmentDetailSettingChanged )
		pFnOnEnvironmentDetailSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnEnvironmentDetailSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnEnvironmentDetailSettingChanged_Parms OnEnvironmentDetailSettingChanged_Parms;

	this->ProcessEvent ( pFnOnEnvironmentDetailSettingChanged, &OnEnvironmentDetailSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnFilmGrainSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnFilmGrainSettingChanged ( )
{
	static UFunction* pFnOnFilmGrainSettingChanged = NULL;

	if ( ! pFnOnFilmGrainSettingChanged )
		pFnOnFilmGrainSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnFilmGrainSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnFilmGrainSettingChanged_Parms OnFilmGrainSettingChanged_Parms;

	this->ProcessEvent ( pFnOnFilmGrainSettingChanged, &OnFilmGrainSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnVariableFramerateSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnVariableFramerateSettingChanged ( )
{
	static UFunction* pFnOnVariableFramerateSettingChanged = NULL;

	if ( ! pFnOnVariableFramerateSettingChanged )
		pFnOnVariableFramerateSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnVariableFramerateSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnVariableFramerateSettingChanged_Parms OnVariableFramerateSettingChanged_Parms;

	this->ProcessEvent ( pFnOnVariableFramerateSettingChanged, &OnVariableFramerateSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnDisplaySettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnDisplaySettingChanged ( )
{
	static UFunction* pFnOnDisplaySettingChanged = NULL;

	if ( ! pFnOnDisplaySettingChanged )
		pFnOnDisplaySettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnDisplaySettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnDisplaySettingChanged_Parms OnDisplaySettingChanged_Parms;

	this->ProcessEvent ( pFnOnDisplaySettingChanged, &OnDisplaySettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnVsyncSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnVsyncSettingChanged ( )
{
	static UFunction* pFnOnVsyncSettingChanged = NULL;

	if ( ! pFnOnVsyncSettingChanged )
		pFnOnVsyncSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnVsyncSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnVsyncSettingChanged_Parms OnVsyncSettingChanged_Parms;

	this->ProcessEvent ( pFnOnVsyncSettingChanged, &OnVsyncSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnResolutionSettingChanged
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnResolutionSettingChanged ( )
{
	static UFunction* pFnOnResolutionSettingChanged = NULL;

	if ( ! pFnOnResolutionSettingChanged )
		pFnOnResolutionSettingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnResolutionSettingChanged" );

	UKFGFxOptionsMenu_Graphics_execOnResolutionSettingChanged_Parms OnResolutionSettingChanged_Parms;

	this->ProcessEvent ( pFnOnResolutionSettingChanged, &OnResolutionSettingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnAdvancedOptionChanged
// [0x00020000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnAdvancedOptionChanged ( )
{
	static UFunction* pFnOnAdvancedOptionChanged = NULL;

	if ( ! pFnOnAdvancedOptionChanged )
		pFnOnAdvancedOptionChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnAdvancedOptionChanged" );

	UKFGFxOptionsMenu_Graphics_execOnAdvancedOptionChanged_Parms OnAdvancedOptionChanged_Parms;

	this->ProcessEvent ( pFnOnAdvancedOptionChanged, &OnAdvancedOptionChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnAspectRatioSet
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnAspectRatioSet ( )
{
	static UFunction* pFnOnAspectRatioSet = NULL;

	if ( ! pFnOnAspectRatioSet )
		pFnOnAspectRatioSet = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnAspectRatioSet" );

	UKFGFxOptionsMenu_Graphics_execOnAspectRatioSet_Parms OnAspectRatioSet_Parms;

	this->ProcessEvent ( pFnOnAspectRatioSet, &OnAspectRatioSet_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.UpdateResolutionList
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::UpdateResolutionList ( )
{
	static UFunction* pFnUpdateResolutionList = NULL;

	if ( ! pFnUpdateResolutionList )
		pFnUpdateResolutionList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.UpdateResolutionList" );

	UKFGFxOptionsMenu_Graphics_execUpdateResolutionList_Parms UpdateResolutionList_Parms;

	this->ProcessEvent ( pFnUpdateResolutionList, &UpdateResolutionList_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OnGraphicsQualitySet
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OnGraphicsQualitySet ( )
{
	static UFunction* pFnOnGraphicsQualitySet = NULL;

	if ( ! pFnOnGraphicsQualitySet )
		pFnOnGraphicsQualitySet = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OnGraphicsQualitySet" );

	UKFGFxOptionsMenu_Graphics_execOnGraphicsQualitySet_Parms OnGraphicsQualitySet_Parms;

	this->ProcessEvent ( pFnOnGraphicsQualitySet, &OnGraphicsQualitySet_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.ShowRevertPopUp
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::ShowRevertPopUp ( )
{
	static UFunction* pFnShowRevertPopUp = NULL;

	if ( ! pFnShowRevertPopUp )
		pFnShowRevertPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.ShowRevertPopUp" );

	UKFGFxOptionsMenu_Graphics_execShowRevertPopUp_Parms ShowRevertPopUp_Parms;

	this->ProcessEvent ( pFnShowRevertPopUp, &ShowRevertPopUp_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.RevertSettings
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::RevertSettings ( )
{
	static UFunction* pFnRevertSettings = NULL;

	if ( ! pFnRevertSettings )
		pFnRevertSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.RevertSettings" );

	UKFGFxOptionsMenu_Graphics_execRevertSettings_Parms RevertSettings_Parms;

	this->ProcessEvent ( pFnRevertSettings, &RevertSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.ResetValues
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::ResetValues ( )
{
	static UFunction* pFnResetValues = NULL;

	if ( ! pFnResetValues )
		pFnResetValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.ResetValues" );

	UKFGFxOptionsMenu_Graphics_execResetValues_Parms ResetValues_Parms;

	this->ProcessEvent ( pFnResetValues, &ResetValues_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.Apply
// [0x00820002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::Apply ( )
{
	static UFunction* pFnApply = NULL;

	if ( ! pFnApply )
		pFnApply = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.Apply" );

	UKFGFxOptionsMenu_Graphics_execApply_Parms Apply_Parms;

	this->ProcessEvent ( pFnApply, &Apply_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.OneSecondLoop" );

	UKFGFxOptionsMenu_Graphics_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.UpdateAdvancedSettingsUI
// [0x00820002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::UpdateAdvancedSettingsUI ( )
{
	static UFunction* pFnUpdateAdvancedSettingsUI = NULL;

	if ( ! pFnUpdateAdvancedSettingsUI )
		pFnUpdateAdvancedSettingsUI = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.UpdateAdvancedSettingsUI" );

	UKFGFxOptionsMenu_Graphics_execUpdateAdvancedSettingsUI_Parms UpdateAdvancedSettingsUI_Parms;

	this->ProcessEvent ( pFnUpdateAdvancedSettingsUI, &UpdateAdvancedSettingsUI_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.CheckForChangedSettings
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::CheckForChangedSettings ( )
{
	static UFunction* pFnCheckForChangedSettings = NULL;

	if ( ! pFnCheckForChangedSettings )
		pFnCheckForChangedSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.CheckForChangedSettings" );

	UKFGFxOptionsMenu_Graphics_execCheckForChangedSettings_Parms CheckForChangedSettings_Parms;

	this->ProcessEvent ( pFnCheckForChangedSettings, &CheckForChangedSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.InitializeResolution
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::InitializeResolution ( )
{
	static UFunction* pFnInitializeResolution = NULL;

	if ( ! pFnInitializeResolution )
		pFnInitializeResolution = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.InitializeResolution" );

	UKFGFxOptionsMenu_Graphics_execInitializeResolution_Parms InitializeResolution_Parms;

	this->ProcessEvent ( pFnInitializeResolution, &InitializeResolution_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetModifiedGFXSettings
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetModifiedGFXSettings ( )
{
	static UFunction* pFnGetModifiedGFXSettings = NULL;

	if ( ! pFnGetModifiedGFXSettings )
		pFnGetModifiedGFXSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetModifiedGFXSettings" );

	UKFGFxOptionsMenu_Graphics_execGetModifiedGFXSettings_Parms GetModifiedGFXSettings_Parms;

	this->ProcessEvent ( pFnGetModifiedGFXSettings, &GetModifiedGFXSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetGFXSettings
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetGFXSettings ( )
{
	static UFunction* pFnSetGFXSettings = NULL;

	if ( ! pFnSetGFXSettings )
		pFnSetGFXSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetGFXSettings" );

	UKFGFxOptionsMenu_Graphics_execSetGFXSettings_Parms SetGFXSettings_Parms;

	this->ProcessEvent ( pFnSetGFXSettings, &SetGFXSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetCurrentGFXSettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetCurrentGFXSettings ( )
{
	static UFunction* pFnGetCurrentGFXSettings = NULL;

	if ( ! pFnGetCurrentGFXSettings )
		pFnGetCurrentGFXSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetCurrentGFXSettings" );

	UKFGFxOptionsMenu_Graphics_execGetCurrentGFXSettings_Parms GetCurrentGFXSettings_Parms;

	this->ProcessEvent ( pFnGetCurrentGFXSettings, &GetCurrentGFXSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.InitValues
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::InitValues ( )
{
	static UFunction* pFnInitValues = NULL;

	if ( ! pFnInitValues )
		pFnInitValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.InitValues" );

	UKFGFxOptionsMenu_Graphics_execInitValues_Parms InitValues_Parms;

	this->ProcessEvent ( pFnInitValues, &InitValues_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetGraphicsQuality
// [0x00822802] ( FUNC_Event )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::eventSetGraphicsQuality ( )
{
	static UFunction* pFnSetGraphicsQuality = NULL;

	if ( ! pFnSetGraphicsQuality )
		pFnSetGraphicsQuality = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetGraphicsQuality" );

	UKFGFxOptionsMenu_Graphics_eventSetGraphicsQuality_Parms SetGraphicsQuality_Parms;

	this->ProcessEvent ( pFnSetGraphicsQuality, &SetGraphicsQuality_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetCompatibilityLevel
// [0x00822802] ( FUNC_Event )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::eventSetCompatibilityLevel ( )
{
	static UFunction* pFnSetCompatibilityLevel = NULL;

	if ( ! pFnSetCompatibilityLevel )
		pFnSetCompatibilityLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetCompatibilityLevel" );

	UKFGFxOptionsMenu_Graphics_eventSetCompatibilityLevel_Parms SetCompatibilityLevel_Parms;

	this->ProcessEvent ( pFnSetCompatibilityLevel, &SetCompatibilityLevel_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetGraphicsQualityFromCompat
// [0x00022002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetGraphicsQualityFromCompat ( )
{
	static UFunction* pFnGetGraphicsQualityFromCompat = NULL;

	if ( ! pFnGetGraphicsQualityFromCompat )
		pFnGetGraphicsQualityFromCompat = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetGraphicsQualityFromCompat" );

	UKFGFxOptionsMenu_Graphics_execGetGraphicsQualityFromCompat_Parms GetGraphicsQualityFromCompat_Parms;

	this->ProcessEvent ( pFnGetGraphicsQualityFromCompat, &GetGraphicsQualityFromCompat_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.MakeDataProvider
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::MakeDataProvider ( )
{
	static UFunction* pFnMakeDataProvider = NULL;

	if ( ! pFnMakeDataProvider )
		pFnMakeDataProvider = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.MakeDataProvider" );

	UKFGFxOptionsMenu_Graphics_execMakeDataProvider_Parms MakeDataProvider_Parms;

	this->ProcessEvent ( pFnMakeDataProvider, &MakeDataProvider_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.LocalizeText" );

	UKFGFxOptionsMenu_Graphics_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetPhysicsLevelOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetPhysicsLevelOptions ( )
{
	static UFunction* pFnSetPhysicsLevelOptions = NULL;

	if ( ! pFnSetPhysicsLevelOptions )
		pFnSetPhysicsLevelOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetPhysicsLevelOptions" );

	UKFGFxOptionsMenu_Graphics_execSetPhysicsLevelOptions_Parms SetPhysicsLevelOptions_Parms;

	this->ProcessEvent ( pFnSetPhysicsLevelOptions, &SetPhysicsLevelOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetLightShaftOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetLightShaftOptions ( )
{
	static UFunction* pFnSetLightShaftOptions = NULL;

	if ( ! pFnSetLightShaftOptions )
		pFnSetLightShaftOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetLightShaftOptions" );

	UKFGFxOptionsMenu_Graphics_execSetLightShaftOptions_Parms SetLightShaftOptions_Parms;

	this->ProcessEvent ( pFnSetLightShaftOptions, &SetLightShaftOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetLensFlareOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetLensFlareOptions ( )
{
	static UFunction* pFnSetLensFlareOptions = NULL;

	if ( ! pFnSetLensFlareOptions )
		pFnSetLensFlareOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetLensFlareOptions" );

	UKFGFxOptionsMenu_Graphics_execSetLensFlareOptions_Parms SetLensFlareOptions_Parms;

	this->ProcessEvent ( pFnSetLensFlareOptions, &SetLensFlareOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetVolumetricLightingOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetVolumetricLightingOptions ( )
{
	static UFunction* pFnSetVolumetricLightingOptions = NULL;

	if ( ! pFnSetVolumetricLightingOptions )
		pFnSetVolumetricLightingOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetVolumetricLightingOptions" );

	UKFGFxOptionsMenu_Graphics_execSetVolumetricLightingOptions_Parms SetVolumetricLightingOptions_Parms;

	this->ProcessEvent ( pFnSetVolumetricLightingOptions, &SetVolumetricLightingOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetDepthOfFieldOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetDepthOfFieldOptions ( )
{
	static UFunction* pFnSetDepthOfFieldOptions = NULL;

	if ( ! pFnSetDepthOfFieldOptions )
		pFnSetDepthOfFieldOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetDepthOfFieldOptions" );

	UKFGFxOptionsMenu_Graphics_execSetDepthOfFieldOptions_Parms SetDepthOfFieldOptions_Parms;

	this->ProcessEvent ( pFnSetDepthOfFieldOptions, &SetDepthOfFieldOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetAmbientOcclusionOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetAmbientOcclusionOptions ( )
{
	static UFunction* pFnSetAmbientOcclusionOptions = NULL;

	if ( ! pFnSetAmbientOcclusionOptions )
		pFnSetAmbientOcclusionOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetAmbientOcclusionOptions" );

	UKFGFxOptionsMenu_Graphics_execSetAmbientOcclusionOptions_Parms SetAmbientOcclusionOptions_Parms;

	this->ProcessEvent ( pFnSetAmbientOcclusionOptions, &SetAmbientOcclusionOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetMotionBlurOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetMotionBlurOptions ( )
{
	static UFunction* pFnSetMotionBlurOptions = NULL;

	if ( ! pFnSetMotionBlurOptions )
		pFnSetMotionBlurOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetMotionBlurOptions" );

	UKFGFxOptionsMenu_Graphics_execSetMotionBlurOptions_Parms SetMotionBlurOptions_Parms;

	this->ProcessEvent ( pFnSetMotionBlurOptions, &SetMotionBlurOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetBloomOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetBloomOptions ( )
{
	static UFunction* pFnSetBloomOptions = NULL;

	if ( ! pFnSetBloomOptions )
		pFnSetBloomOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetBloomOptions" );

	UKFGFxOptionsMenu_Graphics_execSetBloomOptions_Parms SetBloomOptions_Parms;

	this->ProcessEvent ( pFnSetBloomOptions, &SetBloomOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetAntiAliasingOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetAntiAliasingOptions ( )
{
	static UFunction* pFnSetAntiAliasingOptions = NULL;

	if ( ! pFnSetAntiAliasingOptions )
		pFnSetAntiAliasingOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetAntiAliasingOptions" );

	UKFGFxOptionsMenu_Graphics_execSetAntiAliasingOptions_Parms SetAntiAliasingOptions_Parms;

	this->ProcessEvent ( pFnSetAntiAliasingOptions, &SetAntiAliasingOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetRealtimeReflectionsOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetRealtimeReflectionsOptions ( )
{
	static UFunction* pFnSetRealtimeReflectionsOptions = NULL;

	if ( ! pFnSetRealtimeReflectionsOptions )
		pFnSetRealtimeReflectionsOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetRealtimeReflectionsOptions" );

	UKFGFxOptionsMenu_Graphics_execSetRealtimeReflectionsOptions_Parms SetRealtimeReflectionsOptions_Parms;

	this->ProcessEvent ( pFnSetRealtimeReflectionsOptions, &SetRealtimeReflectionsOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetShadowOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetShadowOptions ( )
{
	static UFunction* pFnSetShadowOptions = NULL;

	if ( ! pFnSetShadowOptions )
		pFnSetShadowOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetShadowOptions" );

	UKFGFxOptionsMenu_Graphics_execSetShadowOptions_Parms SetShadowOptions_Parms;

	this->ProcessEvent ( pFnSetShadowOptions, &SetShadowOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetTextureFilteringOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetTextureFilteringOptions ( )
{
	static UFunction* pFnSetTextureFilteringOptions = NULL;

	if ( ! pFnSetTextureFilteringOptions )
		pFnSetTextureFilteringOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetTextureFilteringOptions" );

	UKFGFxOptionsMenu_Graphics_execSetTextureFilteringOptions_Parms SetTextureFilteringOptions_Parms;

	this->ProcessEvent ( pFnSetTextureFilteringOptions, &SetTextureFilteringOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetTextureResolutionOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetTextureResolutionOptions ( )
{
	static UFunction* pFnSetTextureResolutionOptions = NULL;

	if ( ! pFnSetTextureResolutionOptions )
		pFnSetTextureResolutionOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetTextureResolutionOptions" );

	UKFGFxOptionsMenu_Graphics_execSetTextureResolutionOptions_Parms SetTextureResolutionOptions_Parms;

	this->ProcessEvent ( pFnSetTextureResolutionOptions, &SetTextureResolutionOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetFXOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetFXOptions ( )
{
	static UFunction* pFnSetFXOptions = NULL;

	if ( ! pFnSetFXOptions )
		pFnSetFXOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetFXOptions" );

	UKFGFxOptionsMenu_Graphics_execSetFXOptions_Parms SetFXOptions_Parms;

	this->ProcessEvent ( pFnSetFXOptions, &SetFXOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetCharacterDetailOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetCharacterDetailOptions ( )
{
	static UFunction* pFnSetCharacterDetailOptions = NULL;

	if ( ! pFnSetCharacterDetailOptions )
		pFnSetCharacterDetailOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetCharacterDetailOptions" );

	UKFGFxOptionsMenu_Graphics_execSetCharacterDetailOptions_Parms SetCharacterDetailOptions_Parms;

	this->ProcessEvent ( pFnSetCharacterDetailOptions, &SetCharacterDetailOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetEnvironmentDetailOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetEnvironmentDetailOptions ( )
{
	static UFunction* pFnSetEnvironmentDetailOptions = NULL;

	if ( ! pFnSetEnvironmentDetailOptions )
		pFnSetEnvironmentDetailOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetEnvironmentDetailOptions" );

	UKFGFxOptionsMenu_Graphics_execSetEnvironmentDetailOptions_Parms SetEnvironmentDetailOptions_Parms;

	this->ProcessEvent ( pFnSetEnvironmentDetailOptions, &SetEnvironmentDetailOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetVSyncOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetVSyncOptions ( )
{
	static UFunction* pFnSetVSyncOptions = NULL;

	if ( ! pFnSetVSyncOptions )
		pFnSetVSyncOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetVSyncOptions" );

	UKFGFxOptionsMenu_Graphics_execSetVSyncOptions_Parms SetVSyncOptions_Parms;

	this->ProcessEvent ( pFnSetVSyncOptions, &SetVSyncOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetGraphicsQualityOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetGraphicsQualityOptions ( )
{
	static UFunction* pFnSetGraphicsQualityOptions = NULL;

	if ( ! pFnSetGraphicsQualityOptions )
		pFnSetGraphicsQualityOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetGraphicsQualityOptions" );

	UKFGFxOptionsMenu_Graphics_execSetGraphicsQualityOptions_Parms SetGraphicsQualityOptions_Parms;

	this->ProcessEvent ( pFnSetGraphicsQualityOptions, &SetGraphicsQualityOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetFullScreenOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetFullScreenOptions ( )
{
	static UFunction* pFnSetFullScreenOptions = NULL;

	if ( ! pFnSetFullScreenOptions )
		pFnSetFullScreenOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetFullScreenOptions" );

	UKFGFxOptionsMenu_Graphics_execSetFullScreenOptions_Parms SetFullScreenOptions_Parms;

	this->ProcessEvent ( pFnSetFullScreenOptions, &SetFullScreenOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetAspectRatioOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetAspectRatioOptions ( )
{
	static UFunction* pFnSetAspectRatioOptions = NULL;

	if ( ! pFnSetAspectRatioOptions )
		pFnSetAspectRatioOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetAspectRatioOptions" );

	UKFGFxOptionsMenu_Graphics_execSetAspectRatioOptions_Parms SetAspectRatioOptions_Parms;

	this->ProcessEvent ( pFnSetAspectRatioOptions, &SetAspectRatioOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetFleXOptionEnabled
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetFleXOptionEnabled ( )
{
	static UFunction* pFnSetFleXOptionEnabled = NULL;

	if ( ! pFnSetFleXOptionEnabled )
		pFnSetFleXOptionEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetFleXOptionEnabled" );

	UKFGFxOptionsMenu_Graphics_execSetFleXOptionEnabled_Parms SetFleXOptionEnabled_Parms;

	this->ProcessEvent ( pFnSetFleXOptionEnabled, &SetFleXOptionEnabled_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.InitializeMenu" );

	UKFGFxOptionsMenu_Graphics_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptFlexSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptFlexSettings ( )
{
	static UFunction* pFnSetScriptFlexSettings = NULL;

	if ( ! pFnSetScriptFlexSettings )
		pFnSetScriptFlexSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptFlexSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptFlexSettings_Parms SetScriptFlexSettings_Parms;

	this->ProcessEvent ( pFnSetScriptFlexSettings, &SetScriptFlexSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptFlexSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptFlexSettings ( )
{
	static UFunction* pFnGetScriptFlexSettings = NULL;

	if ( ! pFnGetScriptFlexSettings )
		pFnGetScriptFlexSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptFlexSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptFlexSettings_Parms GetScriptFlexSettings_Parms;

	this->ProcessEvent ( pFnGetScriptFlexSettings, &GetScriptFlexSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindFlexSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindFlexSettingIndex ( )
{
	static UFunction* pFnFindFlexSettingIndex = NULL;

	if ( ! pFnFindFlexSettingIndex )
		pFnFindFlexSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindFlexSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindFlexSettingIndex_Parms FindFlexSettingIndex_Parms;

	this->ProcessEvent ( pFnFindFlexSettingIndex, &FindFlexSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptDOFSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptDOFSettings ( )
{
	static UFunction* pFnSetScriptDOFSettings = NULL;

	if ( ! pFnSetScriptDOFSettings )
		pFnSetScriptDOFSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptDOFSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptDOFSettings_Parms SetScriptDOFSettings_Parms;

	this->ProcessEvent ( pFnSetScriptDOFSettings, &SetScriptDOFSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptDOFSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptDOFSettings ( )
{
	static UFunction* pFnGetScriptDOFSettings = NULL;

	if ( ! pFnGetScriptDOFSettings )
		pFnGetScriptDOFSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptDOFSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptDOFSettings_Parms GetScriptDOFSettings_Parms;

	this->ProcessEvent ( pFnGetScriptDOFSettings, &GetScriptDOFSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindDOFSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindDOFSettingIndex ( )
{
	static UFunction* pFnFindDOFSettingIndex = NULL;

	if ( ! pFnFindDOFSettingIndex )
		pFnFindDOFSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindDOFSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindDOFSettingIndex_Parms FindDOFSettingIndex_Parms;

	this->ProcessEvent ( pFnFindDOFSettingIndex, &FindDOFSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptAmbientOcclusionSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptAmbientOcclusionSettings ( )
{
	static UFunction* pFnSetScriptAmbientOcclusionSettings = NULL;

	if ( ! pFnSetScriptAmbientOcclusionSettings )
		pFnSetScriptAmbientOcclusionSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptAmbientOcclusionSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptAmbientOcclusionSettings_Parms SetScriptAmbientOcclusionSettings_Parms;

	this->ProcessEvent ( pFnSetScriptAmbientOcclusionSettings, &SetScriptAmbientOcclusionSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptAmbientOcclusionSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptAmbientOcclusionSettings ( )
{
	static UFunction* pFnGetScriptAmbientOcclusionSettings = NULL;

	if ( ! pFnGetScriptAmbientOcclusionSettings )
		pFnGetScriptAmbientOcclusionSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptAmbientOcclusionSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptAmbientOcclusionSettings_Parms GetScriptAmbientOcclusionSettings_Parms;

	this->ProcessEvent ( pFnGetScriptAmbientOcclusionSettings, &GetScriptAmbientOcclusionSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindAmbientOcclusionSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindAmbientOcclusionSettingIndex ( )
{
	static UFunction* pFnFindAmbientOcclusionSettingIndex = NULL;

	if ( ! pFnFindAmbientOcclusionSettingIndex )
		pFnFindAmbientOcclusionSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindAmbientOcclusionSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindAmbientOcclusionSettingIndex_Parms FindAmbientOcclusionSettingIndex_Parms;

	this->ProcessEvent ( pFnFindAmbientOcclusionSettingIndex, &FindAmbientOcclusionSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptAntiAliasingSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptAntiAliasingSettings ( )
{
	static UFunction* pFnSetScriptAntiAliasingSettings = NULL;

	if ( ! pFnSetScriptAntiAliasingSettings )
		pFnSetScriptAntiAliasingSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptAntiAliasingSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptAntiAliasingSettings_Parms SetScriptAntiAliasingSettings_Parms;

	this->ProcessEvent ( pFnSetScriptAntiAliasingSettings, &SetScriptAntiAliasingSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptAntiAliasingSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptAntiAliasingSettings ( )
{
	static UFunction* pFnGetScriptAntiAliasingSettings = NULL;

	if ( ! pFnGetScriptAntiAliasingSettings )
		pFnGetScriptAntiAliasingSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptAntiAliasingSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptAntiAliasingSettings_Parms GetScriptAntiAliasingSettings_Parms;

	this->ProcessEvent ( pFnGetScriptAntiAliasingSettings, &GetScriptAntiAliasingSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindAntiAliasingSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindAntiAliasingSettingIndex ( )
{
	static UFunction* pFnFindAntiAliasingSettingIndex = NULL;

	if ( ! pFnFindAntiAliasingSettingIndex )
		pFnFindAntiAliasingSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindAntiAliasingSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindAntiAliasingSettingIndex_Parms FindAntiAliasingSettingIndex_Parms;

	this->ProcessEvent ( pFnFindAntiAliasingSettingIndex, &FindAntiAliasingSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptMotionBlurSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptMotionBlurSettings ( )
{
	static UFunction* pFnSetScriptMotionBlurSettings = NULL;

	if ( ! pFnSetScriptMotionBlurSettings )
		pFnSetScriptMotionBlurSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptMotionBlurSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptMotionBlurSettings_Parms SetScriptMotionBlurSettings_Parms;

	this->ProcessEvent ( pFnSetScriptMotionBlurSettings, &SetScriptMotionBlurSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptMotionBlurSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptMotionBlurSettings ( )
{
	static UFunction* pFnGetScriptMotionBlurSettings = NULL;

	if ( ! pFnGetScriptMotionBlurSettings )
		pFnGetScriptMotionBlurSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptMotionBlurSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptMotionBlurSettings_Parms GetScriptMotionBlurSettings_Parms;

	this->ProcessEvent ( pFnGetScriptMotionBlurSettings, &GetScriptMotionBlurSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindMotionBlurSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindMotionBlurSettingIndex ( )
{
	static UFunction* pFnFindMotionBlurSettingIndex = NULL;

	if ( ! pFnFindMotionBlurSettingIndex )
		pFnFindMotionBlurSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindMotionBlurSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindMotionBlurSettingIndex_Parms FindMotionBlurSettingIndex_Parms;

	this->ProcessEvent ( pFnFindMotionBlurSettingIndex, &FindMotionBlurSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptBloomSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptBloomSettings ( )
{
	static UFunction* pFnSetScriptBloomSettings = NULL;

	if ( ! pFnSetScriptBloomSettings )
		pFnSetScriptBloomSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptBloomSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptBloomSettings_Parms SetScriptBloomSettings_Parms;

	this->ProcessEvent ( pFnSetScriptBloomSettings, &SetScriptBloomSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptBloomSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptBloomSettings ( )
{
	static UFunction* pFnGetScriptBloomSettings = NULL;

	if ( ! pFnGetScriptBloomSettings )
		pFnGetScriptBloomSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptBloomSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptBloomSettings_Parms GetScriptBloomSettings_Parms;

	this->ProcessEvent ( pFnGetScriptBloomSettings, &GetScriptBloomSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindBloomSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindBloomSettingIndex ( )
{
	static UFunction* pFnFindBloomSettingIndex = NULL;

	if ( ! pFnFindBloomSettingIndex )
		pFnFindBloomSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindBloomSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindBloomSettingIndex_Parms FindBloomSettingIndex_Parms;

	this->ProcessEvent ( pFnFindBloomSettingIndex, &FindBloomSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptTextureFilterSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptTextureFilterSettings ( )
{
	static UFunction* pFnSetScriptTextureFilterSettings = NULL;

	if ( ! pFnSetScriptTextureFilterSettings )
		pFnSetScriptTextureFilterSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptTextureFilterSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptTextureFilterSettings_Parms SetScriptTextureFilterSettings_Parms;

	this->ProcessEvent ( pFnSetScriptTextureFilterSettings, &SetScriptTextureFilterSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptTextureFilterSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptTextureFilterSettings ( )
{
	static UFunction* pFnGetScriptTextureFilterSettings = NULL;

	if ( ! pFnGetScriptTextureFilterSettings )
		pFnGetScriptTextureFilterSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptTextureFilterSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptTextureFilterSettings_Parms GetScriptTextureFilterSettings_Parms;

	this->ProcessEvent ( pFnGetScriptTextureFilterSettings, &GetScriptTextureFilterSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindTextureFilterSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindTextureFilterSettingIndex ( )
{
	static UFunction* pFnFindTextureFilterSettingIndex = NULL;

	if ( ! pFnFindTextureFilterSettingIndex )
		pFnFindTextureFilterSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindTextureFilterSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindTextureFilterSettingIndex_Parms FindTextureFilterSettingIndex_Parms;

	this->ProcessEvent ( pFnFindTextureFilterSettingIndex, &FindTextureFilterSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptTextureResolutionSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptTextureResolutionSettings ( )
{
	static UFunction* pFnSetScriptTextureResolutionSettings = NULL;

	if ( ! pFnSetScriptTextureResolutionSettings )
		pFnSetScriptTextureResolutionSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptTextureResolutionSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptTextureResolutionSettings_Parms SetScriptTextureResolutionSettings_Parms;

	this->ProcessEvent ( pFnSetScriptTextureResolutionSettings, &SetScriptTextureResolutionSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptTextureResolutionSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptTextureResolutionSettings ( )
{
	static UFunction* pFnGetScriptTextureResolutionSettings = NULL;

	if ( ! pFnGetScriptTextureResolutionSettings )
		pFnGetScriptTextureResolutionSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptTextureResolutionSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptTextureResolutionSettings_Parms GetScriptTextureResolutionSettings_Parms;

	this->ProcessEvent ( pFnGetScriptTextureResolutionSettings, &GetScriptTextureResolutionSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindTextureResolutionSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindTextureResolutionSettingIndex ( )
{
	static UFunction* pFnFindTextureResolutionSettingIndex = NULL;

	if ( ! pFnFindTextureResolutionSettingIndex )
		pFnFindTextureResolutionSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindTextureResolutionSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindTextureResolutionSettingIndex_Parms FindTextureResolutionSettingIndex_Parms;

	this->ProcessEvent ( pFnFindTextureResolutionSettingIndex, &FindTextureResolutionSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptLensFlareSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptLensFlareSettings ( )
{
	static UFunction* pFnSetScriptLensFlareSettings = NULL;

	if ( ! pFnSetScriptLensFlareSettings )
		pFnSetScriptLensFlareSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptLensFlareSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptLensFlareSettings_Parms SetScriptLensFlareSettings_Parms;

	this->ProcessEvent ( pFnSetScriptLensFlareSettings, &SetScriptLensFlareSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptLensFlareSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptLensFlareSettings ( )
{
	static UFunction* pFnGetScriptLensFlareSettings = NULL;

	if ( ! pFnGetScriptLensFlareSettings )
		pFnGetScriptLensFlareSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptLensFlareSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptLensFlareSettings_Parms GetScriptLensFlareSettings_Parms;

	this->ProcessEvent ( pFnGetScriptLensFlareSettings, &GetScriptLensFlareSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindLensFlareSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindLensFlareSettingIndex ( )
{
	static UFunction* pFnFindLensFlareSettingIndex = NULL;

	if ( ! pFnFindLensFlareSettingIndex )
		pFnFindLensFlareSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindLensFlareSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindLensFlareSettingIndex_Parms FindLensFlareSettingIndex_Parms;

	this->ProcessEvent ( pFnFindLensFlareSettingIndex, &FindLensFlareSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptVolumetricLightingSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptVolumetricLightingSettings ( )
{
	static UFunction* pFnSetScriptVolumetricLightingSettings = NULL;

	if ( ! pFnSetScriptVolumetricLightingSettings )
		pFnSetScriptVolumetricLightingSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptVolumetricLightingSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptVolumetricLightingSettings_Parms SetScriptVolumetricLightingSettings_Parms;

	this->ProcessEvent ( pFnSetScriptVolumetricLightingSettings, &SetScriptVolumetricLightingSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptVolumetricLightingSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptVolumetricLightingSettings ( )
{
	static UFunction* pFnGetScriptVolumetricLightingSettings = NULL;

	if ( ! pFnGetScriptVolumetricLightingSettings )
		pFnGetScriptVolumetricLightingSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptVolumetricLightingSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptVolumetricLightingSettings_Parms GetScriptVolumetricLightingSettings_Parms;

	this->ProcessEvent ( pFnGetScriptVolumetricLightingSettings, &GetScriptVolumetricLightingSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindVolumetricLightingSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindVolumetricLightingSettingIndex ( )
{
	static UFunction* pFnFindVolumetricLightingSettingIndex = NULL;

	if ( ! pFnFindVolumetricLightingSettingIndex )
		pFnFindVolumetricLightingSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindVolumetricLightingSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindVolumetricLightingSettingIndex_Parms FindVolumetricLightingSettingIndex_Parms;

	this->ProcessEvent ( pFnFindVolumetricLightingSettingIndex, &FindVolumetricLightingSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptLightShaftsSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptLightShaftsSettings ( )
{
	static UFunction* pFnSetScriptLightShaftsSettings = NULL;

	if ( ! pFnSetScriptLightShaftsSettings )
		pFnSetScriptLightShaftsSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptLightShaftsSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptLightShaftsSettings_Parms SetScriptLightShaftsSettings_Parms;

	this->ProcessEvent ( pFnSetScriptLightShaftsSettings, &SetScriptLightShaftsSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptLightShaftsSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptLightShaftsSettings ( )
{
	static UFunction* pFnGetScriptLightShaftsSettings = NULL;

	if ( ! pFnGetScriptLightShaftsSettings )
		pFnGetScriptLightShaftsSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptLightShaftsSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptLightShaftsSettings_Parms GetScriptLightShaftsSettings_Parms;

	this->ProcessEvent ( pFnGetScriptLightShaftsSettings, &GetScriptLightShaftsSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindLightShaftsSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindLightShaftsSettingIndex ( )
{
	static UFunction* pFnFindLightShaftsSettingIndex = NULL;

	if ( ! pFnFindLightShaftsSettingIndex )
		pFnFindLightShaftsSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindLightShaftsSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindLightShaftsSettingIndex_Parms FindLightShaftsSettingIndex_Parms;

	this->ProcessEvent ( pFnFindLightShaftsSettingIndex, &FindLightShaftsSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptCharacterDetailSettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptCharacterDetailSettings ( )
{
	static UFunction* pFnSetScriptCharacterDetailSettings = NULL;

	if ( ! pFnSetScriptCharacterDetailSettings )
		pFnSetScriptCharacterDetailSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptCharacterDetailSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptCharacterDetailSettings_Parms SetScriptCharacterDetailSettings_Parms;

	this->ProcessEvent ( pFnSetScriptCharacterDetailSettings, &SetScriptCharacterDetailSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptCharacterDetailSettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptCharacterDetailSettings ( )
{
	static UFunction* pFnGetScriptCharacterDetailSettings = NULL;

	if ( ! pFnGetScriptCharacterDetailSettings )
		pFnGetScriptCharacterDetailSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptCharacterDetailSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptCharacterDetailSettings_Parms GetScriptCharacterDetailSettings_Parms;

	this->ProcessEvent ( pFnGetScriptCharacterDetailSettings, &GetScriptCharacterDetailSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindCharacterDetailIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindCharacterDetailIndex ( )
{
	static UFunction* pFnFindCharacterDetailIndex = NULL;

	if ( ! pFnFindCharacterDetailIndex )
		pFnFindCharacterDetailIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindCharacterDetailIndex" );

	UKFGFxOptionsMenu_Graphics_execFindCharacterDetailIndex_Parms FindCharacterDetailIndex_Parms;

	this->ProcessEvent ( pFnFindCharacterDetailIndex, &FindCharacterDetailIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptReflectionSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptReflectionSettings ( )
{
	static UFunction* pFnSetScriptReflectionSettings = NULL;

	if ( ! pFnSetScriptReflectionSettings )
		pFnSetScriptReflectionSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptReflectionSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptReflectionSettings_Parms SetScriptReflectionSettings_Parms;

	this->ProcessEvent ( pFnSetScriptReflectionSettings, &SetScriptReflectionSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptReflectionSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptReflectionSettings ( )
{
	static UFunction* pFnGetScriptReflectionSettings = NULL;

	if ( ! pFnGetScriptReflectionSettings )
		pFnGetScriptReflectionSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptReflectionSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptReflectionSettings_Parms GetScriptReflectionSettings_Parms;

	this->ProcessEvent ( pFnGetScriptReflectionSettings, &GetScriptReflectionSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindReflectionsSettingIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindReflectionsSettingIndex ( )
{
	static UFunction* pFnFindReflectionsSettingIndex = NULL;

	if ( ! pFnFindReflectionsSettingIndex )
		pFnFindReflectionsSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindReflectionsSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindReflectionsSettingIndex_Parms FindReflectionsSettingIndex_Parms;

	this->ProcessEvent ( pFnFindReflectionsSettingIndex, &FindReflectionsSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptFXQualitySettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptFXQualitySettings ( )
{
	static UFunction* pFnSetScriptFXQualitySettings = NULL;

	if ( ! pFnSetScriptFXQualitySettings )
		pFnSetScriptFXQualitySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptFXQualitySettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptFXQualitySettings_Parms SetScriptFXQualitySettings_Parms;

	this->ProcessEvent ( pFnSetScriptFXQualitySettings, &SetScriptFXQualitySettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptFXQualitySettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptFXQualitySettings ( )
{
	static UFunction* pFnGetScriptFXQualitySettings = NULL;

	if ( ! pFnGetScriptFXQualitySettings )
		pFnGetScriptFXQualitySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptFXQualitySettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptFXQualitySettings_Parms GetScriptFXQualitySettings_Parms;

	this->ProcessEvent ( pFnGetScriptFXQualitySettings, &GetScriptFXQualitySettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindFXQualityIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindFXQualityIndex ( )
{
	static UFunction* pFnFindFXQualityIndex = NULL;

	if ( ! pFnFindFXQualityIndex )
		pFnFindFXQualityIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindFXQualityIndex" );

	UKFGFxOptionsMenu_Graphics_execFindFXQualityIndex_Parms FindFXQualityIndex_Parms;

	this->ProcessEvent ( pFnFindFXQualityIndex, &FindFXQualityIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptShadowQualitySettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptShadowQualitySettings ( )
{
	static UFunction* pFnSetScriptShadowQualitySettings = NULL;

	if ( ! pFnSetScriptShadowQualitySettings )
		pFnSetScriptShadowQualitySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptShadowQualitySettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptShadowQualitySettings_Parms SetScriptShadowQualitySettings_Parms;

	this->ProcessEvent ( pFnSetScriptShadowQualitySettings, &SetScriptShadowQualitySettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptShadowQualitySettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptShadowQualitySettings ( )
{
	static UFunction* pFnGetScriptShadowQualitySettings = NULL;

	if ( ! pFnGetScriptShadowQualitySettings )
		pFnGetScriptShadowQualitySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptShadowQualitySettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptShadowQualitySettings_Parms GetScriptShadowQualitySettings_Parms;

	this->ProcessEvent ( pFnGetScriptShadowQualitySettings, &GetScriptShadowQualitySettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindShadowQualityIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindShadowQualityIndex ( )
{
	static UFunction* pFnFindShadowQualityIndex = NULL;

	if ( ! pFnFindShadowQualityIndex )
		pFnFindShadowQualityIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindShadowQualityIndex" );

	UKFGFxOptionsMenu_Graphics_execFindShadowQualityIndex_Parms FindShadowQualityIndex_Parms;

	this->ProcessEvent ( pFnFindShadowQualityIndex, &FindShadowQualityIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptEnvironmentDetailSettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptEnvironmentDetailSettings ( )
{
	static UFunction* pFnSetScriptEnvironmentDetailSettings = NULL;

	if ( ! pFnSetScriptEnvironmentDetailSettings )
		pFnSetScriptEnvironmentDetailSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptEnvironmentDetailSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptEnvironmentDetailSettings_Parms SetScriptEnvironmentDetailSettings_Parms;

	this->ProcessEvent ( pFnSetScriptEnvironmentDetailSettings, &SetScriptEnvironmentDetailSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptEnvironmentDetailSettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptEnvironmentDetailSettings ( )
{
	static UFunction* pFnGetScriptEnvironmentDetailSettings = NULL;

	if ( ! pFnGetScriptEnvironmentDetailSettings )
		pFnGetScriptEnvironmentDetailSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptEnvironmentDetailSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptEnvironmentDetailSettings_Parms GetScriptEnvironmentDetailSettings_Parms;

	this->ProcessEvent ( pFnGetScriptEnvironmentDetailSettings, &GetScriptEnvironmentDetailSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindEnvironmentDetailIndex
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindEnvironmentDetailIndex ( )
{
	static UFunction* pFnFindEnvironmentDetailIndex = NULL;

	if ( ! pFnFindEnvironmentDetailIndex )
		pFnFindEnvironmentDetailIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindEnvironmentDetailIndex" );

	UKFGFxOptionsMenu_Graphics_execFindEnvironmentDetailIndex_Parms FindEnvironmentDetailIndex_Parms;

	this->ProcessEvent ( pFnFindEnvironmentDetailIndex, &FindEnvironmentDetailIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.NotEqual_FilmGrainSettingFilmGrainSetting
// [0x00023003] ( FUNC_Final )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::NotEqual_FilmGrainSettingFilmGrainSetting ( )
{
	static UFunction* pFnNotEqual_FilmGrainSettingFilmGrainSetting = NULL;

	if ( ! pFnNotEqual_FilmGrainSettingFilmGrainSetting )
		pFnNotEqual_FilmGrainSettingFilmGrainSetting = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.NotEqual_FilmGrainSettingFilmGrainSetting" );

	UKFGFxOptionsMenu_Graphics_execNotEqual_FilmGrainSettingFilmGrainSetting_Parms NotEqual_FilmGrainSettingFilmGrainSetting_Parms;

	this->ProcessEvent ( pFnNotEqual_FilmGrainSettingFilmGrainSetting, &NotEqual_FilmGrainSettingFilmGrainSetting_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.EqualEqual_FilmGrainSettingFilmGrainSetting
// [0x00023003] ( FUNC_Final )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::EqualEqual_FilmGrainSettingFilmGrainSetting ( )
{
	static UFunction* pFnEqualEqual_FilmGrainSettingFilmGrainSetting = NULL;

	if ( ! pFnEqualEqual_FilmGrainSettingFilmGrainSetting )
		pFnEqualEqual_FilmGrainSettingFilmGrainSetting = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.EqualEqual_FilmGrainSettingFilmGrainSetting" );

	UKFGFxOptionsMenu_Graphics_execEqualEqual_FilmGrainSettingFilmGrainSetting_Parms EqualEqual_FilmGrainSettingFilmGrainSetting_Parms;

	this->ProcessEvent ( pFnEqualEqual_FilmGrainSettingFilmGrainSetting, &EqualEqual_FilmGrainSettingFilmGrainSetting_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptFilmGrainSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptFilmGrainSettings ( )
{
	static UFunction* pFnSetScriptFilmGrainSettings = NULL;

	if ( ! pFnSetScriptFilmGrainSettings )
		pFnSetScriptFilmGrainSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptFilmGrainSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptFilmGrainSettings_Parms SetScriptFilmGrainSettings_Parms;

	this->ProcessEvent ( pFnSetScriptFilmGrainSettings, &SetScriptFilmGrainSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptFilmGrainSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptFilmGrainSettings ( )
{
	static UFunction* pFnGetScriptFilmGrainSettings = NULL;

	if ( ! pFnGetScriptFilmGrainSettings )
		pFnGetScriptFilmGrainSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptFilmGrainSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptFilmGrainSettings_Parms GetScriptFilmGrainSettings_Parms;

	this->ProcessEvent ( pFnGetScriptFilmGrainSettings, &GetScriptFilmGrainSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetFilmGrainSettingValue
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetFilmGrainSettingValue ( )
{
	static UFunction* pFnGetFilmGrainSettingValue = NULL;

	if ( ! pFnGetFilmGrainSettingValue )
		pFnGetFilmGrainSettingValue = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetFilmGrainSettingValue" );

	UKFGFxOptionsMenu_Graphics_execGetFilmGrainSettingValue_Parms GetFilmGrainSettingValue_Parms;

	this->ProcessEvent ( pFnGetFilmGrainSettingValue, &GetFilmGrainSettingValue_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetFilmGrainSliderValue
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetFilmGrainSliderValue ( )
{
	static UFunction* pFnGetFilmGrainSliderValue = NULL;

	if ( ! pFnGetFilmGrainSliderValue )
		pFnGetFilmGrainSliderValue = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetFilmGrainSliderValue" );

	UKFGFxOptionsMenu_Graphics_execGetFilmGrainSliderValue_Parms GetFilmGrainSliderValue_Parms;

	this->ProcessEvent ( pFnGetFilmGrainSliderValue, &GetFilmGrainSliderValue_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptVariableFramerateSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptVariableFramerateSettings ( )
{
	static UFunction* pFnSetScriptVariableFramerateSettings = NULL;

	if ( ! pFnSetScriptVariableFramerateSettings )
		pFnSetScriptVariableFramerateSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptVariableFramerateSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptVariableFramerateSettings_Parms SetScriptVariableFramerateSettings_Parms;

	this->ProcessEvent ( pFnSetScriptVariableFramerateSettings, &SetScriptVariableFramerateSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptVariableFramerateSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptVariableFramerateSettings ( )
{
	static UFunction* pFnGetScriptVariableFramerateSettings = NULL;

	if ( ! pFnGetScriptVariableFramerateSettings )
		pFnGetScriptVariableFramerateSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptVariableFramerateSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptVariableFramerateSettings_Parms GetScriptVariableFramerateSettings_Parms;

	this->ProcessEvent ( pFnGetScriptVariableFramerateSettings, &GetScriptVariableFramerateSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindVariableFPSSettingIndex
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindVariableFPSSettingIndex ( )
{
	static UFunction* pFnFindVariableFPSSettingIndex = NULL;

	if ( ! pFnFindVariableFPSSettingIndex )
		pFnFindVariableFPSSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindVariableFPSSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindVariableFPSSettingIndex_Parms FindVariableFPSSettingIndex_Parms;

	this->ProcessEvent ( pFnFindVariableFPSSettingIndex, &FindVariableFPSSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptVSyncSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptVSyncSettings ( )
{
	static UFunction* pFnSetScriptVSyncSettings = NULL;

	if ( ! pFnSetScriptVSyncSettings )
		pFnSetScriptVSyncSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptVSyncSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptVSyncSettings_Parms SetScriptVSyncSettings_Parms;

	this->ProcessEvent ( pFnSetScriptVSyncSettings, &SetScriptVSyncSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptVSyncSettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptVSyncSettings ( )
{
	static UFunction* pFnGetScriptVSyncSettings = NULL;

	if ( ! pFnGetScriptVSyncSettings )
		pFnGetScriptVSyncSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptVSyncSettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptVSyncSettings_Parms GetScriptVSyncSettings_Parms;

	this->ProcessEvent ( pFnGetScriptVSyncSettings, &GetScriptVSyncSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindVSyncSettingIndex
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindVSyncSettingIndex ( )
{
	static UFunction* pFnFindVSyncSettingIndex = NULL;

	if ( ! pFnFindVSyncSettingIndex )
		pFnFindVSyncSettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindVSyncSettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindVSyncSettingIndex_Parms FindVSyncSettingIndex_Parms;

	this->ProcessEvent ( pFnFindVSyncSettingIndex, &FindVSyncSettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptDisplaySettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptDisplaySettings ( )
{
	static UFunction* pFnSetScriptDisplaySettings = NULL;

	if ( ! pFnSetScriptDisplaySettings )
		pFnSetScriptDisplaySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptDisplaySettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptDisplaySettings_Parms SetScriptDisplaySettings_Parms;

	this->ProcessEvent ( pFnSetScriptDisplaySettings, &SetScriptDisplaySettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptDisplaySettings
// [0x00422000] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetScriptDisplaySettings ( )
{
	static UFunction* pFnGetScriptDisplaySettings = NULL;

	if ( ! pFnGetScriptDisplaySettings )
		pFnGetScriptDisplaySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetScriptDisplaySettings" );

	UKFGFxOptionsMenu_Graphics_execGetScriptDisplaySettings_Parms GetScriptDisplaySettings_Parms;

	this->ProcessEvent ( pFnGetScriptDisplaySettings, &GetScriptDisplaySettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindDisplaySettingIndex
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindDisplaySettingIndex ( )
{
	static UFunction* pFnFindDisplaySettingIndex = NULL;

	if ( ! pFnFindDisplaySettingIndex )
		pFnFindDisplaySettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindDisplaySettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindDisplaySettingIndex_Parms FindDisplaySettingIndex_Parms;

	this->ProcessEvent ( pFnFindDisplaySettingIndex, &FindDisplaySettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FindGraphicsQualitySettingIndex
// [0x00C20002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FindGraphicsQualitySettingIndex ( )
{
	static UFunction* pFnFindGraphicsQualitySettingIndex = NULL;

	if ( ! pFnFindGraphicsQualitySettingIndex )
		pFnFindGraphicsQualitySettingIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FindGraphicsQualitySettingIndex" );

	UKFGFxOptionsMenu_Graphics_execFindGraphicsQualitySettingIndex_Parms FindGraphicsQualitySettingIndex_Parms;

	this->ProcessEvent ( pFnFindGraphicsQualitySettingIndex, &FindGraphicsQualitySettingIndex_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptSettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetScriptSettings ( )
{
	static UFunction* pFnSetScriptSettings = NULL;

	if ( ! pFnSetScriptSettings )
		pFnSetScriptSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetScriptSettings" );

	UKFGFxOptionsMenu_Graphics_execSetScriptSettings_Parms SetScriptSettings_Parms;

	this->ProcessEvent ( pFnSetScriptSettings, &SetScriptSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetCurrentScriptSettings
// [0x00422002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetCurrentScriptSettings ( )
{
	static UFunction* pFnGetCurrentScriptSettings = NULL;

	if ( ! pFnGetCurrentScriptSettings )
		pFnGetCurrentScriptSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetCurrentScriptSettings" );

	UKFGFxOptionsMenu_Graphics_execGetCurrentScriptSettings_Parms GetCurrentScriptSettings_Parms;

	this->ProcessEvent ( pFnGetCurrentScriptSettings, &GetCurrentScriptSettings_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetAspectRatio
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::eventGetAspectRatio ( )
{
	static UFunction* pFnGetAspectRatio = NULL;

	if ( ! pFnGetAspectRatio )
		pFnGetAspectRatio = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetAspectRatio" );

	UKFGFxOptionsMenu_Graphics_eventGetAspectRatio_Parms GetAspectRatio_Parms;

	this->ProcessEvent ( pFnGetAspectRatio, &GetAspectRatio_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.UpdateGSA
// [0x00022002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::UpdateGSA ( )
{
	static UFunction* pFnUpdateGSA = NULL;

	if ( ! pFnUpdateGSA )
		pFnUpdateGSA = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.UpdateGSA" );

	UKFGFxOptionsMenu_Graphics_execUpdateGSA_Parms UpdateGSA_Parms;

	this->ProcessEvent ( pFnUpdateGSA, &UpdateGSA_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics.IsFleXSupported
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::IsFleXSupported ( )
{
	static UFunction* pFnIsFleXSupported = NULL;

	if ( ! pFnIsFleXSupported )
		pFnIsFleXSupported = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.IsFleXSupported" );

	UKFGFxOptionsMenu_Graphics_execIsFleXSupported_Parms IsFleXSupported_Parms;

	pFnIsFleXSupported->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsFleXSupported, &IsFleXSupported_Parms, NULL );

	pFnIsFleXSupported->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxOptionsMenu_Graphics.RefreshSupportedResolutions
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::RefreshSupportedResolutions ( )
{
	static UFunction* pFnRefreshSupportedResolutions = NULL;

	if ( ! pFnRefreshSupportedResolutions )
		pFnRefreshSupportedResolutions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.RefreshSupportedResolutions" );

	UKFGFxOptionsMenu_Graphics_execRefreshSupportedResolutions_Parms RefreshSupportedResolutions_Parms;

	pFnRefreshSupportedResolutions->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnRefreshSupportedResolutions, &RefreshSupportedResolutions_Parms, NULL );

	pFnRefreshSupportedResolutions->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxOptionsMenu_Graphics.IsAspectRatioAvailable
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::IsAspectRatioAvailable ( )
{
	static UFunction* pFnIsAspectRatioAvailable = NULL;

	if ( ! pFnIsAspectRatioAvailable )
		pFnIsAspectRatioAvailable = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.IsAspectRatioAvailable" );

	UKFGFxOptionsMenu_Graphics_execIsAspectRatioAvailable_Parms IsAspectRatioAvailable_Parms;

	pFnIsAspectRatioAvailable->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnIsAspectRatioAvailable, &IsAspectRatioAvailable_Parms, NULL );

	pFnIsAspectRatioAvailable->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetCompatLevel
// [0x00020400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetCompatLevel ( )
{
	static UFunction* pFnGetCompatLevel = NULL;

	if ( ! pFnGetCompatLevel )
		pFnGetCompatLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetCompatLevel" );

	UKFGFxOptionsMenu_Graphics_execGetCompatLevel_Parms GetCompatLevel_Parms;

	pFnGetCompatLevel->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCompatLevel, &GetCompatLevel_Parms, NULL );

	pFnGetCompatLevel->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxOptionsMenu_Graphics.SetNativeSettings
// [0x00422400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::SetNativeSettings ( )
{
	static UFunction* pFnSetNativeSettings = NULL;

	if ( ! pFnSetNativeSettings )
		pFnSetNativeSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.SetNativeSettings" );

	UKFGFxOptionsMenu_Graphics_execSetNativeSettings_Parms SetNativeSettings_Parms;

	pFnSetNativeSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetNativeSettings, &SetNativeSettings_Parms, NULL );

	pFnSetNativeSettings->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxOptionsMenu_Graphics.GetCurrentNativeSettings
// [0x00422400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::GetCurrentNativeSettings ( )
{
	static UFunction* pFnGetCurrentNativeSettings = NULL;

	if ( ! pFnGetCurrentNativeSettings )
		pFnGetCurrentNativeSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.GetCurrentNativeSettings" );

	UKFGFxOptionsMenu_Graphics_execGetCurrentNativeSettings_Parms GetCurrentNativeSettings_Parms;

	pFnGetCurrentNativeSettings->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentNativeSettings, &GetCurrentNativeSettings_Parms, NULL );

	pFnGetCurrentNativeSettings->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxOptionsMenu_Graphics.FlushGSA
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::FlushGSA ( )
{
	static UFunction* pFnFlushGSA = NULL;

	if ( ! pFnFlushGSA )
		pFnFlushGSA = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.FlushGSA" );

	UKFGFxOptionsMenu_Graphics_execFlushGSA_Parms FlushGSA_Parms;

	pFnFlushGSA->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnFlushGSA, &FlushGSA_Parms, NULL );

	pFnFlushGSA->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxOptionsMenu_Graphics.UpdateGSAResolution
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::UpdateGSAResolution ( )
{
	static UFunction* pFnUpdateGSAResolution = NULL;

	if ( ! pFnUpdateGSAResolution )
		pFnUpdateGSAResolution = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.UpdateGSAResolution" );

	UKFGFxOptionsMenu_Graphics_execUpdateGSAResolution_Parms UpdateGSAResolution_Parms;

	pFnUpdateGSAResolution->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateGSAResolution, &UpdateGSAResolution_Parms, NULL );

	pFnUpdateGSAResolution->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxOptionsMenu_Graphics.UpdateGSASetting
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFGFxOptionsMenu_Graphics::UpdateGSASetting ( )
{
	static UFunction* pFnUpdateGSASetting = NULL;

	if ( ! pFnUpdateGSASetting )
		pFnUpdateGSASetting = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics.UpdateGSASetting" );

	UKFGFxOptionsMenu_Graphics_execUpdateGSASetting_Parms UpdateGSASetting_Parms;

	pFnUpdateGSASetting->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnUpdateGSASetting, &UpdateGSASetting_Parms, NULL );

	pFnUpdateGSASetting->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxObject_TraderItems.GetItemIndicesFromArche
// [0x00420003] ( FUNC_Final )
// Parameters infos:

void UKFGFxObject_TraderItems::GetItemIndicesFromArche ( )
{
	static UFunction* pFnGetItemIndicesFromArche = NULL;

	if ( ! pFnGetItemIndicesFromArche )
		pFnGetItemIndicesFromArche = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_TraderItems.GetItemIndicesFromArche" );

	UKFGFxObject_TraderItems_execGetItemIndicesFromArche_Parms GetItemIndicesFromArche_Parms;

	this->ProcessEvent ( pFnGetItemIndicesFromArche, &GetItemIndicesFromArche_Parms, NULL );
};

// Function KFGame.KFGFxObject_TraderItems.SortItemsInfo
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFGFxObject_TraderItems::SortItemsInfo ( )
{
	static UFunction* pFnSortItemsInfo = NULL;

	if ( ! pFnSortItemsInfo )
		pFnSortItemsInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_TraderItems.SortItemsInfo" );

	UKFGFxObject_TraderItems_execSortItemsInfo_Parms SortItemsInfo_Parms;

	pFnSortItemsInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSortItemsInfo, &SortItemsInfo_Parms, NULL );

	pFnSortItemsInfo->FunctionFlags |= 0x400;
};

// Function KFGame.KFGFxObject_TraderItems.SetItemsInfo
// [0x00420400] ( FUNC_Native )
// Parameters infos:

void UKFGFxObject_TraderItems::SetItemsInfo ( )
{
	static UFunction* pFnSetItemsInfo = NULL;

	if ( ! pFnSetItemsInfo )
		pFnSetItemsInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_TraderItems.SetItemsInfo" );

	UKFGFxObject_TraderItems_execSetItemsInfo_Parms SetItemsInfo_Parms;

	pFnSetItemsInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnSetItemsInfo, &SetItemsInfo_Parms, NULL );

	pFnSetItemsInfo->FunctionFlags |= 0x400;
};

// Function KFGame.KFHUDBase.SetPostRenderingFor
// [0x00020002] 
// Parameters infos:

void AKFHUDBase::SetPostRenderingFor ( )
{
	static UFunction* pFnSetPostRenderingFor = NULL;

	if ( ! pFnSetPostRenderingFor )
		pFnSetPostRenderingFor = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.SetPostRenderingFor" );

	AKFHUDBase_execSetPostRenderingFor_Parms SetPostRenderingFor_Parms;

	this->ProcessEvent ( pFnSetPostRenderingFor, &SetPostRenderingFor_Parms, NULL );
};

// Function KFGame.KFHUDBase.OnLostFocusPause
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFHUDBase::eventOnLostFocusPause ( )
{
	static UFunction* pFnOnLostFocusPause = NULL;

	if ( ! pFnOnLostFocusPause )
		pFnOnLostFocusPause = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.OnLostFocusPause" );

	AKFHUDBase_eventOnLostFocusPause_Parms OnLostFocusPause_Parms;

	this->ProcessEvent ( pFnOnLostFocusPause, &OnLostFocusPause_Parms, NULL );
};

// Function KFGame.KFHUDBase.GetClampedScreenPosition
// [0x00820002] 
// Parameters infos:

void AKFHUDBase::GetClampedScreenPosition ( )
{
	static UFunction* pFnGetClampedScreenPosition = NULL;

	if ( ! pFnGetClampedScreenPosition )
		pFnGetClampedScreenPosition = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.GetClampedScreenPosition" );

	AKFHUDBase_execGetClampedScreenPosition_Parms GetClampedScreenPosition_Parms;

	this->ProcessEvent ( pFnGetClampedScreenPosition, &GetClampedScreenPosition_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawZedIcon
// [0x00820002] 
// Parameters infos:

void AKFHUDBase::DrawZedIcon ( )
{
	static UFunction* pFnDrawZedIcon = NULL;

	if ( ! pFnDrawZedIcon )
		pFnDrawZedIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawZedIcon" );

	AKFHUDBase_execDrawZedIcon_Parms DrawZedIcon_Parms;

	this->ProcessEvent ( pFnDrawZedIcon, &DrawZedIcon_Parms, NULL );
};

// Function KFGame.KFHUDBase.CheckAndDrawRemainingZedIcons
// [0x00820002] 
// Parameters infos:

void AKFHUDBase::CheckAndDrawRemainingZedIcons ( )
{
	static UFunction* pFnCheckAndDrawRemainingZedIcons = NULL;

	if ( ! pFnCheckAndDrawRemainingZedIcons )
		pFnCheckAndDrawRemainingZedIcons = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.CheckAndDrawRemainingZedIcons" );

	AKFHUDBase_execCheckAndDrawRemainingZedIcons_Parms CheckAndDrawRemainingZedIcons_Parms;

	this->ProcessEvent ( pFnCheckAndDrawRemainingZedIcons, &CheckAndDrawRemainingZedIcons_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawHiddenHumanPlayerIcon
// [0x00820002] 
// Parameters infos:

void AKFHUDBase::DrawHiddenHumanPlayerIcon ( )
{
	static UFunction* pFnDrawHiddenHumanPlayerIcon = NULL;

	if ( ! pFnDrawHiddenHumanPlayerIcon )
		pFnDrawHiddenHumanPlayerIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawHiddenHumanPlayerIcon" );

	AKFHUDBase_execDrawHiddenHumanPlayerIcon_Parms DrawHiddenHumanPlayerIcon_Parms;

	this->ProcessEvent ( pFnDrawHiddenHumanPlayerIcon, &DrawHiddenHumanPlayerIcon_Parms, NULL );
};

// Function KFGame.KFHUDBase.CheckAndDrawHiddenPlayerIcons
// [0x00820102] 
// Parameters infos:

void AKFHUDBase::CheckAndDrawHiddenPlayerIcons ( )
{
	static UFunction* pFnCheckAndDrawHiddenPlayerIcons = NULL;

	if ( ! pFnCheckAndDrawHiddenPlayerIcons )
		pFnCheckAndDrawHiddenPlayerIcons = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.CheckAndDrawHiddenPlayerIcons" );

	AKFHUDBase_execCheckAndDrawHiddenPlayerIcons_Parms CheckAndDrawHiddenPlayerIcons_Parms;

	this->ProcessEvent ( pFnCheckAndDrawHiddenPlayerIcons, &CheckAndDrawHiddenPlayerIcons_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawKFBar
// [0x00020102] 
// Parameters infos:

void AKFHUDBase::DrawKFBar ( )
{
	static UFunction* pFnDrawKFBar = NULL;

	if ( ! pFnDrawKFBar )
		pFnDrawKFBar = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawKFBar" );

	AKFHUDBase_execDrawKFBar_Parms DrawKFBar_Parms;

	this->ProcessEvent ( pFnDrawKFBar, &DrawKFBar_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawObjectiveHUD
// [0x00820102] 
// Parameters infos:

void AKFHUDBase::DrawObjectiveHUD ( )
{
	static UFunction* pFnDrawObjectiveHUD = NULL;

	if ( ! pFnDrawObjectiveHUD )
		pFnDrawObjectiveHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawObjectiveHUD" );

	AKFHUDBase_execDrawObjectiveHUD_Parms DrawObjectiveHUD_Parms;

	this->ProcessEvent ( pFnDrawObjectiveHUD, &DrawObjectiveHUD_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawFriendlyHumanPlayerInfo
// [0x00820102] 
// Parameters infos:

void AKFHUDBase::DrawFriendlyHumanPlayerInfo ( )
{
	static UFunction* pFnDrawFriendlyHumanPlayerInfo = NULL;

	if ( ! pFnDrawFriendlyHumanPlayerInfo )
		pFnDrawFriendlyHumanPlayerInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawFriendlyHumanPlayerInfo" );

	AKFHUDBase_execDrawFriendlyHumanPlayerInfo_Parms DrawFriendlyHumanPlayerInfo_Parms;

	this->ProcessEvent ( pFnDrawFriendlyHumanPlayerInfo, &DrawFriendlyHumanPlayerInfo_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawHUD
// [0x00820002] 
// Parameters infos:

void AKFHUDBase::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawHUD" );

	AKFHUDBase_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawShadowedRotatedTile
// [0x00824102] 
// Parameters infos:

void AKFHUDBase::DrawShadowedRotatedTile ( )
{
	static UFunction* pFnDrawShadowedRotatedTile = NULL;

	if ( ! pFnDrawShadowedRotatedTile )
		pFnDrawShadowedRotatedTile = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawShadowedRotatedTile" );

	AKFHUDBase_execDrawShadowedRotatedTile_Parms DrawShadowedRotatedTile_Parms;

	this->ProcessEvent ( pFnDrawShadowedRotatedTile, &DrawShadowedRotatedTile_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawShadowedStretchedTile
// [0x00824102] 
// Parameters infos:

void AKFHUDBase::DrawShadowedStretchedTile ( )
{
	static UFunction* pFnDrawShadowedStretchedTile = NULL;

	if ( ! pFnDrawShadowedStretchedTile )
		pFnDrawShadowedStretchedTile = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawShadowedStretchedTile" );

	AKFHUDBase_execDrawShadowedStretchedTile_Parms DrawShadowedStretchedTile_Parms;

	this->ProcessEvent ( pFnDrawShadowedStretchedTile, &DrawShadowedStretchedTile_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawShadowedTile
// [0x00824102] 
// Parameters infos:

void AKFHUDBase::DrawShadowedTile ( )
{
	static UFunction* pFnDrawShadowedTile = NULL;

	if ( ! pFnDrawShadowedTile )
		pFnDrawShadowedTile = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawShadowedTile" );

	AKFHUDBase_execDrawShadowedTile_Parms DrawShadowedTile_Parms;

	this->ProcessEvent ( pFnDrawShadowedTile, &DrawShadowedTile_Parms, NULL );
};

// Function KFGame.KFHUDBase.CheckCrosshairOnFriendly
// [0x00020002] 
// Parameters infos:

void AKFHUDBase::CheckCrosshairOnFriendly ( )
{
	static UFunction* pFnCheckCrosshairOnFriendly = NULL;

	if ( ! pFnCheckCrosshairOnFriendly )
		pFnCheckCrosshairOnFriendly = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.CheckCrosshairOnFriendly" );

	AKFHUDBase_execCheckCrosshairOnFriendly_Parms CheckCrosshairOnFriendly_Parms;

	this->ProcessEvent ( pFnCheckCrosshairOnFriendly, &CheckCrosshairOnFriendly_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawToolTip
// [0x00024000] 
// Parameters infos:

void AKFHUDBase::DrawToolTip ( )
{
	static UFunction* pFnDrawToolTip = NULL;

	if ( ! pFnDrawToolTip )
		pFnDrawToolTip = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawToolTip" );

	AKFHUDBase_execDrawToolTip_Parms DrawToolTip_Parms;

	this->ProcessEvent ( pFnDrawToolTip, &DrawToolTip_Parms, NULL );
};

// Function KFGame.KFHUDBase.SetShowLeaderboard
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFHUDBase::SetShowLeaderboard ( )
{
	static UFunction* pFnSetShowLeaderboard = NULL;

	if ( ! pFnSetShowLeaderboard )
		pFnSetShowLeaderboard = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.SetShowLeaderboard" );

	AKFHUDBase_execSetShowLeaderboard_Parms SetShowLeaderboard_Parms;

	this->ProcessEvent ( pFnSetShowLeaderboard, &SetShowLeaderboard_Parms, NULL );
};

// Function KFGame.KFHUDBase.ToggleLeaderboard
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFHUDBase::ToggleLeaderboard ( )
{
	static UFunction* pFnToggleLeaderboard = NULL;

	if ( ! pFnToggleLeaderboard )
		pFnToggleLeaderboard = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.ToggleLeaderboard" );

	AKFHUDBase_execToggleLeaderboard_Parms ToggleLeaderboard_Parms;

	this->ProcessEvent ( pFnToggleLeaderboard, &ToggleLeaderboard_Parms, NULL );
};

// Function KFGame.KFHUDBase.SetShowScores
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFHUDBase::SetShowScores ( )
{
	static UFunction* pFnSetShowScores = NULL;

	if ( ! pFnSetShowScores )
		pFnSetShowScores = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.SetShowScores" );

	AKFHUDBase_execSetShowScores_Parms SetShowScores_Parms;

	this->ProcessEvent ( pFnSetShowScores, &SetShowScores_Parms, NULL );
};

// Function KFGame.KFHUDBase.GetLocalPlayerOwnerIndex
// [0x00020002] 
// Parameters infos:

void AKFHUDBase::GetLocalPlayerOwnerIndex ( )
{
	static UFunction* pFnGetLocalPlayerOwnerIndex = NULL;

	if ( ! pFnGetLocalPlayerOwnerIndex )
		pFnGetLocalPlayerOwnerIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.GetLocalPlayerOwnerIndex" );

	AKFHUDBase_execGetLocalPlayerOwnerIndex_Parms GetLocalPlayerOwnerIndex_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerOwnerIndex, &GetLocalPlayerOwnerIndex_Parms, NULL );
};

// Function KFGame.KFHUDBase.ReleaseShowScores
// [0x00020200] ( FUNC_Exec )
// Parameters infos:

void AKFHUDBase::ReleaseShowScores ( )
{
	static UFunction* pFnReleaseShowScores = NULL;

	if ( ! pFnReleaseShowScores )
		pFnReleaseShowScores = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.ReleaseShowScores" );

	AKFHUDBase_execReleaseShowScores_Parms ReleaseShowScores_Parms;

	this->ProcessEvent ( pFnReleaseShowScores, &ReleaseShowScores_Parms, NULL );
};

// Function KFGame.KFHUDBase.CompletePauseMenuClose
// [0x00020000] 
// Parameters infos:

void AKFHUDBase::CompletePauseMenuClose ( )
{
	static UFunction* pFnCompletePauseMenuClose = NULL;

	if ( ! pFnCompletePauseMenuClose )
		pFnCompletePauseMenuClose = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.CompletePauseMenuClose" );

	AKFHUDBase_execCompletePauseMenuClose_Parms CompletePauseMenuClose_Parms;

	this->ProcessEvent ( pFnCompletePauseMenuClose, &CompletePauseMenuClose_Parms, NULL );
};

// Function KFGame.KFHUDBase.TogglePauseMenu
// [0x00020000] 
// Parameters infos:

void AKFHUDBase::TogglePauseMenu ( )
{
	static UFunction* pFnTogglePauseMenu = NULL;

	if ( ! pFnTogglePauseMenu )
		pFnTogglePauseMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.TogglePauseMenu" );

	AKFHUDBase_execTogglePauseMenu_Parms TogglePauseMenu_Parms;

	this->ProcessEvent ( pFnTogglePauseMenu, &TogglePauseMenu_Parms, NULL );
};

// Function KFGame.KFHUDBase.CloseOtherMenus
// [0x00020000] 
// Parameters infos:

void AKFHUDBase::CloseOtherMenus ( )
{
	static UFunction* pFnCloseOtherMenus = NULL;

	if ( ! pFnCloseOtherMenus )
		pFnCloseOtherMenus = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.CloseOtherMenus" );

	AKFHUDBase_execCloseOtherMenus_Parms CloseOtherMenus_Parms;

	this->ProcessEvent ( pFnCloseOtherMenus, &CloseOtherMenus_Parms, NULL );
};

// Function KFGame.KFHUDBase.SetVisible
// [0x00020002] 
// Parameters infos:

void AKFHUDBase::SetVisible ( )
{
	static UFunction* pFnSetVisible = NULL;

	if ( ! pFnSetVisible )
		pFnSetVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.SetVisible" );

	AKFHUDBase_execSetVisible_Parms SetVisible_Parms;

	this->ProcessEvent ( pFnSetVisible, &SetVisible_Parms, NULL );
};

// Function KFGame.KFHUDBase.RemoveMovies
// [0x00020000] 
// Parameters infos:

void AKFHUDBase::RemoveMovies ( )
{
	static UFunction* pFnRemoveMovies = NULL;

	if ( ! pFnRemoveMovies )
		pFnRemoveMovies = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.RemoveMovies" );

	AKFHUDBase_execRemoveMovies_Parms RemoveMovies_Parms;

	this->ProcessEvent ( pFnRemoveMovies, &RemoveMovies_Parms, NULL );
};

// Function KFGame.KFHUDBase.OnOpenAnimComplete
// [0x00020000] 
// Parameters infos:

void AKFHUDBase::OnOpenAnimComplete ( )
{
	static UFunction* pFnOnOpenAnimComplete = NULL;

	if ( ! pFnOnOpenAnimComplete )
		pFnOnOpenAnimComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.OnOpenAnimComplete" );

	AKFHUDBase_execOnOpenAnimComplete_Parms OnOpenAnimComplete_Parms;

	this->ProcessEvent ( pFnOnOpenAnimComplete, &OnOpenAnimComplete_Parms, NULL );
};

// Function KFGame.KFHUDBase.OnCloseAnimComplete
// [0x00020000] 
// Parameters infos:

void AKFHUDBase::OnCloseAnimComplete ( )
{
	static UFunction* pFnOnCloseAnimComplete = NULL;

	if ( ! pFnOnCloseAnimComplete )
		pFnOnCloseAnimComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.OnCloseAnimComplete" );

	AKFHUDBase_execOnCloseAnimComplete_Parms OnCloseAnimComplete_Parms;

	this->ProcessEvent ( pFnOnCloseAnimComplete, &OnCloseAnimComplete_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawCrosshair
// [0x00020002] 
// Parameters infos:

void AKFHUDBase::DrawCrosshair ( )
{
	static UFunction* pFnDrawCrosshair = NULL;

	if ( ! pFnDrawCrosshair )
		pFnDrawCrosshair = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawCrosshair" );

	AKFHUDBase_execDrawCrosshair_Parms DrawCrosshair_Parms;

	this->ProcessEvent ( pFnDrawCrosshair, &DrawCrosshair_Parms, NULL );
};

// Function KFGame.KFHUDBase.SetShowOverlays
// [0x00020002] 
// Parameters infos:

void AKFHUDBase::SetShowOverlays ( )
{
	static UFunction* pFnSetShowOverlays = NULL;

	if ( ! pFnSetShowOverlays )
		pFnSetShowOverlays = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.SetShowOverlays" );

	AKFHUDBase_execSetShowOverlays_Parms SetShowOverlays_Parms;

	this->ProcessEvent ( pFnSetShowOverlays, &SetShowOverlays_Parms, NULL );
};

// Function KFGame.KFHUDBase.ResolutionChanged
// [0x00020000] 
// Parameters infos:

void AKFHUDBase::ResolutionChanged ( )
{
	static UFunction* pFnResolutionChanged = NULL;

	if ( ! pFnResolutionChanged )
		pFnResolutionChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.ResolutionChanged" );

	AKFHUDBase_execResolutionChanged_Parms ResolutionChanged_Parms;

	this->ProcessEvent ( pFnResolutionChanged, &ResolutionChanged_Parms, NULL );
};

// Function KFGame.KFHUDBase.PreCalcValues
// [0x00020002] 
// Parameters infos:

void AKFHUDBase::PreCalcValues ( )
{
	static UFunction* pFnPreCalcValues = NULL;

	if ( ! pFnPreCalcValues )
		pFnPreCalcValues = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.PreCalcValues" );

	AKFHUDBase_execPreCalcValues_Parms PreCalcValues_Parms;

	this->ProcessEvent ( pFnPreCalcValues, &PreCalcValues_Parms, NULL );
};

// Function KFGame.KFHUDBase.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFHUDBase::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.PostBeginPlay" );

	AKFHUDBase_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFHUDBase.DrawGlowText
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFHUDBase::DrawGlowText ( )
{
	static UFunction* pFnDrawGlowText = NULL;

	if ( ! pFnDrawGlowText )
		pFnDrawGlowText = UObject::FindObject< UFunction > ( "Function KFGame.KFHUDBase.DrawGlowText" );

	AKFHUDBase_execDrawGlowText_Parms DrawGlowText_Parms;

	pFnDrawGlowText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawGlowText, &DrawGlowText_Parms, NULL );

	pFnDrawGlowText->FunctionFlags |= 0x400;
};

// Function KFGame.KFDebugCameraHUD.DrawCrosshair
// [0x00020002] 
// Parameters infos:

void AKFDebugCameraHUD::DrawCrosshair ( )
{
	static UFunction* pFnDrawCrosshair = NULL;

	if ( ! pFnDrawCrosshair )
		pFnDrawCrosshair = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraHUD.DrawCrosshair" );

	AKFDebugCameraHUD_execDrawCrosshair_Parms DrawCrosshair_Parms;

	this->ProcessEvent ( pFnDrawCrosshair, &DrawCrosshair_Parms, NULL );
};

// Function KFGame.KFDebugCameraHUD.PostRender
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFDebugCameraHUD::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraHUD.PostRender" );

	AKFDebugCameraHUD_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function KFGame.KFDebugCameraHUD.DisplayHelp
// [0x00820002] 
// Parameters infos:

void AKFDebugCameraHUD::DisplayHelp ( )
{
	static UFunction* pFnDisplayHelp = NULL;

	if ( ! pFnDisplayHelp )
		pFnDisplayHelp = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraHUD.DisplayHelp" );

	AKFDebugCameraHUD_execDisplayHelp_Parms DisplayHelp_Parms;

	this->ProcessEvent ( pFnDisplayHelp, &DisplayHelp_Parms, NULL );
};

// Function KFGame.KFDebugCameraHUD.ToggleHelpDisplay
// [0x00020002] 
// Parameters infos:

void AKFDebugCameraHUD::ToggleHelpDisplay ( )
{
	static UFunction* pFnToggleHelpDisplay = NULL;

	if ( ! pFnToggleHelpDisplay )
		pFnToggleHelpDisplay = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraHUD.ToggleHelpDisplay" );

	AKFDebugCameraHUD_execToggleHelpDisplay_Parms ToggleHelpDisplay_Parms;

	this->ProcessEvent ( pFnToggleHelpDisplay, &ToggleHelpDisplay_Parms, NULL );
};

// Function KFGame.KFDebugCameraHUD.DrawDebugHUDText
// [0x00024400] ( FUNC_Native )
// Parameters infos:

void AKFDebugCameraHUD::DrawDebugHUDText ( )
{
	static UFunction* pFnDrawDebugHUDText = NULL;

	if ( ! pFnDrawDebugHUDText )
		pFnDrawDebugHUDText = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraHUD.DrawDebugHUDText" );

	AKFDebugCameraHUD_execDrawDebugHUDText_Parms DrawDebugHUDText_Parms;

	pFnDrawDebugHUDText->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnDrawDebugHUDText, &DrawDebugHUDText_Parms, NULL );

	pFnDrawDebugHUDText->FunctionFlags |= 0x400;
};

// Function KFGame.KFMission_LocalizedStrings.GetCurrentSpecialEventString
// [0x00022002] 
// Parameters infos:

void UKFMission_LocalizedStrings::GetCurrentSpecialEventString ( )
{
	static UFunction* pFnGetCurrentSpecialEventString = NULL;

	if ( ! pFnGetCurrentSpecialEventString )
		pFnGetCurrentSpecialEventString = UObject::FindObject< UFunction > ( "Function KFGame.KFMission_LocalizedStrings.GetCurrentSpecialEventString" );

	UKFMission_LocalizedStrings_execGetCurrentSpecialEventString_Parms GetCurrentSpecialEventString_Parms;

	this->ProcessEvent ( pFnGetCurrentSpecialEventString, &GetCurrentSpecialEventString_Parms, NULL );
};

// Function KFGame.KFMission_LocalizedStrings.GetWeeklyOutbreakInfoByIndex
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFMission_LocalizedStrings::GetWeeklyOutbreakInfoByIndex ( )
{
	static UFunction* pFnGetWeeklyOutbreakInfoByIndex = NULL;

	if ( ! pFnGetWeeklyOutbreakInfoByIndex )
		pFnGetWeeklyOutbreakInfoByIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFMission_LocalizedStrings.GetWeeklyOutbreakInfoByIndex" );

	UKFMission_LocalizedStrings_execGetWeeklyOutbreakInfoByIndex_Parms GetWeeklyOutbreakInfoByIndex_Parms;

	pFnGetWeeklyOutbreakInfoByIndex->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetWeeklyOutbreakInfoByIndex, &GetWeeklyOutbreakInfoByIndex_Parms, NULL );

	pFnGetWeeklyOutbreakInfoByIndex->FunctionFlags |= 0x400;
};

// Function KFGame.KFMission_LocalizedStrings.GetCurrentWeeklyOutbreakInfo
// [0x00022400] ( FUNC_Native )
// Parameters infos:

void UKFMission_LocalizedStrings::GetCurrentWeeklyOutbreakInfo ( )
{
	static UFunction* pFnGetCurrentWeeklyOutbreakInfo = NULL;

	if ( ! pFnGetCurrentWeeklyOutbreakInfo )
		pFnGetCurrentWeeklyOutbreakInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFMission_LocalizedStrings.GetCurrentWeeklyOutbreakInfo" );

	UKFMission_LocalizedStrings_execGetCurrentWeeklyOutbreakInfo_Parms GetCurrentWeeklyOutbreakInfo_Parms;

	pFnGetCurrentWeeklyOutbreakInfo->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnGetCurrentWeeklyOutbreakInfo, &GetCurrentWeeklyOutbreakInfo_Parms, NULL );

	pFnGetCurrentWeeklyOutbreakInfo->FunctionFlags |= 0x400;
};

// Function KFGame.KFUIDataStore_GameResource.InitializeProviders
// [0x00022002] 
// Parameters infos:

void UKFUIDataStore_GameResource::InitializeProviders ( )
{
	static UFunction* pFnInitializeProviders = NULL;

	if ( ! pFnInitializeProviders )
		pFnInitializeProviders = UObject::FindObject< UFunction > ( "Function KFGame.KFUIDataStore_GameResource.InitializeProviders" );

	UKFUIDataStore_GameResource_execInitializeProviders_Parms InitializeProviders_Parms;

	this->ProcessEvent ( pFnInitializeProviders, &InitializeProviders_Parms, NULL );
};

// Function KFGame.KFUIDataStore_GameResource.InitializeProvidersInternal
// [0x00040401] ( FUNC_Final | FUNC_Native )
// Parameters infos:

void UKFUIDataStore_GameResource::InitializeProvidersInternal ( )
{
	static UFunction* pFnInitializeProvidersInternal = NULL;

	if ( ! pFnInitializeProvidersInternal )
		pFnInitializeProvidersInternal = UObject::FindObject< UFunction > ( "Function KFGame.KFUIDataStore_GameResource.InitializeProvidersInternal" );

	UKFUIDataStore_GameResource_execInitializeProvidersInternal_Parms InitializeProvidersInternal_Parms;

	pFnInitializeProvidersInternal->FunctionFlags |= ~0x400;

	this->ProcessEvent ( pFnInitializeProvidersInternal, &InitializeProvidersInternal_Parms, NULL );

	pFnInitializeProvidersInternal->FunctionFlags |= 0x400;
};

// Function KFGame.KFUIDataStore_GameResource.GetMapNameUsingProviderIndex
// [0x00022002] 
// Parameters infos:

void UKFUIDataStore_GameResource::GetMapNameUsingProviderIndex ( )
{
	static UFunction* pFnGetMapNameUsingProviderIndex = NULL;

	if ( ! pFnGetMapNameUsingProviderIndex )
		pFnGetMapNameUsingProviderIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFUIDataStore_GameResource.GetMapNameUsingProviderIndex" );

	UKFUIDataStore_GameResource_execGetMapNameUsingProviderIndex_Parms GetMapNameUsingProviderIndex_Parms;

	this->ProcessEvent ( pFnGetMapNameUsingProviderIndex, &GetMapNameUsingProviderIndex_Parms, NULL );
};

// Function KFGame.KFUIDataStore_GameResource.FindProviderIndexByMapName
// [0x00422002] 
// Parameters infos:

void UKFUIDataStore_GameResource::FindProviderIndexByMapName ( )
{
	static UFunction* pFnFindProviderIndexByMapName = NULL;

	if ( ! pFnFindProviderIndexByMapName )
		pFnFindProviderIndexByMapName = UObject::FindObject< UFunction > ( "Function KFGame.KFUIDataStore_GameResource.FindProviderIndexByMapName" );

	UKFUIDataStore_GameResource_execFindProviderIndexByMapName_Parms FindProviderIndexByMapName_Parms;

	this->ProcessEvent ( pFnFindProviderIndexByMapName, &FindProviderIndexByMapName_Parms, NULL );
};

// Function KFGame.KFUIDataStore_GameResource.GetMapSummaryFromMapName
// [0x00022002] 
// Parameters infos:

void UKFUIDataStore_GameResource::GetMapSummaryFromMapName ( )
{
	static UFunction* pFnGetMapSummaryFromMapName = NULL;

	if ( ! pFnGetMapSummaryFromMapName )
		pFnGetMapSummaryFromMapName = UObject::FindObject< UFunction > ( "Function KFGame.KFUIDataStore_GameResource.GetMapSummaryFromMapName" );

	UKFUIDataStore_GameResource_execGetMapSummaryFromMapName_Parms GetMapSummaryFromMapName_Parms;

	this->ProcessEvent ( pFnGetMapSummaryFromMapName, &GetMapSummaryFromMapName_Parms, NULL );
};

// Function KFGame.KFDamageType.ApplyKillResults
// [0x00022000] 
// Parameters infos:

void UKFDamageType::ApplyKillResults ( )
{
	static UFunction* pFnApplyKillResults = NULL;

	if ( ! pFnApplyKillResults )
		pFnApplyKillResults = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.ApplyKillResults" );

	UKFDamageType_execApplyKillResults_Parms ApplyKillResults_Parms;

	this->ProcessEvent ( pFnApplyKillResults, &ApplyKillResults_Parms, NULL );
};

// Function KFGame.KFDamageType.AlwaysPoisons
// [0x00022002] 
// Parameters infos:

void UKFDamageType::AlwaysPoisons ( )
{
	static UFunction* pFnAlwaysPoisons = NULL;

	if ( ! pFnAlwaysPoisons )
		pFnAlwaysPoisons = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.AlwaysPoisons" );

	UKFDamageType_execAlwaysPoisons_Parms AlwaysPoisons_Parms;

	this->ProcessEvent ( pFnAlwaysPoisons, &AlwaysPoisons_Parms, NULL );
};

// Function KFGame.KFDamageType.CheckObliterate
// [0x00022002] 
// Parameters infos:

void UKFDamageType::CheckObliterate ( )
{
	static UFunction* pFnCheckObliterate = NULL;

	if ( ! pFnCheckObliterate )
		pFnCheckObliterate = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.CheckObliterate" );

	UKFDamageType_execCheckObliterate_Parms CheckObliterate_Parms;

	this->ProcessEvent ( pFnCheckObliterate, &CheckObliterate_Parms, NULL );
};

// Function KFGame.KFDamageType.IsNotPerkBound
// [0x00022002] 
// Parameters infos:

void UKFDamageType::IsNotPerkBound ( )
{
	static UFunction* pFnIsNotPerkBound = NULL;

	if ( ! pFnIsNotPerkBound )
		pFnIsNotPerkBound = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.IsNotPerkBound" );

	UKFDamageType_execIsNotPerkBound_Parms IsNotPerkBound_Parms;

	this->ProcessEvent ( pFnIsNotPerkBound, &IsNotPerkBound_Parms, NULL );
};

// Function KFGame.KFDamageType.PlayImpactHitEffects
// [0x00026002] 
// Parameters infos:

void UKFDamageType::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.PlayImpactHitEffects" );

	UKFDamageType_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function KFGame.KFDamageType.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDamageType::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.ApplySecondaryDamage" );

	UKFDamageType_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function KFGame.KFDamageType.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDamageType::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.GetDamageeDialogID" );

	UKFDamageType_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function KFGame.KFDamageType.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDamageType::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.GetDamagerDialogID" );

	UKFDamageType_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function KFGame.KFDamageType.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDamageType::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.GetKillerDialogID" );

	UKFDamageType_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDamageType.GetPinProjectileClass
// [0x00022102] 
// Parameters infos:

void UKFDamageType::GetPinProjectileClass ( )
{
	static UFunction* pFnGetPinProjectileClass = NULL;

	if ( ! pFnGetPinProjectileClass )
		pFnGetPinProjectileClass = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.GetPinProjectileClass" );

	UKFDamageType_execGetPinProjectileClass_Parms GetPinProjectileClass_Parms;

	this->ProcessEvent ( pFnGetPinProjectileClass, &GetPinProjectileClass_Parms, NULL );
};

// Function KFGame.KFDamageType.ModifyDismembermentHitImpulse
// [0x00422100] 
// Parameters infos:

void UKFDamageType::ModifyDismembermentHitImpulse ( )
{
	static UFunction* pFnModifyDismembermentHitImpulse = NULL;

	if ( ! pFnModifyDismembermentHitImpulse )
		pFnModifyDismembermentHitImpulse = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.ModifyDismembermentHitImpulse" );

	UKFDamageType_execModifyDismembermentHitImpulse_Parms ModifyDismembermentHitImpulse_Parms;

	this->ProcessEvent ( pFnModifyDismembermentHitImpulse, &ModifyDismembermentHitImpulse_Parms, NULL );
};

// Function KFGame.KFDamageType.GetBoneToDismember
// [0x00422100] 
// Parameters infos:

void UKFDamageType::GetBoneToDismember ( )
{
	static UFunction* pFnGetBoneToDismember = NULL;

	if ( ! pFnGetBoneToDismember )
		pFnGetBoneToDismember = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.GetBoneToDismember" );

	UKFDamageType_execGetBoneToDismember_Parms GetBoneToDismember_Parms;

	this->ProcessEvent ( pFnGetBoneToDismember, &GetBoneToDismember_Parms, NULL );
};

// Function KFGame.KFDamageType.CanDismemberHitZoneWhileAlive
// [0x00022102] 
// Parameters infos:

void UKFDamageType::CanDismemberHitZoneWhileAlive ( )
{
	static UFunction* pFnCanDismemberHitZoneWhileAlive = NULL;

	if ( ! pFnCanDismemberHitZoneWhileAlive )
		pFnCanDismemberHitZoneWhileAlive = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.CanDismemberHitZoneWhileAlive" );

	UKFDamageType_execCanDismemberHitZoneWhileAlive_Parms CanDismemberHitZoneWhileAlive_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZoneWhileAlive, &CanDismemberHitZoneWhileAlive_Parms, NULL );
};

// Function KFGame.KFDamageType.CanDismemberHitZone
// [0x00022100] 
// Parameters infos:

void UKFDamageType::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.CanDismemberHitZone" );

	UKFDamageType_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function KFGame.KFDamageType.GetOnDeathGoreScale
// [0x00022002] 
// Parameters infos:

void UKFDamageType::GetOnDeathGoreScale ( )
{
	static UFunction* pFnGetOnDeathGoreScale = NULL;

	if ( ! pFnGetOnDeathGoreScale )
		pFnGetOnDeathGoreScale = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.GetOnDeathGoreScale" );

	UKFDamageType_execGetOnDeathGoreScale_Parms GetOnDeathGoreScale_Parms;

	this->ProcessEvent ( pFnGetOnDeathGoreScale, &GetOnDeathGoreScale_Parms, NULL );
};

// Function KFGame.KFDamageType.GetGoreDamageScale
// [0x00022002] 
// Parameters infos:

void UKFDamageType::GetGoreDamageScale ( )
{
	static UFunction* pFnGetGoreDamageScale = NULL;

	if ( ! pFnGetGoreDamageScale )
		pFnGetGoreDamageScale = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.GetGoreDamageScale" );

	UKFDamageType_execGetGoreDamageScale_Parms GetGoreDamageScale_Parms;

	this->ProcessEvent ( pFnGetGoreDamageScale, &GetGoreDamageScale_Parms, NULL );
};

// Function KFGame.KFDamageType.GetBloodScale
// [0x00022102] 
// Parameters infos:

void UKFDamageType::GetBloodScale ( )
{
	static UFunction* pFnGetBloodScale = NULL;

	if ( ! pFnGetBloodScale )
		pFnGetBloodScale = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.GetBloodScale" );

	UKFDamageType_execGetBloodScale_Parms GetBloodScale_Parms;

	this->ProcessEvent ( pFnGetBloodScale, &GetBloodScale_Parms, NULL );
};

// Function KFGame.KFDamageType.AddBloodSpread
// [0x00C22102] 
// Parameters infos:

void UKFDamageType::AddBloodSpread ( )
{
	static UFunction* pFnAddBloodSpread = NULL;

	if ( ! pFnAddBloodSpread )
		pFnAddBloodSpread = UObject::FindObject< UFunction > ( "Function KFGame.KFDamageType.AddBloodSpread" );

	UKFDamageType_execAddBloodSpread_Parms AddBloodSpread_Parms;

	this->ProcessEvent ( pFnAddBloodSpread, &AddBloodSpread_Parms, NULL );
};

// Function KFGame.KFInterface_DamageCauser.GetIncapMod
// [0x00020000] 
// Parameters infos:

void UKFInterface_DamageCauser::GetIncapMod ( )
{
	static UFunction* pFnGetIncapMod = NULL;

	if ( ! pFnGetIncapMod )
		pFnGetIncapMod = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_DamageCauser.GetIncapMod" );

	UKFInterface_DamageCauser_execGetIncapMod_Parms GetIncapMod_Parms;

	this->ProcessEvent ( pFnGetIncapMod, &GetIncapMod_Parms, NULL );
};

// Function KFGame.KFAffliction_EMP.SetEMPMatParam
// [0x00080002] 
// Parameters infos:

void UKFAffliction_EMP::SetEMPMatParam ( )
{
	static UFunction* pFnSetEMPMatParam = NULL;

	if ( ! pFnSetEMPMatParam )
		pFnSetEMPMatParam = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMP.SetEMPMatParam" );

	UKFAffliction_EMP_execSetEMPMatParam_Parms SetEMPMatParam_Parms;

	this->ProcessEvent ( pFnSetEMPMatParam, &SetEMPMatParam_Parms, NULL );
};

// Function KFGame.KFAffliction_EMP.ToggleEffects
// [0x00024002] 
// Parameters infos:

void UKFAffliction_EMP::ToggleEffects ( )
{
	static UFunction* pFnToggleEffects = NULL;

	if ( ! pFnToggleEffects )
		pFnToggleEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMP.ToggleEffects" );

	UKFAffliction_EMP_execToggleEffects_Parms ToggleEffects_Parms;

	this->ProcessEvent ( pFnToggleEffects, &ToggleEffects_Parms, NULL );
};

// Function KFGame.KFAffliction_EMP.SetEMPPanicked
// [0x00020002] 
// Parameters infos:

void UKFAffliction_EMP::SetEMPPanicked ( )
{
	static UFunction* pFnSetEMPPanicked = NULL;

	if ( ! pFnSetEMPPanicked )
		pFnSetEMPPanicked = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMP.SetEMPPanicked" );

	UKFAffliction_EMP_execSetEMPPanicked_Parms SetEMPPanicked_Parms;

	this->ProcessEvent ( pFnSetEMPPanicked, &SetEMPPanicked_Parms, NULL );
};

// Function KFGame.KFAffliction_EMP.ShutDown
// [0x00020002] 
// Parameters infos:

void UKFAffliction_EMP::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMP.ShutDown" );

	UKFAffliction_EMP_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function KFGame.KFAffliction_EMP.DeActivate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_EMP::DeActivate ( )
{
	static UFunction* pFnDeActivate = NULL;

	if ( ! pFnDeActivate )
		pFnDeActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMP.DeActivate" );

	UKFAffliction_EMP_execDeActivate_Parms DeActivate_Parms;

	this->ProcessEvent ( pFnDeActivate, &DeActivate_Parms, NULL );
};

// Function KFGame.KFAffliction_EMP.Activate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_EMP::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMP.Activate" );

	UKFAffliction_EMP_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAfflictionAdvanced.ShutDown
// [0x00020002] 
// Parameters infos:

void UKFAfflictionAdvanced::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionAdvanced.ShutDown" );

	UKFAfflictionAdvanced_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function KFGame.KFAfflictionAdvanced.DeActivate
// [0x00020002] 
// Parameters infos:

void UKFAfflictionAdvanced::DeActivate ( )
{
	static UFunction* pFnDeActivate = NULL;

	if ( ! pFnDeActivate )
		pFnDeActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionAdvanced.DeActivate" );

	UKFAfflictionAdvanced_execDeActivate_Parms DeActivate_Parms;

	this->ProcessEvent ( pFnDeActivate, &DeActivate_Parms, NULL );
};

// Function KFGame.KFAfflictionAdvanced.Activate
// [0x00020002] 
// Parameters infos:

void UKFAfflictionAdvanced::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionAdvanced.Activate" );

	UKFAfflictionAdvanced_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAfflictionAdvanced.Init
// [0x00020002] 
// Parameters infos:

void UKFAfflictionAdvanced::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFAfflictionAdvanced.Init" );

	UKFAfflictionAdvanced_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.ShutDown
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Fire::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.ShutDown" );

	UKFAffliction_Fire_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.UpdateBurnedMatParam
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Fire::UpdateBurnedMatParam ( )
{
	static UFunction* pFnUpdateBurnedMatParam = NULL;

	if ( ! pFnUpdateBurnedMatParam )
		pFnUpdateBurnedMatParam = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.UpdateBurnedMatParam" );

	UKFAffliction_Fire_execUpdateBurnedMatParam_Parms UpdateBurnedMatParam_Parms;

	this->ProcessEvent ( pFnUpdateBurnedMatParam, &UpdateBurnedMatParam_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.ToggleEffects
// [0x00024002] 
// Parameters infos:

void UKFAffliction_Fire::ToggleEffects ( )
{
	static UFunction* pFnToggleEffects = NULL;

	if ( ! pFnToggleEffects )
		pFnToggleEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.ToggleEffects" );

	UKFAffliction_Fire_execToggleEffects_Parms ToggleEffects_Parms;

	this->ProcessEvent ( pFnToggleEffects, &ToggleEffects_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.SetMaterialParameter
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Fire::SetMaterialParameter ( )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.SetMaterialParameter" );

	UKFAffliction_Fire_execSetMaterialParameter_Parms SetMaterialParameter_Parms;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.SetFirePanicked
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Fire::SetFirePanicked ( )
{
	static UFunction* pFnSetFirePanicked = NULL;

	if ( ! pFnSetFirePanicked )
		pFnSetFirePanicked = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.SetFirePanicked" );

	UKFAffliction_Fire_execSetFirePanicked_Parms SetFirePanicked_Parms;

	this->ProcessEvent ( pFnSetFirePanicked, &SetFirePanicked_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFAffliction_Fire::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.Tick" );

	UKFAffliction_Fire_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.DeActivate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Fire::DeActivate ( )
{
	static UFunction* pFnDeActivate = NULL;

	if ( ! pFnDeActivate )
		pFnDeActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.DeActivate" );

	UKFAffliction_Fire_execDeActivate_Parms DeActivate_Parms;

	this->ProcessEvent ( pFnDeActivate, &DeActivate_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.Activate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Fire::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.Activate" );

	UKFAffliction_Fire_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAffliction_Fire.Init
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Fire::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Fire.Init" );

	UKFAffliction_Fire_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFAffliction_HeavyRecovery.Activate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_HeavyRecovery::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_HeavyRecovery.Activate" );

	UKFAffliction_HeavyRecovery_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAffliction_MediumRecovery.Activate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_MediumRecovery::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_MediumRecovery.Activate" );

	UKFAffliction_MediumRecovery_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAffliction_Stumble.GetSpecialMoveFlags
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Stumble::GetSpecialMoveFlags ( )
{
	static UFunction* pFnGetSpecialMoveFlags = NULL;

	if ( ! pFnGetSpecialMoveFlags )
		pFnGetSpecialMoveFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Stumble.GetSpecialMoveFlags" );

	UKFAffliction_Stumble_execGetSpecialMoveFlags_Parms GetSpecialMoveFlags_Parms;

	this->ProcessEvent ( pFnGetSpecialMoveFlags, &GetSpecialMoveFlags_Parms, NULL );
};

// Function KFGame.KFAffliction_Poison.ToggleEffects
// [0x00024002] 
// Parameters infos:

void UKFAffliction_Poison::ToggleEffects ( )
{
	static UFunction* pFnToggleEffects = NULL;

	if ( ! pFnToggleEffects )
		pFnToggleEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Poison.ToggleEffects" );

	UKFAffliction_Poison_execToggleEffects_Parms ToggleEffects_Parms;

	this->ProcessEvent ( pFnToggleEffects, &ToggleEffects_Parms, NULL );
};

// Function KFGame.KFAffliction_Poison.SetPoisoned
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Poison::SetPoisoned ( )
{
	static UFunction* pFnSetPoisoned = NULL;

	if ( ! pFnSetPoisoned )
		pFnSetPoisoned = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Poison.SetPoisoned" );

	UKFAffliction_Poison_execSetPoisoned_Parms SetPoisoned_Parms;

	this->ProcessEvent ( pFnSetPoisoned, &SetPoisoned_Parms, NULL );
};

// Function KFGame.KFAffliction_Poison.DeActivate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Poison::DeActivate ( )
{
	static UFunction* pFnDeActivate = NULL;

	if ( ! pFnDeActivate )
		pFnDeActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Poison.DeActivate" );

	UKFAffliction_Poison_execDeActivate_Parms DeActivate_Parms;

	this->ProcessEvent ( pFnDeActivate, &DeActivate_Parms, NULL );
};

// Function KFGame.KFAffliction_Poison.Activate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Poison::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Poison.Activate" );

	UKFAffliction_Poison_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAffliction_Snare.GetSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Snare::GetSpeedModifier ( )
{
	static UFunction* pFnGetSpeedModifier = NULL;

	if ( ! pFnGetSpeedModifier )
		pFnGetSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Snare.GetSpeedModifier" );

	UKFAffliction_Snare_execGetSpeedModifier_Parms GetSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetSpeedModifier, &GetSpeedModifier_Parms, NULL );
};

// Function KFGame.KFAffliction_Snare.DeActivate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Snare::DeActivate ( )
{
	static UFunction* pFnDeActivate = NULL;

	if ( ! pFnDeActivate )
		pFnDeActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Snare.DeActivate" );

	UKFAffliction_Snare_execDeActivate_Parms DeActivate_Parms;

	this->ProcessEvent ( pFnDeActivate, &DeActivate_Parms, NULL );
};

// Function KFGame.KFAffliction_Snare.Activate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Snare::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Snare.Activate" );

	UKFAffliction_Snare_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAffliction_Knockdown.ActivateKnockdown
// [0x00880002] 
// Parameters infos:

void UKFAffliction_Knockdown::ActivateKnockdown ( )
{
	static UFunction* pFnActivateKnockdown = NULL;

	if ( ! pFnActivateKnockdown )
		pFnActivateKnockdown = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Knockdown.ActivateKnockdown" );

	UKFAffliction_Knockdown_execActivateKnockdown_Parms ActivateKnockdown_Parms;

	this->ProcessEvent ( pFnActivateKnockdown, &ActivateKnockdown_Parms, NULL );
};

// Function KFGame.KFAffliction_Knockdown.Activate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Knockdown::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Knockdown.Activate" );

	UKFAffliction_Knockdown_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.ShutDown
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Microwave::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.ShutDown" );

	UKFAffliction_Microwave_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.SetMicrowaveSteamEffects
// [0x00080002] 
// Parameters infos:

void UKFAffliction_Microwave::SetMicrowaveSteamEffects ( )
{
	static UFunction* pFnSetMicrowaveSteamEffects = NULL;

	if ( ! pFnSetMicrowaveSteamEffects )
		pFnSetMicrowaveSteamEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.SetMicrowaveSteamEffects" );

	UKFAffliction_Microwave_execSetMicrowaveSteamEffects_Parms SetMicrowaveSteamEffects_Parms;

	this->ProcessEvent ( pFnSetMicrowaveSteamEffects, &SetMicrowaveSteamEffects_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.SetMaterialParameter
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Microwave::SetMaterialParameter ( )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.SetMaterialParameter" );

	UKFAffliction_Microwave_execSetMaterialParameter_Parms SetMaterialParameter_Parms;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.UpdateBurnedMatParam
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Microwave::UpdateBurnedMatParam ( )
{
	static UFunction* pFnUpdateBurnedMatParam = NULL;

	if ( ! pFnUpdateBurnedMatParam )
		pFnUpdateBurnedMatParam = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.UpdateBurnedMatParam" );

	UKFAffliction_Microwave_execUpdateBurnedMatParam_Parms UpdateBurnedMatParam_Parms;

	this->ProcessEvent ( pFnUpdateBurnedMatParam, &UpdateBurnedMatParam_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.UpdateMicrowaveMatParam
// [0x00080002] 
// Parameters infos:

void UKFAffliction_Microwave::UpdateMicrowaveMatParam ( )
{
	static UFunction* pFnUpdateMicrowaveMatParam = NULL;

	if ( ! pFnUpdateMicrowaveMatParam )
		pFnUpdateMicrowaveMatParam = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.UpdateMicrowaveMatParam" );

	UKFAffliction_Microwave_execUpdateMicrowaveMatParam_Parms UpdateMicrowaveMatParam_Parms;

	this->ProcessEvent ( pFnUpdateMicrowaveMatParam, &UpdateMicrowaveMatParam_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFAffliction_Microwave::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.Tick" );

	UKFAffliction_Microwave_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.SetMicrowavePanicked
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Microwave::SetMicrowavePanicked ( )
{
	static UFunction* pFnSetMicrowavePanicked = NULL;

	if ( ! pFnSetMicrowavePanicked )
		pFnSetMicrowavePanicked = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.SetMicrowavePanicked" );

	UKFAffliction_Microwave_execSetMicrowavePanicked_Parms SetMicrowavePanicked_Parms;

	this->ProcessEvent ( pFnSetMicrowavePanicked, &SetMicrowavePanicked_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.DeActivate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Microwave::DeActivate ( )
{
	static UFunction* pFnDeActivate = NULL;

	if ( ! pFnDeActivate )
		pFnDeActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.DeActivate" );

	UKFAffliction_Microwave_execDeActivate_Parms DeActivate_Parms;

	this->ProcessEvent ( pFnDeActivate, &DeActivate_Parms, NULL );
};

// Function KFGame.KFAffliction_Microwave.Activate
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Microwave::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Microwave.Activate" );

	UKFAffliction_Microwave_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.SetMaterialParameter
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::SetMaterialParameter ( )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.SetMaterialParameter" );

	UKFAffliction_Bleed_execSetMaterialParameter_Parms SetMaterialParameter_Parms;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.CalcDeflate
// [0x00080002] 
// Parameters infos:

void UKFAffliction_Bleed::CalcDeflate ( )
{
	static UFunction* pFnCalcDeflate = NULL;

	if ( ! pFnCalcDeflate )
		pFnCalcDeflate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.CalcDeflate" );

	UKFAffliction_Bleed_execCalcDeflate_Parms CalcDeflate_Parms;

	this->ProcessEvent ( pFnCalcDeflate, &CalcDeflate_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.CalcInflate
// [0x00080002] 
// Parameters infos:

void UKFAffliction_Bleed::CalcInflate ( )
{
	static UFunction* pFnCalcInflate = NULL;

	if ( ! pFnCalcInflate )
		pFnCalcInflate = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.CalcInflate" );

	UKFAffliction_Bleed_execCalcInflate_Parms CalcInflate_Parms;

	this->ProcessEvent ( pFnCalcInflate, &CalcInflate_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.CheckStateChange
// [0x00080002] 
// Parameters infos:

void UKFAffliction_Bleed::CheckStateChange ( )
{
	static UFunction* pFnCheckStateChange = NULL;

	if ( ! pFnCheckStateChange )
		pFnCheckStateChange = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.CheckStateChange" );

	UKFAffliction_Bleed_execCheckStateChange_Parms CheckStateChange_Parms;

	this->ProcessEvent ( pFnCheckStateChange, &CheckStateChange_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.UpdateDeflateMaterialParam
// [0x00080002] 
// Parameters infos:

void UKFAffliction_Bleed::UpdateDeflateMaterialParam ( )
{
	static UFunction* pFnUpdateDeflateMaterialParam = NULL;

	if ( ! pFnUpdateDeflateMaterialParam )
		pFnUpdateDeflateMaterialParam = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.UpdateDeflateMaterialParam" );

	UKFAffliction_Bleed_execUpdateDeflateMaterialParam_Parms UpdateDeflateMaterialParam_Parms;

	this->ProcessEvent ( pFnUpdateDeflateMaterialParam, &UpdateDeflateMaterialParam_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.Tick
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.Tick" );

	UKFAffliction_Bleed_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.Accrue
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::Accrue ( )
{
	static UFunction* pFnAccrue = NULL;

	if ( ! pFnAccrue )
		pFnAccrue = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.Accrue" );

	UKFAffliction_Bleed_execAccrue_Parms Accrue_Parms;

	this->ProcessEvent ( pFnAccrue, &Accrue_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.GetAttackSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::GetAttackSpeedModifier ( )
{
	static UFunction* pFnGetAttackSpeedModifier = NULL;

	if ( ! pFnGetAttackSpeedModifier )
		pFnGetAttackSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.GetAttackSpeedModifier" );

	UKFAffliction_Bleed_execGetAttackSpeedModifier_Parms GetAttackSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetAttackSpeedModifier, &GetAttackSpeedModifier_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.GetSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::GetSpeedModifier ( )
{
	static UFunction* pFnGetSpeedModifier = NULL;

	if ( ! pFnGetSpeedModifier )
		pFnGetSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.GetSpeedModifier" );

	UKFAffliction_Bleed_execGetSpeedModifier_Parms GetSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetSpeedModifier, &GetSpeedModifier_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.GetDamageModifier
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::GetDamageModifier ( )
{
	static UFunction* pFnGetDamageModifier = NULL;

	if ( ! pFnGetDamageModifier )
		pFnGetDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.GetDamageModifier" );

	UKFAffliction_Bleed_execGetDamageModifier_Parms GetDamageModifier_Parms;

	this->ProcessEvent ( pFnGetDamageModifier, &GetDamageModifier_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.GetStunModifier
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::GetStunModifier ( )
{
	static UFunction* pFnGetStunModifier = NULL;

	if ( ! pFnGetStunModifier )
		pFnGetStunModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.GetStunModifier" );

	UKFAffliction_Bleed_execGetStunModifier_Parms GetStunModifier_Parms;

	this->ProcessEvent ( pFnGetStunModifier, &GetStunModifier_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.GetStumbleModifier
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::GetStumbleModifier ( )
{
	static UFunction* pFnGetStumbleModifier = NULL;

	if ( ! pFnGetStumbleModifier )
		pFnGetStumbleModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.GetStumbleModifier" );

	UKFAffliction_Bleed_execGetStumbleModifier_Parms GetStumbleModifier_Parms;

	this->ProcessEvent ( pFnGetStumbleModifier, &GetStumbleModifier_Parms, NULL );
};

// Function KFGame.KFAffliction_Bleed.GetKnockdownModifier
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Bleed::GetKnockdownModifier ( )
{
	static UFunction* pFnGetKnockdownModifier = NULL;

	if ( ! pFnGetKnockdownModifier )
		pFnGetKnockdownModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_Bleed.GetKnockdownModifier" );

	UKFAffliction_Bleed_execGetKnockdownModifier_Parms GetKnockdownModifier_Parms;

	this->ProcessEvent ( pFnGetKnockdownModifier, &GetKnockdownModifier_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayBloodSpraySound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayBloodSpraySound ( )
{
	static UFunction* pFnPlayBloodSpraySound = NULL;

	if ( ! pFnPlayBloodSpraySound )
		pFnPlayBloodSpraySound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayBloodSpraySound" );

	UKFPawnSoundGroup_execPlayBloodSpraySound_Parms PlayBloodSpraySound_Parms;

	this->ProcessEvent ( pFnPlayBloodSpraySound, &PlayBloodSpraySound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayObliterationSound
// [0x00024002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayObliterationSound ( )
{
	static UFunction* pFnPlayObliterationSound = NULL;

	if ( ! pFnPlayObliterationSound )
		pFnPlayObliterationSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayObliterationSound" );

	UKFPawnSoundGroup_execPlayObliterationSound_Parms PlayObliterationSound_Parms;

	this->ProcessEvent ( pFnPlayObliterationSound, &PlayObliterationSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.ShouldPlayCleaveSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::ShouldPlayCleaveSound ( )
{
	static UFunction* pFnShouldPlayCleaveSound = NULL;

	if ( ! pFnShouldPlayCleaveSound )
		pFnShouldPlayCleaveSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.ShouldPlayCleaveSound" );

	UKFPawnSoundGroup_execShouldPlayCleaveSound_Parms ShouldPlayCleaveSound_Parms;

	this->ProcessEvent ( pFnShouldPlayCleaveSound, &ShouldPlayCleaveSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayCleaveSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayCleaveSound ( )
{
	static UFunction* pFnPlayCleaveSound = NULL;

	if ( ! pFnPlayCleaveSound )
		pFnPlayCleaveSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayCleaveSound" );

	UKFPawnSoundGroup_execPlayCleaveSound_Parms PlayCleaveSound_Parms;

	this->ProcessEvent ( pFnPlayCleaveSound, &PlayCleaveSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayHeadPopSounds
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayHeadPopSounds ( )
{
	static UFunction* pFnPlayHeadPopSounds = NULL;

	if ( ! pFnPlayHeadPopSounds )
		pFnPlayHeadPopSounds = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayHeadPopSounds" );

	UKFPawnSoundGroup_execPlayHeadPopSounds_Parms PlayHeadPopSounds_Parms;

	this->ProcessEvent ( pFnPlayHeadPopSounds, &PlayHeadPopSounds_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayGibletCollisionSound
// [0x00020102] 
// Parameters infos:

void UKFPawnSoundGroup::PlayGibletCollisionSound ( )
{
	static UFunction* pFnPlayGibletCollisionSound = NULL;

	if ( ! pFnPlayGibletCollisionSound )
		pFnPlayGibletCollisionSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayGibletCollisionSound" );

	UKFPawnSoundGroup_execPlayGibletCollisionSound_Parms PlayGibletCollisionSound_Parms;

	this->ProcessEvent ( pFnPlayGibletCollisionSound, &PlayGibletCollisionSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayRigidBodyCollisionSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayRigidBodyCollisionSound ( )
{
	static UFunction* pFnPlayRigidBodyCollisionSound = NULL;

	if ( ! pFnPlayRigidBodyCollisionSound )
		pFnPlayRigidBodyCollisionSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayRigidBodyCollisionSound" );

	UKFPawnSoundGroup_execPlayRigidBodyCollisionSound_Parms PlayRigidBodyCollisionSound_Parms;

	this->ProcessEvent ( pFnPlayRigidBodyCollisionSound, &PlayRigidBodyCollisionSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayDismembermentSounds
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayDismembermentSounds ( )
{
	static UFunction* pFnPlayDismembermentSounds = NULL;

	if ( ! pFnPlayDismembermentSounds )
		pFnPlayDismembermentSounds = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayDismembermentSounds" );

	UKFPawnSoundGroup_execPlayDismembermentSounds_Parms PlayDismembermentSounds_Parms;

	this->ProcessEvent ( pFnPlayDismembermentSounds, &PlayDismembermentSounds_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.GetLandSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::GetLandSound ( )
{
	static UFunction* pFnGetLandSound = NULL;

	if ( ! pFnGetLandSound )
		pFnGetLandSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.GetLandSound" );

	UKFPawnSoundGroup_execGetLandSound_Parms GetLandSound_Parms;

	this->ProcessEvent ( pFnGetLandSound, &GetLandSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.GetJumpSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::GetJumpSound ( )
{
	static UFunction* pFnGetJumpSound = NULL;

	if ( ! pFnGetJumpSound )
		pFnGetJumpSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.GetJumpSound" );

	UKFPawnSoundGroup_execGetJumpSound_Parms GetJumpSound_Parms;

	this->ProcessEvent ( pFnGetJumpSound, &GetJumpSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.GetSprintingFootstepSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::GetSprintingFootstepSound ( )
{
	static UFunction* pFnGetSprintingFootstepSound = NULL;

	if ( ! pFnGetSprintingFootstepSound )
		pFnGetSprintingFootstepSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.GetSprintingFootstepSound" );

	UKFPawnSoundGroup_execGetSprintingFootstepSound_Parms GetSprintingFootstepSound_Parms;

	this->ProcessEvent ( pFnGetSprintingFootstepSound, &GetSprintingFootstepSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.GetFootstepSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::GetFootstepSound ( )
{
	static UFunction* pFnGetFootstepSound = NULL;

	if ( ! pFnGetFootstepSound )
		pFnGetFootstepSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.GetFootstepSound" );

	UKFPawnSoundGroup_execGetFootstepSound_Parms GetFootstepSound_Parms;

	this->ProcessEvent ( pFnGetFootstepSound, &GetFootstepSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayEntranceSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayEntranceSound ( )
{
	static UFunction* pFnPlayEntranceSound = NULL;

	if ( ! pFnPlayEntranceSound )
		pFnPlayEntranceSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayEntranceSound" );

	UKFPawnSoundGroup_execPlayEntranceSound_Parms PlayEntranceSound_Parms;

	this->ProcessEvent ( pFnPlayEntranceSound, &PlayEntranceSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayGaspSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayGaspSound ( )
{
	static UFunction* pFnPlayGaspSound = NULL;

	if ( ! pFnPlayGaspSound )
		pFnPlayGaspSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayGaspSound" );

	UKFPawnSoundGroup_execPlayGaspSound_Parms PlayGaspSound_Parms;

	this->ProcessEvent ( pFnPlayGaspSound, &PlayGaspSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayGibSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayGibSound ( )
{
	static UFunction* pFnPlayGibSound = NULL;

	if ( ! pFnPlayGibSound )
		pFnPlayGibSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayGibSound" );

	UKFPawnSoundGroup_execPlayGibSound_Parms PlayGibSound_Parms;

	this->ProcessEvent ( pFnPlayGibSound, &PlayGibSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayBleedoutDyingSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayBleedoutDyingSound ( )
{
	static UFunction* pFnPlayBleedoutDyingSound = NULL;

	if ( ! pFnPlayBleedoutDyingSound )
		pFnPlayBleedoutDyingSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayBleedoutDyingSound" );

	UKFPawnSoundGroup_execPlayBleedoutDyingSound_Parms PlayBleedoutDyingSound_Parms;

	this->ProcessEvent ( pFnPlayBleedoutDyingSound, &PlayBleedoutDyingSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayMouthlessDyingSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayMouthlessDyingSound ( )
{
	static UFunction* pFnPlayMouthlessDyingSound = NULL;

	if ( ! pFnPlayMouthlessDyingSound )
		pFnPlayMouthlessDyingSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayMouthlessDyingSound" );

	UKFPawnSoundGroup_execPlayMouthlessDyingSound_Parms PlayMouthlessDyingSound_Parms;

	this->ProcessEvent ( pFnPlayMouthlessDyingSound, &PlayMouthlessDyingSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayDyingSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayDyingSound ( )
{
	static UFunction* pFnPlayDyingSound = NULL;

	if ( ! pFnPlayDyingSound )
		pFnPlayDyingSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayDyingSound" );

	UKFPawnSoundGroup_execPlayDyingSound_Parms PlayDyingSound_Parms;

	this->ProcessEvent ( pFnPlayDyingSound, &PlayDyingSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayPainSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayPainSound ( )
{
	static UFunction* pFnPlayPainSound = NULL;

	if ( ! pFnPlayPainSound )
		pFnPlayPainSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayPainSound" );

	UKFPawnSoundGroup_execPlayPainSound_Parms PlayPainSound_Parms;

	this->ProcessEvent ( pFnPlayPainSound, &PlayPainSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayFallingDamageLandSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayFallingDamageLandSound ( )
{
	static UFunction* pFnPlayFallingDamageLandSound = NULL;

	if ( ! pFnPlayFallingDamageLandSound )
		pFnPlayFallingDamageLandSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayFallingDamageLandSound" );

	UKFPawnSoundGroup_execPlayFallingDamageLandSound_Parms PlayFallingDamageLandSound_Parms;

	this->ProcessEvent ( pFnPlayFallingDamageLandSound, &PlayFallingDamageLandSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayLandSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayLandSound ( )
{
	static UFunction* pFnPlayLandSound = NULL;

	if ( ! pFnPlayLandSound )
		pFnPlayLandSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayLandSound" );

	UKFPawnSoundGroup_execPlayLandSound_Parms PlayLandSound_Parms;

	this->ProcessEvent ( pFnPlayLandSound, &PlayLandSound_Parms, NULL );
};

// Function KFGame.KFPawnSoundGroup.PlayJumpSound
// [0x00020002] 
// Parameters infos:

void UKFPawnSoundGroup::PlayJumpSound ( )
{
	static UFunction* pFnPlayJumpSound = NULL;

	if ( ! pFnPlayJumpSound )
		pFnPlayJumpSound = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnSoundGroup.PlayJumpSound" );

	UKFPawnSoundGroup_execPlayJumpSound_Parms PlayJumpSound_Parms;

	this->ProcessEvent ( pFnPlayJumpSound, &PlayJumpSound_Parms, NULL );
};

// Function KFGame.KFGiblet.RigidBodyCollision
// [0x00C20902] ( FUNC_Event )
// Parameters infos:

void AKFGiblet::eventRigidBodyCollision ( )
{
	static UFunction* pFnRigidBodyCollision = NULL;

	if ( ! pFnRigidBodyCollision )
		pFnRigidBodyCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFGiblet.RigidBodyCollision" );

	AKFGiblet_eventRigidBodyCollision_Parms RigidBodyCollision_Parms;

	this->ProcessEvent ( pFnRigidBodyCollision, &RigidBodyCollision_Parms, NULL );
};

// Function KFGame.KFGiblet.SetMesh
// [0x00020102] 
// Parameters infos:

void AKFGiblet::SetMesh ( )
{
	static UFunction* pFnSetMesh = NULL;

	if ( ! pFnSetMesh )
		pFnSetMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFGiblet.SetMesh" );

	AKFGiblet_execSetMesh_Parms SetMesh_Parms;

	this->ProcessEvent ( pFnSetMesh, &SetMesh_Parms, NULL );
};

// Function KFGame.KFGiblet.LifespanTimer
// [0x00020102] 
// Parameters infos:

void AKFGiblet::LifespanTimer ( )
{
	static UFunction* pFnLifespanTimer = NULL;

	if ( ! pFnLifespanTimer )
		pFnLifespanTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFGiblet.LifespanTimer" );

	AKFGiblet_execLifespanTimer_Parms LifespanTimer_Parms;

	this->ProcessEvent ( pFnLifespanTimer, &LifespanTimer_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.PlayHitReactionAnim
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::PlayHitReactionAnim ( )
{
	static UFunction* pFnPlayHitReactionAnim = NULL;

	if ( ! pFnPlayHitReactionAnim )
		pFnPlayHitReactionAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.PlayHitReactionAnim" );

	UKFPawnAnimInfo_execPlayHitReactionAnim_Parms PlayHitReactionAnim_Parms;

	this->ProcessEvent ( pFnPlayHitReactionAnim, &PlayHitReactionAnim_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.EvaulateDeathAnimList
// [0x00420002] 
// Parameters infos:

void UKFPawnAnimInfo::EvaulateDeathAnimList ( )
{
	static UFunction* pFnEvaulateDeathAnimList = NULL;

	if ( ! pFnEvaulateDeathAnimList )
		pFnEvaulateDeathAnimList = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.EvaulateDeathAnimList" );

	UKFPawnAnimInfo_execEvaulateDeathAnimList_Parms EvaulateDeathAnimList_Parms;

	this->ProcessEvent ( pFnEvaulateDeathAnimList, &EvaulateDeathAnimList_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.ChooseDeathAnimation
// [0x00024002] 
// Parameters infos:

void UKFPawnAnimInfo::ChooseDeathAnimation ( )
{
	static UFunction* pFnChooseDeathAnimation = NULL;

	if ( ! pFnChooseDeathAnimation )
		pFnChooseDeathAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.ChooseDeathAnimation" );

	UKFPawnAnimInfo_execChooseDeathAnimation_Parms ChooseDeathAnimation_Parms;

	this->ProcessEvent ( pFnChooseDeathAnimation, &ChooseDeathAnimation_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.AllowAttackByDifficulty
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::AllowAttackByDifficulty ( )
{
	static UFunction* pFnAllowAttackByDifficulty = NULL;

	if ( ! pFnAllowAttackByDifficulty )
		pFnAllowAttackByDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.AllowAttackByDifficulty" );

	UKFPawnAnimInfo_execAllowAttackByDifficulty_Parms AllowAttackByDifficulty_Parms;

	this->ProcessEvent ( pFnAllowAttackByDifficulty, &AllowAttackByDifficulty_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.AllowAttackByMovement
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::AllowAttackByMovement ( )
{
	static UFunction* pFnAllowAttackByMovement = NULL;

	if ( ! pFnAllowAttackByMovement )
		pFnAllowAttackByMovement = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.AllowAttackByMovement" );

	UKFPawnAnimInfo_execAllowAttackByMovement_Parms AllowAttackByMovement_Parms;

	this->ProcessEvent ( pFnAllowAttackByMovement, &AllowAttackByMovement_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.SetDifficultyValues
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::SetDifficultyValues ( )
{
	static UFunction* pFnSetDifficultyValues = NULL;

	if ( ! pFnSetDifficultyValues )
		pFnSetDifficultyValues = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.SetDifficultyValues" );

	UKFPawnAnimInfo_execSetDifficultyValues_Parms SetDifficultyValues_Parms;

	this->ProcessEvent ( pFnSetDifficultyValues, &SetDifficultyValues_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.GetAttackRangeExtent
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::GetAttackRangeExtent ( )
{
	static UFunction* pFnGetAttackRangeExtent = NULL;

	if ( ! pFnGetAttackRangeExtent )
		pFnGetAttackRangeExtent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.GetAttackRangeExtent" );

	UKFPawnAnimInfo_execGetAttackRangeExtent_Parms GetAttackRangeExtent_Parms;

	this->ProcessEvent ( pFnGetAttackRangeExtent, &GetAttackRangeExtent_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.GetAttackRangeByName
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::GetAttackRangeByName ( )
{
	static UFunction* pFnGetAttackRangeByName = NULL;

	if ( ! pFnGetAttackRangeByName )
		pFnGetAttackRangeByName = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.GetAttackRangeByName" );

	UKFPawnAnimInfo_execGetAttackRangeByName_Parms GetAttackRangeByName_Parms;

	this->ProcessEvent ( pFnGetAttackRangeByName, &GetAttackRangeByName_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.IsAttackOnCooldown
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::IsAttackOnCooldown ( )
{
	static UFunction* pFnIsAttackOnCooldown = NULL;

	if ( ! pFnIsAttackOnCooldown )
		pFnIsAttackOnCooldown = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.IsAttackOnCooldown" );

	UKFPawnAnimInfo_execIsAttackOnCooldown_Parms IsAttackOnCooldown_Parms;

	this->ProcessEvent ( pFnIsAttackOnCooldown, &IsAttackOnCooldown_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.CanDoAttackAnim
// [0x00824002] 
// Parameters infos:

void UKFPawnAnimInfo::CanDoAttackAnim ( )
{
	static UFunction* pFnCanDoAttackAnim = NULL;

	if ( ! pFnCanDoAttackAnim )
		pFnCanDoAttackAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.CanDoAttackAnim" );

	UKFPawnAnimInfo_execCanDoAttackAnim_Parms CanDoAttackAnim_Parms;

	this->ProcessEvent ( pFnCanDoAttackAnim, &CanDoAttackAnim_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.CheckForValidCooldown
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::CheckForValidCooldown ( )
{
	static UFunction* pFnCheckForValidCooldown = NULL;

	if ( ! pFnCheckForValidCooldown )
		pFnCheckForValidCooldown = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.CheckForValidCooldown" );

	UKFPawnAnimInfo_execCheckForValidCooldown_Parms CheckForValidCooldown_Parms;

	this->ProcessEvent ( pFnCheckForValidCooldown, &CheckForValidCooldown_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.GetStrikeFlags
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::GetStrikeFlags ( )
{
	static UFunction* pFnGetStrikeFlags = NULL;

	if ( ! pFnGetStrikeFlags )
		pFnGetStrikeFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.GetStrikeFlags" );

	UKFPawnAnimInfo_execGetStrikeFlags_Parms GetStrikeFlags_Parms;

	this->ProcessEvent ( pFnGetStrikeFlags, &GetStrikeFlags_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.GetAttackAnimName
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::GetAttackAnimName ( )
{
	static UFunction* pFnGetAttackAnimName = NULL;

	if ( ! pFnGetAttackAnimName )
		pFnGetAttackAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.GetAttackAnimName" );

	UKFPawnAnimInfo_execGetAttackAnimName_Parms GetAttackAnimName_Parms;

	this->ProcessEvent ( pFnGetAttackAnimName, &GetAttackAnimName_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.GetAttackIndexByTag
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::GetAttackIndexByTag ( )
{
	static UFunction* pFnGetAttackIndexByTag = NULL;

	if ( ! pFnGetAttackIndexByTag )
		pFnGetAttackIndexByTag = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.GetAttackIndexByTag" );

	UKFPawnAnimInfo_execGetAttackIndexByTag_Parms GetAttackIndexByTag_Parms;

	this->ProcessEvent ( pFnGetAttackIndexByTag, &GetAttackIndexByTag_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.GetMedianStrikeRange
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::GetMedianStrikeRange ( )
{
	static UFunction* pFnGetMedianStrikeRange = NULL;

	if ( ! pFnGetMedianStrikeRange )
		pFnGetMedianStrikeRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.GetMedianStrikeRange" );

	UKFPawnAnimInfo_execGetMedianStrikeRange_Parms GetMedianStrikeRange_Parms;

	this->ProcessEvent ( pFnGetMedianStrikeRange, &GetMedianStrikeRange_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.GetAttackRange
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::GetAttackRange ( )
{
	static UFunction* pFnGetAttackRange = NULL;

	if ( ! pFnGetAttackRange )
		pFnGetAttackRange = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.GetAttackRange" );

	UKFPawnAnimInfo_execGetAttackRange_Parms GetAttackRange_Parms;

	this->ProcessEvent ( pFnGetAttackRange, &GetAttackRange_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.UpdateAttackCooldown
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::UpdateAttackCooldown ( )
{
	static UFunction* pFnUpdateAttackCooldown = NULL;

	if ( ! pFnUpdateAttackCooldown )
		pFnUpdateAttackCooldown = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.UpdateAttackCooldown" );

	UKFPawnAnimInfo_execUpdateAttackCooldown_Parms UpdateAttackCooldown_Parms;

	this->ProcessEvent ( pFnUpdateAttackCooldown, &UpdateAttackCooldown_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.ChooseNextStrike
// [0x00024002] 
// Parameters infos:

void UKFPawnAnimInfo::ChooseNextStrike ( )
{
	static UFunction* pFnChooseNextStrike = NULL;

	if ( ! pFnChooseNextStrike )
		pFnChooseNextStrike = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.ChooseNextStrike" );

	UKFPawnAnimInfo_execChooseNextStrike_Parms ChooseNextStrike_Parms;

	this->ProcessEvent ( pFnChooseNextStrike, &ChooseNextStrike_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.ChooseAttackByName
// [0x00424002] 
// Parameters infos:

void UKFPawnAnimInfo::ChooseAttackByName ( )
{
	static UFunction* pFnChooseAttackByName = NULL;

	if ( ! pFnChooseAttackByName )
		pFnChooseAttackByName = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.ChooseAttackByName" );

	UKFPawnAnimInfo_execChooseAttackByName_Parms ChooseAttackByName_Parms;

	this->ProcessEvent ( pFnChooseAttackByName, &ChooseAttackByName_Parms, NULL );
};

// Function KFGame.KFPawnAnimInfo.InitMeleeSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFPawnAnimInfo::InitMeleeSpecialMove ( )
{
	static UFunction* pFnInitMeleeSpecialMove = NULL;

	if ( ! pFnInitMeleeSpecialMove )
		pFnInitMeleeSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnAnimInfo.InitMeleeSpecialMove" );

	UKFPawnAnimInfo_execInitMeleeSpecialMove_Parms InitMeleeSpecialMove_Parms;

	this->ProcessEvent ( pFnInitMeleeSpecialMove, &InitMeleeSpecialMove_Parms, NULL );
};

// Function KFGame.KFDT_Explosive.GetBoneToDismember
// [0x00422102] 
// Parameters infos:

void UKFDT_Explosive::GetBoneToDismember ( )
{
	static UFunction* pFnGetBoneToDismember = NULL;

	if ( ! pFnGetBoneToDismember )
		pFnGetBoneToDismember = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Explosive.GetBoneToDismember" );

	UKFDT_Explosive_execGetBoneToDismember_Parms GetBoneToDismember_Parms;

	this->ProcessEvent ( pFnGetBoneToDismember, &GetBoneToDismember_Parms, NULL );
};

// Function KFGame.KFDT_Explosive.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Explosive::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Explosive.GetKillerDialogID" );

	UKFDT_Explosive_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Explosive.AddBloodSpread
// [0x00C22102] 
// Parameters infos:

void UKFDT_Explosive::AddBloodSpread ( )
{
	static UFunction* pFnAddBloodSpread = NULL;

	if ( ! pFnAddBloodSpread )
		pFnAddBloodSpread = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Explosive.AddBloodSpread" );

	UKFDT_Explosive_execAddBloodSpread_Parms AddBloodSpread_Parms;

	this->ProcessEvent ( pFnAddBloodSpread, &AddBloodSpread_Parms, NULL );
};

// Function KFGame.KFDT_Explosive.GetBloodScale
// [0x00022102] 
// Parameters infos:

void UKFDT_Explosive::GetBloodScale ( )
{
	static UFunction* pFnGetBloodScale = NULL;

	if ( ! pFnGetBloodScale )
		pFnGetBloodScale = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Explosive.GetBloodScale" );

	UKFDT_Explosive_execGetBloodScale_Parms GetBloodScale_Parms;

	this->ProcessEvent ( pFnGetBloodScale, &GetBloodScale_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetDifficultyIndex
// [0x00022002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetDifficultyIndex ( )
{
	static UFunction* pFnGetDifficultyIndex = NULL;

	if ( ! pFnGetDifficultyIndex )
		pFnGetDifficultyIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetDifficultyIndex" );

	UKFGameDifficultyInfo_execGetDifficultyIndex_Parms GetDifficultyIndex_Parms;

	this->ProcessEvent ( pFnGetDifficultyIndex, &GetDifficultyIndex_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetDifficultyValue
// [0x00022002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetDifficultyValue ( )
{
	static UFunction* pFnGetDifficultyValue = NULL;

	if ( ! pFnGetDifficultyValue )
		pFnGetDifficultyValue = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetDifficultyValue" );

	UKFGameDifficultyInfo_execGetDifficultyValue_Parms GetDifficultyValue_Parms;

	this->ProcessEvent ( pFnGetDifficultyValue, &GetDifficultyValue_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetDamageResistanceModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetDamageResistanceModifier ( )
{
	static UFunction* pFnGetDamageResistanceModifier = NULL;

	if ( ! pFnGetDamageResistanceModifier )
		pFnGetDamageResistanceModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetDamageResistanceModifier" );

	UKFGameDifficultyInfo_execGetDamageResistanceModifier_Parms GetDamageResistanceModifier_Parms;

	this->ProcessEvent ( pFnGetDamageResistanceModifier, &GetDamageResistanceModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetWeaponPickupInterval
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetWeaponPickupInterval ( )
{
	static UFunction* pFnGetWeaponPickupInterval = NULL;

	if ( ! pFnGetWeaponPickupInterval )
		pFnGetWeaponPickupInterval = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetWeaponPickupInterval" );

	UKFGameDifficultyInfo_execGetWeaponPickupInterval_Parms GetWeaponPickupInterval_Parms;

	this->ProcessEvent ( pFnGetWeaponPickupInterval, &GetWeaponPickupInterval_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAmmoPickupInterval
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAmmoPickupInterval ( )
{
	static UFunction* pFnGetAmmoPickupInterval = NULL;

	if ( ! pFnGetAmmoPickupInterval )
		pFnGetAmmoPickupInterval = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAmmoPickupInterval" );

	UKFGameDifficultyInfo_execGetAmmoPickupInterval_Parms GetAmmoPickupInterval_Parms;

	this->ProcessEvent ( pFnGetAmmoPickupInterval, &GetAmmoPickupInterval_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetPlayerNumMaxAIModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetPlayerNumMaxAIModifier ( )
{
	static UFunction* pFnGetPlayerNumMaxAIModifier = NULL;

	if ( ! pFnGetPlayerNumMaxAIModifier )
		pFnGetPlayerNumMaxAIModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetPlayerNumMaxAIModifier" );

	UKFGameDifficultyInfo_execGetPlayerNumMaxAIModifier_Parms GetPlayerNumMaxAIModifier_Parms;

	this->ProcessEvent ( pFnGetPlayerNumMaxAIModifier, &GetPlayerNumMaxAIModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAIHiddenSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAIHiddenSpeedModifier ( )
{
	static UFunction* pFnGetAIHiddenSpeedModifier = NULL;

	if ( ! pFnGetAIHiddenSpeedModifier )
		pFnGetAIHiddenSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAIHiddenSpeedModifier" );

	UKFGameDifficultyInfo_execGetAIHiddenSpeedModifier_Parms GetAIHiddenSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetAIHiddenSpeedModifier, &GetAIHiddenSpeedModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetNumPlayersModifier
// [0x00420002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetNumPlayersModifier ( )
{
	static UFunction* pFnGetNumPlayersModifier = NULL;

	if ( ! pFnGetNumPlayersModifier )
		pFnGetNumPlayersModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetNumPlayersModifier" );

	UKFGameDifficultyInfo_execGetNumPlayersModifier_Parms GetNumPlayersModifier_Parms;

	this->ProcessEvent ( pFnGetNumPlayersModifier, &GetNumPlayersModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetSpawnRateModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetSpawnRateModifier ( )
{
	static UFunction* pFnGetSpawnRateModifier = NULL;

	if ( ! pFnGetSpawnRateModifier )
		pFnGetSpawnRateModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetSpawnRateModifier" );

	UKFGameDifficultyInfo_execGetSpawnRateModifier_Parms GetSpawnRateModifier_Parms;

	this->ProcessEvent ( pFnGetSpawnRateModifier, &GetSpawnRateModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetSelfInflictedDamageMod
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetSelfInflictedDamageMod ( )
{
	static UFunction* pFnGetSelfInflictedDamageMod = NULL;

	if ( ! pFnGetSelfInflictedDamageMod )
		pFnGetSelfInflictedDamageMod = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetSelfInflictedDamageMod" );

	UKFGameDifficultyInfo_execGetSelfInflictedDamageMod_Parms GetSelfInflictedDamageMod_Parms;

	this->ProcessEvent ( pFnGetSelfInflictedDamageMod, &GetSelfInflictedDamageMod_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetHardAttackChance
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetHardAttackChance ( )
{
	static UFunction* pFnGetHardAttackChance = NULL;

	if ( ! pFnGetHardAttackChance )
		pFnGetHardAttackChance = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetHardAttackChance" );

	UKFGameDifficultyInfo_execGetHardAttackChance_Parms GetHardAttackChance_Parms;

	this->ProcessEvent ( pFnGetHardAttackChance, &GetHardAttackChance_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetMediumAttackChance
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetMediumAttackChance ( )
{
	static UFunction* pFnGetMediumAttackChance = NULL;

	if ( ! pFnGetMediumAttackChance )
		pFnGetMediumAttackChance = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetMediumAttackChance" );

	UKFGameDifficultyInfo_execGetMediumAttackChance_Parms GetMediumAttackChance_Parms;

	this->ProcessEvent ( pFnGetMediumAttackChance, &GetMediumAttackChance_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetWeakAttackChance
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetWeakAttackChance ( )
{
	static UFunction* pFnGetWeakAttackChance = NULL;

	if ( ! pFnGetWeakAttackChance )
		pFnGetWeakAttackChance = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetWeakAttackChance" );

	UKFGameDifficultyInfo_execGetWeakAttackChance_Parms GetWeakAttackChance_Parms;

	this->ProcessEvent ( pFnGetWeakAttackChance, &GetWeakAttackChance_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAmmoPickupModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAmmoPickupModifier ( )
{
	static UFunction* pFnGetAmmoPickupModifier = NULL;

	if ( ! pFnGetAmmoPickupModifier )
		pFnGetAmmoPickupModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAmmoPickupModifier" );

	UKFGameDifficultyInfo_execGetAmmoPickupModifier_Parms GetAmmoPickupModifier_Parms;

	this->ProcessEvent ( pFnGetAmmoPickupModifier, &GetAmmoPickupModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetItemPickupModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetItemPickupModifier ( )
{
	static UFunction* pFnGetItemPickupModifier = NULL;

	if ( ! pFnGetItemPickupModifier )
		pFnGetItemPickupModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetItemPickupModifier" );

	UKFGameDifficultyInfo_execGetItemPickupModifier_Parms GetItemPickupModifier_Parms;

	this->ProcessEvent ( pFnGetItemPickupModifier, &GetItemPickupModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAdjustedRespawnCash
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAdjustedRespawnCash ( )
{
	static UFunction* pFnGetAdjustedRespawnCash = NULL;

	if ( ! pFnGetAdjustedRespawnCash )
		pFnGetAdjustedRespawnCash = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAdjustedRespawnCash" );

	UKFGameDifficultyInfo_execGetAdjustedRespawnCash_Parms GetAdjustedRespawnCash_Parms;

	this->ProcessEvent ( pFnGetAdjustedRespawnCash, &GetAdjustedRespawnCash_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAdjustedStartingCash
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAdjustedStartingCash ( )
{
	static UFunction* pFnGetAdjustedStartingCash = NULL;

	if ( ! pFnGetAdjustedStartingCash )
		pFnGetAdjustedStartingCash = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAdjustedStartingCash" );

	UKFGameDifficultyInfo_execGetAdjustedStartingCash_Parms GetAdjustedStartingCash_Parms;

	this->ProcessEvent ( pFnGetAdjustedStartingCash, &GetAdjustedStartingCash_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetKillCashModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetKillCashModifier ( )
{
	static UFunction* pFnGetKillCashModifier = NULL;

	if ( ! pFnGetKillCashModifier )
		pFnGetKillCashModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetKillCashModifier" );

	UKFGameDifficultyInfo_execGetKillCashModifier_Parms GetKillCashModifier_Parms;

	this->ProcessEvent ( pFnGetKillCashModifier, &GetKillCashModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetDifficultyMaxAIModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetDifficultyMaxAIModifier ( )
{
	static UFunction* pFnGetDifficultyMaxAIModifier = NULL;

	if ( ! pFnGetDifficultyMaxAIModifier )
		pFnGetDifficultyMaxAIModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetDifficultyMaxAIModifier" );

	UKFGameDifficultyInfo_execGetDifficultyMaxAIModifier_Parms GetDifficultyMaxAIModifier_Parms;

	this->ProcessEvent ( pFnGetDifficultyMaxAIModifier, &GetDifficultyMaxAIModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAIGroundSpeedMod
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAIGroundSpeedMod ( )
{
	static UFunction* pFnGetAIGroundSpeedMod = NULL;

	if ( ! pFnGetAIGroundSpeedMod )
		pFnGetAIGroundSpeedMod = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAIGroundSpeedMod" );

	UKFGameDifficultyInfo_execGetAIGroundSpeedMod_Parms GetAIGroundSpeedMod_Parms;

	this->ProcessEvent ( pFnGetAIGroundSpeedMod, &GetAIGroundSpeedMod_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAISpeedMod
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAISpeedMod ( )
{
	static UFunction* pFnGetAISpeedMod = NULL;

	if ( ! pFnGetAISpeedMod )
		pFnGetAISpeedMod = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAISpeedMod" );

	UKFGameDifficultyInfo_execGetAISpeedMod_Parms GetAISpeedMod_Parms;

	this->ProcessEvent ( pFnGetAISpeedMod, &GetAISpeedMod_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAIDamageModifier
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAIDamageModifier ( )
{
	static UFunction* pFnGetAIDamageModifier = NULL;

	if ( ! pFnGetAIDamageModifier )
		pFnGetAIDamageModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAIDamageModifier" );

	UKFGameDifficultyInfo_execGetAIDamageModifier_Parms GetAIDamageModifier_Parms;

	this->ProcessEvent ( pFnGetAIDamageModifier, &GetAIDamageModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetTraderTimeByMap
// [0x00820002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetTraderTimeByMap ( )
{
	static UFunction* pFnGetTraderTimeByMap = NULL;

	if ( ! pFnGetTraderTimeByMap )
		pFnGetTraderTimeByMap = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetTraderTimeByMap" );

	UKFGameDifficultyInfo_execGetTraderTimeByMap_Parms GetTraderTimeByMap_Parms;

	this->ProcessEvent ( pFnGetTraderTimeByMap, &GetTraderTimeByMap_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetTraderTimeByDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetTraderTimeByDifficulty ( )
{
	static UFunction* pFnGetTraderTimeByDifficulty = NULL;

	if ( ! pFnGetTraderTimeByDifficulty )
		pFnGetTraderTimeByDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetTraderTimeByDifficulty" );

	UKFGameDifficultyInfo_execGetTraderTimeByDifficulty_Parms GetTraderTimeByDifficulty_Parms;

	this->ProcessEvent ( pFnGetTraderTimeByDifficulty, &GetTraderTimeByDifficulty_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetCharSprintWhenDamagedChanceByDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetCharSprintWhenDamagedChanceByDifficulty ( )
{
	static UFunction* pFnGetCharSprintWhenDamagedChanceByDifficulty = NULL;

	if ( ! pFnGetCharSprintWhenDamagedChanceByDifficulty )
		pFnGetCharSprintWhenDamagedChanceByDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetCharSprintWhenDamagedChanceByDifficulty" );

	UKFGameDifficultyInfo_execGetCharSprintWhenDamagedChanceByDifficulty_Parms GetCharSprintWhenDamagedChanceByDifficulty_Parms;

	this->ProcessEvent ( pFnGetCharSprintWhenDamagedChanceByDifficulty, &GetCharSprintWhenDamagedChanceByDifficulty_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetCharSprintChanceByDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetCharSprintChanceByDifficulty ( )
{
	static UFunction* pFnGetCharSprintChanceByDifficulty = NULL;

	if ( ! pFnGetCharSprintChanceByDifficulty )
		pFnGetCharSprintChanceByDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetCharSprintChanceByDifficulty" );

	UKFGameDifficultyInfo_execGetCharSprintChanceByDifficulty_Parms GetCharSprintChanceByDifficulty_Parms;

	this->ProcessEvent ( pFnGetCharSprintChanceByDifficulty, &GetCharSprintChanceByDifficulty_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetCharHeadHealthModDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetCharHeadHealthModDifficulty ( )
{
	static UFunction* pFnGetCharHeadHealthModDifficulty = NULL;

	if ( ! pFnGetCharHeadHealthModDifficulty )
		pFnGetCharHeadHealthModDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetCharHeadHealthModDifficulty" );

	UKFGameDifficultyInfo_execGetCharHeadHealthModDifficulty_Parms GetCharHeadHealthModDifficulty_Parms;

	this->ProcessEvent ( pFnGetCharHeadHealthModDifficulty, &GetCharHeadHealthModDifficulty_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetCharHealthModDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetCharHealthModDifficulty ( )
{
	static UFunction* pFnGetCharHealthModDifficulty = NULL;

	if ( ! pFnGetCharHealthModDifficulty )
		pFnGetCharHealthModDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetCharHealthModDifficulty" );

	UKFGameDifficultyInfo_execGetCharHealthModDifficulty_Parms GetCharHealthModDifficulty_Parms;

	this->ProcessEvent ( pFnGetCharHealthModDifficulty, &GetCharHealthModDifficulty_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetGlobalHealthMod
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetGlobalHealthMod ( )
{
	static UFunction* pFnGetGlobalHealthMod = NULL;

	if ( ! pFnGetGlobalHealthMod )
		pFnGetGlobalHealthMod = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetGlobalHealthMod" );

	UKFGameDifficultyInfo_execGetGlobalHealthMod_Parms GetGlobalHealthMod_Parms;

	this->ProcessEvent ( pFnGetGlobalHealthMod, &GetGlobalHealthMod_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetNumPlayersHealthMod
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetNumPlayersHealthMod ( )
{
	static UFunction* pFnGetNumPlayersHealthMod = NULL;

	if ( ! pFnGetNumPlayersHealthMod )
		pFnGetNumPlayersHealthMod = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetNumPlayersHealthMod" );

	UKFGameDifficultyInfo_execGetNumPlayersHealthMod_Parms GetNumPlayersHealthMod_Parms;

	this->ProcessEvent ( pFnGetNumPlayersHealthMod, &GetNumPlayersHealthMod_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetVersusHealthModifier
// [0x00420002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetVersusHealthModifier ( )
{
	static UFunction* pFnGetVersusHealthModifier = NULL;

	if ( ! pFnGetVersusHealthModifier )
		pFnGetVersusHealthModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetVersusHealthModifier" );

	UKFGameDifficultyInfo_execGetVersusHealthModifier_Parms GetVersusHealthModifier_Parms;

	this->ProcessEvent ( pFnGetVersusHealthModifier, &GetVersusHealthModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.GetAIHealthModifier
// [0x00424002] 
// Parameters infos:

void UKFGameDifficultyInfo::GetAIHealthModifier ( )
{
	static UFunction* pFnGetAIHealthModifier = NULL;

	if ( ! pFnGetAIHealthModifier )
		pFnGetAIHealthModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.GetAIHealthModifier" );

	UKFGameDifficultyInfo_execGetAIHealthModifier_Parms GetAIHealthModifier_Parms;

	this->ProcessEvent ( pFnGetAIHealthModifier, &GetAIHealthModifier_Parms, NULL );
};

// Function KFGame.KFGameDifficultyInfo.SetDifficultySettings
// [0x00020002] 
// Parameters infos:

void UKFGameDifficultyInfo::SetDifficultySettings ( )
{
	static UFunction* pFnSetDifficultySettings = NULL;

	if ( ! pFnSetDifficultySettings )
		pFnSetDifficultySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFGameDifficultyInfo.SetDifficultySettings" );

	UKFGameDifficultyInfo_execSetDifficultySettings_Parms SetDifficultySettings_Parms;

	this->ProcessEvent ( pFnSetDifficultySettings, &SetDifficultySettings_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.EndSpecialMove
// [0x00024103] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMoveHandler::EndSpecialMove ( )
{
	static UFunction* pFnEndSpecialMove = NULL;

	if ( ! pFnEndSpecialMove )
		pFnEndSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.EndSpecialMove" );

	UKFSpecialMoveHandler_execEndSpecialMove_Parms EndSpecialMove_Parms;

	this->ProcessEvent ( pFnEndSpecialMove, &EndSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.ClearPendingSpecialMove
// [0x00020102] 
// Parameters infos:

void UKFSpecialMoveHandler::ClearPendingSpecialMove ( )
{
	static UFunction* pFnClearPendingSpecialMove = NULL;

	if ( ! pFnClearPendingSpecialMove )
		pFnClearPendingSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.ClearPendingSpecialMove" );

	UKFSpecialMoveHandler_execClearPendingSpecialMove_Parms ClearPendingSpecialMove_Parms;

	this->ProcessEvent ( pFnClearPendingSpecialMove, &ClearPendingSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.VerifySpecialMoveInstance
// [0x00020102] 
// Parameters infos:

void UKFSpecialMoveHandler::VerifySpecialMoveInstance ( )
{
	static UFunction* pFnVerifySpecialMoveInstance = NULL;

	if ( ! pFnVerifySpecialMoveInstance )
		pFnVerifySpecialMoveInstance = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.VerifySpecialMoveInstance" );

	UKFSpecialMoveHandler_execVerifySpecialMoveInstance_Parms VerifySpecialMoveInstance_Parms;

	this->ProcessEvent ( pFnVerifySpecialMoveInstance, &VerifySpecialMoveInstance_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.SpecialMoveEnded
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMoveHandler::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.SpecialMoveEnded" );

	UKFSpecialMoveHandler_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.SpecialMoveStarted
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMoveHandler::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.SpecialMoveStarted" );

	UKFSpecialMoveHandler_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.CanChainSpecialMove
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMoveHandler::CanChainSpecialMove ( )
{
	static UFunction* pFnCanChainSpecialMove = NULL;

	if ( ! pFnCanChainSpecialMove )
		pFnCanChainSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.CanChainSpecialMove" );

	UKFSpecialMoveHandler_execCanChainSpecialMove_Parms CanChainSpecialMove_Parms;

	this->ProcessEvent ( pFnCanChainSpecialMove, &CanChainSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.CanDoSpecialMove
// [0x00024903] ( FUNC_Final | FUNC_Event )
// Parameters infos:

void UKFSpecialMoveHandler::eventCanDoSpecialMove ( )
{
	static UFunction* pFnCanDoSpecialMove = NULL;

	if ( ! pFnCanDoSpecialMove )
		pFnCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.CanDoSpecialMove" );

	UKFSpecialMoveHandler_eventCanDoSpecialMove_Parms CanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnCanDoSpecialMove, &CanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.ReplicateSpecialMove
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMoveHandler::ReplicateSpecialMove ( )
{
	static UFunction* pFnReplicateSpecialMove = NULL;

	if ( ! pFnReplicateSpecialMove )
		pFnReplicateSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.ReplicateSpecialMove" );

	UKFSpecialMoveHandler_execReplicateSpecialMove_Parms ReplicateSpecialMove_Parms;

	this->ProcessEvent ( pFnReplicateSpecialMove, &ReplicateSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.ReassignSpecialMove
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMoveHandler::ReassignSpecialMove ( )
{
	static UFunction* pFnReassignSpecialMove = NULL;

	if ( ! pFnReassignSpecialMove )
		pFnReassignSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.ReassignSpecialMove" );

	UKFSpecialMoveHandler_execReassignSpecialMove_Parms ReassignSpecialMove_Parms;

	this->ProcessEvent ( pFnReassignSpecialMove, &ReassignSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.DoPendingSpecialMove
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMoveHandler::DoPendingSpecialMove ( )
{
	static UFunction* pFnDoPendingSpecialMove = NULL;

	if ( ! pFnDoPendingSpecialMove )
		pFnDoPendingSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.DoPendingSpecialMove" );

	UKFSpecialMoveHandler_execDoPendingSpecialMove_Parms DoPendingSpecialMove_Parms;

	this->ProcessEvent ( pFnDoPendingSpecialMove, &DoPendingSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.CanOverrideSpecialMove
// [0x00040103] ( FUNC_Final )
// Parameters infos:

void UKFSpecialMoveHandler::CanOverrideSpecialMove ( )
{
	static UFunction* pFnCanOverrideSpecialMove = NULL;

	if ( ! pFnCanOverrideSpecialMove )
		pFnCanOverrideSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.CanOverrideSpecialMove" );

	UKFSpecialMoveHandler_execCanOverrideSpecialMove_Parms CanOverrideSpecialMove_Parms;

	this->ProcessEvent ( pFnCanOverrideSpecialMove, &CanOverrideSpecialMove_Parms, NULL );
};

// Function KFGame.KFSpecialMoveHandler.DoSpecialMove
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void UKFSpecialMoveHandler::eventDoSpecialMove ( )
{
	static UFunction* pFnDoSpecialMove = NULL;

	if ( ! pFnDoSpecialMove )
		pFnDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSpecialMoveHandler.DoSpecialMove" );

	UKFSpecialMoveHandler_eventDoSpecialMove_Parms DoSpecialMove_Parms;

	this->ProcessEvent ( pFnDoSpecialMove, &DoSpecialMove_Parms, NULL );
};

// Function KFGame.KFWeaponAmbientEchoHandler.StopEcho
// [0x00020102] 
// Parameters infos:

void UKFWeaponAmbientEchoHandler::StopEcho ( )
{
	static UFunction* pFnStopEcho = NULL;

	if ( ! pFnStopEcho )
		pFnStopEcho = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAmbientEchoHandler.StopEcho" );

	UKFWeaponAmbientEchoHandler_execStopEcho_Parms StopEcho_Parms;

	this->ProcessEvent ( pFnStopEcho, &StopEcho_Parms, NULL );
};

// Function KFGame.KFWeaponAmbientEchoHandler.StartEcho
// [0x00020102] 
// Parameters infos:

void UKFWeaponAmbientEchoHandler::StartEcho ( )
{
	static UFunction* pFnStartEcho = NULL;

	if ( ! pFnStartEcho )
		pFnStartEcho = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAmbientEchoHandler.StartEcho" );

	UKFWeaponAmbientEchoHandler_execStartEcho_Parms StartEcho_Parms;

	this->ProcessEvent ( pFnStartEcho, &StartEcho_Parms, NULL );
};

// Function KFGame.KFWeaponAmbientEchoHandler.TickEchoes
// [0x00020102] 
// Parameters infos:

void UKFWeaponAmbientEchoHandler::TickEchoes ( )
{
	static UFunction* pFnTickEchoes = NULL;

	if ( ! pFnTickEchoes )
		pFnTickEchoes = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAmbientEchoHandler.TickEchoes" );

	UKFWeaponAmbientEchoHandler_execTickEchoes_Parms TickEchoes_Parms;

	this->ProcessEvent ( pFnTickEchoes, &TickEchoes_Parms, NULL );
};

// Function KFGame.KFWeaponAmbientEchoHandler.StopAllEchoes
// [0x00024102] 
// Parameters infos:

void UKFWeaponAmbientEchoHandler::StopAllEchoes ( )
{
	static UFunction* pFnStopAllEchoes = NULL;

	if ( ! pFnStopAllEchoes )
		pFnStopAllEchoes = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAmbientEchoHandler.StopAllEchoes" );

	UKFWeaponAmbientEchoHandler_execStopAllEchoes_Parms StopAllEchoes_Parms;

	this->ProcessEvent ( pFnStopAllEchoes, &StopAllEchoes_Parms, NULL );
};

// Function KFGame.KFWeaponAmbientEchoHandler.StopEchoSet
// [0x00824102] 
// Parameters infos:

void UKFWeaponAmbientEchoHandler::StopEchoSet ( )
{
	static UFunction* pFnStopEchoSet = NULL;

	if ( ! pFnStopEchoSet )
		pFnStopEchoSet = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAmbientEchoHandler.StopEchoSet" );

	UKFWeaponAmbientEchoHandler_execStopEchoSet_Parms StopEchoSet_Parms;

	this->ProcessEvent ( pFnStopEchoSet, &StopEchoSet_Parms, NULL );
};

// Function KFGame.KFWeaponAmbientEchoHandler.DelayedStartEcho
// [0x00020102] 
// Parameters infos:

void UKFWeaponAmbientEchoHandler::DelayedStartEcho ( )
{
	static UFunction* pFnDelayedStartEcho = NULL;

	if ( ! pFnDelayedStartEcho )
		pFnDelayedStartEcho = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAmbientEchoHandler.DelayedStartEcho" );

	UKFWeaponAmbientEchoHandler_execDelayedStartEcho_Parms DelayedStartEcho_Parms;

	this->ProcessEvent ( pFnDelayedStartEcho, &DelayedStartEcho_Parms, NULL );
};

// Function KFGame.KFWeaponAmbientEchoHandler.StartEchoSet
// [0x00820102] 
// Parameters infos:

void UKFWeaponAmbientEchoHandler::StartEchoSet ( )
{
	static UFunction* pFnStartEchoSet = NULL;

	if ( ! pFnStartEchoSet )
		pFnStartEchoSet = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAmbientEchoHandler.StartEchoSet" );

	UKFWeaponAmbientEchoHandler_execStartEchoSet_Parms StartEchoSet_Parms;

	this->ProcessEvent ( pFnStartEchoSet, &StartEchoSet_Parms, NULL );
};

// Function KFGame.KFWeaponAmbientEchoHandler.HandleEchoes
// [0x00020102] 
// Parameters infos:

void UKFWeaponAmbientEchoHandler::HandleEchoes ( )
{
	static UFunction* pFnHandleEchoes = NULL;

	if ( ! pFnHandleEchoes )
		pFnHandleEchoes = UObject::FindObject< UFunction > ( "Function KFGame.KFWeaponAmbientEchoHandler.HandleEchoes" );

	UKFWeaponAmbientEchoHandler_execHandleEchoes_Parms HandleEchoes_Parms;

	this->ProcessEvent ( pFnHandleEchoes, &HandleEchoes_Parms, NULL );
};

// Function KFGame.KFPawnVoiceGroup.GetDialogEventInfo
// [0x00022002] 
// Parameters infos:

void UKFPawnVoiceGroup::GetDialogEventInfo ( )
{
	static UFunction* pFnGetDialogEventInfo = NULL;

	if ( ! pFnGetDialogEventInfo )
		pFnGetDialogEventInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnVoiceGroup.GetDialogEventInfo" );

	UKFPawnVoiceGroup_execGetDialogEventInfo_Parms GetDialogEventInfo_Parms;

	this->ProcessEvent ( pFnGetDialogEventInfo, &GetDialogEventInfo_Parms, NULL );
};

// Function KFGame.KFPawnVoiceGroup.GetDialogAkEvent
// [0x00022002] 
// Parameters infos:

void UKFPawnVoiceGroup::GetDialogAkEvent ( )
{
	static UFunction* pFnGetDialogAkEvent = NULL;

	if ( ! pFnGetDialogAkEvent )
		pFnGetDialogAkEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnVoiceGroup.GetDialogAkEvent" );

	UKFPawnVoiceGroup_execGetDialogAkEvent_Parms GetDialogAkEvent_Parms;

	this->ProcessEvent ( pFnGetDialogAkEvent, &GetDialogAkEvent_Parms, NULL );
};

// Function KFGame.KFPawnVoiceGroup.GetEventName
// [0x00022002] 
// Parameters infos:

void UKFPawnVoiceGroup::GetEventName ( )
{
	static UFunction* pFnGetEventName = NULL;

	if ( ! pFnGetEventName )
		pFnGetEventName = UObject::FindObject< UFunction > ( "Function KFGame.KFPawnVoiceGroup.GetEventName" );

	UKFPawnVoiceGroup_execGetEventName_Parms GetEventName_Parms;

	this->ProcessEvent ( pFnGetEventName, &GetEventName_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.ReceiveAwardInfo
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::ReceiveAwardInfo ( )
{
	static UFunction* pFnReceiveAwardInfo = NULL;

	if ( ! pFnReceiveAwardInfo )
		pFnReceiveAwardInfo = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.ReceiveAwardInfo" );

	UEphemeralMatchStats_execReceiveAwardInfo_Parms ReceiveAwardInfo_Parms;

	this->ProcessEvent ( pFnReceiveAwardInfo, &ReceiveAwardInfo_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_Dominator
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_Dominator ( )
{
	static UFunction* pFnGive_Dominator = NULL;

	if ( ! pFnGive_Dominator )
		pFnGive_Dominator = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_Dominator" );

	UEphemeralMatchStats_execGive_Dominator_Parms Give_Dominator_Parms;

	this->ProcessEvent ( pFnGive_Dominator, &Give_Dominator_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_HeadPopper
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_HeadPopper ( )
{
	static UFunction* pFnGive_HeadPopper = NULL;

	if ( ! pFnGive_HeadPopper )
		pFnGive_HeadPopper = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_HeadPopper" );

	UEphemeralMatchStats_execGive_HeadPopper_Parms Give_HeadPopper_Parms;

	this->ProcessEvent ( pFnGive_HeadPopper, &Give_HeadPopper_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_MoneyBags
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_MoneyBags ( )
{
	static UFunction* pFnGive_MoneyBags = NULL;

	if ( ! pFnGive_MoneyBags )
		pFnGive_MoneyBags = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_MoneyBags" );

	UEphemeralMatchStats_execGive_MoneyBags_Parms Give_MoneyBags_Parms;

	this->ProcessEvent ( pFnGive_MoneyBags, &Give_MoneyBags_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_GiantSlayer
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_GiantSlayer ( )
{
	static UFunction* pFnGive_GiantSlayer = NULL;

	if ( ! pFnGive_GiantSlayer )
		pFnGive_GiantSlayer = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_GiantSlayer" );

	UEphemeralMatchStats_execGive_GiantSlayer_Parms Give_GiantSlayer_Parms;

	this->ProcessEvent ( pFnGive_GiantSlayer, &Give_GiantSlayer_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_Destroyer
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_Destroyer ( )
{
	static UFunction* pFnGive_Destroyer = NULL;

	if ( ! pFnGive_Destroyer )
		pFnGive_Destroyer = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_Destroyer" );

	UEphemeralMatchStats_execGive_Destroyer_Parms Give_Destroyer_Parms;

	this->ProcessEvent ( pFnGive_Destroyer, &Give_Destroyer_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_Enforcer
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_Enforcer ( )
{
	static UFunction* pFnGive_Enforcer = NULL;

	if ( ! pFnGive_Enforcer )
		pFnGive_Enforcer = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_Enforcer" );

	UEphemeralMatchStats_execGive_Enforcer_Parms Give_Enforcer_Parms;

	this->ProcessEvent ( pFnGive_Enforcer, &Give_Enforcer_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_ZedSlayer
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_ZedSlayer ( )
{
	static UFunction* pFnGive_ZedSlayer = NULL;

	if ( ! pFnGive_ZedSlayer )
		pFnGive_ZedSlayer = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_ZedSlayer" );

	UEphemeralMatchStats_execGive_ZedSlayer_Parms Give_ZedSlayer_Parms;

	this->ProcessEvent ( pFnGive_ZedSlayer, &Give_ZedSlayer_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_MedicineMaster
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_MedicineMaster ( )
{
	static UFunction* pFnGive_MedicineMaster = NULL;

	if ( ! pFnGive_MedicineMaster )
		pFnGive_MedicineMaster = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_MedicineMaster" );

	UEphemeralMatchStats_execGive_MedicineMaster_Parms Give_MedicineMaster_Parms;

	this->ProcessEvent ( pFnGive_MedicineMaster, &Give_MedicineMaster_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_Closer
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_Closer ( )
{
	static UFunction* pFnGive_Closer = NULL;

	if ( ! pFnGive_Closer )
		pFnGive_Closer = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_Closer" );

	UEphemeralMatchStats_execGive_Closer_Parms Give_Closer_Parms;

	this->ProcessEvent ( pFnGive_Closer, &Give_Closer_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_Combo
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_Combo ( )
{
	static UFunction* pFnGive_Combo = NULL;

	if ( ! pFnGive_Combo )
		pFnGive_Combo = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_Combo" );

	UEphemeralMatchStats_execGive_Combo_Parms Give_Combo_Parms;

	this->ProcessEvent ( pFnGive_Combo, &Give_Combo_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_Carnage
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_Carnage ( )
{
	static UFunction* pFnGive_Carnage = NULL;

	if ( ! pFnGive_Carnage )
		pFnGive_Carnage = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_Carnage" );

	UEphemeralMatchStats_execGive_Carnage_Parms Give_Carnage_Parms;

	this->ProcessEvent ( pFnGive_Carnage, &Give_Carnage_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_BestSupportingZed
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_BestSupportingZed ( )
{
	static UFunction* pFnGive_BestSupportingZed = NULL;

	if ( ! pFnGive_BestSupportingZed )
		pFnGive_BestSupportingZed = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_BestSupportingZed" );

	UEphemeralMatchStats_execGive_BestSupportingZed_Parms Give_BestSupportingZed_Parms;

	this->ProcessEvent ( pFnGive_BestSupportingZed, &Give_BestSupportingZed_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_Grabby
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_Grabby ( )
{
	static UFunction* pFnGive_Grabby = NULL;

	if ( ! pFnGive_Grabby )
		pFnGive_Grabby = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_Grabby" );

	UEphemeralMatchStats_execGive_Grabby_Parms Give_Grabby_Parms;

	this->ProcessEvent ( pFnGive_Grabby, &Give_Grabby_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.Give_Zednnihilation
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::Give_Zednnihilation ( )
{
	static UFunction* pFnGive_Zednnihilation = NULL;

	if ( ! pFnGive_Zednnihilation )
		pFnGive_Zednnihilation = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.Give_Zednnihilation" );

	UEphemeralMatchStats_execGive_Zednnihilation_Parms Give_Zednnihilation_Parms;

	this->ProcessEvent ( pFnGive_Zednnihilation, &Give_Zednnihilation_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetTeamAward
// [0x00422002] 
// Parameters infos:

void UEphemeralMatchStats::GetTeamAward ( )
{
	static UFunction* pFnGetTeamAward = NULL;

	if ( ! pFnGetTeamAward )
		pFnGetTeamAward = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetTeamAward" );

	UEphemeralMatchStats_execGetTeamAward_Parms GetTeamAward_Parms;

	this->ProcessEvent ( pFnGetTeamAward, &GetTeamAward_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestDoorWelding
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestDoorWelding ( )
{
	static UFunction* pFnGivePersonalBestDoorWelding = NULL;

	if ( ! pFnGivePersonalBestDoorWelding )
		pFnGivePersonalBestDoorWelding = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestDoorWelding" );

	UEphemeralMatchStats_execGivePersonalBestDoorWelding_Parms GivePersonalBestDoorWelding_Parms;

	this->ProcessEvent ( pFnGivePersonalBestDoorWelding, &GivePersonalBestDoorWelding_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestAssists
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestAssists ( )
{
	static UFunction* pFnGivePersonalBestAssists = NULL;

	if ( ! pFnGivePersonalBestAssists )
		pFnGivePersonalBestAssists = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestAssists" );

	UEphemeralMatchStats_execGivePersonalBestAssists_Parms GivePersonalBestAssists_Parms;

	this->ProcessEvent ( pFnGivePersonalBestAssists, &GivePersonalBestAssists_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestKills
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestKills ( )
{
	static UFunction* pFnGivePersonalBestKills = NULL;

	if ( ! pFnGivePersonalBestKills )
		pFnGivePersonalBestKills = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestKills" );

	UEphemeralMatchStats_execGivePersonalBestKills_Parms GivePersonalBestKills_Parms;

	this->ProcessEvent ( pFnGivePersonalBestKills, &GivePersonalBestKills_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestDoshEarned
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestDoshEarned ( )
{
	static UFunction* pFnGivePersonalBestDoshEarned = NULL;

	if ( ! pFnGivePersonalBestDoshEarned )
		pFnGivePersonalBestDoshEarned = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestDoshEarned" );

	UEphemeralMatchStats_execGivePersonalBestDoshEarned_Parms GivePersonalBestDoshEarned_Parms;

	this->ProcessEvent ( pFnGivePersonalBestDoshEarned, &GivePersonalBestDoshEarned_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestLargeZedKills
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestLargeZedKills ( )
{
	static UFunction* pFnGivePersonalBestLargeZedKills = NULL;

	if ( ! pFnGivePersonalBestLargeZedKills )
		pFnGivePersonalBestLargeZedKills = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestLargeZedKills" );

	UEphemeralMatchStats_execGivePersonalBestLargeZedKills_Parms GivePersonalBestLargeZedKills_Parms;

	this->ProcessEvent ( pFnGivePersonalBestLargeZedKills, &GivePersonalBestLargeZedKills_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestHealing
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestHealing ( )
{
	static UFunction* pFnGivePersonalBestHealing = NULL;

	if ( ! pFnGivePersonalBestHealing )
		pFnGivePersonalBestHealing = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestHealing" );

	UEphemeralMatchStats_execGivePersonalBestHealing_Parms GivePersonalBestHealing_Parms;

	this->ProcessEvent ( pFnGivePersonalBestHealing, &GivePersonalBestHealing_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestHeadShots
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestHeadShots ( )
{
	static UFunction* pFnGivePersonalBestHeadShots = NULL;

	if ( ! pFnGivePersonalBestHeadShots )
		pFnGivePersonalBestHeadShots = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestHeadShots" );

	UEphemeralMatchStats_execGivePersonalBestHeadShots_Parms GivePersonalBestHeadShots_Parms;

	this->ProcessEvent ( pFnGivePersonalBestHeadShots, &GivePersonalBestHeadShots_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestPistolKills
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestPistolKills ( )
{
	static UFunction* pFnGivePersonalBestPistolKills = NULL;

	if ( ! pFnGivePersonalBestPistolKills )
		pFnGivePersonalBestPistolKills = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestPistolKills" );

	UEphemeralMatchStats_execGivePersonalBestPistolKills_Parms GivePersonalBestPistolKills_Parms;

	this->ProcessEvent ( pFnGivePersonalBestPistolKills, &GivePersonalBestPistolKills_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GivePersonalBestKnifeKills
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GivePersonalBestKnifeKills ( )
{
	static UFunction* pFnGivePersonalBestKnifeKills = NULL;

	if ( ! pFnGivePersonalBestKnifeKills )
		pFnGivePersonalBestKnifeKills = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GivePersonalBestKnifeKills" );

	UEphemeralMatchStats_execGivePersonalBestKnifeKills_Parms GivePersonalBestKnifeKills_Parms;

	this->ProcessEvent ( pFnGivePersonalBestKnifeKills, &GivePersonalBestKnifeKills_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetKnifeKills
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GetKnifeKills ( )
{
	static UFunction* pFnGetKnifeKills = NULL;

	if ( ! pFnGetKnifeKills )
		pFnGetKnifeKills = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetKnifeKills" );

	UEphemeralMatchStats_execGetKnifeKills_Parms GetKnifeKills_Parms;

	this->ProcessEvent ( pFnGetKnifeKills, &GetKnifeKills_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetPistolKills
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GetPistolKills ( )
{
	static UFunction* pFnGetPistolKills = NULL;

	if ( ! pFnGetPistolKills )
		pFnGetPistolKills = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetPistolKills" );

	UEphemeralMatchStats_execGetPistolKills_Parms GetPistolKills_Parms;

	this->ProcessEvent ( pFnGetPistolKills, &GetPistolKills_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetPersonalBests
// [0x00420002] 
// Parameters infos:

void UEphemeralMatchStats::GetPersonalBests ( )
{
	static UFunction* pFnGetPersonalBests = NULL;

	if ( ! pFnGetPersonalBests )
		pFnGetPersonalBests = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetPersonalBests" );

	UEphemeralMatchStats_execGetPersonalBests_Parms GetPersonalBests_Parms;

	this->ProcessEvent ( pFnGetPersonalBests, &GetPersonalBests_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.SendMapOptionsAndOpenAARMenu
// [0x00022002] 
// Parameters infos:

void UEphemeralMatchStats::SendMapOptionsAndOpenAARMenu ( )
{
	static UFunction* pFnSendMapOptionsAndOpenAARMenu = NULL;

	if ( ! pFnSendMapOptionsAndOpenAARMenu )
		pFnSendMapOptionsAndOpenAARMenu = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.SendMapOptionsAndOpenAARMenu" );

	UEphemeralMatchStats_execSendMapOptionsAndOpenAARMenu_Parms SendMapOptionsAndOpenAARMenu_Parms;

	this->ProcessEvent ( pFnSendMapOptionsAndOpenAARMenu, &SendMapOptionsAndOpenAARMenu_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.ProcessPostGameStats
// [0x00822002] 
// Parameters infos:

void UEphemeralMatchStats::ProcessPostGameStats ( )
{
	static UFunction* pFnProcessPostGameStats = NULL;

	if ( ! pFnProcessPostGameStats )
		pFnProcessPostGameStats = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.ProcessPostGameStats" );

	UEphemeralMatchStats_execProcessPostGameStats_Parms ProcessPostGameStats_Parms;

	this->ProcessEvent ( pFnProcessPostGameStats, &ProcessPostGameStats_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.SortWeapons
// [0x00120002] 
// Parameters infos:

void UEphemeralMatchStats::SortWeapons ( )
{
	static UFunction* pFnSortWeapons = NULL;

	if ( ! pFnSortWeapons )
		pFnSortWeapons = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.SortWeapons" );

	UEphemeralMatchStats_execSortWeapons_Parms SortWeapons_Parms;

	this->ProcessEvent ( pFnSortWeapons, &SortWeapons_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.SortXP
// [0x00120002] 
// Parameters infos:

void UEphemeralMatchStats::SortXP ( )
{
	static UFunction* pFnSortXP = NULL;

	if ( ! pFnSortXP )
		pFnSortXP = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.SortXP" );

	UEphemeralMatchStats_execSortXP_Parms SortXP_Parms;

	this->ProcessEvent ( pFnSortXP, &SortXP_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetTopWeapons
// [0x00420002] 
// Parameters infos:

void UEphemeralMatchStats::GetTopWeapons ( )
{
	static UFunction* pFnGetTopWeapons = NULL;

	if ( ! pFnGetTopWeapons )
		pFnGetTopWeapons = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetTopWeapons" );

	UEphemeralMatchStats_execGetTopWeapons_Parms GetTopWeapons_Parms;

	this->ProcessEvent ( pFnGetTopWeapons, &GetTopWeapons_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.AddUnpackedWeaponToDamageList
// [0x00820002] 
// Parameters infos:

void UEphemeralMatchStats::AddUnpackedWeaponToDamageList ( )
{
	static UFunction* pFnAddUnpackedWeaponToDamageList = NULL;

	if ( ! pFnAddUnpackedWeaponToDamageList )
		pFnAddUnpackedWeaponToDamageList = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.AddUnpackedWeaponToDamageList" );

	UEphemeralMatchStats_execAddUnpackedWeaponToDamageList_Parms AddUnpackedWeaponToDamageList_Parms;

	this->ProcessEvent ( pFnAddUnpackedWeaponToDamageList, &AddUnpackedWeaponToDamageList_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.ProcessTopWeaponsStats
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::ProcessTopWeaponsStats ( )
{
	static UFunction* pFnProcessTopWeaponsStats = NULL;

	if ( ! pFnProcessTopWeaponsStats )
		pFnProcessTopWeaponsStats = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.ProcessTopWeaponsStats" );

	UEphemeralMatchStats_execProcessTopWeaponsStats_Parms ProcessTopWeaponsStats_Parms;

	this->ProcessEvent ( pFnProcessTopWeaponsStats, &ProcessTopWeaponsStats_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.UnpackTopWeapons
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::UnpackTopWeapons ( )
{
	static UFunction* pFnUnpackTopWeapons = NULL;

	if ( ! pFnUnpackTopWeapons )
		pFnUnpackTopWeapons = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.UnpackTopWeapons" );

	UEphemeralMatchStats_execUnpackTopWeapons_Parms UnpackTopWeapons_Parms;

	this->ProcessEvent ( pFnUnpackTopWeapons, &UnpackTopWeapons_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.PackTopWeapons
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::PackTopWeapons ( )
{
	static UFunction* pFnPackTopWeapons = NULL;

	if ( ! pFnPackTopWeapons )
		pFnPackTopWeapons = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.PackTopWeapons" );

	UEphemeralMatchStats_execPackTopWeapons_Parms PackTopWeapons_Parms;

	this->ProcessEvent ( pFnPackTopWeapons, &PackTopWeapons_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.InternalRecordWeaponDamage
// [0x00820002] 
// Parameters infos:

void UEphemeralMatchStats::InternalRecordWeaponDamage ( )
{
	static UFunction* pFnInternalRecordWeaponDamage = NULL;

	if ( ! pFnInternalRecordWeaponDamage )
		pFnInternalRecordWeaponDamage = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.InternalRecordWeaponDamage" );

	UEphemeralMatchStats_execInternalRecordWeaponDamage_Parms InternalRecordWeaponDamage_Parms;

	this->ProcessEvent ( pFnInternalRecordWeaponDamage, &InternalRecordWeaponDamage_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.RecordWeaponKill
// [0x00820002] 
// Parameters infos:

void UEphemeralMatchStats::RecordWeaponKill ( )
{
	static UFunction* pFnRecordWeaponKill = NULL;

	if ( ! pFnRecordWeaponKill )
		pFnRecordWeaponKill = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.RecordWeaponKill" );

	UEphemeralMatchStats_execRecordWeaponKill_Parms RecordWeaponKill_Parms;

	this->ProcessEvent ( pFnRecordWeaponKill, &RecordWeaponKill_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.RecordWeaponDamage
// [0x00022002] 
// Parameters infos:

void UEphemeralMatchStats::RecordWeaponDamage ( )
{
	static UFunction* pFnRecordWeaponDamage = NULL;

	if ( ! pFnRecordWeaponDamage )
		pFnRecordWeaponDamage = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.RecordWeaponDamage" );

	UEphemeralMatchStats_execRecordWeaponDamage_Parms RecordWeaponDamage_Parms;

	this->ProcessEvent ( pFnRecordWeaponDamage, &RecordWeaponDamage_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.RecordWeaponHeadShot
// [0x00822002] 
// Parameters infos:

void UEphemeralMatchStats::RecordWeaponHeadShot ( )
{
	static UFunction* pFnRecordWeaponHeadShot = NULL;

	if ( ! pFnRecordWeaponHeadShot )
		pFnRecordWeaponHeadShot = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.RecordWeaponHeadShot" );

	UEphemeralMatchStats_execRecordWeaponHeadShot_Parms RecordWeaponHeadShot_Parms;

	this->ProcessEvent ( pFnRecordWeaponHeadShot, &RecordWeaponHeadShot_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.RecordZedKill
// [0x00820002] 
// Parameters infos:

void UEphemeralMatchStats::RecordZedKill ( )
{
	static UFunction* pFnRecordZedKill = NULL;

	if ( ! pFnRecordZedKill )
		pFnRecordZedKill = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.RecordZedKill" );

	UEphemeralMatchStats_execRecordZedKill_Parms RecordZedKill_Parms;

	this->ProcessEvent ( pFnRecordZedKill, &RecordZedKill_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.RecordSecondaryXPGain
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::RecordSecondaryXPGain ( )
{
	static UFunction* pFnRecordSecondaryXPGain = NULL;

	if ( ! pFnRecordSecondaryXPGain )
		pFnRecordSecondaryXPGain = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.RecordSecondaryXPGain" );

	UEphemeralMatchStats_execRecordSecondaryXPGain_Parms RecordSecondaryXPGain_Parms;

	this->ProcessEvent ( pFnRecordSecondaryXPGain, &RecordSecondaryXPGain_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.RecordPerkXPGain
// [0x00820002] 
// Parameters infos:

void UEphemeralMatchStats::RecordPerkXPGain ( )
{
	static UFunction* pFnRecordPerkXPGain = NULL;

	if ( ! pFnRecordPerkXPGain )
		pFnRecordPerkXPGain = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.RecordPerkXPGain" );

	UEphemeralMatchStats_execRecordPerkXPGain_Parms RecordPerkXPGain_Parms;

	this->ProcessEvent ( pFnRecordPerkXPGain, &RecordPerkXPGain_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.ResetLastWaveInfo
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::ResetLastWaveInfo ( )
{
	static UFunction* pFnResetLastWaveInfo = NULL;

	if ( ! pFnResetLastWaveInfo )
		pFnResetLastWaveInfo = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.ResetLastWaveInfo" );

	UEphemeralMatchStats_execResetLastWaveInfo_Parms ResetLastWaveInfo_Parms;

	this->ProcessEvent ( pFnResetLastWaveInfo, &ResetLastWaveInfo_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.RecordWaveInfo
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::RecordWaveInfo ( )
{
	static UFunction* pFnRecordWaveInfo = NULL;

	if ( ! pFnRecordWaveInfo )
		pFnRecordWaveInfo = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.RecordWaveInfo" );

	UEphemeralMatchStats_execRecordWaveInfo_Parms RecordWaveInfo_Parms;

	this->ProcessEvent ( pFnRecordWaveInfo, &RecordWaveInfo_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetHealGivenInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GetHealGivenInWave ( )
{
	static UFunction* pFnGetHealGivenInWave = NULL;

	if ( ! pFnGetHealGivenInWave )
		pFnGetHealGivenInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetHealGivenInWave" );

	UEphemeralMatchStats_execGetHealGivenInWave_Parms GetHealGivenInWave_Parms;

	this->ProcessEvent ( pFnGetHealGivenInWave, &GetHealGivenInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.IncrementHealGivenInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::IncrementHealGivenInWave ( )
{
	static UFunction* pFnIncrementHealGivenInWave = NULL;

	if ( ! pFnIncrementHealGivenInWave )
		pFnIncrementHealGivenInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.IncrementHealGivenInWave" );

	UEphemeralMatchStats_execIncrementHealGivenInWave_Parms IncrementHealGivenInWave_Parms;

	this->ProcessEvent ( pFnIncrementHealGivenInWave, &IncrementHealGivenInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetHealReceivedInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GetHealReceivedInWave ( )
{
	static UFunction* pFnGetHealReceivedInWave = NULL;

	if ( ! pFnGetHealReceivedInWave )
		pFnGetHealReceivedInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetHealReceivedInWave" );

	UEphemeralMatchStats_execGetHealReceivedInWave_Parms GetHealReceivedInWave_Parms;

	this->ProcessEvent ( pFnGetHealReceivedInWave, &GetHealReceivedInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.IncrementHealReceivedInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::IncrementHealReceivedInWave ( )
{
	static UFunction* pFnIncrementHealReceivedInWave = NULL;

	if ( ! pFnIncrementHealReceivedInWave )
		pFnIncrementHealReceivedInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.IncrementHealReceivedInWave" );

	UEphemeralMatchStats_execIncrementHealReceivedInWave_Parms IncrementHealReceivedInWave_Parms;

	this->ProcessEvent ( pFnIncrementHealReceivedInWave, &IncrementHealReceivedInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetDamageTakenInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GetDamageTakenInWave ( )
{
	static UFunction* pFnGetDamageTakenInWave = NULL;

	if ( ! pFnGetDamageTakenInWave )
		pFnGetDamageTakenInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetDamageTakenInWave" );

	UEphemeralMatchStats_execGetDamageTakenInWave_Parms GetDamageTakenInWave_Parms;

	this->ProcessEvent ( pFnGetDamageTakenInWave, &GetDamageTakenInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.IncrementDamageTakenInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::IncrementDamageTakenInWave ( )
{
	static UFunction* pFnIncrementDamageTakenInWave = NULL;

	if ( ! pFnIncrementDamageTakenInWave )
		pFnIncrementDamageTakenInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.IncrementDamageTakenInWave" );

	UEphemeralMatchStats_execIncrementDamageTakenInWave_Parms IncrementDamageTakenInWave_Parms;

	this->ProcessEvent ( pFnIncrementDamageTakenInWave, &IncrementDamageTakenInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetDamageDealtInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GetDamageDealtInWave ( )
{
	static UFunction* pFnGetDamageDealtInWave = NULL;

	if ( ! pFnGetDamageDealtInWave )
		pFnGetDamageDealtInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetDamageDealtInWave" );

	UEphemeralMatchStats_execGetDamageDealtInWave_Parms GetDamageDealtInWave_Parms;

	this->ProcessEvent ( pFnGetDamageDealtInWave, &GetDamageDealtInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.IncrementDamageDealtInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::IncrementDamageDealtInWave ( )
{
	static UFunction* pFnIncrementDamageDealtInWave = NULL;

	if ( ! pFnIncrementDamageDealtInWave )
		pFnIncrementDamageDealtInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.IncrementDamageDealtInWave" );

	UEphemeralMatchStats_execIncrementDamageDealtInWave_Parms IncrementDamageDealtInWave_Parms;

	this->ProcessEvent ( pFnIncrementDamageDealtInWave, &IncrementDamageDealtInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetDoshEarnedInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GetDoshEarnedInWave ( )
{
	static UFunction* pFnGetDoshEarnedInWave = NULL;

	if ( ! pFnGetDoshEarnedInWave )
		pFnGetDoshEarnedInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetDoshEarnedInWave" );

	UEphemeralMatchStats_execGetDoshEarnedInWave_Parms GetDoshEarnedInWave_Parms;

	this->ProcessEvent ( pFnGetDoshEarnedInWave, &GetDoshEarnedInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.IncrementDoshEarnedInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::IncrementDoshEarnedInWave ( )
{
	static UFunction* pFnIncrementDoshEarnedInWave = NULL;

	if ( ! pFnIncrementDoshEarnedInWave )
		pFnIncrementDoshEarnedInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.IncrementDoshEarnedInWave" );

	UEphemeralMatchStats_execIncrementDoshEarnedInWave_Parms IncrementDoshEarnedInWave_Parms;

	this->ProcessEvent ( pFnIncrementDoshEarnedInWave, &IncrementDoshEarnedInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.GetHeadShotsInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::GetHeadShotsInWave ( )
{
	static UFunction* pFnGetHeadShotsInWave = NULL;

	if ( ! pFnGetHeadShotsInWave )
		pFnGetHeadShotsInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.GetHeadShotsInWave" );

	UEphemeralMatchStats_execGetHeadShotsInWave_Parms GetHeadShotsInWave_Parms;

	this->ProcessEvent ( pFnGetHeadShotsInWave, &GetHeadShotsInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.IncrementHeadShotsInWave
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::IncrementHeadShotsInWave ( )
{
	static UFunction* pFnIncrementHeadShotsInWave = NULL;

	if ( ! pFnIncrementHeadShotsInWave )
		pFnIncrementHeadShotsInWave = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.IncrementHeadShotsInWave" );

	UEphemeralMatchStats_execIncrementHeadShotsInWave_Parms IncrementHeadShotsInWave_Parms;

	this->ProcessEvent ( pFnIncrementHeadShotsInWave, &IncrementHeadShotsInWave_Parms, NULL );
};

// Function KFGame.EphemeralMatchStats.RecordIntStat
// [0x00020002] 
// Parameters infos:

void UEphemeralMatchStats::RecordIntStat ( )
{
	static UFunction* pFnRecordIntStat = NULL;

	if ( ! pFnRecordIntStat )
		pFnRecordIntStat = UObject::FindObject< UFunction > ( "Function KFGame.EphemeralMatchStats.RecordIntStat" );

	UEphemeralMatchStats_execRecordIntStat_Parms RecordIntStat_Parms;

	this->ProcessEvent ( pFnRecordIntStat, &RecordIntStat_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_Stumble::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.SpecialMoveFlagsUpdated" );

	UKFSM_Stumble_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.EnableInterrupt
// [0x00020002] 
// Parameters infos:

void UKFSM_Stumble::EnableInterrupt ( )
{
	static UFunction* pFnEnableInterrupt = NULL;

	if ( ! pFnEnableInterrupt )
		pFnEnableInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.EnableInterrupt" );

	UKFSM_Stumble_execEnableInterrupt_Parms EnableInterrupt_Parms;

	this->ProcessEvent ( pFnEnableInterrupt, &EnableInterrupt_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Stumble::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.PlayAnimation" );

	UKFSM_Stumble_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_Stumble::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.InternalCanDoSpecialMove" );

	UKFSM_Stumble_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.GetStumbleTypeFromRegion
// [0x00026002] 
// Parameters infos:

void UKFSM_Stumble::GetStumbleTypeFromRegion ( )
{
	static UFunction* pFnGetStumbleTypeFromRegion = NULL;

	if ( ! pFnGetStumbleTypeFromRegion )
		pFnGetStumbleTypeFromRegion = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.GetStumbleTypeFromRegion" );

	UKFSM_Stumble_execGetStumbleTypeFromRegion_Parms GetStumbleTypeFromRegion_Parms;

	this->ProcessEvent ( pFnGetStumbleTypeFromRegion, &GetStumbleTypeFromRegion_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.GetRandomVariant
// [0x00022002] 
// Parameters infos:

void UKFSM_Stumble::GetRandomVariant ( )
{
	static UFunction* pFnGetRandomVariant = NULL;

	if ( ! pFnGetRandomVariant )
		pFnGetRandomVariant = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.GetRandomVariant" );

	UKFSM_Stumble_execGetRandomVariant_Parms GetRandomVariant_Parms;

	this->ProcessEvent ( pFnGetRandomVariant, &GetRandomVariant_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.PackRandomSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Stumble::PackRandomSMFlags ( )
{
	static UFunction* pFnPackRandomSMFlags = NULL;

	if ( ! pFnPackRandomSMFlags )
		pFnPackRandomSMFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.PackRandomSMFlags" );

	UKFSM_Stumble_execPackRandomSMFlags_Parms PackRandomSMFlags_Parms;

	this->ProcessEvent ( pFnPackRandomSMFlags, &PackRandomSMFlags_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.PackParrySMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Stumble::PackParrySMFlags ( )
{
	static UFunction* pFnPackParrySMFlags = NULL;

	if ( ! pFnPackParrySMFlags )
		pFnPackParrySMFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.PackParrySMFlags" );

	UKFSM_Stumble_execPackParrySMFlags_Parms PackParrySMFlags_Parms;

	this->ProcessEvent ( pFnPackParrySMFlags, &PackParrySMFlags_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.PackLegHitSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Stumble::PackLegHitSMFlags ( )
{
	static UFunction* pFnPackLegHitSMFlags = NULL;

	if ( ! pFnPackLegHitSMFlags )
		pFnPackLegHitSMFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.PackLegHitSMFlags" );

	UKFSM_Stumble_execPackLegHitSMFlags_Parms PackLegHitSMFlags_Parms;

	this->ProcessEvent ( pFnPackLegHitSMFlags, &PackLegHitSMFlags_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.PackBodyHitSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Stumble::PackBodyHitSMFlags ( )
{
	static UFunction* pFnPackBodyHitSMFlags = NULL;

	if ( ! pFnPackBodyHitSMFlags )
		pFnPackBodyHitSMFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.PackBodyHitSMFlags" );

	UKFSM_Stumble_execPackBodyHitSMFlags_Parms PackBodyHitSMFlags_Parms;

	this->ProcessEvent ( pFnPackBodyHitSMFlags, &PackBodyHitSMFlags_Parms, NULL );
};

// Function KFGame.KFSM_Stumble.ShouldDoLegStumble
// [0x00022002] 
// Parameters infos:

void UKFSM_Stumble::ShouldDoLegStumble ( )
{
	static UFunction* pFnShouldDoLegStumble = NULL;

	if ( ! pFnShouldDoLegStumble )
		pFnShouldDoLegStumble = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stumble.ShouldDoLegStumble" );

	UKFSM_Stumble_execShouldDoLegStumble_Parms ShouldDoLegStumble_Parms;

	this->ProcessEvent ( pFnShouldDoLegStumble, &ShouldDoLegStumble_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.NotifyOwnerTakeHit
// [0x00820002] 
// Parameters infos:

void UKFSM_DeathAnim::NotifyOwnerTakeHit ( )
{
	static UFunction* pFnNotifyOwnerTakeHit = NULL;

	if ( ! pFnNotifyOwnerTakeHit )
		pFnNotifyOwnerTakeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.NotifyOwnerTakeHit" );

	UKFSM_DeathAnim_execNotifyOwnerTakeHit_Parms NotifyOwnerTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyOwnerTakeHit, &NotifyOwnerTakeHit_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.OnRigidBodySpringOverextension
// [0x00020002] 
// Parameters infos:

void UKFSM_DeathAnim::OnRigidBodySpringOverextension ( )
{
	static UFunction* pFnOnRigidBodySpringOverextension = NULL;

	if ( ! pFnOnRigidBodySpringOverextension )
		pFnOnRigidBodySpringOverextension = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.OnRigidBodySpringOverextension" );

	UKFSM_DeathAnim_execOnRigidBodySpringOverextension_Parms OnRigidBodySpringOverextension_Parms;

	this->ProcessEvent ( pFnOnRigidBodySpringOverextension, &OnRigidBodySpringOverextension_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.SetSpringForBone
// [0x00820003] ( FUNC_Final )
// Parameters infos:

void UKFSM_DeathAnim::SetSpringForBone ( )
{
	static UFunction* pFnSetSpringForBone = NULL;

	if ( ! pFnSetSpringForBone )
		pFnSetSpringForBone = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.SetSpringForBone" );

	UKFSM_DeathAnim_execSetSpringForBone_Parms SetSpringForBone_Parms;

	this->ProcessEvent ( pFnSetSpringForBone, &SetSpringForBone_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.StopDeathAnimMotors
// [0x00020002] 
// Parameters infos:

void UKFSM_DeathAnim::StopDeathAnimMotors ( )
{
	static UFunction* pFnStopDeathAnimMotors = NULL;

	if ( ! pFnStopDeathAnimMotors )
		pFnStopDeathAnimMotors = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.StopDeathAnimMotors" );

	UKFSM_DeathAnim_execStopDeathAnimMotors_Parms StopDeathAnimMotors_Parms;

	this->ProcessEvent ( pFnStopDeathAnimMotors, &StopDeathAnimMotors_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.StartDeathAnimMotors
// [0x00020002] 
// Parameters infos:

void UKFSM_DeathAnim::StartDeathAnimMotors ( )
{
	static UFunction* pFnStartDeathAnimMotors = NULL;

	if ( ! pFnStartDeathAnimMotors )
		pFnStartDeathAnimMotors = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.StartDeathAnimMotors" );

	UKFSM_DeathAnim_execStartDeathAnimMotors_Parms StartDeathAnimMotors_Parms;

	this->ProcessEvent ( pFnStartDeathAnimMotors, &StartDeathAnimMotors_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_DeathAnim::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.SpecialMoveEnded" );

	UKFSM_DeathAnim_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_DeathAnim::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.AnimEndNotify" );

	UKFSM_DeathAnim_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.GetDeathAnimation
// [0x00024000] 
// Parameters infos:

void UKFSM_DeathAnim::GetDeathAnimation ( )
{
	static UFunction* pFnGetDeathAnimation = NULL;

	if ( ! pFnGetDeathAnimation )
		pFnGetDeathAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.GetDeathAnimation" );

	UKFSM_DeathAnim_execGetDeathAnimation_Parms GetDeathAnimation_Parms;

	this->ProcessEvent ( pFnGetDeathAnimation, &GetDeathAnimation_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.PlayDeathAnimation
// [0x00024002] 
// Parameters infos:

void UKFSM_DeathAnim::PlayDeathAnimation ( )
{
	static UFunction* pFnPlayDeathAnimation = NULL;

	if ( ! pFnPlayDeathAnimation )
		pFnPlayDeathAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.PlayDeathAnimation" );

	UKFSM_DeathAnim_execPlayDeathAnimation_Parms PlayDeathAnimation_Parms;

	this->ProcessEvent ( pFnPlayDeathAnimation, &PlayDeathAnimation_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_DeathAnim::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.InternalCanDoSpecialMove" );

	UKFSM_DeathAnim_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_DeathAnim.PackSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_DeathAnim::PackSMFlags ( )
{
	static UFunction* pFnPackSMFlags = NULL;

	if ( ! pFnPackSMFlags )
		pFnPackSMFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_DeathAnim.PackSMFlags" );

	UKFSM_DeathAnim_execPackSMFlags_Parms PackSMFlags_Parms;

	this->ProcessEvent ( pFnPackSMFlags, &PackSMFlags_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Grab.UpdateLastMeleeTime
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Grab::UpdateLastMeleeTime ( )
{
	static UFunction* pFnUpdateLastMeleeTime = NULL;

	if ( ! pFnUpdateLastMeleeTime )
		pFnUpdateLastMeleeTime = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Grab.UpdateLastMeleeTime" );

	UAICommand_Attack_Grab_execUpdateLastMeleeTime_Parms UpdateLastMeleeTime_Parms;

	this->ProcessEvent ( pFnUpdateLastMeleeTime, &UpdateLastMeleeTime_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Grab.NotifyEnemyChanged
// [0x00024002] 
// Parameters infos:

void UAICommand_Attack_Grab::NotifyEnemyChanged ( )
{
	static UFunction* pFnNotifyEnemyChanged = NULL;

	if ( ! pFnNotifyEnemyChanged )
		pFnNotifyEnemyChanged = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Grab.NotifyEnemyChanged" );

	UAICommand_Attack_Grab_execNotifyEnemyChanged_Parms NotifyEnemyChanged_Parms;

	this->ProcessEvent ( pFnNotifyEnemyChanged, &NotifyEnemyChanged_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Grab.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Grab::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Grab.Popped" );

	UAICommand_Attack_Grab_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Grab.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Grab::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Grab.Paused" );

	UAICommand_Attack_Grab_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Grab.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Grab::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Grab.Resumed" );

	UAICommand_Attack_Grab_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Grab.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Grab::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Grab.Pushed" );

	UAICommand_Attack_Grab_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Grab.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_Attack_Grab::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Grab.GetDumpString" );

	UAICommand_Attack_Grab_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Grab.Grab
// [0x00026002] 
// Parameters infos:

void UAICommand_Attack_Grab::Grab ( )
{
	static UFunction* pFnGrab = NULL;

	if ( ! pFnGrab )
		pFnGrab = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Grab.Grab" );

	UAICommand_Attack_Grab_execGrab_Parms Grab_Parms;

	this->ProcessEvent ( pFnGrab, &Grab_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Kick.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Kick::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Kick.Popped" );

	UAICommand_Attack_Kick_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Kick.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Attack_Kick::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Kick.Pushed" );

	UAICommand_Attack_Kick_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Attack_Kick.Kick
// [0x00026002] 
// Parameters infos:

void UAICommand_Attack_Kick::Kick ( )
{
	static UFunction* pFnKick = NULL;

	if ( ! pFnKick )
		pFnKick = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Attack_Kick.Kick" );

	UAICommand_Attack_Kick_execKick_Parms Kick_Parms;

	this->ProcessEvent ( pFnKick, &Kick_Parms, NULL );
};

// Function KFGame.AICommand_TauntEnemy.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_TauntEnemy::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_TauntEnemy.Popped" );

	UAICommand_TauntEnemy_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_TauntEnemy.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_TauntEnemy::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_TauntEnemy.Pushed" );

	UAICommand_TauntEnemy_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_TauntEnemy.Taunt
// [0x00026002] 
// Parameters infos:

void UAICommand_TauntEnemy::Taunt ( )
{
	static UFunction* pFnTaunt = NULL;

	if ( ! pFnTaunt )
		pFnTaunt = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_TauntEnemy.Taunt" );

	UAICommand_TauntEnemy_execTaunt_Parms Taunt_Parms;

	this->ProcessEvent ( pFnTaunt, &Taunt_Parms, NULL );
};

// Function KFGame.AICommand_Base_Crawler.SetTempDest
// [0x00820002] 
// Parameters infos:

void UAICommand_Base_Crawler::SetTempDest ( )
{
	static UFunction* pFnSetTempDest = NULL;

	if ( ! pFnSetTempDest )
		pFnSetTempDest = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Crawler.SetTempDest" );

	UAICommand_Base_Crawler_execSetTempDest_Parms SetTempDest_Parms;

	this->ProcessEvent ( pFnSetTempDest, &SetTempDest_Parms, NULL );
};

// Function KFGame.AICommand_Base_Crawler.CheckWalls
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Crawler::CheckWalls ( )
{
	static UFunction* pFnCheckWalls = NULL;

	if ( ! pFnCheckWalls )
		pFnCheckWalls = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Crawler.CheckWalls" );

	UAICommand_Base_Crawler_execCheckWalls_Parms CheckWalls_Parms;

	this->ProcessEvent ( pFnCheckWalls, &CheckWalls_Parms, NULL );
};

// Function KFGame.AICommand_Base_Crawler.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Crawler::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Crawler.Resumed" );

	UAICommand_Base_Crawler_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_Base_Crawler.SightCheck
// [0x00020000] 
// Parameters infos:

void UAICommand_Base_Crawler::SightCheck ( )
{
	static UFunction* pFnSightCheck = NULL;

	if ( ! pFnSightCheck )
		pFnSightCheck = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Crawler.SightCheck" );

	UAICommand_Base_Crawler_execSightCheck_Parms SightCheck_Parms;

	this->ProcessEvent ( pFnSightCheck, &SightCheck_Parms, NULL );
};

// Function KFGame.AICommand_Base_Crawler.BeginMoveToWall
// [0x00020000] 
// Parameters infos:

void UAICommand_Base_Crawler::BeginMoveToWall ( )
{
	static UFunction* pFnBeginMoveToWall = NULL;

	if ( ! pFnBeginMoveToWall )
		pFnBeginMoveToWall = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Crawler.BeginMoveToWall" );

	UAICommand_Base_Crawler_execBeginMoveToWall_Parms BeginMoveToWall_Parms;

	this->ProcessEvent ( pFnBeginMoveToWall, &BeginMoveToWall_Parms, NULL );
};

// Function KFGame.AICommand_Base_Crawler.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Crawler::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Crawler.Paused" );

	UAICommand_Base_Crawler_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_Base_Crawler.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Base_Crawler::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Base_Crawler.Pushed" );

	UAICommand_Base_Crawler_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.DetachShieldFX
// [0x00020100] 
// Parameters infos:

void AKFPawn_ZedHansBase::DetachShieldFX ( )
{
	static UFunction* pFnDetachShieldFX = NULL;

	if ( ! pFnDetachShieldFX )
		pFnDetachShieldFX = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.DetachShieldFX" );

	AKFPawn_ZedHansBase_execDetachShieldFX_Parms DetachShieldFX_Parms;

	this->ProcessEvent ( pFnDetachShieldFX, &DetachShieldFX_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.UpdateShieldColor
// [0x00020100] 
// Parameters infos:

void AKFPawn_ZedHansBase::UpdateShieldColor ( )
{
	static UFunction* pFnUpdateShieldColor = NULL;

	if ( ! pFnUpdateShieldColor )
		pFnUpdateShieldColor = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.UpdateShieldColor" );

	AKFPawn_ZedHansBase_execUpdateShieldColor_Parms UpdateShieldColor_Parms;

	this->ProcessEvent ( pFnUpdateShieldColor, &UpdateShieldColor_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.ApplyBloodDecals
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHansBase::ApplyBloodDecals ( )
{
	static UFunction* pFnApplyBloodDecals = NULL;

	if ( ! pFnApplyBloodDecals )
		pFnApplyBloodDecals = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.ApplyBloodDecals" );

	AKFPawn_ZedHansBase_execApplyBloodDecals_Parms ApplyBloodDecals_Parms;

	this->ProcessEvent ( pFnApplyBloodDecals, &ApplyBloodDecals_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.ANIMNOTIFY_AoENerveGas
// [0x00020100] 
// Parameters infos:

void AKFPawn_ZedHansBase::ANIMNOTIFY_AoENerveGas ( )
{
	static UFunction* pFnANIMNOTIFY_AoENerveGas = NULL;

	if ( ! pFnANIMNOTIFY_AoENerveGas )
		pFnANIMNOTIFY_AoENerveGas = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.ANIMNOTIFY_AoENerveGas" );

	AKFPawn_ZedHansBase_execANIMNOTIFY_AoENerveGas_Parms ANIMNOTIFY_AoENerveGas_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_AoENerveGas, &ANIMNOTIFY_AoENerveGas_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.NeedToTurnEx
// [0x00824002] 
// Parameters infos:

void AKFPawn_ZedHansBase::NeedToTurnEx ( )
{
	static UFunction* pFnNeedToTurnEx = NULL;

	if ( ! pFnNeedToTurnEx )
		pFnNeedToTurnEx = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.NeedToTurnEx" );

	AKFPawn_ZedHansBase_execNeedToTurnEx_Parms NeedToTurnEx_Parms;

	this->ProcessEvent ( pFnNeedToTurnEx, &NeedToTurnEx_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.HuntAndHealBump
// [0x00820002] 
// Parameters infos:

void AKFPawn_ZedHansBase::HuntAndHealBump ( )
{
	static UFunction* pFnHuntAndHealBump = NULL;

	if ( ! pFnHuntAndHealBump )
		pFnHuntAndHealBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.HuntAndHealBump" );

	AKFPawn_ZedHansBase_execHuntAndHealBump_Parms HuntAndHealBump_Parms;

	this->ProcessEvent ( pFnHuntAndHealBump, &HuntAndHealBump_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.Bump
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHansBase::eventBump ( )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.Bump" );

	AKFPawn_ZedHansBase_eventBump_Parms Bump_Parms;

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.ClearDOTs
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHansBase::ClearDOTs ( )
{
	static UFunction* pFnClearDOTs = NULL;

	if ( ! pFnClearDOTs )
		pFnClearDOTs = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.ClearDOTs" );

	AKFPawn_ZedHansBase_execClearDOTs_Parms ClearDOTs_Parms;

	this->ProcessEvent ( pFnClearDOTs, &ClearDOTs_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.SummonMinions
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::SummonMinions ( )
{
	static UFunction* pFnSummonMinions = NULL;

	if ( ! pFnSummonMinions )
		pFnSummonMinions = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.SummonMinions" );

	AKFPawn_ZedHansBase_execSummonMinions_Parms SummonMinions_Parms;

	this->ProcessEvent ( pFnSummonMinions, &SummonMinions_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.GetHealAmountForThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::GetHealAmountForThisPhase ( )
{
	static UFunction* pFnGetHealAmountForThisPhase = NULL;

	if ( ! pFnGetHealAmountForThisPhase )
		pFnGetHealAmountForThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.GetHealAmountForThisPhase" );

	AKFPawn_ZedHansBase_execGetHealAmountForThisPhase_Parms GetHealAmountForThisPhase_Parms;

	this->ProcessEvent ( pFnGetHealAmountForThisPhase, &GetHealAmountForThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.Timer_ResetShieldHealthPct
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::Timer_ResetShieldHealthPct ( )
{
	static UFunction* pFnTimer_ResetShieldHealthPct = NULL;

	if ( ! pFnTimer_ResetShieldHealthPct )
		pFnTimer_ResetShieldHealthPct = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.Timer_ResetShieldHealthPct" );

	AKFPawn_ZedHansBase_execTimer_ResetShieldHealthPct_Parms Timer_ResetShieldHealthPct_Parms;

	this->ProcessEvent ( pFnTimer_ResetShieldHealthPct, &Timer_ResetShieldHealthPct_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.SetShieldScale
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::SetShieldScale ( )
{
	static UFunction* pFnSetShieldScale = NULL;

	if ( ! pFnSetShieldScale )
		pFnSetShieldScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.SetShieldScale" );

	AKFPawn_ZedHansBase_execSetShieldScale_Parms SetShieldScale_Parms;

	this->ProcessEvent ( pFnSetShieldScale, &SetShieldScale_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.SetHuntAndHealMode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHansBase::SetHuntAndHealMode ( )
{
	static UFunction* pFnSetHuntAndHealMode = NULL;

	if ( ! pFnSetHuntAndHealMode )
		pFnSetHuntAndHealMode = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.SetHuntAndHealMode" );

	AKFPawn_ZedHansBase_execSetHuntAndHealMode_Parms SetHuntAndHealMode_Parms;

	this->ProcessEvent ( pFnSetHuntAndHealMode, &SetHuntAndHealMode_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.PlayGrenadeDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::PlayGrenadeDialog ( )
{
	static UFunction* pFnPlayGrenadeDialog = NULL;

	if ( ! pFnPlayGrenadeDialog )
		pFnPlayGrenadeDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.PlayGrenadeDialog" );

	AKFPawn_ZedHansBase_execPlayGrenadeDialog_Parms PlayGrenadeDialog_Parms;

	this->ProcessEvent ( pFnPlayGrenadeDialog, &PlayGrenadeDialog_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.PlayDrawGunsDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::PlayDrawGunsDialog ( )
{
	static UFunction* pFnPlayDrawGunsDialog = NULL;

	if ( ! pFnPlayDrawGunsDialog )
		pFnPlayDrawGunsDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.PlayDrawGunsDialog" );

	AKFPawn_ZedHansBase_execPlayDrawGunsDialog_Parms PlayDrawGunsDialog_Parms;

	this->ProcessEvent ( pFnPlayDrawGunsDialog, &PlayDrawGunsDialog_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanMoveWhileThrowingGrenades
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanMoveWhileThrowingGrenades ( )
{
	static UFunction* pFnCanMoveWhileThrowingGrenades = NULL;

	if ( ! pFnCanMoveWhileThrowingGrenades )
		pFnCanMoveWhileThrowingGrenades = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanMoveWhileThrowingGrenades" );

	AKFPawn_ZedHansBase_execCanMoveWhileThrowingGrenades_Parms CanMoveWhileThrowingGrenades_Parms;

	this->ProcessEvent ( pFnCanMoveWhileThrowingGrenades, &CanMoveWhileThrowingGrenades_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.SetActiveGrenadeClassNerveGas
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::SetActiveGrenadeClassNerveGas ( )
{
	static UFunction* pFnSetActiveGrenadeClassNerveGas = NULL;

	if ( ! pFnSetActiveGrenadeClassNerveGas )
		pFnSetActiveGrenadeClassNerveGas = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.SetActiveGrenadeClassNerveGas" );

	AKFPawn_ZedHansBase_execSetActiveGrenadeClassNerveGas_Parms SetActiveGrenadeClassNerveGas_Parms;

	this->ProcessEvent ( pFnSetActiveGrenadeClassNerveGas, &SetActiveGrenadeClassNerveGas_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.SetActiveGrenadeClassSmoke
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::SetActiveGrenadeClassSmoke ( )
{
	static UFunction* pFnSetActiveGrenadeClassSmoke = NULL;

	if ( ! pFnSetActiveGrenadeClassSmoke )
		pFnSetActiveGrenadeClassSmoke = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.SetActiveGrenadeClassSmoke" );

	AKFPawn_ZedHansBase_execSetActiveGrenadeClassSmoke_Parms SetActiveGrenadeClassSmoke_Parms;

	this->ProcessEvent ( pFnSetActiveGrenadeClassSmoke, &SetActiveGrenadeClassSmoke_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.SetActiveGrenadeClassGrenade
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::SetActiveGrenadeClassGrenade ( )
{
	static UFunction* pFnSetActiveGrenadeClassGrenade = NULL;

	if ( ! pFnSetActiveGrenadeClassGrenade )
		pFnSetActiveGrenadeClassGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.SetActiveGrenadeClassGrenade" );

	AKFPawn_ZedHansBase_execSetActiveGrenadeClassGrenade_Parms SetActiveGrenadeClassGrenade_Parms;

	this->ProcessEvent ( pFnSetActiveGrenadeClassGrenade, &SetActiveGrenadeClassGrenade_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CacheGrenadeThrowLocation
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CacheGrenadeThrowLocation ( )
{
	static UFunction* pFnCacheGrenadeThrowLocation = NULL;

	if ( ! pFnCacheGrenadeThrowLocation )
		pFnCacheGrenadeThrowLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CacheGrenadeThrowLocation" );

	AKFPawn_ZedHansBase_execCacheGrenadeThrowLocation_Parms CacheGrenadeThrowLocation_Parms;

	this->ProcessEvent ( pFnCacheGrenadeThrowLocation, &CacheGrenadeThrowLocation_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.IsThrowingGrenade
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::IsThrowingGrenade ( )
{
	static UFunction* pFnIsThrowingGrenade = NULL;

	if ( ! pFnIsThrowingGrenade )
		pFnIsThrowingGrenade = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.IsThrowingGrenade" );

	AKFPawn_ZedHansBase_execIsThrowingGrenade_Parms IsThrowingGrenade_Parms;

	this->ProcessEvent ( pFnIsThrowingGrenade, &IsThrowingGrenade_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanSmokeTossInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanSmokeTossInThisPhase ( )
{
	static UFunction* pFnCanSmokeTossInThisPhase = NULL;

	if ( ! pFnCanSmokeTossInThisPhase )
		pFnCanSmokeTossInThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanSmokeTossInThisPhase" );

	AKFPawn_ZedHansBase_execCanSmokeTossInThisPhase_Parms CanSmokeTossInThisPhase_Parms;

	this->ProcessEvent ( pFnCanSmokeTossInThisPhase, &CanSmokeTossInThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanGrenadeBarrageInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanGrenadeBarrageInThisPhase ( )
{
	static UFunction* pFnCanGrenadeBarrageInThisPhase = NULL;

	if ( ! pFnCanGrenadeBarrageInThisPhase )
		pFnCanGrenadeBarrageInThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanGrenadeBarrageInThisPhase" );

	AKFPawn_ZedHansBase_execCanGrenadeBarrageInThisPhase_Parms CanGrenadeBarrageInThisPhase_Parms;

	this->ProcessEvent ( pFnCanGrenadeBarrageInThisPhase, &CanGrenadeBarrageInThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanTossGrenadeInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanTossGrenadeInThisPhase ( )
{
	static UFunction* pFnCanTossGrenadeInThisPhase = NULL;

	if ( ! pFnCanTossGrenadeInThisPhase )
		pFnCanTossGrenadeInThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanTossGrenadeInThisPhase" );

	AKFPawn_ZedHansBase_execCanTossGrenadeInThisPhase_Parms CanTossGrenadeInThisPhase_Parms;

	this->ProcessEvent ( pFnCanTossGrenadeInThisPhase, &CanTossGrenadeInThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanUseGunsInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanUseGunsInThisPhase ( )
{
	static UFunction* pFnCanUseGunsInThisPhase = NULL;

	if ( ! pFnCanUseGunsInThisPhase )
		pFnCanUseGunsInThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanUseGunsInThisPhase" );

	AKFPawn_ZedHansBase_execCanUseGunsInThisPhase_Parms CanUseGunsInThisPhase_Parms;

	this->ProcessEvent ( pFnCanUseGunsInThisPhase, &CanUseGunsInThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanBarrageNerveGasInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanBarrageNerveGasInThisPhase ( )
{
	static UFunction* pFnCanBarrageNerveGasInThisPhase = NULL;

	if ( ! pFnCanBarrageNerveGasInThisPhase )
		pFnCanBarrageNerveGasInThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanBarrageNerveGasInThisPhase" );

	AKFPawn_ZedHansBase_execCanBarrageNerveGasInThisPhase_Parms CanBarrageNerveGasInThisPhase_Parms;

	this->ProcessEvent ( pFnCanBarrageNerveGasInThisPhase, &CanBarrageNerveGasInThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanTossNerveGasInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanTossNerveGasInThisPhase ( )
{
	static UFunction* pFnCanTossNerveGasInThisPhase = NULL;

	if ( ! pFnCanTossNerveGasInThisPhase )
		pFnCanTossNerveGasInThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanTossNerveGasInThisPhase" );

	AKFPawn_ZedHansBase_execCanTossNerveGasInThisPhase_Parms CanTossNerveGasInThisPhase_Parms;

	this->ProcessEvent ( pFnCanTossNerveGasInThisPhase, &CanTossNerveGasInThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.OffensiveGrenadeCooldownComplete
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::OffensiveGrenadeCooldownComplete ( )
{
	static UFunction* pFnOffensiveGrenadeCooldownComplete = NULL;

	if ( ! pFnOffensiveGrenadeCooldownComplete )
		pFnOffensiveGrenadeCooldownComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.OffensiveGrenadeCooldownComplete" );

	AKFPawn_ZedHansBase_execOffensiveGrenadeCooldownComplete_Parms OffensiveGrenadeCooldownComplete_Parms;

	this->ProcessEvent ( pFnOffensiveGrenadeCooldownComplete, &OffensiveGrenadeCooldownComplete_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanBlock
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanBlock ( )
{
	static UFunction* pFnCanBlock = NULL;

	if ( ! pFnCanBlock )
		pFnCanBlock = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanBlock" );

	AKFPawn_ZedHansBase_execCanBlock_Parms CanBlock_Parms;

	this->ProcessEvent ( pFnCanBlock, &CanBlock_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.ShouldPlaySpecialMeleeAnims
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::ShouldPlaySpecialMeleeAnims ( )
{
	static UFunction* pFnShouldPlaySpecialMeleeAnims = NULL;

	if ( ! pFnShouldPlaySpecialMeleeAnims )
		pFnShouldPlaySpecialMeleeAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.ShouldPlaySpecialMeleeAnims" );

	AKFPawn_ZedHansBase_execShouldPlaySpecialMeleeAnims_Parms ShouldPlaySpecialMeleeAnims_Parms;

	this->ProcessEvent ( pFnShouldPlaySpecialMeleeAnims, &ShouldPlaySpecialMeleeAnims_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.DesireSprintingInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::DesireSprintingInThisPhase ( )
{
	static UFunction* pFnDesireSprintingInThisPhase = NULL;

	if ( ! pFnDesireSprintingInThisPhase )
		pFnDesireSprintingInThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.DesireSprintingInThisPhase" );

	AKFPawn_ZedHansBase_execDesireSprintingInThisPhase_Parms DesireSprintingInThisPhase_Parms;

	this->ProcessEvent ( pFnDesireSprintingInThisPhase, &DesireSprintingInThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.CanFrenzyInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::CanFrenzyInThisPhase ( )
{
	static UFunction* pFnCanFrenzyInThisPhase = NULL;

	if ( ! pFnCanFrenzyInThisPhase )
		pFnCanFrenzyInThisPhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.CanFrenzyInThisPhase" );

	AKFPawn_ZedHansBase_execCanFrenzyInThisPhase_Parms CanFrenzyInThisPhase_Parms;

	this->ProcessEvent ( pFnCanFrenzyInThisPhase, &CanFrenzyInThisPhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.BreakShield
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHansBase::BreakShield ( )
{
	static UFunction* pFnBreakShield = NULL;

	if ( ! pFnBreakShield )
		pFnBreakShield = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.BreakShield" );

	AKFPawn_ZedHansBase_execBreakShield_Parms BreakShield_Parms;

	this->ProcessEvent ( pFnBreakShield, &BreakShield_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.UpdateShieldHealth
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedHansBase::UpdateShieldHealth ( )
{
	static UFunction* pFnUpdateShieldHealth = NULL;

	if ( ! pFnUpdateShieldHealth )
		pFnUpdateShieldHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.UpdateShieldHealth" );

	AKFPawn_ZedHansBase_execUpdateShieldHealth_Parms UpdateShieldHealth_Parms;

	this->ProcessEvent ( pFnUpdateShieldHealth, &UpdateShieldHealth_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.AdjustAffliction
// [0x00420102] 
// Parameters infos:

void AKFPawn_ZedHansBase::AdjustAffliction ( )
{
	static UFunction* pFnAdjustAffliction = NULL;

	if ( ! pFnAdjustAffliction )
		pFnAdjustAffliction = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.AdjustAffliction" );

	AKFPawn_ZedHansBase_execAdjustAffliction_Parms AdjustAffliction_Parms;

	this->ProcessEvent ( pFnAdjustAffliction, &AdjustAffliction_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFPawn_ZedHansBase::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.AdjustDamage" );

	AKFPawn_ZedHansBase_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.SetPhaseCooldowns
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::SetPhaseCooldowns ( )
{
	static UFunction* pFnSetPhaseCooldowns = NULL;

	if ( ! pFnSetPhaseCooldowns )
		pFnSetPhaseCooldowns = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.SetPhaseCooldowns" );

	AKFPawn_ZedHansBase_execSetPhaseCooldowns_Parms SetPhaseCooldowns_Parms;

	this->ProcessEvent ( pFnSetPhaseCooldowns, &SetPhaseCooldowns_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.IncrementBattlePhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::IncrementBattlePhase ( )
{
	static UFunction* pFnIncrementBattlePhase = NULL;

	if ( ! pFnIncrementBattlePhase )
		pFnIncrementBattlePhase = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.IncrementBattlePhase" );

	AKFPawn_ZedHansBase_execIncrementBattlePhase_Parms IncrementBattlePhase_Parms;

	this->ProcessEvent ( pFnIncrementBattlePhase, &IncrementBattlePhase_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHansBase::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.PossessedBy" );

	AKFPawn_ZedHansBase_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function KFGame.KFPawn_ZedHansBase.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHansBase::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFPawn_ZedHansBase.ReplicatedEvent" );

	AKFPawn_ZedHansBase_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.AICommand_BossTheatrics.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_BossTheatrics::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_BossTheatrics.Popped" );

	UAICommand_BossTheatrics_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_BossTheatrics.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_BossTheatrics::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_BossTheatrics.Pushed" );

	UAICommand_BossTheatrics_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_BossTheatrics.DoTheatrics
// [0x00026002] 
// Parameters infos:

void UAICommand_BossTheatrics::DoTheatrics ( )
{
	static UFunction* pFnDoTheatrics = NULL;

	if ( ! pFnDoTheatrics )
		pFnDoTheatrics = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_BossTheatrics.DoTheatrics" );

	UAICommand_BossTheatrics_execDoTheatrics_Parms DoTheatrics_Parms;

	this->ProcessEvent ( pFnDoTheatrics, &DoTheatrics_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Boss_Theatrics.GetALocalKFPlayerController
// [0x00020002] 
// Parameters infos:

void UKFSM_Zed_Boss_Theatrics::GetALocalKFPlayerController ( )
{
	static UFunction* pFnGetALocalKFPlayerController = NULL;

	if ( ! pFnGetALocalKFPlayerController )
		pFnGetALocalKFPlayerController = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Boss_Theatrics.GetALocalKFPlayerController" );

	UKFSM_Zed_Boss_Theatrics_execGetALocalKFPlayerController_Parms GetALocalKFPlayerController_Parms;

	this->ProcessEvent ( pFnGetALocalKFPlayerController, &GetALocalKFPlayerController_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Boss_Theatrics.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Zed_Boss_Theatrics::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Boss_Theatrics.SpecialMoveEnded" );

	UKFSM_Zed_Boss_Theatrics_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Boss_Theatrics.PlayAnimation
// [0x00820002] 
// Parameters infos:

void UKFSM_Zed_Boss_Theatrics::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Boss_Theatrics.PlayAnimation" );

	UKFSM_Zed_Boss_Theatrics_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Boss_Theatrics.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Zed_Boss_Theatrics::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Boss_Theatrics.SpecialMoveStarted" );

	UKFSM_Zed_Boss_Theatrics_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Boss_Theatrics.PackSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Zed_Boss_Theatrics::PackSMFlags ( )
{
	static UFunction* pFnPackSMFlags = NULL;

	if ( ! pFnPackSMFlags )
		pFnPackSMFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Boss_Theatrics.PackSMFlags" );

	UKFSM_Zed_Boss_Theatrics_execPackSMFlags_Parms PackSMFlags_Parms;

	this->ProcessEvent ( pFnPackSMFlags, &PackSMFlags_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Boss_Theatrics.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_Zed_Boss_Theatrics::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Boss_Theatrics.InternalCanDoSpecialMove" );

	UKFSM_Zed_Boss_Theatrics_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_LeapToWall.NotifyHitWall
// [0x00020002] 
// Parameters infos:

void UAICommand_Crawler_LeapToWall::NotifyHitWall ( )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_LeapToWall.NotifyHitWall" );

	UAICommand_Crawler_LeapToWall_execNotifyHitWall_Parms NotifyHitWall_Parms;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_LeapToWall.NotifyFallingHitWall
// [0x00020002] 
// Parameters infos:

void UAICommand_Crawler_LeapToWall::NotifyFallingHitWall ( )
{
	static UFunction* pFnNotifyFallingHitWall = NULL;

	if ( ! pFnNotifyFallingHitWall )
		pFnNotifyFallingHitWall = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_LeapToWall.NotifyFallingHitWall" );

	UAICommand_Crawler_LeapToWall_execNotifyFallingHitWall_Parms NotifyFallingHitWall_Parms;

	this->ProcessEvent ( pFnNotifyFallingHitWall, &NotifyFallingHitWall_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_LeapToWall.NotifyLanded
// [0x00020002] 
// Parameters infos:

void UAICommand_Crawler_LeapToWall::NotifyLanded ( )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_LeapToWall.NotifyLanded" );

	UAICommand_Crawler_LeapToWall_execNotifyLanded_Parms NotifyLanded_Parms;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_LeapToWall.CanChangeEnemy
// [0x00020002] 
// Parameters infos:

void UAICommand_Crawler_LeapToWall::CanChangeEnemy ( )
{
	static UFunction* pFnCanChangeEnemy = NULL;

	if ( ! pFnCanChangeEnemy )
		pFnCanChangeEnemy = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_LeapToWall.CanChangeEnemy" );

	UAICommand_Crawler_LeapToWall_execCanChangeEnemy_Parms CanChangeEnemy_Parms;

	this->ProcessEvent ( pFnCanChangeEnemy, &CanChangeEnemy_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_LeapToWall.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Crawler_LeapToWall::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_LeapToWall.Popped" );

	UAICommand_Crawler_LeapToWall_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_LeapToWall.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Crawler_LeapToWall::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_LeapToWall.Pushed" );

	UAICommand_Crawler_LeapToWall_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_LeapToWall.LeapToWall
// [0x00022002] 
// Parameters infos:

void UAICommand_Crawler_LeapToWall::LeapToWall ( )
{
	static UFunction* pFnLeapToWall = NULL;

	if ( ! pFnLeapToWall )
		pFnLeapToWall = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_LeapToWall.LeapToWall" );

	UAICommand_Crawler_LeapToWall_execLeapToWall_Parms LeapToWall_Parms;

	this->ProcessEvent ( pFnLeapToWall, &LeapToWall_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_MoveToGoal.NotifyLanded
// [0x00020002] 
// Parameters infos:

void UAICommand_Crawler_MoveToGoal::NotifyLanded ( )
{
	static UFunction* pFnNotifyLanded = NULL;

	if ( ! pFnNotifyLanded )
		pFnNotifyLanded = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_MoveToGoal.NotifyLanded" );

	UAICommand_Crawler_MoveToGoal_execNotifyLanded_Parms NotifyLanded_Parms;

	this->ProcessEvent ( pFnNotifyLanded, &NotifyLanded_Parms, NULL );
};

// Function KFGame.AICommand_Crawler_MoveToGoal.CrawlerMoveToGoal
// [0x00026002] 
// Parameters infos:

void UAICommand_Crawler_MoveToGoal::CrawlerMoveToGoal ( )
{
	static UFunction* pFnCrawlerMoveToGoal = NULL;

	if ( ! pFnCrawlerMoveToGoal )
		pFnCrawlerMoveToGoal = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Crawler_MoveToGoal.CrawlerMoveToGoal" );

	UAICommand_Crawler_MoveToGoal_execCrawlerMoveToGoal_Parms CrawlerMoveToGoal_Parms;

	this->ProcessEvent ( pFnCrawlerMoveToGoal, &CrawlerMoveToGoal_Parms, NULL );
};

// Function KFGame.AICommand_PushedBySM.SpecialMoveTimeout
// [0x00020002] 
// Parameters infos:

void UAICommand_PushedBySM::SpecialMoveTimeout ( )
{
	static UFunction* pFnSpecialMoveTimeout = NULL;

	if ( ! pFnSpecialMoveTimeout )
		pFnSpecialMoveTimeout = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PushedBySM.SpecialMoveTimeout" );

	UAICommand_PushedBySM_execSpecialMoveTimeout_Parms SpecialMoveTimeout_Parms;

	this->ProcessEvent ( pFnSpecialMoveTimeout, &SpecialMoveTimeout_Parms, NULL );
};

// Function KFGame.AICommand_PushedBySM.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_PushedBySM::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PushedBySM.Popped" );

	UAICommand_PushedBySM_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_PushedBySM.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_PushedBySM::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PushedBySM.Pushed" );

	UAICommand_PushedBySM_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_PushedBySM.AllowTransitionTo
// [0x00020002] 
// Parameters infos:

void UAICommand_PushedBySM::AllowTransitionTo ( )
{
	static UFunction* pFnAllowTransitionTo = NULL;

	if ( ! pFnAllowTransitionTo )
		pFnAllowTransitionTo = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PushedBySM.AllowTransitionTo" );

	UAICommand_PushedBySM_execAllowTransitionTo_Parms AllowTransitionTo_Parms;

	this->ProcessEvent ( pFnAllowTransitionTo, &AllowTransitionTo_Parms, NULL );
};

// Function KFGame.AICommand_PushedBySM.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_PushedBySM::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PushedBySM.GetDumpString" );

	UAICommand_PushedBySM_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );
};

// Function KFGame.AICommand_PushedBySM.PushSpecialMoveCommand
// [0x00022002] 
// Parameters infos:

void UAICommand_PushedBySM::PushSpecialMoveCommand ( )
{
	static UFunction* pFnPushSpecialMoveCommand = NULL;

	if ( ! pFnPushSpecialMoveCommand )
		pFnPushSpecialMoveCommand = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PushedBySM.PushSpecialMoveCommand" );

	UAICommand_PushedBySM_execPushSpecialMoveCommand_Parms PushSpecialMoveCommand_Parms;

	this->ProcessEvent ( pFnPushSpecialMoveCommand, &PushSpecialMoveCommand_Parms, NULL );
};

// Function KFGame.AICommand_CrawlerEmerge.SpecialMoveTimeout
// [0x00020002] 
// Parameters infos:

void UAICommand_CrawlerEmerge::SpecialMoveTimeout ( )
{
	static UFunction* pFnSpecialMoveTimeout = NULL;

	if ( ! pFnSpecialMoveTimeout )
		pFnSpecialMoveTimeout = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_CrawlerEmerge.SpecialMoveTimeout" );

	UAICommand_CrawlerEmerge_execSpecialMoveTimeout_Parms SpecialMoveTimeout_Parms;

	this->ProcessEvent ( pFnSpecialMoveTimeout, &SpecialMoveTimeout_Parms, NULL );
};

// Function KFGame.AICommand_CrawlerEmerge.GetUpdatedAnchor
// [0x00020002] 
// Parameters infos:

void UAICommand_CrawlerEmerge::GetUpdatedAnchor ( )
{
	static UFunction* pFnGetUpdatedAnchor = NULL;

	if ( ! pFnGetUpdatedAnchor )
		pFnGetUpdatedAnchor = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_CrawlerEmerge.GetUpdatedAnchor" );

	UAICommand_CrawlerEmerge_execGetUpdatedAnchor_Parms GetUpdatedAnchor_Parms;

	this->ProcessEvent ( pFnGetUpdatedAnchor, &GetUpdatedAnchor_Parms, NULL );
};

// Function KFGame.AICommand_CrawlerEmerge.GetStartAnchor
// [0x00020002] 
// Parameters infos:

void UAICommand_CrawlerEmerge::GetStartAnchor ( )
{
	static UFunction* pFnGetStartAnchor = NULL;

	if ( ! pFnGetStartAnchor )
		pFnGetStartAnchor = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_CrawlerEmerge.GetStartAnchor" );

	UAICommand_CrawlerEmerge_execGetStartAnchor_Parms GetStartAnchor_Parms;

	this->ProcessEvent ( pFnGetStartAnchor, &GetStartAnchor_Parms, NULL );
};

// Function KFGame.AICommand_CrawlerEmerge.Emerge
// [0x00022002] 
// Parameters infos:

void UAICommand_CrawlerEmerge::Emerge ( )
{
	static UFunction* pFnEmerge = NULL;

	if ( ! pFnEmerge )
		pFnEmerge = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_CrawlerEmerge.Emerge" );

	UAICommand_CrawlerEmerge_execEmerge_Parms Emerge_Parms;

	this->ProcessEvent ( pFnEmerge, &Emerge_Parms, NULL );
};

// Function KFGame.AICommand_Debug.DrawDebug
// [0x00020100] 
// Parameters infos:

void UAICommand_Debug::DrawDebug ( )
{
	static UFunction* pFnDrawDebug = NULL;

	if ( ! pFnDrawDebug )
		pFnDrawDebug = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.DrawDebug" );

	UAICommand_Debug_execDrawDebug_Parms DrawDebug_Parms;

	this->ProcessEvent ( pFnDrawDebug, &DrawDebug_Parms, NULL );
};

// Function KFGame.AICommand_Debug.CanSeePawn
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::CanSeePawn ( )
{
	static UFunction* pFnCanSeePawn = NULL;

	if ( ! pFnCanSeePawn )
		pFnCanSeePawn = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.CanSeePawn" );

	UAICommand_Debug_execCanSeePawn_Parms CanSeePawn_Parms;

	this->ProcessEvent ( pFnCanSeePawn, &CanSeePawn_Parms, NULL );
};

// Function KFGame.AICommand_Debug.ReadyToCharge
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::ReadyToCharge ( )
{
	static UFunction* pFnReadyToCharge = NULL;

	if ( ! pFnReadyToCharge )
		pFnReadyToCharge = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.ReadyToCharge" );

	UAICommand_Debug_execReadyToCharge_Parms ReadyToCharge_Parms;

	this->ProcessEvent ( pFnReadyToCharge, &ReadyToCharge_Parms, NULL );
};

// Function KFGame.AICommand_Debug.EnableNotifyHitWall
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::EnableNotifyHitWall ( )
{
	static UFunction* pFnEnableNotifyHitWall = NULL;

	if ( ! pFnEnableNotifyHitWall )
		pFnEnableNotifyHitWall = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.EnableNotifyHitWall" );

	UAICommand_Debug_execEnableNotifyHitWall_Parms EnableNotifyHitWall_Parms;

	this->ProcessEvent ( pFnEnableNotifyHitWall, &EnableNotifyHitWall_Parms, NULL );
};

// Function KFGame.AICommand_Debug.NotifyHitWall
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::NotifyHitWall ( )
{
	static UFunction* pFnNotifyHitWall = NULL;

	if ( ! pFnNotifyHitWall )
		pFnNotifyHitWall = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.NotifyHitWall" );

	UAICommand_Debug_execNotifyHitWall_Parms NotifyHitWall_Parms;

	this->ProcessEvent ( pFnNotifyHitWall, &NotifyHitWall_Parms, NULL );
};

// Function KFGame.AICommand_Debug.CheckVision
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::CheckVision ( )
{
	static UFunction* pFnCheckVision = NULL;

	if ( ! pFnCheckVision )
		pFnCheckVision = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.CheckVision" );

	UAICommand_Debug_execCheckVision_Parms CheckVision_Parms;

	this->ProcessEvent ( pFnCheckVision, &CheckVision_Parms, NULL );
};

// Function KFGame.AICommand_Debug.EvaluateThreats
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::EvaluateThreats ( )
{
	static UFunction* pFnEvaluateThreats = NULL;

	if ( ! pFnEvaluateThreats )
		pFnEvaluateThreats = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.EvaluateThreats" );

	UAICommand_Debug_execEvaluateThreats_Parms EvaluateThreats_Parms;

	this->ProcessEvent ( pFnEvaluateThreats, &EvaluateThreats_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_LOS
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_LOS ( )
{
	static UFunction* pFnDebug_LOS = NULL;

	if ( ! pFnDebug_LOS )
		pFnDebug_LOS = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_LOS" );

	UAICommand_Debug_execDebug_LOS_Parms Debug_LOS_Parms;

	this->ProcessEvent ( pFnDebug_LOS, &Debug_LOS_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_CrawlerAttack
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_CrawlerAttack ( )
{
	static UFunction* pFnDebug_CrawlerAttack = NULL;

	if ( ! pFnDebug_CrawlerAttack )
		pFnDebug_CrawlerAttack = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_CrawlerAttack" );

	UAICommand_Debug_execDebug_CrawlerAttack_Parms Debug_CrawlerAttack_Parms;

	this->ProcessEvent ( pFnDebug_CrawlerAttack, &Debug_CrawlerAttack_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_DebugNodes
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_DebugNodes ( )
{
	static UFunction* pFnDebug_DebugNodes = NULL;

	if ( ! pFnDebug_DebugNodes )
		pFnDebug_DebugNodes = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_DebugNodes" );

	UAICommand_Debug_execDebug_DebugNodes_Parms Debug_DebugNodes_Parms;

	this->ProcessEvent ( pFnDebug_DebugNodes, &Debug_DebugNodes_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_Leap
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_Leap ( )
{
	static UFunction* pFnDebug_Leap = NULL;

	if ( ! pFnDebug_Leap )
		pFnDebug_Leap = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_Leap" );

	UAICommand_Debug_execDebug_Leap_Parms Debug_Leap_Parms;

	this->ProcessEvent ( pFnDebug_Leap, &Debug_Leap_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_DebugLines
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_DebugLines ( )
{
	static UFunction* pFnDebug_DebugLines = NULL;

	if ( ! pFnDebug_DebugLines )
		pFnDebug_DebugLines = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_DebugLines" );

	UAICommand_Debug_execDebug_DebugLines_Parms Debug_DebugLines_Parms;

	this->ProcessEvent ( pFnDebug_DebugLines, &Debug_DebugLines_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_Wander
// [0x00024000] 
// Parameters infos:

void UAICommand_Debug::Debug_Wander ( )
{
	static UFunction* pFnDebug_Wander = NULL;

	if ( ! pFnDebug_Wander )
		pFnDebug_Wander = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_Wander" );

	UAICommand_Debug_execDebug_Wander_Parms Debug_Wander_Parms;

	this->ProcessEvent ( pFnDebug_Wander, &Debug_Wander_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_Steering
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_Steering ( )
{
	static UFunction* pFnDebug_Steering = NULL;

	if ( ! pFnDebug_Steering )
		pFnDebug_Steering = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_Steering" );

	UAICommand_Debug_execDebug_Steering_Parms Debug_Steering_Parms;

	this->ProcessEvent ( pFnDebug_Steering, &Debug_Steering_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_StepAside
// [0x00024000] 
// Parameters infos:

void UAICommand_Debug::Debug_StepAside ( )
{
	static UFunction* pFnDebug_StepAside = NULL;

	if ( ! pFnDebug_StepAside )
		pFnDebug_StepAside = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_StepAside" );

	UAICommand_Debug_execDebug_StepAside_Parms Debug_StepAside_Parms;

	this->ProcessEvent ( pFnDebug_StepAside, &Debug_StepAside_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_Enemy
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_Enemy ( )
{
	static UFunction* pFnDebug_Enemy = NULL;

	if ( ! pFnDebug_Enemy )
		pFnDebug_Enemy = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_Enemy" );

	UAICommand_Debug_execDebug_Enemy_Parms Debug_Enemy_Parms;

	this->ProcessEvent ( pFnDebug_Enemy, &Debug_Enemy_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_Hide
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_Hide ( )
{
	static UFunction* pFnDebug_Hide = NULL;

	if ( ! pFnDebug_Hide )
		pFnDebug_Hide = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_Hide" );

	UAICommand_Debug_execDebug_Hide_Parms Debug_Hide_Parms;

	this->ProcessEvent ( pFnDebug_Hide, &Debug_Hide_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_Flank
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_Flank ( )
{
	static UFunction* pFnDebug_Flank = NULL;

	if ( ! pFnDebug_Flank )
		pFnDebug_Flank = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_Flank" );

	UAICommand_Debug_execDebug_Flank_Parms Debug_Flank_Parms;

	this->ProcessEvent ( pFnDebug_Flank, &Debug_Flank_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_Vision
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_Vision ( )
{
	static UFunction* pFnDebug_Vision = NULL;

	if ( ! pFnDebug_Vision )
		pFnDebug_Vision = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_Vision" );

	UAICommand_Debug_execDebug_Vision_Parms Debug_Vision_Parms;

	this->ProcessEvent ( pFnDebug_Vision, &Debug_Vision_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_MoveForward
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_MoveForward ( )
{
	static UFunction* pFnDebug_MoveForward = NULL;

	if ( ! pFnDebug_MoveForward )
		pFnDebug_MoveForward = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_MoveForward" );

	UAICommand_Debug_execDebug_MoveForward_Parms Debug_MoveForward_Parms;

	this->ProcessEvent ( pFnDebug_MoveForward, &Debug_MoveForward_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug_Charge
// [0x00020000] 
// Parameters infos:

void UAICommand_Debug::Debug_Charge ( )
{
	static UFunction* pFnDebug_Charge = NULL;

	if ( ! pFnDebug_Charge )
		pFnDebug_Charge = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug_Charge" );

	UAICommand_Debug_execDebug_Charge_Parms Debug_Charge_Parms;

	this->ProcessEvent ( pFnDebug_Charge, &Debug_Charge_Parms, NULL );
};

// Function KFGame.AICommand_Debug.NotifyPlayerBecameVisible
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::NotifyPlayerBecameVisible ( )
{
	static UFunction* pFnNotifyPlayerBecameVisible = NULL;

	if ( ! pFnNotifyPlayerBecameVisible )
		pFnNotifyPlayerBecameVisible = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.NotifyPlayerBecameVisible" );

	UAICommand_Debug_execNotifyPlayerBecameVisible_Parms NotifyPlayerBecameVisible_Parms;

	this->ProcessEvent ( pFnNotifyPlayerBecameVisible, &NotifyPlayerBecameVisible_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Popped" );

	UAICommand_Debug_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Debug.GrabTestTimer
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::GrabTestTimer ( )
{
	static UFunction* pFnGrabTestTimer = NULL;

	if ( ! pFnGrabTestTimer )
		pFnGrabTestTimer = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.GrabTestTimer" );

	UAICommand_Debug_execGrabTestTimer_Parms GrabTestTimer_Parms;

	this->ProcessEvent ( pFnGrabTestTimer, &GrabTestTimer_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Resumed" );

	UAICommand_Debug_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Debug::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Pushed" );

	UAICommand_Debug_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Debug.Debug
// [0x00022002] 
// Parameters infos:

void UAICommand_Debug::Debug ( )
{
	static UFunction* pFnDebug = NULL;

	if ( ! pFnDebug )
		pFnDebug = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Debug.Debug" );

	UAICommand_Debug_execDebug_Parms Debug_Parms;

	this->ProcessEvent ( pFnDebug, &Debug_Parms, NULL );
};

// Function KFGame.AICommand_Wander.CanSeePawn
// [0x00020002] 
// Parameters infos:

void UAICommand_Wander::CanSeePawn ( )
{
	static UFunction* pFnCanSeePawn = NULL;

	if ( ! pFnCanSeePawn )
		pFnCanSeePawn = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.CanSeePawn" );

	UAICommand_Wander_execCanSeePawn_Parms CanSeePawn_Parms;

	this->ProcessEvent ( pFnCanSeePawn, &CanSeePawn_Parms, NULL );
};

// Function KFGame.AICommand_Wander.IsPawnVisibleViaTrace
// [0x00820002] 
// Parameters infos:

void UAICommand_Wander::IsPawnVisibleViaTrace ( )
{
	static UFunction* pFnIsPawnVisibleViaTrace = NULL;

	if ( ! pFnIsPawnVisibleViaTrace )
		pFnIsPawnVisibleViaTrace = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.IsPawnVisibleViaTrace" );

	UAICommand_Wander_execIsPawnVisibleViaTrace_Parms IsPawnVisibleViaTrace_Parms;

	this->ProcessEvent ( pFnIsPawnVisibleViaTrace, &IsPawnVisibleViaTrace_Parms, NULL );
};

// Function KFGame.AICommand_Wander.GetMoveDir
// [0x00020002] 
// Parameters infos:

void UAICommand_Wander::GetMoveDir ( )
{
	static UFunction* pFnGetMoveDir = NULL;

	if ( ! pFnGetMoveDir )
		pFnGetMoveDir = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.GetMoveDir" );

	UAICommand_Wander_execGetMoveDir_Parms GetMoveDir_Parms;

	this->ProcessEvent ( pFnGetMoveDir, &GetMoveDir_Parms, NULL );
};

// Function KFGame.AICommand_Wander.Timer_WanderDurationExpired
// [0x00020002] 
// Parameters infos:

void UAICommand_Wander::Timer_WanderDurationExpired ( )
{
	static UFunction* pFnTimer_WanderDurationExpired = NULL;

	if ( ! pFnTimer_WanderDurationExpired )
		pFnTimer_WanderDurationExpired = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.Timer_WanderDurationExpired" );

	UAICommand_Wander_execTimer_WanderDurationExpired_Parms Timer_WanderDurationExpired_Parms;

	this->ProcessEvent ( pFnTimer_WanderDurationExpired, &Timer_WanderDurationExpired_Parms, NULL );
};

// Function KFGame.AICommand_Wander.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Wander::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.Popped" );

	UAICommand_Wander_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Wander.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_Wander::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.Resumed" );

	UAICommand_Wander_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_Wander.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_Wander::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.Paused" );

	UAICommand_Wander_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_Wander.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Wander::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.Pushed" );

	UAICommand_Wander_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Wander.BeginWander
// [0x00026002] 
// Parameters infos:

void UAICommand_Wander::BeginWander ( )
{
	static UFunction* pFnBeginWander = NULL;

	if ( ! pFnBeginWander )
		pFnBeginWander = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Wander.BeginWander" );

	UAICommand_Wander_execBeginWander_Parms BeginWander_Parms;

	this->ProcessEvent ( pFnBeginWander, &BeginWander_Parms, NULL );
};

// Function KFGame.AICommand_DebugTurn.StartMeleeSpecialMove
// [0x00020002] 
// Parameters infos:

void UAICommand_DebugTurn::StartMeleeSpecialMove ( )
{
	static UFunction* pFnStartMeleeSpecialMove = NULL;

	if ( ! pFnStartMeleeSpecialMove )
		pFnStartMeleeSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_DebugTurn.StartMeleeSpecialMove" );

	UAICommand_DebugTurn_execStartMeleeSpecialMove_Parms StartMeleeSpecialMove_Parms;

	this->ProcessEvent ( pFnStartMeleeSpecialMove, &StartMeleeSpecialMove_Parms, NULL );
};

// Function KFGame.AICommand_DebugTurn.CheckMeleeRange
// [0x00020002] 
// Parameters infos:

void UAICommand_DebugTurn::CheckMeleeRange ( )
{
	static UFunction* pFnCheckMeleeRange = NULL;

	if ( ! pFnCheckMeleeRange )
		pFnCheckMeleeRange = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_DebugTurn.CheckMeleeRange" );

	UAICommand_DebugTurn_execCheckMeleeRange_Parms CheckMeleeRange_Parms;

	this->ProcessEvent ( pFnCheckMeleeRange, &CheckMeleeRange_Parms, NULL );
};

// Function KFGame.AICommand_DebugTurn.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_DebugTurn::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_DebugTurn.Pushed" );

	UAICommand_DebugTurn_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_DebugTurn.DebugTurnInPlace
// [0x00022002] 
// Parameters infos:

void UAICommand_DebugTurn::DebugTurnInPlace ( )
{
	static UFunction* pFnDebugTurnInPlace = NULL;

	if ( ! pFnDebugTurnInPlace )
		pFnDebugTurnInPlace = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_DebugTurn.DebugTurnInPlace" );

	UAICommand_DebugTurn_execDebugTurnInPlace_Parms DebugTurnInPlace_Parms;

	this->ProcessEvent ( pFnDebugTurnInPlace, &DebugTurnInPlace_Parms, NULL );
};

// Function KFGame.AICommand_Evade.CanEvade
// [0x00020002] 
// Parameters infos:

void UAICommand_Evade::CanEvade ( )
{
	static UFunction* pFnCanEvade = NULL;

	if ( ! pFnCanEvade )
		pFnCanEvade = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Evade.CanEvade" );

	UAICommand_Evade_execCanEvade_Parms CanEvade_Parms;

	this->ProcessEvent ( pFnCanEvade, &CanEvade_Parms, NULL );
};

// Function KFGame.AICommand_Evade.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Evade::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Evade.Popped" );

	UAICommand_Evade_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Evade.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Evade::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Evade.Pushed" );

	UAICommand_Evade_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Evade.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_Evade::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Evade.GetDumpString" );

	UAICommand_Evade_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );
};

// Function KFGame.AICommand_Evade.Evade
// [0x00026002] 
// Parameters infos:

void UAICommand_Evade::Evade ( )
{
	static UFunction* pFnEvade = NULL;

	if ( ! pFnEvade )
		pFnEvade = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Evade.Evade" );

	UAICommand_Evade_execEvade_Parms Evade_Parms;

	this->ProcessEvent ( pFnEvade, &Evade_Parms, NULL );
};

// Function KFGame.KFSM_Evade.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Evade::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Evade.PlayAnimation" );

	UKFSM_Evade_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Evade.PackAnimFlag
// [0x00022002] 
// Parameters infos:

void UKFSM_Evade::PackAnimFlag ( )
{
	static UFunction* pFnPackAnimFlag = NULL;

	if ( ! pFnPackAnimFlag )
		pFnPackAnimFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Evade.PackAnimFlag" );

	UKFSM_Evade_execPackAnimFlag_Parms PackAnimFlag_Parms;

	this->ProcessEvent ( pFnPackAnimFlag, &PackAnimFlag_Parms, NULL );
};

// Function KFGame.AICommand_Flee.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Flee::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Flee.Popped" );

	UAICommand_Flee_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Flee.StartFleeing
// [0x00020002] 
// Parameters infos:

void UAICommand_Flee::StartFleeing ( )
{
	static UFunction* pFnStartFleeing = NULL;

	if ( ! pFnStartFleeing )
		pFnStartFleeing = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Flee.StartFleeing" );

	UAICommand_Flee_execStartFleeing_Parms StartFleeing_Parms;

	this->ProcessEvent ( pFnStartFleeing, &StartFleeing_Parms, NULL );
};

// Function KFGame.AICommand_Flee.Timer_FleeDurationExpired
// [0x00020002] 
// Parameters infos:

void UAICommand_Flee::Timer_FleeDurationExpired ( )
{
	static UFunction* pFnTimer_FleeDurationExpired = NULL;

	if ( ! pFnTimer_FleeDurationExpired )
		pFnTimer_FleeDurationExpired = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Flee.Timer_FleeDurationExpired" );

	UAICommand_Flee_execTimer_FleeDurationExpired_Parms Timer_FleeDurationExpired_Parms;

	this->ProcessEvent ( pFnTimer_FleeDurationExpired, &Timer_FleeDurationExpired_Parms, NULL );
};

// Function KFGame.AICommand_Flee.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Flee::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Flee.Pushed" );

	UAICommand_Flee_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Flee.FleeFrom
// [0x00026002] 
// Parameters infos:

void UAICommand_Flee::FleeFrom ( )
{
	static UFunction* pFnFleeFrom = NULL;

	if ( ! pFnFleeFrom )
		pFnFleeFrom = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Flee.FleeFrom" );

	UAICommand_Flee_execFleeFrom_Parms FleeFrom_Parms;

	this->ProcessEvent ( pFnFleeFrom, &FleeFrom_Parms, NULL );
};

// Function KFGame.AICommand_Hans_GunStance.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Hans_GunStance::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Hans_GunStance.Popped" );

	UAICommand_Hans_GunStance_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Hans_GunStance.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Hans_GunStance::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Hans_GunStance.Pushed" );

	UAICommand_Hans_GunStance_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Hans_GunStance.SetGunStance
// [0x00022002] 
// Parameters infos:

void UAICommand_Hans_GunStance::SetGunStance ( )
{
	static UFunction* pFnSetGunStance = NULL;

	if ( ! pFnSetGunStance )
		pFnSetGunStance = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Hans_GunStance.SetGunStance" );

	UAICommand_Hans_GunStance_execSetGunStance_Parms SetGunStance_Parms;

	this->ProcessEvent ( pFnSetGunStance, &SetGunStance_Parms, NULL );
};

// Function KFGame.AICommand_HeadlessWander.NotifyHearNoise
// [0x00024002] 
// Parameters infos:

void UAICommand_HeadlessWander::NotifyHearNoise ( )
{
	static UFunction* pFnNotifyHearNoise = NULL;

	if ( ! pFnNotifyHearNoise )
		pFnNotifyHearNoise = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_HeadlessWander.NotifyHearNoise" );

	UAICommand_HeadlessWander_execNotifyHearNoise_Parms NotifyHearNoise_Parms;

	this->ProcessEvent ( pFnNotifyHearNoise, &NotifyHearNoise_Parms, NULL );
};

// Function KFGame.AICommand_HeadlessWander.CalcTurnDirection
// [0x00820002] 
// Parameters infos:

void UAICommand_HeadlessWander::CalcTurnDirection ( )
{
	static UFunction* pFnCalcTurnDirection = NULL;

	if ( ! pFnCalcTurnDirection )
		pFnCalcTurnDirection = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_HeadlessWander.CalcTurnDirection" );

	UAICommand_HeadlessWander_execCalcTurnDirection_Parms CalcTurnDirection_Parms;

	this->ProcessEvent ( pFnCalcTurnDirection, &CalcTurnDirection_Parms, NULL );
};

// Function KFGame.AICommand_HeadlessWander.ShouldRunSomewhereElse
// [0x00020002] 
// Parameters infos:

void UAICommand_HeadlessWander::ShouldRunSomewhereElse ( )
{
	static UFunction* pFnShouldRunSomewhereElse = NULL;

	if ( ! pFnShouldRunSomewhereElse )
		pFnShouldRunSomewhereElse = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_HeadlessWander.ShouldRunSomewhereElse" );

	UAICommand_HeadlessWander_execShouldRunSomewhereElse_Parms ShouldRunSomewhereElse_Parms;

	this->ProcessEvent ( pFnShouldRunSomewhereElse, &ShouldRunSomewhereElse_Parms, NULL );
};

// Function KFGame.AICommand_HeadlessWander.AllowTransitionTo
// [0x00020002] 
// Parameters infos:

void UAICommand_HeadlessWander::AllowTransitionTo ( )
{
	static UFunction* pFnAllowTransitionTo = NULL;

	if ( ! pFnAllowTransitionTo )
		pFnAllowTransitionTo = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_HeadlessWander.AllowTransitionTo" );

	UAICommand_HeadlessWander_execAllowTransitionTo_Parms AllowTransitionTo_Parms;

	this->ProcessEvent ( pFnAllowTransitionTo, &AllowTransitionTo_Parms, NULL );
};

// Function KFGame.AICommand_HeadlessWander.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_HeadlessWander::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_HeadlessWander.Popped" );

	UAICommand_HeadlessWander_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_HeadlessWander.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_HeadlessWander::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_HeadlessWander.Pushed" );

	UAICommand_HeadlessWander_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_HeadlessWander.HeadlessWander
// [0x00022002] 
// Parameters infos:

void UAICommand_HeadlessWander::HeadlessWander ( )
{
	static UFunction* pFnHeadlessWander = NULL;

	if ( ! pFnHeadlessWander )
		pFnHeadlessWander = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_HeadlessWander.HeadlessWander" );

	UAICommand_HeadlessWander_execHeadlessWander_Parms HeadlessWander_Parms;

	this->ProcessEvent ( pFnHeadlessWander, &HeadlessWander_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.JumpToTarget
// [0x00820002] 
// Parameters infos:

void UAICommand_MoveToEnemy::JumpToTarget ( )
{
	static UFunction* pFnJumpToTarget = NULL;

	if ( ! pFnJumpToTarget )
		pFnJumpToTarget = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.JumpToTarget" );

	UAICommand_MoveToEnemy_execJumpToTarget_Parms JumpToTarget_Parms;

	this->ProcessEvent ( pFnJumpToTarget, &JumpToTarget_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_MoveToEnemy::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.GetDumpString" );

	UAICommand_MoveToEnemy_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.DirectMoveTimeout
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::DirectMoveTimeout ( )
{
	static UFunction* pFnDirectMoveTimeout = NULL;

	if ( ! pFnDirectMoveTimeout )
		pFnDirectMoveTimeout = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.DirectMoveTimeout" );

	UAICommand_MoveToEnemy_execDirectMoveTimeout_Parms DirectMoveTimeout_Parms;

	this->ProcessEvent ( pFnDirectMoveTimeout, &DirectMoveTimeout_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.CheckEnemyMoved
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::CheckEnemyMoved ( )
{
	static UFunction* pFnCheckEnemyMoved = NULL;

	if ( ! pFnCheckEnemyMoved )
		pFnCheckEnemyMoved = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.CheckEnemyMoved" );

	UAICommand_MoveToEnemy_execCheckEnemyMoved_Parms CheckEnemyMoved_Parms;

	this->ProcessEvent ( pFnCheckEnemyMoved, &CheckEnemyMoved_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.CheckReachedEnemy
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::CheckReachedEnemy ( )
{
	static UFunction* pFnCheckReachedEnemy = NULL;

	if ( ! pFnCheckReachedEnemy )
		pFnCheckReachedEnemy = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.CheckReachedEnemy" );

	UAICommand_MoveToEnemy_execCheckReachedEnemy_Parms CheckReachedEnemy_Parms;

	this->ProcessEvent ( pFnCheckReachedEnemy, &CheckReachedEnemy_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.SprintTimer
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::SprintTimer ( )
{
	static UFunction* pFnSprintTimer = NULL;

	if ( ! pFnSprintTimer )
		pFnSprintTimer = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.SprintTimer" );

	UAICommand_MoveToEnemy_execSprintTimer_Parms SprintTimer_Parms;

	this->ProcessEvent ( pFnSprintTimer, &SprintTimer_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.NotifyPlayerBecameVisible
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::NotifyPlayerBecameVisible ( )
{
	static UFunction* pFnNotifyPlayerBecameVisible = NULL;

	if ( ! pFnNotifyPlayerBecameVisible )
		pFnNotifyPlayerBecameVisible = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.NotifyPlayerBecameVisible" );

	UAICommand_MoveToEnemy_execNotifyPlayerBecameVisible_Parms NotifyPlayerBecameVisible_Parms;

	this->ProcessEvent ( pFnNotifyPlayerBecameVisible, &NotifyPlayerBecameVisible_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.Resumed" );

	UAICommand_MoveToEnemy_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.Paused" );

	UAICommand_MoveToEnemy_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.Popped" );

	UAICommand_MoveToEnemy_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_MoveToEnemy::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.Pushed" );

	UAICommand_MoveToEnemy_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_MoveToEnemy.MoveToEnemy
// [0x00026002] 
// Parameters infos:

void UAICommand_MoveToEnemy::MoveToEnemy ( )
{
	static UFunction* pFnMoveToEnemy = NULL;

	if ( ! pFnMoveToEnemy )
		pFnMoveToEnemy = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_MoveToEnemy.MoveToEnemy" );

	UAICommand_MoveToEnemy_execMoveToEnemy_Parms MoveToEnemy_Parms;

	this->ProcessEvent ( pFnMoveToEnemy, &MoveToEnemy_Parms, NULL );
};

// Function KFGame.AICommand_PanicWander.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_PanicWander::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PanicWander.Popped" );

	UAICommand_PanicWander_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_PanicWander.EndWander
// [0x00020002] 
// Parameters infos:

void UAICommand_PanicWander::EndWander ( )
{
	static UFunction* pFnEndWander = NULL;

	if ( ! pFnEndWander )
		pFnEndWander = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PanicWander.EndWander" );

	UAICommand_PanicWander_execEndWander_Parms EndWander_Parms;

	this->ProcessEvent ( pFnEndWander, &EndWander_Parms, NULL );
};

// Function KFGame.AICommand_PanicWander.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_PanicWander::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PanicWander.Resumed" );

	UAICommand_PanicWander_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function KFGame.AICommand_PanicWander.PanicWander
// [0x00022002] 
// Parameters infos:

void UAICommand_PanicWander::PanicWander ( )
{
	static UFunction* pFnPanicWander = NULL;

	if ( ! pFnPanicWander )
		pFnPanicWander = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_PanicWander.PanicWander" );

	UAICommand_PanicWander_execPanicWander_Parms PanicWander_Parms;

	this->ProcessEvent ( pFnPanicWander, &PanicWander_Parms, NULL );
};

// Function KFGame.AICommand_Pause.CanChangeEnemy
// [0x00020002] 
// Parameters infos:

void UAICommand_Pause::CanChangeEnemy ( )
{
	static UFunction* pFnCanChangeEnemy = NULL;

	if ( ! pFnCanChangeEnemy )
		pFnCanChangeEnemy = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Pause.CanChangeEnemy" );

	UAICommand_Pause_execCanChangeEnemy_Parms CanChangeEnemy_Parms;

	this->ProcessEvent ( pFnCanChangeEnemy, &CanChangeEnemy_Parms, NULL );
};

// Function KFGame.AICommand_Pause.AllowTransitionTo
// [0x00020002] 
// Parameters infos:

void UAICommand_Pause::AllowTransitionTo ( )
{
	static UFunction* pFnAllowTransitionTo = NULL;

	if ( ! pFnAllowTransitionTo )
		pFnAllowTransitionTo = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Pause.AllowTransitionTo" );

	UAICommand_Pause_execAllowTransitionTo_Parms AllowTransitionTo_Parms;

	this->ProcessEvent ( pFnAllowTransitionTo, &AllowTransitionTo_Parms, NULL );
};

// Function KFGame.AICommand_Pause.Paused
// [0x00020000] 
// Parameters infos:

void UAICommand_Pause::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Pause.Paused" );

	UAICommand_Pause_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function KFGame.AICommand_Pause.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Pause::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Pause.Popped" );

	UAICommand_Pause_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Pause.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Pause::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Pause.Pushed" );

	UAICommand_Pause_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Pause.Pause
// [0x00026002] 
// Parameters infos:

void UAICommand_Pause::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Pause.Pause" );

	UAICommand_Pause_execPause_Parms Pause_Parms;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function KFGame.AICommand_StepAside.DrawDebug
// [0x00020102] 
// Parameters infos:

void UAICommand_StepAside::DrawDebug ( )
{
	static UFunction* pFnDrawDebug = NULL;

	if ( ! pFnDrawDebug )
		pFnDrawDebug = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_StepAside.DrawDebug" );

	UAICommand_StepAside_execDrawDebug_Parms DrawDebug_Parms;

	this->ProcessEvent ( pFnDrawDebug, &DrawDebug_Parms, NULL );
};

// Function KFGame.AICommand_StepAside.GetDumpString
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_StepAside::eventGetDumpString ( )
{
	static UFunction* pFnGetDumpString = NULL;

	if ( ! pFnGetDumpString )
		pFnGetDumpString = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_StepAside.GetDumpString" );

	UAICommand_StepAside_eventGetDumpString_Parms GetDumpString_Parms;

	this->ProcessEvent ( pFnGetDumpString, &GetDumpString_Parms, NULL );
};

// Function KFGame.AICommand_StepAside.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_StepAside::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_StepAside.Popped" );

	UAICommand_StepAside_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_StepAside.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_StepAside::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_StepAside.Pushed" );

	UAICommand_StepAside_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_StepAside.StepAside
// [0x00026002] 
// Parameters infos:

void UAICommand_StepAside::StepAside ( )
{
	static UFunction* pFnStepAside = NULL;

	if ( ! pFnStepAside )
		pFnStepAside = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_StepAside.StepAside" );

	UAICommand_StepAside_execStepAside_Parms StepAside_Parms;

	this->ProcessEvent ( pFnStepAside, &StepAside_Parms, NULL );
};

// Function KFGame.AICommand_Stumble.IsAllowedToAttack
// [0x00020002] 
// Parameters infos:

void UAICommand_Stumble::IsAllowedToAttack ( )
{
	static UFunction* pFnIsAllowedToAttack = NULL;

	if ( ! pFnIsAllowedToAttack )
		pFnIsAllowedToAttack = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Stumble.IsAllowedToAttack" );

	UAICommand_Stumble_execIsAllowedToAttack_Parms IsAllowedToAttack_Parms;

	this->ProcessEvent ( pFnIsAllowedToAttack, &IsAllowedToAttack_Parms, NULL );
};

// Function KFGame.AICommand_Stumble.ShouldIgnoreTimeTransitions
// [0x00020002] 
// Parameters infos:

void UAICommand_Stumble::ShouldIgnoreTimeTransitions ( )
{
	static UFunction* pFnShouldIgnoreTimeTransitions = NULL;

	if ( ! pFnShouldIgnoreTimeTransitions )
		pFnShouldIgnoreTimeTransitions = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Stumble.ShouldIgnoreTimeTransitions" );

	UAICommand_Stumble_execShouldIgnoreTimeTransitions_Parms ShouldIgnoreTimeTransitions_Parms;

	this->ProcessEvent ( pFnShouldIgnoreTimeTransitions, &ShouldIgnoreTimeTransitions_Parms, NULL );
};

// Function KFGame.AICommand_Stumble.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Stumble::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Stumble.Popped" );

	UAICommand_Stumble_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_Stumble.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Stumble::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Stumble.Pushed" );

	UAICommand_Stumble_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_Stumble.Stumble
// [0x00022002] 
// Parameters infos:

void UAICommand_Stumble::Stumble ( )
{
	static UFunction* pFnStumble = NULL;

	if ( ! pFnStumble )
		pFnStumble = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_Stumble.Stumble" );

	UAICommand_Stumble_execStumble_Parms Stumble_Parms;

	this->ProcessEvent ( pFnStumble, &Stumble_Parms, NULL );
};

// Function KFGame.AICommand_SummonZeds.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_SummonZeds::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SummonZeds.Popped" );

	UAICommand_SummonZeds_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_SummonZeds.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_SummonZeds::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SummonZeds.Pushed" );

	UAICommand_SummonZeds_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_SummonZeds.Summon
// [0x00022002] 
// Parameters infos:

void UAICommand_SummonZeds::Summon ( )
{
	static UFunction* pFnSummon = NULL;

	if ( ! pFnSummon )
		pFnSummon = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_SummonZeds.Summon" );

	UAICommand_SummonZeds_execSummon_Parms Summon_Parms;

	this->ProcessEvent ( pFnSummon, &Summon_Parms, NULL );
};

// Function KFGame.KFAIWaveInfo.GetEventSquadList
// [0x00420002] 
// Parameters infos:

void UKFAIWaveInfo::GetEventSquadList ( )
{
	static UFunction* pFnGetEventSquadList = NULL;

	if ( ! pFnGetEventSquadList )
		pFnGetEventSquadList = UObject::FindObject< UFunction > ( "Function KFGame.KFAIWaveInfo.GetEventSquadList" );

	UKFAIWaveInfo_execGetEventSquadList_Parms GetEventSquadList_Parms;

	this->ProcessEvent ( pFnGetEventSquadList, &GetEventSquadList_Parms, NULL );
};

// Function KFGame.KFAIWaveInfo.GetSpecialSquad
// [0x00420002] 
// Parameters infos:

void UKFAIWaveInfo::GetSpecialSquad ( )
{
	static UFunction* pFnGetSpecialSquad = NULL;

	if ( ! pFnGetSpecialSquad )
		pFnGetSpecialSquad = UObject::FindObject< UFunction > ( "Function KFGame.KFAIWaveInfo.GetSpecialSquad" );

	UKFAIWaveInfo_execGetSpecialSquad_Parms GetSpecialSquad_Parms;

	this->ProcessEvent ( pFnGetSpecialSquad, &GetSpecialSquad_Parms, NULL );
};

// Function KFGame.KFAIWaveInfo.GetNewSquadList
// [0x00420002] 
// Parameters infos:

void UKFAIWaveInfo::GetNewSquadList ( )
{
	static UFunction* pFnGetNewSquadList = NULL;

	if ( ! pFnGetNewSquadList )
		pFnGetNewSquadList = UObject::FindObject< UFunction > ( "Function KFGame.KFAIWaveInfo.GetNewSquadList" );

	UKFAIWaveInfo_execGetNewSquadList_Parms GetNewSquadList_Parms;

	this->ProcessEvent ( pFnGetNewSquadList, &GetNewSquadList_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Taunt.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Zed_Taunt::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Taunt.SpecialMoveEnded" );

	UKFSM_Zed_Taunt_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Taunt.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Zed_Taunt::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Taunt.PlayAnimation" );

	UKFSM_Zed_Taunt_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Taunt.PackSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Zed_Taunt::PackSMFlags ( )
{
	static UFunction* pFnPackSMFlags = NULL;

	if ( ! pFnPackSMFlags )
		pFnPackSMFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Taunt.PackSMFlags" );

	UKFSM_Zed_Taunt_execPackSMFlags_Parms PackSMFlags_Parms;

	this->ProcessEvent ( pFnPackSMFlags, &PackSMFlags_Parms, NULL );
};

// Function KFGame.KFSM_Zed_Taunt.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_Zed_Taunt::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_Taunt.PackFlagsBase" );

	UKFSM_Zed_Taunt_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function KFGame.AICommand_ThrowGrenade.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_ThrowGrenade::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_ThrowGrenade.Popped" );

	UAICommand_ThrowGrenade_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function KFGame.AICommand_ThrowGrenade.LockdownAI
// [0x00020002] 
// Parameters infos:

void UAICommand_ThrowGrenade::LockdownAI ( )
{
	static UFunction* pFnLockdownAI = NULL;

	if ( ! pFnLockdownAI )
		pFnLockdownAI = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_ThrowGrenade.LockdownAI" );

	UAICommand_ThrowGrenade_execLockdownAI_Parms LockdownAI_Parms;

	this->ProcessEvent ( pFnLockdownAI, &LockdownAI_Parms, NULL );
};

// Function KFGame.AICommand_ThrowGrenade.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_ThrowGrenade::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_ThrowGrenade.Pushed" );

	UAICommand_ThrowGrenade_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function KFGame.AICommand_ThrowGrenade.ThrowGrenade
// [0x00026002] 
// Parameters infos:

void UAICommand_ThrowGrenade::ThrowGrenade ( )
{
	static UFunction* pFnThrowGrenade = NULL;

	if ( ! pFnThrowGrenade )
		pFnThrowGrenade = UObject::FindObject< UFunction > ( "Function KFGame.AICommand_ThrowGrenade.ThrowGrenade" );

	UAICommand_ThrowGrenade_execThrowGrenade_Parms ThrowGrenade_Parms;

	this->ProcessEvent ( pFnThrowGrenade, &ThrowGrenade_Parms, NULL );
};

// Function KFGame.KFVoteCollector.MapVoteSort
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::MapVoteSort ( )
{
	static UFunction* pFnMapVoteSort = NULL;

	if ( ! pFnMapVoteSort )
		pFnMapVoteSort = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.MapVoteSort" );

	UKFVoteCollector_execMapVoteSort_Parms MapVoteSort_Parms;

	this->ProcessEvent ( pFnMapVoteSort, &MapVoteSort_Parms, NULL );
};

// Function KFGame.KFVoteCollector.CheckAllPlayerVoted
// [0x00420002] 
// Parameters infos:

void UKFVoteCollector::CheckAllPlayerVoted ( )
{
	static UFunction* pFnCheckAllPlayerVoted = NULL;

	if ( ! pFnCheckAllPlayerVoted )
		pFnCheckAllPlayerVoted = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.CheckAllPlayerVoted" );

	UKFVoteCollector_execCheckAllPlayerVoted_Parms CheckAllPlayerVoted_Parms;

	this->ProcessEvent ( pFnCheckAllPlayerVoted, &CheckAllPlayerVoted_Parms, NULL );
};

// Function KFGame.KFVoteCollector.CheckMajorityPlayersVotedOnMap
// [0x00420002] 
// Parameters infos:

void UKFVoteCollector::CheckMajorityPlayersVotedOnMap ( )
{
	static UFunction* pFnCheckMajorityPlayersVotedOnMap = NULL;

	if ( ! pFnCheckMajorityPlayersVotedOnMap )
		pFnCheckMajorityPlayersVotedOnMap = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.CheckMajorityPlayersVotedOnMap" );

	UKFVoteCollector_execCheckMajorityPlayersVotedOnMap_Parms CheckMajorityPlayersVotedOnMap_Parms;

	this->ProcessEvent ( pFnCheckMajorityPlayersVotedOnMap, &CheckMajorityPlayersVotedOnMap_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ShortenVoteTime
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::ShortenVoteTime ( )
{
	static UFunction* pFnShortenVoteTime = NULL;

	if ( ! pFnShortenVoteTime )
		pFnShortenVoteTime = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ShortenVoteTime" );

	UKFVoteCollector_execShortenVoteTime_Parms ShortenVoteTime_Parms;

	this->ProcessEvent ( pFnShortenVoteTime, &ShortenVoteTime_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ReceiveVoteMap
// [0x00A200C2] 
// Parameters infos:

void UKFVoteCollector::ReceiveVoteMap ( )
{
	static UFunction* pFnReceiveVoteMap = NULL;

	if ( ! pFnReceiveVoteMap )
		pFnReceiveVoteMap = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ReceiveVoteMap" );

	UKFVoteCollector_execReceiveVoteMap_Parms ReceiveVoteMap_Parms;

	this->ProcessEvent ( pFnReceiveVoteMap, &ReceiveVoteMap_Parms, NULL );
};

// Function KFGame.KFVoteCollector.SearchAndClearPreviousVote
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::SearchAndClearPreviousVote ( )
{
	static UFunction* pFnSearchAndClearPreviousVote = NULL;

	if ( ! pFnSearchAndClearPreviousVote )
		pFnSearchAndClearPreviousVote = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.SearchAndClearPreviousVote" );

	UKFVoteCollector_execSearchAndClearPreviousVote_Parms SearchAndClearPreviousVote_Parms;

	this->ProcessEvent ( pFnSearchAndClearPreviousVote, &SearchAndClearPreviousVote_Parms, NULL );
};

// Function KFGame.KFVoteCollector.GetNextMap
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::GetNextMap ( )
{
	static UFunction* pFnGetNextMap = NULL;

	if ( ! pFnGetNextMap )
		pFnGetNextMap = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.GetNextMap" );

	UKFVoteCollector_execGetNextMap_Parms GetNextMap_Parms;

	this->ProcessEvent ( pFnGetNextMap, &GetNextMap_Parms, NULL );
};

// Function KFGame.KFVoteCollector.AddMapOption
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::AddMapOption ( )
{
	static UFunction* pFnAddMapOption = NULL;

	if ( ! pFnAddMapOption )
		pFnAddMapOption = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.AddMapOption" );

	UKFVoteCollector_execAddMapOption_Parms AddMapOption_Parms;

	this->ProcessEvent ( pFnAddMapOption, &AddMapOption_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ClearFailedVoteFlag
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::ClearFailedVoteFlag ( )
{
	static UFunction* pFnClearFailedVoteFlag = NULL;

	if ( ! pFnClearFailedVoteFlag )
		pFnClearFailedVoteFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ClearFailedVoteFlag" );

	UKFVoteCollector_execClearFailedVoteFlag_Parms ClearFailedVoteFlag_Parms;

	this->ProcessEvent ( pFnClearFailedVoteFlag, &ClearFailedVoteFlag_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ConcludeVoteKick
// [0x002200C2] 
// Parameters infos:

void UKFVoteCollector::ConcludeVoteKick ( )
{
	static UFunction* pFnConcludeVoteKick = NULL;

	if ( ! pFnConcludeVoteKick )
		pFnConcludeVoteKick = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ConcludeVoteKick" );

	UKFVoteCollector_execConcludeVoteKick_Parms ConcludeVoteKick_Parms;

	this->ProcessEvent ( pFnConcludeVoteKick, &ConcludeVoteKick_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ShouldConcludeVote
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::ShouldConcludeVote ( )
{
	static UFunction* pFnShouldConcludeVote = NULL;

	if ( ! pFnShouldConcludeVote )
		pFnShouldConcludeVote = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ShouldConcludeVote" );

	UKFVoteCollector_execShouldConcludeVote_Parms ShouldConcludeVote_Parms;

	this->ProcessEvent ( pFnShouldConcludeVote, &ShouldConcludeVote_Parms, NULL );
};

// Function KFGame.KFVoteCollector.UnPackVotes
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::UnPackVotes ( )
{
	static UFunction* pFnUnPackVotes = NULL;

	if ( ! pFnUnPackVotes )
		pFnUnPackVotes = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.UnPackVotes" );

	UKFVoteCollector_execUnPackVotes_Parms UnPackVotes_Parms;

	this->ProcessEvent ( pFnUnPackVotes, &UnPackVotes_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ReplicateVotes
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::ReplicateVotes ( )
{
	static UFunction* pFnReplicateVotes = NULL;

	if ( ! pFnReplicateVotes )
		pFnReplicateVotes = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ReplicateVotes" );

	UKFVoteCollector_execReplicateVotes_Parms ReplicateVotes_Parms;

	this->ProcessEvent ( pFnReplicateVotes, &ReplicateVotes_Parms, NULL );
};

// Function KFGame.KFVoteCollector.RecieveVoteKick
// [0x002200C2] 
// Parameters infos:

void UKFVoteCollector::RecieveVoteKick ( )
{
	static UFunction* pFnRecieveVoteKick = NULL;

	if ( ! pFnRecieveVoteKick )
		pFnRecieveVoteKick = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.RecieveVoteKick" );

	UKFVoteCollector_execRecieveVoteKick_Parms RecieveVoteKick_Parms;

	this->ProcessEvent ( pFnRecieveVoteKick, &RecieveVoteKick_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ShouldSkipTrader
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::ShouldSkipTrader ( )
{
	static UFunction* pFnShouldSkipTrader = NULL;

	if ( ! pFnShouldSkipTrader )
		pFnShouldSkipTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ShouldSkipTrader" );

	UKFVoteCollector_execShouldSkipTrader_Parms ShouldSkipTrader_Parms;

	this->ProcessEvent ( pFnShouldSkipTrader, &ShouldSkipTrader_Parms, NULL );
};

// Function KFGame.KFVoteCollector.RecieveSkipTraderTimeVote
// [0x002200C2] 
// Parameters infos:

void UKFVoteCollector::RecieveSkipTraderTimeVote ( )
{
	static UFunction* pFnRecieveSkipTraderTimeVote = NULL;

	if ( ! pFnRecieveSkipTraderTimeVote )
		pFnRecieveSkipTraderTimeVote = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.RecieveSkipTraderTimeVote" );

	UKFVoteCollector_execRecieveSkipTraderTimeVote_Parms RecieveSkipTraderTimeVote_Parms;

	this->ProcessEvent ( pFnRecieveSkipTraderTimeVote, &RecieveSkipTraderTimeVote_Parms, NULL );
};

// Function KFGame.KFVoteCollector.SkipTraderTime
// [0x002200C2] 
// Parameters infos:

void UKFVoteCollector::SkipTraderTime ( )
{
	static UFunction* pFnSkipTraderTime = NULL;

	if ( ! pFnSkipTraderTime )
		pFnSkipTraderTime = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.SkipTraderTime" );

	UKFVoteCollector_execSkipTraderTime_Parms SkipTraderTime_Parms;

	this->ProcessEvent ( pFnSkipTraderTime, &SkipTraderTime_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ResetTraderVote
// [0x002200C2] 
// Parameters infos:

void UKFVoteCollector::ResetTraderVote ( )
{
	static UFunction* pFnResetTraderVote = NULL;

	if ( ! pFnResetTraderVote )
		pFnResetTraderVote = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ResetTraderVote" );

	UKFVoteCollector_execResetTraderVote_Parms ResetTraderVote_Parms;

	this->ProcessEvent ( pFnResetTraderVote, &ResetTraderVote_Parms, NULL );
};

// Function KFGame.KFVoteCollector.ServerStartVoteKick
// [0x00020002] 
// Parameters infos:

void UKFVoteCollector::ServerStartVoteKick ( )
{
	static UFunction* pFnServerStartVoteKick = NULL;

	if ( ! pFnServerStartVoteKick )
		pFnServerStartVoteKick = UObject::FindObject< UFunction > ( "Function KFGame.KFVoteCollector.ServerStartVoteKick" );

	UKFVoteCollector_execServerStartVoteKick_Parms ServerStartVoteKick_Parms;

	this->ProcessEvent ( pFnServerStartVoteKick, &ServerStartVoteKick_Parms, NULL );
};

// Function KFGame.KFAccessControl.IsIDBanned
// [0x00420002] 
// Parameters infos:

void AKFAccessControl::IsIDBanned ( )
{
	static UFunction* pFnIsIDBanned = NULL;

	if ( ! pFnIsIDBanned )
		pFnIsIDBanned = UObject::FindObject< UFunction > ( "Function KFGame.KFAccessControl.IsIDBanned" );

	AKFAccessControl_execIsIDBanned_Parms IsIDBanned_Parms;

	this->ProcessEvent ( pFnIsIDBanned, &IsIDBanned_Parms, NULL );
};

// Function KFGame.KFAccessControl.IsSessionBanned
// [0x00420002] 
// Parameters infos:

void AKFAccessControl::IsSessionBanned ( )
{
	static UFunction* pFnIsSessionBanned = NULL;

	if ( ! pFnIsSessionBanned )
		pFnIsSessionBanned = UObject::FindObject< UFunction > ( "Function KFGame.KFAccessControl.IsSessionBanned" );

	AKFAccessControl_execIsSessionBanned_Parms IsSessionBanned_Parms;

	this->ProcessEvent ( pFnIsSessionBanned, &IsSessionBanned_Parms, NULL );
};

// Function KFGame.KFAccessControl.KickBanPlayer
// [0x00020002] 
// Parameters infos:

void AKFAccessControl::KickBanPlayer ( )
{
	static UFunction* pFnKickBanPlayer = NULL;

	if ( ! pFnKickBanPlayer )
		pFnKickBanPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAccessControl.KickBanPlayer" );

	AKFAccessControl_execKickBanPlayer_Parms KickBanPlayer_Parms;

	this->ProcessEvent ( pFnKickBanPlayer, &KickBanPlayer_Parms, NULL );
};

// Function KFGame.KFAccessControl.AdminLogout
// [0x00020002] 
// Parameters infos:

void AKFAccessControl::AdminLogout ( )
{
	static UFunction* pFnAdminLogout = NULL;

	if ( ! pFnAdminLogout )
		pFnAdminLogout = UObject::FindObject< UFunction > ( "Function KFGame.KFAccessControl.AdminLogout" );

	AKFAccessControl_execAdminLogout_Parms AdminLogout_Parms;

	this->ProcessEvent ( pFnAdminLogout, &AdminLogout_Parms, NULL );
};

// Function KFGame.KFAccessControl.AdminExited
// [0x00020002] 
// Parameters infos:

void AKFAccessControl::AdminExited ( )
{
	static UFunction* pFnAdminExited = NULL;

	if ( ! pFnAdminExited )
		pFnAdminExited = UObject::FindObject< UFunction > ( "Function KFGame.KFAccessControl.AdminExited" );

	AKFAccessControl_execAdminExited_Parms AdminExited_Parms;

	this->ProcessEvent ( pFnAdminExited, &AdminExited_Parms, NULL );
};

// Function KFGame.KFAccessControl.AdminEntered
// [0x00020002] 
// Parameters infos:

void AKFAccessControl::AdminEntered ( )
{
	static UFunction* pFnAdminEntered = NULL;

	if ( ! pFnAdminEntered )
		pFnAdminEntered = UObject::FindObject< UFunction > ( "Function KFGame.KFAccessControl.AdminEntered" );

	AKFAccessControl_execAdminEntered_Parms AdminEntered_Parms;

	this->ProcessEvent ( pFnAdminEntered, &AdminEntered_Parms, NULL );
};

// Function KFGame.KFAccessControl.ForceKickPlayer
// [0x00020002] 
// Parameters infos:

void AKFAccessControl::ForceKickPlayer ( )
{
	static UFunction* pFnForceKickPlayer = NULL;

	if ( ! pFnForceKickPlayer )
		pFnForceKickPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAccessControl.ForceKickPlayer" );

	AKFAccessControl_execForceKickPlayer_Parms ForceKickPlayer_Parms;

	this->ProcessEvent ( pFnForceKickPlayer, &ForceKickPlayer_Parms, NULL );
};

// Function KFGame.KFAccessControl.KickSessionBanPlayer
// [0x00020002] 
// Parameters infos:

void AKFAccessControl::KickSessionBanPlayer ( )
{
	static UFunction* pFnKickSessionBanPlayer = NULL;

	if ( ! pFnKickSessionBanPlayer )
		pFnKickSessionBanPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFAccessControl.KickSessionBanPlayer" );

	AKFAccessControl_execKickSessionBanPlayer_Parms KickSessionBanPlayer_Parms;

	this->ProcessEvent ( pFnKickSessionBanPlayer, &KickSessionBanPlayer_Parms, NULL );
};

// Function KFGame.KFLocalMessage.getLocalized
// [0x00022003] ( FUNC_Final )
// Parameters infos:

void UKFLocalMessage::getLocalized ( )
{
	static UFunction* pFngetLocalized = NULL;

	if ( ! pFngetLocalized )
		pFngetLocalized = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage.getLocalized" );

	UKFLocalMessage_execgetLocalized_Parms getLocalized_Parms;

	this->ProcessEvent ( pFngetLocalized, &getLocalized_Parms, NULL );
};

// Function KFGame.KFLocalMessage.GetHexColor
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage::GetHexColor ( )
{
	static UFunction* pFnGetHexColor = NULL;

	if ( ! pFnGetHexColor )
		pFnGetHexColor = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage.GetHexColor" );

	UKFLocalMessage_execGetHexColor_Parms GetHexColor_Parms;

	this->ProcessEvent ( pFnGetHexColor, &GetHexColor_Parms, NULL );
};

// Function KFGame.KFLocalMessage.KilledByVictoryMessage
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage::KilledByVictoryMessage ( )
{
	static UFunction* pFnKilledByVictoryMessage = NULL;

	if ( ! pFnKilledByVictoryMessage )
		pFnKilledByVictoryMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage.KilledByVictoryMessage" );

	UKFLocalMessage_execKilledByVictoryMessage_Parms KilledByVictoryMessage_Parms;

	this->ProcessEvent ( pFnKilledByVictoryMessage, &KilledByVictoryMessage_Parms, NULL );
};

// Function KFGame.KFLocalMessage.GetPos
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage::GetPos ( )
{
	static UFunction* pFnGetPos = NULL;

	if ( ! pFnGetPos )
		pFnGetPos = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage.GetPos" );

	UKFLocalMessage_execGetPos_Parms GetPos_Parms;

	this->ProcessEvent ( pFnGetPos, &GetPos_Parms, NULL );
};

// Function KFGame.KFLocalMessage.AnnouncementSound
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage::AnnouncementSound ( )
{
	static UFunction* pFnAnnouncementSound = NULL;

	if ( ! pFnAnnouncementSound )
		pFnAnnouncementSound = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage.AnnouncementSound" );

	UKFLocalMessage_execAnnouncementSound_Parms AnnouncementSound_Parms;

	this->ProcessEvent ( pFnAnnouncementSound, &AnnouncementSound_Parms, NULL );
};

// Function KFGame.KFLocalMessage.AnnouncementLevel
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage::AnnouncementLevel ( )
{
	static UFunction* pFnAnnouncementLevel = NULL;

	if ( ! pFnAnnouncementLevel )
		pFnAnnouncementLevel = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage.AnnouncementLevel" );

	UKFLocalMessage_execAnnouncementLevel_Parms AnnouncementLevel_Parms;

	this->ProcessEvent ( pFnAnnouncementLevel, &AnnouncementLevel_Parms, NULL );
};

// Function KFGame.KFLocalMessage.GetString
// [0x00026002] 
// Parameters infos:

void UKFLocalMessage::GetString ( )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage.GetString" );

	UKFLocalMessage_execGetString_Parms GetString_Parms;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );
};

// Function KFGame.KFActor_DoshPile.SpawnFillingParticleEffects
// [0x00020000] 
// Parameters infos:

void AKFActor_DoshPile::SpawnFillingParticleEffects ( )
{
	static UFunction* pFnSpawnFillingParticleEffects = NULL;

	if ( ! pFnSpawnFillingParticleEffects )
		pFnSpawnFillingParticleEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFActor_DoshPile.SpawnFillingParticleEffects" );

	AKFActor_DoshPile_execSpawnFillingParticleEffects_Parms SpawnFillingParticleEffects_Parms;

	this->ProcessEvent ( pFnSpawnFillingParticleEffects, &SpawnFillingParticleEffects_Parms, NULL );
};

// Function KFGame.KFActor_DoshPile.PlayDoshPileExplodeSound
// [0x00020002] 
// Parameters infos:

void AKFActor_DoshPile::PlayDoshPileExplodeSound ( )
{
	static UFunction* pFnPlayDoshPileExplodeSound = NULL;

	if ( ! pFnPlayDoshPileExplodeSound )
		pFnPlayDoshPileExplodeSound = UObject::FindObject< UFunction > ( "Function KFGame.KFActor_DoshPile.PlayDoshPileExplodeSound" );

	AKFActor_DoshPile_execPlayDoshPileExplodeSound_Parms PlayDoshPileExplodeSound_Parms;

	this->ProcessEvent ( pFnPlayDoshPileExplodeSound, &PlayDoshPileExplodeSound_Parms, NULL );
};

// Function KFGame.KFActor_DoshPile.SpawnCompleteParticleEffects
// [0x00024002] 
// Parameters infos:

void AKFActor_DoshPile::SpawnCompleteParticleEffects ( )
{
	static UFunction* pFnSpawnCompleteParticleEffects = NULL;

	if ( ! pFnSpawnCompleteParticleEffects )
		pFnSpawnCompleteParticleEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFActor_DoshPile.SpawnCompleteParticleEffects" );

	AKFActor_DoshPile_execSpawnCompleteParticleEffects_Parms SpawnCompleteParticleEffects_Parms;

	this->ProcessEvent ( pFnSpawnCompleteParticleEffects, &SpawnCompleteParticleEffects_Parms, NULL );
};

// Function KFGame.KFActor_DoshPile.OnExplodeParticleSystemFinished
// [0x00020102] 
// Parameters infos:

void AKFActor_DoshPile::OnExplodeParticleSystemFinished ( )
{
	static UFunction* pFnOnExplodeParticleSystemFinished = NULL;

	if ( ! pFnOnExplodeParticleSystemFinished )
		pFnOnExplodeParticleSystemFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFActor_DoshPile.OnExplodeParticleSystemFinished" );

	AKFActor_DoshPile_execOnExplodeParticleSystemFinished_Parms OnExplodeParticleSystemFinished_Parms;

	this->ProcessEvent ( pFnOnExplodeParticleSystemFinished, &OnExplodeParticleSystemFinished_Parms, NULL );
};

// Function KFGame.KFActor_DoshPile.ExplodeOut
// [0x00020002] 
// Parameters infos:

void AKFActor_DoshPile::ExplodeOut ( )
{
	static UFunction* pFnExplodeOut = NULL;

	if ( ! pFnExplodeOut )
		pFnExplodeOut = UObject::FindObject< UFunction > ( "Function KFGame.KFActor_DoshPile.ExplodeOut" );

	AKFActor_DoshPile_execExplodeOut_Parms ExplodeOut_Parms;

	this->ProcessEvent ( pFnExplodeOut, &ExplodeOut_Parms, NULL );
};

// Function KFGame.KFActor_DoshPile.ExplodeIn
// [0x00020002] 
// Parameters infos:

void AKFActor_DoshPile::ExplodeIn ( )
{
	static UFunction* pFnExplodeIn = NULL;

	if ( ! pFnExplodeIn )
		pFnExplodeIn = UObject::FindObject< UFunction > ( "Function KFGame.KFActor_DoshPile.ExplodeIn" );

	AKFActor_DoshPile_execExplodeIn_Parms ExplodeIn_Parms;

	this->ProcessEvent ( pFnExplodeIn, &ExplodeIn_Parms, NULL );
};

// Function KFGame.KFActor_DoshPile.Destroyed
// [0x00020102] 
// Parameters infos:

void AKFActor_DoshPile::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFActor_DoshPile.Destroyed" );

	AKFActor_DoshPile_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFActor_DoshPile.SetValue
// [0x00020002] 
// Parameters infos:

void AKFActor_DoshPile::SetValue ( )
{
	static UFunction* pFnSetValue = NULL;

	if ( ! pFnSetValue )
		pFnSetValue = UObject::FindObject< UFunction > ( "Function KFGame.KFActor_DoshPile.SetValue" );

	AKFActor_DoshPile_execSetValue_Parms SetValue_Parms;

	this->ProcessEvent ( pFnSetValue, &SetValue_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.Callback_OpenCrateClicked
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::Callback_OpenCrateClicked ( )
{
	static UFunction* pFnCallback_OpenCrateClicked = NULL;

	if ( ! pFnCallback_OpenCrateClicked )
		pFnCallback_OpenCrateClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.Callback_OpenCrateClicked" );

	UKFGFxMenu_DoshVault_execCallback_OpenCrateClicked_Parms Callback_OpenCrateClicked_Parms;

	this->ProcessEvent ( pFnCallback_OpenCrateClicked, &Callback_OpenCrateClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.Callback_AnimationBegin
// [0x00020000] 
// Parameters infos:

void UKFGFxMenu_DoshVault::Callback_AnimationBegin ( )
{
	static UFunction* pFnCallback_AnimationBegin = NULL;

	if ( ! pFnCallback_AnimationBegin )
		pFnCallback_AnimationBegin = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.Callback_AnimationBegin" );

	UKFGFxMenu_DoshVault_execCallback_AnimationBegin_Parms Callback_AnimationBegin_Parms;

	this->ProcessEvent ( pFnCallback_AnimationBegin, &Callback_AnimationBegin_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.Callback_DoshAnimationComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::Callback_DoshAnimationComplete ( )
{
	static UFunction* pFnCallback_DoshAnimationComplete = NULL;

	if ( ! pFnCallback_DoshAnimationComplete )
		pFnCallback_DoshAnimationComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.Callback_DoshAnimationComplete" );

	UKFGFxMenu_DoshVault_execCallback_DoshAnimationComplete_Parms Callback_DoshAnimationComplete_Parms;

	this->ProcessEvent ( pFnCallback_DoshAnimationComplete, &Callback_DoshAnimationComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.Callback_FinalAnimationComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::Callback_FinalAnimationComplete ( )
{
	static UFunction* pFnCallback_FinalAnimationComplete = NULL;

	if ( ! pFnCallback_FinalAnimationComplete )
		pFnCallback_FinalAnimationComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.Callback_FinalAnimationComplete" );

	UKFGFxMenu_DoshVault_execCallback_FinalAnimationComplete_Parms Callback_FinalAnimationComplete_Parms;

	this->ProcessEvent ( pFnCallback_FinalAnimationComplete, &Callback_FinalAnimationComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.Callback_UpdateDosh
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::Callback_UpdateDosh ( )
{
	static UFunction* pFnCallback_UpdateDosh = NULL;

	if ( ! pFnCallback_UpdateDosh )
		pFnCallback_UpdateDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.Callback_UpdateDosh" );

	UKFGFxMenu_DoshVault_execCallback_UpdateDosh_Parms Callback_UpdateDosh_Parms;

	this->ProcessEvent ( pFnCallback_UpdateDosh, &Callback_UpdateDosh_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.CanCloseVaultMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::CanCloseVaultMenu ( )
{
	static UFunction* pFnCanCloseVaultMenu = NULL;

	if ( ! pFnCanCloseVaultMenu )
		pFnCanCloseVaultMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.CanCloseVaultMenu" );

	UKFGFxMenu_DoshVault_execCanCloseVaultMenu_Parms CanCloseVaultMenu_Parms;

	this->ProcessEvent ( pFnCanCloseVaultMenu, &CanCloseVaultMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.SendDoshInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::SendDoshInfo ( )
{
	static UFunction* pFnSendDoshInfo = NULL;

	if ( ! pFnSendDoshInfo )
		pFnSendDoshInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.SendDoshInfo" );

	UKFGFxMenu_DoshVault_execSendDoshInfo_Parms SendDoshInfo_Parms;

	this->ProcessEvent ( pFnSendDoshInfo, &SendDoshInfo_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.GetNextUnlockName
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::GetNextUnlockName ( )
{
	static UFunction* pFnGetNextUnlockName = NULL;

	if ( ! pFnGetNextUnlockName )
		pFnGetNextUnlockName = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.GetNextUnlockName" );

	UKFGFxMenu_DoshVault_execGetNextUnlockName_Parms GetNextUnlockName_Parms;

	this->ProcessEvent ( pFnGetNextUnlockName, &GetNextUnlockName_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.GetCrateIcon
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::GetCrateIcon ( )
{
	static UFunction* pFnGetCrateIcon = NULL;

	if ( ! pFnGetCrateIcon )
		pFnGetCrateIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.GetCrateIcon" );

	UKFGFxMenu_DoshVault_execGetCrateIcon_Parms GetCrateIcon_Parms;

	this->ProcessEvent ( pFnGetCrateIcon, &GetCrateIcon_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.UpdatePlayerCrateCount
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::UpdatePlayerCrateCount ( )
{
	static UFunction* pFnUpdatePlayerCrateCount = NULL;

	if ( ! pFnUpdatePlayerCrateCount )
		pFnUpdatePlayerCrateCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.UpdatePlayerCrateCount" );

	UKFGFxMenu_DoshVault_execUpdatePlayerCrateCount_Parms UpdatePlayerCrateCount_Parms;

	this->ProcessEvent ( pFnUpdatePlayerCrateCount, &UpdatePlayerCrateCount_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.GetCrateCount
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::GetCrateCount ( )
{
	static UFunction* pFnGetCrateCount = NULL;

	if ( ! pFnGetCrateCount )
		pFnGetCrateCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.GetCrateCount" );

	UKFGFxMenu_DoshVault_execGetCrateCount_Parms GetCrateCount_Parms;

	this->ProcessEvent ( pFnGetCrateCount, &GetCrateCount_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.UpdatePlayerDoshMeter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::UpdatePlayerDoshMeter ( )
{
	static UFunction* pFnUpdatePlayerDoshMeter = NULL;

	if ( ! pFnUpdatePlayerDoshMeter )
		pFnUpdatePlayerDoshMeter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.UpdatePlayerDoshMeter" );

	UKFGFxMenu_DoshVault_execUpdatePlayerDoshMeter_Parms UpdatePlayerDoshMeter_Parms;

	this->ProcessEvent ( pFnUpdatePlayerDoshMeter, &UpdatePlayerDoshMeter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.InitialRewardItem
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::InitialRewardItem ( )
{
	static UFunction* pFnInitialRewardItem = NULL;

	if ( ! pFnInitialRewardItem )
		pFnInitialRewardItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.InitialRewardItem" );

	UKFGFxMenu_DoshVault_execInitialRewardItem_Parms InitialRewardItem_Parms;

	this->ProcessEvent ( pFnInitialRewardItem, &InitialRewardItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.LocalizeContainer" );

	UKFGFxMenu_DoshVault_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.AbortSquence
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::AbortSquence ( )
{
	static UFunction* pFnAbortSquence = NULL;

	if ( ! pFnAbortSquence )
		pFnAbortSquence = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.AbortSquence" );

	UKFGFxMenu_DoshVault_execAbortSquence_Parms AbortSquence_Parms;

	this->ProcessEvent ( pFnAbortSquence, &AbortSquence_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.OnClose
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::OnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.OnClose" );

	UKFGFxMenu_DoshVault_execOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.OnOpen" );

	UKFGFxMenu_DoshVault_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.DelayedInit
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::DelayedInit ( )
{
	static UFunction* pFnDelayedInit = NULL;

	if ( ! pFnDelayedInit )
		pFnDelayedInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.DelayedInit" );

	UKFGFxMenu_DoshVault_execDelayedInit_Parms DelayedInit_Parms;

	this->ProcessEvent ( pFnDelayedInit, &DelayedInit_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.InitStart
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::InitStart ( )
{
	static UFunction* pFnInitStart = NULL;

	if ( ! pFnInitStart )
		pFnInitStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.InitStart" );

	UKFGFxMenu_DoshVault_execInitStart_Parms InitStart_Parms;

	this->ProcessEvent ( pFnInitStart, &InitStart_Parms, NULL );
};

// Function KFGame.KFGFxMenu_DoshVault.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_DoshVault::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_DoshVault.InitializeMenu" );

	UKFGFxMenu_DoshVault_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFAffliction_EMPDisrupt.SetEMPDisrupted
// [0x00020002] 
// Parameters infos:

void UKFAffliction_EMPDisrupt::SetEMPDisrupted ( )
{
	static UFunction* pFnSetEMPDisrupted = NULL;

	if ( ! pFnSetEMPDisrupted )
		pFnSetEMPDisrupted = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMPDisrupt.SetEMPDisrupted" );

	UKFAffliction_EMPDisrupt_execSetEMPDisrupted_Parms SetEMPDisrupted_Parms;

	this->ProcessEvent ( pFnSetEMPDisrupted, &SetEMPDisrupted_Parms, NULL );
};

// Function KFGame.KFAffliction_EMPDisrupt.EMPDisruptTimer
// [0x00020002] 
// Parameters infos:

void UKFAffliction_EMPDisrupt::EMPDisruptTimer ( )
{
	static UFunction* pFnEMPDisruptTimer = NULL;

	if ( ! pFnEMPDisruptTimer )
		pFnEMPDisruptTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMPDisrupt.EMPDisruptTimer" );

	UKFAffliction_EMPDisrupt_execEMPDisruptTimer_Parms EMPDisruptTimer_Parms;

	this->ProcessEvent ( pFnEMPDisruptTimer, &EMPDisruptTimer_Parms, NULL );
};

// Function KFGame.KFAffliction_EMPDisrupt.Accrue
// [0x00020002] 
// Parameters infos:

void UKFAffliction_EMPDisrupt::Accrue ( )
{
	static UFunction* pFnAccrue = NULL;

	if ( ! pFnAccrue )
		pFnAccrue = UObject::FindObject< UFunction > ( "Function KFGame.KFAffliction_EMPDisrupt.Accrue" );

	UKFAffliction_EMPDisrupt_execAccrue_Parms Accrue_Parms;

	this->ProcessEvent ( pFnAccrue, &Accrue_Parms, NULL );
};

// Function KFGame.KFSM_Block.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.SpecialMoveEnded" );

	UKFSM_Block_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_Block.NotifyHitReactionInterrupt
// [0x00020000] 
// Parameters infos:

void UKFSM_Block::NotifyHitReactionInterrupt ( )
{
	static UFunction* pFnNotifyHitReactionInterrupt = NULL;

	if ( ! pFnNotifyHitReactionInterrupt )
		pFnNotifyHitReactionInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.NotifyHitReactionInterrupt" );

	UKFSM_Block_execNotifyHitReactionInterrupt_Parms NotifyHitReactionInterrupt_Parms;

	this->ProcessEvent ( pFnNotifyHitReactionInterrupt, &NotifyHitReactionInterrupt_Parms, NULL );
};

// Function KFGame.KFSM_Block.Timer_BlockBroken
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::Timer_BlockBroken ( )
{
	static UFunction* pFnTimer_BlockBroken = NULL;

	if ( ! pFnTimer_BlockBroken )
		pFnTimer_BlockBroken = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.Timer_BlockBroken" );

	UKFSM_Block_execTimer_BlockBroken_Parms Timer_BlockBroken_Parms;

	this->ProcessEvent ( pFnTimer_BlockBroken, &Timer_BlockBroken_Parms, NULL );
};

// Function KFGame.KFSM_Block.Timer_BlockDurationExpired
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::Timer_BlockDurationExpired ( )
{
	static UFunction* pFnTimer_BlockDurationExpired = NULL;

	if ( ! pFnTimer_BlockDurationExpired )
		pFnTimer_BlockDurationExpired = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.Timer_BlockDurationExpired" );

	UKFSM_Block_execTimer_BlockDurationExpired_Parms Timer_BlockDurationExpired_Parms;

	this->ProcessEvent ( pFnTimer_BlockDurationExpired, &Timer_BlockDurationExpired_Parms, NULL );
};

// Function KFGame.KFSM_Block.Timer_EnableBlocking
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::Timer_EnableBlocking ( )
{
	static UFunction* pFnTimer_EnableBlocking = NULL;

	if ( ! pFnTimer_EnableBlocking )
		pFnTimer_EnableBlocking = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.Timer_EnableBlocking" );

	UKFSM_Block_execTimer_EnableBlocking_Parms Timer_EnableBlocking_Parms;

	this->ProcessEvent ( pFnTimer_EnableBlocking, &Timer_EnableBlocking_Parms, NULL );
};

// Function KFGame.KFSM_Block.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.SpecialMoveFlagsUpdated" );

	UKFSM_Block_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function KFGame.KFSM_Block.Timer_ResetSpecialMoveFlags
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::Timer_ResetSpecialMoveFlags ( )
{
	static UFunction* pFnTimer_ResetSpecialMoveFlags = NULL;

	if ( ! pFnTimer_ResetSpecialMoveFlags )
		pFnTimer_ResetSpecialMoveFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.Timer_ResetSpecialMoveFlags" );

	UKFSM_Block_execTimer_ResetSpecialMoveFlags_Parms Timer_ResetSpecialMoveFlags_Parms;

	this->ProcessEvent ( pFnTimer_ResetSpecialMoveFlags, &Timer_ResetSpecialMoveFlags_Parms, NULL );
};

// Function KFGame.KFSM_Block.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.PlayAnimation" );

	UKFSM_Block_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Block.GetSprintSpeedModifier
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::GetSprintSpeedModifier ( )
{
	static UFunction* pFnGetSprintSpeedModifier = NULL;

	if ( ! pFnGetSprintSpeedModifier )
		pFnGetSprintSpeedModifier = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.GetSprintSpeedModifier" );

	UKFSM_Block_execGetSprintSpeedModifier_Parms GetSprintSpeedModifier_Parms;

	this->ProcessEvent ( pFnGetSprintSpeedModifier, &GetSprintSpeedModifier_Parms, NULL );
};

// Function KFGame.KFSM_Block.AdjustSprintSpeed
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::AdjustSprintSpeed ( )
{
	static UFunction* pFnAdjustSprintSpeed = NULL;

	if ( ! pFnAdjustSprintSpeed )
		pFnAdjustSprintSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.AdjustSprintSpeed" );

	UKFSM_Block_execAdjustSprintSpeed_Parms AdjustSprintSpeed_Parms;

	this->ProcessEvent ( pFnAdjustSprintSpeed, &AdjustSprintSpeed_Parms, NULL );
};

// Function KFGame.KFSM_Block.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.SpecialMoveStarted" );

	UKFSM_Block_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_Block.CanChainMove
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::CanChainMove ( )
{
	static UFunction* pFnCanChainMove = NULL;

	if ( ! pFnCanChainMove )
		pFnCanChainMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.CanChainMove" );

	UKFSM_Block_execCanChainMove_Parms CanChainMove_Parms;

	this->ProcessEvent ( pFnCanChainMove, &CanChainMove_Parms, NULL );
};

// Function KFGame.KFSM_Block.CanOverrideMoveWith
// [0x00020002] 
// Parameters infos:

void UKFSM_Block::CanOverrideMoveWith ( )
{
	static UFunction* pFnCanOverrideMoveWith = NULL;

	if ( ! pFnCanOverrideMoveWith )
		pFnCanOverrideMoveWith = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.CanOverrideMoveWith" );

	UKFSM_Block_execCanOverrideMoveWith_Parms CanOverrideMoveWith_Parms;

	this->ProcessEvent ( pFnCanOverrideMoveWith, &CanOverrideMoveWith_Parms, NULL );
};

// Function KFGame.KFSM_Block.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_Block::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.InternalCanDoSpecialMove" );

	UKFSM_Block_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_Block.PackBlockSMFLags
// [0x00022002] 
// Parameters infos:

void UKFSM_Block::PackBlockSMFLags ( )
{
	static UFunction* pFnPackBlockSMFLags = NULL;

	if ( ! pFnPackBlockSMFLags )
		pFnPackBlockSMFLags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Block.PackBlockSMFLags" );

	UKFSM_Block_execPackBlockSMFLags_Parms PackBlockSMFLags_Parms;

	this->ProcessEvent ( pFnPackBlockSMFLags, &PackBlockSMFLags_Parms, NULL );
};

// Function KFGame.KFDummyReplicationInfo.ShouldBroadCastWelcomeMessage
// [0x00024102] 
// Parameters infos:

void AKFDummyReplicationInfo::ShouldBroadCastWelcomeMessage ( )
{
	static UFunction* pFnShouldBroadCastWelcomeMessage = NULL;

	if ( ! pFnShouldBroadCastWelcomeMessage )
		pFnShouldBroadCastWelcomeMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFDummyReplicationInfo.ShouldBroadCastWelcomeMessage" );

	AKFDummyReplicationInfo_execShouldBroadCastWelcomeMessage_Parms ShouldBroadCastWelcomeMessage_Parms;

	this->ProcessEvent ( pFnShouldBroadCastWelcomeMessage, &ShouldBroadCastWelcomeMessage_Parms, NULL );
};

// Function KFGame.KFAIController_ScriptedPawn.InitPlayerReplicationInfo
// [0x00020002] 
// Parameters infos:

void AKFAIController_ScriptedPawn::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFAIController_ScriptedPawn.InitPlayerReplicationInfo" );

	AKFAIController_ScriptedPawn_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function KFGame.KFGameConductor.Timer_EndLull
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::Timer_EndLull ( )
{
	static UFunction* pFnTimer_EndLull = NULL;

	if ( ! pFnTimer_EndLull )
		pFnTimer_EndLull = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.Timer_EndLull" );

	UKFGameConductor_execTimer_EndLull_Parms Timer_EndLull_Parms;

	this->ProcessEvent ( pFnTimer_EndLull, &Timer_EndLull_Parms, NULL );
};

// Function KFGame.KFGameConductor.WithinRange
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::WithinRange ( )
{
	static UFunction* pFnWithinRange = NULL;

	if ( ! pFnWithinRange )
		pFnWithinRange = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.WithinRange" );

	UKFGameConductor_execWithinRange_Parms WithinRange_Parms;

	this->ProcessEvent ( pFnWithinRange, &WithinRange_Parms, NULL );
};

// Function KFGame.KFGameConductor.EvaluateAIMovementSpeedModification
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::EvaluateAIMovementSpeedModification ( )
{
	static UFunction* pFnEvaluateAIMovementSpeedModification = NULL;

	if ( ! pFnEvaluateAIMovementSpeedModification )
		pFnEvaluateAIMovementSpeedModification = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.EvaluateAIMovementSpeedModification" );

	UKFGameConductor_execEvaluateAIMovementSpeedModification_Parms EvaluateAIMovementSpeedModification_Parms;

	this->ProcessEvent ( pFnEvaluateAIMovementSpeedModification, &EvaluateAIMovementSpeedModification_Parms, NULL );
};

// Function KFGame.KFGameConductor.EvaluateSpawnRateModification
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::EvaluateSpawnRateModification ( )
{
	static UFunction* pFnEvaluateSpawnRateModification = NULL;

	if ( ! pFnEvaluateSpawnRateModification )
		pFnEvaluateSpawnRateModification = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.EvaluateSpawnRateModification" );

	UKFGameConductor_execEvaluateSpawnRateModification_Parms EvaluateSpawnRateModification_Parms;

	this->ProcessEvent ( pFnEvaluateSpawnRateModification, &EvaluateSpawnRateModification_Parms, NULL );
};

// Function KFGame.KFGameConductor.UpdateOverallAttackCoolDowns
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::UpdateOverallAttackCoolDowns ( )
{
	static UFunction* pFnUpdateOverallAttackCoolDowns = NULL;

	if ( ! pFnUpdateOverallAttackCoolDowns )
		pFnUpdateOverallAttackCoolDowns = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.UpdateOverallAttackCoolDowns" );

	UKFGameConductor_execUpdateOverallAttackCoolDowns_Parms UpdateOverallAttackCoolDowns_Parms;

	this->ProcessEvent ( pFnUpdateOverallAttackCoolDowns, &UpdateOverallAttackCoolDowns_Parms, NULL );
};

// Function KFGame.KFGameConductor.UpdateOverallStatus
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::UpdateOverallStatus ( )
{
	static UFunction* pFnUpdateOverallStatus = NULL;

	if ( ! pFnUpdateOverallStatus )
		pFnUpdateOverallStatus = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.UpdateOverallStatus" );

	UKFGameConductor_execUpdateOverallStatus_Parms UpdateOverallStatus_Parms;

	this->ProcessEvent ( pFnUpdateOverallStatus, &UpdateOverallStatus_Parms, NULL );
};

// Function KFGame.KFGameConductor.GetParZedLifeSpan
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::GetParZedLifeSpan ( )
{
	static UFunction* pFnGetParZedLifeSpan = NULL;

	if ( ! pFnGetParZedLifeSpan )
		pFnGetParZedLifeSpan = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.GetParZedLifeSpan" );

	UKFGameConductor_execGetParZedLifeSpan_Parms GetParZedLifeSpan_Parms;

	this->ProcessEvent ( pFnGetParZedLifeSpan, &GetParZedLifeSpan_Parms, NULL );
};

// Function KFGame.KFGameConductor.UpdateZedLifespanStats
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::UpdateZedLifespanStats ( )
{
	static UFunction* pFnUpdateZedLifespanStats = NULL;

	if ( ! pFnUpdateZedLifespanStats )
		pFnUpdateZedLifespanStats = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.UpdateZedLifespanStats" );

	UKFGameConductor_execUpdateZedLifespanStats_Parms UpdateZedLifespanStats_Parms;

	this->ProcessEvent ( pFnUpdateZedLifespanStats, &UpdateZedLifespanStats_Parms, NULL );
};

// Function KFGame.KFGameConductor.UpdatePlayerAccuracyStats
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::UpdatePlayerAccuracyStats ( )
{
	static UFunction* pFnUpdatePlayerAccuracyStats = NULL;

	if ( ! pFnUpdatePlayerAccuracyStats )
		pFnUpdatePlayerAccuracyStats = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.UpdatePlayerAccuracyStats" );

	UKFGameConductor_execUpdatePlayerAccuracyStats_Parms UpdatePlayerAccuracyStats_Parms;

	this->ProcessEvent ( pFnUpdatePlayerAccuracyStats, &UpdatePlayerAccuracyStats_Parms, NULL );
};

// Function KFGame.KFGameConductor.UpdatePlayersAggregateSkill
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::UpdatePlayersAggregateSkill ( )
{
	static UFunction* pFnUpdatePlayersAggregateSkill = NULL;

	if ( ! pFnUpdatePlayersAggregateSkill )
		pFnUpdatePlayersAggregateSkill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.UpdatePlayersAggregateSkill" );

	UKFGameConductor_execUpdatePlayersAggregateSkill_Parms UpdatePlayersAggregateSkill_Parms;

	this->ProcessEvent ( pFnUpdatePlayersAggregateSkill, &UpdatePlayersAggregateSkill_Parms, NULL );
};

// Function KFGame.KFGameConductor.UpdatePlayersStatus
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::UpdatePlayersStatus ( )
{
	static UFunction* pFnUpdatePlayersStatus = NULL;

	if ( ! pFnUpdatePlayersStatus )
		pFnUpdatePlayersStatus = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.UpdatePlayersStatus" );

	UKFGameConductor_execUpdatePlayersStatus_Parms UpdatePlayersStatus_Parms;

	this->ProcessEvent ( pFnUpdatePlayersStatus, &UpdatePlayersStatus_Parms, NULL );
};

// Function KFGame.KFGameConductor.TimerUpdate
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::TimerUpdate ( )
{
	static UFunction* pFnTimerUpdate = NULL;

	if ( ! pFnTimerUpdate )
		pFnTimerUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.TimerUpdate" );

	UKFGameConductor_execTimerUpdate_Parms TimerUpdate_Parms;

	this->ProcessEvent ( pFnTimerUpdate, &TimerUpdate_Parms, NULL );
};

// Function KFGame.KFGameConductor.HandlePlayerChangedTeam
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::HandlePlayerChangedTeam ( )
{
	static UFunction* pFnHandlePlayerChangedTeam = NULL;

	if ( ! pFnHandlePlayerChangedTeam )
		pFnHandlePlayerChangedTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.HandlePlayerChangedTeam" );

	UKFGameConductor_execHandlePlayerChangedTeam_Parms HandlePlayerChangedTeam_Parms;

	this->ProcessEvent ( pFnHandlePlayerChangedTeam, &HandlePlayerChangedTeam_Parms, NULL );
};

// Function KFGame.KFGameConductor.UpdateAveragePerkRank
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::UpdateAveragePerkRank ( )
{
	static UFunction* pFnUpdateAveragePerkRank = NULL;

	if ( ! pFnUpdateAveragePerkRank )
		pFnUpdateAveragePerkRank = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.UpdateAveragePerkRank" );

	UKFGameConductor_execUpdateAveragePerkRank_Parms UpdateAveragePerkRank_Parms;

	this->ProcessEvent ( pFnUpdateAveragePerkRank, &UpdateAveragePerkRank_Parms, NULL );
};

// Function KFGame.KFGameConductor.ResetWaveStats
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::ResetWaveStats ( )
{
	static UFunction* pFnResetWaveStats = NULL;

	if ( ! pFnResetWaveStats )
		pFnResetWaveStats = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.ResetWaveStats" );

	UKFGameConductor_execResetWaveStats_Parms ResetWaveStats_Parms;

	this->ProcessEvent ( pFnResetWaveStats, &ResetWaveStats_Parms, NULL );
};

// Function KFGame.KFGameConductor.NotifySoloPlayerSurrounded
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::NotifySoloPlayerSurrounded ( )
{
	static UFunction* pFnNotifySoloPlayerSurrounded = NULL;

	if ( ! pFnNotifySoloPlayerSurrounded )
		pFnNotifySoloPlayerSurrounded = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.NotifySoloPlayerSurrounded" );

	UKFGameConductor_execNotifySoloPlayerSurrounded_Parms NotifySoloPlayerSurrounded_Parms;

	this->ProcessEvent ( pFnNotifySoloPlayerSurrounded, &NotifySoloPlayerSurrounded_Parms, NULL );
};

// Function KFGame.KFGameConductor.NotifyHumanTeamPlayerDeath
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::NotifyHumanTeamPlayerDeath ( )
{
	static UFunction* pFnNotifyHumanTeamPlayerDeath = NULL;

	if ( ! pFnNotifyHumanTeamPlayerDeath )
		pFnNotifyHumanTeamPlayerDeath = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.NotifyHumanTeamPlayerDeath" );

	UKFGameConductor_execNotifyHumanTeamPlayerDeath_Parms NotifyHumanTeamPlayerDeath_Parms;

	this->ProcessEvent ( pFnNotifyHumanTeamPlayerDeath, &NotifyHumanTeamPlayerDeath_Parms, NULL );
};

// Function KFGame.KFGameConductor.HandleZedKill
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::HandleZedKill ( )
{
	static UFunction* pFnHandleZedKill = NULL;

	if ( ! pFnHandleZedKill )
		pFnHandleZedKill = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.HandleZedKill" );

	UKFGameConductor_execHandleZedKill_Parms HandleZedKill_Parms;

	this->ProcessEvent ( pFnHandleZedKill, &HandleZedKill_Parms, NULL );
};

// Function KFGame.KFGameConductor.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGameConductor::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGameConductor.Initialize" );

	UKFGameConductor_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFInterface_MinigameActor.CanPlayAkEvent
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void UKFInterface_MinigameActor::eventCanPlayAkEvent ( )
{
	static UFunction* pFnCanPlayAkEvent = NULL;

	if ( ! pFnCanPlayAkEvent )
		pFnCanPlayAkEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MinigameActor.CanPlayAkEvent" );

	UKFInterface_MinigameActor_eventCanPlayAkEvent_Parms CanPlayAkEvent_Parms;

	this->ProcessEvent ( pFnCanPlayAkEvent, &CanPlayAkEvent_Parms, NULL );
};

// Function KFGame.KFInterface_MinigameActor.Deactivated
// [0x00020000] 
// Parameters infos:

void UKFInterface_MinigameActor::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MinigameActor.Deactivated" );

	UKFInterface_MinigameActor_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function KFGame.KFInterface_MinigameActor.Activated
// [0x00020000] 
// Parameters infos:

void UKFInterface_MinigameActor::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MinigameActor.Activated" );

	UKFInterface_MinigameActor_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function KFGame.KFInterface_MinigameActor.CanBeActivated
// [0x00020000] 
// Parameters infos:

void UKFInterface_MinigameActor::CanBeActivated ( )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MinigameActor.CanBeActivated" );

	UKFInterface_MinigameActor_execCanBeActivated_Parms CanBeActivated_Parms;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );
};

// Function KFGame.KFAnimNotify_PlayDialog.Notify
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFAnimNotify_PlayDialog::eventNotify ( )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_PlayDialog.Notify" );

	UKFAnimNotify_PlayDialog_eventNotify_Parms Notify_Parms;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function KFGame.KFAnimNotify_SpawnKActor.Notify
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void UKFAnimNotify_SpawnKActor::eventNotify ( )
{
	static UFunction* pFnNotify = NULL;

	if ( ! pFnNotify )
		pFnNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFAnimNotify_SpawnKActor.Notify" );

	UKFAnimNotify_SpawnKActor_eventNotify_Parms Notify_Parms;

	this->ProcessEvent ( pFnNotify, &Notify_Parms, NULL );
};

// Function KFGame.KFWeapDef_Armor.GetItemLocalization
// [0x00022002] 
// Parameters infos:

void UKFWeapDef_Armor::GetItemLocalization ( )
{
	static UFunction* pFnGetItemLocalization = NULL;

	if ( ! pFnGetItemLocalization )
		pFnGetItemLocalization = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapDef_Armor.GetItemLocalization" );

	UKFWeapDef_Armor_execGetItemLocalization_Parms GetItemLocalization_Parms;

	this->ProcessEvent ( pFnGetItemLocalization, &GetItemLocalization_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.currentFocus
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::currentFocus ( )
{
	static UFunction* pFncurrentFocus = NULL;

	if ( ! pFncurrentFocus )
		pFncurrentFocus = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.currentFocus" );

	UKFGFxMoviePlayer_Manager_execcurrentFocus_Parms currentFocus_Parms;

	this->ProcessEvent ( pFncurrentFocus, &currentFocus_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.UpdateViewportSize
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::UpdateViewportSize ( )
{
	static UFunction* pFnUpdateViewportSize = NULL;

	if ( ! pFnUpdateViewportSize )
		pFnUpdateViewportSize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.UpdateViewportSize" );

	UKFGFxMoviePlayer_Manager_execUpdateViewportSize_Parms UpdateViewportSize_Parms;

	this->ProcessEvent ( pFnUpdateViewportSize, &UpdateViewportSize_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.CloseScreenSizeMovie
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::CloseScreenSizeMovie ( )
{
	static UFunction* pFnCloseScreenSizeMovie = NULL;

	if ( ! pFnCloseScreenSizeMovie )
		pFnCloseScreenSizeMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.CloseScreenSizeMovie" );

	UKFGFxMoviePlayer_Manager_execCloseScreenSizeMovie_Parms CloseScreenSizeMovie_Parms;

	this->ProcessEvent ( pFnCloseScreenSizeMovie, &CloseScreenSizeMovie_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OpenScreenSizeMovie
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OpenScreenSizeMovie ( )
{
	static UFunction* pFnOpenScreenSizeMovie = NULL;

	if ( ! pFnOpenScreenSizeMovie )
		pFnOpenScreenSizeMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OpenScreenSizeMovie" );

	UKFGFxMoviePlayer_Manager_execOpenScreenSizeMovie_Parms OpenScreenSizeMovie_Parms;

	this->ProcessEvent ( pFnOpenScreenSizeMovie, &OpenScreenSizeMovie_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.CastNoVote
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::CastNoVote ( )
{
	static UFunction* pFnCastNoVote = NULL;

	if ( ! pFnCastNoVote )
		pFnCastNoVote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.CastNoVote" );

	UKFGFxMoviePlayer_Manager_execCastNoVote_Parms CastNoVote_Parms;

	this->ProcessEvent ( pFnCastNoVote, &CastNoVote_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.CastYesVote
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::CastYesVote ( )
{
	static UFunction* pFnCastYesVote = NULL;

	if ( ! pFnCastYesVote )
		pFnCastYesVote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.CastYesVote" );

	UKFGFxMoviePlayer_Manager_execCastYesVote_Parms CastYesVote_Parms;

	this->ProcessEvent ( pFnCastYesVote, &CastYesVote_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.HideKickVote
// [0x00020102] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::HideKickVote ( )
{
	static UFunction* pFnHideKickVote = NULL;

	if ( ! pFnHideKickVote )
		pFnHideKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.HideKickVote" );

	UKFGFxMoviePlayer_Manager_execHideKickVote_Parms HideKickVote_Parms;

	this->ProcessEvent ( pFnHideKickVote, &HideKickVote_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ShowKickVote
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ShowKickVote ( )
{
	static UFunction* pFnShowKickVote = NULL;

	if ( ! pFnShowKickVote )
		pFnShowKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ShowKickVote" );

	UKFGFxMoviePlayer_Manager_execShowKickVote_Parms ShowKickVote_Parms;

	this->ProcessEvent ( pFnShowKickVote, &ShowKickVote_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.NotifySpectateStateChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::NotifySpectateStateChanged ( )
{
	static UFunction* pFnNotifySpectateStateChanged = NULL;

	if ( ! pFnNotifySpectateStateChanged )
		pFnNotifySpectateStateChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.NotifySpectateStateChanged" );

	UKFGFxMoviePlayer_Manager_execNotifySpectateStateChanged_Parms NotifySpectateStateChanged_Parms;

	this->ProcessEvent ( pFnNotifySpectateStateChanged, &NotifySpectateStateChanged_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.RemotePlayerDisconnected
// [0x00020000] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::RemotePlayerDisconnected ( )
{
	static UFunction* pFnRemotePlayerDisconnected = NULL;

	if ( ! pFnRemotePlayerDisconnected )
		pFnRemotePlayerDisconnected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.RemotePlayerDisconnected" );

	UKFGFxMoviePlayer_Manager_execRemotePlayerDisconnected_Parms RemotePlayerDisconnected_Parms;

	this->ProcessEvent ( pFnRemotePlayerDisconnected, &RemotePlayerDisconnected_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.UpdateVOIP
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::UpdateVOIP ( )
{
	static UFunction* pFnUpdateVOIP = NULL;

	if ( ! pFnUpdateVOIP )
		pFnUpdateVOIP = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.UpdateVOIP" );

	UKFGFxMoviePlayer_Manager_execUpdateVOIP_Parms UpdateVOIP_Parms;

	this->ProcessEvent ( pFnUpdateVOIP, &UpdateVOIP_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.IsFocusIgnoreKey
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::IsFocusIgnoreKey ( )
{
	static UFunction* pFnIsFocusIgnoreKey = NULL;

	if ( ! pFnIsFocusIgnoreKey )
		pFnIsFocusIgnoreKey = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.IsFocusIgnoreKey" );

	UKFGFxMoviePlayer_Manager_execIsFocusIgnoreKey_Parms IsFocusIgnoreKey_Parms;

	this->ProcessEvent ( pFnIsFocusIgnoreKey, &IsFocusIgnoreKey_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.GetKeyBindName
// [0x00820002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::GetKeyBindName ( )
{
	static UFunction* pFnGetKeyBindName = NULL;

	if ( ! pFnGetKeyBindName )
		pFnGetKeyBindName = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.GetKeyBindName" );

	UKFGFxMoviePlayer_Manager_execGetKeyBindName_Parms GetKeyBindName_Parms;

	this->ProcessEvent ( pFnGetKeyBindName, &GetKeyBindName_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.UpdateDynamicIgnoreKeys
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::UpdateDynamicIgnoreKeys ( )
{
	static UFunction* pFnUpdateDynamicIgnoreKeys = NULL;

	if ( ! pFnUpdateDynamicIgnoreKeys )
		pFnUpdateDynamicIgnoreKeys = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.UpdateDynamicIgnoreKeys" );

	UKFGFxMoviePlayer_Manager_execUpdateDynamicIgnoreKeys_Parms UpdateDynamicIgnoreKeys_Parms;

	this->ProcessEvent ( pFnUpdateDynamicIgnoreKeys, &UpdateDynamicIgnoreKeys_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.GetUsingGamepad
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::GetUsingGamepad ( )
{
	static UFunction* pFnGetUsingGamepad = NULL;

	if ( ! pFnGetUsingGamepad )
		pFnGetUsingGamepad = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.GetUsingGamepad" );

	UKFGFxMoviePlayer_Manager_execGetUsingGamepad_Parms GetUsingGamepad_Parms;

	this->ProcessEvent ( pFnGetUsingGamepad, &GetUsingGamepad_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnInputTypeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OnInputTypeChanged ( )
{
	static UFunction* pFnOnInputTypeChanged = NULL;

	if ( ! pFnOnInputTypeChanged )
		pFnOnInputTypeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnInputTypeChanged" );

	UKFGFxMoviePlayer_Manager_execOnInputTypeChanged_Parms OnInputTypeChanged_Parms;

	this->ProcessEvent ( pFnOnInputTypeChanged, &OnInputTypeChanged_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.CheckIfUsingGamepad
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::CheckIfUsingGamepad ( )
{
	static UFunction* pFnCheckIfUsingGamepad = NULL;

	if ( ! pFnCheckIfUsingGamepad )
		pFnCheckIfUsingGamepad = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.CheckIfUsingGamepad" );

	UKFGFxMoviePlayer_Manager_execCheckIfUsingGamepad_Parms CheckIfUsingGamepad_Parms;

	this->ProcessEvent ( pFnCheckIfUsingGamepad, &CheckIfUsingGamepad_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.FilterButtonInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Manager::eventFilterButtonInput ( )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.FilterButtonInput" );

	UKFGFxMoviePlayer_Manager_eventFilterButtonInput_Parms FilterButtonInput_Parms;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ChangeOverviewState
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ChangeOverviewState ( )
{
	static UFunction* pFnChangeOverviewState = NULL;

	if ( ! pFnChangeOverviewState )
		pFnChangeOverviewState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ChangeOverviewState" );

	UKFGFxMoviePlayer_Manager_execChangeOverviewState_Parms ChangeOverviewState_Parms;

	this->ProcessEvent ( pFnChangeOverviewState, &ChangeOverviewState_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.HandleSteamLobbyLeaderTakeOver
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::HandleSteamLobbyLeaderTakeOver ( )
{
	static UFunction* pFnHandleSteamLobbyLeaderTakeOver = NULL;

	if ( ! pFnHandleSteamLobbyLeaderTakeOver )
		pFnHandleSteamLobbyLeaderTakeOver = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.HandleSteamLobbyLeaderTakeOver" );

	UKFGFxMoviePlayer_Manager_execHandleSteamLobbyLeaderTakeOver_Parms HandleSteamLobbyLeaderTakeOver_Parms;

	this->ProcessEvent ( pFnHandleSteamLobbyLeaderTakeOver, &HandleSteamLobbyLeaderTakeOver_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.UpdateMenuBar
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::UpdateMenuBar ( )
{
	static UFunction* pFnUpdateMenuBar = NULL;

	if ( ! pFnUpdateMenuBar )
		pFnUpdateMenuBar = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.UpdateMenuBar" );

	UKFGFxMoviePlayer_Manager_execUpdateMenuBar_Parms UpdateMenuBar_Parms;

	this->ProcessEvent ( pFnUpdateMenuBar, &UpdateMenuBar_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.SetSearchingForMatch
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::SetSearchingForMatch ( )
{
	static UFunction* pFnSetSearchingForMatch = NULL;

	if ( ! pFnSetSearchingForMatch )
		pFnSetSearchingForMatch = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.SetSearchingForMatch" );

	UKFGFxMoviePlayer_Manager_execSetSearchingForMatch_Parms SetSearchingForMatch_Parms;

	this->ProcessEvent ( pFnSetSearchingForMatch, &SetSearchingForMatch_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.SetStartMenuState
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::SetStartMenuState ( )
{
	static UFunction* pFnSetStartMenuState = NULL;

	if ( ! pFnSetStartMenuState )
		pFnSetStartMenuState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.SetStartMenuState" );

	UKFGFxMoviePlayer_Manager_execSetStartMenuState_Parms SetStartMenuState_Parms;

	this->ProcessEvent ( pFnSetStartMenuState, &SetStartMenuState_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.GetStartMenuState
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::GetStartMenuState ( )
{
	static UFunction* pFnGetStartMenuState = NULL;

	if ( ! pFnGetStartMenuState )
		pFnGetStartMenuState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.GetStartMenuState" );

	UKFGFxMoviePlayer_Manager_execGetStartMenuState_Parms GetStartMenuState_Parms;

	this->ProcessEvent ( pFnGetStartMenuState, &GetStartMenuState_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.GetMultiplayerMenuActive
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::GetMultiplayerMenuActive ( )
{
	static UFunction* pFnGetMultiplayerMenuActive = NULL;

	if ( ! pFnGetMultiplayerMenuActive )
		pFnGetMultiplayerMenuActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.GetMultiplayerMenuActive" );

	UKFGFxMoviePlayer_Manager_execGetMultiplayerMenuActive_Parms GetMultiplayerMenuActive_Parms;

	this->ProcessEvent ( pFnGetMultiplayerMenuActive, &GetMultiplayerMenuActive_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.IsInLobby
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::IsInLobby ( )
{
	static UFunction* pFnIsInLobby = NULL;

	if ( ! pFnIsInLobby )
		pFnIsInLobby = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.IsInLobby" );

	UKFGFxMoviePlayer_Manager_execIsInLobby_Parms IsInLobby_Parms;

	this->ProcessEvent ( pFnIsInLobby, &IsInLobby_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnLobbyStatusChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OnLobbyStatusChanged ( )
{
	static UFunction* pFnOnLobbyStatusChanged = NULL;

	if ( ! pFnOnLobbyStatusChanged )
		pFnOnLobbyStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnLobbyStatusChanged" );

	UKFGFxMoviePlayer_Manager_execOnLobbyStatusChanged_Parms OnLobbyStatusChanged_Parms;

	this->ProcessEvent ( pFnOnLobbyStatusChanged, &OnLobbyStatusChanged_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.SoloGameMenuOpened
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Manager::eventSoloGameMenuOpened ( )
{
	static UFunction* pFnSoloGameMenuOpened = NULL;

	if ( ! pFnSoloGameMenuOpened )
		pFnSoloGameMenuOpened = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.SoloGameMenuOpened" );

	UKFGFxMoviePlayer_Manager_eventSoloGameMenuOpened_Parms SoloGameMenuOpened_Parms;

	this->ProcessEvent ( pFnSoloGameMenuOpened, &SoloGameMenuOpened_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ClientRecieveNewTeam
// [0x00020000] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ClientRecieveNewTeam ( )
{
	static UFunction* pFnClientRecieveNewTeam = NULL;

	if ( ! pFnClientRecieveNewTeam )
		pFnClientRecieveNewTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ClientRecieveNewTeam" );

	UKFGFxMoviePlayer_Manager_execClientRecieveNewTeam_Parms ClientRecieveNewTeam_Parms;

	this->ProcessEvent ( pFnClientRecieveNewTeam, &ClientRecieveNewTeam_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.CanUnpauseMenuClosed
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::CanUnpauseMenuClosed ( )
{
	static UFunction* pFnCanUnpauseMenuClosed = NULL;

	if ( ! pFnCanUnpauseMenuClosed )
		pFnCanUnpauseMenuClosed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.CanUnpauseMenuClosed" );

	UKFGFxMoviePlayer_Manager_execCanUnpauseMenuClosed_Parms CanUnpauseMenuClosed_Parms;

	this->ProcessEvent ( pFnCanUnpauseMenuClosed, &CanUnpauseMenuClosed_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ConditionalPauseGame
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ConditionalPauseGame ( )
{
	static UFunction* pFnConditionalPauseGame = NULL;

	if ( ! pFnConditionalPauseGame )
		pFnConditionalPauseGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ConditionalPauseGame" );

	UKFGFxMoviePlayer_Manager_execConditionalPauseGame_Parms ConditionalPauseGame_Parms;

	this->ProcessEvent ( pFnConditionalPauseGame, &ConditionalPauseGame_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.UnloadPopups
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::UnloadPopups ( )
{
	static UFunction* pFnUnloadPopups = NULL;

	if ( ! pFnUnloadPopups )
		pFnUnloadPopups = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.UnloadPopups" );

	UKFGFxMoviePlayer_Manager_execUnloadPopups_Parms UnloadPopups_Parms;

	this->ProcessEvent ( pFnUnloadPopups, &UnloadPopups_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.LoadPopups
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::LoadPopups ( )
{
	static UFunction* pFnLoadPopups = NULL;

	if ( ! pFnLoadPopups )
		pFnLoadPopups = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.LoadPopups" );

	UKFGFxMoviePlayer_Manager_execLoadPopups_Parms LoadPopups_Parms;

	this->ProcessEvent ( pFnLoadPopups, &LoadPopups_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.UnloadCurrentPopup
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::UnloadCurrentPopup ( )
{
	static UFunction* pFnUnloadCurrentPopup = NULL;

	if ( ! pFnUnloadCurrentPopup )
		pFnUnloadCurrentPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.UnloadCurrentPopup" );

	UKFGFxMoviePlayer_Manager_execUnloadCurrentPopup_Parms UnloadCurrentPopup_Parms;

	this->ProcessEvent ( pFnUnloadCurrentPopup, &UnloadCurrentPopup_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.LoadPopup
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::LoadPopup ( )
{
	static UFunction* pFnLoadPopup = NULL;

	if ( ! pFnLoadPopup )
		pFnLoadPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.LoadPopup" );

	UKFGFxMoviePlayer_Manager_execLoadPopup_Parms LoadPopup_Parms;

	this->ProcessEvent ( pFnLoadPopup, &LoadPopup_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OpenPopup
// [0x00044003] ( FUNC_Final )
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OpenPopup ( )
{
	static UFunction* pFnOpenPopup = NULL;

	if ( ! pFnOpenPopup )
		pFnOpenPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OpenPopup" );

	UKFGFxMoviePlayer_Manager_execOpenPopup_Parms OpenPopup_Parms;

	this->ProcessEvent ( pFnOpenPopup, &OpenPopup_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.InitializePopup
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::InitializePopup ( )
{
	static UFunction* pFnInitializePopup = NULL;

	if ( ! pFnInitializePopup )
		pFnInitializePopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.InitializePopup" );

	UKFGFxMoviePlayer_Manager_execInitializePopup_Parms InitializePopup_Parms;

	this->ProcessEvent ( pFnInitializePopup, &InitializePopup_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.AssignPendingRightButtonDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::AssignPendingRightButtonDelegate ( )
{
	static UFunction* pFnAssignPendingRightButtonDelegate = NULL;

	if ( ! pFnAssignPendingRightButtonDelegate )
		pFnAssignPendingRightButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.AssignPendingRightButtonDelegate" );

	UKFGFxMoviePlayer_Manager_execAssignPendingRightButtonDelegate_Parms AssignPendingRightButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignPendingRightButtonDelegate, &AssignPendingRightButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.AssignPendingMiddleButtonDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::AssignPendingMiddleButtonDelegate ( )
{
	static UFunction* pFnAssignPendingMiddleButtonDelegate = NULL;

	if ( ! pFnAssignPendingMiddleButtonDelegate )
		pFnAssignPendingMiddleButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.AssignPendingMiddleButtonDelegate" );

	UKFGFxMoviePlayer_Manager_execAssignPendingMiddleButtonDelegate_Parms AssignPendingMiddleButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignPendingMiddleButtonDelegate, &AssignPendingMiddleButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.AssignPendingLeftButtonDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::AssignPendingLeftButtonDelegate ( )
{
	static UFunction* pFnAssignPendingLeftButtonDelegate = NULL;

	if ( ! pFnAssignPendingLeftButtonDelegate )
		pFnAssignPendingLeftButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.AssignPendingLeftButtonDelegate" );

	UKFGFxMoviePlayer_Manager_execAssignPendingLeftButtonDelegate_Parms AssignPendingLeftButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignPendingLeftButtonDelegate, &AssignPendingLeftButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.NotifyUnsuccessfulSearch
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::NotifyUnsuccessfulSearch ( )
{
	static UFunction* pFnNotifyUnsuccessfulSearch = NULL;

	if ( ! pFnNotifyUnsuccessfulSearch )
		pFnNotifyUnsuccessfulSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.NotifyUnsuccessfulSearch" );

	UKFGFxMoviePlayer_Manager_execNotifyUnsuccessfulSearch_Parms NotifyUnsuccessfulSearch_Parms;

	this->ProcessEvent ( pFnNotifyUnsuccessfulSearch, &NotifyUnsuccessfulSearch_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ShowWelcomeScreen
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ShowWelcomeScreen ( )
{
	static UFunction* pFnShowWelcomeScreen = NULL;

	if ( ! pFnShowWelcomeScreen )
		pFnShowWelcomeScreen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ShowWelcomeScreen" );

	UKFGFxMoviePlayer_Manager_execShowWelcomeScreen_Parms ShowWelcomeScreen_Parms;

	this->ProcessEvent ( pFnShowWelcomeScreen, &ShowWelcomeScreen_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.CloseTraderMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::CloseTraderMenu ( )
{
	static UFunction* pFnCloseTraderMenu = NULL;

	if ( ! pFnCloseTraderMenu )
		pFnCloseTraderMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.CloseTraderMenu" );

	UKFGFxMoviePlayer_Manager_execCloseTraderMenu_Parms CloseTraderMenu_Parms;

	this->ProcessEvent ( pFnCloseTraderMenu, &CloseTraderMenu_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnRoundOver
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OnRoundOver ( )
{
	static UFunction* pFnOnRoundOver = NULL;

	if ( ! pFnOnRoundOver )
		pFnOnRoundOver = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnRoundOver" );

	UKFGFxMoviePlayer_Manager_execOnRoundOver_Parms OnRoundOver_Parms;

	this->ProcessEvent ( pFnOnRoundOver, &OnRoundOver_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnTraderTimeStart
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OnTraderTimeStart ( )
{
	static UFunction* pFnOnTraderTimeStart = NULL;

	if ( ! pFnOnTraderTimeStart )
		pFnOnTraderTimeStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnTraderTimeStart" );

	UKFGFxMoviePlayer_Manager_execOnTraderTimeStart_Parms OnTraderTimeStart_Parms;

	this->ProcessEvent ( pFnOnTraderTimeStart, &OnTraderTimeStart_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.SetHUDVisiblity
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::SetHUDVisiblity ( )
{
	static UFunction* pFnSetHUDVisiblity = NULL;

	if ( ! pFnSetHUDVisiblity )
		pFnSetHUDVisiblity = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.SetHUDVisiblity" );

	UKFGFxMoviePlayer_Manager_execSetHUDVisiblity_Parms SetHUDVisiblity_Parms;

	this->ProcessEvent ( pFnSetHUDVisiblity, &SetHUDVisiblity_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.SetMenuVisibility
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::SetMenuVisibility ( )
{
	static UFunction* pFnSetMenuVisibility = NULL;

	if ( ! pFnSetMenuVisibility )
		pFnSetMenuVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.SetMenuVisibility" );

	UKFGFxMoviePlayer_Manager_execSetMenuVisibility_Parms SetMenuVisibility_Parms;

	this->ProcessEvent ( pFnSetMenuVisibility, &SetMenuVisibility_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.SetWidgetsVisible
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::SetWidgetsVisible ( )
{
	static UFunction* pFnSetWidgetsVisible = NULL;

	if ( ! pFnSetWidgetsVisible )
		pFnSetWidgetsVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.SetWidgetsVisible" );

	UKFGFxMoviePlayer_Manager_execSetWidgetsVisible_Parms SetWidgetsVisible_Parms;

	this->ProcessEvent ( pFnSetWidgetsVisible, &SetWidgetsVisible_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.MenusFinishedClosing
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Manager::eventMenusFinishedClosing ( )
{
	static UFunction* pFnMenusFinishedClosing = NULL;

	if ( ! pFnMenusFinishedClosing )
		pFnMenusFinishedClosing = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.MenusFinishedClosing" );

	UKFGFxMoviePlayer_Manager_eventMenusFinishedClosing_Parms MenusFinishedClosing_Parms;

	this->ProcessEvent ( pFnMenusFinishedClosing, &MenusFinishedClosing_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.PlayOpeningSound
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::PlayOpeningSound ( )
{
	static UFunction* pFnPlayOpeningSound = NULL;

	if ( ! pFnPlayOpeningSound )
		pFnPlayOpeningSound = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.PlayOpeningSound" );

	UKFGFxMoviePlayer_Manager_execPlayOpeningSound_Parms PlayOpeningSound_Parms;

	this->ProcessEvent ( pFnPlayOpeningSound, &PlayOpeningSound_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ToggleMenus
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ToggleMenus ( )
{
	static UFunction* pFnToggleMenus = NULL;

	if ( ! pFnToggleMenus )
		pFnToggleMenus = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ToggleMenus" );

	UKFGFxMoviePlayer_Manager_execToggleMenus_Parms ToggleMenus_Parms;

	this->ProcessEvent ( pFnToggleMenus, &ToggleMenus_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnCleanup
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Manager::eventOnCleanup ( )
{
	static UFunction* pFnOnCleanup = NULL;

	if ( ! pFnOnCleanup )
		pFnOnCleanup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnCleanup" );

	UKFGFxMoviePlayer_Manager_eventOnCleanup_Parms OnCleanup_Parms;

	this->ProcessEvent ( pFnOnCleanup, &OnCleanup_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Manager::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnClose" );

	UKFGFxMoviePlayer_Manager_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.CloseMenus
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::CloseMenus ( )
{
	static UFunction* pFnCloseMenus = NULL;

	if ( ! pFnCloseMenus )
		pFnCloseMenus = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.CloseMenus" );

	UKFGFxMoviePlayer_Manager_execCloseMenus_Parms CloseMenus_Parms;

	this->ProcessEvent ( pFnCloseMenus, &CloseMenus_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ClosePostGameMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ClosePostGameMenu ( )
{
	static UFunction* pFnClosePostGameMenu = NULL;

	if ( ! pFnClosePostGameMenu )
		pFnClosePostGameMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ClosePostGameMenu" );

	UKFGFxMoviePlayer_Manager_execClosePostGameMenu_Parms ClosePostGameMenu_Parms;

	this->ProcessEvent ( pFnClosePostGameMenu, &ClosePostGameMenu_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnMenuOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OnMenuOpen ( )
{
	static UFunction* pFnOnMenuOpen = NULL;

	if ( ! pFnOnMenuOpen )
		pFnOnMenuOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnMenuOpen" );

	UKFGFxMoviePlayer_Manager_execOnMenuOpen_Parms OnMenuOpen_Parms;

	this->ProcessEvent ( pFnOnMenuOpen, &OnMenuOpen_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.LoadWidgets
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::LoadWidgets ( )
{
	static UFunction* pFnLoadWidgets = NULL;

	if ( ! pFnLoadWidgets )
		pFnLoadWidgets = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.LoadWidgets" );

	UKFGFxMoviePlayer_Manager_execLoadWidgets_Parms LoadWidgets_Parms;

	this->ProcessEvent ( pFnLoadWidgets, &LoadWidgets_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.LoadMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::LoadMenu ( )
{
	static UFunction* pFnLoadMenu = NULL;

	if ( ! pFnLoadMenu )
		pFnLoadMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.LoadMenu" );

	UKFGFxMoviePlayer_Manager_execLoadMenu_Parms LoadMenu_Parms;

	this->ProcessEvent ( pFnLoadMenu, &LoadMenu_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OpenMenu
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OpenMenu ( )
{
	static UFunction* pFnOpenMenu = NULL;

	if ( ! pFnOpenMenu )
		pFnOpenMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OpenMenu" );

	UKFGFxMoviePlayer_Manager_execOpenMenu_Parms OpenMenu_Parms;

	this->ProcessEvent ( pFnOpenMenu, &OpenMenu_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.SetMenusOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::SetMenusOpen ( )
{
	static UFunction* pFnSetMenusOpen = NULL;

	if ( ! pFnSetMenusOpen )
		pFnSetMenusOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.SetMenusOpen" );

	UKFGFxMoviePlayer_Manager_execSetMenusOpen_Parms SetMenusOpen_Parms;

	this->ProcessEvent ( pFnSetMenusOpen, &SetMenusOpen_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OneSecondLoop" );

	UKFGFxMoviePlayer_Manager_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnForceUpdate
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OnForceUpdate ( )
{
	static UFunction* pFnOnForceUpdate = NULL;

	if ( ! pFnOnForceUpdate )
		pFnOnForceUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnForceUpdate" );

	UKFGFxMoviePlayer_Manager_execOnForceUpdate_Parms OnForceUpdate_Parms;

	this->ProcessEvent ( pFnOnForceUpdate, &OnForceUpdate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ForceUpdateNextFrame
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ForceUpdateNextFrame ( )
{
	static UFunction* pFnForceUpdateNextFrame = NULL;

	if ( ! pFnForceUpdateNextFrame )
		pFnForceUpdateNextFrame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ForceUpdateNextFrame" );

	UKFGFxMoviePlayer_Manager_execForceUpdateNextFrame_Parms ForceUpdateNextFrame_Parms;

	this->ProcessEvent ( pFnForceUpdateNextFrame, &ForceUpdateNextFrame_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.AllowCloseMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::AllowCloseMenu ( )
{
	static UFunction* pFnAllowCloseMenu = NULL;

	if ( ! pFnAllowCloseMenu )
		pFnAllowCloseMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.AllowCloseMenu" );

	UKFGFxMoviePlayer_Manager_execAllowCloseMenu_Parms AllowCloseMenu_Parms;

	this->ProcessEvent ( pFnAllowCloseMenu, &AllowCloseMenu_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.StatsInitialized
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::StatsInitialized ( )
{
	static UFunction* pFnStatsInitialized = NULL;

	if ( ! pFnStatsInitialized )
		pFnStatsInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.StatsInitialized" );

	UKFGFxMoviePlayer_Manager_execStatsInitialized_Parms StatsInitialized_Parms;

	this->ProcessEvent ( pFnStatsInitialized, &StatsInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Manager::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.WidgetInitialized" );

	UKFGFxMoviePlayer_Manager_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.CheckSkipLobby
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::CheckSkipLobby ( )
{
	static UFunction* pFnCheckSkipLobby = NULL;

	if ( ! pFnCheckSkipLobby )
		pFnCheckSkipLobby = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.CheckSkipLobby" );

	UKFGFxMoviePlayer_Manager_execCheckSkipLobby_Parms CheckSkipLobby_Parms;

	this->ProcessEvent ( pFnCheckSkipLobby, &CheckSkipLobby_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.ShowDelayedPopupMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::ShowDelayedPopupMessage ( )
{
	static UFunction* pFnShowDelayedPopupMessage = NULL;

	if ( ! pFnShowDelayedPopupMessage )
		pFnShowDelayedPopupMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.ShowDelayedPopupMessage" );

	UKFGFxMoviePlayer_Manager_execShowDelayedPopupMessage_Parms ShowDelayedPopupMessage_Parms;

	this->ProcessEvent ( pFnShowDelayedPopupMessage, &ShowDelayedPopupMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.DelayedOpenPopup
// [0x00824002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::DelayedOpenPopup ( )
{
	static UFunction* pFnDelayedOpenPopup = NULL;

	if ( ! pFnDelayedOpenPopup )
		pFnDelayedOpenPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.DelayedOpenPopup" );

	UKFGFxMoviePlayer_Manager_execDelayedOpenPopup_Parms DelayedOpenPopup_Parms;

	this->ProcessEvent ( pFnDelayedOpenPopup, &DelayedOpenPopup_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.DelayedShowDisconnectMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::DelayedShowDisconnectMessage ( )
{
	static UFunction* pFnDelayedShowDisconnectMessage = NULL;

	if ( ! pFnDelayedShowDisconnectMessage )
		pFnDelayedShowDisconnectMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.DelayedShowDisconnectMessage" );

	UKFGFxMoviePlayer_Manager_execDelayedShowDisconnectMessage_Parms DelayedShowDisconnectMessage_Parms;

	this->ProcessEvent ( pFnDelayedShowDisconnectMessage, &DelayedShowDisconnectMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnBuyGamePressed
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OnBuyGamePressed ( )
{
	static UFunction* pFnOnBuyGamePressed = NULL;

	if ( ! pFnOnBuyGamePressed )
		pFnOnBuyGamePressed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnBuyGamePressed" );

	UKFGFxMoviePlayer_Manager_execOnBuyGamePressed_Parms OnBuyGamePressed_Parms;

	this->ProcessEvent ( pFnOnBuyGamePressed, &OnBuyGamePressed_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.DisplayFreeTrialOverPopUp
// [0x00022002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::DisplayFreeTrialOverPopUp ( )
{
	static UFunction* pFnDisplayFreeTrialOverPopUp = NULL;

	if ( ! pFnDisplayFreeTrialOverPopUp )
		pFnDisplayFreeTrialOverPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.DisplayFreeTrialOverPopUp" );

	UKFGFxMoviePlayer_Manager_execDisplayFreeTrialOverPopUp_Parms DisplayFreeTrialOverPopUp_Parms;

	this->ProcessEvent ( pFnDisplayFreeTrialOverPopUp, &DisplayFreeTrialOverPopUp_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.DisplayCouldNotCheckFreeTrialStatusErrorPopUp
// [0x00022002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::DisplayCouldNotCheckFreeTrialStatusErrorPopUp ( )
{
	static UFunction* pFnDisplayCouldNotCheckFreeTrialStatusErrorPopUp = NULL;

	if ( ! pFnDisplayCouldNotCheckFreeTrialStatusErrorPopUp )
		pFnDisplayCouldNotCheckFreeTrialStatusErrorPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.DisplayCouldNotCheckFreeTrialStatusErrorPopUp" );

	UKFGFxMoviePlayer_Manager_execDisplayCouldNotCheckFreeTrialStatusErrorPopUp_Parms DisplayCouldNotCheckFreeTrialStatusErrorPopUp_Parms;

	this->ProcessEvent ( pFnDisplayCouldNotCheckFreeTrialStatusErrorPopUp, &DisplayCouldNotCheckFreeTrialStatusErrorPopUp_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.DisplayFreeTrialFeatureBlockedPopUp
// [0x00022002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::DisplayFreeTrialFeatureBlockedPopUp ( )
{
	static UFunction* pFnDisplayFreeTrialFeatureBlockedPopUp = NULL;

	if ( ! pFnDisplayFreeTrialFeatureBlockedPopUp )
		pFnDisplayFreeTrialFeatureBlockedPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.DisplayFreeTrialFeatureBlockedPopUp" );

	UKFGFxMoviePlayer_Manager_execDisplayFreeTrialFeatureBlockedPopUp_Parms DisplayFreeTrialFeatureBlockedPopUp_Parms;

	this->ProcessEvent ( pFnDisplayFreeTrialFeatureBlockedPopUp, &DisplayFreeTrialFeatureBlockedPopUp_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.HandleFreeTrialError
// [0x00022002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::HandleFreeTrialError ( )
{
	static UFunction* pFnHandleFreeTrialError = NULL;

	if ( ! pFnHandleFreeTrialError )
		pFnHandleFreeTrialError = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.HandleFreeTrialError" );

	UKFGFxMoviePlayer_Manager_execHandleFreeTrialError_Parms HandleFreeTrialError_Parms;

	this->ProcessEvent ( pFnHandleFreeTrialError, &HandleFreeTrialError_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.DisplayDelayedPriorityMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::DisplayDelayedPriorityMessage ( )
{
	static UFunction* pFnDisplayDelayedPriorityMessage = NULL;

	if ( ! pFnDisplayDelayedPriorityMessage )
		pFnDisplayDelayedPriorityMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.DisplayDelayedPriorityMessage" );

	UKFGFxMoviePlayer_Manager_execDisplayDelayedPriorityMessage_Parms DisplayDelayedPriorityMessage_Parms;

	this->ProcessEvent ( pFnDisplayDelayedPriorityMessage, &DisplayDelayedPriorityMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.QueueDelayedPriorityMessage
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::QueueDelayedPriorityMessage ( )
{
	static UFunction* pFnQueueDelayedPriorityMessage = NULL;

	if ( ! pFnQueueDelayedPriorityMessage )
		pFnQueueDelayedPriorityMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.QueueDelayedPriorityMessage" );

	UKFGFxMoviePlayer_Manager_execQueueDelayedPriorityMessage_Parms QueueDelayedPriorityMessage_Parms;

	this->ProcessEvent ( pFnQueueDelayedPriorityMessage, &QueueDelayedPriorityMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.GetBackgroundMovie
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::GetBackgroundMovie ( )
{
	static UFunction* pFnGetBackgroundMovie = NULL;

	if ( ! pFnGetBackgroundMovie )
		pFnGetBackgroundMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.GetBackgroundMovie" );

	UKFGFxMoviePlayer_Manager_execGetBackgroundMovie_Parms GetBackgroundMovie_Parms;

	this->ProcessEvent ( pFnGetBackgroundMovie, &GetBackgroundMovie_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.UpdateBackgroundMovie
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::UpdateBackgroundMovie ( )
{
	static UFunction* pFnUpdateBackgroundMovie = NULL;

	if ( ! pFnUpdateBackgroundMovie )
		pFnUpdateBackgroundMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.UpdateBackgroundMovie" );

	UKFGFxMoviePlayer_Manager_execUpdateBackgroundMovie_Parms UpdateBackgroundMovie_Parms;

	this->ProcessEvent ( pFnUpdateBackgroundMovie, &UpdateBackgroundMovie_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.LaunchMenus
// [0x00824002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::LaunchMenus ( )
{
	static UFunction* pFnLaunchMenus = NULL;

	if ( ! pFnLaunchMenus )
		pFnLaunchMenus = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.LaunchMenus" );

	UKFGFxMoviePlayer_Manager_execLaunchMenus_Parms LaunchMenus_Parms;

	this->ProcessEvent ( pFnLaunchMenus, &LaunchMenus_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.OnProfileSettingsRead
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::OnProfileSettingsRead ( )
{
	static UFunction* pFnOnProfileSettingsRead = NULL;

	if ( ! pFnOnProfileSettingsRead )
		pFnOnProfileSettingsRead = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.OnProfileSettingsRead" );

	UKFGFxMoviePlayer_Manager_execOnProfileSettingsRead_Parms OnProfileSettingsRead_Parms;

	this->ProcessEvent ( pFnOnProfileSettingsRead, &OnProfileSettingsRead_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.Init
// [0x00824002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.Init" );

	UKFGFxMoviePlayer_Manager_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.PendingLeftButtonDelegate
// [0x00120000] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::PendingLeftButtonDelegate ( )
{
	static UFunction* pFnPendingLeftButtonDelegate = NULL;

	if ( ! pFnPendingLeftButtonDelegate )
		pFnPendingLeftButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.PendingLeftButtonDelegate" );

	UKFGFxMoviePlayer_Manager_execPendingLeftButtonDelegate_Parms PendingLeftButtonDelegate_Parms;

	this->ProcessEvent ( pFnPendingLeftButtonDelegate, &PendingLeftButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.PendingMiddleButtonDelegate
// [0x00120000] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::PendingMiddleButtonDelegate ( )
{
	static UFunction* pFnPendingMiddleButtonDelegate = NULL;

	if ( ! pFnPendingMiddleButtonDelegate )
		pFnPendingMiddleButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.PendingMiddleButtonDelegate" );

	UKFGFxMoviePlayer_Manager_execPendingMiddleButtonDelegate_Parms PendingMiddleButtonDelegate_Parms;

	this->ProcessEvent ( pFnPendingMiddleButtonDelegate, &PendingMiddleButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager.PendingRightButtonDelegate
// [0x00120000] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager::PendingRightButtonDelegate ( )
{
	static UFunction* pFnPendingRightButtonDelegate = NULL;

	if ( ! pFnPendingRightButtonDelegate )
		pFnPendingRightButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager.PendingRightButtonDelegate" );

	UKFGFxMoviePlayer_Manager_execPendingRightButtonDelegate_Parms PendingRightButtonDelegate_Parms;

	this->ProcessEvent ( pFnPendingRightButtonDelegate, &PendingRightButtonDelegate_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetFriendlyMapName
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetFriendlyMapName ( )
{
	static UFunction* pFnGetFriendlyMapName = NULL;

	if ( ! pFnGetFriendlyMapName )
		pFnGetFriendlyMapName = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetFriendlyMapName" );

	UKFCommon_LocalizedStrings_execGetFriendlyMapName_Parms GetFriendlyMapName_Parms;

	this->ProcessEvent ( pFnGetFriendlyMapName, &GetFriendlyMapName_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetGameModeString
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetGameModeString ( )
{
	static UFunction* pFnGetGameModeString = NULL;

	if ( ! pFnGetGameModeString )
		pFnGetGameModeString = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetGameModeString" );

	UKFCommon_LocalizedStrings_execGetGameModeString_Parms GetGameModeString_Parms;

	this->ProcessEvent ( pFnGetGameModeString, &GetGameModeString_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetGameModeStringsArray
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetGameModeStringsArray ( )
{
	static UFunction* pFnGetGameModeStringsArray = NULL;

	if ( ! pFnGetGameModeStringsArray )
		pFnGetGameModeStringsArray = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetGameModeStringsArray" );

	UKFCommon_LocalizedStrings_execGetGameModeStringsArray_Parms GetGameModeStringsArray_Parms;

	this->ProcessEvent ( pFnGetGameModeStringsArray, &GetGameModeStringsArray_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetPermissionStringsArray
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetPermissionStringsArray ( )
{
	static UFunction* pFnGetPermissionStringsArray = NULL;

	if ( ! pFnGetPermissionStringsArray )
		pFnGetPermissionStringsArray = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetPermissionStringsArray" );

	UKFCommon_LocalizedStrings_execGetPermissionStringsArray_Parms GetPermissionStringsArray_Parms;

	this->ProcessEvent ( pFnGetPermissionStringsArray, &GetPermissionStringsArray_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetPermissionString
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetPermissionString ( )
{
	static UFunction* pFnGetPermissionString = NULL;

	if ( ! pFnGetPermissionString )
		pFnGetPermissionString = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetPermissionString" );

	UKFCommon_LocalizedStrings_execGetPermissionString_Parms GetPermissionString_Parms;

	this->ProcessEvent ( pFnGetPermissionString, &GetPermissionString_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetServerTypeString
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetServerTypeString ( )
{
	static UFunction* pFnGetServerTypeString = NULL;

	if ( ! pFnGetServerTypeString )
		pFnGetServerTypeString = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetServerTypeString" );

	UKFCommon_LocalizedStrings_execGetServerTypeString_Parms GetServerTypeString_Parms;

	this->ProcessEvent ( pFnGetServerTypeString, &GetServerTypeString_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetLengthString
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetLengthString ( )
{
	static UFunction* pFnGetLengthString = NULL;

	if ( ! pFnGetLengthString )
		pFnGetLengthString = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetLengthString" );

	UKFCommon_LocalizedStrings_execGetLengthString_Parms GetLengthString_Parms;

	this->ProcessEvent ( pFnGetLengthString, &GetLengthString_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetLengthStringsArray
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetLengthStringsArray ( )
{
	static UFunction* pFnGetLengthStringsArray = NULL;

	if ( ! pFnGetLengthStringsArray )
		pFnGetLengthStringsArray = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetLengthStringsArray" );

	UKFCommon_LocalizedStrings_execGetLengthStringsArray_Parms GetLengthStringsArray_Parms;

	this->ProcessEvent ( pFnGetLengthStringsArray, &GetLengthStringsArray_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetDifficultyString
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetDifficultyString ( )
{
	static UFunction* pFnGetDifficultyString = NULL;

	if ( ! pFnGetDifficultyString )
		pFnGetDifficultyString = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetDifficultyString" );

	UKFCommon_LocalizedStrings_execGetDifficultyString_Parms GetDifficultyString_Parms;

	this->ProcessEvent ( pFnGetDifficultyString, &GetDifficultyString_Parms, NULL );
};

// Function KFGame.KFCommon_LocalizedStrings.GetDifficultyStringsArray
// [0x00022002] 
// Parameters infos:

void UKFCommon_LocalizedStrings::GetDifficultyStringsArray ( )
{
	static UFunction* pFnGetDifficultyStringsArray = NULL;

	if ( ! pFnGetDifficultyStringsArray )
		pFnGetDifficultyStringsArray = UObject::FindObject< UFunction > ( "Function KFGame.KFCommon_LocalizedStrings.GetDifficultyStringsArray" );

	UKFCommon_LocalizedStrings_execGetDifficultyStringsArray_Parms GetDifficultyStringsArray_Parms;

	this->ProcessEvent ( pFnGetDifficultyStringsArray, &GetDifficultyStringsArray_Parms, NULL );
};

// Function KFGame.KFBossCamera.GetOffsets
// [0x00C20002] 
// Parameters infos:

void UKFBossCamera::GetOffsets ( )
{
	static UFunction* pFnGetOffsets = NULL;

	if ( ! pFnGetOffsets )
		pFnGetOffsets = UObject::FindObject< UFunction > ( "Function KFGame.KFBossCamera.GetOffsets" );

	UKFBossCamera_execGetOffsets_Parms GetOffsets_Parms;

	this->ProcessEvent ( pFnGetOffsets, &GetOffsets_Parms, NULL );
};

// Function KFGame.KFBossCamera.UpdateCamera
// [0x00C20002] 
// Parameters infos:

void UKFBossCamera::UpdateCamera ( )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFBossCamera.UpdateCamera" );

	UKFBossCamera_execUpdateCamera_Parms UpdateCamera_Parms;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );
};

// Function KFGame.KFBossCamera.OnBecomeInActive
// [0x00020002] 
// Parameters infos:

void UKFBossCamera::OnBecomeInActive ( )
{
	static UFunction* pFnOnBecomeInActive = NULL;

	if ( ! pFnOnBecomeInActive )
		pFnOnBecomeInActive = UObject::FindObject< UFunction > ( "Function KFGame.KFBossCamera.OnBecomeInActive" );

	UKFBossCamera_execOnBecomeInActive_Parms OnBecomeInActive_Parms;

	this->ProcessEvent ( pFnOnBecomeInActive, &OnBecomeInActive_Parms, NULL );
};

// Function KFGame.KFBossCamera.OnBecomeActive
// [0x00020002] 
// Parameters infos:

void UKFBossCamera::OnBecomeActive ( )
{
	static UFunction* pFnOnBecomeActive = NULL;

	if ( ! pFnOnBecomeActive )
		pFnOnBecomeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFBossCamera.OnBecomeActive" );

	UKFBossCamera_execOnBecomeActive_Parms OnBecomeActive_Parms;

	this->ProcessEvent ( pFnOnBecomeActive, &OnBecomeActive_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.GetNumMinionsToSpawn
// [0x00020000] 
// Parameters infos:

void UKFInterface_MonsterBoss::GetNumMinionsToSpawn ( )
{
	static UFunction* pFnGetNumMinionsToSpawn = NULL;

	if ( ! pFnGetNumMinionsToSpawn )
		pFnGetNumMinionsToSpawn = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.GetNumMinionsToSpawn" );

	UKFInterface_MonsterBoss_execGetNumMinionsToSpawn_Parms GetNumMinionsToSpawn_Parms;

	this->ProcessEvent ( pFnGetNumMinionsToSpawn, &GetNumMinionsToSpawn_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.GetWaveInfo
// [0x00020000] 
// Parameters infos:

void UKFInterface_MonsterBoss::GetWaveInfo ( )
{
	static UFunction* pFnGetWaveInfo = NULL;

	if ( ! pFnGetWaveInfo )
		pFnGetWaveInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.GetWaveInfo" );

	UKFInterface_MonsterBoss_execGetWaveInfo_Parms GetWaveInfo_Parms;

	this->ProcessEvent ( pFnGetWaveInfo, &GetWaveInfo_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.OnZedDied
// [0x00020000] 
// Parameters infos:

void UKFInterface_MonsterBoss::OnZedDied ( )
{
	static UFunction* pFnOnZedDied = NULL;

	if ( ! pFnOnZedDied )
		pFnOnZedDied = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.OnZedDied" );

	UKFInterface_MonsterBoss_execOnZedDied_Parms OnZedDied_Parms;

	this->ProcessEvent ( pFnOnZedDied, &OnZedDied_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.GetBossCameraOffset
// [0x00020100] 
// Parameters infos:

void UKFInterface_MonsterBoss::GetBossCameraOffset ( )
{
	static UFunction* pFnGetBossCameraOffset = NULL;

	if ( ! pFnGetBossCameraOffset )
		pFnGetBossCameraOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.GetBossCameraOffset" );

	UKFInterface_MonsterBoss_execGetBossCameraOffset_Parms GetBossCameraOffset_Parms;

	this->ProcessEvent ( pFnGetBossCameraOffset, &GetBossCameraOffset_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.GetBossCameraSocket
// [0x00020100] 
// Parameters infos:

void UKFInterface_MonsterBoss::GetBossCameraSocket ( )
{
	static UFunction* pFnGetBossCameraSocket = NULL;

	if ( ! pFnGetBossCameraSocket )
		pFnGetBossCameraSocket = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.GetBossCameraSocket" );

	UKFInterface_MonsterBoss_execGetBossCameraSocket_Parms GetBossCameraSocket_Parms;

	this->ProcessEvent ( pFnGetBossCameraSocket, &GetBossCameraSocket_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.UseAnimatedBossCamera
// [0x00020100] 
// Parameters infos:

void UKFInterface_MonsterBoss::UseAnimatedBossCamera ( )
{
	static UFunction* pFnUseAnimatedBossCamera = NULL;

	if ( ! pFnUseAnimatedBossCamera )
		pFnUseAnimatedBossCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.UseAnimatedBossCamera" );

	UKFInterface_MonsterBoss_execUseAnimatedBossCamera_Parms UseAnimatedBossCamera_Parms;

	this->ProcessEvent ( pFnUseAnimatedBossCamera, &UseAnimatedBossCamera_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.SetAnimatedBossCamera
// [0x00024100] 
// Parameters infos:

void UKFInterface_MonsterBoss::SetAnimatedBossCamera ( )
{
	static UFunction* pFnSetAnimatedBossCamera = NULL;

	if ( ! pFnSetAnimatedBossCamera )
		pFnSetAnimatedBossCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.SetAnimatedBossCamera" );

	UKFInterface_MonsterBoss_execSetAnimatedBossCamera_Parms SetAnimatedBossCamera_Parms;

	this->ProcessEvent ( pFnSetAnimatedBossCamera, &SetAnimatedBossCamera_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.GetHealthPercent
// [0x00020100] 
// Parameters infos:

void UKFInterface_MonsterBoss::GetHealthPercent ( )
{
	static UFunction* pFnGetHealthPercent = NULL;

	if ( ! pFnGetHealthPercent )
		pFnGetHealthPercent = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.GetHealthPercent" );

	UKFInterface_MonsterBoss_execGetHealthPercent_Parms GetHealthPercent_Parms;

	this->ProcessEvent ( pFnGetHealthPercent, &GetHealthPercent_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.IsABoss
// [0x00022900] ( FUNC_Event )
// Parameters infos:

void UKFInterface_MonsterBoss::eventIsABoss ( )
{
	static UFunction* pFnIsABoss = NULL;

	if ( ! pFnIsABoss )
		pFnIsABoss = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.IsABoss" );

	UKFInterface_MonsterBoss_eventIsABoss_Parms IsABoss_Parms;

	this->ProcessEvent ( pFnIsABoss, &IsABoss_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.GetRandomBossCaption
// [0x00020100] 
// Parameters infos:

void UKFInterface_MonsterBoss::GetRandomBossCaption ( )
{
	static UFunction* pFnGetRandomBossCaption = NULL;

	if ( ! pFnGetRandomBossCaption )
		pFnGetRandomBossCaption = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.GetRandomBossCaption" );

	UKFInterface_MonsterBoss_execGetRandomBossCaption_Parms GetRandomBossCaption_Parms;

	this->ProcessEvent ( pFnGetRandomBossCaption, &GetRandomBossCaption_Parms, NULL );
};

// Function KFGame.KFInterface_MonsterBoss.GetMonsterPawn
// [0x00020100] 
// Parameters infos:

void UKFInterface_MonsterBoss::GetMonsterPawn ( )
{
	static UFunction* pFnGetMonsterPawn = NULL;

	if ( ! pFnGetMonsterPawn )
		pFnGetMonsterPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MonsterBoss.GetMonsterPawn" );

	UKFInterface_MonsterBoss_execGetMonsterPawn_Parms GetMonsterPawn_Parms;

	this->ProcessEvent ( pFnGetMonsterPawn, &GetMonsterPawn_Parms, NULL );
};

// Function KFGame.KFCameraLensEmit_Fire.NotifyRetriggered
// [0x00020002] 
// Parameters infos:

void AKFCameraLensEmit_Fire::NotifyRetriggered ( )
{
	static UFunction* pFnNotifyRetriggered = NULL;

	if ( ! pFnNotifyRetriggered )
		pFnNotifyRetriggered = UObject::FindObject< UFunction > ( "Function KFGame.KFCameraLensEmit_Fire.NotifyRetriggered" );

	AKFCameraLensEmit_Fire_execNotifyRetriggered_Parms NotifyRetriggered_Parms;

	this->ProcessEvent ( pFnNotifyRetriggered, &NotifyRetriggered_Parms, NULL );
};

// Function KFGame.KFUnlockableAsset.GetAssetId
// [0x00020000] 
// Parameters infos:

void UKFUnlockableAsset::GetAssetId ( )
{
	static UFunction* pFnGetAssetId = NULL;

	if ( ! pFnGetAssetId )
		pFnGetAssetId = UObject::FindObject< UFunction > ( "Function KFGame.KFUnlockableAsset.GetAssetId" );

	UKFUnlockableAsset_execGetAssetId_Parms GetAssetId_Parms;

	this->ProcessEvent ( pFnGetAssetId, &GetAssetId_Parms, NULL );
};

// Function KFGame.KFGoreChunkAttachmentInfo.ShouldDetachGoreChunk
// [0x00020102] 
// Parameters infos:

void UKFGoreChunkAttachmentInfo::ShouldDetachGoreChunk ( )
{
	static UFunction* pFnShouldDetachGoreChunk = NULL;

	if ( ! pFnShouldDetachGoreChunk )
		pFnShouldDetachGoreChunk = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreChunkAttachmentInfo.ShouldDetachGoreChunk" );

	UKFGoreChunkAttachmentInfo_execShouldDetachGoreChunk_Parms ShouldDetachGoreChunk_Parms;

	this->ProcessEvent ( pFnShouldDetachGoreChunk, &ShouldDetachGoreChunk_Parms, NULL );
};

// Function KFGame.KFGoreChunkAttachmentInfo.ShouldAttachGoreChunk
// [0x00020102] 
// Parameters infos:

void UKFGoreChunkAttachmentInfo::ShouldAttachGoreChunk ( )
{
	static UFunction* pFnShouldAttachGoreChunk = NULL;

	if ( ! pFnShouldAttachGoreChunk )
		pFnShouldAttachGoreChunk = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreChunkAttachmentInfo.ShouldAttachGoreChunk" );

	UKFGoreChunkAttachmentInfo_execShouldAttachGoreChunk_Parms ShouldAttachGoreChunk_Parms;

	this->ProcessEvent ( pFnShouldAttachGoreChunk, &ShouldAttachGoreChunk_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_VoteKick
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_VoteKick ( )
{
	static UFunction* pFnCallback_VoteKick = NULL;

	if ( ! pFnCallback_VoteKick )
		pFnCallback_VoteKick = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_VoteKick" );

	UKFGFxMoviePlayer_HUD_execCallback_VoteKick_Parms Callback_VoteKick_Parms;

	this->ProcessEvent ( pFnCallback_VoteKick, &Callback_VoteKick_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_VoiceCommsSelection
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_VoiceCommsSelection ( )
{
	static UFunction* pFnCallback_VoiceCommsSelection = NULL;

	if ( ! pFnCallback_VoiceCommsSelection )
		pFnCallback_VoiceCommsSelection = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_VoiceCommsSelection" );

	UKFGFxMoviePlayer_HUD_execCallback_VoiceCommsSelection_Parms Callback_VoiceCommsSelection_Parms;

	this->ProcessEvent ( pFnCallback_VoiceCommsSelection, &Callback_VoiceCommsSelection_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_VoiceCommsSay
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_VoiceCommsSay ( )
{
	static UFunction* pFnCallback_VoiceCommsSay = NULL;

	if ( ! pFnCallback_VoiceCommsSay )
		pFnCallback_VoiceCommsSay = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_VoiceCommsSay" );

	UKFGFxMoviePlayer_HUD_execCallback_VoiceCommsSay_Parms Callback_VoiceCommsSay_Parms;

	this->ProcessEvent ( pFnCallback_VoiceCommsSay, &Callback_VoiceCommsSay_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_WeaponSelectFadedOut
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_WeaponSelectFadedOut ( )
{
	static UFunction* pFnCallback_WeaponSelectFadedOut = NULL;

	if ( ! pFnCallback_WeaponSelectFadedOut )
		pFnCallback_WeaponSelectFadedOut = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_WeaponSelectFadedOut" );

	UKFGFxMoviePlayer_HUD_execCallback_WeaponSelectFadedOut_Parms Callback_WeaponSelectFadedOut_Parms;

	this->ProcessEvent ( pFnCallback_WeaponSelectFadedOut, &Callback_WeaponSelectFadedOut_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_SelectWeapon
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_SelectWeapon ( )
{
	static UFunction* pFnCallback_SelectWeapon = NULL;

	if ( ! pFnCallback_SelectWeapon )
		pFnCallback_SelectWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_SelectWeapon" );

	UKFGFxMoviePlayer_HUD_execCallback_SelectWeapon_Parms Callback_SelectWeapon_Parms;

	this->ProcessEvent ( pFnCallback_SelectWeapon, &Callback_SelectWeapon_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_ChatBoxClosed
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_ChatBoxClosed ( )
{
	static UFunction* pFnCallback_ChatBoxClosed = NULL;

	if ( ! pFnCallback_ChatBoxClosed )
		pFnCallback_ChatBoxClosed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_ChatBoxClosed" );

	UKFGFxMoviePlayer_HUD_execCallback_ChatBoxClosed_Parms Callback_ChatBoxClosed_Parms;

	this->ProcessEvent ( pFnCallback_ChatBoxClosed, &Callback_ChatBoxClosed_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_BroadcastChatMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_BroadcastChatMessage ( )
{
	static UFunction* pFnCallback_BroadcastChatMessage = NULL;

	if ( ! pFnCallback_BroadcastChatMessage )
		pFnCallback_BroadcastChatMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_BroadcastChatMessage" );

	UKFGFxMoviePlayer_HUD_execCallback_BroadcastChatMessage_Parms Callback_BroadcastChatMessage_Parms;

	this->ProcessEvent ( pFnCallback_BroadcastChatMessage, &Callback_BroadcastChatMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_PriorityMessageComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_PriorityMessageComplete ( )
{
	static UFunction* pFnCallback_PriorityMessageComplete = NULL;

	if ( ! pFnCallback_PriorityMessageComplete )
		pFnCallback_PriorityMessageComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_PriorityMessageComplete" );

	UKFGFxMoviePlayer_HUD_execCallback_PriorityMessageComplete_Parms Callback_PriorityMessageComplete_Parms;

	this->ProcessEvent ( pFnCallback_PriorityMessageComplete, &Callback_PriorityMessageComplete_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Callback_ObjMessageFired
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Callback_ObjMessageFired ( )
{
	static UFunction* pFnCallback_ObjMessageFired = NULL;

	if ( ! pFnCallback_ObjMessageFired )
		pFnCallback_ObjMessageFired = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Callback_ObjMessageFired" );

	UKFGFxMoviePlayer_HUD_execCallback_ObjMessageFired_Parms Callback_ObjMessageFired_Parms;

	this->ProcessEvent ( pFnCallback_ObjMessageFired, &Callback_ObjMessageFired_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ReceivePawn
// [0x00020000] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ReceivePawn ( )
{
	static UFunction* pFnReceivePawn = NULL;

	if ( ! pFnReceivePawn )
		pFnReceivePawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ReceivePawn" );

	UKFGFxMoviePlayer_HUD_execReceivePawn_Parms ReceivePawn_Parms;

	this->ProcessEvent ( pFnReceivePawn, &ReceivePawn_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.PawnDied
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::PawnDied ( )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.PawnDied" );

	UKFGFxMoviePlayer_HUD_execPawnDied_Parms PawnDied_Parms;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ClearBuffIcons
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ClearBuffIcons ( )
{
	static UFunction* pFnClearBuffIcons = NULL;

	if ( ! pFnClearBuffIcons )
		pFnClearBuffIcons = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ClearBuffIcons" );

	UKFGFxMoviePlayer_HUD_execClearBuffIcons_Parms ClearBuffIcons_Parms;

	this->ProcessEvent ( pFnClearBuffIcons, &ClearBuffIcons_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.NotifyHUDofWeapon
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::NotifyHUDofWeapon ( )
{
	static UFunction* pFnNotifyHUDofWeapon = NULL;

	if ( ! pFnNotifyHUDofWeapon )
		pFnNotifyHUDofWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.NotifyHUDofWeapon" );

	UKFGFxMoviePlayer_HUD_execNotifyHUDofWeapon_Parms NotifyHUDofWeapon_Parms;

	this->ProcessEvent ( pFnNotifyHUDofWeapon, &NotifyHUDofWeapon_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateScale
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateScale ( )
{
	static UFunction* pFnUpdateScale = NULL;

	if ( ! pFnUpdateScale )
		pFnUpdateScale = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateScale" );

	UKFGFxMoviePlayer_HUD_execUpdateScale_Parms UpdateScale_Parms;

	this->ProcessEvent ( pFnUpdateScale, &UpdateScale_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateKickVoteCount
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateKickVoteCount ( )
{
	static UFunction* pFnUpdateKickVoteCount = NULL;

	if ( ! pFnUpdateKickVoteCount )
		pFnUpdateKickVoteCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateKickVoteCount" );

	UKFGFxMoviePlayer_HUD_execUpdateKickVoteCount_Parms UpdateKickVoteCount_Parms;

	this->ProcessEvent ( pFnUpdateKickVoteCount, &UpdateKickVoteCount_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.HideKickVote
// [0x00020102] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::HideKickVote ( )
{
	static UFunction* pFnHideKickVote = NULL;

	if ( ! pFnHideKickVote )
		pFnHideKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.HideKickVote" );

	UKFGFxMoviePlayer_HUD_execHideKickVote_Parms HideKickVote_Parms;

	this->ProcessEvent ( pFnHideKickVote, &HideKickVote_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ShowKickVote
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ShowKickVote ( )
{
	static UFunction* pFnShowKickVote = NULL;

	if ( ! pFnShowKickVote )
		pFnShowKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ShowKickVote" );

	UKFGFxMoviePlayer_HUD_execShowKickVote_Parms ShowKickVote_Parms;

	this->ProcessEvent ( pFnShowKickVote, &ShowKickVote_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.OpenChatBox
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::OpenChatBox ( )
{
	static UFunction* pFnOpenChatBox = NULL;

	if ( ! pFnOpenChatBox )
		pFnOpenChatBox = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.OpenChatBox" );

	UKFGFxMoviePlayer_HUD_execOpenChatBox_Parms OpenChatBox_Parms;

	this->ProcessEvent ( pFnOpenChatBox, &OpenChatBox_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateUsingGamePad
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateUsingGamePad ( )
{
	static UFunction* pFnUpdateUsingGamePad = NULL;

	if ( ! pFnUpdateUsingGamePad )
		pFnUpdateUsingGamePad = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateUsingGamePad" );

	UKFGFxMoviePlayer_HUD_execUpdateUsingGamePad_Parms UpdateUsingGamePad_Parms;

	this->ProcessEvent ( pFnUpdateUsingGamePad, &UpdateUsingGamePad_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.EatMyInput
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::EatMyInput ( )
{
	static UFunction* pFnEatMyInput = NULL;

	if ( ! pFnEatMyInput )
		pFnEatMyInput = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.EatMyInput" );

	UKFGFxMoviePlayer_HUD_execEatMyInput_Parms EatMyInput_Parms;

	this->ProcessEvent ( pFnEatMyInput, &EatMyInput_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateRhythmCounterWidget
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateRhythmCounterWidget ( )
{
	static UFunction* pFnUpdateRhythmCounterWidget = NULL;

	if ( ! pFnUpdateRhythmCounterWidget )
		pFnUpdateRhythmCounterWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateRhythmCounterWidget" );

	UKFGFxMoviePlayer_HUD_execUpdateRhythmCounterWidget_Parms UpdateRhythmCounterWidget_Parms;

	this->ProcessEvent ( pFnUpdateRhythmCounterWidget, &UpdateRhythmCounterWidget_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ShowNonCriticalMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ShowNonCriticalMessage ( )
{
	static UFunction* pFnShowNonCriticalMessage = NULL;

	if ( ! pFnShowNonCriticalMessage )
		pFnShowNonCriticalMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ShowNonCriticalMessage" );

	UKFGFxMoviePlayer_HUD_execShowNonCriticalMessage_Parms ShowNonCriticalMessage_Parms;

	this->ProcessEvent ( pFnShowNonCriticalMessage, &ShowNonCriticalMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.HideInteractionMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::HideInteractionMessage ( )
{
	static UFunction* pFnHideInteractionMessage = NULL;

	if ( ! pFnHideInteractionMessage )
		pFnHideInteractionMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.HideInteractionMessage" );

	UKFGFxMoviePlayer_HUD_execHideInteractionMessage_Parms HideInteractionMessage_Parms;

	this->ProcessEvent ( pFnHideInteractionMessage, &HideInteractionMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.SendInteractionMessageToGFX
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::SendInteractionMessageToGFX ( )
{
	static UFunction* pFnSendInteractionMessageToGFX = NULL;

	if ( ! pFnSendInteractionMessageToGFX )
		pFnSendInteractionMessageToGFX = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.SendInteractionMessageToGFX" );

	UKFGFxMoviePlayer_HUD_execSendInteractionMessageToGFX_Parms SendInteractionMessageToGFX_Parms;

	this->ProcessEvent ( pFnSendInteractionMessageToGFX, &SendInteractionMessageToGFX_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.GetInteractionMessagePriority
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::GetInteractionMessagePriority ( )
{
	static UFunction* pFnGetInteractionMessagePriority = NULL;

	if ( ! pFnGetInteractionMessagePriority )
		pFnGetInteractionMessagePriority = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.GetInteractionMessagePriority" );

	UKFGFxMoviePlayer_HUD_execGetInteractionMessagePriority_Parms GetInteractionMessagePriority_Parms;

	this->ProcessEvent ( pFnGetInteractionMessagePriority, &GetInteractionMessagePriority_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.DisplayInteractionMessage
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::DisplayInteractionMessage ( )
{
	static UFunction* pFnDisplayInteractionMessage = NULL;

	if ( ! pFnDisplayInteractionMessage )
		pFnDisplayInteractionMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.DisplayInteractionMessage" );

	UKFGFxMoviePlayer_HUD_execDisplayInteractionMessage_Parms DisplayInteractionMessage_Parms;

	this->ProcessEvent ( pFnDisplayInteractionMessage, &DisplayInteractionMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.DisplayNewObjective
// [0x00020102] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::DisplayNewObjective ( )
{
	static UFunction* pFnDisplayNewObjective = NULL;

	if ( ! pFnDisplayNewObjective )
		pFnDisplayNewObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.DisplayNewObjective" );

	UKFGFxMoviePlayer_HUD_execDisplayNewObjective_Parms DisplayNewObjective_Parms;

	this->ProcessEvent ( pFnDisplayNewObjective, &DisplayNewObjective_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.DisplayObjectiveResults
// [0x00020102] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::DisplayObjectiveResults ( )
{
	static UFunction* pFnDisplayObjectiveResults = NULL;

	if ( ! pFnDisplayObjectiveResults )
		pFnDisplayObjectiveResults = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.DisplayObjectiveResults" );

	UKFGFxMoviePlayer_HUD_execDisplayObjectiveResults_Parms DisplayObjectiveResults_Parms;

	this->ProcessEvent ( pFnDisplayObjectiveResults, &DisplayObjectiveResults_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.PlayObjectiveAudio
// [0x00020102] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::PlayObjectiveAudio ( )
{
	static UFunction* pFnPlayObjectiveAudio = NULL;

	if ( ! pFnPlayObjectiveAudio )
		pFnPlayObjectiveAudio = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.PlayObjectiveAudio" );

	UKFGFxMoviePlayer_HUD_execPlayObjectiveAudio_Parms PlayObjectiveAudio_Parms;

	this->ProcessEvent ( pFnPlayObjectiveAudio, &PlayObjectiveAudio_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ShouldCheckForObjective
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ShouldCheckForObjective ( )
{
	static UFunction* pFnShouldCheckForObjective = NULL;

	if ( ! pFnShouldCheckForObjective )
		pFnShouldCheckForObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ShouldCheckForObjective" );

	UKFGFxMoviePlayer_HUD_execShouldCheckForObjective_Parms ShouldCheckForObjective_Parms;

	this->ProcessEvent ( pFnShouldCheckForObjective, &ShouldCheckForObjective_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.GetWaveTier
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::GetWaveTier ( )
{
	static UFunction* pFnGetWaveTier = NULL;

	if ( ! pFnGetWaveTier )
		pFnGetWaveTier = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.GetWaveTier" );

	UKFGFxMoviePlayer_HUD_execGetWaveTier_Parms GetWaveTier_Parms;

	this->ProcessEvent ( pFnGetWaveTier, &GetWaveTier_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.DisplayExpandedWaveInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::DisplayExpandedWaveInfo ( )
{
	static UFunction* pFnDisplayExpandedWaveInfo = NULL;

	if ( ! pFnDisplayExpandedWaveInfo )
		pFnDisplayExpandedWaveInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.DisplayExpandedWaveInfo" );

	UKFGFxMoviePlayer_HUD_execDisplayExpandedWaveInfo_Parms DisplayExpandedWaveInfo_Parms;

	this->ProcessEvent ( pFnDisplayExpandedWaveInfo, &DisplayExpandedWaveInfo_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.DisplayPriorityMessage
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::DisplayPriorityMessage ( )
{
	static UFunction* pFnDisplayPriorityMessage = NULL;

	if ( ! pFnDisplayPriorityMessage )
		pFnDisplayPriorityMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.DisplayPriorityMessage" );

	UKFGFxMoviePlayer_HUD_execDisplayPriorityMessage_Parms DisplayPriorityMessage_Parms;

	this->ProcessEvent ( pFnDisplayPriorityMessage, &DisplayPriorityMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.HideBossNamePlate
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::HideBossNamePlate ( )
{
	static UFunction* pFnHideBossNamePlate = NULL;

	if ( ! pFnHideBossNamePlate )
		pFnHideBossNamePlate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.HideBossNamePlate" );

	UKFGFxMoviePlayer_HUD_execHideBossNamePlate_Parms HideBossNamePlate_Parms;

	this->ProcessEvent ( pFnHideBossNamePlate, &HideBossNamePlate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ShowBossNameplate
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ShowBossNameplate ( )
{
	static UFunction* pFnShowBossNameplate = NULL;

	if ( ! pFnShowBossNameplate )
		pFnShowBossNameplate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ShowBossNameplate" );

	UKFGFxMoviePlayer_HUD_execShowBossNameplate_Parms ShowBossNameplate_Parms;

	this->ProcessEvent ( pFnShowBossNameplate, &ShowBossNameplate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ShowKillMessage
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ShowKillMessage ( )
{
	static UFunction* pFnShowKillMessage = NULL;

	if ( ! pFnShowKillMessage )
		pFnShowKillMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ShowKillMessage" );

	UKFGFxMoviePlayer_HUD_execShowKillMessage_Parms ShowKillMessage_Parms;

	this->ProcessEvent ( pFnShowKillMessage, &ShowKillMessage_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.NotifyHUDofPRIDestroyed
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::NotifyHUDofPRIDestroyed ( )
{
	static UFunction* pFnNotifyHUDofPRIDestroyed = NULL;

	if ( ! pFnNotifyHUDofPRIDestroyed )
		pFnNotifyHUDofPRIDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.NotifyHUDofPRIDestroyed" );

	UKFGFxMoviePlayer_HUD_execNotifyHUDofPRIDestroyed_Parms NotifyHUDofPRIDestroyed_Parms;

	this->ProcessEvent ( pFnNotifyHUDofPRIDestroyed, &NotifyHUDofPRIDestroyed_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Cleanup
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Cleanup ( )
{
	static UFunction* pFnCleanup = NULL;

	if ( ! pFnCleanup )
		pFnCleanup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Cleanup" );

	UKFGFxMoviePlayer_HUD_execCleanup_Parms Cleanup_Parms;

	this->ProcessEvent ( pFnCleanup, &Cleanup_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.PlayerOwnerDied
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::PlayerOwnerDied ( )
{
	static UFunction* pFnPlayerOwnerDied = NULL;

	if ( ! pFnPlayerOwnerDied )
		pFnPlayerOwnerDied = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.PlayerOwnerDied" );

	UKFGFxMoviePlayer_HUD_execPlayerOwnerDied_Parms PlayerOwnerDied_Parms;

	this->ProcessEvent ( pFnPlayerOwnerDied, &PlayerOwnerDied_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ShowVoiceComms
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ShowVoiceComms ( )
{
	static UFunction* pFnShowVoiceComms = NULL;

	if ( ! pFnShowVoiceComms )
		pFnShowVoiceComms = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ShowVoiceComms" );

	UKFGFxMoviePlayer_HUD_execShowVoiceComms_Parms ShowVoiceComms_Parms;

	this->ProcessEvent ( pFnShowVoiceComms, &ShowVoiceComms_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ShowScoreboard
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ShowScoreboard ( )
{
	static UFunction* pFnShowScoreboard = NULL;

	if ( ! pFnShowScoreboard )
		pFnShowScoreboard = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ShowScoreboard" );

	UKFGFxMoviePlayer_HUD_execShowScoreboard_Parms ShowScoreboard_Parms;

	this->ProcessEvent ( pFnShowScoreboard, &ShowScoreboard_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.SetHUDSpectating
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::SetHUDSpectating ( )
{
	static UFunction* pFnSetHUDSpectating = NULL;

	if ( ! pFnSetHUDSpectating )
		pFnSetHUDSpectating = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.SetHUDSpectating" );

	UKFGFxMoviePlayer_HUD_execSetHUDSpectating_Parms SetHUDSpectating_Parms;

	this->ProcessEvent ( pFnSetHUDSpectating, &SetHUDSpectating_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateVisibilityState
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateVisibilityState ( )
{
	static UFunction* pFnUpdateVisibilityState = NULL;

	if ( ! pFnUpdateVisibilityState )
		pFnUpdateVisibilityState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateVisibilityState" );

	UKFGFxMoviePlayer_HUD_execUpdateVisibilityState_Parms UpdateVisibilityState_Parms;

	this->ProcessEvent ( pFnUpdateVisibilityState, &UpdateVisibilityState_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.NotifyVisibilityChange
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::NotifyVisibilityChange ( )
{
	static UFunction* pFnNotifyVisibilityChange = NULL;

	if ( ! pFnNotifyVisibilityChange )
		pFnNotifyVisibilityChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.NotifyVisibilityChange" );

	UKFGFxMoviePlayer_HUD_execNotifyVisibilityChange_Parms NotifyVisibilityChange_Parms;

	this->ProcessEvent ( pFnNotifyVisibilityChange, &NotifyVisibilityChange_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateWaveCount
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateWaveCount ( )
{
	static UFunction* pFnUpdateWaveCount = NULL;

	if ( ! pFnUpdateWaveCount )
		pFnUpdateWaveCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateWaveCount" );

	UKFGFxMoviePlayer_HUD_execUpdateWaveCount_Parms UpdateWaveCount_Parms;

	this->ProcessEvent ( pFnUpdateWaveCount, &UpdateWaveCount_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateObjectiveActive
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateObjectiveActive ( )
{
	static UFunction* pFnUpdateObjectiveActive = NULL;

	if ( ! pFnUpdateObjectiveActive )
		pFnUpdateObjectiveActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateObjectiveActive" );

	UKFGFxMoviePlayer_HUD_execUpdateObjectiveActive_Parms UpdateObjectiveActive_Parms;

	this->ProcessEvent ( pFnUpdateObjectiveActive, &UpdateObjectiveActive_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.TickHud" );

	UKFGFxMoviePlayer_HUD_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateWeaponSelect
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateWeaponSelect ( )
{
	static UFunction* pFnUpdateWeaponSelect = NULL;

	if ( ! pFnUpdateWeaponSelect )
		pFnUpdateWeaponSelect = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateWeaponSelect" );

	UKFGFxMoviePlayer_HUD_execUpdateWeaponSelect_Parms UpdateWeaponSelect_Parms;

	this->ProcessEvent ( pFnUpdateWeaponSelect, &UpdateWeaponSelect_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_HUD::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.WidgetInitialized" );

	UKFGFxMoviePlayer_HUD_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.UpdateRatio
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::UpdateRatio ( )
{
	static UFunction* pFnUpdateRatio = NULL;

	if ( ! pFnUpdateRatio )
		pFnUpdateRatio = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.UpdateRatio" );

	UKFGFxMoviePlayer_HUD_execUpdateRatio_Parms UpdateRatio_Parms;

	this->ProcessEvent ( pFnUpdateRatio, &UpdateRatio_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.ClearScoreboard
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::ClearScoreboard ( )
{
	static UFunction* pFnClearScoreboard = NULL;

	if ( ! pFnClearScoreboard )
		pFnClearScoreboard = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.ClearScoreboard" );

	UKFGFxMoviePlayer_HUD_execClearScoreboard_Parms ClearScoreboard_Parms;

	this->ProcessEvent ( pFnClearScoreboard, &ClearScoreboard_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.CreateScoreboard
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::CreateScoreboard ( )
{
	static UFunction* pFnCreateScoreboard = NULL;

	if ( ! pFnCreateScoreboard )
		pFnCreateScoreboard = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.CreateScoreboard" );

	UKFGFxMoviePlayer_HUD_execCreateScoreboard_Parms CreateScoreboard_Parms;

	this->ProcessEvent ( pFnCreateScoreboard, &CreateScoreboard_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_HUD.Init
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_HUD.Init" );

	UKFGFxMoviePlayer_HUD_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WaveInfo.UpdateTraderTimeRemaining
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WaveInfo::UpdateTraderTimeRemaining ( )
{
	static UFunction* pFnUpdateTraderTimeRemaining = NULL;

	if ( ! pFnUpdateTraderTimeRemaining )
		pFnUpdateTraderTimeRemaining = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WaveInfo.UpdateTraderTimeRemaining" );

	UKFGFxHUD_WaveInfo_execUpdateTraderTimeRemaining_Parms UpdateTraderTimeRemaining_Parms;

	this->ProcessEvent ( pFnUpdateTraderTimeRemaining, &UpdateTraderTimeRemaining_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WaveInfo.UpdateZEDCount
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WaveInfo::UpdateZEDCount ( )
{
	static UFunction* pFnUpdateZEDCount = NULL;

	if ( ! pFnUpdateZEDCount )
		pFnUpdateZEDCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WaveInfo.UpdateZEDCount" );

	UKFGFxHUD_WaveInfo_execUpdateZEDCount_Parms UpdateZEDCount_Parms;

	this->ProcessEvent ( pFnUpdateZEDCount, &UpdateZEDCount_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WaveInfo.UpdateWaveCount
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WaveInfo::UpdateWaveCount ( )
{
	static UFunction* pFnUpdateWaveCount = NULL;

	if ( ! pFnUpdateWaveCount )
		pFnUpdateWaveCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WaveInfo.UpdateWaveCount" );

	UKFGFxHUD_WaveInfo_execUpdateWaveCount_Parms UpdateWaveCount_Parms;

	this->ProcessEvent ( pFnUpdateWaveCount, &UpdateWaveCount_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WaveInfo.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WaveInfo::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WaveInfo.TickHud" );

	UKFGFxHUD_WaveInfo_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WaveInfo.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WaveInfo::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WaveInfo.InitializeHUD" );

	UKFGFxHUD_WaveInfo_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFExplosionActor.Reset
// [0x00020002] 
// Parameters infos:

void AKFExplosionActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.Reset" );

	AKFExplosionActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFExplosionActor.IsBehindExplosion
// [0x00880102] 
// Parameters infos:

void AKFExplosionActor::IsBehindExplosion ( )
{
	static UFunction* pFnIsBehindExplosion = NULL;

	if ( ! pFnIsBehindExplosion )
		pFnIsBehindExplosion = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.IsBehindExplosion" );

	AKFExplosionActor_execIsBehindExplosion_Parms IsBehindExplosion_Parms;

	this->ProcessEvent ( pFnIsBehindExplosion, &IsBehindExplosion_Parms, NULL );
};

// Function KFGame.KFExplosionActor.CalcStackingDamageScale
// [0x00820102] 
// Parameters infos:

void AKFExplosionActor::CalcStackingDamageScale ( )
{
	static UFunction* pFnCalcStackingDamageScale = NULL;

	if ( ! pFnCalcStackingDamageScale )
		pFnCalcStackingDamageScale = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.CalcStackingDamageScale" );

	AKFExplosionActor_execCalcStackingDamageScale_Parms CalcStackingDamageScale_Parms;

	this->ProcessEvent ( pFnCalcStackingDamageScale, &CalcStackingDamageScale_Parms, NULL );
};

// Function KFGame.KFExplosionActor.DrawDebug
// [0x00820102] 
// Parameters infos:

void AKFExplosionActor::DrawDebug ( )
{
	static UFunction* pFnDrawDebug = NULL;

	if ( ! pFnDrawDebug )
		pFnDrawDebug = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.DrawDebug" );

	AKFExplosionActor_execDrawDebug_Parms DrawDebug_Parms;

	this->ProcessEvent ( pFnDrawDebug, &DrawDebug_Parms, NULL );
};

// Function KFGame.KFExplosionActor.DoExplosionDamage
// [0x00080102] 
// Parameters infos:

void AKFExplosionActor::DoExplosionDamage ( )
{
	static UFunction* pFnDoExplosionDamage = NULL;

	if ( ! pFnDoExplosionDamage )
		pFnDoExplosionDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.DoExplosionDamage" );

	AKFExplosionActor_execDoExplosionDamage_Parms DoExplosionDamage_Parms;

	this->ProcessEvent ( pFnDoExplosionDamage, &DoExplosionDamage_Parms, NULL );
};

// Function KFGame.KFExplosionActor.StumblePawn
// [0x00080002] 
// Parameters infos:

void AKFExplosionActor::StumblePawn ( )
{
	static UFunction* pFnStumblePawn = NULL;

	if ( ! pFnStumblePawn )
		pFnStumblePawn = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.StumblePawn" );

	AKFExplosionActor_execStumblePawn_Parms StumblePawn_Parms;

	this->ProcessEvent ( pFnStumblePawn, &StumblePawn_Parms, NULL );
};

// Function KFGame.KFExplosionActor.KnockdownPawn
// [0x00080002] 
// Parameters infos:

void AKFExplosionActor::KnockdownPawn ( )
{
	static UFunction* pFnKnockdownPawn = NULL;

	if ( ! pFnKnockdownPawn )
		pFnKnockdownPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.KnockdownPawn" );

	AKFExplosionActor_execKnockdownPawn_Parms KnockdownPawn_Parms;

	this->ProcessEvent ( pFnKnockdownPawn, &KnockdownPawn_Parms, NULL );
};

// Function KFGame.KFExplosionActor.SpecialPawnEffectsFor
// [0x00080002] 
// Parameters infos:

void AKFExplosionActor::SpecialPawnEffectsFor ( )
{
	static UFunction* pFnSpecialPawnEffectsFor = NULL;

	if ( ! pFnSpecialPawnEffectsFor )
		pFnSpecialPawnEffectsFor = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.SpecialPawnEffectsFor" );

	AKFExplosionActor_execSpecialPawnEffectsFor_Parms SpecialPawnEffectsFor_Parms;

	this->ProcessEvent ( pFnSpecialPawnEffectsFor, &SpecialPawnEffectsFor_Parms, NULL );
};

// Function KFGame.KFExplosionActor.SpawnExplosionDecal
// [0x00020102] 
// Parameters infos:

void AKFExplosionActor::SpawnExplosionDecal ( )
{
	static UFunction* pFnSpawnExplosionDecal = NULL;

	if ( ! pFnSpawnExplosionDecal )
		pFnSpawnExplosionDecal = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.SpawnExplosionDecal" );

	AKFExplosionActor_execSpawnExplosionDecal_Parms SpawnExplosionDecal_Parms;

	this->ProcessEvent ( pFnSpawnExplosionDecal, &SpawnExplosionDecal_Parms, NULL );
};

// Function KFGame.KFExplosionActor.SetSyncToMuzzleLocation
// [0x00020100] 
// Parameters infos:

void AKFExplosionActor::SetSyncToMuzzleLocation ( )
{
	static UFunction* pFnSetSyncToMuzzleLocation = NULL;

	if ( ! pFnSetSyncToMuzzleLocation )
		pFnSetSyncToMuzzleLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.SetSyncToMuzzleLocation" );

	AKFExplosionActor_execSetSyncToMuzzleLocation_Parms SetSyncToMuzzleLocation_Parms;

	this->ProcessEvent ( pFnSetSyncToMuzzleLocation, &SetSyncToMuzzleLocation_Parms, NULL );
};

// Function KFGame.KFExplosionActor.SpawnExplosionParticleSystem
// [0x00020102] 
// Parameters infos:

void AKFExplosionActor::SpawnExplosionParticleSystem ( )
{
	static UFunction* pFnSpawnExplosionParticleSystem = NULL;

	if ( ! pFnSpawnExplosionParticleSystem )
		pFnSpawnExplosionParticleSystem = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.SpawnExplosionParticleSystem" );

	AKFExplosionActor_execSpawnExplosionParticleSystem_Parms SpawnExplosionParticleSystem_Parms;

	this->ProcessEvent ( pFnSpawnExplosionParticleSystem, &SpawnExplosionParticleSystem_Parms, NULL );
};

// Function KFGame.KFExplosionActor.UpdateExplosionTemplateWithPerMaterialFX
// [0x00080102] 
// Parameters infos:

void AKFExplosionActor::UpdateExplosionTemplateWithPerMaterialFX ( )
{
	static UFunction* pFnUpdateExplosionTemplateWithPerMaterialFX = NULL;

	if ( ! pFnUpdateExplosionTemplateWithPerMaterialFX )
		pFnUpdateExplosionTemplateWithPerMaterialFX = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.UpdateExplosionTemplateWithPerMaterialFX" );

	AKFExplosionActor_execUpdateExplosionTemplateWithPerMaterialFX_Parms UpdateExplosionTemplateWithPerMaterialFX_Parms;

	this->ProcessEvent ( pFnUpdateExplosionTemplateWithPerMaterialFX, &UpdateExplosionTemplateWithPerMaterialFX_Parms, NULL );
};

// Function KFGame.KFExplosionActor.SpawnShards
// [0x00824102] 
// Parameters infos:

void AKFExplosionActor::SpawnShards ( )
{
	static UFunction* pFnSpawnShards = NULL;

	if ( ! pFnSpawnShards )
		pFnSpawnShards = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.SpawnShards" );

	AKFExplosionActor_execSpawnShards_Parms SpawnShards_Parms;

	this->ProcessEvent ( pFnSpawnShards, &SpawnShards_Parms, NULL );
};

// Function KFGame.KFExplosionActor.Explode
// [0x00024102] 
// Parameters infos:

void AKFExplosionActor::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActor.Explode" );

	AKFExplosionActor_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function KFGame.KFDT_Sonic.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Sonic::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Sonic.GetDamageeDialogID" );

	UKFDT_Sonic_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Fire.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Fire.GetDamageeDialogID" );

	UKFDT_Fire_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Fire.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Fire.GetDamagerDialogID" );

	UKFDT_Fire_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Fire.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Fire.GetKillerDialogID" );

	UKFDT_Fire_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.ZoomOutFastFinished
// [0x00020102] 
// Parameters infos:

void AKFWeap_ScopedBase::ZoomOutFastFinished ( )
{
	static UFunction* pFnZoomOutFastFinished = NULL;

	if ( ! pFnZoomOutFastFinished )
		pFnZoomOutFastFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.ZoomOutFastFinished" );

	AKFWeap_ScopedBase_execZoomOutFastFinished_Parms ZoomOutFastFinished_Parms;

	this->ProcessEvent ( pFnZoomOutFastFinished, &ZoomOutFastFinished_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.ZoomOut
// [0x00020102] 
// Parameters infos:

void AKFWeap_ScopedBase::ZoomOut ( )
{
	static UFunction* pFnZoomOut = NULL;

	if ( ! pFnZoomOut )
		pFnZoomOut = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.ZoomOut" );

	AKFWeap_ScopedBase_execZoomOut_Parms ZoomOut_Parms;

	this->ProcessEvent ( pFnZoomOut, &ZoomOut_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.ZoomIn
// [0x00020102] 
// Parameters infos:

void AKFWeap_ScopedBase::ZoomIn ( )
{
	static UFunction* pFnZoomIn = NULL;

	if ( ! pFnZoomIn )
		pFnZoomIn = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.ZoomIn" );

	AKFWeap_ScopedBase_execZoomIn_Parms ZoomIn_Parms;

	this->ProcessEvent ( pFnZoomIn, &ZoomIn_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.OnZoomOutFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_ScopedBase::eventOnZoomOutFinished ( )
{
	static UFunction* pFnOnZoomOutFinished = NULL;

	if ( ! pFnOnZoomOutFinished )
		pFnOnZoomOutFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.OnZoomOutFinished" );

	AKFWeap_ScopedBase_eventOnZoomOutFinished_Parms OnZoomOutFinished_Parms;

	this->ProcessEvent ( pFnOnZoomOutFinished, &OnZoomOutFinished_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.OnZoomInFinished
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_ScopedBase::eventOnZoomInFinished ( )
{
	static UFunction* pFnOnZoomInFinished = NULL;

	if ( ! pFnOnZoomInFinished )
		pFnOnZoomInFinished = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.OnZoomInFinished" );

	AKFWeap_ScopedBase_eventOnZoomInFinished_Parms OnZoomInFinished_Parms;

	this->ProcessEvent ( pFnOnZoomInFinished, &OnZoomInFinished_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_ScopedBase::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.Tick" );

	AKFWeap_ScopedBase_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.DetachWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeap_ScopedBase::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.DetachWeapon" );

	AKFWeap_ScopedBase_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.AttachWeaponTo
// [0x00024102] 
// Parameters infos:

void AKFWeap_ScopedBase::AttachWeaponTo ( )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.AttachWeaponTo" );

	AKFWeap_ScopedBase_execAttachWeaponTo_Parms AttachWeaponTo_Parms;

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.GetModifiedFOVAngle
// [0x00020102] 
// Parameters infos:

void AKFWeap_ScopedBase::GetModifiedFOVAngle ( )
{
	static UFunction* pFnGetModifiedFOVAngle = NULL;

	if ( ! pFnGetModifiedFOVAngle )
		pFnGetModifiedFOVAngle = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.GetModifiedFOVAngle" );

	AKFWeap_ScopedBase_execGetModifiedFOVAngle_Parms GetModifiedFOVAngle_Parms;

	this->ProcessEvent ( pFnGetModifiedFOVAngle, &GetModifiedFOVAngle_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.SetPosition
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_ScopedBase::eventSetPosition ( )
{
	static UFunction* pFnSetPosition = NULL;

	if ( ! pFnSetPosition )
		pFnSetPosition = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.SetPosition" );

	AKFWeap_ScopedBase_eventSetPosition_Parms SetPosition_Parms;

	this->ProcessEvent ( pFnSetPosition, &SetPosition_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.ClientWeaponSet
// [0x010241C2] 
// Parameters infos:

void AKFWeap_ScopedBase::ClientWeaponSet ( )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.ClientWeaponSet" );

	AKFWeap_ScopedBase_execClientWeaponSet_Parms ClientWeaponSet_Parms;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.InitFOV
// [0x00020102] 
// Parameters infos:

void AKFWeap_ScopedBase::InitFOV ( )
{
	static UFunction* pFnInitFOV = NULL;

	if ( ! pFnInitFOV )
		pFnInitFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.InitFOV" );

	AKFWeap_ScopedBase_execInitFOV_Parms InitFOV_Parms;

	this->ProcessEvent ( pFnInitFOV, &InitFOV_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.ProcessInstantHitEx
// [0x00424102] 
// Parameters infos:

void AKFWeap_ScopedBase::ProcessInstantHitEx ( )
{
	static UFunction* pFnProcessInstantHitEx = NULL;

	if ( ! pFnProcessInstantHitEx )
		pFnProcessInstantHitEx = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.ProcessInstantHitEx" );

	AKFWeap_ScopedBase_execProcessInstantHitEx_Parms ProcessInstantHitEx_Parms;

	this->ProcessEvent ( pFnProcessInstantHitEx, &ProcessInstantHitEx_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_ScopedBase::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.GetTraderFilter" );

	AKFWeap_ScopedBase_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeap_ScopedBase.ScopeFOV
// [0x00020302] ( FUNC_Exec )
// Parameters infos:

void AKFWeap_ScopedBase::ScopeFOV ( )
{
	static UFunction* pFnScopeFOV = NULL;

	if ( ! pFnScopeFOV )
		pFnScopeFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ScopedBase.ScopeFOV" );

	AKFWeap_ScopedBase_execScopeFOV_Parms ScopeFOV_Parms;

	this->ProcessEvent ( pFnScopeFOV, &ScopeFOV_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.ChangeVisibility
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapAttach_SprayBase::eventChangeVisibility ( )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.ChangeVisibility" );

	AKFWeapAttach_SprayBase_eventChangeVisibility_Parms ChangeVisibility_Parms;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapAttach_SprayBase::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.Tick" );

	AKFWeapAttach_SprayBase_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.GetFlickerVal
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::GetFlickerVal ( )
{
	static UFunction* pFnGetFlickerVal = NULL;

	if ( ! pFnGetFlickerVal )
		pFnGetFlickerVal = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.GetFlickerVal" );

	AKFWeapAttach_SprayBase_execGetFlickerVal_Parms GetFlickerVal_Parms;

	this->ProcessEvent ( pFnGetFlickerVal, &GetFlickerVal_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.Destroyed
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.Destroyed" );

	AKFWeapAttach_SprayBase_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.DetachFrom
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::DetachFrom ( )
{
	static UFunction* pFnDetachFrom = NULL;

	if ( ! pFnDetachFrom )
		pFnDetachFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.DetachFrom" );

	AKFWeapAttach_SprayBase_execDetachFrom_Parms DetachFrom_Parms;

	this->ProcessEvent ( pFnDetachFrom, &DetachFrom_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.AttachTo
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::AttachTo ( )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.AttachTo" );

	AKFWeapAttach_SprayBase_execAttachTo_Parms AttachTo_Parms;

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.StopThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::StopThirdPersonFireEffects ( )
{
	static UFunction* pFnStopThirdPersonFireEffects = NULL;

	if ( ! pFnStopThirdPersonFireEffects )
		pFnStopThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.StopThirdPersonFireEffects" );

	AKFWeapAttach_SprayBase_execStopThirdPersonFireEffects_Parms StopThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnStopThirdPersonFireEffects, &StopThirdPersonFireEffects_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::ThirdPersonFireEffects ( )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.ThirdPersonFireEffects" );

	AKFWeapAttach_SprayBase_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.TurnOffFireSpray
// [0x00080102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::TurnOffFireSpray ( )
{
	static UFunction* pFnTurnOffFireSpray = NULL;

	if ( ! pFnTurnOffFireSpray )
		pFnTurnOffFireSpray = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.TurnOffFireSpray" );

	AKFWeapAttach_SprayBase_execTurnOffFireSpray_Parms TurnOffFireSpray_Parms;

	this->ProcessEvent ( pFnTurnOffFireSpray, &TurnOffFireSpray_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.TurnOnFireSpray
// [0x00080102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::TurnOnFireSpray ( )
{
	static UFunction* pFnTurnOnFireSpray = NULL;

	if ( ! pFnTurnOnFireSpray )
		pFnTurnOnFireSpray = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.TurnOnFireSpray" );

	AKFWeapAttach_SprayBase_execTurnOnFireSpray_Parms TurnOnFireSpray_Parms;

	this->ProcessEvent ( pFnTurnOnFireSpray, &TurnOnFireSpray_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.SetPilotDynamicLightEnabled
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::SetPilotDynamicLightEnabled ( )
{
	static UFunction* pFnSetPilotDynamicLightEnabled = NULL;

	if ( ! pFnSetPilotDynamicLightEnabled )
		pFnSetPilotDynamicLightEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.SetPilotDynamicLightEnabled" );

	AKFWeapAttach_SprayBase_execSetPilotDynamicLightEnabled_Parms SetPilotDynamicLightEnabled_Parms;

	this->ProcessEvent ( pFnSetPilotDynamicLightEnabled, &SetPilotDynamicLightEnabled_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.StopPilotSound
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::StopPilotSound ( )
{
	static UFunction* pFnStopPilotSound = NULL;

	if ( ! pFnStopPilotSound )
		pFnStopPilotSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.StopPilotSound" );

	AKFWeapAttach_SprayBase_execStopPilotSound_Parms StopPilotSound_Parms;

	this->ProcessEvent ( pFnStopPilotSound, &StopPilotSound_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.StartPilotSound
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::StartPilotSound ( )
{
	static UFunction* pFnStartPilotSound = NULL;

	if ( ! pFnStartPilotSound )
		pFnStartPilotSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.StartPilotSound" );

	AKFWeapAttach_SprayBase_execStartPilotSound_Parms StartPilotSound_Parms;

	this->ProcessEvent ( pFnStartPilotSound, &StartPilotSound_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.GetFlameSprayFromPool
// [0x00080102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::GetFlameSprayFromPool ( )
{
	static UFunction* pFnGetFlameSprayFromPool = NULL;

	if ( ! pFnGetFlameSprayFromPool )
		pFnGetFlameSprayFromPool = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.GetFlameSprayFromPool" );

	AKFWeapAttach_SprayBase_execGetFlameSprayFromPool_Parms GetFlameSprayFromPool_Parms;

	this->ProcessEvent ( pFnGetFlameSprayFromPool, &GetFlameSprayFromPool_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.TurnOffPilot
// [0x00080102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::TurnOffPilot ( )
{
	static UFunction* pFnTurnOffPilot = NULL;

	if ( ! pFnTurnOffPilot )
		pFnTurnOffPilot = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.TurnOffPilot" );

	AKFWeapAttach_SprayBase_execTurnOffPilot_Parms TurnOffPilot_Parms;

	this->ProcessEvent ( pFnTurnOffPilot, &TurnOffPilot_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.GetFlameSocketLocAndRot
// [0x00420102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::GetFlameSocketLocAndRot ( )
{
	static UFunction* pFnGetFlameSocketLocAndRot = NULL;

	if ( ! pFnGetFlameSocketLocAndRot )
		pFnGetFlameSocketLocAndRot = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.GetFlameSocketLocAndRot" );

	AKFWeapAttach_SprayBase_execGetFlameSocketLocAndRot_Parms GetFlameSocketLocAndRot_Parms;

	this->ProcessEvent ( pFnGetFlameSocketLocAndRot, &GetFlameSocketLocAndRot_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.TurnOnPilot
// [0x00880102] 
// Parameters infos:

void AKFWeapAttach_SprayBase::TurnOnPilot ( )
{
	static UFunction* pFnTurnOnPilot = NULL;

	if ( ! pFnTurnOnPilot )
		pFnTurnOnPilot = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.TurnOnPilot" );

	AKFWeapAttach_SprayBase_execTurnOnPilot_Parms TurnOnPilot_Parms;

	this->ProcessEvent ( pFnTurnOnPilot, &TurnOnPilot_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapAttach_SprayBase::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.PreBeginPlay" );

	AKFWeapAttach_SprayBase_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.SetFlameDebugFX
// [0x00020100] 
// Parameters infos:

void AKFWeapAttach_SprayBase::SetFlameDebugFX ( )
{
	static UFunction* pFnSetFlameDebugFX = NULL;

	if ( ! pFnSetFlameDebugFX )
		pFnSetFlameDebugFX = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.SetFlameDebugFX" );

	AKFWeapAttach_SprayBase_execSetFlameDebugFX_Parms SetFlameDebugFX_Parms;

	this->ProcessEvent ( pFnSetFlameDebugFX, &SetFlameDebugFX_Parms, NULL );
};

// Function KFGame.KFWeapAttach_SprayBase.SetFlameDebugDamage
// [0x00020100] 
// Parameters infos:

void AKFWeapAttach_SprayBase::SetFlameDebugDamage ( )
{
	static UFunction* pFnSetFlameDebugDamage = NULL;

	if ( ! pFnSetFlameDebugDamage )
		pFnSetFlameDebugDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_SprayBase.SetFlameDebugDamage" );

	AKFWeapAttach_SprayBase_execSetFlameDebugDamage_Parms SetFlameDebugDamage_Parms;

	this->ProcessEvent ( pFnSetFlameDebugDamage, &SetFlameDebugDamage_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_FlameBase::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.GetTraderFilter" );

	AKFWeap_FlameBase_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_FlameBase::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.CalculateTraderWeaponStatDamage" );

	AKFWeap_FlameBase_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.SetFOV
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_FlameBase::eventSetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.SetFOV" );

	AKFWeap_FlameBase_eventSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.ChangeVisibility
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::ChangeVisibility ( )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.ChangeVisibility" );

	AKFWeap_FlameBase_execChangeVisibility_Parms ChangeVisibility_Parms;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.CustomFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.CustomFire" );

	AKFWeap_FlameBase_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.DetachWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.DetachWeapon" );

	AKFWeap_FlameBase_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.Timer_CheckForAIWarning
// [0x00020000] 
// Parameters infos:

void AKFWeap_FlameBase::Timer_CheckForAIWarning ( )
{
	static UFunction* pFnTimer_CheckForAIWarning = NULL;

	if ( ! pFnTimer_CheckForAIWarning )
		pFnTimer_CheckForAIWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.Timer_CheckForAIWarning" );

	AKFWeap_FlameBase_execTimer_CheckForAIWarning_Parms Timer_CheckForAIWarning_Parms;

	this->ProcessEvent ( pFnTimer_CheckForAIWarning, &Timer_CheckForAIWarning_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.TurnOffFireSpray
// [0x00080102] 
// Parameters infos:

void AKFWeap_FlameBase::TurnOffFireSpray ( )
{
	static UFunction* pFnTurnOffFireSpray = NULL;

	if ( ! pFnTurnOffFireSpray )
		pFnTurnOffFireSpray = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.TurnOffFireSpray" );

	AKFWeap_FlameBase_execTurnOffFireSpray_Parms TurnOffFireSpray_Parms;

	this->ProcessEvent ( pFnTurnOffFireSpray, &TurnOffFireSpray_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.TurnOnFireSpray
// [0x00080102] 
// Parameters infos:

void AKFWeap_FlameBase::TurnOnFireSpray ( )
{
	static UFunction* pFnTurnOnFireSpray = NULL;

	if ( ! pFnTurnOnFireSpray )
		pFnTurnOnFireSpray = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.TurnOnFireSpray" );

	AKFWeap_FlameBase_execTurnOnFireSpray_Parms TurnOnFireSpray_Parms;

	this->ProcessEvent ( pFnTurnOnFireSpray, &TurnOnFireSpray_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.GetFlameSprayFromPool
// [0x00080102] 
// Parameters infos:

void AKFWeap_FlameBase::GetFlameSprayFromPool ( )
{
	static UFunction* pFnGetFlameSprayFromPool = NULL;

	if ( ! pFnGetFlameSprayFromPool )
		pFnGetFlameSprayFromPool = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.GetFlameSprayFromPool" );

	AKFWeap_FlameBase_execGetFlameSprayFromPool_Parms GetFlameSprayFromPool_Parms;

	this->ProcessEvent ( pFnGetFlameSprayFromPool, &GetFlameSprayFromPool_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.GetFlickerVal
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::GetFlickerVal ( )
{
	static UFunction* pFnGetFlickerVal = NULL;

	if ( ! pFnGetFlickerVal )
		pFnGetFlickerVal = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.GetFlickerVal" );

	AKFWeap_FlameBase_execGetFlickerVal_Parms GetFlickerVal_Parms;

	this->ProcessEvent ( pFnGetFlickerVal, &GetFlickerVal_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.StopLoopingFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::StopLoopingFireEffects ( )
{
	static UFunction* pFnStopLoopingFireEffects = NULL;

	if ( ! pFnStopLoopingFireEffects )
		pFnStopLoopingFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.StopLoopingFireEffects" );

	AKFWeap_FlameBase_execStopLoopingFireEffects_Parms StopLoopingFireEffects_Parms;

	this->ProcessEvent ( pFnStopLoopingFireEffects, &StopLoopingFireEffects_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.StartLoopingFireEffects
// [0x00024102] 
// Parameters infos:

void AKFWeap_FlameBase::StartLoopingFireEffects ( )
{
	static UFunction* pFnStartLoopingFireEffects = NULL;

	if ( ! pFnStartLoopingFireEffects )
		pFnStartLoopingFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.StartLoopingFireEffects" );

	AKFWeap_FlameBase_execStartLoopingFireEffects_Parms StartLoopingFireEffects_Parms;

	this->ProcessEvent ( pFnStartLoopingFireEffects, &StartLoopingFireEffects_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.StopPilotSound
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::StopPilotSound ( )
{
	static UFunction* pFnStopPilotSound = NULL;

	if ( ! pFnStopPilotSound )
		pFnStopPilotSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.StopPilotSound" );

	AKFWeap_FlameBase_execStopPilotSound_Parms StopPilotSound_Parms;

	this->ProcessEvent ( pFnStopPilotSound, &StopPilotSound_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.StartPilotSound
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::StartPilotSound ( )
{
	static UFunction* pFnStartPilotSound = NULL;

	if ( ! pFnStartPilotSound )
		pFnStartPilotSound = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.StartPilotSound" );

	AKFWeap_FlameBase_execStartPilotSound_Parms StartPilotSound_Parms;

	this->ProcessEvent ( pFnStartPilotSound, &StartPilotSound_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.SetPilotDynamicLightEnabled
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::SetPilotDynamicLightEnabled ( )
{
	static UFunction* pFnSetPilotDynamicLightEnabled = NULL;

	if ( ! pFnSetPilotDynamicLightEnabled )
		pFnSetPilotDynamicLightEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.SetPilotDynamicLightEnabled" );

	AKFWeap_FlameBase_execSetPilotDynamicLightEnabled_Parms SetPilotDynamicLightEnabled_Parms;

	this->ProcessEvent ( pFnSetPilotDynamicLightEnabled, &SetPilotDynamicLightEnabled_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.TurnOffPilot
// [0x00080102] 
// Parameters infos:

void AKFWeap_FlameBase::TurnOffPilot ( )
{
	static UFunction* pFnTurnOffPilot = NULL;

	if ( ! pFnTurnOffPilot )
		pFnTurnOffPilot = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.TurnOffPilot" );

	AKFWeap_FlameBase_execTurnOffPilot_Parms TurnOffPilot_Parms;

	this->ProcessEvent ( pFnTurnOffPilot, &TurnOffPilot_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.GetFlameSocketLocAndRot
// [0x00420102] 
// Parameters infos:

void AKFWeap_FlameBase::GetFlameSocketLocAndRot ( )
{
	static UFunction* pFnGetFlameSocketLocAndRot = NULL;

	if ( ! pFnGetFlameSocketLocAndRot )
		pFnGetFlameSocketLocAndRot = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.GetFlameSocketLocAndRot" );

	AKFWeap_FlameBase_execGetFlameSocketLocAndRot_Parms GetFlameSocketLocAndRot_Parms;

	this->ProcessEvent ( pFnGetFlameSocketLocAndRot, &GetFlameSocketLocAndRot_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.TurnOnPilot
// [0x00880102] 
// Parameters infos:

void AKFWeap_FlameBase::TurnOnPilot ( )
{
	static UFunction* pFnTurnOnPilot = NULL;

	if ( ! pFnTurnOnPilot )
		pFnTurnOnPilot = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.TurnOnPilot" );

	AKFWeap_FlameBase_execTurnOnPilot_Parms TurnOnPilot_Parms;

	this->ProcessEvent ( pFnTurnOnPilot, &TurnOnPilot_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.Destroyed
// [0x00020102] 
// Parameters infos:

void AKFWeap_FlameBase::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.Destroyed" );

	AKFWeap_FlameBase_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_FlameBase::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.Tick" );

	AKFWeap_FlameBase_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.SetFlameDebugFX
// [0x00020100] 
// Parameters infos:

void AKFWeap_FlameBase::SetFlameDebugFX ( )
{
	static UFunction* pFnSetFlameDebugFX = NULL;

	if ( ! pFnSetFlameDebugFX )
		pFnSetFlameDebugFX = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.SetFlameDebugFX" );

	AKFWeap_FlameBase_execSetFlameDebugFX_Parms SetFlameDebugFX_Parms;

	this->ProcessEvent ( pFnSetFlameDebugFX, &SetFlameDebugFX_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.SetFlameDebugDamage
// [0x00020100] 
// Parameters infos:

void AKFWeap_FlameBase::SetFlameDebugDamage ( )
{
	static UFunction* pFnSetFlameDebugDamage = NULL;

	if ( ! pFnSetFlameDebugDamage )
		pFnSetFlameDebugDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.SetFlameDebugDamage" );

	AKFWeap_FlameBase_execSetFlameDebugDamage_Parms SetFlameDebugDamage_Parms;

	this->ProcessEvent ( pFnSetFlameDebugDamage, &SetFlameDebugDamage_Parms, NULL );
};

// Function KFGame.KFWeap_FlameBase.SetFlameComplex
// [0x00020100] 
// Parameters infos:

void AKFWeap_FlameBase::SetFlameComplex ( )
{
	static UFunction* pFnSetFlameComplex = NULL;

	if ( ! pFnSetFlameComplex )
		pFnSetFlameComplex = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_FlameBase.SetFlameComplex" );

	AKFWeap_FlameBase_execSetFlameComplex_Parms SetFlameComplex_Parms;

	this->ProcessEvent ( pFnSetFlameComplex, &SetFlameComplex_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.OnBecomeInActive
// [0x00020002] 
// Parameters infos:

void UKFCustomizationCamera::OnBecomeInActive ( )
{
	static UFunction* pFnOnBecomeInActive = NULL;

	if ( ! pFnOnBecomeInActive )
		pFnOnBecomeInActive = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.OnBecomeInActive" );

	UKFCustomizationCamera_execOnBecomeInActive_Parms OnBecomeInActive_Parms;

	this->ProcessEvent ( pFnOnBecomeInActive, &OnBecomeInActive_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.FadeCameraRotation
// [0x00020002] 
// Parameters infos:

void UKFCustomizationCamera::FadeCameraRotation ( )
{
	static UFunction* pFnFadeCameraRotation = NULL;

	if ( ! pFnFadeCameraRotation )
		pFnFadeCameraRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.FadeCameraRotation" );

	UKFCustomizationCamera_execFadeCameraRotation_Parms FadeCameraRotation_Parms;

	this->ProcessEvent ( pFnFadeCameraRotation, &FadeCameraRotation_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.StartFadeRotation
// [0x00020002] 
// Parameters infos:

void UKFCustomizationCamera::StartFadeRotation ( )
{
	static UFunction* pFnStartFadeRotation = NULL;

	if ( ! pFnStartFadeRotation )
		pFnStartFadeRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.StartFadeRotation" );

	UKFCustomizationCamera_execStartFadeRotation_Parms StartFadeRotation_Parms;

	this->ProcessEvent ( pFnStartFadeRotation, &StartFadeRotation_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.UpdateRotation
// [0x00020002] 
// Parameters infos:

void UKFCustomizationCamera::UpdateRotation ( )
{
	static UFunction* pFnUpdateRotation = NULL;

	if ( ! pFnUpdateRotation )
		pFnUpdateRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.UpdateRotation" );

	UKFCustomizationCamera_execUpdateRotation_Parms UpdateRotation_Parms;

	this->ProcessEvent ( pFnUpdateRotation, &UpdateRotation_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.RotatedCamera
// [0x00020002] 
// Parameters infos:

void UKFCustomizationCamera::RotatedCamera ( )
{
	static UFunction* pFnRotatedCamera = NULL;

	if ( ! pFnRotatedCamera )
		pFnRotatedCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.RotatedCamera" );

	UKFCustomizationCamera_execRotatedCamera_Parms RotatedCamera_Parms;

	this->ProcessEvent ( pFnRotatedCamera, &RotatedCamera_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.SetCustomizationView
// [0x00C20002] 
// Parameters infos:

void UKFCustomizationCamera::SetCustomizationView ( )
{
	static UFunction* pFnSetCustomizationView = NULL;

	if ( ! pFnSetCustomizationView )
		pFnSetCustomizationView = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.SetCustomizationView" );

	UKFCustomizationCamera_execSetCustomizationView_Parms SetCustomizationView_Parms;

	this->ProcessEvent ( pFnSetCustomizationView, &SetCustomizationView_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.BlendCustomizationPart
// [0x00020002] 
// Parameters infos:

void UKFCustomizationCamera::BlendCustomizationPart ( )
{
	static UFunction* pFnBlendCustomizationPart = NULL;

	if ( ! pFnBlendCustomizationPart )
		pFnBlendCustomizationPart = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.BlendCustomizationPart" );

	UKFCustomizationCamera_execBlendCustomizationPart_Parms BlendCustomizationPart_Parms;

	this->ProcessEvent ( pFnBlendCustomizationPart, &BlendCustomizationPart_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.SetBodyView
// [0x00024002] 
// Parameters infos:

void UKFCustomizationCamera::SetBodyView ( )
{
	static UFunction* pFnSetBodyView = NULL;

	if ( ! pFnSetBodyView )
		pFnSetBodyView = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.SetBodyView" );

	UKFCustomizationCamera_execSetBodyView_Parms SetBodyView_Parms;

	this->ProcessEvent ( pFnSetBodyView, &SetBodyView_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.UpdateCamera
// [0x00420002] 
// Parameters infos:

void UKFCustomizationCamera::UpdateCamera ( )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.UpdateCamera" );

	UKFCustomizationCamera_execUpdateCamera_Parms UpdateCamera_Parms;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );
};

// Function KFGame.KFCustomizationCamera.OnBecomeActive
// [0x00020002] 
// Parameters infos:

void UKFCustomizationCamera::OnBecomeActive ( )
{
	static UFunction* pFnOnBecomeActive = NULL;

	if ( ! pFnOnBecomeActive )
		pFnOnBecomeActive = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationCamera.OnBecomeActive" );

	UKFCustomizationCamera_execOnBecomeActive_Parms OnBecomeActive_Parms;

	this->ProcessEvent ( pFnOnBecomeActive, &OnBecomeActive_Parms, NULL );
};

// Function KFGame.KFCustomizationPoint.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFCustomizationPoint::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFCustomizationPoint.PreBeginPlay" );

	AKFCustomizationPoint_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFProj_PinningBullet.PinVictim
// [0x00020102] 
// Parameters infos:

void AKFProj_PinningBullet::PinVictim ( )
{
	static UFunction* pFnPinVictim = NULL;

	if ( ! pFnPinVictim )
		pFnPinVictim = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_PinningBullet.PinVictim" );

	AKFProj_PinningBullet_execPinVictim_Parms PinVictim_Parms;

	this->ProcessEvent ( pFnPinVictim, &PinVictim_Parms, NULL );
};

// Function KFGame.KFProj_PinningBullet.CreatePin
// [0x00822002] 
// Parameters infos:

void AKFProj_PinningBullet::CreatePin ( )
{
	static UFunction* pFnCreatePin = NULL;

	if ( ! pFnCreatePin )
		pFnCreatePin = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_PinningBullet.CreatePin" );

	AKFProj_PinningBullet_execCreatePin_Parms CreatePin_Parms;

	this->ProcessEvent ( pFnCreatePin, &CreatePin_Parms, NULL );
};

// Function KFGame.KFProj_RicochetBullet.Bounce
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetBullet::Bounce ( )
{
	static UFunction* pFnBounce = NULL;

	if ( ! pFnBounce )
		pFnBounce = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetBullet.Bounce" );

	AKFProj_RicochetBullet_execBounce_Parms Bounce_Parms;

	this->ProcessEvent ( pFnBounce, &Bounce_Parms, NULL );
};

// Function KFGame.KFDebugCameraInput.InputKey
// [0x00024002] 
// Parameters infos:

void UKFDebugCameraInput::InputKey ( )
{
	static UFunction* pFnInputKey = NULL;

	if ( ! pFnInputKey )
		pFnInputKey = UObject::FindObject< UFunction > ( "Function KFGame.KFDebugCameraInput.InputKey" );

	UKFDebugCameraInput_execInputKey_Parms InputKey_Parms;

	this->ProcessEvent ( pFnInputKey, &InputKey_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetIcon
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetIcon ( )
{
	static UFunction* pFnGetIcon = NULL;

	if ( ! pFnGetIcon )
		pFnGetIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetIcon" );

	UKFInterface_MapObjective_execGetIcon_Parms GetIcon_Parms;

	this->ProcessEvent ( pFnGetIcon, &GetIcon_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetIconLocation
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetIconLocation ( )
{
	static UFunction* pFnGetIconLocation = NULL;

	if ( ! pFnGetIconLocation )
		pFnGetIconLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetIconLocation" );

	UKFInterface_MapObjective_execGetIconLocation_Parms GetIconLocation_Parms;

	this->ProcessEvent ( pFnGetIconLocation, &GetIconLocation_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.ShouldDrawIcon
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::ShouldDrawIcon ( )
{
	static UFunction* pFnShouldDrawIcon = NULL;

	if ( ! pFnShouldDrawIcon )
		pFnShouldDrawIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.ShouldDrawIcon" );

	UKFInterface_MapObjective_execShouldDrawIcon_Parms ShouldDrawIcon_Parms;

	this->ProcessEvent ( pFnShouldDrawIcon, &ShouldDrawIcon_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetLocalizedRequirements
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetLocalizedRequirements ( )
{
	static UFunction* pFnGetLocalizedRequirements = NULL;

	if ( ! pFnGetLocalizedRequirements )
		pFnGetLocalizedRequirements = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetLocalizedRequirements" );

	UKFInterface_MapObjective_execGetLocalizedRequirements_Parms GetLocalizedRequirements_Parms;

	this->ProcessEvent ( pFnGetLocalizedRequirements, &GetLocalizedRequirements_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetLocalizedDescription
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetLocalizedDescription ( )
{
	static UFunction* pFnGetLocalizedDescription = NULL;

	if ( ! pFnGetLocalizedDescription )
		pFnGetLocalizedDescription = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetLocalizedDescription" );

	UKFInterface_MapObjective_execGetLocalizedDescription_Parms GetLocalizedDescription_Parms;

	this->ProcessEvent ( pFnGetLocalizedDescription, &GetLocalizedDescription_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetActorCount
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetActorCount ( )
{
	static UFunction* pFnGetActorCount = NULL;

	if ( ! pFnGetActorCount )
		pFnGetActorCount = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetActorCount" );

	UKFInterface_MapObjective_execGetActorCount_Parms GetActorCount_Parms;

	this->ProcessEvent ( pFnGetActorCount, &GetActorCount_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.UsesMultipleActors
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::UsesMultipleActors ( )
{
	static UFunction* pFnUsesMultipleActors = NULL;

	if ( ! pFnUsesMultipleActors )
		pFnUsesMultipleActors = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.UsesMultipleActors" );

	UKFInterface_MapObjective_execUsesMultipleActors_Parms UsesMultipleActors_Parms;

	this->ProcessEvent ( pFnUsesMultipleActors, &UsesMultipleActors_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetSpawnRateMod
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetSpawnRateMod ( )
{
	static UFunction* pFnGetSpawnRateMod = NULL;

	if ( ! pFnGetSpawnRateMod )
		pFnGetSpawnRateMod = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetSpawnRateMod" );

	UKFInterface_MapObjective_execGetSpawnRateMod_Parms GetSpawnRateMod_Parms;

	this->ProcessEvent ( pFnGetSpawnRateMod, &GetSpawnRateMod_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetActivationPctChance
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetActivationPctChance ( )
{
	static UFunction* pFnGetActivationPctChance = NULL;

	if ( ! pFnGetActivationPctChance )
		pFnGetActivationPctChance = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetActivationPctChance" );

	UKFInterface_MapObjective_execGetActivationPctChance_Parms GetActivationPctChance_Parms;

	this->ProcessEvent ( pFnGetActivationPctChance, &GetActivationPctChance_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.HasFailedObjective
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::HasFailedObjective ( )
{
	static UFunction* pFnHasFailedObjective = NULL;

	if ( ! pFnHasFailedObjective )
		pFnHasFailedObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.HasFailedObjective" );

	UKFInterface_MapObjective_execHasFailedObjective_Parms HasFailedObjective_Parms;

	this->ProcessEvent ( pFnHasFailedObjective, &HasFailedObjective_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetProgress
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetProgress ( )
{
	static UFunction* pFnGetProgress = NULL;

	if ( ! pFnGetProgress )
		pFnGetProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetProgress" );

	UKFInterface_MapObjective_execGetProgress_Parms GetProgress_Parms;

	this->ProcessEvent ( pFnGetProgress, &GetProgress_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.CanActivateObjective
// [0x00020000] 
// Parameters infos:

void UKFInterface_MapObjective::CanActivateObjective ( )
{
	static UFunction* pFnCanActivateObjective = NULL;

	if ( ! pFnCanActivateObjective )
		pFnCanActivateObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.CanActivateObjective" );

	UKFInterface_MapObjective_execCanActivateObjective_Parms CanActivateObjective_Parms;

	this->ProcessEvent ( pFnCanActivateObjective, &CanActivateObjective_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetLocalizedName
// [0x00020000] 
// Parameters infos:

void UKFInterface_MapObjective::GetLocalizedName ( )
{
	static UFunction* pFnGetLocalizedName = NULL;

	if ( ! pFnGetLocalizedName )
		pFnGetLocalizedName = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetLocalizedName" );

	UKFInterface_MapObjective_execGetLocalizedName_Parms GetLocalizedName_Parms;

	this->ProcessEvent ( pFnGetLocalizedName, &GetLocalizedName_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.IsBonus
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::IsBonus ( )
{
	static UFunction* pFnIsBonus = NULL;

	if ( ! pFnIsBonus )
		pFnIsBonus = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.IsBonus" );

	UKFInterface_MapObjective_execIsBonus_Parms IsBonus_Parms;

	this->ProcessEvent ( pFnIsBonus, &IsBonus_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetMaxXPReward
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetMaxXPReward ( )
{
	static UFunction* pFnGetMaxXPReward = NULL;

	if ( ! pFnGetMaxXPReward )
		pFnGetMaxXPReward = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetMaxXPReward" );

	UKFInterface_MapObjective_execGetMaxXPReward_Parms GetMaxXPReward_Parms;

	this->ProcessEvent ( pFnGetMaxXPReward, &GetMaxXPReward_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetXPReward
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetXPReward ( )
{
	static UFunction* pFnGetXPReward = NULL;

	if ( ! pFnGetXPReward )
		pFnGetXPReward = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetXPReward" );

	UKFInterface_MapObjective_execGetXPReward_Parms GetXPReward_Parms;

	this->ProcessEvent ( pFnGetXPReward, &GetXPReward_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetMaxVoshReward
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetMaxVoshReward ( )
{
	static UFunction* pFnGetMaxVoshReward = NULL;

	if ( ! pFnGetMaxVoshReward )
		pFnGetMaxVoshReward = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetMaxVoshReward" );

	UKFInterface_MapObjective_execGetMaxVoshReward_Parms GetMaxVoshReward_Parms;

	this->ProcessEvent ( pFnGetMaxVoshReward, &GetMaxVoshReward_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetVoshReward
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetVoshReward ( )
{
	static UFunction* pFnGetVoshReward = NULL;

	if ( ! pFnGetVoshReward )
		pFnGetVoshReward = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetVoshReward" );

	UKFInterface_MapObjective_execGetVoshReward_Parms GetVoshReward_Parms;

	this->ProcessEvent ( pFnGetVoshReward, &GetVoshReward_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetMaxDoshReward
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetMaxDoshReward ( )
{
	static UFunction* pFnGetMaxDoshReward = NULL;

	if ( ! pFnGetMaxDoshReward )
		pFnGetMaxDoshReward = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetMaxDoshReward" );

	UKFInterface_MapObjective_execGetMaxDoshReward_Parms GetMaxDoshReward_Parms;

	this->ProcessEvent ( pFnGetMaxDoshReward, &GetMaxDoshReward_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.GetDoshReward
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::GetDoshReward ( )
{
	static UFunction* pFnGetDoshReward = NULL;

	if ( ! pFnGetDoshReward )
		pFnGetDoshReward = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.GetDoshReward" );

	UKFInterface_MapObjective_execGetDoshReward_Parms GetDoshReward_Parms;

	this->ProcessEvent ( pFnGetDoshReward, &GetDoshReward_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.UsesProgress
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::UsesProgress ( )
{
	static UFunction* pFnUsesProgress = NULL;

	if ( ! pFnUsesProgress )
		pFnUsesProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.UsesProgress" );

	UKFInterface_MapObjective_execUsesProgress_Parms UsesProgress_Parms;

	this->ProcessEvent ( pFnUsesProgress, &UsesProgress_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.IsActive
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::IsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.IsActive" );

	UKFInterface_MapObjective_execIsActive_Parms IsActive_Parms;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.DeactivateObjective
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::DeactivateObjective ( )
{
	static UFunction* pFnDeactivateObjective = NULL;

	if ( ! pFnDeactivateObjective )
		pFnDeactivateObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.DeactivateObjective" );

	UKFInterface_MapObjective_execDeactivateObjective_Parms DeactivateObjective_Parms;

	this->ProcessEvent ( pFnDeactivateObjective, &DeactivateObjective_Parms, NULL );
};

// Function KFGame.KFInterface_MapObjective.ActivateObjective
// [0x00020100] 
// Parameters infos:

void UKFInterface_MapObjective::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MapObjective.ActivateObjective" );

	UKFInterface_MapObjective_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function KFGame.KFLocalMessage_PlayerKills.ResolveTeamName
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_PlayerKills::ResolveTeamName ( )
{
	static UFunction* pFnResolveTeamName = NULL;

	if ( ! pFnResolveTeamName )
		pFnResolveTeamName = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_PlayerKills.ResolveTeamName" );

	UKFLocalMessage_PlayerKills_execResolveTeamName_Parms ResolveTeamName_Parms;

	this->ProcessEvent ( pFnResolveTeamName, &ResolveTeamName_Parms, NULL );
};

// Function KFGame.KFLocalMessage_PlayerKills.GetString
// [0x00026002] 
// Parameters infos:

void UKFLocalMessage_PlayerKills::GetString ( )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_PlayerKills.GetString" );

	UKFLocalMessage_PlayerKills_execGetString_Parms GetString_Parms;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );
};

// Function KFGame.KFLocalMessage_PlayerKills.GetHexColor
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_PlayerKills::GetHexColor ( )
{
	static UFunction* pFnGetHexColor = NULL;

	if ( ! pFnGetHexColor )
		pFnGetHexColor = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_PlayerKills.GetHexColor" );

	UKFLocalMessage_PlayerKills_execGetHexColor_Parms GetHexColor_Parms;

	this->ProcessEvent ( pFnGetHexColor, &GetHexColor_Parms, NULL );
};

// Function KFGame.KFDT_Healing.PlayImpactHitEffects
// [0x00026002] 
// Parameters infos:

void UKFDT_Healing::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Healing.PlayImpactHitEffects" );

	UKFDT_Healing_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function KFGame.KFGFxPopup_InputPrompt.Callback_ClosedPopup
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_InputPrompt::Callback_ClosedPopup ( )
{
	static UFunction* pFnCallback_ClosedPopup = NULL;

	if ( ! pFnCallback_ClosedPopup )
		pFnCallback_ClosedPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_InputPrompt.Callback_ClosedPopup" );

	UKFGFxPopup_InputPrompt_execCallback_ClosedPopup_Parms Callback_ClosedPopup_Parms;

	this->ProcessEvent ( pFnCallback_ClosedPopup, &Callback_ClosedPopup_Parms, NULL );
};

// Function KFGame.KFGFxPopup_InputPrompt.Callback_ClickedConfirm
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_InputPrompt::Callback_ClickedConfirm ( )
{
	static UFunction* pFnCallback_ClickedConfirm = NULL;

	if ( ! pFnCallback_ClickedConfirm )
		pFnCallback_ClickedConfirm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_InputPrompt.Callback_ClickedConfirm" );

	UKFGFxPopup_InputPrompt_execCallback_ClickedConfirm_Parms Callback_ClickedConfirm_Parms;

	this->ProcessEvent ( pFnCallback_ClickedConfirm, &Callback_ClickedConfirm_Parms, NULL );
};

// Function KFGame.KFGFxPopup_InputPrompt.ClearDelegates
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_InputPrompt::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_InputPrompt.ClearDelegates" );

	UKFGFxPopup_InputPrompt_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function KFGame.KFGFxPopup_InputPrompt.AssignRightButtonDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_InputPrompt::AssignRightButtonDelegate ( )
{
	static UFunction* pFnAssignRightButtonDelegate = NULL;

	if ( ! pFnAssignRightButtonDelegate )
		pFnAssignRightButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_InputPrompt.AssignRightButtonDelegate" );

	UKFGFxPopup_InputPrompt_execAssignRightButtonDelegate_Parms AssignRightButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignRightButtonDelegate, &AssignRightButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxPopup_InputPrompt.AssignLeftButtonDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_InputPrompt::AssignLeftButtonDelegate ( )
{
	static UFunction* pFnAssignLeftButtonDelegate = NULL;

	if ( ! pFnAssignLeftButtonDelegate )
		pFnAssignLeftButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_InputPrompt.AssignLeftButtonDelegate" );

	UKFGFxPopup_InputPrompt_execAssignLeftButtonDelegate_Parms AssignLeftButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignLeftButtonDelegate, &AssignLeftButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.InitializePopup
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Popup::InitializePopup ( )
{
	static UFunction* pFnInitializePopup = NULL;

	if ( ! pFnInitializePopup )
		pFnInitializePopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.InitializePopup" );

	UKFGFxObject_Popup_execInitializePopup_Parms InitializePopup_Parms;

	this->ProcessEvent ( pFnInitializePopup, &InitializePopup_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.OnClosed
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Popup::OnClosed ( )
{
	static UFunction* pFnOnClosed = NULL;

	if ( ! pFnOnClosed )
		pFnOnClosed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.OnClosed" );

	UKFGFxObject_Popup_execOnClosed_Parms OnClosed_Parms;

	this->ProcessEvent ( pFnOnClosed, &OnClosed_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.UpdateDescritionText
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Popup::UpdateDescritionText ( )
{
	static UFunction* pFnUpdateDescritionText = NULL;

	if ( ! pFnUpdateDescritionText )
		pFnUpdateDescritionText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.UpdateDescritionText" );

	UKFGFxObject_Popup_execUpdateDescritionText_Parms UpdateDescritionText_Parms;

	this->ProcessEvent ( pFnUpdateDescritionText, &UpdateDescritionText_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.ClearDelegates
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Popup::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.ClearDelegates" );

	UKFGFxObject_Popup_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.AssignRightButtonDelegate
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Popup::AssignRightButtonDelegate ( )
{
	static UFunction* pFnAssignRightButtonDelegate = NULL;

	if ( ! pFnAssignRightButtonDelegate )
		pFnAssignRightButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.AssignRightButtonDelegate" );

	UKFGFxObject_Popup_execAssignRightButtonDelegate_Parms AssignRightButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignRightButtonDelegate, &AssignRightButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.AssignMiddleButtonDelegate
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Popup::AssignMiddleButtonDelegate ( )
{
	static UFunction* pFnAssignMiddleButtonDelegate = NULL;

	if ( ! pFnAssignMiddleButtonDelegate )
		pFnAssignMiddleButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.AssignMiddleButtonDelegate" );

	UKFGFxObject_Popup_execAssignMiddleButtonDelegate_Parms AssignMiddleButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignMiddleButtonDelegate, &AssignMiddleButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.AssignLeftButtonDelegate
// [0x00020000] 
// Parameters infos:

void UKFGFxObject_Popup::AssignLeftButtonDelegate ( )
{
	static UFunction* pFnAssignLeftButtonDelegate = NULL;

	if ( ! pFnAssignLeftButtonDelegate )
		pFnAssignLeftButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.AssignLeftButtonDelegate" );

	UKFGFxObject_Popup_execAssignLeftButtonDelegate_Parms AssignLeftButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignLeftButtonDelegate, &AssignLeftButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.RightButtonPress
// [0x00120000] 
// Parameters infos:

void UKFGFxObject_Popup::RightButtonPress ( )
{
	static UFunction* pFnRightButtonPress = NULL;

	if ( ! pFnRightButtonPress )
		pFnRightButtonPress = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.RightButtonPress" );

	UKFGFxObject_Popup_execRightButtonPress_Parms RightButtonPress_Parms;

	this->ProcessEvent ( pFnRightButtonPress, &RightButtonPress_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.MiddleButtonPress
// [0x00120000] 
// Parameters infos:

void UKFGFxObject_Popup::MiddleButtonPress ( )
{
	static UFunction* pFnMiddleButtonPress = NULL;

	if ( ! pFnMiddleButtonPress )
		pFnMiddleButtonPress = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.MiddleButtonPress" );

	UKFGFxObject_Popup_execMiddleButtonPress_Parms MiddleButtonPress_Parms;

	this->ProcessEvent ( pFnMiddleButtonPress, &MiddleButtonPress_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.LeftButtonPress
// [0x00120000] 
// Parameters infos:

void UKFGFxObject_Popup::LeftButtonPress ( )
{
	static UFunction* pFnLeftButtonPress = NULL;

	if ( ! pFnLeftButtonPress )
		pFnLeftButtonPress = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.LeftButtonPress" );

	UKFGFxObject_Popup_execLeftButtonPress_Parms LeftButtonPress_Parms;

	this->ProcessEvent ( pFnLeftButtonPress, &LeftButtonPress_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.ClosePopUp
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Popup::ClosePopUp ( )
{
	static UFunction* pFnClosePopUp = NULL;

	if ( ! pFnClosePopUp )
		pFnClosePopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.ClosePopUp" );

	UKFGFxObject_Popup_execClosePopUp_Parms ClosePopUp_Parms;

	this->ProcessEvent ( pFnClosePopUp, &ClosePopUp_Parms, NULL );
};

// Function KFGame.KFGFxObject_Popup.Callback_ClosedPopup
// [0x00020002] 
// Parameters infos:

void UKFGFxObject_Popup::Callback_ClosedPopup ( )
{
	static UFunction* pFnCallback_ClosedPopup = NULL;

	if ( ! pFnCallback_ClosedPopup )
		pFnCallback_ClosedPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxObject_Popup.Callback_ClosedPopup" );

	UKFGFxObject_Popup_execCallback_ClosedPopup_Parms Callback_ClosedPopup_Parms;

	this->ProcessEvent ( pFnCallback_ClosedPopup, &Callback_ClosedPopup_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayFirstWaveStartDialog
// [0x00022002] 
// Parameters infos:

void AKFTraderDialogManager::PlayFirstWaveStartDialog ( )
{
	static UFunction* pFnPlayFirstWaveStartDialog = NULL;

	if ( ! pFnPlayFirstWaveStartDialog )
		pFnPlayFirstWaveStartDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayFirstWaveStartDialog" );

	AKFTraderDialogManager_execPlayFirstWaveStartDialog_Parms PlayFirstWaveStartDialog_Parms;

	this->ProcessEvent ( pFnPlayFirstWaveStartDialog, &PlayFirstWaveStartDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.BroadcastEndlessStartWaveDialog
// [0x00022002] 
// Parameters infos:

void AKFTraderDialogManager::BroadcastEndlessStartWaveDialog ( )
{
	static UFunction* pFnBroadcastEndlessStartWaveDialog = NULL;

	if ( ! pFnBroadcastEndlessStartWaveDialog )
		pFnBroadcastEndlessStartWaveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.BroadcastEndlessStartWaveDialog" );

	AKFTraderDialogManager_execBroadcastEndlessStartWaveDialog_Parms BroadcastEndlessStartWaveDialog_Parms;

	this->ProcessEvent ( pFnBroadcastEndlessStartWaveDialog, &BroadcastEndlessStartWaveDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlaySelectItemDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlaySelectItemDialog ( )
{
	static UFunction* pFnPlaySelectItemDialog = NULL;

	if ( ! pFnPlaySelectItemDialog )
		pFnPlaySelectItemDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlaySelectItemDialog" );

	AKFTraderDialogManager_execPlaySelectItemDialog_Parms PlaySelectItemDialog_Parms;

	this->ProcessEvent ( pFnPlaySelectItemDialog, &PlaySelectItemDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayLastManStandingDialog
// [0x00020002] 
// Parameters infos:

void AKFTraderDialogManager::PlayLastManStandingDialog ( )
{
	static UFunction* pFnPlayLastManStandingDialog = NULL;

	if ( ! pFnPlayLastManStandingDialog )
		pFnPlayLastManStandingDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayLastManStandingDialog" );

	AKFTraderDialogManager_execPlayLastManStandingDialog_Parms PlayLastManStandingDialog_Parms;

	this->ProcessEvent ( pFnPlayLastManStandingDialog, &PlayLastManStandingDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayObjectiveDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayObjectiveDialog ( )
{
	static UFunction* pFnPlayObjectiveDialog = NULL;

	if ( ! pFnPlayObjectiveDialog )
		pFnPlayObjectiveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayObjectiveDialog" );

	AKFTraderDialogManager_execPlayObjectiveDialog_Parms PlayObjectiveDialog_Parms;

	this->ProcessEvent ( pFnPlayObjectiveDialog, &PlayObjectiveDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayOpenTraderMenuDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayOpenTraderMenuDialog ( )
{
	static UFunction* pFnPlayOpenTraderMenuDialog = NULL;

	if ( ! pFnPlayOpenTraderMenuDialog )
		pFnPlayOpenTraderMenuDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayOpenTraderMenuDialog" );

	AKFTraderDialogManager_execPlayOpenTraderMenuDialog_Parms PlayOpenTraderMenuDialog_Parms;

	this->ProcessEvent ( pFnPlayOpenTraderMenuDialog, &PlayOpenTraderMenuDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.WaveClearDialogTimer
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::WaveClearDialogTimer ( )
{
	static UFunction* pFnWaveClearDialogTimer = NULL;

	if ( ! pFnWaveClearDialogTimer )
		pFnWaveClearDialogTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.WaveClearDialogTimer" );

	AKFTraderDialogManager_execWaveClearDialogTimer_Parms WaveClearDialogTimer_Parms;

	this->ProcessEvent ( pFnWaveClearDialogTimer, &WaveClearDialogTimer_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayWaveClearDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayWaveClearDialog ( )
{
	static UFunction* pFnPlayWaveClearDialog = NULL;

	if ( ! pFnPlayWaveClearDialog )
		pFnPlayWaveClearDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayWaveClearDialog" );

	AKFTraderDialogManager_execPlayWaveClearDialog_Parms PlayWaveClearDialog_Parms;

	this->ProcessEvent ( pFnPlayWaveClearDialog, &PlayWaveClearDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.IsSoloHumanPlayer
// [0x00020002] 
// Parameters infos:

void AKFTraderDialogManager::IsSoloHumanPlayer ( )
{
	static UFunction* pFnIsSoloHumanPlayer = NULL;

	if ( ! pFnIsSoloHumanPlayer )
		pFnIsSoloHumanPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.IsSoloHumanPlayer" );

	AKFTraderDialogManager_execIsSoloHumanPlayer_Parms IsSoloHumanPlayer_Parms;

	this->ProcessEvent ( pFnIsSoloHumanPlayer, &IsSoloHumanPlayer_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayPlayerSurvivedLastWaveDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayPlayerSurvivedLastWaveDialog ( )
{
	static UFunction* pFnPlayPlayerSurvivedLastWaveDialog = NULL;

	if ( ! pFnPlayPlayerSurvivedLastWaveDialog )
		pFnPlayPlayerSurvivedLastWaveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayPlayerSurvivedLastWaveDialog" );

	AKFTraderDialogManager_execPlayPlayerSurvivedLastWaveDialog_Parms PlayPlayerSurvivedLastWaveDialog_Parms;

	this->ProcessEvent ( pFnPlayPlayerSurvivedLastWaveDialog, &PlayPlayerSurvivedLastWaveDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayPlayerDiedLastWaveDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayPlayerDiedLastWaveDialog ( )
{
	static UFunction* pFnPlayPlayerDiedLastWaveDialog = NULL;

	if ( ! pFnPlayPlayerDiedLastWaveDialog )
		pFnPlayPlayerDiedLastWaveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayPlayerDiedLastWaveDialog" );

	AKFTraderDialogManager_execPlayPlayerDiedLastWaveDialog_Parms PlayPlayerDiedLastWaveDialog_Parms;

	this->ProcessEvent ( pFnPlayPlayerDiedLastWaveDialog, &PlayPlayerDiedLastWaveDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayBeginTraderTimeDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayBeginTraderTimeDialog ( )
{
	static UFunction* pFnPlayBeginTraderTimeDialog = NULL;

	if ( ! pFnPlayBeginTraderTimeDialog )
		pFnPlayBeginTraderTimeDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayBeginTraderTimeDialog" );

	AKFTraderDialogManager_execPlayBeginTraderTimeDialog_Parms PlayBeginTraderTimeDialog_Parms;

	this->ProcessEvent ( pFnPlayBeginTraderTimeDialog, &PlayBeginTraderTimeDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayTraderTickDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayTraderTickDialog ( )
{
	static UFunction* pFnPlayTraderTickDialog = NULL;

	if ( ! pFnPlayTraderTickDialog )
		pFnPlayTraderTickDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayTraderTickDialog" );

	AKFTraderDialogManager_execPlayTraderTickDialog_Parms PlayTraderTickDialog_Parms;

	this->ProcessEvent ( pFnPlayTraderTickDialog, &PlayTraderTickDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.AddRandomOption
// [0x00C20102] 
// Parameters infos:

void AKFTraderDialogManager::AddRandomOption ( )
{
	static UFunction* pFnAddRandomOption = NULL;

	if ( ! pFnAddRandomOption )
		pFnAddRandomOption = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.AddRandomOption" );

	AKFTraderDialogManager_execAddRandomOption_Parms AddRandomOption_Parms;

	this->ProcessEvent ( pFnAddRandomOption, &AddRandomOption_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayCloseTraderDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayCloseTraderDialog ( )
{
	static UFunction* pFnPlayCloseTraderDialog = NULL;

	if ( ! pFnPlayCloseTraderDialog )
		pFnPlayCloseTraderDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayCloseTraderDialog" );

	AKFTraderDialogManager_execPlayCloseTraderDialog_Parms PlayCloseTraderDialog_Parms;

	this->ProcessEvent ( pFnPlayCloseTraderDialog, &PlayCloseTraderDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayApproachTraderDialog
// [0x00022002] 
// Parameters infos:

void AKFTraderDialogManager::PlayApproachTraderDialog ( )
{
	static UFunction* pFnPlayApproachTraderDialog = NULL;

	if ( ! pFnPlayApproachTraderDialog )
		pFnPlayApproachTraderDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayApproachTraderDialog" );

	AKFTraderDialogManager_execPlayApproachTraderDialog_Parms PlayApproachTraderDialog_Parms;

	this->ProcessEvent ( pFnPlayApproachTraderDialog, &PlayApproachTraderDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayOpenTraderDialog
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::PlayOpenTraderDialog ( )
{
	static UFunction* pFnPlayOpenTraderDialog = NULL;

	if ( ! pFnPlayOpenTraderDialog )
		pFnPlayOpenTraderDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayOpenTraderDialog" );

	AKFTraderDialogManager_execPlayOpenTraderDialog_Parms PlayOpenTraderDialog_Parms;

	this->ProcessEvent ( pFnPlayOpenTraderDialog, &PlayOpenTraderDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayGlobalWaveProgressDialog
// [0x00022002] 
// Parameters infos:

void AKFTraderDialogManager::PlayGlobalWaveProgressDialog ( )
{
	static UFunction* pFnPlayGlobalWaveProgressDialog = NULL;

	if ( ! pFnPlayGlobalWaveProgressDialog )
		pFnPlayGlobalWaveProgressDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayGlobalWaveProgressDialog" );

	AKFTraderDialogManager_execPlayGlobalWaveProgressDialog_Parms PlayGlobalWaveProgressDialog_Parms;

	this->ProcessEvent ( pFnPlayGlobalWaveProgressDialog, &PlayGlobalWaveProgressDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayGlobalDialog
// [0x00026002] 
// Parameters infos:

void AKFTraderDialogManager::PlayGlobalDialog ( )
{
	static UFunction* pFnPlayGlobalDialog = NULL;

	if ( ! pFnPlayGlobalDialog )
		pFnPlayGlobalDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayGlobalDialog" );

	AKFTraderDialogManager_execPlayGlobalDialog_Parms PlayGlobalDialog_Parms;

	this->ProcessEvent ( pFnPlayGlobalDialog, &PlayGlobalDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.PlayDialog
// [0x00024102] 
// Parameters infos:

void AKFTraderDialogManager::PlayDialog ( )
{
	static UFunction* pFnPlayDialog = NULL;

	if ( ! pFnPlayDialog )
		pFnPlayDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.PlayDialog" );

	AKFTraderDialogManager_execPlayDialog_Parms PlayDialog_Parms;

	this->ProcessEvent ( pFnPlayDialog, &PlayDialog_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.ShouldDialogPlay
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::ShouldDialogPlay ( )
{
	static UFunction* pFnShouldDialogPlay = NULL;

	if ( ! pFnShouldDialogPlay )
		pFnShouldDialogPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.ShouldDialogPlay" );

	AKFTraderDialogManager_execShouldDialogPlay_Parms ShouldDialogPlay_Parms;

	this->ProcessEvent ( pFnShouldDialogPlay, &ShouldDialogPlay_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.DialogIsCoolingDown
// [0x00020102] 
// Parameters infos:

void AKFTraderDialogManager::DialogIsCoolingDown ( )
{
	static UFunction* pFnDialogIsCoolingDown = NULL;

	if ( ! pFnDialogIsCoolingDown )
		pFnDialogIsCoolingDown = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.DialogIsCoolingDown" );

	AKFTraderDialogManager_execDialogIsCoolingDown_Parms DialogIsCoolingDown_Parms;

	this->ProcessEvent ( pFnDialogIsCoolingDown, &DialogIsCoolingDown_Parms, NULL );
};

// Function KFGame.KFTraderDialogManager.EndOfDialogTimer
// [0x00820102] 
// Parameters infos:

void AKFTraderDialogManager::EndOfDialogTimer ( )
{
	static UFunction* pFnEndOfDialogTimer = NULL;

	if ( ! pFnEndOfDialogTimer )
		pFnEndOfDialogTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFTraderDialogManager.EndOfDialogTimer" );

	AKFTraderDialogManager_execEndOfDialogTimer_Parms EndOfDialogTimer_Parms;

	this->ProcessEvent ( pFnEndOfDialogTimer, &EndOfDialogTimer_Parms, NULL );
};

// Function KFGame.KFLocalMessage_VoiceComms.GetHexColor
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_VoiceComms::GetHexColor ( )
{
	static UFunction* pFnGetHexColor = NULL;

	if ( ! pFnGetHexColor )
		pFnGetHexColor = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_VoiceComms.GetHexColor" );

	UKFLocalMessage_VoiceComms_execGetHexColor_Parms GetHexColor_Parms;

	this->ProcessEvent ( pFnGetHexColor, &GetHexColor_Parms, NULL );
};

// Function KFGame.KFLocalMessage_VoiceComms.GetString
// [0x00026002] 
// Parameters infos:

void UKFLocalMessage_VoiceComms::GetString ( )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_VoiceComms.GetString" );

	UKFLocalMessage_VoiceComms_execGetString_Parms GetString_Parms;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Interaction.GetHexColor
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Interaction::GetHexColor ( )
{
	static UFunction* pFnGetHexColor = NULL;

	if ( ! pFnGetHexColor )
		pFnGetHexColor = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Interaction.GetHexColor" );

	UKFLocalMessage_Interaction_execGetHexColor_Parms GetHexColor_Parms;

	this->ProcessEvent ( pFnGetHexColor, &GetHexColor_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Interaction.GetPos
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Interaction::GetPos ( )
{
	static UFunction* pFnGetPos = NULL;

	if ( ! pFnGetPos )
		pFnGetPos = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Interaction.GetPos" );

	UKFLocalMessage_Interaction_execGetPos_Parms GetPos_Parms;

	this->ProcessEvent ( pFnGetPos, &GetPos_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Interaction.GetString
// [0x00026002] 
// Parameters infos:

void UKFLocalMessage_Interaction::GetString ( )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Interaction.GetString" );

	UKFLocalMessage_Interaction_execGetString_Parms GetString_Parms;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Interaction.GetKeyBind
// [0x00826002] 
// Parameters infos:

void UKFLocalMessage_Interaction::GetKeyBind ( )
{
	static UFunction* pFnGetKeyBind = NULL;

	if ( ! pFnGetKeyBind )
		pFnGetKeyBind = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Interaction.GetKeyBind" );

	UKFLocalMessage_Interaction_execGetKeyBind_Parms GetKeyBind_Parms;

	this->ProcessEvent ( pFnGetKeyBind, &GetKeyBind_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Interaction.GetMessageDuration
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Interaction::GetMessageDuration ( )
{
	static UFunction* pFnGetMessageDuration = NULL;

	if ( ! pFnGetMessageDuration )
		pFnGetMessageDuration = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Interaction.GetMessageDuration" );

	UKFLocalMessage_Interaction_execGetMessageDuration_Parms GetMessageDuration_Parms;

	this->ProcessEvent ( pFnGetMessageDuration, &GetMessageDuration_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Interaction.ClientReceive
// [0x00026002] 
// Parameters infos:

void UKFLocalMessage_Interaction::ClientReceive ( )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Interaction.ClientReceive" );

	UKFLocalMessage_Interaction_execClientReceive_Parms ClientReceive_Parms;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.LocalizedMessage
// [0x00024002] 
// Parameters infos:

void AKFGFxHudWrapper::LocalizedMessage ( )
{
	static UFunction* pFnLocalizedMessage = NULL;

	if ( ! pFnLocalizedMessage )
		pFnLocalizedMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.LocalizedMessage" );

	AKFGFxHudWrapper_execLocalizedMessage_Parms LocalizedMessage_Parms;

	this->ProcessEvent ( pFnLocalizedMessage, &LocalizedMessage_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.PlayerOwnerDied
// [0x00020002] 
// Parameters infos:

void AKFGFxHudWrapper::PlayerOwnerDied ( )
{
	static UFunction* pFnPlayerOwnerDied = NULL;

	if ( ! pFnPlayerOwnerDied )
		pFnPlayerOwnerDied = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.PlayerOwnerDied" );

	AKFGFxHudWrapper_execPlayerOwnerDied_Parms PlayerOwnerDied_Parms;

	this->ProcessEvent ( pFnPlayerOwnerDied, &PlayerOwnerDied_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.DrawHUD
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGFxHudWrapper::eventDrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.DrawHUD" );

	AKFGFxHudWrapper_eventDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.SetShowScores
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFGFxHudWrapper::SetShowScores ( )
{
	static UFunction* pFnSetShowScores = NULL;

	if ( ! pFnSetShowScores )
		pFnSetShowScores = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.SetShowScores" );

	AKFGFxHudWrapper_execSetShowScores_Parms SetShowScores_Parms;

	this->ProcessEvent ( pFnSetShowScores, &SetShowScores_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.PostRender
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGFxHudWrapper::eventPostRender ( )
{
	static UFunction* pFnPostRender = NULL;

	if ( ! pFnPostRender )
		pFnPostRender = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.PostRender" );

	AKFGFxHudWrapper_eventPostRender_Parms PostRender_Parms;

	this->ProcessEvent ( pFnPostRender, &PostRender_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.ResolutionChanged
// [0x00020002] 
// Parameters infos:

void AKFGFxHudWrapper::ResolutionChanged ( )
{
	static UFunction* pFnResolutionChanged = NULL;

	if ( ! pFnResolutionChanged )
		pFnResolutionChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.ResolutionChanged" );

	AKFGFxHudWrapper_execResolutionChanged_Parms ResolutionChanged_Parms;

	this->ProcessEvent ( pFnResolutionChanged, &ResolutionChanged_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.SetVisible
// [0x00020002] 
// Parameters infos:

void AKFGFxHudWrapper::SetVisible ( )
{
	static UFunction* pFnSetVisible = NULL;

	if ( ! pFnSetVisible )
		pFnSetVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.SetVisible" );

	AKFGFxHudWrapper_execSetVisible_Parms SetVisible_Parms;

	this->ProcessEvent ( pFnSetVisible, &SetVisible_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.GetLocalPlayerOwnerIndex
// [0x00020002] 
// Parameters infos:

void AKFGFxHudWrapper::GetLocalPlayerOwnerIndex ( )
{
	static UFunction* pFnGetLocalPlayerOwnerIndex = NULL;

	if ( ! pFnGetLocalPlayerOwnerIndex )
		pFnGetLocalPlayerOwnerIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.GetLocalPlayerOwnerIndex" );

	AKFGFxHudWrapper_execGetLocalPlayerOwnerIndex_Parms GetLocalPlayerOwnerIndex_Parms;

	this->ProcessEvent ( pFnGetLocalPlayerOwnerIndex, &GetLocalPlayerOwnerIndex_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.RemoveMovies
// [0x00020002] 
// Parameters infos:

void AKFGFxHudWrapper::RemoveMovies ( )
{
	static UFunction* pFnRemoveMovies = NULL;

	if ( ! pFnRemoveMovies )
		pFnRemoveMovies = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.RemoveMovies" );

	AKFGFxHudWrapper_execRemoveMovies_Parms RemoveMovies_Parms;

	this->ProcessEvent ( pFnRemoveMovies, &RemoveMovies_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.Destroyed
// [0x00020822] ( FUNC_Event )
// Parameters infos:

void AKFGFxHudWrapper::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.Destroyed" );

	AKFGFxHudWrapper_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.GetHUDClass
// [0x00020002] 
// Parameters infos:

void AKFGFxHudWrapper::GetHUDClass ( )
{
	static UFunction* pFnGetHUDClass = NULL;

	if ( ! pFnGetHUDClass )
		pFnGetHUDClass = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.GetHUDClass" );

	AKFGFxHudWrapper_execGetHUDClass_Parms GetHUDClass_Parms;

	this->ProcessEvent ( pFnGetHUDClass, &GetHUDClass_Parms, NULL );
};

// Function KFGame.KFGFxHudWrapper.CreateHUDMovie
// [0x00024002] 
// Parameters infos:

void AKFGFxHudWrapper::CreateHUDMovie ( )
{
	static UFunction* pFnCreateHUDMovie = NULL;

	if ( ! pFnCreateHUDMovie )
		pFnCreateHUDMovie = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHudWrapper.CreateHUDMovie" );

	AKFGFxHudWrapper_execCreateHUDMovie_Parms CreateHUDMovie_Parms;

	this->ProcessEvent ( pFnCreateHUDMovie, &CreateHUDMovie_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.FadeOut
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::FadeOut ( )
{
	static UFunction* pFnFadeOut = NULL;

	if ( ! pFnFadeOut )
		pFnFadeOut = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.FadeOut" );

	UKFGFxHUD_WeaponSelectWidget_execFadeOut_Parms FadeOut_Parms;

	this->ProcessEvent ( pFnFadeOut, &FadeOut_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.SetWeaponSwitchStayOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::SetWeaponSwitchStayOpen ( )
{
	static UFunction* pFnSetWeaponSwitchStayOpen = NULL;

	if ( ! pFnSetWeaponSwitchStayOpen )
		pFnSetWeaponSwitchStayOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.SetWeaponSwitchStayOpen" );

	UKFGFxHUD_WeaponSelectWidget_execSetWeaponSwitchStayOpen_Parms SetWeaponSwitchStayOpen_Parms;

	this->ProcessEvent ( pFnSetWeaponSwitchStayOpen, &SetWeaponSwitchStayOpen_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.RefreshTimer
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::RefreshTimer ( )
{
	static UFunction* pFnRefreshTimer = NULL;

	if ( ! pFnRefreshTimer )
		pFnRefreshTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.RefreshTimer" );

	UKFGFxHUD_WeaponSelectWidget_execRefreshTimer_Parms RefreshTimer_Parms;

	this->ProcessEvent ( pFnRefreshTimer, &RefreshTimer_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.ShowAllHUDGroups
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::ShowAllHUDGroups ( )
{
	static UFunction* pFnShowAllHUDGroups = NULL;

	if ( ! pFnShowAllHUDGroups )
		pFnShowAllHUDGroups = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.ShowAllHUDGroups" );

	UKFGFxHUD_WeaponSelectWidget_execShowAllHUDGroups_Parms ShowAllHUDGroups_Parms;

	this->ProcessEvent ( pFnShowAllHUDGroups, &ShowAllHUDGroups_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.ShowOnlyHUDGroup
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::ShowOnlyHUDGroup ( )
{
	static UFunction* pFnShowOnlyHUDGroup = NULL;

	if ( ! pFnShowOnlyHUDGroup )
		pFnShowOnlyHUDGroup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.ShowOnlyHUDGroup" );

	UKFGFxHUD_WeaponSelectWidget_execShowOnlyHUDGroup_Parms ShowOnlyHUDGroup_Parms;

	this->ProcessEvent ( pFnShowOnlyHUDGroup, &ShowOnlyHUDGroup_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.SendWeaponIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::SendWeaponIndex ( )
{
	static UFunction* pFnSendWeaponIndex = NULL;

	if ( ! pFnSendWeaponIndex )
		pFnSendWeaponIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.SendWeaponIndex" );

	UKFGFxHUD_WeaponSelectWidget_execSendWeaponIndex_Parms SendWeaponIndex_Parms;

	this->ProcessEvent ( pFnSendWeaponIndex, &SendWeaponIndex_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.SetWeaponCategories
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::SetWeaponCategories ( )
{
	static UFunction* pFnSetWeaponCategories = NULL;

	if ( ! pFnSetWeaponCategories )
		pFnSetWeaponCategories = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.SetWeaponCategories" );

	UKFGFxHUD_WeaponSelectWidget_execSetWeaponCategories_Parms SetWeaponCategories_Parms;

	this->ProcessEvent ( pFnSetWeaponCategories, &SetWeaponCategories_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.Hide
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::Hide ( )
{
	static UFunction* pFnHide = NULL;

	if ( ! pFnHide )
		pFnHide = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.Hide" );

	UKFGFxHUD_WeaponSelectWidget_execHide_Parms Hide_Parms;

	this->ProcessEvent ( pFnHide, &Hide_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.UpdateIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::UpdateIndex ( )
{
	static UFunction* pFnUpdateIndex = NULL;

	if ( ! pFnUpdateIndex )
		pFnUpdateIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.UpdateIndex" );

	UKFGFxHUD_WeaponSelectWidget_execUpdateIndex_Parms UpdateIndex_Parms;

	this->ProcessEvent ( pFnUpdateIndex, &UpdateIndex_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.GetSelectedWeapon
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::GetSelectedWeapon ( )
{
	static UFunction* pFnGetSelectedWeapon = NULL;

	if ( ! pFnGetSelectedWeapon )
		pFnGetSelectedWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.GetSelectedWeapon" );

	UKFGFxHUD_WeaponSelectWidget_execGetSelectedWeapon_Parms GetSelectedWeapon_Parms;

	this->ProcessEvent ( pFnGetSelectedWeapon, &GetSelectedWeapon_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.SetSelectedWeapon
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::SetSelectedWeapon ( )
{
	static UFunction* pFnSetSelectedWeapon = NULL;

	if ( ! pFnSetSelectedWeapon )
		pFnSetSelectedWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.SetSelectedWeapon" );

	UKFGFxHUD_WeaponSelectWidget_execSetSelectedWeapon_Parms SetSelectedWeapon_Parms;

	this->ProcessEvent ( pFnSetSelectedWeapon, &SetSelectedWeapon_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.SetWeaponList
// [0x00020102] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::SetWeaponList ( )
{
	static UFunction* pFnSetWeaponList = NULL;

	if ( ! pFnSetWeaponList )
		pFnSetWeaponList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.SetWeaponList" );

	UKFGFxHUD_WeaponSelectWidget_execSetWeaponList_Parms SetWeaponList_Parms;

	this->ProcessEvent ( pFnSetWeaponList, &SetWeaponList_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.SetWeaponGroupList
// [0x00420102] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::SetWeaponGroupList ( )
{
	static UFunction* pFnSetWeaponGroupList = NULL;

	if ( ! pFnSetWeaponGroupList )
		pFnSetWeaponGroupList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.SetWeaponGroupList" );

	UKFGFxHUD_WeaponSelectWidget_execSetWeaponGroupList_Parms SetWeaponGroupList_Parms;

	this->ProcessEvent ( pFnSetWeaponGroupList, &SetWeaponGroupList_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.UpdateWeaponGroupOnHUD
// [0x00020102] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::UpdateWeaponGroupOnHUD ( )
{
	static UFunction* pFnUpdateWeaponGroupOnHUD = NULL;

	if ( ! pFnUpdateWeaponGroupOnHUD )
		pFnUpdateWeaponGroupOnHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.UpdateWeaponGroupOnHUD" );

	UKFGFxHUD_WeaponSelectWidget_execUpdateWeaponGroupOnHUD_Parms UpdateWeaponGroupOnHUD_Parms;

	this->ProcessEvent ( pFnUpdateWeaponGroupOnHUD, &UpdateWeaponGroupOnHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.SetThowButton
// [0x00820002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::SetThowButton ( )
{
	static UFunction* pFnSetThowButton = NULL;

	if ( ! pFnSetThowButton )
		pFnSetThowButton = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.SetThowButton" );

	UKFGFxHUD_WeaponSelectWidget_execSetThowButton_Parms SetThowButton_Parms;

	this->ProcessEvent ( pFnSetThowButton, &SetThowButton_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.RefreshWeaponSelect
// [0x00020102] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::RefreshWeaponSelect ( )
{
	static UFunction* pFnRefreshWeaponSelect = NULL;

	if ( ! pFnRefreshWeaponSelect )
		pFnRefreshWeaponSelect = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.RefreshWeaponSelect" );

	UKFGFxHUD_WeaponSelectWidget_execRefreshWeaponSelect_Parms RefreshWeaponSelect_Parms;

	this->ProcessEvent ( pFnRefreshWeaponSelect, &RefreshWeaponSelect_Parms, NULL );
};

// Function KFGame.KFGFxHUD_WeaponSelectWidget.InitializeObject
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_WeaponSelectWidget::InitializeObject ( )
{
	static UFunction* pFnInitializeObject = NULL;

	if ( ! pFnInitializeObject )
		pFnInitializeObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_WeaponSelectWidget.InitializeObject" );

	UKFGFxHUD_WeaponSelectWidget_execInitializeObject_Parms InitializeObject_Parms;

	this->ProcessEvent ( pFnInitializeObject, &InitializeObject_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.UpdateUICursorPosition
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::UpdateUICursorPosition ( )
{
	static UFunction* pFnUpdateUICursorPosition = NULL;

	if ( ! pFnUpdateUICursorPosition )
		pFnUpdateUICursorPosition = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.UpdateUICursorPosition" );

	UKFGFxWidget_VoiceComms_execUpdateUICursorPosition_Parms UpdateUICursorPosition_Parms;

	this->ProcessEvent ( pFnUpdateUICursorPosition, &UpdateUICursorPosition_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.UpdateJoystickDirection
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::UpdateJoystickDirection ( )
{
	static UFunction* pFnUpdateJoystickDirection = NULL;

	if ( ! pFnUpdateJoystickDirection )
		pFnUpdateJoystickDirection = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.UpdateJoystickDirection" );

	UKFGFxWidget_VoiceComms_execUpdateJoystickDirection_Parms UpdateJoystickDirection_Parms;

	this->ProcessEvent ( pFnUpdateJoystickDirection, &UpdateJoystickDirection_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.OnAxisModified
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::OnAxisModified ( )
{
	static UFunction* pFnOnAxisModified = NULL;

	if ( ! pFnOnAxisModified )
		pFnOnAxisModified = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.OnAxisModified" );

	UKFGFxWidget_VoiceComms_execOnAxisModified_Parms OnAxisModified_Parms;

	this->ProcessEvent ( pFnOnAxisModified, &OnAxisModified_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.SayVoiceCommms
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::SayVoiceCommms ( )
{
	static UFunction* pFnSayVoiceCommms = NULL;

	if ( ! pFnSayVoiceCommms )
		pFnSayVoiceCommms = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.SayVoiceCommms" );

	UKFGFxWidget_VoiceComms_execSayVoiceCommms_Parms SayVoiceCommms_Parms;

	this->ProcessEvent ( pFnSayVoiceCommms, &SayVoiceCommms_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.HandleInputChange
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::HandleInputChange ( )
{
	static UFunction* pFnHandleInputChange = NULL;

	if ( ! pFnHandleInputChange )
		pFnHandleInputChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.HandleInputChange" );

	UKFGFxWidget_VoiceComms_execHandleInputChange_Parms HandleInputChange_Parms;

	this->ProcessEvent ( pFnHandleInputChange, &HandleInputChange_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.UpdateGFxEmoteState
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::UpdateGFxEmoteState ( )
{
	static UFunction* pFnUpdateGFxEmoteState = NULL;

	if ( ! pFnUpdateGFxEmoteState )
		pFnUpdateGFxEmoteState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.UpdateGFxEmoteState" );

	UKFGFxWidget_VoiceComms_execUpdateGFxEmoteState_Parms UpdateGFxEmoteState_Parms;

	this->ProcessEvent ( pFnUpdateGFxEmoteState, &UpdateGFxEmoteState_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.UpdateEmoteState
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::UpdateEmoteState ( )
{
	static UFunction* pFnUpdateEmoteState = NULL;

	if ( ! pFnUpdateEmoteState )
		pFnUpdateEmoteState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.UpdateEmoteState" );

	UKFGFxWidget_VoiceComms_execUpdateEmoteState_Parms UpdateEmoteState_Parms;

	this->ProcessEvent ( pFnUpdateEmoteState, &UpdateEmoteState_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.DisableComm
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::DisableComm ( )
{
	static UFunction* pFnDisableComm = NULL;

	if ( ! pFnDisableComm )
		pFnDisableComm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.DisableComm" );

	UKFGFxWidget_VoiceComms_execDisableComm_Parms DisableComm_Parms;

	this->ProcessEvent ( pFnDisableComm, &DisableComm_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.EnableComm
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::EnableComm ( )
{
	static UFunction* pFnEnableComm = NULL;

	if ( ! pFnEnableComm )
		pFnEnableComm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.EnableComm" );

	UKFGFxWidget_VoiceComms_execEnableComm_Parms EnableComm_Parms;

	this->ProcessEvent ( pFnEnableComm, &EnableComm_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.SaveVoiceCommSelection
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::SaveVoiceCommSelection ( )
{
	static UFunction* pFnSaveVoiceCommSelection = NULL;

	if ( ! pFnSaveVoiceCommSelection )
		pFnSaveVoiceCommSelection = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.SaveVoiceCommSelection" );

	UKFGFxWidget_VoiceComms_execSaveVoiceCommSelection_Parms SaveVoiceCommSelection_Parms;

	this->ProcessEvent ( pFnSaveVoiceCommSelection, &SaveVoiceCommSelection_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.SetLocalizedText
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::SetLocalizedText ( )
{
	static UFunction* pFnSetLocalizedText = NULL;

	if ( ! pFnSetLocalizedText )
		pFnSetLocalizedText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.SetLocalizedText" );

	UKFGFxWidget_VoiceComms_execSetLocalizedText_Parms SetLocalizedText_Parms;

	this->ProcessEvent ( pFnSetLocalizedText, &SetLocalizedText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VoiceComms.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VoiceComms::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VoiceComms.InitializeHUD" );

	UKFGFxWidget_VoiceComms_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.StopCountdown
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::StopCountdown ( )
{
	static UFunction* pFnStopCountdown = NULL;

	if ( ! pFnStopCountdown )
		pFnStopCountdown = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.StopCountdown" );

	UKFGFxWidget_BaseParty_execStopCountdown_Parms StopCountdown_Parms;

	this->ProcessEvent ( pFnStopCountdown, &StopCountdown_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.StartCountdown
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::StartCountdown ( )
{
	static UFunction* pFnStartCountdown = NULL;

	if ( ! pFnStartCountdown )
		pFnStartCountdown = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.StartCountdown" );

	UKFGFxWidget_BaseParty_execStartCountdown_Parms StartCountdown_Parms;

	this->ProcessEvent ( pFnStartCountdown, &StartCountdown_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.SendSearching
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::SendSearching ( )
{
	static UFunction* pFnSendSearching = NULL;

	if ( ! pFnSendSearching )
		pFnSendSearching = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.SendSearching" );

	UKFGFxWidget_BaseParty_execSendSearching_Parms SendSearching_Parms;

	this->ProcessEvent ( pFnSendSearching, &SendSearching_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.UpdateSearching
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::UpdateSearching ( )
{
	static UFunction* pFnUpdateSearching = NULL;

	if ( ! pFnUpdateSearching )
		pFnUpdateSearching = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.UpdateSearching" );

	UKFGFxWidget_BaseParty_execUpdateSearching_Parms UpdateSearching_Parms;

	this->ProcessEvent ( pFnUpdateSearching, &UpdateSearching_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.UpdatePerks
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::UpdatePerks ( )
{
	static UFunction* pFnUpdatePerks = NULL;

	if ( ! pFnUpdatePerks )
		pFnUpdatePerks = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.UpdatePerks" );

	UKFGFxWidget_BaseParty_execUpdatePerks_Parms UpdatePerks_Parms;

	this->ProcessEvent ( pFnUpdatePerks, &UpdatePerks_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.UpdateLock
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::UpdateLock ( )
{
	static UFunction* pFnUpdateLock = NULL;

	if ( ! pFnUpdateLock )
		pFnUpdateLock = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.UpdateLock" );

	UKFGFxWidget_BaseParty_execUpdateLock_Parms UpdateLock_Parms;

	this->ProcessEvent ( pFnUpdateLock, &UpdateLock_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.ReceiveMessage
// [0x00024002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::ReceiveMessage ( )
{
	static UFunction* pFnReceiveMessage = NULL;

	if ( ! pFnReceiveMessage )
		pFnReceiveMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.ReceiveMessage" );

	UKFGFxWidget_BaseParty_execReceiveMessage_Parms ReceiveMessage_Parms;

	this->ProcessEvent ( pFnReceiveMessage, &ReceiveMessage_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.SetReadyButtonVisibility
// [0x00024002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::SetReadyButtonVisibility ( )
{
	static UFunction* pFnSetReadyButtonVisibility = NULL;

	if ( ! pFnSetReadyButtonVisibility )
		pFnSetReadyButtonVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.SetReadyButtonVisibility" );

	UKFGFxWidget_BaseParty_execSetReadyButtonVisibility_Parms SetReadyButtonVisibility_Parms;

	this->ProcessEvent ( pFnSetReadyButtonVisibility, &SetReadyButtonVisibility_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.OpenPlayerList
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::OpenPlayerList ( )
{
	static UFunction* pFnOpenPlayerList = NULL;

	if ( ! pFnOpenPlayerList )
		pFnOpenPlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.OpenPlayerList" );

	UKFGFxWidget_BaseParty_execOpenPlayerList_Parms OpenPlayerList_Parms;

	this->ProcessEvent ( pFnOpenPlayerList, &OpenPlayerList_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.RefreshParty
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::RefreshParty ( )
{
	static UFunction* pFnRefreshParty = NULL;

	if ( ! pFnRefreshParty )
		pFnRefreshParty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.RefreshParty" );

	UKFGFxWidget_BaseParty_execRefreshParty_Parms RefreshParty_Parms;

	this->ProcessEvent ( pFnRefreshParty, &RefreshParty_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.UpdateVOIP
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::UpdateVOIP ( )
{
	static UFunction* pFnUpdateVOIP = NULL;

	if ( ! pFnUpdateVOIP )
		pFnUpdateVOIP = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.UpdateVOIP" );

	UKFGFxWidget_BaseParty_execUpdateVOIP_Parms UpdateVOIP_Parms;

	this->ProcessEvent ( pFnUpdateVOIP, &UpdateVOIP_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.KickPlayer
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::KickPlayer ( )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.KickPlayer" );

	UKFGFxWidget_BaseParty_execKickPlayer_Parms KickPlayer_Parms;

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.RemoveFriend
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::RemoveFriend ( )
{
	static UFunction* pFnRemoveFriend = NULL;

	if ( ! pFnRemoveFriend )
		pFnRemoveFriend = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.RemoveFriend" );

	UKFGFxWidget_BaseParty_execRemoveFriend_Parms RemoveFriend_Parms;

	this->ProcessEvent ( pFnRemoveFriend, &RemoveFriend_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.AddFriend
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::AddFriend ( )
{
	static UFunction* pFnAddFriend = NULL;

	if ( ! pFnAddFriend )
		pFnAddFriend = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.AddFriend" );

	UKFGFxWidget_BaseParty_execAddFriend_Parms AddFriend_Parms;

	this->ProcessEvent ( pFnAddFriend, &AddFriend_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.ViewProfile
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::ViewProfile ( )
{
	static UFunction* pFnViewProfile = NULL;

	if ( ! pFnViewProfile )
		pFnViewProfile = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.ViewProfile" );

	UKFGFxWidget_BaseParty_execViewProfile_Parms ViewProfile_Parms;

	this->ProcessEvent ( pFnViewProfile, &ViewProfile_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.ToggelMuteOnPlayer
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::ToggelMuteOnPlayer ( )
{
	static UFunction* pFnToggelMuteOnPlayer = NULL;

	if ( ! pFnToggelMuteOnPlayer )
		pFnToggelMuteOnPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.ToggelMuteOnPlayer" );

	UKFGFxWidget_BaseParty_execToggelMuteOnPlayer_Parms ToggelMuteOnPlayer_Parms;

	this->ProcessEvent ( pFnToggelMuteOnPlayer, &ToggelMuteOnPlayer_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.IsPlayerAFriend
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::IsPlayerAFriend ( )
{
	static UFunction* pFnIsPlayerAFriend = NULL;

	if ( ! pFnIsPlayerAFriend )
		pFnIsPlayerAFriend = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.IsPlayerAFriend" );

	UKFGFxWidget_BaseParty_execIsPlayerAFriend_Parms IsPlayerAFriend_Parms;

	this->ProcessEvent ( pFnIsPlayerAFriend, &IsPlayerAFriend_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.ProfileOptionClicked
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::ProfileOptionClicked ( )
{
	static UFunction* pFnProfileOptionClicked = NULL;

	if ( ! pFnProfileOptionClicked )
		pFnProfileOptionClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.ProfileOptionClicked" );

	UKFGFxWidget_BaseParty_execProfileOptionClicked_Parms ProfileOptionClicked_Parms;

	this->ProcessEvent ( pFnProfileOptionClicked, &ProfileOptionClicked_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.UpdateSoloSquadText
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::UpdateSoloSquadText ( )
{
	static UFunction* pFnUpdateSoloSquadText = NULL;

	if ( ! pFnUpdateSoloSquadText )
		pFnUpdateSoloSquadText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.UpdateSoloSquadText" );

	UKFGFxWidget_BaseParty_execUpdateSoloSquadText_Parms UpdateSoloSquadText_Parms;

	this->ProcessEvent ( pFnUpdateSoloSquadText, &UpdateSoloSquadText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.UpdateInLobby
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::UpdateInLobby ( )
{
	static UFunction* pFnUpdateInLobby = NULL;

	if ( ! pFnUpdateInLobby )
		pFnUpdateInLobby = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.UpdateInLobby" );

	UKFGFxWidget_BaseParty_execUpdateInLobby_Parms UpdateInLobby_Parms;

	this->ProcessEvent ( pFnUpdateInLobby, &UpdateInLobby_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.SoloGameMenuOpened
// [0x00020800] ( FUNC_Event )
// Parameters infos:

void UKFGFxWidget_BaseParty::eventSoloGameMenuOpened ( )
{
	static UFunction* pFnSoloGameMenuOpened = NULL;

	if ( ! pFnSoloGameMenuOpened )
		pFnSoloGameMenuOpened = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.SoloGameMenuOpened" );

	UKFGFxWidget_BaseParty_eventSoloGameMenuOpened_Parms SoloGameMenuOpened_Parms;

	this->ProcessEvent ( pFnSoloGameMenuOpened, &SoloGameMenuOpened_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.AddStringOptionToList
// [0x00420002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::AddStringOptionToList ( )
{
	static UFunction* pFnAddStringOptionToList = NULL;

	if ( ! pFnAddStringOptionToList )
		pFnAddStringOptionToList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.AddStringOptionToList" );

	UKFGFxWidget_BaseParty_execAddStringOptionToList_Parms AddStringOptionToList_Parms;

	this->ProcessEvent ( pFnAddStringOptionToList, &AddStringOptionToList_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.CreatePlayerOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::CreatePlayerOptions ( )
{
	static UFunction* pFnCreatePlayerOptions = NULL;

	if ( ! pFnCreatePlayerOptions )
		pFnCreatePlayerOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.CreatePlayerOptions" );

	UKFGFxWidget_BaseParty_execCreatePlayerOptions_Parms CreatePlayerOptions_Parms;

	this->ProcessEvent ( pFnCreatePlayerOptions, &CreatePlayerOptions_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.isUserYourFriend
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::isUserYourFriend ( )
{
	static UFunction* pFnisUserYourFriend = NULL;

	if ( ! pFnisUserYourFriend )
		pFnisUserYourFriend = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.isUserYourFriend" );

	UKFGFxWidget_BaseParty_execisUserYourFriend_Parms isUserYourFriend_Parms;

	this->ProcessEvent ( pFnisUserYourFriend, &isUserYourFriend_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.InitializeMemberSlot
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::InitializeMemberSlot ( )
{
	static UFunction* pFnInitializeMemberSlot = NULL;

	if ( ! pFnInitializeMemberSlot )
		pFnInitializeMemberSlot = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.InitializeMemberSlot" );

	UKFGFxWidget_BaseParty_execInitializeMemberSlot_Parms InitializeMemberSlot_Parms;

	this->ProcessEvent ( pFnInitializeMemberSlot, &InitializeMemberSlot_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.SetSearchingText
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::SetSearchingText ( )
{
	static UFunction* pFnSetSearchingText = NULL;

	if ( ! pFnSetSearchingText )
		pFnSetSearchingText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.SetSearchingText" );

	UKFGFxWidget_BaseParty_execSetSearchingText_Parms SetSearchingText_Parms;

	this->ProcessEvent ( pFnSetSearchingText, &SetSearchingText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.ShowDownLoadNotification
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::ShowDownLoadNotification ( )
{
	static UFunction* pFnShowDownLoadNotification = NULL;

	if ( ! pFnShowDownLoadNotification )
		pFnShowDownLoadNotification = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.ShowDownLoadNotification" );

	UKFGFxWidget_BaseParty_execShowDownLoadNotification_Parms ShowDownLoadNotification_Parms;

	this->ProcessEvent ( pFnShowDownLoadNotification, &ShowDownLoadNotification_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.UpdateReadyButtonVisibility
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_BaseParty::UpdateReadyButtonVisibility ( )
{
	static UFunction* pFnUpdateReadyButtonVisibility = NULL;

	if ( ! pFnUpdateReadyButtonVisibility )
		pFnUpdateReadyButtonVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.UpdateReadyButtonVisibility" );

	UKFGFxWidget_BaseParty_execUpdateReadyButtonVisibility_Parms UpdateReadyButtonVisibility_Parms;

	this->ProcessEvent ( pFnUpdateReadyButtonVisibility, &UpdateReadyButtonVisibility_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.InitNotificationUI
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::InitNotificationUI ( )
{
	static UFunction* pFnInitNotificationUI = NULL;

	if ( ! pFnInitNotificationUI )
		pFnInitNotificationUI = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.InitNotificationUI" );

	UKFGFxWidget_BaseParty_execInitNotificationUI_Parms InitNotificationUI_Parms;

	this->ProcessEvent ( pFnInitNotificationUI, &InitNotificationUI_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.LocalizeText" );

	UKFGFxWidget_BaseParty_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BaseParty.InitializeWidget
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BaseParty::InitializeWidget ( )
{
	static UFunction* pFnInitializeWidget = NULL;

	if ( ! pFnInitializeWidget )
		pFnInitializeWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BaseParty.InitializeWidget" );

	UKFGFxWidget_BaseParty_execInitializeWidget_Parms InitializeWidget_Parms;

	this->ProcessEvent ( pFnInitializeWidget, &InitializeWidget_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScoreBoard.UpdateWaveCount
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScoreBoard::UpdateWaveCount ( )
{
	static UFunction* pFnUpdateWaveCount = NULL;

	if ( ! pFnUpdateWaveCount )
		pFnUpdateWaveCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScoreBoard.UpdateWaveCount" );

	UKFGFxMoviePlayer_ScoreBoard_execUpdateWaveCount_Parms UpdateWaveCount_Parms;

	this->ProcessEvent ( pFnUpdateWaveCount, &UpdateWaveCount_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScoreBoard.ShowScoreboard
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScoreBoard::ShowScoreboard ( )
{
	static UFunction* pFnShowScoreboard = NULL;

	if ( ! pFnShowScoreboard )
		pFnShowScoreboard = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScoreBoard.ShowScoreboard" );

	UKFGFxMoviePlayer_ScoreBoard_execShowScoreboard_Parms ShowScoreboard_Parms;

	this->ProcessEvent ( pFnShowScoreboard, &ShowScoreboard_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScoreBoard.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScoreBoard::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScoreBoard.TickHud" );

	UKFGFxMoviePlayer_ScoreBoard_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScoreBoard.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_ScoreBoard::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScoreBoard.WidgetInitialized" );

	UKFGFxMoviePlayer_ScoreBoard_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScoreBoard.GetMovieInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScoreBoard::GetMovieInfo ( )
{
	static UFunction* pFnGetMovieInfo = NULL;

	if ( ! pFnGetMovieInfo )
		pFnGetMovieInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScoreBoard.GetMovieInfo" );

	UKFGFxMoviePlayer_ScoreBoard_execGetMovieInfo_Parms GetMovieInfo_Parms;

	this->ProcessEvent ( pFnGetMovieInfo, &GetMovieInfo_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScoreBoard.Init
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScoreBoard::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScoreBoard.Init" );

	UKFGFxMoviePlayer_ScoreBoard_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.RemoveArmorUI
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::RemoveArmorUI ( )
{
	static UFunction* pFnRemoveArmorUI = NULL;

	if ( ! pFnRemoveArmorUI )
		pFnRemoveArmorUI = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.RemoveArmorUI" );

	UKFGFxWidget_BossHealthBar_execRemoveArmorUI_Parms RemoveArmorUI_Parms;

	this->ProcessEvent ( pFnRemoveArmorUI, &RemoveArmorUI_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.UpdateArmorUI
// [0x00420002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::UpdateArmorUI ( )
{
	static UFunction* pFnUpdateArmorUI = NULL;

	if ( ! pFnUpdateArmorUI )
		pFnUpdateArmorUI = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.UpdateArmorUI" );

	UKFGFxWidget_BossHealthBar_execUpdateArmorUI_Parms UpdateArmorUI_Parms;

	this->ProcessEvent ( pFnUpdateArmorUI, &UpdateArmorUI_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.UpdateBossShield
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::UpdateBossShield ( )
{
	static UFunction* pFnUpdateBossShield = NULL;

	if ( ! pFnUpdateBossShield )
		pFnUpdateBossShield = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.UpdateBossShield" );

	UKFGFxWidget_BossHealthBar_execUpdateBossShield_Parms UpdateBossShield_Parms;

	this->ProcessEvent ( pFnUpdateBossShield, &UpdateBossShield_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.UpdateBossBattlePhase
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::UpdateBossBattlePhase ( )
{
	static UFunction* pFnUpdateBossBattlePhase = NULL;

	if ( ! pFnUpdateBossBattlePhase )
		pFnUpdateBossBattlePhase = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.UpdateBossBattlePhase" );

	UKFGFxWidget_BossHealthBar_execUpdateBossBattlePhase_Parms UpdateBossBattlePhase_Parms;

	this->ProcessEvent ( pFnUpdateBossBattlePhase, &UpdateBossBattlePhase_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.UpdateBossHealth
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::UpdateBossHealth ( )
{
	static UFunction* pFnUpdateBossHealth = NULL;

	if ( ! pFnUpdateBossHealth )
		pFnUpdateBossHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.UpdateBossHealth" );

	UKFGFxWidget_BossHealthBar_execUpdateBossHealth_Parms UpdateBossHealth_Parms;

	this->ProcessEvent ( pFnUpdateBossHealth, &UpdateBossHealth_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.SetBossName
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::SetBossName ( )
{
	static UFunction* pFnSetBossName = NULL;

	if ( ! pFnSetBossName )
		pFnSetBossName = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.SetBossName" );

	UKFGFxWidget_BossHealthBar_execSetBossName_Parms SetBossName_Parms;

	this->ProcessEvent ( pFnSetBossName, &SetBossName_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.OnNamePlateHidden
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::OnNamePlateHidden ( )
{
	static UFunction* pFnOnNamePlateHidden = NULL;

	if ( ! pFnOnNamePlateHidden )
		pFnOnNamePlateHidden = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.OnNamePlateHidden" );

	UKFGFxWidget_BossHealthBar_execOnNamePlateHidden_Parms OnNamePlateHidden_Parms;

	this->ProcessEvent ( pFnOnNamePlateHidden, &OnNamePlateHidden_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.SetBossPawn
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::SetBossPawn ( )
{
	static UFunction* pFnSetBossPawn = NULL;

	if ( ! pFnSetBossPawn )
		pFnSetBossPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.SetBossPawn" );

	UKFGFxWidget_BossHealthBar_execSetBossPawn_Parms SetBossPawn_Parms;

	this->ProcessEvent ( pFnSetBossPawn, &SetBossPawn_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.TickHud" );

	UKFGFxWidget_BossHealthBar_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxWidget_BossHealthBar.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_BossHealthBar::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_BossHealthBar.InitializeHUD" );

	UKFGFxWidget_BossHealthBar_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFInterface_Usable.GetInteractionIndex
// [0x00020000] 
// Parameters infos:

void UKFInterface_Usable::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_Usable.GetInteractionIndex" );

	UKFInterface_Usable_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFInterface_Usable.GetIsUsable
// [0x00020100] 
// Parameters infos:

void UKFInterface_Usable::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_Usable.GetIsUsable" );

	UKFInterface_Usable_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Game.GetPos
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Game::GetPos ( )
{
	static UFunction* pFnGetPos = NULL;

	if ( ! pFnGetPos )
		pFnGetPos = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Game.GetPos" );

	UKFLocalMessage_Game_execGetPos_Parms GetPos_Parms;

	this->ProcessEvent ( pFnGetPos, &GetPos_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Game.GetKilledByZedMessage
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Game::GetKilledByZedMessage ( )
{
	static UFunction* pFnGetKilledByZedMessage = NULL;

	if ( ! pFnGetKilledByZedMessage )
		pFnGetKilledByZedMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Game.GetKilledByZedMessage" );

	UKFLocalMessage_Game_execGetKilledByZedMessage_Parms GetKilledByZedMessage_Parms;

	this->ProcessEvent ( pFnGetKilledByZedMessage, &GetKilledByZedMessage_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Game.GetString
// [0x00026002] 
// Parameters infos:

void UKFLocalMessage_Game::GetString ( )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Game.GetString" );

	UKFLocalMessage_Game_execGetString_Parms GetString_Parms;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Game.GetHexColor
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Game::GetHexColor ( )
{
	static UFunction* pFnGetHexColor = NULL;

	if ( ! pFnGetHexColor )
		pFnGetHexColor = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Game.GetHexColor" );

	UKFLocalMessage_Game_execGetHexColor_Parms GetHexColor_Parms;

	this->ProcessEvent ( pFnGetHexColor, &GetHexColor_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayPlayerDiedStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayPlayerDiedStinger ( )
{
	static UFunction* pFnPlayPlayerDiedStinger = NULL;

	if ( ! pFnPlayPlayerDiedStinger )
		pFnPlayPlayerDiedStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayPlayerDiedStinger" );

	UKFMusicStingerHelper_execPlayPlayerDiedStinger_Parms PlayPlayerDiedStinger_Parms;

	this->ProcessEvent ( pFnPlayPlayerDiedStinger, &PlayPlayerDiedStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayTierUnlockedStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayTierUnlockedStinger ( )
{
	static UFunction* pFnPlayTierUnlockedStinger = NULL;

	if ( ! pFnPlayTierUnlockedStinger )
		pFnPlayTierUnlockedStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayTierUnlockedStinger" );

	UKFMusicStingerHelper_execPlayTierUnlockedStinger_Parms PlayTierUnlockedStinger_Parms;

	this->ProcessEvent ( pFnPlayTierUnlockedStinger, &PlayTierUnlockedStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayLevelUpStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayLevelUpStinger ( )
{
	static UFunction* pFnPlayLevelUpStinger = NULL;

	if ( ! pFnPlayLevelUpStinger )
		pFnPlayLevelUpStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayLevelUpStinger" );

	UKFMusicStingerHelper_execPlayLevelUpStinger_Parms PlayLevelUpStinger_Parms;

	this->ProcessEvent ( pFnPlayLevelUpStinger, &PlayLevelUpStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayObjectiveLostStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayObjectiveLostStinger ( )
{
	static UFunction* pFnPlayObjectiveLostStinger = NULL;

	if ( ! pFnPlayObjectiveLostStinger )
		pFnPlayObjectiveLostStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayObjectiveLostStinger" );

	UKFMusicStingerHelper_execPlayObjectiveLostStinger_Parms PlayObjectiveLostStinger_Parms;

	this->ProcessEvent ( pFnPlayObjectiveLostStinger, &PlayObjectiveLostStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayNewObjectiveStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayNewObjectiveStinger ( )
{
	static UFunction* pFnPlayNewObjectiveStinger = NULL;

	if ( ! pFnPlayNewObjectiveStinger )
		pFnPlayNewObjectiveStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayNewObjectiveStinger" );

	UKFMusicStingerHelper_execPlayNewObjectiveStinger_Parms PlayNewObjectiveStinger_Parms;

	this->ProcessEvent ( pFnPlayNewObjectiveStinger, &PlayNewObjectiveStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayObjectiveWonStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayObjectiveWonStinger ( )
{
	static UFunction* pFnPlayObjectiveWonStinger = NULL;

	if ( ! pFnPlayObjectiveWonStinger )
		pFnPlayObjectiveWonStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayObjectiveWonStinger" );

	UKFMusicStingerHelper_execPlayObjectiveWonStinger_Parms PlayObjectiveWonStinger_Parms;

	this->ProcessEvent ( pFnPlayObjectiveWonStinger, &PlayObjectiveWonStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlaySpecialEventObjectiveStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlaySpecialEventObjectiveStinger ( )
{
	static UFunction* pFnPlaySpecialEventObjectiveStinger = NULL;

	if ( ! pFnPlaySpecialEventObjectiveStinger )
		pFnPlaySpecialEventObjectiveStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlaySpecialEventObjectiveStinger" );

	UKFMusicStingerHelper_execPlaySpecialEventObjectiveStinger_Parms PlaySpecialEventObjectiveStinger_Parms;

	this->ProcessEvent ( pFnPlaySpecialEventObjectiveStinger, &PlaySpecialEventObjectiveStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayDailyCompleteStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayDailyCompleteStinger ( )
{
	static UFunction* pFnPlayDailyCompleteStinger = NULL;

	if ( ! pFnPlayDailyCompleteStinger )
		pFnPlayDailyCompleteStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayDailyCompleteStinger" );

	UKFMusicStingerHelper_execPlayDailyCompleteStinger_Parms PlayDailyCompleteStinger_Parms;

	this->ProcessEvent ( pFnPlayDailyCompleteStinger, &PlayDailyCompleteStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayWaveCompletedStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayWaveCompletedStinger ( )
{
	static UFunction* pFnPlayWaveCompletedStinger = NULL;

	if ( ! pFnPlayWaveCompletedStinger )
		pFnPlayWaveCompletedStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayWaveCompletedStinger" );

	UKFMusicStingerHelper_execPlayWaveCompletedStinger_Parms PlayWaveCompletedStinger_Parms;

	this->ProcessEvent ( pFnPlayWaveCompletedStinger, &PlayWaveCompletedStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayWaveStartStinger
// [0x00026102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayWaveStartStinger ( )
{
	static UFunction* pFnPlayWaveStartStinger = NULL;

	if ( ! pFnPlayWaveStartStinger )
		pFnPlayWaveStartStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayWaveStartStinger" );

	UKFMusicStingerHelper_execPlayWaveStartStinger_Parms PlayWaveStartStinger_Parms;

	this->ProcessEvent ( pFnPlayWaveStartStinger, &PlayWaveStartStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayMatchLostStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayMatchLostStinger ( )
{
	static UFunction* pFnPlayMatchLostStinger = NULL;

	if ( ! pFnPlayMatchLostStinger )
		pFnPlayMatchLostStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayMatchLostStinger" );

	UKFMusicStingerHelper_execPlayMatchLostStinger_Parms PlayMatchLostStinger_Parms;

	this->ProcessEvent ( pFnPlayMatchLostStinger, &PlayMatchLostStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayMatchWonStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayMatchWonStinger ( )
{
	static UFunction* pFnPlayMatchWonStinger = NULL;

	if ( ! pFnPlayMatchWonStinger )
		pFnPlayMatchWonStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayMatchWonStinger" );

	UKFMusicStingerHelper_execPlayMatchWonStinger_Parms PlayMatchWonStinger_Parms;

	this->ProcessEvent ( pFnPlayMatchWonStinger, &PlayMatchWonStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayRoundLostStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayRoundLostStinger ( )
{
	static UFunction* pFnPlayRoundLostStinger = NULL;

	if ( ! pFnPlayRoundLostStinger )
		pFnPlayRoundLostStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayRoundLostStinger" );

	UKFMusicStingerHelper_execPlayRoundLostStinger_Parms PlayRoundLostStinger_Parms;

	this->ProcessEvent ( pFnPlayRoundLostStinger, &PlayRoundLostStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayRoundWonStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayRoundWonStinger ( )
{
	static UFunction* pFnPlayRoundWonStinger = NULL;

	if ( ! pFnPlayRoundWonStinger )
		pFnPlayRoundWonStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayRoundWonStinger" );

	UKFMusicStingerHelper_execPlayRoundWonStinger_Parms PlayRoundWonStinger_Parms;

	this->ProcessEvent ( pFnPlayRoundWonStinger, &PlayRoundWonStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayZedPlayerSuicideStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayZedPlayerSuicideStinger ( )
{
	static UFunction* pFnPlayZedPlayerSuicideStinger = NULL;

	if ( ! pFnPlayZedPlayerSuicideStinger )
		pFnPlayZedPlayerSuicideStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayZedPlayerSuicideStinger" );

	UKFMusicStingerHelper_execPlayZedPlayerSuicideStinger_Parms PlayZedPlayerSuicideStinger_Parms;

	this->ProcessEvent ( pFnPlayZedPlayerSuicideStinger, &PlayZedPlayerSuicideStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayZedPlayerKilledStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayZedPlayerKilledStinger ( )
{
	static UFunction* pFnPlayZedPlayerKilledStinger = NULL;

	if ( ! pFnPlayZedPlayerKilledStinger )
		pFnPlayZedPlayerKilledStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayZedPlayerKilledStinger" );

	UKFMusicStingerHelper_execPlayZedPlayerKilledStinger_Parms PlayZedPlayerKilledStinger_Parms;

	this->ProcessEvent ( pFnPlayZedPlayerKilledStinger, &PlayZedPlayerKilledStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayZedKillHumanStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayZedKillHumanStinger ( )
{
	static UFunction* pFnPlayZedKillHumanStinger = NULL;

	if ( ! pFnPlayZedKillHumanStinger )
		pFnPlayZedKillHumanStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayZedKillHumanStinger" );

	UKFMusicStingerHelper_execPlayZedKillHumanStinger_Parms PlayZedKillHumanStinger_Parms;

	this->ProcessEvent ( pFnPlayZedKillHumanStinger, &PlayZedKillHumanStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayTeammateDeathStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayTeammateDeathStinger ( )
{
	static UFunction* pFnPlayTeammateDeathStinger = NULL;

	if ( ! pFnPlayTeammateDeathStinger )
		pFnPlayTeammateDeathStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayTeammateDeathStinger" );

	UKFMusicStingerHelper_execPlayTeammateDeathStinger_Parms PlayTeammateDeathStinger_Parms;

	this->ProcessEvent ( pFnPlayTeammateDeathStinger, &PlayTeammateDeathStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayPerkPrestigeStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayPerkPrestigeStinger ( )
{
	static UFunction* pFnPlayPerkPrestigeStinger = NULL;

	if ( ! pFnPlayPerkPrestigeStinger )
		pFnPlayPerkPrestigeStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayPerkPrestigeStinger" );

	UKFMusicStingerHelper_execPlayPerkPrestigeStinger_Parms PlayPerkPrestigeStinger_Parms;

	this->ProcessEvent ( pFnPlayPerkPrestigeStinger, &PlayPerkPrestigeStinger_Parms, NULL );
};

// Function KFGame.KFMusicStingerHelper.PlayWeaponUpgradeStinger
// [0x00022102] 
// Parameters infos:

void UKFMusicStingerHelper::PlayWeaponUpgradeStinger ( )
{
	static UFunction* pFnPlayWeaponUpgradeStinger = NULL;

	if ( ! pFnPlayWeaponUpgradeStinger )
		pFnPlayWeaponUpgradeStinger = UObject::FindObject< UFunction > ( "Function KFGame.KFMusicStingerHelper.PlayWeaponUpgradeStinger" );

	UKFMusicStingerHelper_execPlayWeaponUpgradeStinger_Parms PlayWeaponUpgradeStinger_Parms;

	this->ProcessEvent ( pFnPlayWeaponUpgradeStinger, &PlayWeaponUpgradeStinger_Parms, NULL );
};

// Function KFGame.KFTeamInfo_Human.Reset
// [0x00020002] 
// Parameters infos:

void AKFTeamInfo_Human::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFTeamInfo_Human.Reset" );

	AKFTeamInfo_Human_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFTeamInfo_Human.AddRoundScore
// [0x00024002] 
// Parameters infos:

void AKFTeamInfo_Human::AddRoundScore ( )
{
	static UFunction* pFnAddRoundScore = NULL;

	if ( ! pFnAddRoundScore )
		pFnAddRoundScore = UObject::FindObject< UFunction > ( "Function KFGame.KFTeamInfo_Human.AddRoundScore" );

	AKFTeamInfo_Human_execAddRoundScore_Parms AddRoundScore_Parms;

	this->ProcessEvent ( pFnAddRoundScore, &AddRoundScore_Parms, NULL );
};

// Function KFGame.KFTeamInfo_Human.AddScore
// [0x00024002] 
// Parameters infos:

void AKFTeamInfo_Human::AddScore ( )
{
	static UFunction* pFnAddScore = NULL;

	if ( ! pFnAddScore )
		pFnAddScore = UObject::FindObject< UFunction > ( "Function KFGame.KFTeamInfo_Human.AddScore" );

	AKFTeamInfo_Human_execAddScore_Parms AddScore_Parms;

	this->ProcessEvent ( pFnAddScore, &AddScore_Parms, NULL );
};

// Function KFGame.KFTeamInfo_Human.GetHumanReadableName
// [0x00020102] 
// Parameters infos:

void AKFTeamInfo_Human::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = UObject::FindObject< UFunction > ( "Function KFGame.KFTeamInfo_Human.GetHumanReadableName" );

	AKFTeamInfo_Human_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );
};

// Function KFGame.KFTeamInfo_Human.RemoveFromTeam
// [0x00020002] 
// Parameters infos:

void AKFTeamInfo_Human::RemoveFromTeam ( )
{
	static UFunction* pFnRemoveFromTeam = NULL;

	if ( ! pFnRemoveFromTeam )
		pFnRemoveFromTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFTeamInfo_Human.RemoveFromTeam" );

	AKFTeamInfo_Human_execRemoveFromTeam_Parms RemoveFromTeam_Parms;

	this->ProcessEvent ( pFnRemoveFromTeam, &RemoveFromTeam_Parms, NULL );
};

// Function KFGame.KFTeamInfo_Human.AddToTeam
// [0x00020002] 
// Parameters infos:

void AKFTeamInfo_Human::AddToTeam ( )
{
	static UFunction* pFnAddToTeam = NULL;

	if ( ! pFnAddToTeam )
		pFnAddToTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFTeamInfo_Human.AddToTeam" );

	AKFTeamInfo_Human_execAddToTeam_Parms AddToTeam_Parms;

	this->ProcessEvent ( pFnAddToTeam, &AddToTeam_Parms, NULL );
};

// Function KFGame.KFTeamInfo_Human.Timer_WaitingForGRI
// [0x00020102] 
// Parameters infos:

void AKFTeamInfo_Human::Timer_WaitingForGRI ( )
{
	static UFunction* pFnTimer_WaitingForGRI = NULL;

	if ( ! pFnTimer_WaitingForGRI )
		pFnTimer_WaitingForGRI = UObject::FindObject< UFunction > ( "Function KFGame.KFTeamInfo_Human.Timer_WaitingForGRI" );

	AKFTeamInfo_Human_execTimer_WaitingForGRI_Parms Timer_WaitingForGRI_Parms;

	this->ProcessEvent ( pFnTimer_WaitingForGRI, &Timer_WaitingForGRI_Parms, NULL );
};

// Function KFGame.KFTeamInfo_Human.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFTeamInfo_Human::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFTeamInfo_Human.PostBeginPlay" );

	AKFTeamInfo_Human_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Priority.GetMessageLifeTime
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Priority::GetMessageLifeTime ( )
{
	static UFunction* pFnGetMessageLifeTime = NULL;

	if ( ! pFnGetMessageLifeTime )
		pFnGetMessageLifeTime = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Priority.GetMessageLifeTime" );

	UKFLocalMessage_Priority_execGetMessageLifeTime_Parms GetMessageLifeTime_Parms;

	this->ProcessEvent ( pFnGetMessageLifeTime, &GetMessageLifeTime_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Priority.OpenPerkMenu
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Priority::OpenPerkMenu ( )
{
	static UFunction* pFnOpenPerkMenu = NULL;

	if ( ! pFnOpenPerkMenu )
		pFnOpenPerkMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Priority.OpenPerkMenu" );

	UKFLocalMessage_Priority_execOpenPerkMenu_Parms OpenPerkMenu_Parms;

	this->ProcessEvent ( pFnOpenPerkMenu, &OpenPerkMenu_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Priority.CloseMenus
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Priority::CloseMenus ( )
{
	static UFunction* pFnCloseMenus = NULL;

	if ( ! pFnCloseMenus )
		pFnCloseMenus = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Priority.CloseMenus" );

	UKFLocalMessage_Priority_execCloseMenus_Parms CloseMenus_Parms;

	this->ProcessEvent ( pFnCloseMenus, &CloseMenus_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Priority.ShouldShowPriortyMessage
// [0x00022002] 
// Parameters infos:

void UKFLocalMessage_Priority::ShouldShowPriortyMessage ( )
{
	static UFunction* pFnShouldShowPriortyMessage = NULL;

	if ( ! pFnShouldShowPriortyMessage )
		pFnShouldShowPriortyMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Priority.ShouldShowPriortyMessage" );

	UKFLocalMessage_Priority_execShouldShowPriortyMessage_Parms ShouldShowPriortyMessage_Parms;

	this->ProcessEvent ( pFnShouldShowPriortyMessage, &ShouldShowPriortyMessage_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Priority.GetMessageString
// [0x00426002] 
// Parameters infos:

void UKFLocalMessage_Priority::GetMessageString ( )
{
	static UFunction* pFnGetMessageString = NULL;

	if ( ! pFnGetMessageString )
		pFnGetMessageString = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Priority.GetMessageString" );

	UKFLocalMessage_Priority_execGetMessageString_Parms GetMessageString_Parms;

	this->ProcessEvent ( pFnGetMessageString, &GetMessageString_Parms, NULL );
};

// Function KFGame.KFLocalMessage_Priority.ClientReceive
// [0x00026002] 
// Parameters infos:

void UKFLocalMessage_Priority::ClientReceive ( )
{
	static UFunction* pFnClientReceive = NULL;

	if ( ! pFnClientReceive )
		pFnClientReceive = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_Priority.ClientReceive" );

	UKFLocalMessage_Priority_execClientReceive_Parms ClientReceive_Parms;

	this->ProcessEvent ( pFnClientReceive, &ClientReceive_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.Reset
// [0x00020100] 
// Parameters infos:

void AKFPlayerCamera::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.Reset" );

	AKFPlayerCamera_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.FindBestCameraType
// [0x00080002] 
// Parameters infos:

void AKFPlayerCamera::FindBestCameraType ( )
{
	static UFunction* pFnFindBestCameraType = NULL;

	if ( ! pFnFindBestCameraType )
		pFnFindBestCameraType = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.FindBestCameraType" );

	AKFPlayerCamera_execFindBestCameraType_Parms FindBestCameraType_Parms;

	this->ProcessEvent ( pFnFindBestCameraType, &FindBestCameraType_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.CalcRadialShakeScale
// [0x00822002] 
// Parameters infos:

void AKFPlayerCamera::CalcRadialShakeScale ( )
{
	static UFunction* pFnCalcRadialShakeScale = NULL;

	if ( ! pFnCalcRadialShakeScale )
		pFnCalcRadialShakeScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.CalcRadialShakeScale" );

	AKFPlayerCamera_execCalcRadialShakeScale_Parms CalcRadialShakeScale_Parms;

	this->ProcessEvent ( pFnCalcRadialShakeScale, &CalcRadialShakeScale_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.SetFOV
// [0x00020002] 
// Parameters infos:

void AKFPlayerCamera::SetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.SetFOV" );

	AKFPlayerCamera_execSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.GetOptionsFOVScale
// [0x00020002] 
// Parameters infos:

void AKFPlayerCamera::GetOptionsFOVScale ( )
{
	static UFunction* pFnGetOptionsFOVScale = NULL;

	if ( ! pFnGetOptionsFOVScale )
		pFnGetOptionsFOVScale = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.GetOptionsFOVScale" );

	AKFPlayerCamera_execGetOptionsFOVScale_Parms GetOptionsFOVScale_Parms;

	this->ProcessEvent ( pFnGetOptionsFOVScale, &GetOptionsFOVScale_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.TransitionFOV
// [0x00020002] 
// Parameters infos:

void AKFPlayerCamera::TransitionFOV ( )
{
	static UFunction* pFnTransitionFOV = NULL;

	if ( ! pFnTransitionFOV )
		pFnTransitionFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.TransitionFOV" );

	AKFPlayerCamera_execTransitionFOV_Parms TransitionFOV_Parms;

	this->ProcessEvent ( pFnTransitionFOV, &TransitionFOV_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.UpdateCameraLensEffects
// [0x00420102] 
// Parameters infos:

void AKFPlayerCamera::UpdateCameraLensEffects ( )
{
	static UFunction* pFnUpdateCameraLensEffects = NULL;

	if ( ! pFnUpdateCameraLensEffects )
		pFnUpdateCameraLensEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.UpdateCameraLensEffects" );

	AKFPlayerCamera_execUpdateCameraLensEffects_Parms UpdateCameraLensEffects_Parms;

	this->ProcessEvent ( pFnUpdateCameraLensEffects, &UpdateCameraLensEffects_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.GetActualFOV
// [0x00820002] 
// Parameters infos:

void AKFPlayerCamera::GetActualFOV ( )
{
	static UFunction* pFnGetActualFOV = NULL;

	if ( ! pFnGetActualFOV )
		pFnGetActualFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.GetActualFOV" );

	AKFPlayerCamera_execGetActualFOV_Parms GetActualFOV_Parms;

	this->ProcessEvent ( pFnGetActualFOV, &GetActualFOV_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.UpdateViewTarget
// [0x00420102] 
// Parameters infos:

void AKFPlayerCamera::UpdateViewTarget ( )
{
	static UFunction* pFnUpdateViewTarget = NULL;

	if ( ! pFnUpdateViewTarget )
		pFnUpdateViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.UpdateViewTarget" );

	AKFPlayerCamera_execUpdateViewTarget_Parms UpdateViewTarget_Parms;

	this->ProcessEvent ( pFnUpdateViewTarget, &UpdateViewTarget_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.DoUpdateCamera
// [0x00020102] 
// Parameters infos:

void AKFPlayerCamera::DoUpdateCamera ( )
{
	static UFunction* pFnDoUpdateCamera = NULL;

	if ( ! pFnDoUpdateCamera )
		pFnDoUpdateCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.DoUpdateCamera" );

	AKFPlayerCamera_execDoUpdateCamera_Parms DoUpdateCamera_Parms;

	this->ProcessEvent ( pFnDoUpdateCamera, &DoUpdateCamera_Parms, NULL );
};

// Function KFGame.KFPlayerCamera.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AKFPlayerCamera::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerCamera.PostBeginPlay" );

	AKFPlayerCamera_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.Callback_SkillSelectionOpened
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::Callback_SkillSelectionOpened ( )
{
	static UFunction* pFnCallback_SkillSelectionOpened = NULL;

	if ( ! pFnCallback_SkillSelectionOpened )
		pFnCallback_SkillSelectionOpened = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.Callback_SkillSelectionOpened" );

	UKFGFxMenu_Perks_execCallback_SkillSelectionOpened_Parms Callback_SkillSelectionOpened_Parms;

	this->ProcessEvent ( pFnCallback_SkillSelectionOpened, &Callback_SkillSelectionOpened_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.Callback_SkillSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::Callback_SkillSelected ( )
{
	static UFunction* pFnCallback_SkillSelected = NULL;

	if ( ! pFnCallback_SkillSelected )
		pFnCallback_SkillSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.Callback_SkillSelected" );

	UKFGFxMenu_Perks_execCallback_SkillSelected_Parms Callback_SkillSelected_Parms;

	this->ProcessEvent ( pFnCallback_SkillSelected, &Callback_SkillSelected_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.Callback_PerkSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::Callback_PerkSelected ( )
{
	static UFunction* pFnCallback_PerkSelected = NULL;

	if ( ! pFnCallback_PerkSelected )
		pFnCallback_PerkSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.Callback_PerkSelected" );

	UKFGFxMenu_Perks_execCallback_PerkSelected_Parms Callback_PerkSelected_Parms;

	this->ProcessEvent ( pFnCallback_PerkSelected, &Callback_PerkSelected_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.Callback_ReadyClicked
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::Callback_ReadyClicked ( )
{
	static UFunction* pFnCallback_ReadyClicked = NULL;

	if ( ! pFnCallback_ReadyClicked )
		pFnCallback_ReadyClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.Callback_ReadyClicked" );

	UKFGFxMenu_Perks_execCallback_ReadyClicked_Parms Callback_ReadyClicked_Parms;

	this->ProcessEvent ( pFnCallback_ReadyClicked, &Callback_ReadyClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.Callback_ConfirmPerkReset
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::Callback_ConfirmPerkReset ( )
{
	static UFunction* pFnCallback_ConfirmPerkReset = NULL;

	if ( ! pFnCallback_ConfirmPerkReset )
		pFnCallback_ConfirmPerkReset = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.Callback_ConfirmPerkReset" );

	UKFGFxMenu_Perks_execCallback_ConfirmPerkReset_Parms Callback_ConfirmPerkReset_Parms;

	this->ProcessEvent ( pFnCallback_ConfirmPerkReset, &Callback_ConfirmPerkReset_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.ConfirmPrestige
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::ConfirmPrestige ( )
{
	static UFunction* pFnConfirmPrestige = NULL;

	if ( ! pFnConfirmPrestige )
		pFnConfirmPrestige = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.ConfirmPrestige" );

	UKFGFxMenu_Perks_execConfirmPrestige_Parms ConfirmPrestige_Parms;

	this->ProcessEvent ( pFnConfirmPrestige, &ConfirmPrestige_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.SavePerkData
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::SavePerkData ( )
{
	static UFunction* pFnSavePerkData = NULL;

	if ( ! pFnSavePerkData )
		pFnSavePerkData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.SavePerkData" );

	UKFGFxMenu_Perks_execSavePerkData_Parms SavePerkData_Parms;

	this->ProcessEvent ( pFnSavePerkData, &SavePerkData_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.UpdateSkillsHolder
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::UpdateSkillsHolder ( )
{
	static UFunction* pFnUpdateSkillsHolder = NULL;

	if ( ! pFnUpdateSkillsHolder )
		pFnUpdateSkillsHolder = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.UpdateSkillsHolder" );

	UKFGFxMenu_Perks_execUpdateSkillsHolder_Parms UpdateSkillsHolder_Parms;

	this->ProcessEvent ( pFnUpdateSkillsHolder, &UpdateSkillsHolder_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.UpdateSkillsUI
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::UpdateSkillsUI ( )
{
	static UFunction* pFnUpdateSkillsUI = NULL;

	if ( ! pFnUpdateSkillsUI )
		pFnUpdateSkillsUI = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.UpdateSkillsUI" );

	UKFGFxMenu_Perks_execUpdateSkillsUI_Parms UpdateSkillsUI_Parms;

	this->ProcessEvent ( pFnUpdateSkillsUI, &UpdateSkillsUI_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.UpdateContainers
// [0x00024002] 
// Parameters infos:

void UKFGFxMenu_Perks::UpdateContainers ( )
{
	static UFunction* pFnUpdateContainers = NULL;

	if ( ! pFnUpdateContainers )
		pFnUpdateContainers = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.UpdateContainers" );

	UKFGFxMenu_Perks_execUpdateContainers_Parms UpdateContainers_Parms;

	this->ProcessEvent ( pFnUpdateContainers, &UpdateContainers_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.UpdateLock
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::UpdateLock ( )
{
	static UFunction* pFnUpdateLock = NULL;

	if ( ! pFnUpdateLock )
		pFnUpdateLock = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.UpdateLock" );

	UKFGFxMenu_Perks_execUpdateLock_Parms UpdateLock_Parms;

	this->ProcessEvent ( pFnUpdateLock, &UpdateLock_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.OneSecondLoop" );

	UKFGFxMenu_Perks_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.PerkChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::PerkChanged ( )
{
	static UFunction* pFnPerkChanged = NULL;

	if ( ! pFnPerkChanged )
		pFnPerkChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.PerkChanged" );

	UKFGFxMenu_Perks_execPerkChanged_Parms PerkChanged_Parms;

	this->ProcessEvent ( pFnPerkChanged, &PerkChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.IsMatchStarted
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::IsMatchStarted ( )
{
	static UFunction* pFnIsMatchStarted = NULL;

	if ( ! pFnIsMatchStarted )
		pFnIsMatchStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.IsMatchStarted" );

	UKFGFxMenu_Perks_execIsMatchStarted_Parms IsMatchStarted_Parms;

	this->ProcessEvent ( pFnIsMatchStarted, &IsMatchStarted_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.OnRoundOver
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::OnRoundOver ( )
{
	static UFunction* pFnOnRoundOver = NULL;

	if ( ! pFnOnRoundOver )
		pFnOnRoundOver = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.OnRoundOver" );

	UKFGFxMenu_Perks_execOnRoundOver_Parms OnRoundOver_Parms;

	this->ProcessEvent ( pFnOnRoundOver, &OnRoundOver_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.OnTraderTimeStart
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_Perks::eventOnTraderTimeStart ( )
{
	static UFunction* pFnOnTraderTimeStart = NULL;

	if ( ! pFnOnTraderTimeStart )
		pFnOnTraderTimeStart = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.OnTraderTimeStart" );

	UKFGFxMenu_Perks_eventOnTraderTimeStart_Parms OnTraderTimeStart_Parms;

	this->ProcessEvent ( pFnOnTraderTimeStart, &OnTraderTimeStart_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_Perks::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.OnClose" );

	UKFGFxMenu_Perks_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.CheckTiersForPopup
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::CheckTiersForPopup ( )
{
	static UFunction* pFnCheckTiersForPopup = NULL;

	if ( ! pFnCheckTiersForPopup )
		pFnCheckTiersForPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.CheckTiersForPopup" );

	UKFGFxMenu_Perks_execCheckTiersForPopup_Parms CheckTiersForPopup_Parms;

	this->ProcessEvent ( pFnCheckTiersForPopup, &CheckTiersForPopup_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.OnOpen" );

	UKFGFxMenu_Perks_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_Perks::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.WidgetInitialized" );

	UKFGFxMenu_Perks_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Perks.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Perks::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Perks.InitializeMenu" );

	UKFGFxMenu_Perks_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PostRoundMenu.Callback_WinnerAnimationComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PostRoundMenu::Callback_WinnerAnimationComplete ( )
{
	static UFunction* pFnCallback_WinnerAnimationComplete = NULL;

	if ( ! pFnCallback_WinnerAnimationComplete )
		pFnCallback_WinnerAnimationComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PostRoundMenu.Callback_WinnerAnimationComplete" );

	UKFGFxMoviePlayer_PostRoundMenu_execCallback_WinnerAnimationComplete_Parms Callback_WinnerAnimationComplete_Parms;

	this->ProcessEvent ( pFnCallback_WinnerAnimationComplete, &Callback_WinnerAnimationComplete_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PostRoundMenu.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_PostRoundMenu::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PostRoundMenu.WidgetInitialized" );

	UKFGFxMoviePlayer_PostRoundMenu_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PostRoundMenu.Init
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_PostRoundMenu::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PostRoundMenu.Init" );

	UKFGFxMoviePlayer_PostRoundMenu_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectShowMatchOutcome
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectShowMatchOutcome ( )
{
	static UFunction* pFnPlayEffectShowMatchOutcome = NULL;

	if ( ! pFnPlayEffectShowMatchOutcome )
		pFnPlayEffectShowMatchOutcome = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectShowMatchOutcome" );

	UKFLEDEffectsManager_execPlayEffectShowMatchOutcome_Parms PlayEffectShowMatchOutcome_Parms;

	this->ProcessEvent ( pFnPlayEffectShowMatchOutcome, &PlayEffectShowMatchOutcome_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectSetReady
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectSetReady ( )
{
	static UFunction* pFnPlayEffectSetReady = NULL;

	if ( ! pFnPlayEffectSetReady )
		pFnPlayEffectSetReady = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectSetReady" );

	UKFLEDEffectsManager_execPlayEffectSetReady_Parms PlayEffectSetReady_Parms;

	this->ProcessEvent ( pFnPlayEffectSetReady, &PlayEffectSetReady_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEmoteEffect
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEmoteEffect ( )
{
	static UFunction* pFnPlayEmoteEffect = NULL;

	if ( ! pFnPlayEmoteEffect )
		pFnPlayEmoteEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEmoteEffect" );

	UKFLEDEffectsManager_execPlayEmoteEffect_Parms PlayEmoteEffect_Parms;

	this->ProcessEvent ( pFnPlayEmoteEffect, &PlayEmoteEffect_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectRecievedDosh
// [0x00020100] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectRecievedDosh ( )
{
	static UFunction* pFnPlayEffectRecievedDosh = NULL;

	if ( ! pFnPlayEffectRecievedDosh )
		pFnPlayEffectRecievedDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectRecievedDosh" );

	UKFLEDEffectsManager_execPlayEffectRecievedDosh_Parms PlayEffectRecievedDosh_Parms;

	this->ProcessEvent ( pFnPlayEffectRecievedDosh, &PlayEffectRecievedDosh_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectWaveIncoming
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectWaveIncoming ( )
{
	static UFunction* pFnPlayEffectWaveIncoming = NULL;

	if ( ! pFnPlayEffectWaveIncoming )
		pFnPlayEffectWaveIncoming = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectWaveIncoming" );

	UKFLEDEffectsManager_execPlayEffectWaveIncoming_Parms PlayEffectWaveIncoming_Parms;

	this->ProcessEvent ( pFnPlayEffectWaveIncoming, &PlayEffectWaveIncoming_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectGas
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectGas ( )
{
	static UFunction* pFnPlayEffectGas = NULL;

	if ( ! pFnPlayEffectGas )
		pFnPlayEffectGas = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectGas" );

	UKFLEDEffectsManager_execPlayEffectGas_Parms PlayEffectGas_Parms;

	this->ProcessEvent ( pFnPlayEffectGas, &PlayEffectGas_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectFire
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectFire ( )
{
	static UFunction* pFnPlayEffectFire = NULL;

	if ( ! pFnPlayEffectFire )
		pFnPlayEffectFire = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectFire" );

	UKFLEDEffectsManager_execPlayEffectFire_Parms PlayEffectFire_Parms;

	this->ProcessEvent ( pFnPlayEffectFire, &PlayEffectFire_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectHeal
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectHeal ( )
{
	static UFunction* pFnPlayEffectHeal = NULL;

	if ( ! pFnPlayEffectHeal )
		pFnPlayEffectHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectHeal" );

	UKFLEDEffectsManager_execPlayEffectHeal_Parms PlayEffectHeal_Parms;

	this->ProcessEvent ( pFnPlayEffectHeal, &PlayEffectHeal_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectFlashbang
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectFlashbang ( )
{
	static UFunction* pFnPlayEffectFlashbang = NULL;

	if ( ! pFnPlayEffectFlashbang )
		pFnPlayEffectFlashbang = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectFlashbang" );

	UKFLEDEffectsManager_execPlayEffectFlashbang_Parms PlayEffectFlashbang_Parms;

	this->ProcessEvent ( pFnPlayEffectFlashbang, &PlayEffectFlashbang_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectSiren
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectSiren ( )
{
	static UFunction* pFnPlayEffectSiren = NULL;

	if ( ! pFnPlayEffectSiren )
		pFnPlayEffectSiren = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectSiren" );

	UKFLEDEffectsManager_execPlayEffectSiren_Parms PlayEffectSiren_Parms;

	this->ProcessEvent ( pFnPlayEffectSiren, &PlayEffectSiren_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectLowHealth
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectLowHealth ( )
{
	static UFunction* pFnPlayEffectLowHealth = NULL;

	if ( ! pFnPlayEffectLowHealth )
		pFnPlayEffectLowHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectLowHealth" );

	UKFLEDEffectsManager_execPlayEffectLowHealth_Parms PlayEffectLowHealth_Parms;

	this->ProcessEvent ( pFnPlayEffectLowHealth, &PlayEffectLowHealth_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.ClearEffectZedTime
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::ClearEffectZedTime ( )
{
	static UFunction* pFnClearEffectZedTime = NULL;

	if ( ! pFnClearEffectZedTime )
		pFnClearEffectZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.ClearEffectZedTime" );

	UKFLEDEffectsManager_execClearEffectZedTime_Parms ClearEffectZedTime_Parms;

	this->ProcessEvent ( pFnClearEffectZedTime, &ClearEffectZedTime_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectZedTime
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectZedTime ( )
{
	static UFunction* pFnPlayEffectZedTime = NULL;

	if ( ! pFnPlayEffectZedTime )
		pFnPlayEffectZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectZedTime" );

	UKFLEDEffectsManager_execPlayEffectZedTime_Parms PlayEffectZedTime_Parms;

	this->ProcessEvent ( pFnPlayEffectZedTime, &PlayEffectZedTime_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayEffectPuke
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayEffectPuke ( )
{
	static UFunction* pFnPlayEffectPuke = NULL;

	if ( ! pFnPlayEffectPuke )
		pFnPlayEffectPuke = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayEffectPuke" );

	UKFLEDEffectsManager_execPlayEffectPuke_Parms PlayEffectPuke_Parms;

	this->ProcessEvent ( pFnPlayEffectPuke, &PlayEffectPuke_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.LedRestoreLighting
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::LedRestoreLighting ( )
{
	static UFunction* pFnLedRestoreLighting = NULL;

	if ( ! pFnLedRestoreLighting )
		pFnLedRestoreLighting = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.LedRestoreLighting" );

	UKFLEDEffectsManager_execLedRestoreLighting_Parms LedRestoreLighting_Parms;

	this->ProcessEvent ( pFnLedRestoreLighting, &LedRestoreLighting_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.LedStopEffects
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::LedStopEffects ( )
{
	static UFunction* pFnLedStopEffects = NULL;

	if ( ! pFnLedStopEffects )
		pFnLedStopEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.LedStopEffects" );

	UKFLEDEffectsManager_execLedStopEffects_Parms LedStopEffects_Parms;

	this->ProcessEvent ( pFnLedStopEffects, &LedStopEffects_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.SetLEDRGB
// [0x00024102] 
// Parameters infos:

void UKFLEDEffectsManager::SetLEDRGB ( )
{
	static UFunction* pFnSetLEDRGB = NULL;

	if ( ! pFnSetLEDRGB )
		pFnSetLEDRGB = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.SetLEDRGB" );

	UKFLEDEffectsManager_execSetLEDRGB_Parms SetLEDRGB_Parms;

	this->ProcessEvent ( pFnSetLEDRGB, &SetLEDRGB_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PercentToByte
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::PercentToByte ( )
{
	static UFunction* pFnPercentToByte = NULL;

	if ( ! pFnPercentToByte )
		pFnPercentToByte = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PercentToByte" );

	UKFLEDEffectsManager_execPercentToByte_Parms PercentToByte_Parms;

	this->ProcessEvent ( pFnPercentToByte, &PercentToByte_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.PlayNextLightFrame
// [0x00024102] 
// Parameters infos:

void UKFLEDEffectsManager::PlayNextLightFrame ( )
{
	static UFunction* pFnPlayNextLightFrame = NULL;

	if ( ! pFnPlayNextLightFrame )
		pFnPlayNextLightFrame = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.PlayNextLightFrame" );

	UKFLEDEffectsManager_execPlayNextLightFrame_Parms PlayNextLightFrame_Parms;

	this->ProcessEvent ( pFnPlayNextLightFrame, &PlayNextLightFrame_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.ResetLightingAnimation
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::ResetLightingAnimation ( )
{
	static UFunction* pFnResetLightingAnimation = NULL;

	if ( ! pFnResetLightingAnimation )
		pFnResetLightingAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.ResetLightingAnimation" );

	UKFLEDEffectsManager_execResetLightingAnimation_Parms ResetLightingAnimation_Parms;

	this->ProcessEvent ( pFnResetLightingAnimation, &ResetLightingAnimation_Parms, NULL );
};

// Function KFGame.KFLEDEffectsManager.InitLEDEffects
// [0x00020102] 
// Parameters infos:

void UKFLEDEffectsManager::InitLEDEffects ( )
{
	static UFunction* pFnInitLEDEffects = NULL;

	if ( ! pFnInitLEDEffects )
		pFnInitLEDEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFLEDEffectsManager.InitLEDEffects" );

	UKFLEDEffectsManager_execInitLEDEffects_Parms InitLEDEffects_Parms;

	this->ProcessEvent ( pFnInitLEDEffects, &InitLEDEffects_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.FOV
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFDemoRecSpectator::FOV ( )
{
	static UFunction* pFnFOV = NULL;

	if ( ! pFnFOV )
		pFnFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.FOV" );

	AKFDemoRecSpectator_execFOV_Parms FOV_Parms;

	this->ProcessEvent ( pFnFOV, &FOV_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.UpdateRotation
// [0x00820002] 
// Parameters infos:

void AKFDemoRecSpectator::UpdateRotation ( )
{
	static UFunction* pFnUpdateRotation = NULL;

	if ( ! pFnUpdateRotation )
		pFnUpdateRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.UpdateRotation" );

	AKFDemoRecSpectator_execUpdateRotation_Parms UpdateRotation_Parms;

	this->ProcessEvent ( pFnUpdateRotation, &UpdateRotation_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.GetPlayerViewPoint
// [0x00420902] ( FUNC_Event )
// Parameters infos:

void AKFDemoRecSpectator::eventGetPlayerViewPoint ( )
{
	static UFunction* pFnGetPlayerViewPoint = NULL;

	if ( ! pFnGetPlayerViewPoint )
		pFnGetPlayerViewPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.GetPlayerViewPoint" );

	AKFDemoRecSpectator_eventGetPlayerViewPoint_Parms GetPlayerViewPoint_Parms;

	this->ProcessEvent ( pFnGetPlayerViewPoint, &GetPlayerViewPoint_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.Pause
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFDemoRecSpectator::Pause ( )
{
	static UFunction* pFnPause = NULL;

	if ( ! pFnPause )
		pFnPause = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.Pause" );

	AKFDemoRecSpectator_execPause_Parms Pause_Parms;

	this->ProcessEvent ( pFnPause, &Pause_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.SetPause
// [0x00024002] 
// Parameters infos:

void AKFDemoRecSpectator::SetPause ( )
{
	static UFunction* pFnSetPause = NULL;

	if ( ! pFnSetPause )
		pFnSetPause = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.SetPause" );

	AKFDemoRecSpectator_execSetPause_Parms SetPause_Parms;

	this->ProcessEvent ( pFnSetPause, &SetPause_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.ClientSetRealViewTarget
// [0x010201C2] 
// Parameters infos:

void AKFDemoRecSpectator::ClientSetRealViewTarget ( )
{
	static UFunction* pFnClientSetRealViewTarget = NULL;

	if ( ! pFnClientSetRealViewTarget )
		pFnClientSetRealViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.ClientSetRealViewTarget" );

	AKFDemoRecSpectator_execClientSetRealViewTarget_Parms ClientSetRealViewTarget_Parms;

	this->ProcessEvent ( pFnClientSetRealViewTarget, &ClientSetRealViewTarget_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.ServerViewSelf
// [0x00224042] 
// Parameters infos:

void AKFDemoRecSpectator::ServerViewSelf ( )
{
	static UFunction* pFnServerViewSelf = NULL;

	if ( ! pFnServerViewSelf )
		pFnServerViewSelf = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.ServerViewSelf" );

	AKFDemoRecSpectator_execServerViewSelf_Parms ServerViewSelf_Parms;

	this->ProcessEvent ( pFnServerViewSelf, &ServerViewSelf_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.SetViewTarget
// [0x00024002] 
// Parameters infos:

void AKFDemoRecSpectator::SetViewTarget ( )
{
	static UFunction* pFnSetViewTarget = NULL;

	if ( ! pFnSetViewTarget )
		pFnSetViewTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.SetViewTarget" );

	AKFDemoRecSpectator_execSetViewTarget_Parms SetViewTarget_Parms;

	this->ProcessEvent ( pFnSetViewTarget, &SetViewTarget_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.DemoViewNextPlayer
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFDemoRecSpectator::DemoViewNextPlayer ( )
{
	static UFunction* pFnDemoViewNextPlayer = NULL;

	if ( ! pFnDemoViewNextPlayer )
		pFnDemoViewNextPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.DemoViewNextPlayer" );

	AKFDemoRecSpectator_execDemoViewNextPlayer_Parms DemoViewNextPlayer_Parms;

	this->ProcessEvent ( pFnDemoViewNextPlayer, &DemoViewNextPlayer_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.ViewClass
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFDemoRecSpectator::ViewClass ( )
{
	static UFunction* pFnViewClass = NULL;

	if ( ! pFnViewClass )
		pFnViewClass = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.ViewClass" );

	AKFDemoRecSpectator_execViewClass_Parms ViewClass_Parms;

	this->ProcessEvent ( pFnViewClass, &ViewClass_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.Slomo
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFDemoRecSpectator::Slomo ( )
{
	static UFunction* pFnSlomo = NULL;

	if ( ! pFnSlomo )
		pFnSlomo = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.Slomo" );

	AKFDemoRecSpectator_execSlomo_Parms Slomo_Parms;

	this->ProcessEvent ( pFnSlomo, &Slomo_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.SetGFxHUD
// [0x00020002] 
// Parameters infos:

void AKFDemoRecSpectator::SetGFxHUD ( )
{
	static UFunction* pFnSetGFxHUD = NULL;

	if ( ! pFnSetGFxHUD )
		pFnSetGFxHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.SetGFxHUD" );

	AKFDemoRecSpectator_execSetGFxHUD_Parms SetGFxHUD_Parms;

	this->ProcessEvent ( pFnSetGFxHUD, &SetGFxHUD_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.InitPlayerReplicationInfo
// [0x00020002] 
// Parameters infos:

void AKFDemoRecSpectator::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.InitPlayerReplicationInfo" );

	AKFDemoRecSpectator_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.ReceivedPlayer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDemoRecSpectator::eventReceivedPlayer ( )
{
	static UFunction* pFnReceivedPlayer = NULL;

	if ( ! pFnReceivedPlayer )
		pFnReceivedPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.ReceivedPlayer" );

	AKFDemoRecSpectator_eventReceivedPlayer_Parms ReceivedPlayer_Parms;

	this->ProcessEvent ( pFnReceivedPlayer, &ReceivedPlayer_Parms, NULL );
};

// Function KFGame.KFDemoRecSpectator.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDemoRecSpectator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFDemoRecSpectator.PostBeginPlay" );

	AKFDemoRecSpectator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFDT_Bludgeon.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Bludgeon::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Bludgeon.GetKillerDialogID" );

	UKFDT_Bludgeon_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDialogEnvironmentVolume.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDialogEnvironmentVolume::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogEnvironmentVolume.UnTouch" );

	AKFDialogEnvironmentVolume_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFDialogEnvironmentVolume.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDialogEnvironmentVolume::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogEnvironmentVolume.Touch" );

	AKFDialogEnvironmentVolume_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPattyWhirlwindDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPattyWhirlwindDialog ( )
{
	static UFunction* pFnPlayPattyWhirlwindDialog = NULL;

	if ( ! pFnPlayPattyWhirlwindDialog )
		pFnPlayPattyWhirlwindDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPattyWhirlwindDialog" );

	AKFDialogManager_execPlayPattyWhirlwindDialog_Parms PlayPattyWhirlwindDialog_Parms;

	this->ProcessEvent ( pFnPlayPattyWhirlwindDialog, &PlayPattyWhirlwindDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPattyBattlePhaseDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPattyBattlePhaseDialog ( )
{
	static UFunction* pFnPlayPattyBattlePhaseDialog = NULL;

	if ( ! pFnPlayPattyBattlePhaseDialog )
		pFnPlayPattyBattlePhaseDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPattyBattlePhaseDialog" );

	AKFDialogManager_execPlayPattyBattlePhaseDialog_Parms PlayPattyBattlePhaseDialog_Parms;

	this->ProcessEvent ( pFnPlayPattyBattlePhaseDialog, &PlayPattyBattlePhaseDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPattyKilledDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPattyKilledDialog ( )
{
	static UFunction* pFnPlayPattyKilledDialog = NULL;

	if ( ! pFnPlayPattyKilledDialog )
		pFnPlayPattyKilledDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPattyKilledDialog" );

	AKFDialogManager_execPlayPattyKilledDialog_Parms PlayPattyKilledDialog_Parms;

	this->ProcessEvent ( pFnPlayPattyKilledDialog, &PlayPattyKilledDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPattyChildKilledDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPattyChildKilledDialog ( )
{
	static UFunction* pFnPlayPattyChildKilledDialog = NULL;

	if ( ! pFnPlayPattyChildKilledDialog )
		pFnPlayPattyChildKilledDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPattyChildKilledDialog" );

	AKFDialogManager_execPlayPattyChildKilledDialog_Parms PlayPattyChildKilledDialog_Parms;

	this->ProcessEvent ( pFnPlayPattyChildKilledDialog, &PlayPattyChildKilledDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPattyTentaclePullDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPattyTentaclePullDialog ( )
{
	static UFunction* pFnPlayPattyTentaclePullDialog = NULL;

	if ( ! pFnPlayPattyTentaclePullDialog )
		pFnPlayPattyTentaclePullDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPattyTentaclePullDialog" );

	AKFDialogManager_execPlayPattyTentaclePullDialog_Parms PlayPattyTentaclePullDialog_Parms;

	this->ProcessEvent ( pFnPlayPattyTentaclePullDialog, &PlayPattyTentaclePullDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPattyMinigunAttackDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPattyMinigunAttackDialog ( )
{
	static UFunction* pFnPlayPattyMinigunAttackDialog = NULL;

	if ( ! pFnPlayPattyMinigunAttackDialog )
		pFnPlayPattyMinigunAttackDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPattyMinigunAttackDialog" );

	AKFDialogManager_execPlayPattyMinigunAttackDialog_Parms PlayPattyMinigunAttackDialog_Parms;

	this->ProcessEvent ( pFnPlayPattyMinigunAttackDialog, &PlayPattyMinigunAttackDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPattyMinigunWarnDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPattyMinigunWarnDialog ( )
{
	static UFunction* pFnPlayPattyMinigunWarnDialog = NULL;

	if ( ! pFnPlayPattyMinigunWarnDialog )
		pFnPlayPattyMinigunWarnDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPattyMinigunWarnDialog" );

	AKFDialogManager_execPlayPattyMinigunWarnDialog_Parms PlayPattyMinigunWarnDialog_Parms;

	this->ProcessEvent ( pFnPlayPattyMinigunWarnDialog, &PlayPattyMinigunWarnDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPatriarchTickDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPatriarchTickDialog ( )
{
	static UFunction* pFnPlayPatriarchTickDialog = NULL;

	if ( ! pFnPlayPatriarchTickDialog )
		pFnPlayPatriarchTickDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPatriarchTickDialog" );

	AKFDialogManager_execPlayPatriarchTickDialog_Parms PlayPatriarchTickDialog_Parms;

	this->ProcessEvent ( pFnPlayPatriarchTickDialog, &PlayPatriarchTickDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansBattlePhaseDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansBattlePhaseDialog ( )
{
	static UFunction* pFnPlayHansBattlePhaseDialog = NULL;

	if ( ! pFnPlayHansBattlePhaseDialog )
		pFnPlayHansBattlePhaseDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansBattlePhaseDialog" );

	AKFDialogManager_execPlayHansBattlePhaseDialog_Parms PlayHansBattlePhaseDialog_Parms;

	this->ProcessEvent ( pFnPlayHansBattlePhaseDialog, &PlayHansBattlePhaseDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansAOEDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansAOEDialog ( )
{
	static UFunction* pFnPlayHansAOEDialog = NULL;

	if ( ! pFnPlayHansAOEDialog )
		pFnPlayHansAOEDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansAOEDialog" );

	AKFDialogManager_execPlayHansAOEDialog_Parms PlayHansAOEDialog_Parms;

	this->ProcessEvent ( pFnPlayHansAOEDialog, &PlayHansAOEDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansFrenzyDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansFrenzyDialog ( )
{
	static UFunction* pFnPlayHansFrenzyDialog = NULL;

	if ( ! pFnPlayHansFrenzyDialog )
		pFnPlayHansFrenzyDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansFrenzyDialog" );

	AKFDialogManager_execPlayHansFrenzyDialog_Parms PlayHansFrenzyDialog_Parms;

	this->ProcessEvent ( pFnPlayHansFrenzyDialog, &PlayHansFrenzyDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansDamagePlayerDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansDamagePlayerDialog ( )
{
	static UFunction* pFnPlayHansDamagePlayerDialog = NULL;

	if ( ! pFnPlayHansDamagePlayerDialog )
		pFnPlayHansDamagePlayerDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansDamagePlayerDialog" );

	AKFDialogManager_execPlayHansDamagePlayerDialog_Parms PlayHansDamagePlayerDialog_Parms;

	this->ProcessEvent ( pFnPlayHansDamagePlayerDialog, &PlayHansDamagePlayerDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansKilledDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansKilledDialog ( )
{
	static UFunction* pFnPlayHansKilledDialog = NULL;

	if ( ! pFnPlayHansKilledDialog )
		pFnPlayHansKilledDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansKilledDialog" );

	AKFDialogManager_execPlayHansKilledDialog_Parms PlayHansKilledDialog_Parms;

	this->ProcessEvent ( pFnPlayHansKilledDialog, &PlayHansKilledDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansGasDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansGasDialog ( )
{
	static UFunction* pFnPlayHansGasDialog = NULL;

	if ( ! pFnPlayHansGasDialog )
		pFnPlayHansGasDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansGasDialog" );

	AKFDialogManager_execPlayHansGasDialog_Parms PlayHansGasDialog_Parms;

	this->ProcessEvent ( pFnPlayHansGasDialog, &PlayHansGasDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansSmokeDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansSmokeDialog ( )
{
	static UFunction* pFnPlayHansSmokeDialog = NULL;

	if ( ! pFnPlayHansSmokeDialog )
		pFnPlayHansSmokeDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansSmokeDialog" );

	AKFDialogManager_execPlayHansSmokeDialog_Parms PlayHansSmokeDialog_Parms;

	this->ProcessEvent ( pFnPlayHansSmokeDialog, &PlayHansSmokeDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansNadeDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansNadeDialog ( )
{
	static UFunction* pFnPlayHansNadeDialog = NULL;

	if ( ! pFnPlayHansNadeDialog )
		pFnPlayHansNadeDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansNadeDialog" );

	AKFDialogManager_execPlayHansNadeDialog_Parms PlayHansNadeDialog_Parms;

	this->ProcessEvent ( pFnPlayHansNadeDialog, &PlayHansNadeDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansDrawGunsDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansDrawGunsDialog ( )
{
	static UFunction* pFnPlayHansDrawGunsDialog = NULL;

	if ( ! pFnPlayHansDrawGunsDialog )
		pFnPlayHansDrawGunsDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansDrawGunsDialog" );

	AKFDialogManager_execPlayHansDrawGunsDialog_Parms PlayHansDrawGunsDialog_Parms;

	this->ProcessEvent ( pFnPlayHansDrawGunsDialog, &PlayHansDrawGunsDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHansTickDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHansTickDialog ( )
{
	static UFunction* pFnPlayHansTickDialog = NULL;

	if ( ! pFnPlayHansTickDialog )
		pFnPlayHansTickDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHansTickDialog" );

	AKFDialogManager_execPlayHansTickDialog_Parms PlayHansTickDialog_Parms;

	this->ProcessEvent ( pFnPlayHansTickDialog, &PlayHansTickDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossLandedDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossLandedDialog ( )
{
	static UFunction* pFnPlayBossLandedDialog = NULL;

	if ( ! pFnPlayBossLandedDialog )
		pFnPlayBossLandedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossLandedDialog" );

	AKFDialogManager_execPlayBossLandedDialog_Parms PlayBossLandedDialog_Parms;

	this->ProcessEvent ( pFnPlayBossLandedDialog, &PlayBossLandedDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossLeapedDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossLeapedDialog ( )
{
	static UFunction* pFnPlayBossLeapedDialog = NULL;

	if ( ! pFnPlayBossLeapedDialog )
		pFnPlayBossLeapedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossLeapedDialog" );

	AKFDialogManager_execPlayBossLeapedDialog_Parms PlayBossLeapedDialog_Parms;

	this->ProcessEvent ( pFnPlayBossLeapedDialog, &PlayBossLeapedDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossDeathDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossDeathDialog ( )
{
	static UFunction* pFnPlayBossDeathDialog = NULL;

	if ( ! pFnPlayBossDeathDialog )
		pFnPlayBossDeathDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossDeathDialog" );

	AKFDialogManager_execPlayBossDeathDialog_Parms PlayBossDeathDialog_Parms;

	this->ProcessEvent ( pFnPlayBossDeathDialog, &PlayBossDeathDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossTakeDamageDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossTakeDamageDialog ( )
{
	static UFunction* pFnPlayBossTakeDamageDialog = NULL;

	if ( ! pFnPlayBossTakeDamageDialog )
		pFnPlayBossTakeDamageDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossTakeDamageDialog" );

	AKFDialogManager_execPlayBossTakeDamageDialog_Parms PlayBossTakeDamageDialog_Parms;

	this->ProcessEvent ( pFnPlayBossTakeDamageDialog, &PlayBossTakeDamageDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossHealDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossHealDialog ( )
{
	static UFunction* pFnPlayBossHealDialog = NULL;

	if ( ! pFnPlayBossHealDialog )
		pFnPlayBossHealDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossHealDialog" );

	AKFDialogManager_execPlayBossHealDialog_Parms PlayBossHealDialog_Parms;

	this->ProcessEvent ( pFnPlayBossHealDialog, &PlayBossHealDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossGrabDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossGrabDialog ( )
{
	static UFunction* pFnPlayBossGrabDialog = NULL;

	if ( ! pFnPlayBossGrabDialog )
		pFnPlayBossGrabDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossGrabDialog" );

	AKFDialogManager_execPlayBossGrabDialog_Parms PlayBossGrabDialog_Parms;

	this->ProcessEvent ( pFnPlayBossGrabDialog, &PlayBossGrabDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossChallengeDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossChallengeDialog ( )
{
	static UFunction* pFnPlayBossChallengeDialog = NULL;

	if ( ! pFnPlayBossChallengeDialog )
		pFnPlayBossChallengeDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossChallengeDialog" );

	AKFDialogManager_execPlayBossChallengeDialog_Parms PlayBossChallengeDialog_Parms;

	this->ProcessEvent ( pFnPlayBossChallengeDialog, &PlayBossChallengeDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossLoseSightOfDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossLoseSightOfDialog ( )
{
	static UFunction* pFnPlayBossLoseSightOfDialog = NULL;

	if ( ! pFnPlayBossLoseSightOfDialog )
		pFnPlayBossLoseSightOfDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossLoseSightOfDialog" );

	AKFDialogManager_execPlayBossLoseSightOfDialog_Parms PlayBossLoseSightOfDialog_Parms;

	this->ProcessEvent ( pFnPlayBossLoseSightOfDialog, &PlayBossLoseSightOfDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBossMonologue
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBossMonologue ( )
{
	static UFunction* pFnPlayBossMonologue = NULL;

	if ( ! pFnPlayBossMonologue )
		pFnPlayBossMonologue = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBossMonologue" );

	AKFDialogManager_execPlayBossMonologue_Parms PlayBossMonologue_Parms;

	this->ProcessEvent ( pFnPlayBossMonologue, &PlayBossMonologue_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayVoiceCommandDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayVoiceCommandDialog ( )
{
	static UFunction* pFnPlayVoiceCommandDialog = NULL;

	if ( ! pFnPlayVoiceCommandDialog )
		pFnPlayVoiceCommandDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayVoiceCommandDialog" );

	AKFDialogManager_execPlayVoiceCommandDialog_Parms PlayVoiceCommandDialog_Parms;

	this->ProcessEvent ( pFnPlayVoiceCommandDialog, &PlayVoiceCommandDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySwitchToFavoriteWeaponDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySwitchToFavoriteWeaponDialog ( )
{
	static UFunction* pFnPlaySwitchToFavoriteWeaponDialog = NULL;

	if ( ! pFnPlaySwitchToFavoriteWeaponDialog )
		pFnPlaySwitchToFavoriteWeaponDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySwitchToFavoriteWeaponDialog" );

	AKFDialogManager_execPlaySwitchToFavoriteWeaponDialog_Parms PlaySwitchToFavoriteWeaponDialog_Parms;

	this->ProcessEvent ( pFnPlaySwitchToFavoriteWeaponDialog, &PlaySwitchToFavoriteWeaponDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDefendObjDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayDefendObjDialog ( )
{
	static UFunction* pFnPlayDefendObjDialog = NULL;

	if ( ! pFnPlayDefendObjDialog )
		pFnPlayDefendObjDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDefendObjDialog" );

	AKFDialogManager_execPlayDefendObjDialog_Parms PlayDefendObjDialog_Parms;

	this->ProcessEvent ( pFnPlayDefendObjDialog, &PlayDefendObjDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayObjectiveDialogOnRandomPlayers
// [0x00024002] 
// Parameters infos:

void AKFDialogManager::PlayObjectiveDialogOnRandomPlayers ( )
{
	static UFunction* pFnPlayObjectiveDialogOnRandomPlayers = NULL;

	if ( ! pFnPlayObjectiveDialogOnRandomPlayers )
		pFnPlayObjectiveDialogOnRandomPlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayObjectiveDialogOnRandomPlayers" );

	AKFDialogManager_execPlayObjectiveDialogOnRandomPlayers_Parms PlayObjectiveDialogOnRandomPlayers_Parms;

	this->ProcessEvent ( pFnPlayObjectiveDialogOnRandomPlayers, &PlayObjectiveDialogOnRandomPlayers_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetHumanPawnsInObj
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::GetHumanPawnsInObj ( )
{
	static UFunction* pFnGetHumanPawnsInObj = NULL;

	if ( ! pFnGetHumanPawnsInObj )
		pFnGetHumanPawnsInObj = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetHumanPawnsInObj" );

	AKFDialogManager_execGetHumanPawnsInObj_Parms GetHumanPawnsInObj_Parms;

	this->ProcessEvent ( pFnGetHumanPawnsInObj, &GetHumanPawnsInObj_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayLoseObjectiveDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayLoseObjectiveDialog ( )
{
	static UFunction* pFnPlayLoseObjectiveDialog = NULL;

	if ( ! pFnPlayLoseObjectiveDialog )
		pFnPlayLoseObjectiveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayLoseObjectiveDialog" );

	AKFDialogManager_execPlayLoseObjectiveDialog_Parms PlayLoseObjectiveDialog_Parms;

	this->ProcessEvent ( pFnPlayLoseObjectiveDialog, &PlayLoseObjectiveDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayWinObjectiveDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayWinObjectiveDialog ( )
{
	static UFunction* pFnPlayWinObjectiveDialog = NULL;

	if ( ! pFnPlayWinObjectiveDialog )
		pFnPlayWinObjectiveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayWinObjectiveDialog" );

	AKFDialogManager_execPlayWinObjectiveDialog_Parms PlayWinObjectiveDialog_Parms;

	this->ProcessEvent ( pFnPlayWinObjectiveDialog, &PlayWinObjectiveDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDeclineObjectiveDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayDeclineObjectiveDialog ( )
{
	static UFunction* pFnPlayDeclineObjectiveDialog = NULL;

	if ( ! pFnPlayDeclineObjectiveDialog )
		pFnPlayDeclineObjectiveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDeclineObjectiveDialog" );

	AKFDialogManager_execPlayDeclineObjectiveDialog_Parms PlayDeclineObjectiveDialog_Parms;

	this->ProcessEvent ( pFnPlayDeclineObjectiveDialog, &PlayDeclineObjectiveDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayAcceptObjectiveDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayAcceptObjectiveDialog ( )
{
	static UFunction* pFnPlayAcceptObjectiveDialog = NULL;

	if ( ! pFnPlayAcceptObjectiveDialog )
		pFnPlayAcceptObjectiveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayAcceptObjectiveDialog" );

	AKFDialogManager_execPlayAcceptObjectiveDialog_Parms PlayAcceptObjectiveDialog_Parms;

	this->ProcessEvent ( pFnPlayAcceptObjectiveDialog, &PlayAcceptObjectiveDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayEnvironmentalDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayEnvironmentalDialog ( )
{
	static UFunction* pFnPlayEnvironmentalDialog = NULL;

	if ( ! pFnPlayEnvironmentalDialog )
		pFnPlayEnvironmentalDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayEnvironmentalDialog" );

	AKFDialogManager_execPlayEnvironmentalDialog_Parms PlayEnvironmentalDialog_Parms;

	this->ProcessEvent ( pFnPlayEnvironmentalDialog, &PlayEnvironmentalDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayWaveStartDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayWaveStartDialog ( )
{
	static UFunction* pFnPlayWaveStartDialog = NULL;

	if ( ! pFnPlayWaveStartDialog )
		pFnPlayWaveStartDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayWaveStartDialog" );

	AKFDialogManager_execPlayWaveStartDialog_Parms PlayWaveStartDialog_Parms;

	this->ProcessEvent ( pFnPlayWaveStartDialog, &PlayWaveStartDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayRandomSituationalResponse
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::PlayRandomSituationalResponse ( )
{
	static UFunction* pFnPlayRandomSituationalResponse = NULL;

	if ( ! pFnPlayRandomSituationalResponse )
		pFnPlayRandomSituationalResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayRandomSituationalResponse" );

	AKFDialogManager_execPlayRandomSituationalResponse_Parms PlayRandomSituationalResponse_Parms;

	this->ProcessEvent ( pFnPlayRandomSituationalResponse, &PlayRandomSituationalResponse_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayRandomSituationalDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayRandomSituationalDialog ( )
{
	static UFunction* pFnPlayRandomSituationalDialog = NULL;

	if ( ! pFnPlayRandomSituationalDialog )
		pFnPlayRandomSituationalDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayRandomSituationalDialog" );

	AKFDialogManager_execPlayRandomSituationalDialog_Parms PlayRandomSituationalDialog_Parms;

	this->ProcessEvent ( pFnPlayRandomSituationalDialog, &PlayRandomSituationalDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySituationalDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySituationalDialog ( )
{
	static UFunction* pFnPlaySituationalDialog = NULL;

	if ( ! pFnPlaySituationalDialog )
		pFnPlaySituationalDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySituationalDialog" );

	AKFDialogManager_execPlaySituationalDialog_Parms PlaySituationalDialog_Parms;

	this->ProcessEvent ( pFnPlaySituationalDialog, &PlaySituationalDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckIdleDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::CheckIdleDialog ( )
{
	static UFunction* pFnCheckIdleDialog = NULL;

	if ( ! pFnCheckIdleDialog )
		pFnCheckIdleDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckIdleDialog" );

	AKFDialogManager_execCheckIdleDialog_Parms CheckIdleDialog_Parms;

	this->ProcessEvent ( pFnCheckIdleDialog, &CheckIdleDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBasicSpottedResponse
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBasicSpottedResponse ( )
{
	static UFunction* pFnPlayBasicSpottedResponse = NULL;

	if ( ! pFnPlayBasicSpottedResponse )
		pFnPlayBasicSpottedResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBasicSpottedResponse" );

	AKFDialogManager_execPlayBasicSpottedResponse_Parms PlayBasicSpottedResponse_Parms;

	this->ProcessEvent ( pFnPlayBasicSpottedResponse, &PlayBasicSpottedResponse_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayLoseSightOfBossDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayLoseSightOfBossDialog ( )
{
	static UFunction* pFnPlayLoseSightOfBossDialog = NULL;

	if ( ! pFnPlayLoseSightOfBossDialog )
		pFnPlayLoseSightOfBossDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayLoseSightOfBossDialog" );

	AKFDialogManager_execPlayLoseSightOfBossDialog_Parms PlayLoseSightOfBossDialog_Parms;

	this->ProcessEvent ( pFnPlayLoseSightOfBossDialog, &PlayLoseSightOfBossDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySpotRunAwayDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySpotRunAwayDialog ( )
{
	static UFunction* pFnPlaySpotRunAwayDialog = NULL;

	if ( ! pFnPlaySpotRunAwayDialog )
		pFnPlaySpotRunAwayDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySpotRunAwayDialog" );

	AKFDialogManager_execPlaySpotRunAwayDialog_Parms PlaySpotRunAwayDialog_Parms;

	this->ProcessEvent ( pFnPlaySpotRunAwayDialog, &PlaySpotRunAwayDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySpotZedHealingDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySpotZedHealingDialog ( )
{
	static UFunction* pFnPlaySpotZedHealingDialog = NULL;

	if ( ! pFnPlaySpotZedHealingDialog )
		pFnPlaySpotZedHealingDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySpotZedHealingDialog" );

	AKFDialogManager_execPlaySpotZedHealingDialog_Parms PlaySpotZedHealingDialog_Parms;

	this->ProcessEvent ( pFnPlaySpotZedHealingDialog, &PlaySpotZedHealingDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBeingShotAtDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBeingShotAtDialog ( )
{
	static UFunction* pFnPlayBeingShotAtDialog = NULL;

	if ( ! pFnPlayBeingShotAtDialog )
		pFnPlayBeingShotAtDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBeingShotAtDialog" );

	AKFDialogManager_execPlayBeingShotAtDialog_Parms PlayBeingShotAtDialog_Parms;

	this->ProcessEvent ( pFnPlayBeingShotAtDialog, &PlayBeingShotAtDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySpotGrenadeDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySpotGrenadeDialog ( )
{
	static UFunction* pFnPlaySpotGrenadeDialog = NULL;

	if ( ! pFnPlaySpotGrenadeDialog )
		pFnPlaySpotGrenadeDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySpotGrenadeDialog" );

	AKFDialogManager_execPlaySpotGrenadeDialog_Parms PlaySpotGrenadeDialog_Parms;

	this->ProcessEvent ( pFnPlaySpotGrenadeDialog, &PlaySpotGrenadeDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySpotRocketsDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySpotRocketsDialog ( )
{
	static UFunction* pFnPlaySpotRocketsDialog = NULL;

	if ( ! pFnPlaySpotRocketsDialog )
		pFnPlaySpotRocketsDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySpotRocketsDialog" );

	AKFDialogManager_execPlaySpotRocketsDialog_Parms PlaySpotRocketsDialog_Parms;

	this->ProcessEvent ( pFnPlaySpotRocketsDialog, &PlaySpotRocketsDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySpotChargeDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySpotChargeDialog ( )
{
	static UFunction* pFnPlaySpotChargeDialog = NULL;

	if ( ! pFnPlaySpotChargeDialog )
		pFnPlaySpotChargeDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySpotChargeDialog" );

	AKFDialogManager_execPlaySpotChargeDialog_Parms PlaySpotChargeDialog_Parms;

	this->ProcessEvent ( pFnPlaySpotChargeDialog, &PlaySpotChargeDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySpotEnragedDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySpotEnragedDialog ( )
{
	static UFunction* pFnPlaySpotEnragedDialog = NULL;

	if ( ! pFnPlaySpotEnragedDialog )
		pFnPlaySpotEnragedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySpotEnragedDialog" );

	AKFDialogManager_execPlaySpotEnragedDialog_Parms PlaySpotEnragedDialog_Parms;

	this->ProcessEvent ( pFnPlaySpotEnragedDialog, &PlaySpotEnragedDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySpotCloakDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySpotCloakDialog ( )
{
	static UFunction* pFnPlaySpotCloakDialog = NULL;

	if ( ! pFnPlaySpotCloakDialog )
		pFnPlaySpotCloakDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySpotCloakDialog" );

	AKFDialogManager_execPlaySpotCloakDialog_Parms PlaySpotCloakDialog_Parms;

	this->ProcessEvent ( pFnPlaySpotCloakDialog, &PlaySpotCloakDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckSpotPickupsDialog
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::CheckSpotPickupsDialog ( )
{
	static UFunction* pFnCheckSpotPickupsDialog = NULL;

	if ( ! pFnCheckSpotPickupsDialog )
		pFnCheckSpotPickupsDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckSpotPickupsDialog" );

	AKFDialogManager_execCheckSpotPickupsDialog_Parms CheckSpotPickupsDialog_Parms;

	this->ProcessEvent ( pFnCheckSpotPickupsDialog, &CheckSpotPickupsDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.SpotEnemyBehindPlayer
// [0x00820002] 
// Parameters infos:

void AKFDialogManager::SpotEnemyBehindPlayer ( )
{
	static UFunction* pFnSpotEnemyBehindPlayer = NULL;

	if ( ! pFnSpotEnemyBehindPlayer )
		pFnSpotEnemyBehindPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.SpotEnemyBehindPlayer" );

	AKFDialogManager_execSpotEnemyBehindPlayer_Parms SpotEnemyBehindPlayer_Parms;

	this->ProcessEvent ( pFnSpotEnemyBehindPlayer, &SpotEnemyBehindPlayer_Parms, NULL );
};

// Function KFGame.KFDialogManager.FindBestSpottedMonster
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::FindBestSpottedMonster ( )
{
	static UFunction* pFnFindBestSpottedMonster = NULL;

	if ( ! pFnFindBestSpottedMonster )
		pFnFindBestSpottedMonster = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.FindBestSpottedMonster" );

	AKFDialogManager_execFindBestSpottedMonster_Parms FindBestSpottedMonster_Parms;

	this->ProcessEvent ( pFnFindBestSpottedMonster, &FindBestSpottedMonster_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckSpottedDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::CheckSpottedDialog ( )
{
	static UFunction* pFnCheckSpottedDialog = NULL;

	if ( ! pFnCheckSpottedDialog )
		pFnCheckSpottedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckSpottedDialog" );

	AKFDialogManager_execCheckSpottedDialog_Parms CheckSpottedDialog_Parms;

	this->ProcessEvent ( pFnCheckSpottedDialog, &CheckSpottedDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckSpotMonsterDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::CheckSpotMonsterDialog ( )
{
	static UFunction* pFnCheckSpotMonsterDialog = NULL;

	if ( ! pFnCheckSpotMonsterDialog )
		pFnCheckSpotMonsterDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckSpotMonsterDialog" );

	AKFDialogManager_execCheckSpotMonsterDialog_Parms CheckSpotMonsterDialog_Parms;

	this->ProcessEvent ( pFnCheckSpotMonsterDialog, &CheckSpotMonsterDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckSpottedDialogPriority
// [0x00820002] 
// Parameters infos:

void AKFDialogManager::CheckSpottedDialogPriority ( )
{
	static UFunction* pFnCheckSpottedDialogPriority = NULL;

	if ( ! pFnCheckSpottedDialogPriority )
		pFnCheckSpottedDialogPriority = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckSpottedDialogPriority" );

	AKFDialogManager_execCheckSpottedDialogPriority_Parms CheckSpottedDialogPriority_Parms;

	this->ProcessEvent ( pFnCheckSpottedDialogPriority, &CheckSpottedDialogPriority_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPlayerDeathDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPlayerDeathDialog ( )
{
	static UFunction* pFnPlayPlayerDeathDialog = NULL;

	if ( ! pFnPlayPlayerDeathDialog )
		pFnPlayPlayerDeathDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPlayerDeathDialog" );

	AKFDialogManager_execPlayPlayerDeathDialog_Parms PlayPlayerDeathDialog_Parms;

	this->ProcessEvent ( pFnPlayPlayerDeathDialog, &PlayPlayerDeathDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPlayerGrabbedByPatriarchDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPlayerGrabbedByPatriarchDialog ( )
{
	static UFunction* pFnPlayPlayerGrabbedByPatriarchDialog = NULL;

	if ( ! pFnPlayPlayerGrabbedByPatriarchDialog )
		pFnPlayPlayerGrabbedByPatriarchDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPlayerGrabbedByPatriarchDialog" );

	AKFDialogManager_execPlayPlayerGrabbedByPatriarchDialog_Parms PlayPlayerGrabbedByPatriarchDialog_Parms;

	this->ProcessEvent ( pFnPlayPlayerGrabbedByPatriarchDialog, &PlayPlayerGrabbedByPatriarchDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPlayerGrabbedDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPlayerGrabbedDialog ( )
{
	static UFunction* pFnPlayPlayerGrabbedDialog = NULL;

	if ( ! pFnPlayPlayerGrabbedDialog )
		pFnPlayPlayerGrabbedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPlayerGrabbedDialog" );

	AKFDialogManager_execPlayPlayerGrabbedDialog_Parms PlayPlayerGrabbedDialog_Parms;

	this->ProcessEvent ( pFnPlayPlayerGrabbedDialog, &PlayPlayerGrabbedDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckPlayerDamageGeneric
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::CheckPlayerDamageGeneric ( )
{
	static UFunction* pFnCheckPlayerDamageGeneric = NULL;

	if ( ! pFnCheckPlayerDamageGeneric )
		pFnCheckPlayerDamageGeneric = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckPlayerDamageGeneric" );

	AKFDialogManager_execCheckPlayerDamageGeneric_Parms CheckPlayerDamageGeneric_Parms;

	this->ProcessEvent ( pFnCheckPlayerDamageGeneric, &CheckPlayerDamageGeneric_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayPlayerDamageDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayPlayerDamageDialog ( )
{
	static UFunction* pFnPlayPlayerDamageDialog = NULL;

	if ( ! pFnPlayPlayerDamageDialog )
		pFnPlayPlayerDamageDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayPlayerDamageDialog" );

	AKFDialogManager_execPlayPlayerDamageDialog_Parms PlayPlayerDamageDialog_Parms;

	this->ProcessEvent ( pFnPlayPlayerDamageDialog, &PlayPlayerDamageDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBeatDeadHorseDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBeatDeadHorseDialog ( )
{
	static UFunction* pFnPlayBeatDeadHorseDialog = NULL;

	if ( ! pFnPlayBeatDeadHorseDialog )
		pFnPlayBeatDeadHorseDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBeatDeadHorseDialog" );

	AKFDialogManager_execPlayBeatDeadHorseDialog_Parms PlayBeatDeadHorseDialog_Parms;

	this->ProcessEvent ( pFnPlayBeatDeadHorseDialog, &PlayBeatDeadHorseDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDamageZedContinuousDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayDamageZedContinuousDialog ( )
{
	static UFunction* pFnPlayDamageZedContinuousDialog = NULL;

	if ( ! pFnPlayDamageZedContinuousDialog )
		pFnPlayDamageZedContinuousDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDamageZedContinuousDialog" );

	AKFDialogManager_execPlayDamageZedContinuousDialog_Parms PlayDamageZedContinuousDialog_Parms;

	this->ProcessEvent ( pFnPlayDamageZedContinuousDialog, &PlayDamageZedContinuousDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDamagedZedDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayDamagedZedDialog ( )
{
	static UFunction* pFnPlayDamagedZedDialog = NULL;

	if ( ! pFnPlayDamagedZedDialog )
		pFnPlayDamagedZedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDamagedZedDialog" );

	AKFDialogManager_execPlayDamagedZedDialog_Parms PlayDamagedZedDialog_Parms;

	this->ProcessEvent ( pFnPlayDamagedZedDialog, &PlayDamagedZedDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBasicKilledResponse
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayBasicKilledResponse ( )
{
	static UFunction* pFnPlayBasicKilledResponse = NULL;

	if ( ! pFnPlayBasicKilledResponse )
		pFnPlayBasicKilledResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBasicKilledResponse" );

	AKFDialogManager_execPlayBasicKilledResponse_Parms PlayBasicKilledResponse_Parms;

	this->ProcessEvent ( pFnPlayBasicKilledResponse, &PlayBasicKilledResponse_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckKilledWithFavoriteWeaponDialog
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::CheckKilledWithFavoriteWeaponDialog ( )
{
	static UFunction* pFnCheckKilledWithFavoriteWeaponDialog = NULL;

	if ( ! pFnCheckKilledWithFavoriteWeaponDialog )
		pFnCheckKilledWithFavoriteWeaponDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckKilledWithFavoriteWeaponDialog" );

	AKFDialogManager_execCheckKilledWithFavoriteWeaponDialog_Parms CheckKilledWithFavoriteWeaponDialog_Parms;

	this->ProcessEvent ( pFnCheckKilledWithFavoriteWeaponDialog, &CheckKilledWithFavoriteWeaponDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckKillAsLastAliveDialog
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::CheckKillAsLastAliveDialog ( )
{
	static UFunction* pFnCheckKillAsLastAliveDialog = NULL;

	if ( ! pFnCheckKillAsLastAliveDialog )
		pFnCheckKillAsLastAliveDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckKillAsLastAliveDialog" );

	AKFDialogManager_execCheckKillAsLastAliveDialog_Parms CheckKillAsLastAliveDialog_Parms;

	this->ProcessEvent ( pFnCheckKillAsLastAliveDialog, &CheckKillAsLastAliveDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckCloseCallKillDialog
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::CheckCloseCallKillDialog ( )
{
	static UFunction* pFnCheckCloseCallKillDialog = NULL;

	if ( ! pFnCheckCloseCallKillDialog )
		pFnCheckCloseCallKillDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckCloseCallKillDialog" );

	AKFDialogManager_execCheckCloseCallKillDialog_Parms CheckCloseCallKillDialog_Parms;

	this->ProcessEvent ( pFnCheckCloseCallKillDialog, &CheckCloseCallKillDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckMassacreDialog
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::CheckMassacreDialog ( )
{
	static UFunction* pFnCheckMassacreDialog = NULL;

	if ( ! pFnCheckMassacreDialog )
		pFnCheckMassacreDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckMassacreDialog" );

	AKFDialogManager_execCheckMassacreDialog_Parms CheckMassacreDialog_Parms;

	this->ProcessEvent ( pFnCheckMassacreDialog, &CheckMassacreDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.CheckOnARollDialog
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::CheckOnARollDialog ( )
{
	static UFunction* pFnCheckOnARollDialog = NULL;

	if ( ! pFnCheckOnARollDialog )
		pFnCheckOnARollDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.CheckOnARollDialog" );

	AKFDialogManager_execCheckOnARollDialog_Parms CheckOnARollDialog_Parms;

	this->ProcessEvent ( pFnCheckOnARollDialog, &CheckOnARollDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayKilledZedDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayKilledZedDialog ( )
{
	static UFunction* pFnPlayKilledZedDialog = NULL;

	if ( ! pFnPlayKilledZedDialog )
		pFnPlayKilledZedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayKilledZedDialog" );

	AKFDialogManager_execPlayKilledZedDialog_Parms PlayKilledZedDialog_Parms;

	this->ProcessEvent ( pFnPlayKilledZedDialog, &PlayKilledZedDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayLevelUpDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayLevelUpDialog ( )
{
	static UFunction* pFnPlayLevelUpDialog = NULL;

	if ( ! pFnPlayLevelUpDialog )
		pFnPlayLevelUpDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayLevelUpDialog" );

	AKFDialogManager_execPlayLevelUpDialog_Parms PlayLevelUpDialog_Parms;

	this->ProcessEvent ( pFnPlayLevelUpDialog, &PlayLevelUpDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.StopBreathingDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::StopBreathingDialog ( )
{
	static UFunction* pFnStopBreathingDialog = NULL;

	if ( ! pFnStopBreathingDialog )
		pFnStopBreathingDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.StopBreathingDialog" );

	AKFDialogManager_execStopBreathingDialog_Parms StopBreathingDialog_Parms;

	this->ProcessEvent ( pFnStopBreathingDialog, &StopBreathingDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlaySprintPantingDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlaySprintPantingDialog ( )
{
	static UFunction* pFnPlaySprintPantingDialog = NULL;

	if ( ! pFnPlaySprintPantingDialog )
		pFnPlaySprintPantingDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlaySprintPantingDialog" );

	AKFDialogManager_execPlaySprintPantingDialog_Parms PlaySprintPantingDialog_Parms;

	this->ProcessEvent ( pFnPlaySprintPantingDialog, &PlaySprintPantingDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayJumpDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayJumpDialog ( )
{
	static UFunction* pFnPlayJumpDialog = NULL;

	if ( ! pFnPlayJumpDialog )
		pFnPlayJumpDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayJumpDialog" );

	AKFDialogManager_execPlayJumpDialog_Parms PlayJumpDialog_Parms;

	this->ProcessEvent ( pFnPlayJumpDialog, &PlayJumpDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayIronsightsDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayIronsightsDialog ( )
{
	static UFunction* pFnPlayIronsightsDialog = NULL;

	if ( ! pFnPlayIronsightsDialog )
		pFnPlayIronsightsDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayIronsightsDialog" );

	AKFDialogManager_execPlayIronsightsDialog_Parms PlayIronsightsDialog_Parms;

	this->ProcessEvent ( pFnPlayIronsightsDialog, &PlayIronsightsDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayMeleeAttackDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayMeleeAttackDialog ( )
{
	static UFunction* pFnPlayMeleeAttackDialog = NULL;

	if ( ! pFnPlayMeleeAttackDialog )
		pFnPlayMeleeAttackDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayMeleeAttackDialog" );

	AKFDialogManager_execPlayMeleeAttackDialog_Parms PlayMeleeAttackDialog_Parms;

	this->ProcessEvent ( pFnPlayMeleeAttackDialog, &PlayMeleeAttackDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDropWeaponDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayDropWeaponDialog ( )
{
	static UFunction* pFnPlayDropWeaponDialog = NULL;

	if ( ! pFnPlayDropWeaponDialog )
		pFnPlayDropWeaponDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDropWeaponDialog" );

	AKFDialogManager_execPlayDropWeaponDialog_Parms PlayDropWeaponDialog_Parms;

	this->ProcessEvent ( pFnPlayDropWeaponDialog, &PlayDropWeaponDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayAmmoDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayAmmoDialog ( )
{
	static UFunction* pFnPlayAmmoDialog = NULL;

	if ( ! pFnPlayAmmoDialog )
		pFnPlayAmmoDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayAmmoDialog" );

	AKFDialogManager_execPlayAmmoDialog_Parms PlayAmmoDialog_Parms;

	this->ProcessEvent ( pFnPlayAmmoDialog, &PlayAmmoDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayReloadDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayReloadDialog ( )
{
	static UFunction* pFnPlayReloadDialog = NULL;

	if ( ! pFnPlayReloadDialog )
		pFnPlayReloadDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayReloadDialog" );

	AKFDialogManager_execPlayReloadDialog_Parms PlayReloadDialog_Parms;

	this->ProcessEvent ( pFnPlayReloadDialog, &PlayReloadDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDoshTossDialog
// [0x00820002] 
// Parameters infos:

void AKFDialogManager::PlayDoshTossDialog ( )
{
	static UFunction* pFnPlayDoshTossDialog = NULL;

	if ( ! pFnPlayDoshTossDialog )
		pFnPlayDoshTossDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDoshTossDialog" );

	AKFDialogManager_execPlayDoshTossDialog_Parms PlayDoshTossDialog_Parms;

	this->ProcessEvent ( pFnPlayDoshTossDialog, &PlayDoshTossDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDoshCaughtDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayDoshCaughtDialog ( )
{
	static UFunction* pFnPlayDoshCaughtDialog = NULL;

	if ( ! pFnPlayDoshCaughtDialog )
		pFnPlayDoshCaughtDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDoshCaughtDialog" );

	AKFDialogManager_execPlayDoshCaughtDialog_Parms PlayDoshCaughtDialog_Parms;

	this->ProcessEvent ( pFnPlayDoshCaughtDialog, &PlayDoshCaughtDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHealingDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHealingDialog ( )
{
	static UFunction* pFnPlayHealingDialog = NULL;

	if ( ! pFnPlayHealingDialog )
		pFnPlayHealingDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHealingDialog" );

	AKFDialogManager_execPlayHealingDialog_Parms PlayHealingDialog_Parms;

	this->ProcessEvent ( pFnPlayHealingDialog, &PlayHealingDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHealMissResponse
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::PlayHealMissResponse ( )
{
	static UFunction* pFnPlayHealMissResponse = NULL;

	if ( ! pFnPlayHealMissResponse )
		pFnPlayHealMissResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHealMissResponse" );

	AKFDialogManager_execPlayHealMissResponse_Parms PlayHealMissResponse_Parms;

	this->ProcessEvent ( pFnPlayHealMissResponse, &PlayHealMissResponse_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayHealMissDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayHealMissDialog ( )
{
	static UFunction* pFnPlayHealMissDialog = NULL;

	if ( ! pFnPlayHealMissDialog )
		pFnPlayHealMissDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayHealMissDialog" );

	AKFDialogManager_execPlayHealMissDialog_Parms PlayHealMissDialog_Parms;

	this->ProcessEvent ( pFnPlayHealMissDialog, &PlayHealMissDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDoorTakeDamageDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayDoorTakeDamageDialog ( )
{
	static UFunction* pFnPlayDoorTakeDamageDialog = NULL;

	if ( ! pFnPlayDoorTakeDamageDialog )
		pFnPlayDoorTakeDamageDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDoorTakeDamageDialog" );

	AKFDialogManager_execPlayDoorTakeDamageDialog_Parms PlayDoorTakeDamageDialog_Parms;

	this->ProcessEvent ( pFnPlayDoorTakeDamageDialog, &PlayDoorTakeDamageDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayUnweldDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayUnweldDialog ( )
{
	static UFunction* pFnPlayUnweldDialog = NULL;

	if ( ! pFnPlayUnweldDialog )
		pFnPlayUnweldDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayUnweldDialog" );

	AKFDialogManager_execPlayUnweldDialog_Parms PlayUnweldDialog_Parms;

	this->ProcessEvent ( pFnPlayUnweldDialog, &PlayUnweldDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayWeldDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayWeldDialog ( )
{
	static UFunction* pFnPlayWeldDialog = NULL;

	if ( ! pFnPlayWeldDialog )
		pFnPlayWeldDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayWeldDialog" );

	AKFDialogManager_execPlayWeldDialog_Parms PlayWeldDialog_Parms;

	this->ProcessEvent ( pFnPlayWeldDialog, &PlayWeldDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.AddDelayedDialogEvent
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::AddDelayedDialogEvent ( )
{
	static UFunction* pFnAddDelayedDialogEvent = NULL;

	if ( ! pFnAddDelayedDialogEvent )
		pFnAddDelayedDialogEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.AddDelayedDialogEvent" );

	AKFDialogManager_execAddDelayedDialogEvent_Parms AddDelayedDialogEvent_Parms;

	this->ProcessEvent ( pFnAddDelayedDialogEvent, &AddDelayedDialogEvent_Parms, NULL );
};

// Function KFGame.KFDialogManager.AddRandomDialogOption
// [0x00C20002] 
// Parameters infos:

void AKFDialogManager::AddRandomDialogOption ( )
{
	static UFunction* pFnAddRandomDialogOption = NULL;

	if ( ! pFnAddRandomDialogOption )
		pFnAddRandomDialogOption = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.AddRandomDialogOption" );

	AKFDialogManager_execAddRandomDialogOption_Parms AddRandomDialogOption_Parms;

	this->ProcessEvent ( pFnAddRandomDialogOption, &AddRandomDialogOption_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayCustomDialogResponse
// [0x00024002] 
// Parameters infos:

void AKFDialogManager::PlayCustomDialogResponse ( )
{
	static UFunction* pFnPlayCustomDialogResponse = NULL;

	if ( ! pFnPlayCustomDialogResponse )
		pFnPlayCustomDialogResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayCustomDialogResponse" );

	AKFDialogManager_execPlayCustomDialogResponse_Parms PlayCustomDialogResponse_Parms;

	this->ProcessEvent ( pFnPlayCustomDialogResponse, &PlayCustomDialogResponse_Parms, NULL );
};

// Function KFGame.KFDialogManager.FindPlayerResponder
// [0x00024002] 
// Parameters infos:

void AKFDialogManager::FindPlayerResponder ( )
{
	static UFunction* pFnFindPlayerResponder = NULL;

	if ( ! pFnFindPlayerResponder )
		pFnFindPlayerResponder = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.FindPlayerResponder" );

	AKFDialogManager_execFindPlayerResponder_Parms FindPlayerResponder_Parms;

	this->ProcessEvent ( pFnFindPlayerResponder, &FindPlayerResponder_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayBasicDialogResponse
// [0x00024002] 
// Parameters infos:

void AKFDialogManager::PlayBasicDialogResponse ( )
{
	static UFunction* pFnPlayBasicDialogResponse = NULL;

	if ( ! pFnPlayBasicDialogResponse )
		pFnPlayBasicDialogResponse = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayBasicDialogResponse" );

	AKFDialogManager_execPlayBasicDialogResponse_Parms PlayBasicDialogResponse_Parms;

	this->ProcessEvent ( pFnPlayBasicDialogResponse, &PlayBasicDialogResponse_Parms, NULL );
};

// Function KFGame.KFDialogManager.BasicResponseDelegate
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::BasicResponseDelegate ( )
{
	static UFunction* pFnBasicResponseDelegate = NULL;

	if ( ! pFnBasicResponseDelegate )
		pFnBasicResponseDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.BasicResponseDelegate" );

	AKFDialogManager_execBasicResponseDelegate_Parms BasicResponseDelegate_Parms;

	this->ProcessEvent ( pFnBasicResponseDelegate, &BasicResponseDelegate_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayerIsPlayingDialogEvent
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PlayerIsPlayingDialogEvent ( )
{
	static UFunction* pFnPlayerIsPlayingDialogEvent = NULL;

	if ( ! pFnPlayerIsPlayingDialogEvent )
		pFnPlayerIsPlayingDialogEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayerIsPlayingDialogEvent" );

	AKFDialogManager_execPlayerIsPlayingDialogEvent_Parms PlayerIsPlayingDialogEvent_Parms;

	this->ProcessEvent ( pFnPlayerIsPlayingDialogEvent, &PlayerIsPlayingDialogEvent_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayDialogEvent
// [0x00820002] 
// Parameters infos:

void AKFDialogManager::PlayDialogEvent ( )
{
	static UFunction* pFnPlayDialogEvent = NULL;

	if ( ! pFnPlayDialogEvent )
		pFnPlayDialogEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayDialogEvent" );

	AKFDialogManager_execPlayDialogEvent_Parms PlayDialogEvent_Parms;

	this->ProcessEvent ( pFnPlayDialogEvent, &PlayDialogEvent_Parms, NULL );
};

// Function KFGame.KFDialogManager.DialogEventCanBePlayed
// [0x00420002] 
// Parameters infos:

void AKFDialogManager::DialogEventCanBePlayed ( )
{
	static UFunction* pFnDialogEventCanBePlayed = NULL;

	if ( ! pFnDialogEventCanBePlayed )
		pFnDialogEventCanBePlayed = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.DialogEventCanBePlayed" );

	AKFDialogManager_execDialogEventCanBePlayed_Parms DialogEventCanBePlayed_Parms;

	this->ProcessEvent ( pFnDialogEventCanBePlayed, &DialogEventCanBePlayed_Parms, NULL );
};

// Function KFGame.KFDialogManager.DialogIsCoolingDown
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::DialogIsCoolingDown ( )
{
	static UFunction* pFnDialogIsCoolingDown = NULL;

	if ( ! pFnDialogIsCoolingDown )
		pFnDialogIsCoolingDown = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.DialogIsCoolingDown" );

	AKFDialogManager_execDialogIsCoolingDown_Parms DialogIsCoolingDown_Parms;

	this->ProcessEvent ( pFnDialogIsCoolingDown, &DialogIsCoolingDown_Parms, NULL );
};

// Function KFGame.KFDialogManager.UpdateDelayedDialog
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::UpdateDelayedDialog ( )
{
	static UFunction* pFnUpdateDelayedDialog = NULL;

	if ( ! pFnUpdateDelayedDialog )
		pFnUpdateDelayedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.UpdateDelayedDialog" );

	AKFDialogManager_execUpdateDelayedDialog_Parms UpdateDelayedDialog_Parms;

	this->ProcessEvent ( pFnUpdateDelayedDialog, &UpdateDelayedDialog_Parms, NULL );
};

// Function KFGame.KFDialogManager.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDialogManager::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.Tick" );

	AKFDialogManager_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFDialogManager.SetTraderTime
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::SetTraderTime ( )
{
	static UFunction* pFnSetTraderTime = NULL;

	if ( ! pFnSetTraderTime )
		pFnSetTraderTime = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.SetTraderTime" );

	AKFDialogManager_execSetTraderTime_Parms SetTraderTime_Parms;

	this->ProcessEvent ( pFnSetTraderTime, &SetTraderTime_Parms, NULL );
};

// Function KFGame.KFDialogManager.PlayerCanSpotEnemy
// [0x00024002] 
// Parameters infos:

void AKFDialogManager::PlayerCanSpotEnemy ( )
{
	static UFunction* pFnPlayerCanSpotEnemy = NULL;

	if ( ! pFnPlayerCanSpotEnemy )
		pFnPlayerCanSpotEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PlayerCanSpotEnemy" );

	AKFDialogManager_execPlayerCanSpotEnemy_Parms PlayerCanSpotEnemy_Parms;

	this->ProcessEvent ( pFnPlayerCanSpotEnemy, &PlayerCanSpotEnemy_Parms, NULL );
};

// Function KFGame.KFDialogManager.PawnWithinPawnLOS
// [0x00024002] 
// Parameters infos:

void AKFDialogManager::PawnWithinPawnLOS ( )
{
	static UFunction* pFnPawnWithinPawnLOS = NULL;

	if ( ! pFnPawnWithinPawnLOS )
		pFnPawnWithinPawnLOS = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PawnWithinPawnLOS" );

	AKFDialogManager_execPawnWithinPawnLOS_Parms PawnWithinPawnLOS_Parms;

	this->ProcessEvent ( pFnPawnWithinPawnLOS, &PawnWithinPawnLOS_Parms, NULL );
};

// Function KFGame.KFDialogManager.ActorWithinPawnRadius
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::ActorWithinPawnRadius ( )
{
	static UFunction* pFnActorWithinPawnRadius = NULL;

	if ( ! pFnActorWithinPawnRadius )
		pFnActorWithinPawnRadius = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.ActorWithinPawnRadius" );

	AKFDialogManager_execActorWithinPawnRadius_Parms ActorWithinPawnRadius_Parms;

	this->ProcessEvent ( pFnActorWithinPawnRadius, &ActorWithinPawnRadius_Parms, NULL );
};

// Function KFGame.KFDialogManager.ActorWithinPawnFOV
// [0x00820002] 
// Parameters infos:

void AKFDialogManager::ActorWithinPawnFOV ( )
{
	static UFunction* pFnActorWithinPawnFOV = NULL;

	if ( ! pFnActorWithinPawnFOV )
		pFnActorWithinPawnFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.ActorWithinPawnFOV" );

	AKFDialogManager_execActorWithinPawnFOV_Parms ActorWithinPawnFOV_Parms;

	this->ProcessEvent ( pFnActorWithinPawnFOV, &ActorWithinPawnFOV_Parms, NULL );
};

// Function KFGame.KFDialogManager.PawnCanSpotActor
// [0x00024002] 
// Parameters infos:

void AKFDialogManager::PawnCanSpotActor ( )
{
	static UFunction* pFnPawnCanSpotActor = NULL;

	if ( ! pFnPawnCanSpotActor )
		pFnPawnCanSpotActor = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PawnCanSpotActor" );

	AKFDialogManager_execPawnCanSpotActor_Parms PawnCanSpotActor_Parms;

	this->ProcessEvent ( pFnPawnCanSpotActor, &PawnCanSpotActor_Parms, NULL );
};

// Function KFGame.KFDialogManager.PawnCanSpotPawn
// [0x00024002] 
// Parameters infos:

void AKFDialogManager::PawnCanSpotPawn ( )
{
	static UFunction* pFnPawnCanSpotPawn = NULL;

	if ( ! pFnPawnCanSpotPawn )
		pFnPawnCanSpotPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PawnCanSpotPawn" );

	AKFDialogManager_execPawnCanSpotPawn_Parms PawnCanSpotPawn_Parms;

	this->ProcessEvent ( pFnPawnCanSpotPawn, &PawnCanSpotPawn_Parms, NULL );
};

// Function KFGame.KFDialogManager.PawnIsValidPlayer
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::PawnIsValidPlayer ( )
{
	static UFunction* pFnPawnIsValidPlayer = NULL;

	if ( ! pFnPawnIsValidPlayer )
		pFnPawnIsValidPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.PawnIsValidPlayer" );

	AKFDialogManager_execPawnIsValidPlayer_Parms PawnIsValidPlayer_Parms;

	this->ProcessEvent ( pFnPawnIsValidPlayer, &PawnIsValidPlayer_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventIsOnlyPlayedLocally
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventIsOnlyPlayedLocally ( )
{
	static UFunction* pFnGetEventIsOnlyPlayedLocally = NULL;

	if ( ! pFnGetEventIsOnlyPlayedLocally )
		pFnGetEventIsOnlyPlayedLocally = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventIsOnlyPlayedLocally" );

	AKFDialogManager_execGetEventIsOnlyPlayedLocally_Parms GetEventIsOnlyPlayedLocally_Parms;

	this->ProcessEvent ( pFnGetEventIsOnlyPlayedLocally, &GetEventIsOnlyPlayedLocally_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventCoolDownCategory
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventCoolDownCategory ( )
{
	static UFunction* pFnGetEventCoolDownCategory = NULL;

	if ( ! pFnGetEventCoolDownCategory )
		pFnGetEventCoolDownCategory = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventCoolDownCategory" );

	AKFDialogManager_execGetEventCoolDownCategory_Parms GetEventCoolDownCategory_Parms;

	this->ProcessEvent ( pFnGetEventCoolDownCategory, &GetEventCoolDownCategory_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventCoolDownRadiusSq
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventCoolDownRadiusSq ( )
{
	static UFunction* pFnGetEventCoolDownRadiusSq = NULL;

	if ( ! pFnGetEventCoolDownRadiusSq )
		pFnGetEventCoolDownRadiusSq = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventCoolDownRadiusSq" );

	AKFDialogManager_execGetEventCoolDownRadiusSq_Parms GetEventCoolDownRadiusSq_Parms;

	this->ProcessEvent ( pFnGetEventCoolDownRadiusSq, &GetEventCoolDownRadiusSq_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventCoolDownRadius
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventCoolDownRadius ( )
{
	static UFunction* pFnGetEventCoolDownRadius = NULL;

	if ( ! pFnGetEventCoolDownRadius )
		pFnGetEventCoolDownRadius = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventCoolDownRadius" );

	AKFDialogManager_execGetEventCoolDownRadius_Parms GetEventCoolDownRadius_Parms;

	this->ProcessEvent ( pFnGetEventCoolDownRadius, &GetEventCoolDownRadius_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventCoolDownTime
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventCoolDownTime ( )
{
	static UFunction* pFnGetEventCoolDownTime = NULL;

	if ( ! pFnGetEventCoolDownTime )
		pFnGetEventCoolDownTime = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventCoolDownTime" );

	AKFDialogManager_execGetEventCoolDownTime_Parms GetEventCoolDownTime_Parms;

	this->ProcessEvent ( pFnGetEventCoolDownTime, &GetEventCoolDownTime_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventPriority
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventPriority ( )
{
	static UFunction* pFnGetEventPriority = NULL;

	if ( ! pFnGetEventPriority )
		pFnGetEventPriority = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventPriority" );

	AKFDialogManager_execGetEventPriority_Parms GetEventPriority_Parms;

	this->ProcessEvent ( pFnGetEventPriority, &GetEventPriority_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventFOV
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventFOV ( )
{
	static UFunction* pFnGetEventFOV = NULL;

	if ( ! pFnGetEventFOV )
		pFnGetEventFOV = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventFOV" );

	AKFDialogManager_execGetEventFOV_Parms GetEventFOV_Parms;

	this->ProcessEvent ( pFnGetEventFOV, &GetEventFOV_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventRadiusSq
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventRadiusSq ( )
{
	static UFunction* pFnGetEventRadiusSq = NULL;

	if ( ! pFnGetEventRadiusSq )
		pFnGetEventRadiusSq = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventRadiusSq" );

	AKFDialogManager_execGetEventRadiusSq_Parms GetEventRadiusSq_Parms;

	this->ProcessEvent ( pFnGetEventRadiusSq, &GetEventRadiusSq_Parms, NULL );
};

// Function KFGame.KFDialogManager.GetEventRadius
// [0x00020002] 
// Parameters infos:

void AKFDialogManager::GetEventRadius ( )
{
	static UFunction* pFnGetEventRadius = NULL;

	if ( ! pFnGetEventRadius )
		pFnGetEventRadius = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.GetEventRadius" );

	AKFDialogManager_execGetEventRadius_Parms GetEventRadius_Parms;

	this->ProcessEvent ( pFnGetEventRadius, &GetEventRadius_Parms, NULL );
};

// Function KFGame.KFDialogManager.OnFinishedDialog
// [0x00520000] 
// Parameters infos:

void AKFDialogManager::OnFinishedDialog ( )
{
	static UFunction* pFnOnFinishedDialog = NULL;

	if ( ! pFnOnFinishedDialog )
		pFnOnFinishedDialog = UObject::FindObject< UFunction > ( "Function KFGame.KFDialogManager.OnFinishedDialog" );

	AKFDialogManager_execOnFinishedDialog_Parms OnFinishedDialog_Parms;

	this->ProcessEvent ( pFnOnFinishedDialog, &OnFinishedDialog_Parms, NULL );
};

// Function KFGame.KFDT_Toxic.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Toxic::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Toxic.GetDamageeDialogID" );

	UKFDT_Toxic_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Toxic.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Toxic::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Toxic.GetDamagerDialogID" );

	UKFDT_Toxic_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Toxic.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Toxic::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Toxic.GetKillerDialogID" );

	UKFDT_Toxic_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDominantDirectionalLightning.CleanupAnimation
// [0x00020102] 
// Parameters infos:

void AKFDominantDirectionalLightning::CleanupAnimation ( )
{
	static UFunction* pFnCleanupAnimation = NULL;

	if ( ! pFnCleanupAnimation )
		pFnCleanupAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFDominantDirectionalLightning.CleanupAnimation" );

	AKFDominantDirectionalLightning_execCleanupAnimation_Parms CleanupAnimation_Parms;

	this->ProcessEvent ( pFnCleanupAnimation, &CleanupAnimation_Parms, NULL );
};

// Function KFGame.KFDominantDirectionalLightning.Timer_CleanupAnimation
// [0x00020002] 
// Parameters infos:

void AKFDominantDirectionalLightning::Timer_CleanupAnimation ( )
{
	static UFunction* pFnTimer_CleanupAnimation = NULL;

	if ( ! pFnTimer_CleanupAnimation )
		pFnTimer_CleanupAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFDominantDirectionalLightning.Timer_CleanupAnimation" );

	AKFDominantDirectionalLightning_execTimer_CleanupAnimation_Parms Timer_CleanupAnimation_Parms;

	this->ProcessEvent ( pFnTimer_CleanupAnimation, &Timer_CleanupAnimation_Parms, NULL );
};

// Function KFGame.KFDominantDirectionalLightning.TriggerAnimation
// [0x00020102] 
// Parameters infos:

void AKFDominantDirectionalLightning::TriggerAnimation ( )
{
	static UFunction* pFnTriggerAnimation = NULL;

	if ( ! pFnTriggerAnimation )
		pFnTriggerAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFDominantDirectionalLightning.TriggerAnimation" );

	AKFDominantDirectionalLightning_execTriggerAnimation_Parms TriggerAnimation_Parms;

	this->ProcessEvent ( pFnTriggerAnimation, &TriggerAnimation_Parms, NULL );
};

// Function KFGame.KFDominantDirectionalLightning.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDominantDirectionalLightning::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDominantDirectionalLightning.ReplicatedEvent" );

	AKFDominantDirectionalLightning_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFDominantDirectionalLightning.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDominantDirectionalLightning::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFDominantDirectionalLightning.PostBeginPlay" );

	AKFDominantDirectionalLightning_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFKActorSpawnable_Door.CheckOnFlatGround
// [0x00820002] 
// Parameters infos:

void AKFKActorSpawnable_Door::CheckOnFlatGround ( )
{
	static UFunction* pFnCheckOnFlatGround = NULL;

	if ( ! pFnCheckOnFlatGround )
		pFnCheckOnFlatGround = UObject::FindObject< UFunction > ( "Function KFGame.KFKActorSpawnable_Door.CheckOnFlatGround" );

	AKFKActorSpawnable_Door_execCheckOnFlatGround_Parms CheckOnFlatGround_Parms;

	this->ProcessEvent ( pFnCheckOnFlatGround, &CheckOnFlatGround_Parms, NULL );
};

// Function KFGame.KFKActorSpawnable_Door.HideNonFlatMesh
// [0x00020102] 
// Parameters infos:

void AKFKActorSpawnable_Door::HideNonFlatMesh ( )
{
	static UFunction* pFnHideNonFlatMesh = NULL;

	if ( ! pFnHideNonFlatMesh )
		pFnHideNonFlatMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFKActorSpawnable_Door.HideNonFlatMesh" );

	AKFKActorSpawnable_Door_execHideNonFlatMesh_Parms HideNonFlatMesh_Parms;

	this->ProcessEvent ( pFnHideNonFlatMesh, &HideNonFlatMesh_Parms, NULL );
};

// Function KFGame.KFKActorSpawnable_Door.OnSleepRBPhysics
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFKActorSpawnable_Door::eventOnSleepRBPhysics ( )
{
	static UFunction* pFnOnSleepRBPhysics = NULL;

	if ( ! pFnOnSleepRBPhysics )
		pFnOnSleepRBPhysics = UObject::FindObject< UFunction > ( "Function KFGame.KFKActorSpawnable_Door.OnSleepRBPhysics" );

	AKFKActorSpawnable_Door_eventOnSleepRBPhysics_Parms OnSleepRBPhysics_Parms;

	this->ProcessEvent ( pFnOnSleepRBPhysics, &OnSleepRBPhysics_Parms, NULL );
};

// Function KFGame.KFExplosionActorReplicated.GetMuzzleEffectLocation
// [0x00020102] 
// Parameters infos:

void AKFExplosionActorReplicated::GetMuzzleEffectLocation ( )
{
	static UFunction* pFnGetMuzzleEffectLocation = NULL;

	if ( ! pFnGetMuzzleEffectLocation )
		pFnGetMuzzleEffectLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorReplicated.GetMuzzleEffectLocation" );

	AKFExplosionActorReplicated_execGetMuzzleEffectLocation_Parms GetMuzzleEffectLocation_Parms;

	this->ProcessEvent ( pFnGetMuzzleEffectLocation, &GetMuzzleEffectLocation_Parms, NULL );
};

// Function KFGame.KFExplosionActorReplicated.SetSyncToMuzzleLocation
// [0x00020102] 
// Parameters infos:

void AKFExplosionActorReplicated::SetSyncToMuzzleLocation ( )
{
	static UFunction* pFnSetSyncToMuzzleLocation = NULL;

	if ( ! pFnSetSyncToMuzzleLocation )
		pFnSetSyncToMuzzleLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorReplicated.SetSyncToMuzzleLocation" );

	AKFExplosionActorReplicated_execSetSyncToMuzzleLocation_Parms SetSyncToMuzzleLocation_Parms;

	this->ProcessEvent ( pFnSetSyncToMuzzleLocation, &SetSyncToMuzzleLocation_Parms, NULL );
};

// Function KFGame.KFExplosionActorReplicated.SpawnExplosionParticleSystem
// [0x00020102] 
// Parameters infos:

void AKFExplosionActorReplicated::SpawnExplosionParticleSystem ( )
{
	static UFunction* pFnSpawnExplosionParticleSystem = NULL;

	if ( ! pFnSpawnExplosionParticleSystem )
		pFnSpawnExplosionParticleSystem = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorReplicated.SpawnExplosionParticleSystem" );

	AKFExplosionActorReplicated_execSpawnExplosionParticleSystem_Parms SpawnExplosionParticleSystem_Parms;

	this->ProcessEvent ( pFnSpawnExplosionParticleSystem, &SpawnExplosionParticleSystem_Parms, NULL );
};

// Function KFGame.KFExplosionActorReplicated.Explode
// [0x00824102] 
// Parameters infos:

void AKFExplosionActorReplicated::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorReplicated.Explode" );

	AKFExplosionActorReplicated_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function KFGame.KFExplosionActorReplicated.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFExplosionActorReplicated::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorReplicated.ReplicatedEvent" );

	AKFExplosionActorReplicated_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFDT_Ballistic.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Ballistic::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Ballistic.GetDamageeDialogID" );

	UKFDT_Ballistic_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Ballistic.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Ballistic::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Ballistic.GetKillerDialogID" );

	UKFDT_Ballistic_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Ballistic.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Ballistic.CanDismemberHitZone" );

	UKFDT_Ballistic_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function KFGame.KFDroppedPickup_Cash.ServerNotifyMinigameHit
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFDroppedPickup_Cash::ServerNotifyMinigameHit ( )
{
	static UFunction* pFnServerNotifyMinigameHit = NULL;

	if ( ! pFnServerNotifyMinigameHit )
		pFnServerNotifyMinigameHit = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup_Cash.ServerNotifyMinigameHit" );

	AKFDroppedPickup_Cash_execServerNotifyMinigameHit_Parms ServerNotifyMinigameHit_Parms;

	this->ProcessEvent ( pFnServerNotifyMinigameHit, &ServerNotifyMinigameHit_Parms, NULL );
};

// Function KFGame.KFDroppedPickup_Cash.NotifyMinigameHit
// [0x00020102] 
// Parameters infos:

void AKFDroppedPickup_Cash::NotifyMinigameHit ( )
{
	static UFunction* pFnNotifyMinigameHit = NULL;

	if ( ! pFnNotifyMinigameHit )
		pFnNotifyMinigameHit = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup_Cash.NotifyMinigameHit" );

	AKFDroppedPickup_Cash_execNotifyMinigameHit_Parms NotifyMinigameHit_Parms;

	this->ProcessEvent ( pFnNotifyMinigameHit, &NotifyMinigameHit_Parms, NULL );
};

// Function KFGame.KFDroppedPickup_Cash.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDroppedPickup_Cash::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup_Cash.Destroyed" );

	AKFDroppedPickup_Cash_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFDroppedPickup_Cash.SetPickupMesh
// [0x00020102] 
// Parameters infos:

void AKFDroppedPickup_Cash::SetPickupMesh ( )
{
	static UFunction* pFnSetPickupMesh = NULL;

	if ( ! pFnSetPickupMesh )
		pFnSetPickupMesh = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup_Cash.SetPickupMesh" );

	AKFDroppedPickup_Cash_execSetPickupMesh_Parms SetPickupMesh_Parms;

	this->ProcessEvent ( pFnSetPickupMesh, &SetPickupMesh_Parms, NULL );
};

// Function KFGame.KFDroppedPickup_Cash.AddDoshForBenefector
// [0x00080002] 
// Parameters infos:

void AKFDroppedPickup_Cash::AddDoshForBenefector ( )
{
	static UFunction* pFnAddDoshForBenefector = NULL;

	if ( ! pFnAddDoshForBenefector )
		pFnAddDoshForBenefector = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup_Cash.AddDoshForBenefector" );

	AKFDroppedPickup_Cash_execAddDoshForBenefector_Parms AddDoshForBenefector_Parms;

	this->ProcessEvent ( pFnAddDoshForBenefector, &AddDoshForBenefector_Parms, NULL );
};

// Function KFGame.KFDroppedPickup_Cash.GiveTo
// [0x00020002] 
// Parameters infos:

void AKFDroppedPickup_Cash::GiveTo ( )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = UObject::FindObject< UFunction > ( "Function KFGame.KFDroppedPickup_Cash.GiveTo" );

	AKFDroppedPickup_Cash_execGiveTo_Parms GiveTo_Parms;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function KFGame.KFInterface_MinigameTarget.IsAlive
// [0x00020100] 
// Parameters infos:

void UKFInterface_MinigameTarget::IsAlive ( )
{
	static UFunction* pFnIsAlive = NULL;

	if ( ! pFnIsAlive )
		pFnIsAlive = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MinigameTarget.IsAlive" );

	UKFInterface_MinigameTarget_execIsAlive_Parms IsAlive_Parms;

	this->ProcessEvent ( pFnIsAlive, &IsAlive_Parms, NULL );
};

// Function KFGame.KFInterface_MinigameTarget.InvalidHit
// [0x00020000] 
// Parameters infos:

void UKFInterface_MinigameTarget::InvalidHit ( )
{
	static UFunction* pFnInvalidHit = NULL;

	if ( ! pFnInvalidHit )
		pFnInvalidHit = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MinigameTarget.InvalidHit" );

	UKFInterface_MinigameTarget_execInvalidHit_Parms InvalidHit_Parms;

	this->ProcessEvent ( pFnInvalidHit, &InvalidHit_Parms, NULL );
};

// Function KFGame.KFInterface_MinigameTarget.ValidHit
// [0x00020000] 
// Parameters infos:

void UKFInterface_MinigameTarget::ValidHit ( )
{
	static UFunction* pFnValidHit = NULL;

	if ( ! pFnValidHit )
		pFnValidHit = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_MinigameTarget.ValidHit" );

	UKFInterface_MinigameTarget_execValidHit_Parms ValidHit_Parms;

	this->ProcessEvent ( pFnValidHit, &ValidHit_Parms, NULL );
};

// Function KFGame.KFDT_Ballistic_Shell.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_Shell::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Ballistic_Shell.CanDismemberHitZone" );

	UKFDT_Ballistic_Shell_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function KFGame.KFDT_Toxic_DemoNuke.AlwaysPoisons
// [0x00022002] 
// Parameters infos:

void UKFDT_Toxic_DemoNuke::AlwaysPoisons ( )
{
	static UFunction* pFnAlwaysPoisons = NULL;

	if ( ! pFnAlwaysPoisons )
		pFnAlwaysPoisons = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Toxic_DemoNuke.AlwaysPoisons" );

	UKFDT_Toxic_DemoNuke_execAlwaysPoisons_Parms AlwaysPoisons_Parms;

	this->ProcessEvent ( pFnAlwaysPoisons, &AlwaysPoisons_Parms, NULL );
};

// Function KFGame.KFDT_DemoNuke_Toxic_Lingering.AlwaysPoisons
// [0x00022002] 
// Parameters infos:

void UKFDT_DemoNuke_Toxic_Lingering::AlwaysPoisons ( )
{
	static UFunction* pFnAlwaysPoisons = NULL;

	if ( ! pFnAlwaysPoisons )
		pFnAlwaysPoisons = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_DemoNuke_Toxic_Lingering.AlwaysPoisons" );

	UKFDT_DemoNuke_Toxic_Lingering_execAlwaysPoisons_Parms AlwaysPoisons_Parms;

	this->ProcessEvent ( pFnAlwaysPoisons, &AlwaysPoisons_Parms, NULL );
};

// Function KFGame.KFDT_EMP.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_EMP::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_EMP.GetDamagerDialogID" );

	UKFDT_EMP_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_EMP.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_EMP::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_EMP.GetKillerDialogID" );

	UKFDT_EMP_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Fire_Ground.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_Ground::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Fire_Ground.GetDamageeDialogID" );

	UKFDT_Fire_Ground_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Fire_Ground.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_Ground::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Fire_Ground.GetDamagerDialogID" );

	UKFDT_Fire_Ground_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Fire_Ground.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_Ground::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Fire_Ground.GetKillerDialogID" );

	UKFDT_Fire_Ground_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Freeze.ApplyFreeze
// [0x00022002] 
// Parameters infos:

void UKFDT_Freeze::ApplyFreeze ( )
{
	static UFunction* pFnApplyFreeze = NULL;

	if ( ! pFnApplyFreeze )
		pFnApplyFreeze = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Freeze.ApplyFreeze" );

	UKFDT_Freeze_execApplyFreeze_Parms ApplyFreeze_Parms;

	this->ProcessEvent ( pFnApplyFreeze, &ApplyFreeze_Parms, NULL );
};

// Function KFGame.KFDT_Freeze.PlayShatter
// [0x00026002] 
// Parameters infos:

void UKFDT_Freeze::PlayShatter ( )
{
	static UFunction* pFnPlayShatter = NULL;

	if ( ! pFnPlayShatter )
		pFnPlayShatter = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Freeze.PlayShatter" );

	UKFDT_Freeze_execPlayShatter_Parms PlayShatter_Parms;

	this->ProcessEvent ( pFnPlayShatter, &PlayShatter_Parms, NULL );
};

// Function KFGame.KFDT_Freeze.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Freeze::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Freeze.GetDamagerDialogID" );

	UKFDT_Freeze_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Freeze.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Freeze::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Freeze.GetKillerDialogID" );

	UKFDT_Freeze_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_HuskCannonDot.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_HuskCannonDot::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_HuskCannonDot.GetDamageeDialogID" );

	UKFDT_HuskCannonDot_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function KFGame.KFDT_HuskCannonDot.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_HuskCannonDot::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_HuskCannonDot.GetDamagerDialogID" );

	UKFDT_HuskCannonDot_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_HuskCannonDot.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_HuskCannonDot::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_HuskCannonDot.GetKillerDialogID" );

	UKFDT_HuskCannonDot_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Piercing.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Piercing::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Piercing.CanDismemberHitZone" );

	UKFDT_Piercing_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function KFGame.KFDT_Slashing.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Slashing::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Slashing.GetKillerDialogID" );

	UKFDT_Slashing_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function KFGame.KFDT_Slashing.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Slashing.CanDismemberHitZone" );

	UKFDT_Slashing_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function KFGame.KFDT_Slashing.GetBloodScale
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing::GetBloodScale ( )
{
	static UFunction* pFnGetBloodScale = NULL;

	if ( ! pFnGetBloodScale )
		pFnGetBloodScale = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Slashing.GetBloodScale" );

	UKFDT_Slashing_execGetBloodScale_Parms GetBloodScale_Parms;

	this->ProcessEvent ( pFnGetBloodScale, &GetBloodScale_Parms, NULL );
};

// Function KFGame.KFDT_Slashing.AddBloodSpread
// [0x00C22102] 
// Parameters infos:

void UKFDT_Slashing::AddBloodSpread ( )
{
	static UFunction* pFnAddBloodSpread = NULL;

	if ( ! pFnAddBloodSpread )
		pFnAddBloodSpread = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Slashing.AddBloodSpread" );

	UKFDT_Slashing_execAddBloodSpread_Parms AddBloodSpread_Parms;

	this->ProcessEvent ( pFnAddBloodSpread, &AddBloodSpread_Parms, NULL );
};

// Function KFGame.KFDT_Slashing.GetLastSlashDirection
// [0x00822102] 
// Parameters infos:

void UKFDT_Slashing::GetLastSlashDirection ( )
{
	static UFunction* pFnGetLastSlashDirection = NULL;

	if ( ! pFnGetLastSlashDirection )
		pFnGetLastSlashDirection = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Slashing.GetLastSlashDirection" );

	UKFDT_Slashing_execGetLastSlashDirection_Parms GetLastSlashDirection_Parms;

	this->ProcessEvent ( pFnGetLastSlashDirection, &GetLastSlashDirection_Parms, NULL );
};

// Function KFGame.KFDT_Toxic_AcidicRounds.AlwaysPoisons
// [0x00022002] 
// Parameters infos:

void UKFDT_Toxic_AcidicRounds::AlwaysPoisons ( )
{
	static UFunction* pFnAlwaysPoisons = NULL;

	if ( ! pFnAlwaysPoisons )
		pFnAlwaysPoisons = UObject::FindObject< UFunction > ( "Function KFGame.KFDT_Toxic_AcidicRounds.AlwaysPoisons" );

	UKFDT_Toxic_AcidicRounds_execAlwaysPoisons_Parms AlwaysPoisons_Parms;

	this->ProcessEvent ( pFnAlwaysPoisons, &AlwaysPoisons_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.TempMessagePlayers
// [0x00020102] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::TempMessagePlayers ( )
{
	static UFunction* pFnTempMessagePlayers = NULL;

	if ( ! pFnTempMessagePlayers )
		pFnTempMessagePlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.TempMessagePlayers" );

	AKFDynamicFogAndDamageVolumeInfo_execTempMessagePlayers_Parms TempMessagePlayers_Parms;

	this->ProcessEvent ( pFnTempMessagePlayers, &TempMessagePlayers_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.SetEnabled
// [0x00020102] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::SetEnabled ( )
{
	static UFunction* pFnSetEnabled = NULL;

	if ( ! pFnSetEnabled )
		pFnSetEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.SetEnabled" );

	AKFDynamicFogAndDamageVolumeInfo_execSetEnabled_Parms SetEnabled_Parms;

	this->ProcessEvent ( pFnSetEnabled, &SetEnabled_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.StartBlendOut
// [0x00020102] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::StartBlendOut ( )
{
	static UFunction* pFnStartBlendOut = NULL;

	if ( ! pFnStartBlendOut )
		pFnStartBlendOut = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.StartBlendOut" );

	AKFDynamicFogAndDamageVolumeInfo_execStartBlendOut_Parms StartBlendOut_Parms;

	this->ProcessEvent ( pFnStartBlendOut, &StartBlendOut_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.StartBlendIn
// [0x00020102] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::StartBlendIn ( )
{
	static UFunction* pFnStartBlendIn = NULL;

	if ( ! pFnStartBlendIn )
		pFnStartBlendIn = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.StartBlendIn" );

	AKFDynamicFogAndDamageVolumeInfo_execStartBlendIn_Parms StartBlendIn_Parms;

	this->ProcessEvent ( pFnStartBlendIn, &StartBlendIn_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.DeActivate
// [0x00020102] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::DeActivate ( )
{
	static UFunction* pFnDeActivate = NULL;

	if ( ! pFnDeActivate )
		pFnDeActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.DeActivate" );

	AKFDynamicFogAndDamageVolumeInfo_execDeActivate_Parms DeActivate_Parms;

	this->ProcessEvent ( pFnDeActivate, &DeActivate_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.Activate
// [0x00020102] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.Activate" );

	AKFDynamicFogAndDamageVolumeInfo_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.TimerPop
// [0x00020002] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::TimerPop ( )
{
	static UFunction* pFnTimerPop = NULL;

	if ( ! pFnTimerPop )
		pFnTimerPop = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.TimerPop" );

	AKFDynamicFogAndDamageVolumeInfo_execTimerPop_Parms TimerPop_Parms;

	this->ProcessEvent ( pFnTimerPop, &TimerPop_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.CausePainTo
// [0x00020002] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::CausePainTo ( )
{
	static UFunction* pFnCausePainTo = NULL;

	if ( ! pFnCausePainTo )
		pFnCausePainTo = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.CausePainTo" );

	AKFDynamicFogAndDamageVolumeInfo_execCausePainTo_Parms CausePainTo_Parms;

	this->ProcessEvent ( pFnCausePainTo, &CausePainTo_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.Touch" );

	AKFDynamicFogAndDamageVolumeInfo_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.Tick
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.Tick" );

	AKFDynamicFogAndDamageVolumeInfo_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.SetFogDensity
// [0x00020102] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::SetFogDensity ( )
{
	static UFunction* pFnSetFogDensity = NULL;

	if ( ! pFnSetFogDensity )
		pFnSetFogDensity = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.SetFogDensity" );

	AKFDynamicFogAndDamageVolumeInfo_execSetFogDensity_Parms SetFogDensity_Parms;

	this->ProcessEvent ( pFnSetFogDensity, &SetFogDensity_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.OnToggle
// [0x00020102] 
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::OnToggle ( )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.OnToggle" );

	AKFDynamicFogAndDamageVolumeInfo_execOnToggle_Parms OnToggle_Parms;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.ReplicatedEvent" );

	AKFDynamicFogAndDamageVolumeInfo_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFDynamicFogAndDamageVolumeInfo.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDynamicFogAndDamageVolumeInfo::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFDynamicFogAndDamageVolumeInfo.PostBeginPlay" );

	AKFDynamicFogAndDamageVolumeInfo_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFEmit_Path.ShouldStopPathing
// [0x00020102] 
// Parameters infos:

void AKFEmit_Path::ShouldStopPathing ( )
{
	static UFunction* pFnShouldStopPathing = NULL;

	if ( ! pFnShouldStopPathing )
		pFnShouldStopPathing = UObject::FindObject< UFunction > ( "Function KFGame.KFEmit_Path.ShouldStopPathing" );

	AKFEmit_Path_execShouldStopPathing_Parms ShouldStopPathing_Parms;

	this->ProcessEvent ( pFnShouldStopPathing, &ShouldStopPathing_Parms, NULL );
};

// Function KFGame.KFEmit_Path.StartNextPath
// [0x00020102] 
// Parameters infos:

void AKFEmit_Path::StartNextPath ( )
{
	static UFunction* pFnStartNextPath = NULL;

	if ( ! pFnStartNextPath )
		pFnStartNextPath = UObject::FindObject< UFunction > ( "Function KFGame.KFEmit_Path.StartNextPath" );

	AKFEmit_Path_execStartNextPath_Parms StartNextPath_Parms;

	this->ProcessEvent ( pFnStartNextPath, &StartNextPath_Parms, NULL );
};

// Function KFGame.KFEmit_Path.SetTemplate
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFEmit_Path::eventSetTemplate ( )
{
	static UFunction* pFnSetTemplate = NULL;

	if ( ! pFnSetTemplate )
		pFnSetTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFEmit_Path.SetTemplate" );

	AKFEmit_Path_eventSetTemplate_Parms SetTemplate_Parms;

	this->ProcessEvent ( pFnSetTemplate, &SetTemplate_Parms, NULL );
};

// Function KFGame.KFEmit_Path.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFEmit_Path::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = UObject::FindObject< UFunction > ( "Function KFGame.KFEmit_Path.SetInitialState" );

	AKFEmit_Path_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function KFGame.KFEmit_Path.SetDestination
// [0x00020102] 
// Parameters infos:

void AKFEmit_Path::SetDestination ( )
{
	static UFunction* pFnSetDestination = NULL;

	if ( ! pFnSetDestination )
		pFnSetDestination = UObject::FindObject< UFunction > ( "Function KFGame.KFEmit_Path.SetDestination" );

	AKFEmit_Path_execSetDestination_Parms SetDestination_Parms;

	this->ProcessEvent ( pFnSetDestination, &SetDestination_Parms, NULL );
};

// Function KFGame.KFEmit_Path.PostBeginPlay
// [0x00820102] 
// Parameters infos:

void AKFEmit_Path::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFEmit_Path.PostBeginPlay" );

	AKFEmit_Path_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFEmit_TraderPath.ShouldStopPathing
// [0x00020102] 
// Parameters infos:

void AKFEmit_TraderPath::ShouldStopPathing ( )
{
	static UFunction* pFnShouldStopPathing = NULL;

	if ( ! pFnShouldStopPathing )
		pFnShouldStopPathing = UObject::FindObject< UFunction > ( "Function KFGame.KFEmit_TraderPath.ShouldStopPathing" );

	AKFEmit_TraderPath_execShouldStopPathing_Parms ShouldStopPathing_Parms;

	this->ProcessEvent ( pFnShouldStopPathing, &ShouldStopPathing_Parms, NULL );
};

// Function KFGame.KFEmit_ScriptedPath.ShouldStopPathing
// [0x00020102] 
// Parameters infos:

void AKFEmit_ScriptedPath::ShouldStopPathing ( )
{
	static UFunction* pFnShouldStopPathing = NULL;

	if ( ! pFnShouldStopPathing )
		pFnShouldStopPathing = UObject::FindObject< UFunction > ( "Function KFGame.KFEmit_ScriptedPath.ShouldStopPathing" );

	AKFEmit_ScriptedPath_execShouldStopPathing_Parms ShouldStopPathing_Parms;

	this->ProcessEvent ( pFnShouldStopPathing, &ShouldStopPathing_Parms, NULL );
};

// Function KFGame.KFEmitter.OnToggle
// [0x00020102] 
// Parameters infos:

void AKFEmitter::OnToggle ( )
{
	static UFunction* pFnOnToggle = NULL;

	if ( ! pFnOnToggle )
		pFnOnToggle = UObject::FindObject< UFunction > ( "Function KFGame.KFEmitter.OnToggle" );

	AKFEmitter_execOnToggle_Parms OnToggle_Parms;

	this->ProcessEvent ( pFnOnToggle, &OnToggle_Parms, NULL );
};

// Function KFGame.KFThirdPersonCamera.InvertViewOffset
// [0x00020102] 
// Parameters infos:

void UKFThirdPersonCamera::InvertViewOffset ( )
{
	static UFunction* pFnInvertViewOffset = NULL;

	if ( ! pFnInvertViewOffset )
		pFnInvertViewOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFThirdPersonCamera.InvertViewOffset" );

	UKFThirdPersonCamera_execInvertViewOffset_Parms InvertViewOffset_Parms;

	this->ProcessEvent ( pFnInvertViewOffset, &InvertViewOffset_Parms, NULL );
};

// Function KFGame.KFThirdPersonCamera.SetViewOffset
// [0x00024102] 
// Parameters infos:

void UKFThirdPersonCamera::SetViewOffset ( )
{
	static UFunction* pFnSetViewOffset = NULL;

	if ( ! pFnSetViewOffset )
		pFnSetViewOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFThirdPersonCamera.SetViewOffset" );

	UKFThirdPersonCamera_execSetViewOffset_Parms SetViewOffset_Parms;

	this->ProcessEvent ( pFnSetViewOffset, &SetViewOffset_Parms, NULL );
};

// Function KFGame.KFThirdPersonCameraMode.GetDefaultOffset
// [0x00022002] 
// Parameters infos:

void UKFThirdPersonCameraMode::GetDefaultOffset ( )
{
	static UFunction* pFnGetDefaultOffset = NULL;

	if ( ! pFnGetDefaultOffset )
		pFnGetDefaultOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFThirdPersonCameraMode.GetDefaultOffset" );

	UKFThirdPersonCameraMode_execGetDefaultOffset_Parms GetDefaultOffset_Parms;

	this->ProcessEvent ( pFnGetDefaultOffset, &GetDefaultOffset_Parms, NULL );
};

// Function KFGame.KFThirdPersonCameraMode.InvertViewOffset
// [0x00820102] 
// Parameters infos:

void UKFThirdPersonCameraMode::InvertViewOffset ( )
{
	static UFunction* pFnInvertViewOffset = NULL;

	if ( ! pFnInvertViewOffset )
		pFnInvertViewOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFThirdPersonCameraMode.InvertViewOffset" );

	UKFThirdPersonCameraMode_execInvertViewOffset_Parms InvertViewOffset_Parms;

	this->ProcessEvent ( pFnInvertViewOffset, &InvertViewOffset_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.ExplodePawns
// [0x00880102] 
// Parameters infos:

void AKFExplosion_AirborneAgent::ExplodePawns ( )
{
	static UFunction* pFnExplodePawns = NULL;

	if ( ! pFnExplodePawns )
		pFnExplodePawns = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.ExplodePawns" );

	AKFExplosion_AirborneAgent_execExplodePawns_Parms ExplodePawns_Parms;

	this->ProcessEvent ( pFnExplodePawns, &ExplodePawns_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.DoExplosionDamage
// [0x00080102] 
// Parameters infos:

void AKFExplosion_AirborneAgent::DoExplosionDamage ( )
{
	static UFunction* pFnDoExplosionDamage = NULL;

	if ( ! pFnDoExplosionDamage )
		pFnDoExplosionDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.DoExplosionDamage" );

	AKFExplosion_AirborneAgent_execDoExplosionDamage_Parms DoExplosionDamage_Parms;

	this->ProcessEvent ( pFnDoExplosionDamage, &DoExplosionDamage_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.StopLoopingParticleEffect
// [0x00020102] 
// Parameters infos:

void AKFExplosion_AirborneAgent::StopLoopingParticleEffect ( )
{
	static UFunction* pFnStopLoopingParticleEffect = NULL;

	if ( ! pFnStopLoopingParticleEffect )
		pFnStopLoopingParticleEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.StopLoopingParticleEffect" );

	AKFExplosion_AirborneAgent_execStopLoopingParticleEffect_Parms StopLoopingParticleEffect_Parms;

	this->ProcessEvent ( pFnStopLoopingParticleEffect, &StopLoopingParticleEffect_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFExplosion_AirborneAgent::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.Destroyed" );

	AKFExplosion_AirborneAgent_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.FadeOut
// [0x00024102] 
// Parameters infos:

void AKFExplosion_AirborneAgent::FadeOut ( )
{
	static UFunction* pFnFadeOut = NULL;

	if ( ! pFnFadeOut )
		pFnFadeOut = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.FadeOut" );

	AKFExplosion_AirborneAgent_execFadeOut_Parms FadeOut_Parms;

	this->ProcessEvent ( pFnFadeOut, &FadeOut_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.StartLoopingParticleEffect
// [0x00020102] 
// Parameters infos:

void AKFExplosion_AirborneAgent::StartLoopingParticleEffect ( )
{
	static UFunction* pFnStartLoopingParticleEffect = NULL;

	if ( ! pFnStartLoopingParticleEffect )
		pFnStartLoopingParticleEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.StartLoopingParticleEffect" );

	AKFExplosion_AirborneAgent_execStartLoopingParticleEffect_Parms StartLoopingParticleEffect_Parms;

	this->ProcessEvent ( pFnStartLoopingParticleEffect, &StartLoopingParticleEffect_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.Explode
// [0x00024102] 
// Parameters infos:

void AKFExplosion_AirborneAgent::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.Explode" );

	AKFExplosion_AirborneAgent_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.SpawnExplosionParticleSystem
// [0x00020102] 
// Parameters infos:

void AKFExplosion_AirborneAgent::SpawnExplosionParticleSystem ( )
{
	static UFunction* pFnSpawnExplosionParticleSystem = NULL;

	if ( ! pFnSpawnExplosionParticleSystem )
		pFnSpawnExplosionParticleSystem = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.SpawnExplosionParticleSystem" );

	AKFExplosion_AirborneAgent_execSpawnExplosionParticleSystem_Parms SpawnExplosionParticleSystem_Parms;

	this->ProcessEvent ( pFnSpawnExplosionParticleSystem, &SpawnExplosionParticleSystem_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.AffectsPawn
// [0x00080102] 
// Parameters infos:

void AKFExplosion_AirborneAgent::AffectsPawn ( )
{
	static UFunction* pFnAffectsPawn = NULL;

	if ( ! pFnAffectsPawn )
		pFnAffectsPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.AffectsPawn" );

	AKFExplosion_AirborneAgent_execAffectsPawn_Parms AffectsPawn_Parms;

	this->ProcessEvent ( pFnAffectsPawn, &AffectsPawn_Parms, NULL );
};

// Function KFGame.KFExplosion_AirborneAgent.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFExplosion_AirborneAgent::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_AirborneAgent.ReplicatedEvent" );

	AKFExplosion_AirborneAgent_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFExplosionActorLingering.AffectsPawn
// [0x00080102] 
// Parameters infos:

void AKFExplosionActorLingering::AffectsPawn ( )
{
	static UFunction* pFnAffectsPawn = NULL;

	if ( ! pFnAffectsPawn )
		pFnAffectsPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorLingering.AffectsPawn" );

	AKFExplosionActorLingering_execAffectsPawn_Parms AffectsPawn_Parms;

	this->ProcessEvent ( pFnAffectsPawn, &AffectsPawn_Parms, NULL );
};

// Function KFGame.KFExplosionActorLingering.ExplodePawns
// [0x00880102] 
// Parameters infos:

void AKFExplosionActorLingering::ExplodePawns ( )
{
	static UFunction* pFnExplodePawns = NULL;

	if ( ! pFnExplodePawns )
		pFnExplodePawns = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorLingering.ExplodePawns" );

	AKFExplosionActorLingering_execExplodePawns_Parms ExplodePawns_Parms;

	this->ProcessEvent ( pFnExplodePawns, &ExplodePawns_Parms, NULL );
};

// Function KFGame.KFExplosionActorLingering.DoExplosionDamage
// [0x00080102] 
// Parameters infos:

void AKFExplosionActorLingering::DoExplosionDamage ( )
{
	static UFunction* pFnDoExplosionDamage = NULL;

	if ( ! pFnDoExplosionDamage )
		pFnDoExplosionDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorLingering.DoExplosionDamage" );

	AKFExplosionActorLingering_execDoExplosionDamage_Parms DoExplosionDamage_Parms;

	this->ProcessEvent ( pFnDoExplosionDamage, &DoExplosionDamage_Parms, NULL );
};

// Function KFGame.KFExplosionActorLingering.StopLoopingParticleEffect
// [0x00020102] 
// Parameters infos:

void AKFExplosionActorLingering::StopLoopingParticleEffect ( )
{
	static UFunction* pFnStopLoopingParticleEffect = NULL;

	if ( ! pFnStopLoopingParticleEffect )
		pFnStopLoopingParticleEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorLingering.StopLoopingParticleEffect" );

	AKFExplosionActorLingering_execStopLoopingParticleEffect_Parms StopLoopingParticleEffect_Parms;

	this->ProcessEvent ( pFnStopLoopingParticleEffect, &StopLoopingParticleEffect_Parms, NULL );
};

// Function KFGame.KFExplosionActorLingering.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFExplosionActorLingering::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorLingering.Destroyed" );

	AKFExplosionActorLingering_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFExplosionActorLingering.FadeOut
// [0x00024102] 
// Parameters infos:

void AKFExplosionActorLingering::FadeOut ( )
{
	static UFunction* pFnFadeOut = NULL;

	if ( ! pFnFadeOut )
		pFnFadeOut = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorLingering.FadeOut" );

	AKFExplosionActorLingering_execFadeOut_Parms FadeOut_Parms;

	this->ProcessEvent ( pFnFadeOut, &FadeOut_Parms, NULL );
};

// Function KFGame.KFExplosionActorLingering.StartLoopingParticleEffect
// [0x00020102] 
// Parameters infos:

void AKFExplosionActorLingering::StartLoopingParticleEffect ( )
{
	static UFunction* pFnStartLoopingParticleEffect = NULL;

	if ( ! pFnStartLoopingParticleEffect )
		pFnStartLoopingParticleEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorLingering.StartLoopingParticleEffect" );

	AKFExplosionActorLingering_execStartLoopingParticleEffect_Parms StartLoopingParticleEffect_Parms;

	this->ProcessEvent ( pFnStartLoopingParticleEffect, &StartLoopingParticleEffect_Parms, NULL );
};

// Function KFGame.KFExplosionActorLingering.Explode
// [0x00024102] 
// Parameters infos:

void AKFExplosionActorLingering::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosionActorLingering.Explode" );

	AKFExplosionActorLingering_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function KFGame.KFExplosion_Nuke.GetNukeEffectCheckRadius
// [0x00080102] 
// Parameters infos:

void AKFExplosion_Nuke::GetNukeEffectCheckRadius ( )
{
	static UFunction* pFnGetNukeEffectCheckRadius = NULL;

	if ( ! pFnGetNukeEffectCheckRadius )
		pFnGetNukeEffectCheckRadius = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_Nuke.GetNukeEffectCheckRadius" );

	AKFExplosion_Nuke_execGetNukeEffectCheckRadius_Parms GetNukeEffectCheckRadius_Parms;

	this->ProcessEvent ( pFnGetNukeEffectCheckRadius, &GetNukeEffectCheckRadius_Parms, NULL );
};

// Function KFGame.KFExplosion_Nuke.ExplodePawns
// [0x00880102] 
// Parameters infos:

void AKFExplosion_Nuke::ExplodePawns ( )
{
	static UFunction* pFnExplodePawns = NULL;

	if ( ! pFnExplodePawns )
		pFnExplodePawns = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_Nuke.ExplodePawns" );

	AKFExplosion_Nuke_execExplodePawns_Parms ExplodePawns_Parms;

	this->ProcessEvent ( pFnExplodePawns, &ExplodePawns_Parms, NULL );
};

// Function KFGame.KFExplosion_Nuke.Explode
// [0x00024102] 
// Parameters infos:

void AKFExplosion_Nuke::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_Nuke.Explode" );

	AKFExplosion_Nuke_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function KFGame.KFExplosion_Nuke.AffectsPawn
// [0x00080102] 
// Parameters infos:

void AKFExplosion_Nuke::AffectsPawn ( )
{
	static UFunction* pFnAffectsPawn = NULL;

	if ( ! pFnAffectsPawn )
		pFnAffectsPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_Nuke.AffectsPawn" );

	AKFExplosion_Nuke_execAffectsPawn_Parms AffectsPawn_Parms;

	this->ProcessEvent ( pFnAffectsPawn, &AffectsPawn_Parms, NULL );
};

// Function KFGame.KFExplosion_ReplicatedNuke.Explode
// [0x00024102] 
// Parameters infos:

void AKFExplosion_ReplicatedNuke::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_ReplicatedNuke.Explode" );

	AKFExplosion_ReplicatedNuke_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function KFGame.KFExplosion_ReplicatedNuke.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFExplosion_ReplicatedNuke::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFExplosion_ReplicatedNuke.ReplicatedEvent" );

	AKFExplosion_ReplicatedNuke_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFFirstPersonCamera.PlayerUpdateCamera
// [0x00C80002] 
// Parameters infos:

void UKFFirstPersonCamera::PlayerUpdateCamera ( )
{
	static UFunction* pFnPlayerUpdateCamera = NULL;

	if ( ! pFnPlayerUpdateCamera )
		pFnPlayerUpdateCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFFirstPersonCamera.PlayerUpdateCamera" );

	UKFFirstPersonCamera_execPlayerUpdateCamera_Parms PlayerUpdateCamera_Parms;

	this->ProcessEvent ( pFnPlayerUpdateCamera, &PlayerUpdateCamera_Parms, NULL );
};

// Function KFGame.KFFirstPersonCamera.UpdateCamera
// [0x00420002] 
// Parameters infos:

void UKFFirstPersonCamera::UpdateCamera ( )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = UObject::FindObject< UFunction > ( "Function KFGame.KFFirstPersonCamera.UpdateCamera" );

	UKFFirstPersonCamera_execUpdateCamera_Parms UpdateCamera_Parms;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );
};

// Function KFGame.KFMonsterDifficultyInfo.GetSpecialSpawnChance
// [0x00022002] 
// Parameters infos:

void UKFMonsterDifficultyInfo::GetSpecialSpawnChance ( )
{
	static UFunction* pFnGetSpecialSpawnChance = NULL;

	if ( ! pFnGetSpecialSpawnChance )
		pFnGetSpecialSpawnChance = UObject::FindObject< UFunction > ( "Function KFGame.KFMonsterDifficultyInfo.GetSpecialSpawnChance" );

	UKFMonsterDifficultyInfo_execGetSpecialSpawnChance_Parms GetSpecialSpawnChance_Parms;

	this->ProcessEvent ( pFnGetSpecialSpawnChance, &GetSpecialSpawnChance_Parms, NULL );
};

// Function KFGame.KFMonsterDifficultyInfo.GetMovementSpeedMod
// [0x00022002] 
// Parameters infos:

void UKFMonsterDifficultyInfo::GetMovementSpeedMod ( )
{
	static UFunction* pFnGetMovementSpeedMod = NULL;

	if ( ! pFnGetMovementSpeedMod )
		pFnGetMovementSpeedMod = UObject::FindObject< UFunction > ( "Function KFGame.KFMonsterDifficultyInfo.GetMovementSpeedMod" );

	UKFMonsterDifficultyInfo_execGetMovementSpeedMod_Parms GetMovementSpeedMod_Parms;

	this->ProcessEvent ( pFnGetMovementSpeedMod, &GetMovementSpeedMod_Parms, NULL );
};

// Function KFGame.KFMonsterDifficultyInfo.GetZedTimeSpeedScale
// [0x00022002] 
// Parameters infos:

void UKFMonsterDifficultyInfo::GetZedTimeSpeedScale ( )
{
	static UFunction* pFnGetZedTimeSpeedScale = NULL;

	if ( ! pFnGetZedTimeSpeedScale )
		pFnGetZedTimeSpeedScale = UObject::FindObject< UFunction > ( "Function KFGame.KFMonsterDifficultyInfo.GetZedTimeSpeedScale" );

	UKFMonsterDifficultyInfo_execGetZedTimeSpeedScale_Parms GetZedTimeSpeedScale_Parms;

	this->ProcessEvent ( pFnGetZedTimeSpeedScale, &GetZedTimeSpeedScale_Parms, NULL );
};

// Function KFGame.KFMonsterDifficultyInfo.GetBlockSettings
// [0x00022002] 
// Parameters infos:

void UKFMonsterDifficultyInfo::GetBlockSettings ( )
{
	static UFunction* pFnGetBlockSettings = NULL;

	if ( ! pFnGetBlockSettings )
		pFnGetBlockSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFMonsterDifficultyInfo.GetBlockSettings" );

	UKFMonsterDifficultyInfo_execGetBlockSettings_Parms GetBlockSettings_Parms;

	this->ProcessEvent ( pFnGetBlockSettings, &GetBlockSettings_Parms, NULL );
};

// Function KFGame.KFMonsterDifficultyInfo.GetRallySettings
// [0x00022002] 
// Parameters infos:

void UKFMonsterDifficultyInfo::GetRallySettings ( )
{
	static UFunction* pFnGetRallySettings = NULL;

	if ( ! pFnGetRallySettings )
		pFnGetRallySettings = UObject::FindObject< UFunction > ( "Function KFGame.KFMonsterDifficultyInfo.GetRallySettings" );

	UKFMonsterDifficultyInfo_execGetRallySettings_Parms GetRallySettings_Parms;

	this->ProcessEvent ( pFnGetRallySettings, &GetRallySettings_Parms, NULL );
};

// Function KFGame.KFMonsterDifficultyInfo.GetEvadeOnDamageSettings
// [0x00822002] 
// Parameters infos:

void UKFMonsterDifficultyInfo::GetEvadeOnDamageSettings ( )
{
	static UFunction* pFnGetEvadeOnDamageSettings = NULL;

	if ( ! pFnGetEvadeOnDamageSettings )
		pFnGetEvadeOnDamageSettings = UObject::FindObject< UFunction > ( "Function KFGame.KFMonsterDifficultyInfo.GetEvadeOnDamageSettings" );

	UKFMonsterDifficultyInfo_execGetEvadeOnDamageSettings_Parms GetEvadeOnDamageSettings_Parms;

	this->ProcessEvent ( pFnGetEvadeOnDamageSettings, &GetEvadeOnDamageSettings_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.GetOutbreakId
// [0x00022000] 
// Parameters infos:

void UKFOutbreakEvent::GetOutbreakId ( )
{
	static UFunction* pFnGetOutbreakId = NULL;

	if ( ! pFnGetOutbreakId )
		pFnGetOutbreakId = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.GetOutbreakId" );

	UKFOutbreakEvent_execGetOutbreakId_Parms GetOutbreakId_Parms;

	this->ProcessEvent ( pFnGetOutbreakId, &GetOutbreakId_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.GetAISpawnOverrirde
// [0x00820002] 
// Parameters infos:

void UKFOutbreakEvent::GetAISpawnOverrirde ( )
{
	static UFunction* pFnGetAISpawnOverrirde = NULL;

	if ( ! pFnGetAISpawnOverrirde )
		pFnGetAISpawnOverrirde = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.GetAISpawnOverrirde" );

	UKFOutbreakEvent_execGetAISpawnOverrirde_Parms GetAISpawnOverrirde_Parms;

	this->ProcessEvent ( pFnGetAISpawnOverrirde, &GetAISpawnOverrirde_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.SetWorldInfoOverrides
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent::SetWorldInfoOverrides ( )
{
	static UFunction* pFnSetWorldInfoOverrides = NULL;

	if ( ! pFnSetWorldInfoOverrides )
		pFnSetWorldInfoOverrides = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.SetWorldInfoOverrides" );

	UKFOutbreakEvent_execSetWorldInfoOverrides_Parms SetWorldInfoOverrides_Parms;

	this->ProcessEvent ( pFnSetWorldInfoOverrides, &SetWorldInfoOverrides_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.CacheWorldInfo
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent::CacheWorldInfo ( )
{
	static UFunction* pFnCacheWorldInfo = NULL;

	if ( ! pFnCacheWorldInfo )
		pFnCacheWorldInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.CacheWorldInfo" );

	UKFOutbreakEvent_execCacheWorldInfo_Parms CacheWorldInfo_Parms;

	this->ProcessEvent ( pFnCacheWorldInfo, &CacheWorldInfo_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.ApplyGlobalDamage
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent::ApplyGlobalDamage ( )
{
	static UFunction* pFnApplyGlobalDamage = NULL;

	if ( ! pFnApplyGlobalDamage )
		pFnApplyGlobalDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.ApplyGlobalDamage" );

	UKFOutbreakEvent_execApplyGlobalDamage_Parms ApplyGlobalDamage_Parms;

	this->ProcessEvent ( pFnApplyGlobalDamage, &ApplyGlobalDamage_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.OnScoreKill
// [0x00020000] 
// Parameters infos:

void UKFOutbreakEvent::OnScoreKill ( )
{
	static UFunction* pFnOnScoreKill = NULL;

	if ( ! pFnOnScoreKill )
		pFnOnScoreKill = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.OnScoreKill" );

	UKFOutbreakEvent_execOnScoreKill_Parms OnScoreKill_Parms;

	this->ProcessEvent ( pFnOnScoreKill, &OnScoreKill_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.AdjustRestartedPlayer
// [0x00420002] 
// Parameters infos:

void UKFOutbreakEvent::AdjustRestartedPlayer ( )
{
	static UFunction* pFnAdjustRestartedPlayer = NULL;

	if ( ! pFnAdjustRestartedPlayer )
		pFnAdjustRestartedPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.AdjustRestartedPlayer" );

	UKFOutbreakEvent_execAdjustRestartedPlayer_Parms AdjustRestartedPlayer_Parms;

	this->ProcessEvent ( pFnAdjustRestartedPlayer, &AdjustRestartedPlayer_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.AdjustMonsterDefaults
// [0x00C20002] 
// Parameters infos:

void UKFOutbreakEvent::AdjustMonsterDefaults ( )
{
	static UFunction* pFnAdjustMonsterDefaults = NULL;

	if ( ! pFnAdjustMonsterDefaults )
		pFnAdjustMonsterDefaults = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.AdjustMonsterDefaults" );

	UKFOutbreakEvent_execAdjustMonsterDefaults_Parms AdjustMonsterDefaults_Parms;

	this->ProcessEvent ( pFnAdjustMonsterDefaults, &AdjustMonsterDefaults_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.AdjustPawnScale
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent::AdjustPawnScale ( )
{
	static UFunction* pFnAdjustPawnScale = NULL;

	if ( ! pFnAdjustPawnScale )
		pFnAdjustPawnScale = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.AdjustPawnScale" );

	UKFOutbreakEvent_execAdjustPawnScale_Parms AdjustPawnScale_Parms;

	this->ProcessEvent ( pFnAdjustPawnScale, &AdjustPawnScale_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.AdjustScoreDamage
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent::AdjustScoreDamage ( )
{
	static UFunction* pFnAdjustScoreDamage = NULL;

	if ( ! pFnAdjustScoreDamage )
		pFnAdjustScoreDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.AdjustScoreDamage" );

	UKFOutbreakEvent_execAdjustScoreDamage_Parms AdjustScoreDamage_Parms;

	this->ProcessEvent ( pFnAdjustScoreDamage, &AdjustScoreDamage_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.AdjustForBeefcakeRules
// [0x00824002] 
// Parameters infos:

void UKFOutbreakEvent::AdjustForBeefcakeRules ( )
{
	static UFunction* pFnAdjustForBeefcakeRules = NULL;

	if ( ! pFnAdjustForBeefcakeRules )
		pFnAdjustForBeefcakeRules = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.AdjustForBeefcakeRules" );

	UKFOutbreakEvent_execAdjustForBeefcakeRules_Parms AdjustForBeefcakeRules_Parms;

	this->ProcessEvent ( pFnAdjustForBeefcakeRules, &AdjustForBeefcakeRules_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.ReduceDamage
// [0x00C20002] 
// Parameters infos:

void UKFOutbreakEvent::ReduceDamage ( )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.ReduceDamage" );

	UKFOutbreakEvent_execReduceDamage_Parms ReduceDamage_Parms;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.ModifyGroundSpeed
// [0x00420002] 
// Parameters infos:

void UKFOutbreakEvent::ModifyGroundSpeed ( )
{
	static UFunction* pFnModifyGroundSpeed = NULL;

	if ( ! pFnModifyGroundSpeed )
		pFnModifyGroundSpeed = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.ModifyGroundSpeed" );

	UKFOutbreakEvent_execModifyGroundSpeed_Parms ModifyGroundSpeed_Parms;

	this->ProcessEvent ( pFnModifyGroundSpeed, &ModifyGroundSpeed_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.UpdateGRI
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent::UpdateGRI ( )
{
	static UFunction* pFnUpdateGRI = NULL;

	if ( ! pFnUpdateGRI )
		pFnUpdateGRI = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.UpdateGRI" );

	UKFOutbreakEvent_execUpdateGRI_Parms UpdateGRI_Parms;

	this->ProcessEvent ( pFnUpdateGRI, &UpdateGRI_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.CacheGRI
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent::CacheGRI ( )
{
	static UFunction* pFnCacheGRI = NULL;

	if ( ! pFnCacheGRI )
		pFnCacheGRI = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.CacheGRI" );

	UKFOutbreakEvent_execCacheGRI_Parms CacheGRI_Parms;

	this->ProcessEvent ( pFnCacheGRI, &CacheGRI_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.ClearActiveEvent
// [0x00820002] 
// Parameters infos:

void UKFOutbreakEvent::ClearActiveEvent ( )
{
	static UFunction* pFnClearActiveEvent = NULL;

	if ( ! pFnClearActiveEvent )
		pFnClearActiveEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.ClearActiveEvent" );

	UKFOutbreakEvent_execClearActiveEvent_Parms ClearActiveEvent_Parms;

	this->ProcessEvent ( pFnClearActiveEvent, &ClearActiveEvent_Parms, NULL );
};

// Function KFGame.KFOutbreakEvent.SetActiveEvent
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent::SetActiveEvent ( )
{
	static UFunction* pFnSetActiveEvent = NULL;

	if ( ! pFnSetActiveEvent )
		pFnSetActiveEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFOutbreakEvent.SetActiveEvent" );

	UKFOutbreakEvent_execSetActiveEvent_Parms SetActiveEvent_Parms;

	this->ProcessEvent ( pFnSetActiveEvent, &SetActiveEvent_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.FinishCraft
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo_Entry::FinishCraft ( )
{
	static UFunction* pFnFinishCraft = NULL;

	if ( ! pFnFinishCraft )
		pFnFinishCraft = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.FinishCraft" );

	AKFGameInfo_Entry_execFinishCraft_Parms FinishCraft_Parms;

	this->ProcessEvent ( pFnFinishCraft, &FinishCraft_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.Tick
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.Tick" );

	AKFGameInfo_Entry_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.GetSystemTimeMinutes
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFGameInfo_Entry::GetSystemTimeMinutes ( )
{
	static UFunction* pFnGetSystemTimeMinutes = NULL;

	if ( ! pFnGetSystemTimeMinutes )
		pFnGetSystemTimeMinutes = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.GetSystemTimeMinutes" );

	AKFGameInfo_Entry_execGetSystemTimeMinutes_Parms GetSystemTimeMinutes_Parms;

	this->ProcessEvent ( pFnGetSystemTimeMinutes, &GetSystemTimeMinutes_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Entry::eventInitGame ( )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.InitGame" );

	AKFGameInfo_Entry_eventInitGame_Parms InitGame_Parms;

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.UpdateDoshPiles
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::UpdateDoshPiles ( )
{
	static UFunction* pFnUpdateDoshPiles = NULL;

	if ( ! pFnUpdateDoshPiles )
		pFnUpdateDoshPiles = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.UpdateDoshPiles" );

	AKFGameInfo_Entry_execUpdateDoshPiles_Parms UpdateDoshPiles_Parms;

	this->ProcessEvent ( pFnUpdateDoshPiles, &UpdateDoshPiles_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.ActiveLightActorsForTier
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo_Entry::ActiveLightActorsForTier ( )
{
	static UFunction* pFnActiveLightActorsForTier = NULL;

	if ( ! pFnActiveLightActorsForTier )
		pFnActiveLightActorsForTier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.ActiveLightActorsForTier" );

	AKFGameInfo_Entry_execActiveLightActorsForTier_Parms ActiveLightActorsForTier_Parms;

	this->ProcessEvent ( pFnActiveLightActorsForTier, &ActiveLightActorsForTier_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.SpawnDoshPilesForAmount
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::SpawnDoshPilesForAmount ( )
{
	static UFunction* pFnSpawnDoshPilesForAmount = NULL;

	if ( ! pFnSpawnDoshPilesForAmount )
		pFnSpawnDoshPilesForAmount = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.SpawnDoshPilesForAmount" );

	AKFGameInfo_Entry_execSpawnDoshPilesForAmount_Parms SpawnDoshPilesForAmount_Parms;

	this->ProcessEvent ( pFnSpawnDoshPilesForAmount, &SpawnDoshPilesForAmount_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.SetDoshTier
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_Entry::SetDoshTier ( )
{
	static UFunction* pFnSetDoshTier = NULL;

	if ( ! pFnSetDoshTier )
		pFnSetDoshTier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.SetDoshTier" );

	AKFGameInfo_Entry_execSetDoshTier_Parms SetDoshTier_Parms;

	this->ProcessEvent ( pFnSetDoshTier, &SetDoshTier_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.FinalAnimationPlayed
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::FinalAnimationPlayed ( )
{
	static UFunction* pFnFinalAnimationPlayed = NULL;

	if ( ! pFnFinalAnimationPlayed )
		pFnFinalAnimationPlayed = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.FinalAnimationPlayed" );

	AKFGameInfo_Entry_execFinalAnimationPlayed_Parms FinalAnimationPlayed_Parms;

	this->ProcessEvent ( pFnFinalAnimationPlayed, &FinalAnimationPlayed_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.GetTotalDoshTier
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::GetTotalDoshTier ( )
{
	static UFunction* pFnGetTotalDoshTier = NULL;

	if ( ! pFnGetTotalDoshTier )
		pFnGetTotalDoshTier = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.GetTotalDoshTier" );

	AKFGameInfo_Entry_execGetTotalDoshTier_Parms GetTotalDoshTier_Parms;

	this->ProcessEvent ( pFnGetTotalDoshTier, &GetTotalDoshTier_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.CompareItemTags
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::CompareItemTags ( )
{
	static UFunction* pFnCompareItemTags = NULL;

	if ( ! pFnCompareItemTags )
		pFnCompareItemTags = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.CompareItemTags" );

	AKFGameInfo_Entry_execCompareItemTags_Parms CompareItemTags_Parms;

	this->ProcessEvent ( pFnCompareItemTags, &CompareItemTags_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.SortDoshPiles
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::SortDoshPiles ( )
{
	static UFunction* pFnSortDoshPiles = NULL;

	if ( ! pFnSortDoshPiles )
		pFnSortDoshPiles = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.SortDoshPiles" );

	AKFGameInfo_Entry_execSortDoshPiles_Parms SortDoshPiles_Parms;

	this->ProcessEvent ( pFnSortDoshPiles, &SortDoshPiles_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.CollectDoshPiles
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::CollectDoshPiles ( )
{
	static UFunction* pFnCollectDoshPiles = NULL;

	if ( ! pFnCollectDoshPiles )
		pFnCollectDoshPiles = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.CollectDoshPiles" );

	AKFGameInfo_Entry_execCollectDoshPiles_Parms CollectDoshPiles_Parms;

	this->ProcessEvent ( pFnCollectDoshPiles, &CollectDoshPiles_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.InitDoshLitter
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::InitDoshLitter ( )
{
	static UFunction* pFnInitDoshLitter = NULL;

	if ( ! pFnInitDoshLitter )
		pFnInitDoshLitter = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.InitDoshLitter" );

	AKFGameInfo_Entry_execInitDoshLitter_Parms InitDoshLitter_Parms;

	this->ProcessEvent ( pFnInitDoshLitter, &InitDoshLitter_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.InitDoshPiles
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Entry::eventInitDoshPiles ( )
{
	static UFunction* pFnInitDoshPiles = NULL;

	if ( ! pFnInitDoshPiles )
		pFnInitDoshPiles = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.InitDoshPiles" );

	AKFGameInfo_Entry_eventInitDoshPiles_Parms InitDoshPiles_Parms;

	this->ProcessEvent ( pFnInitDoshPiles, &InitDoshPiles_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.GetVaultCustomizationSpawnPoint
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::GetVaultCustomizationSpawnPoint ( )
{
	static UFunction* pFnGetVaultCustomizationSpawnPoint = NULL;

	if ( ! pFnGetVaultCustomizationSpawnPoint )
		pFnGetVaultCustomizationSpawnPoint = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.GetVaultCustomizationSpawnPoint" );

	AKFGameInfo_Entry_execGetVaultCustomizationSpawnPoint_Parms GetVaultCustomizationSpawnPoint_Parms;

	this->ProcessEvent ( pFnGetVaultCustomizationSpawnPoint, &GetVaultCustomizationSpawnPoint_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.SpawnVaultCustomizationPawn
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::SpawnVaultCustomizationPawn ( )
{
	static UFunction* pFnSpawnVaultCustomizationPawn = NULL;

	if ( ! pFnSpawnVaultCustomizationPawn )
		pFnSpawnVaultCustomizationPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.SpawnVaultCustomizationPawn" );

	AKFGameInfo_Entry_execSpawnVaultCustomizationPawn_Parms SpawnVaultCustomizationPawn_Parms;

	this->ProcessEvent ( pFnSpawnVaultCustomizationPawn, &SpawnVaultCustomizationPawn_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.InitVault
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Entry::InitVault ( )
{
	static UFunction* pFnInitVault = NULL;

	if ( ! pFnInitVault )
		pFnInitVault = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.InitVault" );

	AKFGameInfo_Entry_execInitVault_Parms InitVault_Parms;

	this->ProcessEvent ( pFnInitVault, &InitVault_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.InitTraderList
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Entry::InitTraderList ( )
{
	static UFunction* pFnInitTraderList = NULL;

	if ( ! pFnInitTraderList )
		pFnInitTraderList = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.InitTraderList" );

	AKFGameInfo_Entry_execInitTraderList_Parms InitTraderList_Parms;

	this->ProcessEvent ( pFnInitTraderList, &InitTraderList_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.InitSpawnManager
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Entry::InitSpawnManager ( )
{
	static UFunction* pFnInitSpawnManager = NULL;

	if ( ! pFnInitSpawnManager )
		pFnInitSpawnManager = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.InitSpawnManager" );

	AKFGameInfo_Entry_execInitSpawnManager_Parms InitSpawnManager_Parms;

	this->ProcessEvent ( pFnInitSpawnManager, &InitSpawnManager_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.SpawnDefaultPawnFor
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Entry::SpawnDefaultPawnFor ( )
{
	static UFunction* pFnSpawnDefaultPawnFor = NULL;

	if ( ! pFnSpawnDefaultPawnFor )
		pFnSpawnDefaultPawnFor = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.SpawnDefaultPawnFor" );

	AKFGameInfo_Entry_execSpawnDefaultPawnFor_Parms SpawnDefaultPawnFor_Parms;

	this->ProcessEvent ( pFnSpawnDefaultPawnFor, &SpawnDefaultPawnFor_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.NeedPlayers
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Entry::NeedPlayers ( )
{
	static UFunction* pFnNeedPlayers = NULL;

	if ( ! pFnNeedPlayers )
		pFnNeedPlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.NeedPlayers" );

	AKFGameInfo_Entry_execNeedPlayers_Parms NeedPlayers_Parms;

	this->ProcessEvent ( pFnNeedPlayers, &NeedPlayers_Parms, NULL );
};

// Function KFGame.KFGameInfo_Entry.PreloadContentClasses
// [0x00022000] 
// Parameters infos:

void AKFGameInfo_Entry::PreloadContentClasses ( )
{
	static UFunction* pFnPreloadContentClasses = NULL;

	if ( ! pFnPreloadContentClasses )
		pFnPreloadContentClasses = UObject::FindObject< UFunction > ( "Function KFGame.KFGameInfo_Entry.PreloadContentClasses" );

	AKFGameInfo_Entry_execPreloadContentClasses_Parms PreloadContentClasses_Parms;

	this->ProcessEvent ( pFnPreloadContentClasses, &PreloadContentClasses_Parms, NULL );
};

// Function KFGame.KFSeqEvent_DoshVault.SetDoshTier
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_DoshVault::SetDoshTier ( )
{
	static UFunction* pFnSetDoshTier = NULL;

	if ( ! pFnSetDoshTier )
		pFnSetDoshTier = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_DoshVault.SetDoshTier" );

	UKFSeqEvent_DoshVault_execSetDoshTier_Parms SetDoshTier_Parms;

	this->ProcessEvent ( pFnSetDoshTier, &SetDoshTier_Parms, NULL );
};

// Function KFGame.KFSeqEvent_DoshVault.NotifyAbort
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_DoshVault::NotifyAbort ( )
{
	static UFunction* pFnNotifyAbort = NULL;

	if ( ! pFnNotifyAbort )
		pFnNotifyAbort = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_DoshVault.NotifyAbort" );

	UKFSeqEvent_DoshVault_execNotifyAbort_Parms NotifyAbort_Parms;

	this->ProcessEvent ( pFnNotifyAbort, &NotifyAbort_Parms, NULL );
};

// Function KFGame.KFSeqEvent_DoshVault.NotifyFillComplete
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_DoshVault::NotifyFillComplete ( )
{
	static UFunction* pFnNotifyFillComplete = NULL;

	if ( ! pFnNotifyFillComplete )
		pFnNotifyFillComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_DoshVault.NotifyFillComplete" );

	UKFSeqEvent_DoshVault_execNotifyFillComplete_Parms NotifyFillComplete_Parms;

	this->ProcessEvent ( pFnNotifyFillComplete, &NotifyFillComplete_Parms, NULL );
};

// Function KFGame.KFSeqEvent_DoshVault.NotifyIdleNoDosh
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_DoshVault::NotifyIdleNoDosh ( )
{
	static UFunction* pFnNotifyIdleNoDosh = NULL;

	if ( ! pFnNotifyIdleNoDosh )
		pFnNotifyIdleNoDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_DoshVault.NotifyIdleNoDosh" );

	UKFSeqEvent_DoshVault_execNotifyIdleNoDosh_Parms NotifyIdleNoDosh_Parms;

	this->ProcessEvent ( pFnNotifyIdleNoDosh, &NotifyIdleNoDosh_Parms, NULL );
};

// Function KFGame.KFSeqEvent_DoshVault.NotifyIdle
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_DoshVault::NotifyIdle ( )
{
	static UFunction* pFnNotifyIdle = NULL;

	if ( ! pFnNotifyIdle )
		pFnNotifyIdle = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_DoshVault.NotifyIdle" );

	UKFSeqEvent_DoshVault_execNotifyIdle_Parms NotifyIdle_Parms;

	this->ProcessEvent ( pFnNotifyIdle, &NotifyIdle_Parms, NULL );
};

// Function KFGame.KFGameplayPoolManager.Reset
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameplayPoolManager::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayPoolManager.Reset" );

	AKFGameplayPoolManager_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFGameplayPoolManager.RemoveProjectileFromPool_Internal
// [0x00440003] ( FUNC_Final )
// Parameters infos:

void AKFGameplayPoolManager::RemoveProjectileFromPool_Internal ( )
{
	static UFunction* pFnRemoveProjectileFromPool_Internal = NULL;

	if ( ! pFnRemoveProjectileFromPool_Internal )
		pFnRemoveProjectileFromPool_Internal = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayPoolManager.RemoveProjectileFromPool_Internal" );

	AKFGameplayPoolManager_execRemoveProjectileFromPool_Internal_Parms RemoveProjectileFromPool_Internal_Parms;

	this->ProcessEvent ( pFnRemoveProjectileFromPool_Internal, &RemoveProjectileFromPool_Internal_Parms, NULL );
};

// Function KFGame.KFGameplayPoolManager.AddProjectileToPool_Internal
// [0x00440003] ( FUNC_Final )
// Parameters infos:

void AKFGameplayPoolManager::AddProjectileToPool_Internal ( )
{
	static UFunction* pFnAddProjectileToPool_Internal = NULL;

	if ( ! pFnAddProjectileToPool_Internal )
		pFnAddProjectileToPool_Internal = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayPoolManager.AddProjectileToPool_Internal" );

	AKFGameplayPoolManager_execAddProjectileToPool_Internal_Parms AddProjectileToPool_Internal_Parms;

	this->ProcessEvent ( pFnAddProjectileToPool_Internal, &AddProjectileToPool_Internal_Parms, NULL );
};

// Function KFGame.KFGameplayPoolManager.RemoveProjectileFromPool
// [0x00020002] 
// Parameters infos:

void AKFGameplayPoolManager::RemoveProjectileFromPool ( )
{
	static UFunction* pFnRemoveProjectileFromPool = NULL;

	if ( ! pFnRemoveProjectileFromPool )
		pFnRemoveProjectileFromPool = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayPoolManager.RemoveProjectileFromPool" );

	AKFGameplayPoolManager_execRemoveProjectileFromPool_Parms RemoveProjectileFromPool_Parms;

	this->ProcessEvent ( pFnRemoveProjectileFromPool, &RemoveProjectileFromPool_Parms, NULL );
};

// Function KFGame.KFGameplayPoolManager.AddProjectileToPool
// [0x00020002] 
// Parameters infos:

void AKFGameplayPoolManager::AddProjectileToPool ( )
{
	static UFunction* pFnAddProjectileToPool = NULL;

	if ( ! pFnAddProjectileToPool )
		pFnAddProjectileToPool = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayPoolManager.AddProjectileToPool" );

	AKFGameplayPoolManager_execAddProjectileToPool_Parms AddProjectileToPool_Parms;

	this->ProcessEvent ( pFnAddProjectileToPool, &AddProjectileToPool_Parms, NULL );
};

// Function KFGame.KFGameplayPoolManager.GetPoolManager
// [0x00022002] 
// Parameters infos:

void AKFGameplayPoolManager::GetPoolManager ( )
{
	static UFunction* pFnGetPoolManager = NULL;

	if ( ! pFnGetPoolManager )
		pFnGetPoolManager = UObject::FindObject< UFunction > ( "Function KFGame.KFGameplayPoolManager.GetPoolManager" );

	AKFGameplayPoolManager_execGetPoolManager_Parms GetPoolManager_Parms;

	this->ProcessEvent ( pFnGetPoolManager, &GetPoolManager_Parms, NULL );
};

// Function KFGame.KFSeqEvent_WaveStart.SetWaveNum
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_WaveStart::SetWaveNum ( )
{
	static UFunction* pFnSetWaveNum = NULL;

	if ( ! pFnSetWaveNum )
		pFnSetWaveNum = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_WaveStart.SetWaveNum" );

	UKFSeqEvent_WaveStart_execSetWaveNum_Parms SetWaveNum_Parms;

	this->ProcessEvent ( pFnSetWaveNum, &SetWaveNum_Parms, NULL );
};

// Function KFGame.KFSeqEvent_TraderOpened.SetWaveNum
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_TraderOpened::SetWaveNum ( )
{
	static UFunction* pFnSetWaveNum = NULL;

	if ( ! pFnSetWaveNum )
		pFnSetWaveNum = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_TraderOpened.SetWaveNum" );

	UKFSeqEvent_TraderOpened_execSetWaveNum_Parms SetWaveNum_Parms;

	this->ProcessEvent ( pFnSetWaveNum, &SetWaveNum_Parms, NULL );
};

// Function KFGame.KFSeqEvent_LevelLoaded.DoActivation
// [0x00020100] 
// Parameters infos:

void UKFSeqEvent_LevelLoaded::DoActivation ( )
{
	static UFunction* pFnDoActivation = NULL;

	if ( ! pFnDoActivation )
		pFnDoActivation = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_LevelLoaded.DoActivation" );

	UKFSeqEvent_LevelLoaded_execDoActivation_Parms DoActivation_Parms;

	this->ProcessEvent ( pFnDoActivation, &DoActivation_Parms, NULL );
};

// Function KFGame.KFSeqEvent_LevelLoaded.RegisterEvent
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqEvent_LevelLoaded::eventRegisterEvent ( )
{
	static UFunction* pFnRegisterEvent = NULL;

	if ( ! pFnRegisterEvent )
		pFnRegisterEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_LevelLoaded.RegisterEvent" );

	UKFSeqEvent_LevelLoaded_eventRegisterEvent_Parms RegisterEvent_Parms;

	this->ProcessEvent ( pFnRegisterEvent, &RegisterEvent_Parms, NULL );
};

// Function KFGame.KFSeqEvent_LevelLoaded.GetObjClassVersion
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void UKFSeqEvent_LevelLoaded::eventGetObjClassVersion ( )
{
	static UFunction* pFnGetObjClassVersion = NULL;

	if ( ! pFnGetObjClassVersion )
		pFnGetObjClassVersion = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_LevelLoaded.GetObjClassVersion" );

	UKFSeqEvent_LevelLoaded_eventGetObjClassVersion_Parms GetObjClassVersion_Parms;

	this->ProcessEvent ( pFnGetObjClassVersion, &GetObjClassVersion_Parms, NULL );
};

// Function KFGame.KFGFxSpecialEventObjectivesContainer.PopulateChanceDrops
// [0x00020002] 
// Parameters infos:

void UKFGFxSpecialEventObjectivesContainer::PopulateChanceDrops ( )
{
	static UFunction* pFnPopulateChanceDrops = NULL;

	if ( ! pFnPopulateChanceDrops )
		pFnPopulateChanceDrops = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxSpecialEventObjectivesContainer.PopulateChanceDrops" );

	UKFGFxSpecialEventObjectivesContainer_execPopulateChanceDrops_Parms PopulateChanceDrops_Parms;

	this->ProcessEvent ( pFnPopulateChanceDrops, &PopulateChanceDrops_Parms, NULL );
};

// Function KFGame.KFGFxSpecialEventObjectivesContainer.PopulateReward
// [0x00020002] 
// Parameters infos:

void UKFGFxSpecialEventObjectivesContainer::PopulateReward ( )
{
	static UFunction* pFnPopulateReward = NULL;

	if ( ! pFnPopulateReward )
		pFnPopulateReward = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxSpecialEventObjectivesContainer.PopulateReward" );

	UKFGFxSpecialEventObjectivesContainer_execPopulateReward_Parms PopulateReward_Parms;

	this->ProcessEvent ( pFnPopulateReward, &PopulateReward_Parms, NULL );
};

// Function KFGame.KFGFxSpecialEventObjectivesContainer.HasObjectiveStatusChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxSpecialEventObjectivesContainer::HasObjectiveStatusChanged ( )
{
	static UFunction* pFnHasObjectiveStatusChanged = NULL;

	if ( ! pFnHasObjectiveStatusChanged )
		pFnHasObjectiveStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxSpecialEventObjectivesContainer.HasObjectiveStatusChanged" );

	UKFGFxSpecialEventObjectivesContainer_execHasObjectiveStatusChanged_Parms HasObjectiveStatusChanged_Parms;

	this->ProcessEvent ( pFnHasObjectiveStatusChanged, &HasObjectiveStatusChanged_Parms, NULL );
};

// Function KFGame.KFGFxSpecialEventObjectivesContainer.GetObjectiveProgressValues
// [0x00422002] 
// Parameters infos:

void UKFGFxSpecialEventObjectivesContainer::GetObjectiveProgressValues ( )
{
	static UFunction* pFnGetObjectiveProgressValues = NULL;

	if ( ! pFnGetObjectiveProgressValues )
		pFnGetObjectiveProgressValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxSpecialEventObjectivesContainer.GetObjectiveProgressValues" );

	UKFGFxSpecialEventObjectivesContainer_execGetObjectiveProgressValues_Parms GetObjectiveProgressValues_Parms;

	this->ProcessEvent ( pFnGetObjectiveProgressValues, &GetObjectiveProgressValues_Parms, NULL );
};

// Function KFGame.KFGFxSpecialEventObjectivesContainer.PopulateData
// [0x00020002] 
// Parameters infos:

void UKFGFxSpecialEventObjectivesContainer::PopulateData ( )
{
	static UFunction* pFnPopulateData = NULL;

	if ( ! pFnPopulateData )
		pFnPopulateData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxSpecialEventObjectivesContainer.PopulateData" );

	UKFGFxSpecialEventObjectivesContainer_execPopulateData_Parms PopulateData_Parms;

	this->ProcessEvent ( pFnPopulateData, &PopulateData_Parms, NULL );
};

// Function KFGame.KFGFxSpecialEventObjectivesContainer.LocalizeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxSpecialEventObjectivesContainer::LocalizeMenu ( )
{
	static UFunction* pFnLocalizeMenu = NULL;

	if ( ! pFnLocalizeMenu )
		pFnLocalizeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxSpecialEventObjectivesContainer.LocalizeMenu" );

	UKFGFxSpecialEventObjectivesContainer_execLocalizeMenu_Parms LocalizeMenu_Parms;

	this->ProcessEvent ( pFnLocalizeMenu, &LocalizeMenu_Parms, NULL );
};

// Function KFGame.KFGFxSpecialEventObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxSpecialEventObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxSpecialEventObjectivesContainer.Initialize" );

	UKFGFxSpecialEventObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.HasObjectiveStatusChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::HasObjectiveStatusChanged ( )
{
	static UFunction* pFnHasObjectiveStatusChanged = NULL;

	if ( ! pFnHasObjectiveStatusChanged )
		pFnHasObjectiveStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.HasObjectiveStatusChanged" );

	UKFGFxDailyObjectivesContainer_execHasObjectiveStatusChanged_Parms HasObjectiveStatusChanged_Parms;

	this->ProcessEvent ( pFnHasObjectiveStatusChanged, &HasObjectiveStatusChanged_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.GetVersusCompleteString
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::GetVersusCompleteString ( )
{
	static UFunction* pFnGetVersusCompleteString = NULL;

	if ( ! pFnGetVersusCompleteString )
		pFnGetVersusCompleteString = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.GetVersusCompleteString" );

	UKFGFxDailyObjectivesContainer_execGetVersusCompleteString_Parms GetVersusCompleteString_Parms;

	this->ProcessEvent ( pFnGetVersusCompleteString, &GetVersusCompleteString_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.GetVersusKillsString
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::GetVersusKillsString ( )
{
	static UFunction* pFnGetVersusKillsString = NULL;

	if ( ! pFnGetVersusKillsString )
		pFnGetVersusKillsString = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.GetVersusKillsString" );

	UKFGFxDailyObjectivesContainer_execGetVersusKillsString_Parms GetVersusKillsString_Parms;

	this->ProcessEvent ( pFnGetVersusKillsString, &GetVersusKillsString_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.GetVersusDamageString
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::GetVersusDamageString ( )
{
	static UFunction* pFnGetVersusDamageString = NULL;

	if ( ! pFnGetVersusDamageString )
		pFnGetVersusDamageString = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.GetVersusDamageString" );

	UKFGFxDailyObjectivesContainer_execGetVersusDamageString_Parms GetVersusDamageString_Parms;

	this->ProcessEvent ( pFnGetVersusDamageString, &GetVersusDamageString_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.GetMapString
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::GetMapString ( )
{
	static UFunction* pFnGetMapString = NULL;

	if ( ! pFnGetMapString )
		pFnGetMapString = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.GetMapString" );

	UKFGFxDailyObjectivesContainer_execGetMapString_Parms GetMapString_Parms;

	this->ProcessEvent ( pFnGetMapString, &GetMapString_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.GetKillsString
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::GetKillsString ( )
{
	static UFunction* pFnGetKillsString = NULL;

	if ( ! pFnGetKillsString )
		pFnGetKillsString = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.GetKillsString" );

	UKFGFxDailyObjectivesContainer_execGetKillsString_Parms GetKillsString_Parms;

	this->ProcessEvent ( pFnGetKillsString, &GetKillsString_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.GetPerkString
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::GetPerkString ( )
{
	static UFunction* pFnGetPerkString = NULL;

	if ( ! pFnGetPerkString )
		pFnGetPerkString = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.GetPerkString" );

	UKFGFxDailyObjectivesContainer_execGetPerkString_Parms GetPerkString_Parms;

	this->ProcessEvent ( pFnGetPerkString, &GetPerkString_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.GetWeaponStringForDT
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::GetWeaponStringForDT ( )
{
	static UFunction* pFnGetWeaponStringForDT = NULL;

	if ( ! pFnGetWeaponStringForDT )
		pFnGetWeaponStringForDT = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.GetWeaponStringForDT" );

	UKFGFxDailyObjectivesContainer_execGetWeaponStringForDT_Parms GetWeaponStringForDT_Parms;

	this->ProcessEvent ( pFnGetWeaponStringForDT, &GetWeaponStringForDT_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.FormDescriptionForObjective
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::FormDescriptionForObjective ( )
{
	static UFunction* pFnFormDescriptionForObjective = NULL;

	if ( ! pFnFormDescriptionForObjective )
		pFnFormDescriptionForObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.FormDescriptionForObjective" );

	UKFGFxDailyObjectivesContainer_execFormDescriptionForObjective_Parms FormDescriptionForObjective_Parms;

	this->ProcessEvent ( pFnFormDescriptionForObjective, &FormDescriptionForObjective_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.FormTitleForObjective
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::FormTitleForObjective ( )
{
	static UFunction* pFnFormTitleForObjective = NULL;

	if ( ! pFnFormTitleForObjective )
		pFnFormTitleForObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.FormTitleForObjective" );

	UKFGFxDailyObjectivesContainer_execFormTitleForObjective_Parms FormTitleForObjective_Parms;

	this->ProcessEvent ( pFnFormTitleForObjective, &FormTitleForObjective_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.IsProgressObjective
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::IsProgressObjective ( )
{
	static UFunction* pFnIsProgressObjective = NULL;

	if ( ! pFnIsProgressObjective )
		pFnIsProgressObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.IsProgressObjective" );

	UKFGFxDailyObjectivesContainer_execIsProgressObjective_Parms IsProgressObjective_Parms;

	this->ProcessEvent ( pFnIsProgressObjective, &IsProgressObjective_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.GetIconForObjective
// [0x00022002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::GetIconForObjective ( )
{
	static UFunction* pFnGetIconForObjective = NULL;

	if ( ! pFnGetIconForObjective )
		pFnGetIconForObjective = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.GetIconForObjective" );

	UKFGFxDailyObjectivesContainer_execGetIconForObjective_Parms GetIconForObjective_Parms;

	this->ProcessEvent ( pFnGetIconForObjective, &GetIconForObjective_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.MakeDailyDataObject
// [0x00422002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::MakeDailyDataObject ( )
{
	static UFunction* pFnMakeDailyDataObject = NULL;

	if ( ! pFnMakeDailyDataObject )
		pFnMakeDailyDataObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.MakeDailyDataObject" );

	UKFGFxDailyObjectivesContainer_execMakeDailyDataObject_Parms MakeDailyDataObject_Parms;

	this->ProcessEvent ( pFnMakeDailyDataObject, &MakeDailyDataObject_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.PopulateData
// [0x00024002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::PopulateData ( )
{
	static UFunction* pFnPopulateData = NULL;

	if ( ! pFnPopulateData )
		pFnPopulateData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.PopulateData" );

	UKFGFxDailyObjectivesContainer_execPopulateData_Parms PopulateData_Parms;

	this->ProcessEvent ( pFnPopulateData, &PopulateData_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.LocalizeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::LocalizeMenu ( )
{
	static UFunction* pFnLocalizeMenu = NULL;

	if ( ! pFnLocalizeMenu )
		pFnLocalizeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.LocalizeMenu" );

	UKFGFxDailyObjectivesContainer_execLocalizeMenu_Parms LocalizeMenu_Parms;

	this->ProcessEvent ( pFnLocalizeMenu, &LocalizeMenu_Parms, NULL );
};

// Function KFGame.KFGFxDailyObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxDailyObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxDailyObjectivesContainer.Initialize" );

	UKFGFxDailyObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxChristmasObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxChristmasObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxChristmasObjectivesContainer.Initialize" );

	UKFGFxChristmasObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxCollapsedObjectivesContainer.GetWeeklyDataObject
// [0x00020002] 
// Parameters infos:

void UKFGFxCollapsedObjectivesContainer::GetWeeklyDataObject ( )
{
	static UFunction* pFnGetWeeklyDataObject = NULL;

	if ( ! pFnGetWeeklyDataObject )
		pFnGetWeeklyDataObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxCollapsedObjectivesContainer.GetWeeklyDataObject" );

	UKFGFxCollapsedObjectivesContainer_execGetWeeklyDataObject_Parms GetWeeklyDataObject_Parms;

	this->ProcessEvent ( pFnGetWeeklyDataObject, &GetWeeklyDataObject_Parms, NULL );
};

// Function KFGame.KFGFxCollapsedObjectivesContainer.PopulateData
// [0x00020002] 
// Parameters infos:

void UKFGFxCollapsedObjectivesContainer::PopulateData ( )
{
	static UFunction* pFnPopulateData = NULL;

	if ( ! pFnPopulateData )
		pFnPopulateData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxCollapsedObjectivesContainer.PopulateData" );

	UKFGFxCollapsedObjectivesContainer_execPopulateData_Parms PopulateData_Parms;

	this->ProcessEvent ( pFnPopulateData, &PopulateData_Parms, NULL );
};

// Function KFGame.KFGFxCollapsedObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxCollapsedObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxCollapsedObjectivesContainer.Initialize" );

	UKFGFxCollapsedObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_ControllerPresets.ResetPresetOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_ControllerPresets::ResetPresetOptions ( )
{
	static UFunction* pFnResetPresetOptions = NULL;

	if ( ! pFnResetPresetOptions )
		pFnResetPresetOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_ControllerPresets.ResetPresetOptions" );

	UKFGFxControlsContainer_ControllerPresets_execResetPresetOptions_Parms ResetPresetOptions_Parms;

	this->ProcessEvent ( pFnResetPresetOptions, &ResetPresetOptions_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_ControllerPresets.AddBindingToGFxObject
// [0x00420002] 
// Parameters infos:

void UKFGFxControlsContainer_ControllerPresets::AddBindingToGFxObject ( )
{
	static UFunction* pFnAddBindingToGFxObject = NULL;

	if ( ! pFnAddBindingToGFxObject )
		pFnAddBindingToGFxObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_ControllerPresets.AddBindingToGFxObject" );

	UKFGFxControlsContainer_ControllerPresets_execAddBindingToGFxObject_Parms AddBindingToGFxObject_Parms;

	this->ProcessEvent ( pFnAddBindingToGFxObject, &AddBindingToGFxObject_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_ControllerPresets.UpdateButtonDescriptions
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_ControllerPresets::UpdateButtonDescriptions ( )
{
	static UFunction* pFnUpdateButtonDescriptions = NULL;

	if ( ! pFnUpdateButtonDescriptions )
		pFnUpdateButtonDescriptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_ControllerPresets.UpdateButtonDescriptions" );

	UKFGFxControlsContainer_ControllerPresets_execUpdateButtonDescriptions_Parms UpdateButtonDescriptions_Parms;

	this->ProcessEvent ( pFnUpdateButtonDescriptions, &UpdateButtonDescriptions_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_ControllerPresets.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_ControllerPresets::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_ControllerPresets.LocalizeText" );

	UKFGFxControlsContainer_ControllerPresets_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_ControllerPresets.UpdateCurrentPresetArray
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_ControllerPresets::UpdateCurrentPresetArray ( )
{
	static UFunction* pFnUpdateCurrentPresetArray = NULL;

	if ( ! pFnUpdateCurrentPresetArray )
		pFnUpdateCurrentPresetArray = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_ControllerPresets.UpdateCurrentPresetArray" );

	UKFGFxControlsContainer_ControllerPresets_execUpdateCurrentPresetArray_Parms UpdateCurrentPresetArray_Parms;

	this->ProcessEvent ( pFnUpdateCurrentPresetArray, &UpdateCurrentPresetArray_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_ControllerPresets.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_ControllerPresets::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_ControllerPresets.Initialize" );

	UKFGFxControlsContainer_ControllerPresets_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Input.ResetInputOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Input::ResetInputOptions ( )
{
	static UFunction* pFnResetInputOptions = NULL;

	if ( ! pFnResetInputOptions )
		pFnResetInputOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Input.ResetInputOptions" );

	UKFGFxControlsContainer_Input_execResetInputOptions_Parms ResetInputOptions_Parms;

	this->ProcessEvent ( pFnResetInputOptions, &ResetInputOptions_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Input.InitializeOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Input::InitializeOptions ( )
{
	static UFunction* pFnInitializeOptions = NULL;

	if ( ! pFnInitializeOptions )
		pFnInitializeOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Input.InitializeOptions" );

	UKFGFxControlsContainer_Input_execInitializeOptions_Parms InitializeOptions_Parms;

	this->ProcessEvent ( pFnInitializeOptions, &InitializeOptions_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Input.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Input::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Input.LocalizeText" );

	UKFGFxControlsContainer_Input_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Input.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Input::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Input.Initialize" );

	UKFGFxControlsContainer_Input_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.CallBack_ResetInputOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::CallBack_ResetInputOptions ( )
{
	static UFunction* pFnCallBack_ResetInputOptions = NULL;

	if ( ! pFnCallBack_ResetInputOptions )
		pFnCallBack_ResetInputOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.CallBack_ResetInputOptions" );

	UKFGFxOptionsMenu_Controls_execCallBack_ResetInputOptions_Parms CallBack_ResetInputOptions_Parms;

	this->ProcessEvent ( pFnCallBack_ResetInputOptions, &CallBack_ResetInputOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.CallBack_ResetPresetOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::CallBack_ResetPresetOptions ( )
{
	static UFunction* pFnCallBack_ResetPresetOptions = NULL;

	if ( ! pFnCallBack_ResetPresetOptions )
		pFnCallBack_ResetPresetOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.CallBack_ResetPresetOptions" );

	UKFGFxOptionsMenu_Controls_execCallBack_ResetPresetOptions_Parms CallBack_ResetPresetOptions_Parms;

	this->ProcessEvent ( pFnCallBack_ResetPresetOptions, &CallBack_ResetPresetOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_UpdateControllerPreset
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_UpdateControllerPreset ( )
{
	static UFunction* pFnCallback_UpdateControllerPreset = NULL;

	if ( ! pFnCallback_UpdateControllerPreset )
		pFnCallback_UpdateControllerPreset = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_UpdateControllerPreset" );

	UKFGFxOptionsMenu_Controls_execCallback_UpdateControllerPreset_Parms Callback_UpdateControllerPreset_Parms;

	this->ProcessEvent ( pFnCallback_UpdateControllerPreset, &Callback_UpdateControllerPreset_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_CloseMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_CloseMenu ( )
{
	static UFunction* pFnCallback_CloseMenu = NULL;

	if ( ! pFnCallback_CloseMenu )
		pFnCallback_CloseMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_CloseMenu" );

	UKFGFxOptionsMenu_Controls_execCallback_CloseMenu_Parms Callback_CloseMenu_Parms;

	this->ProcessEvent ( pFnCallback_CloseMenu, &Callback_CloseMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_AcceptBind
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_AcceptBind ( )
{
	static UFunction* pFnCallback_AcceptBind = NULL;

	if ( ! pFnCallback_AcceptBind )
		pFnCallback_AcceptBind = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_AcceptBind" );

	UKFGFxOptionsMenu_Controls_execCallback_AcceptBind_Parms Callback_AcceptBind_Parms;

	this->ProcessEvent ( pFnCallback_AcceptBind, &Callback_AcceptBind_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_ResetControls
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_ResetControls ( )
{
	static UFunction* pFnCallback_ResetControls = NULL;

	if ( ! pFnCallback_ResetControls )
		pFnCallback_ResetControls = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_ResetControls" );

	UKFGFxOptionsMenu_Controls_execCallback_ResetControls_Parms Callback_ResetControls_Parms;

	this->ProcessEvent ( pFnCallback_ResetControls, &Callback_ResetControls_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_ChangeBind
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_ChangeBind ( )
{
	static UFunction* pFnCallback_ChangeBind = NULL;

	if ( ! pFnCallback_ChangeBind )
		pFnCallback_ChangeBind = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_ChangeBind" );

	UKFGFxOptionsMenu_Controls_execCallback_ChangeBind_Parms Callback_ChangeBind_Parms;

	this->ProcessEvent ( pFnCallback_ChangeBind, &Callback_ChangeBind_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_ForceFeedbackChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_ForceFeedbackChanged ( )
{
	static UFunction* pFnCallback_ForceFeedbackChanged = NULL;

	if ( ! pFnCallback_ForceFeedbackChanged )
		pFnCallback_ForceFeedbackChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_ForceFeedbackChanged" );

	UKFGFxOptionsMenu_Controls_execCallback_ForceFeedbackChanged_Parms Callback_ForceFeedbackChanged_Parms;

	this->ProcessEvent ( pFnCallback_ForceFeedbackChanged, &Callback_ForceFeedbackChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_AimAssistSlowDownChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_AimAssistSlowDownChanged ( )
{
	static UFunction* pFnCallback_AimAssistSlowDownChanged = NULL;

	if ( ! pFnCallback_AimAssistSlowDownChanged )
		pFnCallback_AimAssistSlowDownChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_AimAssistSlowDownChanged" );

	UKFGFxOptionsMenu_Controls_execCallback_AimAssistSlowDownChanged_Parms Callback_AimAssistSlowDownChanged_Parms;

	this->ProcessEvent ( pFnCallback_AimAssistSlowDownChanged, &Callback_AimAssistSlowDownChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_AimAssistRotationChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_AimAssistRotationChanged ( )
{
	static UFunction* pFnCallback_AimAssistRotationChanged = NULL;

	if ( ! pFnCallback_AimAssistRotationChanged )
		pFnCallback_AimAssistRotationChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_AimAssistRotationChanged" );

	UKFGFxOptionsMenu_Controls_execCallback_AimAssistRotationChanged_Parms Callback_AimAssistRotationChanged_Parms;

	this->ProcessEvent ( pFnCallback_AimAssistRotationChanged, &Callback_AimAssistRotationChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_AimAssistZoomLockOnChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_AimAssistZoomLockOnChanged ( )
{
	static UFunction* pFnCallback_AimAssistZoomLockOnChanged = NULL;

	if ( ! pFnCallback_AimAssistZoomLockOnChanged )
		pFnCallback_AimAssistZoomLockOnChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_AimAssistZoomLockOnChanged" );

	UKFGFxOptionsMenu_Controls_execCallback_AimAssistZoomLockOnChanged_Parms Callback_AimAssistZoomLockOnChanged_Parms;

	this->ProcessEvent ( pFnCallback_AimAssistZoomLockOnChanged, &Callback_AimAssistZoomLockOnChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_MouseSmoothingChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_MouseSmoothingChanged ( )
{
	static UFunction* pFnCallback_MouseSmoothingChanged = NULL;

	if ( ! pFnCallback_MouseSmoothingChanged )
		pFnCallback_MouseSmoothingChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_MouseSmoothingChanged" );

	UKFGFxOptionsMenu_Controls_execCallback_MouseSmoothingChanged_Parms Callback_MouseSmoothingChanged_Parms;

	this->ProcessEvent ( pFnCallback_MouseSmoothingChanged, &Callback_MouseSmoothingChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_InvertChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_InvertChanged ( )
{
	static UFunction* pFnCallback_InvertChanged = NULL;

	if ( ! pFnCallback_InvertChanged )
		pFnCallback_InvertChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_InvertChanged" );

	UKFGFxOptionsMenu_Controls_execCallback_InvertChanged_Parms Callback_InvertChanged_Parms;

	this->ProcessEvent ( pFnCallback_InvertChanged, &Callback_InvertChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_MouseZoomSensitivity
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_MouseZoomSensitivity ( )
{
	static UFunction* pFnCallback_MouseZoomSensitivity = NULL;

	if ( ! pFnCallback_MouseZoomSensitivity )
		pFnCallback_MouseZoomSensitivity = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_MouseZoomSensitivity" );

	UKFGFxOptionsMenu_Controls_execCallback_MouseZoomSensitivity_Parms Callback_MouseZoomSensitivity_Parms;

	this->ProcessEvent ( pFnCallback_MouseZoomSensitivity, &Callback_MouseZoomSensitivity_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_MouseSensitivity
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_MouseSensitivity ( )
{
	static UFunction* pFnCallback_MouseSensitivity = NULL;

	if ( ! pFnCallback_MouseSensitivity )
		pFnCallback_MouseSensitivity = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_MouseSensitivity" );

	UKFGFxOptionsMenu_Controls_execCallback_MouseSensitivity_Parms Callback_MouseSensitivity_Parms;

	this->ProcessEvent ( pFnCallback_MouseSensitivity, &Callback_MouseSensitivity_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_ControllerInvertChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_ControllerInvertChanged ( )
{
	static UFunction* pFnCallback_ControllerInvertChanged = NULL;

	if ( ! pFnCallback_ControllerInvertChanged )
		pFnCallback_ControllerInvertChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_ControllerInvertChanged" );

	UKFGFxOptionsMenu_Controls_execCallback_ControllerInvertChanged_Parms Callback_ControllerInvertChanged_Parms;

	this->ProcessEvent ( pFnCallback_ControllerInvertChanged, &Callback_ControllerInvertChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_ControllerZoomSensitivity
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_ControllerZoomSensitivity ( )
{
	static UFunction* pFnCallback_ControllerZoomSensitivity = NULL;

	if ( ! pFnCallback_ControllerZoomSensitivity )
		pFnCallback_ControllerZoomSensitivity = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_ControllerZoomSensitivity" );

	UKFGFxOptionsMenu_Controls_execCallback_ControllerZoomSensitivity_Parms Callback_ControllerZoomSensitivity_Parms;

	this->ProcessEvent ( pFnCallback_ControllerZoomSensitivity, &Callback_ControllerZoomSensitivity_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.Callback_ControllerSensitivity
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::Callback_ControllerSensitivity ( )
{
	static UFunction* pFnCallback_ControllerSensitivity = NULL;

	if ( ! pFnCallback_ControllerSensitivity )
		pFnCallback_ControllerSensitivity = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.Callback_ControllerSensitivity" );

	UKFGFxOptionsMenu_Controls_execCallback_ControllerSensitivity_Parms Callback_ControllerSensitivity_Parms;

	this->ProcessEvent ( pFnCallback_ControllerSensitivity, &Callback_ControllerSensitivity_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.FilterButtonInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxOptionsMenu_Controls::eventFilterButtonInput ( )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.FilterButtonInput" );

	UKFGFxOptionsMenu_Controls_eventFilterButtonInput_Parms FilterButtonInput_Parms;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.SaveConfigValues
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::SaveConfigValues ( )
{
	static UFunction* pFnSaveConfigValues = NULL;

	if ( ! pFnSaveConfigValues )
		pFnSaveConfigValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.SaveConfigValues" );

	UKFGFxOptionsMenu_Controls_execSaveConfigValues_Parms SaveConfigValues_Parms;

	this->ProcessEvent ( pFnSaveConfigValues, &SaveConfigValues_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxOptionsMenu_Controls::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.OnClose" );

	UKFGFxOptionsMenu_Controls_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.OnOpen" );

	UKFGFxOptionsMenu_Controls_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxOptionsMenu_Controls::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.WidgetInitialized" );

	UKFGFxOptionsMenu_Controls_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.OnInputTypeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::OnInputTypeChanged ( )
{
	static UFunction* pFnOnInputTypeChanged = NULL;

	if ( ! pFnOnInputTypeChanged )
		pFnOnInputTypeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.OnInputTypeChanged" );

	UKFGFxOptionsMenu_Controls_execOnInputTypeChanged_Parms OnInputTypeChanged_Parms;

	this->ProcessEvent ( pFnOnInputTypeChanged, &OnInputTypeChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.LocalizeText" );

	UKFGFxOptionsMenu_Controls_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Controls.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Controls::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Controls.InitializeMenu" );

	UKFGFxOptionsMenu_Controls_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.ClearInputOnContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::ClearInputOnContainer ( )
{
	static UFunction* pFnClearInputOnContainer = NULL;

	if ( ! pFnClearInputOnContainer )
		pFnClearInputOnContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.ClearInputOnContainer" );

	UKFGFxControlsContainer_Keybinding_execClearInputOnContainer_Parms ClearInputOnContainer_Parms;

	this->ProcessEvent ( pFnClearInputOnContainer, &ClearInputOnContainer_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.ResetControls
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::ResetControls ( )
{
	static UFunction* pFnResetControls = NULL;

	if ( ! pFnResetControls )
		pFnResetControls = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.ResetControls" );

	UKFGFxControlsContainer_Keybinding_execResetControls_Parms ResetControls_Parms;

	this->ProcessEvent ( pFnResetControls, &ResetControls_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.AcceptBind
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::AcceptBind ( )
{
	static UFunction* pFnAcceptBind = NULL;

	if ( ! pFnAcceptBind )
		pFnAcceptBind = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.AcceptBind" );

	UKFGFxControlsContainer_Keybinding_execAcceptBind_Parms AcceptBind_Parms;

	this->ProcessEvent ( pFnAcceptBind, &AcceptBind_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.SetConflictMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::SetConflictMessage ( )
{
	static UFunction* pFnSetConflictMessage = NULL;

	if ( ! pFnSetConflictMessage )
		pFnSetConflictMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.SetConflictMessage" );

	UKFGFxControlsContainer_Keybinding_execSetConflictMessage_Parms SetConflictMessage_Parms;

	this->ProcessEvent ( pFnSetConflictMessage, &SetConflictMessage_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.SetKeyBind
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::SetKeyBind ( )
{
	static UFunction* pFnSetKeyBind = NULL;

	if ( ! pFnSetKeyBind )
		pFnSetKeyBind = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.SetKeyBind" );

	UKFGFxControlsContainer_Keybinding_execSetKeyBind_Parms SetKeyBind_Parms;

	this->ProcessEvent ( pFnSetKeyBind, &SetKeyBind_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.ResetModKeys
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::ResetModKeys ( )
{
	static UFunction* pFnResetModKeys = NULL;

	if ( ! pFnResetModKeys )
		pFnResetModKeys = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.ResetModKeys" );

	UKFGFxControlsContainer_Keybinding_execResetModKeys_Parms ResetModKeys_Parms;

	this->ProcessEvent ( pFnResetModKeys, &ResetModKeys_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.UpdateModKeys
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::UpdateModKeys ( )
{
	static UFunction* pFnUpdateModKeys = NULL;

	if ( ! pFnUpdateModKeys )
		pFnUpdateModKeys = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.UpdateModKeys" );

	UKFGFxControlsContainer_Keybinding_execUpdateModKeys_Parms UpdateModKeys_Parms;

	this->ProcessEvent ( pFnUpdateModKeys, &UpdateModKeys_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.BindKey
// [0x00820002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::BindKey ( )
{
	static UFunction* pFnBindKey = NULL;

	if ( ! pFnBindKey )
		pFnBindKey = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.BindKey" );

	UKFGFxControlsContainer_Keybinding_execBindKey_Parms BindKey_Parms;

	this->ProcessEvent ( pFnBindKey, &BindKey_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.ChangeBind
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::ChangeBind ( )
{
	static UFunction* pFnChangeBind = NULL;

	if ( ! pFnChangeBind )
		pFnChangeBind = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.ChangeBind" );

	UKFGFxControlsContainer_Keybinding_execChangeBind_Parms ChangeBind_Parms;

	this->ProcessEvent ( pFnChangeBind, &ChangeBind_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.SetSectionBindings
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::SetSectionBindings ( )
{
	static UFunction* pFnSetSectionBindings = NULL;

	if ( ! pFnSetSectionBindings )
		pFnSetSectionBindings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.SetSectionBindings" );

	UKFGFxControlsContainer_Keybinding_execSetSectionBindings_Parms SetSectionBindings_Parms;

	this->ProcessEvent ( pFnSetSectionBindings, &SetSectionBindings_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.UpdateBindList
// [0x00C20002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::UpdateBindList ( )
{
	static UFunction* pFnUpdateBindList = NULL;

	if ( ! pFnUpdateBindList )
		pFnUpdateBindList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.UpdateBindList" );

	UKFGFxControlsContainer_Keybinding_execUpdateBindList_Parms UpdateBindList_Parms;

	this->ProcessEvent ( pFnUpdateBindList, &UpdateBindList_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.UpdateAllBindings
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::UpdateAllBindings ( )
{
	static UFunction* pFnUpdateAllBindings = NULL;

	if ( ! pFnUpdateAllBindings )
		pFnUpdateAllBindings = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.UpdateAllBindings" );

	UKFGFxControlsContainer_Keybinding_execUpdateAllBindings_Parms UpdateAllBindings_Parms;

	this->ProcessEvent ( pFnUpdateAllBindings, &UpdateAllBindings_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.InitalizeCommandList
// [0x00420002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::InitalizeCommandList ( )
{
	static UFunction* pFnInitalizeCommandList = NULL;

	if ( ! pFnInitalizeCommandList )
		pFnInitalizeCommandList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.InitalizeCommandList" );

	UKFGFxControlsContainer_Keybinding_execInitalizeCommandList_Parms InitalizeCommandList_Parms;

	this->ProcessEvent ( pFnInitalizeCommandList, &InitalizeCommandList_Parms, NULL );
};

// Function KFGame.KFGFxControlsContainer_Keybinding.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxControlsContainer_Keybinding::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxControlsContainer_Keybinding.Initialize" );

	UKFGFxControlsContainer_Keybinding_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxEndlessDARObjectivesContainer.PopulateReward
// [0x00020000] 
// Parameters infos:

void UKFGFxEndlessDARObjectivesContainer::PopulateReward ( )
{
	static UFunction* pFnPopulateReward = NULL;

	if ( ! pFnPopulateReward )
		pFnPopulateReward = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxEndlessDARObjectivesContainer.PopulateReward" );

	UKFGFxEndlessDARObjectivesContainer_execPopulateReward_Parms PopulateReward_Parms;

	this->ProcessEvent ( pFnPopulateReward, &PopulateReward_Parms, NULL );
};

// Function KFGame.KFGFxEndlessDARObjectivesContainer.PopulateChanceDrops
// [0x00020000] 
// Parameters infos:

void UKFGFxEndlessDARObjectivesContainer::PopulateChanceDrops ( )
{
	static UFunction* pFnPopulateChanceDrops = NULL;

	if ( ! pFnPopulateChanceDrops )
		pFnPopulateChanceDrops = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxEndlessDARObjectivesContainer.PopulateChanceDrops" );

	UKFGFxEndlessDARObjectivesContainer_execPopulateChanceDrops_Parms PopulateChanceDrops_Parms;

	this->ProcessEvent ( pFnPopulateChanceDrops, &PopulateChanceDrops_Parms, NULL );
};

// Function KFGame.KFGFxEndlessDARObjectivesContainer.PopulateData
// [0x00020002] 
// Parameters infos:

void UKFGFxEndlessDARObjectivesContainer::PopulateData ( )
{
	static UFunction* pFnPopulateData = NULL;

	if ( ! pFnPopulateData )
		pFnPopulateData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxEndlessDARObjectivesContainer.PopulateData" );

	UKFGFxEndlessDARObjectivesContainer_execPopulateData_Parms PopulateData_Parms;

	this->ProcessEvent ( pFnPopulateData, &PopulateData_Parms, NULL );
};

// Function KFGame.KFGFxEndlessDARObjectivesContainer.LocalizeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxEndlessDARObjectivesContainer::LocalizeMenu ( )
{
	static UFunction* pFnLocalizeMenu = NULL;

	if ( ! pFnLocalizeMenu )
		pFnLocalizeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxEndlessDARObjectivesContainer.LocalizeMenu" );

	UKFGFxEndlessDARObjectivesContainer_execLocalizeMenu_Parms LocalizeMenu_Parms;

	this->ProcessEvent ( pFnLocalizeMenu, &LocalizeMenu_Parms, NULL );
};

// Function KFGame.KFGFxEndlessDARObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxEndlessDARObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxEndlessDARObjectivesContainer.Initialize" );

	UKFGFxEndlessDARObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxExpandedObjectivesContainer.LocalizeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxExpandedObjectivesContainer::LocalizeMenu ( )
{
	static UFunction* pFnLocalizeMenu = NULL;

	if ( ! pFnLocalizeMenu )
		pFnLocalizeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxExpandedObjectivesContainer.LocalizeMenu" );

	UKFGFxExpandedObjectivesContainer_execLocalizeMenu_Parms LocalizeMenu_Parms;

	this->ProcessEvent ( pFnLocalizeMenu, &LocalizeMenu_Parms, NULL );
};

// Function KFGame.KFGFxExpandedObjectivesContainer.FullRefresh
// [0x00020002] 
// Parameters infos:

void UKFGFxExpandedObjectivesContainer::FullRefresh ( )
{
	static UFunction* pFnFullRefresh = NULL;

	if ( ! pFnFullRefresh )
		pFnFullRefresh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxExpandedObjectivesContainer.FullRefresh" );

	UKFGFxExpandedObjectivesContainer_execFullRefresh_Parms FullRefresh_Parms;

	this->ProcessEvent ( pFnFullRefresh, &FullRefresh_Parms, NULL );
};

// Function KFGame.KFGFxExpandedObjectivesContainer.Refresh
// [0x00024002] 
// Parameters infos:

void UKFGFxExpandedObjectivesContainer::Refresh ( )
{
	static UFunction* pFnRefresh = NULL;

	if ( ! pFnRefresh )
		pFnRefresh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxExpandedObjectivesContainer.Refresh" );

	UKFGFxExpandedObjectivesContainer_execRefresh_Parms Refresh_Parms;

	this->ProcessEvent ( pFnRefresh, &Refresh_Parms, NULL );
};

// Function KFGame.KFGFxExpandedObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxExpandedObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxExpandedObjectivesContainer.Initialize" );

	UKFGFxExpandedObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxWeeklyObjectivesContainer.LocalizeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxWeeklyObjectivesContainer::LocalizeMenu ( )
{
	static UFunction* pFnLocalizeMenu = NULL;

	if ( ! pFnLocalizeMenu )
		pFnLocalizeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWeeklyObjectivesContainer.LocalizeMenu" );

	UKFGFxWeeklyObjectivesContainer_execLocalizeMenu_Parms LocalizeMenu_Parms;

	this->ProcessEvent ( pFnLocalizeMenu, &LocalizeMenu_Parms, NULL );
};

// Function KFGame.KFGFxWeeklyObjectivesContainer.CreateRewardItem
// [0x00820002] 
// Parameters infos:

void UKFGFxWeeklyObjectivesContainer::CreateRewardItem ( )
{
	static UFunction* pFnCreateRewardItem = NULL;

	if ( ! pFnCreateRewardItem )
		pFnCreateRewardItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWeeklyObjectivesContainer.CreateRewardItem" );

	UKFGFxWeeklyObjectivesContainer_execCreateRewardItem_Parms CreateRewardItem_Parms;

	this->ProcessEvent ( pFnCreateRewardItem, &CreateRewardItem_Parms, NULL );
};

// Function KFGame.KFGFxWeeklyObjectivesContainer.UpdateDoshVaultRewardValue
// [0x00020002] 
// Parameters infos:

void UKFGFxWeeklyObjectivesContainer::UpdateDoshVaultRewardValue ( )
{
	static UFunction* pFnUpdateDoshVaultRewardValue = NULL;

	if ( ! pFnUpdateDoshVaultRewardValue )
		pFnUpdateDoshVaultRewardValue = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWeeklyObjectivesContainer.UpdateDoshVaultRewardValue" );

	UKFGFxWeeklyObjectivesContainer_execUpdateDoshVaultRewardValue_Parms UpdateDoshVaultRewardValue_Parms;

	this->ProcessEvent ( pFnUpdateDoshVaultRewardValue, &UpdateDoshVaultRewardValue_Parms, NULL );
};

// Function KFGame.KFGFxWeeklyObjectivesContainer.PopulateRewards
// [0x00020002] 
// Parameters infos:

void UKFGFxWeeklyObjectivesContainer::PopulateRewards ( )
{
	static UFunction* pFnPopulateRewards = NULL;

	if ( ! pFnPopulateRewards )
		pFnPopulateRewards = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWeeklyObjectivesContainer.PopulateRewards" );

	UKFGFxWeeklyObjectivesContainer_execPopulateRewards_Parms PopulateRewards_Parms;

	this->ProcessEvent ( pFnPopulateRewards, &PopulateRewards_Parms, NULL );
};

// Function KFGame.KFGFxWeeklyObjectivesContainer.PopulateModifiers
// [0x00020002] 
// Parameters infos:

void UKFGFxWeeklyObjectivesContainer::PopulateModifiers ( )
{
	static UFunction* pFnPopulateModifiers = NULL;

	if ( ! pFnPopulateModifiers )
		pFnPopulateModifiers = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWeeklyObjectivesContainer.PopulateModifiers" );

	UKFGFxWeeklyObjectivesContainer_execPopulateModifiers_Parms PopulateModifiers_Parms;

	this->ProcessEvent ( pFnPopulateModifiers, &PopulateModifiers_Parms, NULL );
};

// Function KFGame.KFGFxWeeklyObjectivesContainer.PopulateData
// [0x00020002] 
// Parameters infos:

void UKFGFxWeeklyObjectivesContainer::PopulateData ( )
{
	static UFunction* pFnPopulateData = NULL;

	if ( ! pFnPopulateData )
		pFnPopulateData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWeeklyObjectivesContainer.PopulateData" );

	UKFGFxWeeklyObjectivesContainer_execPopulateData_Parms PopulateData_Parms;

	this->ProcessEvent ( pFnPopulateData, &PopulateData_Parms, NULL );
};

// Function KFGame.KFGFxWeeklyObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxWeeklyObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWeeklyObjectivesContainer.Initialize" );

	UKFGFxWeeklyObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxFallObjectivesContainer.GetObjectiveProgressValues
// [0x00422002] 
// Parameters infos:

void UKFGFxFallObjectivesContainer::GetObjectiveProgressValues ( )
{
	static UFunction* pFnGetObjectiveProgressValues = NULL;

	if ( ! pFnGetObjectiveProgressValues )
		pFnGetObjectiveProgressValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxFallObjectivesContainer.GetObjectiveProgressValues" );

	UKFGFxFallObjectivesContainer_execGetObjectiveProgressValues_Parms GetObjectiveProgressValues_Parms;

	this->ProcessEvent ( pFnGetObjectiveProgressValues, &GetObjectiveProgressValues_Parms, NULL );
};

// Function KFGame.KFGFxFallObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxFallObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxFallObjectivesContainer.Initialize" );

	UKFGFxFallObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxGearContainer_PerksSelection.UpdatePerkSelection
// [0x00020002] 
// Parameters infos:

void UKFGFxGearContainer_PerksSelection::UpdatePerkSelection ( )
{
	static UFunction* pFnUpdatePerkSelection = NULL;

	if ( ! pFnUpdatePerkSelection )
		pFnUpdatePerkSelection = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxGearContainer_PerksSelection.UpdatePerkSelection" );

	UKFGFxGearContainer_PerksSelection_execUpdatePerkSelection_Parms UpdatePerkSelection_Parms;

	this->ProcessEvent ( pFnUpdatePerkSelection, &UpdatePerkSelection_Parms, NULL );
};

// Function KFGame.KFGFxGearContainer_PerksSelection.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxGearContainer_PerksSelection::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxGearContainer_PerksSelection.LocalizeText" );

	UKFGFxGearContainer_PerksSelection_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxGearContainer_PerksSelection.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxGearContainer_PerksSelection::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxGearContainer_PerksSelection.Initialize" );

	UKFGFxGearContainer_PerksSelection_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ChatBoxWidget.ClearAndCloseChat
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ChatBoxWidget::ClearAndCloseChat ( )
{
	static UFunction* pFnClearAndCloseChat = NULL;

	if ( ! pFnClearAndCloseChat )
		pFnClearAndCloseChat = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ChatBoxWidget.ClearAndCloseChat" );

	UKFGFxHUD_ChatBoxWidget_execClearAndCloseChat_Parms ClearAndCloseChat_Parms;

	this->ProcessEvent ( pFnClearAndCloseChat, &ClearAndCloseChat_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ChatBoxWidget.SetLobbyChatVisible
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ChatBoxWidget::SetLobbyChatVisible ( )
{
	static UFunction* pFnSetLobbyChatVisible = NULL;

	if ( ! pFnSetLobbyChatVisible )
		pFnSetLobbyChatVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ChatBoxWidget.SetLobbyChatVisible" );

	UKFGFxHUD_ChatBoxWidget_execSetLobbyChatVisible_Parms SetLobbyChatVisible_Parms;

	this->ProcessEvent ( pFnSetLobbyChatVisible, &SetLobbyChatVisible_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ChatBoxWidget.SetDataObjects
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ChatBoxWidget::SetDataObjects ( )
{
	static UFunction* pFnSetDataObjects = NULL;

	if ( ! pFnSetDataObjects )
		pFnSetDataObjects = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ChatBoxWidget.SetDataObjects" );

	UKFGFxHUD_ChatBoxWidget_execSetDataObjects_Parms SetDataObjects_Parms;

	this->ProcessEvent ( pFnSetDataObjects, &SetDataObjects_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ChatBoxWidget.GetDataObjects
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ChatBoxWidget::GetDataObjects ( )
{
	static UFunction* pFnGetDataObjects = NULL;

	if ( ! pFnGetDataObjects )
		pFnGetDataObjects = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ChatBoxWidget.GetDataObjects" );

	UKFGFxHUD_ChatBoxWidget_execGetDataObjects_Parms GetDataObjects_Parms;

	this->ProcessEvent ( pFnGetDataObjects, &GetDataObjects_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ChatBoxWidget.OpenInputField
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ChatBoxWidget::OpenInputField ( )
{
	static UFunction* pFnOpenInputField = NULL;

	if ( ! pFnOpenInputField )
		pFnOpenInputField = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ChatBoxWidget.OpenInputField" );

	UKFGFxHUD_ChatBoxWidget_execOpenInputField_Parms OpenInputField_Parms;

	this->ProcessEvent ( pFnOpenInputField, &OpenInputField_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ChatBoxWidget.AddChatMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ChatBoxWidget::AddChatMessage ( )
{
	static UFunction* pFnAddChatMessage = NULL;

	if ( ! pFnAddChatMessage )
		pFnAddChatMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ChatBoxWidget.AddChatMessage" );

	UKFGFxHUD_ChatBoxWidget_execAddChatMessage_Parms AddChatMessage_Parms;

	this->ProcessEvent ( pFnAddChatMessage, &AddChatMessage_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ChatBoxWidget.Init
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ChatBoxWidget::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ChatBoxWidget.Init" );

	UKFGFxHUD_ChatBoxWidget_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.SetCurrentProgress
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::SetCurrentProgress ( )
{
	static UFunction* pFnSetCurrentProgress = NULL;

	if ( ! pFnSetCurrentProgress )
		pFnSetCurrentProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.SetCurrentProgress" );

	UKFGFxHUD_ObjectiveConatiner_execSetCurrentProgress_Parms SetCurrentProgress_Parms;

	this->ProcessEvent ( pFnSetCurrentProgress, &SetCurrentProgress_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.ClearObjectiveUI
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::ClearObjectiveUI ( )
{
	static UFunction* pFnClearObjectiveUI = NULL;

	if ( ! pFnClearObjectiveUI )
		pFnClearObjectiveUI = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.ClearObjectiveUI" );

	UKFGFxHUD_ObjectiveConatiner_execClearObjectiveUI_Parms ClearObjectiveUI_Parms;

	this->ProcessEvent ( pFnClearObjectiveUI, &ClearObjectiveUI_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.SetFailState
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::SetFailState ( )
{
	static UFunction* pFnSetFailState = NULL;

	if ( ! pFnSetFailState )
		pFnSetFailState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.SetFailState" );

	UKFGFxHUD_ObjectiveConatiner_execSetFailState_Parms SetFailState_Parms;

	this->ProcessEvent ( pFnSetFailState, &SetFailState_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.UpdateRequirements
// [0x00020000] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::UpdateRequirements ( )
{
	static UFunction* pFnUpdateRequirements = NULL;

	if ( ! pFnUpdateRequirements )
		pFnUpdateRequirements = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.UpdateRequirements" );

	UKFGFxHUD_ObjectiveConatiner_execUpdateRequirements_Parms UpdateRequirements_Parms;

	this->ProcessEvent ( pFnUpdateRequirements, &UpdateRequirements_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.UpdateActorCount
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::UpdateActorCount ( )
{
	static UFunction* pFnUpdateActorCount = NULL;

	if ( ! pFnUpdateActorCount )
		pFnUpdateActorCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.UpdateActorCount" );

	UKFGFxHUD_ObjectiveConatiner_execUpdateActorCount_Parms UpdateActorCount_Parms;

	this->ProcessEvent ( pFnUpdateActorCount, &UpdateActorCount_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.TickHud" );

	UKFGFxHUD_ObjectiveConatiner_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.SetCurrentIcon
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::SetCurrentIcon ( )
{
	static UFunction* pFnSetCurrentIcon = NULL;

	if ( ! pFnSetCurrentIcon )
		pFnSetCurrentIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.SetCurrentIcon" );

	UKFGFxHUD_ObjectiveConatiner_execSetCurrentIcon_Parms SetCurrentIcon_Parms;

	this->ProcessEvent ( pFnSetCurrentIcon, &SetCurrentIcon_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.SetActive
// [0x00020102] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::SetActive ( )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.SetActive" );

	UKFGFxHUD_ObjectiveConatiner_execSetActive_Parms SetActive_Parms;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.LocalizeContainer" );

	UKFGFxHUD_ObjectiveConatiner_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ObjectiveConatiner.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ObjectiveConatiner::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ObjectiveConatiner.InitializeHUD" );

	UKFGFxHUD_ObjectiveConatiner_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.SetFlashlightBattery
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::SetFlashlightBattery ( )
{
	static UFunction* pFnSetFlashlightBattery = NULL;

	if ( ! pFnSetFlashlightBattery )
		pFnSetFlashlightBattery = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.SetFlashlightBattery" );

	UKFGFxHUD_PlayerBackpack_execSetFlashlightBattery_Parms SetFlashlightBattery_Parms;

	this->ProcessEvent ( pFnSetFlashlightBattery, &SetFlashlightBattery_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.UpdateFlashlight
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::UpdateFlashlight ( )
{
	static UFunction* pFnUpdateFlashlight = NULL;

	if ( ! pFnUpdateFlashlight )
		pFnUpdateFlashlight = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.UpdateFlashlight" );

	UKFGFxHUD_PlayerBackpack_execUpdateFlashlight_Parms UpdateFlashlight_Parms;

	this->ProcessEvent ( pFnUpdateFlashlight, &UpdateFlashlight_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.RefreshWeapon
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::RefreshWeapon ( )
{
	static UFunction* pFnRefreshWeapon = NULL;

	if ( ! pFnRefreshWeapon )
		pFnRefreshWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.RefreshWeapon" );

	UKFGFxHUD_PlayerBackpack_execRefreshWeapon_Parms RefreshWeapon_Parms;

	this->ProcessEvent ( pFnRefreshWeapon, &RefreshWeapon_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.UpdateFireModeIcon
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::UpdateFireModeIcon ( )
{
	static UFunction* pFnUpdateFireModeIcon = NULL;

	if ( ! pFnUpdateFireModeIcon )
		pFnUpdateFireModeIcon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.UpdateFireModeIcon" );

	UKFGFxHUD_PlayerBackpack_execUpdateFireModeIcon_Parms UpdateFireModeIcon_Parms;

	this->ProcessEvent ( pFnUpdateFireModeIcon, &UpdateFireModeIcon_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.UpdateWeapon
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::UpdateWeapon ( )
{
	static UFunction* pFnUpdateWeapon = NULL;

	if ( ! pFnUpdateWeapon )
		pFnUpdateWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.UpdateWeapon" );

	UKFGFxHUD_PlayerBackpack_execUpdateWeapon_Parms UpdateWeapon_Parms;

	this->ProcessEvent ( pFnUpdateWeapon, &UpdateWeapon_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.UpdateGrenades
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::UpdateGrenades ( )
{
	static UFunction* pFnUpdateGrenades = NULL;

	if ( ! pFnUpdateGrenades )
		pFnUpdateGrenades = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.UpdateGrenades" );

	UKFGFxHUD_PlayerBackpack_execUpdateGrenades_Parms UpdateGrenades_Parms;

	this->ProcessEvent ( pFnUpdateGrenades, &UpdateGrenades_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.UpdateDosh
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::UpdateDosh ( )
{
	static UFunction* pFnUpdateDosh = NULL;

	if ( ! pFnUpdateDosh )
		pFnUpdateDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.UpdateDosh" );

	UKFGFxHUD_PlayerBackpack_execUpdateDosh_Parms UpdateDosh_Parms;

	this->ProcessEvent ( pFnUpdateDosh, &UpdateDosh_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.UpdateWeight
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::UpdateWeight ( )
{
	static UFunction* pFnUpdateWeight = NULL;

	if ( ! pFnUpdateWeight )
		pFnUpdateWeight = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.UpdateWeight" );

	UKFGFxHUD_PlayerBackpack_execUpdateWeight_Parms UpdateWeight_Parms;

	this->ProcessEvent ( pFnUpdateWeight, &UpdateWeight_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.TickHud" );

	UKFGFxHUD_PlayerBackpack_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerBackpack.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerBackpack::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerBackpack.InitializeHUD" );

	UKFGFxHUD_PlayerBackpack_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerMoveList.ClearMoveList
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerMoveList::ClearMoveList ( )
{
	static UFunction* pFnClearMoveList = NULL;

	if ( ! pFnClearMoveList )
		pFnClearMoveList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerMoveList.ClearMoveList" );

	UKFGFxHUD_PlayerMoveList_execClearMoveList_Parms ClearMoveList_Parms;

	this->ProcessEvent ( pFnClearMoveList, &ClearMoveList_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerMoveList.BuildObjectArray
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerMoveList::BuildObjectArray ( )
{
	static UFunction* pFnBuildObjectArray = NULL;

	if ( ! pFnBuildObjectArray )
		pFnBuildObjectArray = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerMoveList.BuildObjectArray" );

	UKFGFxHUD_PlayerMoveList_execBuildObjectArray_Parms BuildObjectArray_Parms;

	this->ProcessEvent ( pFnBuildObjectArray, &BuildObjectArray_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerMoveList.UpdateMoveList
// [0x00820002] 
// Parameters infos:

void UKFGFxHUD_PlayerMoveList::UpdateMoveList ( )
{
	static UFunction* pFnUpdateMoveList = NULL;

	if ( ! pFnUpdateMoveList )
		pFnUpdateMoveList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerMoveList.UpdateMoveList" );

	UKFGFxHUD_PlayerMoveList_execUpdateMoveList_Parms UpdateMoveList_Parms;

	this->ProcessEvent ( pFnUpdateMoveList, &UpdateMoveList_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerMoveList.GetAlternateBindName
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerMoveList::GetAlternateBindName ( )
{
	static UFunction* pFnGetAlternateBindName = NULL;

	if ( ! pFnGetAlternateBindName )
		pFnGetAlternateBindName = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerMoveList.GetAlternateBindName" );

	UKFGFxHUD_PlayerMoveList_execGetAlternateBindName_Parms GetAlternateBindName_Parms;

	this->ProcessEvent ( pFnGetAlternateBindName, &GetAlternateBindName_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerMoveList.InitializeMoveList
// [0x00820002] 
// Parameters infos:

void UKFGFxHUD_PlayerMoveList::InitializeMoveList ( )
{
	static UFunction* pFnInitializeMoveList = NULL;

	if ( ! pFnInitializeMoveList )
		pFnInitializeMoveList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerMoveList.InitializeMoveList" );

	UKFGFxHUD_PlayerMoveList_execInitializeMoveList_Parms InitializeMoveList_Parms;

	this->ProcessEvent ( pFnInitializeMoveList, &InitializeMoveList_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerMoveList.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerMoveList::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerMoveList.TickHud" );

	UKFGFxHUD_PlayerMoveList_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerMoveList.ChangeOwner
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerMoveList::ChangeOwner ( )
{
	static UFunction* pFnChangeOwner = NULL;

	if ( ! pFnChangeOwner )
		pFnChangeOwner = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerMoveList.ChangeOwner" );

	UKFGFxHUD_PlayerMoveList_execChangeOwner_Parms ChangeOwner_Parms;

	this->ProcessEvent ( pFnChangeOwner, &ChangeOwner_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerMoveList.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerMoveList::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerMoveList.InitializeHUD" );

	UKFGFxHUD_PlayerMoveList_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHud_PlayerRosterWidget.UpdatePlayerData
// [0x00820002] 
// Parameters infos:

void UKFGFxHud_PlayerRosterWidget::UpdatePlayerData ( )
{
	static UFunction* pFnUpdatePlayerData = NULL;

	if ( ! pFnUpdatePlayerData )
		pFnUpdatePlayerData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHud_PlayerRosterWidget.UpdatePlayerData" );

	UKFGFxHud_PlayerRosterWidget_execUpdatePlayerData_Parms UpdatePlayerData_Parms;

	this->ProcessEvent ( pFnUpdatePlayerData, &UpdatePlayerData_Parms, NULL );
};

// Function KFGame.KFGFxHud_PlayerRosterWidget.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHud_PlayerRosterWidget::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHud_PlayerRosterWidget.TickHud" );

	UKFGFxHud_PlayerRosterWidget_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHud_PlayerRosterWidget.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHud_PlayerRosterWidget::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHud_PlayerRosterWidget.InitializeHUD" );

	UKFGFxHud_PlayerRosterWidget_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.ShowXPBark
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::ShowXPBark ( )
{
	static UFunction* pFnShowXPBark = NULL;

	if ( ! pFnShowXPBark )
		pFnShowXPBark = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.ShowXPBark" );

	UKFGFxHUD_PlayerStatus_execShowXPBark_Parms ShowXPBark_Parms;

	this->ProcessEvent ( pFnShowXPBark, &ShowXPBark_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.UpdateXP
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::UpdateXP ( )
{
	static UFunction* pFnUpdateXP = NULL;

	if ( ! pFnUpdateXP )
		pFnUpdateXP = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.UpdateXP" );

	UKFGFxHUD_PlayerStatus_execUpdateXP_Parms UpdateXP_Parms;

	this->ProcessEvent ( pFnUpdateXP, &UpdateXP_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.UpdateArmor
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::UpdateArmor ( )
{
	static UFunction* pFnUpdateArmor = NULL;

	if ( ! pFnUpdateArmor )
		pFnUpdateArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.UpdateArmor" );

	UKFGFxHUD_PlayerStatus_execUpdateArmor_Parms UpdateArmor_Parms;

	this->ProcessEvent ( pFnUpdateArmor, &UpdateArmor_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.UpdateHealth
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::UpdateHealth ( )
{
	static UFunction* pFnUpdateHealth = NULL;

	if ( ! pFnUpdateHealth )
		pFnUpdateHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.UpdateHealth" );

	UKFGFxHUD_PlayerStatus_execUpdateHealth_Parms UpdateHealth_Parms;

	this->ProcessEvent ( pFnUpdateHealth, &UpdateHealth_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.UpdatePerk
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::UpdatePerk ( )
{
	static UFunction* pFnUpdatePerk = NULL;

	if ( ! pFnUpdatePerk )
		pFnUpdatePerk = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.UpdatePerk" );

	UKFGFxHUD_PlayerStatus_execUpdatePerk_Parms UpdatePerk_Parms;

	this->ProcessEvent ( pFnUpdatePerk, &UpdatePerk_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.UpdateHealer
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::UpdateHealer ( )
{
	static UFunction* pFnUpdateHealer = NULL;

	if ( ! pFnUpdateHealer )
		pFnUpdateHealer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.UpdateHealer" );

	UKFGFxHUD_PlayerStatus_execUpdateHealer_Parms UpdateHealer_Parms;

	this->ProcessEvent ( pFnUpdateHealer, &UpdateHealer_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.ClearBuffIcons
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::ClearBuffIcons ( )
{
	static UFunction* pFnClearBuffIcons = NULL;

	if ( ! pFnClearBuffIcons )
		pFnClearBuffIcons = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.ClearBuffIcons" );

	UKFGFxHUD_PlayerStatus_execClearBuffIcons_Parms ClearBuffIcons_Parms;

	this->ProcessEvent ( pFnClearBuffIcons, &ClearBuffIcons_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.ShowActiveIndicators
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::ShowActiveIndicators ( )
{
	static UFunction* pFnShowActiveIndicators = NULL;

	if ( ! pFnShowActiveIndicators )
		pFnShowActiveIndicators = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.ShowActiveIndicators" );

	UKFGFxHUD_PlayerStatus_execShowActiveIndicators_Parms ShowActiveIndicators_Parms;

	this->ProcessEvent ( pFnShowActiveIndicators, &ShowActiveIndicators_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.TickHud" );

	UKFGFxHUD_PlayerStatus_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.LocalizeText" );

	UKFGFxHUD_PlayerStatus_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PlayerStatus.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatus::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PlayerStatus.InitializeHUD" );

	UKFGFxHUD_PlayerStatus_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PostRoundMenu.DisplayProgress
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PostRoundMenu::DisplayProgress ( )
{
	static UFunction* pFnDisplayProgress = NULL;

	if ( ! pFnDisplayProgress )
		pFnDisplayProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PostRoundMenu.DisplayProgress" );

	UKFGFxHUD_PostRoundMenu_execDisplayProgress_Parms DisplayProgress_Parms;

	this->ProcessEvent ( pFnDisplayProgress, &DisplayProgress_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PostRoundMenu.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxHUD_PostRoundMenu::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PostRoundMenu.WidgetInitialized" );

	UKFGFxHUD_PostRoundMenu_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PostRoundMenu.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PostRoundMenu::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PostRoundMenu.LocalizeText" );

	UKFGFxHUD_PostRoundMenu_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxHUD_PostRoundMenu.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PostRoundMenu::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_PostRoundMenu.InitializeHUD" );

	UKFGFxHUD_PostRoundMenu_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxPostRoundContainer_Team.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxPostRoundContainer_Team::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostRoundContainer_Team.LocalizeText" );

	UKFGFxPostRoundContainer_Team_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxPostRoundContainer_Team.CreateResultsForTeam
// [0x00820002] 
// Parameters infos:

void UKFGFxPostRoundContainer_Team::CreateResultsForTeam ( )
{
	static UFunction* pFnCreateResultsForTeam = NULL;

	if ( ! pFnCreateResultsForTeam )
		pFnCreateResultsForTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostRoundContainer_Team.CreateResultsForTeam" );

	UKFGFxPostRoundContainer_Team_execCreateResultsForTeam_Parms CreateResultsForTeam_Parms;

	this->ProcessEvent ( pFnCreateResultsForTeam, &CreateResultsForTeam_Parms, NULL );
};

// Function KFGame.KFGFxPostRoundContainer_Team.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPostRoundContainer_Team::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostRoundContainer_Team.Initialize" );

	UKFGFxPostRoundContainer_Team_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardMapInfoContainer.UpdateWaveCount
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardMapInfoContainer::UpdateWaveCount ( )
{
	static UFunction* pFnUpdateWaveCount = NULL;

	if ( ! pFnUpdateWaveCount )
		pFnUpdateWaveCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardMapInfoContainer.UpdateWaveCount" );

	UKFGFxHUD_ScoreboardMapInfoContainer_execUpdateWaveCount_Parms UpdateWaveCount_Parms;

	this->ProcessEvent ( pFnUpdateWaveCount, &UpdateWaveCount_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardMapInfoContainer.UpdateMatchInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardMapInfoContainer::UpdateMatchInfo ( )
{
	static UFunction* pFnUpdateMatchInfo = NULL;

	if ( ! pFnUpdateMatchInfo )
		pFnUpdateMatchInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardMapInfoContainer.UpdateMatchInfo" );

	UKFGFxHUD_ScoreboardMapInfoContainer_execUpdateMatchInfo_Parms UpdateMatchInfo_Parms;

	this->ProcessEvent ( pFnUpdateMatchInfo, &UpdateMatchInfo_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardMapInfoContainer.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardMapInfoContainer::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardMapInfoContainer.LocalizeText" );

	UKFGFxHUD_ScoreboardMapInfoContainer_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardMapInfoContainer.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardMapInfoContainer::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardMapInfoContainer.InitializeHUD" );

	UKFGFxHUD_ScoreboardMapInfoContainer_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.UpdatePlayerData
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::UpdatePlayerData ( )
{
	static UFunction* pFnUpdatePlayerData = NULL;

	if ( ! pFnUpdatePlayerData )
		pFnUpdatePlayerData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.UpdatePlayerData" );

	UKFGFxHUD_ScoreboardWidget_execUpdatePlayerData_Parms UpdatePlayerData_Parms;

	this->ProcessEvent ( pFnUpdatePlayerData, &UpdatePlayerData_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.SortPlayerList
// [0x00420002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::SortPlayerList ( )
{
	static UFunction* pFnSortPlayerList = NULL;

	if ( ! pFnSortPlayerList )
		pFnSortPlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.SortPlayerList" );

	UKFGFxHUD_ScoreboardWidget_execSortPlayerList_Parms SortPlayerList_Parms;

	this->ProcessEvent ( pFnSortPlayerList, &SortPlayerList_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.UpdatePlayerList
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::UpdatePlayerList ( )
{
	static UFunction* pFnUpdatePlayerList = NULL;

	if ( ! pFnUpdatePlayerList )
		pFnUpdatePlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.UpdatePlayerList" );

	UKFGFxHUD_ScoreboardWidget_execUpdatePlayerList_Parms UpdatePlayerList_Parms;

	this->ProcessEvent ( pFnUpdatePlayerList, &UpdatePlayerList_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.UpdateMatchInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::UpdateMatchInfo ( )
{
	static UFunction* pFnUpdateMatchInfo = NULL;

	if ( ! pFnUpdateMatchInfo )
		pFnUpdateMatchInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.UpdateMatchInfo" );

	UKFGFxHUD_ScoreboardWidget_execUpdateMatchInfo_Parms UpdateMatchInfo_Parms;

	this->ProcessEvent ( pFnUpdateMatchInfo, &UpdateMatchInfo_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.SetOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::SetOpen ( )
{
	static UFunction* pFnSetOpen = NULL;

	if ( ! pFnSetOpen )
		pFnSetOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.SetOpen" );

	UKFGFxHUD_ScoreboardWidget_execSetOpen_Parms SetOpen_Parms;

	this->ProcessEvent ( pFnSetOpen, &SetOpen_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.ForceUpdateNextFrame
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::ForceUpdateNextFrame ( )
{
	static UFunction* pFnForceUpdateNextFrame = NULL;

	if ( ! pFnForceUpdateNextFrame )
		pFnForceUpdateNextFrame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.ForceUpdateNextFrame" );

	UKFGFxHUD_ScoreboardWidget_execForceUpdateNextFrame_Parms ForceUpdateNextFrame_Parms;

	this->ProcessEvent ( pFnForceUpdateNextFrame, &ForceUpdateNextFrame_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.TickHud" );

	UKFGFxHUD_ScoreboardWidget_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.WidgetInitialized" );

	UKFGFxHUD_ScoreboardWidget_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.SendServerInfoToGFX
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::SendServerInfoToGFX ( )
{
	static UFunction* pFnSendServerInfoToGFX = NULL;

	if ( ! pFnSendServerInfoToGFX )
		pFnSendServerInfoToGFX = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.SendServerInfoToGFX" );

	UKFGFxHUD_ScoreboardWidget_execSendServerInfoToGFX_Parms SendServerInfoToGFX_Parms;

	this->ProcessEvent ( pFnSendServerInfoToGFX, &SendServerInfoToGFX_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.LocalizeText" );

	UKFGFxHUD_ScoreboardWidget_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardWidget.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardWidget::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardWidget.InitializeHUD" );

	UKFGFxHUD_ScoreboardWidget_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardVersusWidget.UpdatePlayerData
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardVersusWidget::UpdatePlayerData ( )
{
	static UFunction* pFnUpdatePlayerData = NULL;

	if ( ! pFnUpdatePlayerData )
		pFnUpdatePlayerData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardVersusWidget.UpdatePlayerData" );

	UKFGFxHUD_ScoreboardVersusWidget_execUpdatePlayerData_Parms UpdatePlayerData_Parms;

	this->ProcessEvent ( pFnUpdatePlayerData, &UpdatePlayerData_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardVersusWidget.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardVersusWidget::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardVersusWidget.TickHud" );

	UKFGFxHUD_ScoreboardVersusWidget_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_ScoreboardVersusWidget.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_ScoreboardVersusWidget::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_ScoreboardVersusWidget.LocalizeText" );

	UKFGFxHUD_ScoreboardVersusWidget_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo.UpdatePlayerInfo
// [0x00024002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo::UpdatePlayerInfo ( )
{
	static UFunction* pFnUpdatePlayerInfo = NULL;

	if ( ! pFnUpdatePlayerInfo )
		pFnUpdatePlayerInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo.UpdatePlayerInfo" );

	UKFGFxHUD_SpectatorInfo_execUpdatePlayerInfo_Parms UpdatePlayerInfo_Parms;

	this->ProcessEvent ( pFnUpdatePlayerInfo, &UpdatePlayerInfo_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo.UpdateSpectateeInfo
// [0x00024002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo::UpdateSpectateeInfo ( )
{
	static UFunction* pFnUpdateSpectateeInfo = NULL;

	if ( ! pFnUpdateSpectateeInfo )
		pFnUpdateSpectateeInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo.UpdateSpectateeInfo" );

	UKFGFxHUD_SpectatorInfo_execUpdateSpectateeInfo_Parms UpdateSpectateeInfo_Parms;

	this->ProcessEvent ( pFnUpdateSpectateeInfo, &UpdateSpectateeInfo_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo.SetSpectatedKFPRI
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo::SetSpectatedKFPRI ( )
{
	static UFunction* pFnSetSpectatedKFPRI = NULL;

	if ( ! pFnSetSpectatedKFPRI )
		pFnSetSpectatedKFPRI = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo.SetSpectatedKFPRI" );

	UKFGFxHUD_SpectatorInfo_execSetSpectatedKFPRI_Parms SetSpectatedKFPRI_Parms;

	this->ProcessEvent ( pFnSetSpectatedKFPRI, &SetSpectatedKFPRI_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo.UpdateUsingGamePad
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo::UpdateUsingGamePad ( )
{
	static UFunction* pFnUpdateUsingGamePad = NULL;

	if ( ! pFnUpdateUsingGamePad )
		pFnUpdateUsingGamePad = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo.UpdateUsingGamePad" );

	UKFGFxHUD_SpectatorInfo_execUpdateUsingGamePad_Parms UpdateUsingGamePad_Parms;

	this->ProcessEvent ( pFnUpdateUsingGamePad, &UpdateUsingGamePad_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo.TickHud" );

	UKFGFxHUD_SpectatorInfo_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo.SetPlayerInfoVisible
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo::SetPlayerInfoVisible ( )
{
	static UFunction* pFnSetPlayerInfoVisible = NULL;

	if ( ! pFnSetPlayerInfoVisible )
		pFnSetPlayerInfoVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo.SetPlayerInfoVisible" );

	UKFGFxHUD_SpectatorInfo_execSetPlayerInfoVisible_Parms SetPlayerInfoVisible_Parms;

	this->ProcessEvent ( pFnSetPlayerInfoVisible, &SetPlayerInfoVisible_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo.LocalizeText" );

	UKFGFxHUD_SpectatorInfo_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo.InitializeHUD" );

	UKFGFxHUD_SpectatorInfo_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_SpectatorInfo_Versus.UpdatePlayerInfo
// [0x00024002] 
// Parameters infos:

void UKFGFxHUD_SpectatorInfo_Versus::UpdatePlayerInfo ( )
{
	static UFunction* pFnUpdatePlayerInfo = NULL;

	if ( ! pFnUpdatePlayerInfo )
		pFnUpdatePlayerInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_SpectatorInfo_Versus.UpdatePlayerInfo" );

	UKFGFxHUD_SpectatorInfo_Versus_execUpdatePlayerInfo_Parms UpdatePlayerInfo_Parms;

	this->ProcessEvent ( pFnUpdatePlayerInfo, &UpdatePlayerInfo_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame_Versus.RefreshSlot
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame_Versus::RefreshSlot ( )
{
	static UFunction* pFnRefreshSlot = NULL;

	if ( ! pFnRefreshSlot )
		pFnRefreshSlot = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame_Versus.RefreshSlot" );

	UKFGFxWidget_PartyInGame_Versus_execRefreshSlot_Parms RefreshSlot_Parms;

	this->ProcessEvent ( pFnRefreshSlot, &RefreshSlot_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame_Versus.SortPlayers
// [0x00120002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame_Versus::SortPlayers ( )
{
	static UFunction* pFnSortPlayers = NULL;

	if ( ! pFnSortPlayers )
		pFnSortPlayers = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame_Versus.SortPlayers" );

	UKFGFxWidget_PartyInGame_Versus_execSortPlayers_Parms SortPlayers_Parms;

	this->ProcessEvent ( pFnSortPlayers, &SortPlayers_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame_Versus.GetKFPRIArray
// [0x00420002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame_Versus::GetKFPRIArray ( )
{
	static UFunction* pFnGetKFPRIArray = NULL;

	if ( ! pFnGetKFPRIArray )
		pFnGetKFPRIArray = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame_Versus.GetKFPRIArray" );

	UKFGFxWidget_PartyInGame_Versus_execGetKFPRIArray_Parms GetKFPRIArray_Parms;

	this->ProcessEvent ( pFnGetKFPRIArray, &GetKFPRIArray_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame_Versus.UpdateTeams
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame_Versus::UpdateTeams ( )
{
	static UFunction* pFnUpdateTeams = NULL;

	if ( ! pFnUpdateTeams )
		pFnUpdateTeams = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame_Versus.UpdateTeams" );

	UKFGFxWidget_PartyInGame_Versus_execUpdateTeams_Parms UpdateTeams_Parms;

	this->ProcessEvent ( pFnUpdateTeams, &UpdateTeams_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame_Versus.UpdateBalanceWarning
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame_Versus::UpdateBalanceWarning ( )
{
	static UFunction* pFnUpdateBalanceWarning = NULL;

	if ( ! pFnUpdateBalanceWarning )
		pFnUpdateBalanceWarning = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame_Versus.UpdateBalanceWarning" );

	UKFGFxWidget_PartyInGame_Versus_execUpdateBalanceWarning_Parms UpdateBalanceWarning_Parms;

	this->ProcessEvent ( pFnUpdateBalanceWarning, &UpdateBalanceWarning_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame_Versus.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame_Versus::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame_Versus.OneSecondLoop" );

	UKFGFxWidget_PartyInGame_Versus_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame_Versus.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame_Versus::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame_Versus.LocalizeText" );

	UKFGFxWidget_PartyInGame_Versus_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame_Versus.InitializeWidget
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame_Versus::InitializeWidget ( )
{
	static UFunction* pFnInitializeWidget = NULL;

	if ( ! pFnInitializeWidget )
		pFnInitializeWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame_Versus.InitializeWidget" );

	UKFGFxWidget_PartyInGame_Versus_execInitializeWidget_Parms InitializeWidget_Parms;

	this->ProcessEvent ( pFnInitializeWidget, &InitializeWidget_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.KickPlayer
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::KickPlayer ( )
{
	static UFunction* pFnKickPlayer = NULL;

	if ( ! pFnKickPlayer )
		pFnKickPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.KickPlayer" );

	UKFGFxWidget_PartyInGame_execKickPlayer_Parms KickPlayer_Parms;

	this->ProcessEvent ( pFnKickPlayer, &KickPlayer_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.AddFriend
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::AddFriend ( )
{
	static UFunction* pFnAddFriend = NULL;

	if ( ! pFnAddFriend )
		pFnAddFriend = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.AddFriend" );

	UKFGFxWidget_PartyInGame_execAddFriend_Parms AddFriend_Parms;

	this->ProcessEvent ( pFnAddFriend, &AddFriend_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.ViewProfile
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::ViewProfile ( )
{
	static UFunction* pFnViewProfile = NULL;

	if ( ! pFnViewProfile )
		pFnViewProfile = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.ViewProfile" );

	UKFGFxWidget_PartyInGame_execViewProfile_Parms ViewProfile_Parms;

	this->ProcessEvent ( pFnViewProfile, &ViewProfile_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.ToggelMuteOnPlayer
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::ToggelMuteOnPlayer ( )
{
	static UFunction* pFnToggelMuteOnPlayer = NULL;

	if ( ! pFnToggelMuteOnPlayer )
		pFnToggelMuteOnPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.ToggelMuteOnPlayer" );

	UKFGFxWidget_PartyInGame_execToggelMuteOnPlayer_Parms ToggelMuteOnPlayer_Parms;

	this->ProcessEvent ( pFnToggelMuteOnPlayer, &ToggelMuteOnPlayer_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.RefreshSlot
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::RefreshSlot ( )
{
	static UFunction* pFnRefreshSlot = NULL;

	if ( ! pFnRefreshSlot )
		pFnRefreshSlot = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.RefreshSlot" );

	UKFGFxWidget_PartyInGame_execRefreshSlot_Parms RefreshSlot_Parms;

	this->ProcessEvent ( pFnRefreshSlot, &RefreshSlot_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.RefreshParty
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::RefreshParty ( )
{
	static UFunction* pFnRefreshParty = NULL;

	if ( ! pFnRefreshParty )
		pFnRefreshParty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.RefreshParty" );

	UKFGFxWidget_PartyInGame_execRefreshParty_Parms RefreshParty_Parms;

	this->ProcessEvent ( pFnRefreshParty, &RefreshParty_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.GetKFPRIArray
// [0x00420002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::GetKFPRIArray ( )
{
	static UFunction* pFnGetKFPRIArray = NULL;

	if ( ! pFnGetKFPRIArray )
		pFnGetKFPRIArray = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.GetKFPRIArray" );

	UKFGFxWidget_PartyInGame_execGetKFPRIArray_Parms GetKFPRIArray_Parms;

	this->ProcessEvent ( pFnGetKFPRIArray, &GetKFPRIArray_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.UpdateVOIP
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::UpdateVOIP ( )
{
	static UFunction* pFnUpdateVOIP = NULL;

	if ( ! pFnUpdateVOIP )
		pFnUpdateVOIP = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.UpdateVOIP" );

	UKFGFxWidget_PartyInGame_execUpdateVOIP_Parms UpdateVOIP_Parms;

	this->ProcessEvent ( pFnUpdateVOIP, &UpdateVOIP_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.OneSecondLoop" );

	UKFGFxWidget_PartyInGame_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.UpdateReadyButtonVisibility
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::UpdateReadyButtonVisibility ( )
{
	static UFunction* pFnUpdateReadyButtonVisibility = NULL;

	if ( ! pFnUpdateReadyButtonVisibility )
		pFnUpdateReadyButtonVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.UpdateReadyButtonVisibility" );

	UKFGFxWidget_PartyInGame_execUpdateReadyButtonVisibility_Parms UpdateReadyButtonVisibility_Parms;

	this->ProcessEvent ( pFnUpdateReadyButtonVisibility, &UpdateReadyButtonVisibility_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.UpdateReadyButtonText
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::UpdateReadyButtonText ( )
{
	static UFunction* pFnUpdateReadyButtonText = NULL;

	if ( ! pFnUpdateReadyButtonText )
		pFnUpdateReadyButtonText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.UpdateReadyButtonText" );

	UKFGFxWidget_PartyInGame_execUpdateReadyButtonText_Parms UpdateReadyButtonText_Parms;

	this->ProcessEvent ( pFnUpdateReadyButtonText, &UpdateReadyButtonText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyInGame.InitializeWidget
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyInGame::InitializeWidget ( )
{
	static UFunction* pFnInitializeWidget = NULL;

	if ( ! pFnInitializeWidget )
		pFnInitializeWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyInGame.InitializeWidget" );

	UKFGFxWidget_PartyInGame_execInitializeWidget_Parms InitializeWidget_Parms;

	this->ProcessEvent ( pFnInitializeWidget, &InitializeWidget_Parms, NULL );
};

// Function KFGame.KFGFxHUD_TraderCompass.UpdateTraderCompassPosition
// [0x00820002] 
// Parameters infos:

void UKFGFxHUD_TraderCompass::UpdateTraderCompassPosition ( )
{
	static UFunction* pFnUpdateTraderCompassPosition = NULL;

	if ( ! pFnUpdateTraderCompassPosition )
		pFnUpdateTraderCompassPosition = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_TraderCompass.UpdateTraderCompassPosition" );

	UKFGFxHUD_TraderCompass_execUpdateTraderCompassPosition_Parms UpdateTraderCompassPosition_Parms;

	this->ProcessEvent ( pFnUpdateTraderCompassPosition, &UpdateTraderCompassPosition_Parms, NULL );
};

// Function KFGame.KFGFxHUD_TraderCompass.UpdateDistanceToTrader
// [0x00820002] 
// Parameters infos:

void UKFGFxHUD_TraderCompass::UpdateDistanceToTrader ( )
{
	static UFunction* pFnUpdateDistanceToTrader = NULL;

	if ( ! pFnUpdateDistanceToTrader )
		pFnUpdateDistanceToTrader = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_TraderCompass.UpdateDistanceToTrader" );

	UKFGFxHUD_TraderCompass_execUpdateDistanceToTrader_Parms UpdateDistanceToTrader_Parms;

	this->ProcessEvent ( pFnUpdateDistanceToTrader, &UpdateDistanceToTrader_Parms, NULL );
};

// Function KFGame.KFGFxHUD_TraderCompass.GetCurrentTraderLocation
// [0x00820002] 
// Parameters infos:

void UKFGFxHUD_TraderCompass::GetCurrentTraderLocation ( )
{
	static UFunction* pFnGetCurrentTraderLocation = NULL;

	if ( ! pFnGetCurrentTraderLocation )
		pFnGetCurrentTraderLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_TraderCompass.GetCurrentTraderLocation" );

	UKFGFxHUD_TraderCompass_execGetCurrentTraderLocation_Parms GetCurrentTraderLocation_Parms;

	this->ProcessEvent ( pFnGetCurrentTraderLocation, &GetCurrentTraderLocation_Parms, NULL );
};

// Function KFGame.KFGFxHUD_TraderCompass.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_TraderCompass::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_TraderCompass.TickHud" );

	UKFGFxHUD_TraderCompass_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxHUD_TraderCompass.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_TraderCompass::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_TraderCompass.InitializeHUD" );

	UKFGFxHUD_TraderCompass_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxHUD_TraderCompass.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxHUD_TraderCompass::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxHUD_TraderCompass.WidgetInitialized" );

	UKFGFxHUD_TraderCompass_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.OnLeaveGameConfirm
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::OnLeaveGameConfirm ( )
{
	static UFunction* pFnOnLeaveGameConfirm = NULL;

	if ( ! pFnOnLeaveGameConfirm )
		pFnOnLeaveGameConfirm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.OnLeaveGameConfirm" );

	UKFGFxMenu_Exit_execOnLeaveGameConfirm_Parms OnLeaveGameConfirm_Parms;

	this->ProcessEvent ( pFnOnLeaveGameConfirm, &OnLeaveGameConfirm_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.ShowLeaveGamePopUp
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::ShowLeaveGamePopUp ( )
{
	static UFunction* pFnShowLeaveGamePopUp = NULL;

	if ( ! pFnShowLeaveGamePopUp )
		pFnShowLeaveGamePopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.ShowLeaveGamePopUp" );

	UKFGFxMenu_Exit_execShowLeaveGamePopUp_Parms ShowLeaveGamePopUp_Parms;

	this->ProcessEvent ( pFnShowLeaveGamePopUp, &ShowLeaveGamePopUp_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.ShowExitToOSPopUp
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::ShowExitToOSPopUp ( )
{
	static UFunction* pFnShowExitToOSPopUp = NULL;

	if ( ! pFnShowExitToOSPopUp )
		pFnShowExitToOSPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.ShowExitToOSPopUp" );

	UKFGFxMenu_Exit_execShowExitToOSPopUp_Parms ShowExitToOSPopUp_Parms;

	this->ProcessEvent ( pFnShowExitToOSPopUp, &ShowExitToOSPopUp_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.HandleAutoExit
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::HandleAutoExit ( )
{
	static UFunction* pFnHandleAutoExit = NULL;

	if ( ! pFnHandleAutoExit )
		pFnHandleAutoExit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.HandleAutoExit" );

	UKFGFxMenu_Exit_execHandleAutoExit_Parms HandleAutoExit_Parms;

	this->ProcessEvent ( pFnHandleAutoExit, &HandleAutoExit_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.Callback_MenuSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::Callback_MenuSelected ( )
{
	static UFunction* pFnCallback_MenuSelected = NULL;

	if ( ! pFnCallback_MenuSelected )
		pFnCallback_MenuSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.Callback_MenuSelected" );

	UKFGFxMenu_Exit_execCallback_MenuSelected_Parms Callback_MenuSelected_Parms;

	this->ProcessEvent ( pFnCallback_MenuSelected, &Callback_MenuSelected_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.SetMenuText
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::SetMenuText ( )
{
	static UFunction* pFnSetMenuText = NULL;

	if ( ! pFnSetMenuText )
		pFnSetMenuText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.SetMenuText" );

	UKFGFxMenu_Exit_execSetMenuText_Parms SetMenuText_Parms;

	this->ProcessEvent ( pFnSetMenuText, &SetMenuText_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.SetExitOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::SetExitOptions ( )
{
	static UFunction* pFnSetExitOptions = NULL;

	if ( ! pFnSetExitOptions )
		pFnSetExitOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.SetExitOptions" );

	UKFGFxMenu_Exit_execSetExitOptions_Parms SetExitOptions_Parms;

	this->ProcessEvent ( pFnSetExitOptions, &SetExitOptions_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.OnOpen" );

	UKFGFxMenu_Exit_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Exit.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Exit::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Exit.InitializeMenu" );

	UKFGFxMenu_Exit_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_PreviewItem
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_PreviewItem ( )
{
	static UFunction* pFnCallback_PreviewItem = NULL;

	if ( ! pFnCallback_PreviewItem )
		pFnCallback_PreviewItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_PreviewItem" );

	UKFGFxMenu_Inventory_execCallback_PreviewItem_Parms Callback_PreviewItem_Parms;

	this->ProcessEvent ( pFnCallback_PreviewItem, &Callback_PreviewItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.CallBack_RequestWeaponCraftInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::CallBack_RequestWeaponCraftInfo ( )
{
	static UFunction* pFnCallBack_RequestWeaponCraftInfo = NULL;

	if ( ! pFnCallBack_RequestWeaponCraftInfo )
		pFnCallBack_RequestWeaponCraftInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.CallBack_RequestWeaponCraftInfo" );

	UKFGFxMenu_Inventory_execCallBack_RequestWeaponCraftInfo_Parms CallBack_RequestWeaponCraftInfo_Parms;

	this->ProcessEvent ( pFnCallBack_RequestWeaponCraftInfo, &CallBack_RequestWeaponCraftInfo_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.CallBack_RequestCosmeticCraftInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::CallBack_RequestCosmeticCraftInfo ( )
{
	static UFunction* pFnCallBack_RequestCosmeticCraftInfo = NULL;

	if ( ! pFnCallBack_RequestCosmeticCraftInfo )
		pFnCallBack_RequestCosmeticCraftInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.CallBack_RequestCosmeticCraftInfo" );

	UKFGFxMenu_Inventory_execCallBack_RequestCosmeticCraftInfo_Parms CallBack_RequestCosmeticCraftInfo_Parms;

	this->ProcessEvent ( pFnCallBack_RequestCosmeticCraftInfo, &CallBack_RequestCosmeticCraftInfo_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_PerkTypeFilterChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_PerkTypeFilterChanged ( )
{
	static UFunction* pFnCallback_PerkTypeFilterChanged = NULL;

	if ( ! pFnCallback_PerkTypeFilterChanged )
		pFnCallback_PerkTypeFilterChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_PerkTypeFilterChanged" );

	UKFGFxMenu_Inventory_execCallback_PerkTypeFilterChanged_Parms Callback_PerkTypeFilterChanged_Parms;

	this->ProcessEvent ( pFnCallback_PerkTypeFilterChanged, &Callback_PerkTypeFilterChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_RarityTypeFilterChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_RarityTypeFilterChanged ( )
{
	static UFunction* pFnCallback_RarityTypeFilterChanged = NULL;

	if ( ! pFnCallback_RarityTypeFilterChanged )
		pFnCallback_RarityTypeFilterChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_RarityTypeFilterChanged" );

	UKFGFxMenu_Inventory_execCallback_RarityTypeFilterChanged_Parms Callback_RarityTypeFilterChanged_Parms;

	this->ProcessEvent ( pFnCallback_RarityTypeFilterChanged, &Callback_RarityTypeFilterChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_WeaponTypeFilterChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_WeaponTypeFilterChanged ( )
{
	static UFunction* pFnCallback_WeaponTypeFilterChanged = NULL;

	if ( ! pFnCallback_WeaponTypeFilterChanged )
		pFnCallback_WeaponTypeFilterChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_WeaponTypeFilterChanged" );

	UKFGFxMenu_Inventory_execCallback_WeaponTypeFilterChanged_Parms Callback_WeaponTypeFilterChanged_Parms;

	this->ProcessEvent ( pFnCallback_WeaponTypeFilterChanged, &Callback_WeaponTypeFilterChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_CraftOption
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_CraftOption ( )
{
	static UFunction* pFnCallback_CraftOption = NULL;

	if ( ! pFnCallback_CraftOption )
		pFnCallback_CraftOption = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_CraftOption" );

	UKFGFxMenu_Inventory_execCallback_CraftOption_Parms Callback_CraftOption_Parms;

	this->ProcessEvent ( pFnCallback_CraftOption, &Callback_CraftOption_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_RecycleItem
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_RecycleItem ( )
{
	static UFunction* pFnCallback_RecycleItem = NULL;

	if ( ! pFnCallback_RecycleItem )
		pFnCallback_RecycleItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_RecycleItem" );

	UKFGFxMenu_Inventory_execCallback_RecycleItem_Parms Callback_RecycleItem_Parms;

	this->ProcessEvent ( pFnCallback_RecycleItem, &Callback_RecycleItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_CharacterSkin
// [0x00020000] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_CharacterSkin ( )
{
	static UFunction* pFnCallback_CharacterSkin = NULL;

	if ( ! pFnCallback_CharacterSkin )
		pFnCallback_CharacterSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_CharacterSkin" );

	UKFGFxMenu_Inventory_execCallback_CharacterSkin_Parms Callback_CharacterSkin_Parms;

	this->ProcessEvent ( pFnCallback_CharacterSkin, &Callback_CharacterSkin_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_UseItem
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_UseItem ( )
{
	static UFunction* pFnCallback_UseItem = NULL;

	if ( ! pFnCallback_UseItem )
		pFnCallback_UseItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_UseItem" );

	UKFGFxMenu_Inventory_execCallback_UseItem_Parms Callback_UseItem_Parms;

	this->ProcessEvent ( pFnCallback_UseItem, &Callback_UseItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.CallBack_ItemDetailsClicked
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Inventory::CallBack_ItemDetailsClicked ( )
{
	static UFunction* pFnCallBack_ItemDetailsClicked = NULL;

	if ( ! pFnCallBack_ItemDetailsClicked )
		pFnCallBack_ItemDetailsClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.CallBack_ItemDetailsClicked" );

	UKFGFxMenu_Inventory_execCallBack_ItemDetailsClicked_Parms CallBack_ItemDetailsClicked_Parms;

	this->ProcessEvent ( pFnCallBack_ItemDetailsClicked, &CallBack_ItemDetailsClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_EquipSFX
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_EquipSFX ( )
{
	static UFunction* pFnCallback_EquipSFX = NULL;

	if ( ! pFnCallback_EquipSFX )
		pFnCallback_EquipSFX = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_EquipSFX" );

	UKFGFxMenu_Inventory_execCallback_EquipSFX_Parms Callback_EquipSFX_Parms;

	this->ProcessEvent ( pFnCallback_EquipSFX, &Callback_EquipSFX_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_Equip
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_Equip ( )
{
	static UFunction* pFnCallback_Equip = NULL;

	if ( ! pFnCallback_Equip )
		pFnCallback_Equip = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_Equip" );

	UKFGFxMenu_Inventory_execCallback_Equip_Parms Callback_Equip_Parms;

	this->ProcessEvent ( pFnCallback_Equip, &Callback_Equip_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_InventoryFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_InventoryFilter ( )
{
	static UFunction* pFnCallback_InventoryFilter = NULL;

	if ( ! pFnCallback_InventoryFilter )
		pFnCallback_InventoryFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_InventoryFilter" );

	UKFGFxMenu_Inventory_execCallback_InventoryFilter_Parms Callback_InventoryFilter_Parms;

	this->ProcessEvent ( pFnCallback_InventoryFilter, &Callback_InventoryFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_RequestInitialnventory
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_RequestInitialnventory ( )
{
	static UFunction* pFnCallback_RequestInitialnventory = NULL;

	if ( ! pFnCallback_RequestInitialnventory )
		pFnCallback_RequestInitialnventory = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_RequestInitialnventory" );

	UKFGFxMenu_Inventory_execCallback_RequestInitialnventory_Parms Callback_RequestInitialnventory_Parms;

	this->ProcessEvent ( pFnCallback_RequestInitialnventory, &Callback_RequestInitialnventory_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.Callback_CrateOpenComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::Callback_CrateOpenComplete ( )
{
	static UFunction* pFnCallback_CrateOpenComplete = NULL;

	if ( ! pFnCallback_CrateOpenComplete )
		pFnCallback_CrateOpenComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.Callback_CrateOpenComplete" );

	UKFGFxMenu_Inventory_execCallback_CrateOpenComplete_Parms Callback_CrateOpenComplete_Parms;

	this->ProcessEvent ( pFnCallback_CrateOpenComplete, &Callback_CrateOpenComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.GetItemCount
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::GetItemCount ( )
{
	static UFunction* pFnGetItemCount = NULL;

	if ( ! pFnGetItemCount )
		pFnGetItemCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.GetItemCount" );

	UKFGFxMenu_Inventory_execGetItemCount_Parms GetItemCount_Parms;

	this->ProcessEvent ( pFnGetItemCount, &GetItemCount_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.ConfirmCraft
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::ConfirmCraft ( )
{
	static UFunction* pFnConfirmCraft = NULL;

	if ( ! pFnConfirmCraft )
		pFnConfirmCraft = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.ConfirmCraft" );

	UKFGFxMenu_Inventory_execConfirmCraft_Parms ConfirmCraft_Parms;

	this->ProcessEvent ( pFnConfirmCraft, &ConfirmCraft_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.CancelRecycle
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::CancelRecycle ( )
{
	static UFunction* pFnCancelRecycle = NULL;

	if ( ! pFnCancelRecycle )
		pFnCancelRecycle = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.CancelRecycle" );

	UKFGFxMenu_Inventory_execCancelRecycle_Parms CancelRecycle_Parms;

	this->ProcessEvent ( pFnCancelRecycle, &CancelRecycle_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.ConfirmDuplicatesRecycle
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::ConfirmDuplicatesRecycle ( )
{
	static UFunction* pFnConfirmDuplicatesRecycle = NULL;

	if ( ! pFnConfirmDuplicatesRecycle )
		pFnConfirmDuplicatesRecycle = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.ConfirmDuplicatesRecycle" );

	UKFGFxMenu_Inventory_execConfirmDuplicatesRecycle_Parms ConfirmDuplicatesRecycle_Parms;

	this->ProcessEvent ( pFnConfirmDuplicatesRecycle, &ConfirmDuplicatesRecycle_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.ExchangeDuplicatesEx
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::ExchangeDuplicatesEx ( )
{
	static UFunction* pFnExchangeDuplicatesEx = NULL;

	if ( ! pFnExchangeDuplicatesEx )
		pFnExchangeDuplicatesEx = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.ExchangeDuplicatesEx" );

	UKFGFxMenu_Inventory_execExchangeDuplicatesEx_Parms ExchangeDuplicatesEx_Parms;

	this->ProcessEvent ( pFnExchangeDuplicatesEx, &ExchangeDuplicatesEx_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.ConfirmRecycle
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::ConfirmRecycle ( )
{
	static UFunction* pFnConfirmRecycle = NULL;

	if ( ! pFnConfirmRecycle )
		pFnConfirmRecycle = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.ConfirmRecycle" );

	UKFGFxMenu_Inventory_execConfirmRecycle_Parms ConfirmRecycle_Parms;

	this->ProcessEvent ( pFnConfirmRecycle, &ConfirmRecycle_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.PerformExchange
// [0x00024002] 
// Parameters infos:

void UKFGFxMenu_Inventory::PerformExchange ( )
{
	static UFunction* pFnPerformExchange = NULL;

	if ( ! pFnPerformExchange )
		pFnPerformExchange = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.PerformExchange" );

	UKFGFxMenu_Inventory_execPerformExchange_Parms PerformExchange_Parms;

	this->ProcessEvent ( pFnPerformExchange, &PerformExchange_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.OnPlayfabExchangeComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::OnPlayfabExchangeComplete ( )
{
	static UFunction* pFnOnPlayfabExchangeComplete = NULL;

	if ( ! pFnOnPlayfabExchangeComplete )
		pFnOnPlayfabExchangeComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.OnPlayfabExchangeComplete" );

	UKFGFxMenu_Inventory_execOnPlayfabExchangeComplete_Parms OnPlayfabExchangeComplete_Parms;

	this->ProcessEvent ( pFnOnPlayfabExchangeComplete, &OnPlayfabExchangeComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.GetCountOfItem
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::GetCountOfItem ( )
{
	static UFunction* pFnGetCountOfItem = NULL;

	if ( ! pFnGetCountOfItem )
		pFnGetCountOfItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.GetCountOfItem" );

	UKFGFxMenu_Inventory_execGetCountOfItem_Parms GetCountOfItem_Parms;

	this->ProcessEvent ( pFnGetCountOfItem, &GetCountOfItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.SetCosmeticCraftDetails
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Inventory::SetCosmeticCraftDetails ( )
{
	static UFunction* pFnSetCosmeticCraftDetails = NULL;

	if ( ! pFnSetCosmeticCraftDetails )
		pFnSetCosmeticCraftDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.SetCosmeticCraftDetails" );

	UKFGFxMenu_Inventory_execSetCosmeticCraftDetails_Parms SetCosmeticCraftDetails_Parms;

	this->ProcessEvent ( pFnSetCosmeticCraftDetails, &SetCosmeticCraftDetails_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.SetWeaponCraftDetails
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Inventory::SetWeaponCraftDetails ( )
{
	static UFunction* pFnSetWeaponCraftDetails = NULL;

	if ( ! pFnSetWeaponCraftDetails )
		pFnSetWeaponCraftDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.SetWeaponCraftDetails" );

	UKFGFxMenu_Inventory_execSetWeaponCraftDetails_Parms SetWeaponCraftDetails_Parms;

	this->ProcessEvent ( pFnSetWeaponCraftDetails, &SetWeaponCraftDetails_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.LocalizeText" );

	UKFGFxMenu_Inventory_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.IsSFXActive
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::IsSFXActive ( )
{
	static UFunction* pFnIsSFXActive = NULL;

	if ( ! pFnIsSFXActive )
		pFnIsSFXActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.IsSFXActive" );

	UKFGFxMenu_Inventory_execIsSFXActive_Parms IsSFXActive_Parms;

	this->ProcessEvent ( pFnIsSFXActive, &IsSFXActive_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.IsItemActive
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::IsItemActive ( )
{
	static UFunction* pFnIsItemActive = NULL;

	if ( ! pFnIsItemActive )
		pFnIsItemActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.IsItemActive" );

	UKFGFxMenu_Inventory_execIsItemActive_Parms IsItemActive_Parms;

	this->ProcessEvent ( pFnIsItemActive, &IsItemActive_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.IsKeylessCrate
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::IsKeylessCrate ( )
{
	static UFunction* pFnIsKeylessCrate = NULL;

	if ( ! pFnIsKeylessCrate )
		pFnIsKeylessCrate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.IsKeylessCrate" );

	UKFGFxMenu_Inventory_execIsKeylessCrate_Parms IsKeylessCrate_Parms;

	this->ProcessEvent ( pFnIsKeylessCrate, &IsKeylessCrate_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.IsSpecialEventItem
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::IsSpecialEventItem ( )
{
	static UFunction* pFnIsSpecialEventItem = NULL;

	if ( ! pFnIsSpecialEventItem )
		pFnIsSpecialEventItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.IsSpecialEventItem" );

	UKFGFxMenu_Inventory_execIsSpecialEventItem_Parms IsSpecialEventItem_Parms;

	this->ProcessEvent ( pFnIsSpecialEventItem, &IsSpecialEventItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.IsItemExchangeable
// [0x00420002] 
// Parameters infos:

void UKFGFxMenu_Inventory::IsItemExchangeable ( )
{
	static UFunction* pFnIsItemExchangeable = NULL;

	if ( ! pFnIsItemExchangeable )
		pFnIsItemExchangeable = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.IsItemExchangeable" );

	UKFGFxMenu_Inventory_execIsItemExchangeable_Parms IsItemExchangeable_Parms;

	this->ProcessEvent ( pFnIsItemExchangeable, &IsItemExchangeable_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.IsItemRecyclable
// [0x00420002] 
// Parameters infos:

void UKFGFxMenu_Inventory::IsItemRecyclable ( )
{
	static UFunction* pFnIsItemRecyclable = NULL;

	if ( ! pFnIsItemRecyclable )
		pFnIsItemRecyclable = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.IsItemRecyclable" );

	UKFGFxMenu_Inventory_execIsItemRecyclable_Parms IsItemRecyclable_Parms;

	this->ProcessEvent ( pFnIsItemRecyclable, &IsItemRecyclable_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.OnInventoryReadComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::OnInventoryReadComplete ( )
{
	static UFunction* pFnOnInventoryReadComplete = NULL;

	if ( ! pFnOnInventoryReadComplete )
		pFnOnInventoryReadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.OnInventoryReadComplete" );

	UKFGFxMenu_Inventory_execOnInventoryReadComplete_Parms OnInventoryReadComplete_Parms;

	this->ProcessEvent ( pFnOnInventoryReadComplete, &OnInventoryReadComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.OnReadPlayfabInventoryComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::OnReadPlayfabInventoryComplete ( )
{
	static UFunction* pFnOnReadPlayfabInventoryComplete = NULL;

	if ( ! pFnOnReadPlayfabInventoryComplete )
		pFnOnReadPlayfabInventoryComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.OnReadPlayfabInventoryComplete" );

	UKFGFxMenu_Inventory_execOnReadPlayfabInventoryComplete_Parms OnReadPlayfabInventoryComplete_Parms;

	this->ProcessEvent ( pFnOnReadPlayfabInventoryComplete, &OnReadPlayfabInventoryComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.ClearMatinee
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::ClearMatinee ( )
{
	static UFunction* pFnClearMatinee = NULL;

	if ( ! pFnClearMatinee )
		pFnClearMatinee = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.ClearMatinee" );

	UKFGFxMenu_Inventory_execClearMatinee_Parms ClearMatinee_Parms;

	this->ProcessEvent ( pFnClearMatinee, &ClearMatinee_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.SetMatineeColor
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::SetMatineeColor ( )
{
	static UFunction* pFnSetMatineeColor = NULL;

	if ( ! pFnSetMatineeColor )
		pFnSetMatineeColor = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.SetMatineeColor" );

	UKFGFxMenu_Inventory_execSetMatineeColor_Parms SetMatineeColor_Parms;

	this->ProcessEvent ( pFnSetMatineeColor, &SetMatineeColor_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.FinishCraft
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::FinishCraft ( )
{
	static UFunction* pFnFinishCraft = NULL;

	if ( ! pFnFinishCraft )
		pFnFinishCraft = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.FinishCraft" );

	UKFGFxMenu_Inventory_execFinishCraft_Parms FinishCraft_Parms;

	this->ProcessEvent ( pFnFinishCraft, &FinishCraft_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.OnItemExhangeTimeOut
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::OnItemExhangeTimeOut ( )
{
	static UFunction* pFnOnItemExhangeTimeOut = NULL;

	if ( ! pFnOnItemExhangeTimeOut )
		pFnOnItemExhangeTimeOut = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.OnItemExhangeTimeOut" );

	UKFGFxMenu_Inventory_execOnItemExhangeTimeOut_Parms OnItemExhangeTimeOut_Parms;

	this->ProcessEvent ( pFnOnItemExhangeTimeOut, &OnItemExhangeTimeOut_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.DoesMatchFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::DoesMatchFilter ( )
{
	static UFunction* pFnDoesMatchFilter = NULL;

	if ( ! pFnDoesMatchFilter )
		pFnDoesMatchFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.DoesMatchFilter" );

	UKFGFxMenu_Inventory_execDoesMatchFilter_Parms DoesMatchFilter_Parms;

	this->ProcessEvent ( pFnDoesMatchFilter, &DoesMatchFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.InitInventory
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_Inventory::InitInventory ( )
{
	static UFunction* pFnInitInventory = NULL;

	if ( ! pFnInitInventory )
		pFnInitInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.InitInventory" );

	UKFGFxMenu_Inventory_execInitInventory_Parms InitInventory_Parms;

	this->ProcessEvent ( pFnInitInventory, &InitInventory_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.OnClose
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::OnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.OnClose" );

	UKFGFxMenu_Inventory_execOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.OnOpen" );

	UKFGFxMenu_Inventory_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.UpdateCraftButtons
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::UpdateCraftButtons ( )
{
	static UFunction* pFnUpdateCraftButtons = NULL;

	if ( ! pFnUpdateCraftButtons )
		pFnUpdateCraftButtons = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.UpdateCraftButtons" );

	UKFGFxMenu_Inventory_execUpdateCraftButtons_Parms UpdateCraftButtons_Parms;

	this->ProcessEvent ( pFnUpdateCraftButtons, &UpdateCraftButtons_Parms, NULL );
};

// Function KFGame.KFGFxMenu_Inventory.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_Inventory::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_Inventory.InitializeMenu" );

	UKFGFxMenu_Inventory_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFInventoryCatalog.GetItemSeries
// [0x00022002] 
// Parameters infos:

void UKFInventoryCatalog::GetItemSeries ( )
{
	static UFunction* pFnGetItemSeries = NULL;

	if ( ! pFnGetItemSeries )
		pFnGetItemSeries = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryCatalog.GetItemSeries" );

	UKFInventoryCatalog_execGetItemSeries_Parms GetItemSeries_Parms;

	this->ProcessEvent ( pFnGetItemSeries, &GetItemSeries_Parms, NULL );
};

// Function KFGame.KFInventoryCatalog.GetItemDisplayContainerType
// [0x00022002] 
// Parameters infos:

void UKFInventoryCatalog::GetItemDisplayContainerType ( )
{
	static UFunction* pFnGetItemDisplayContainerType = NULL;

	if ( ! pFnGetItemDisplayContainerType )
		pFnGetItemDisplayContainerType = UObject::FindObject< UFunction > ( "Function KFGame.KFInventoryCatalog.GetItemDisplayContainerType" );

	UKFInventoryCatalog_execGetItemDisplayContainerType_Parms GetItemDisplayContainerType_Parms;

	this->ProcessEvent ( pFnGetItemDisplayContainerType, &GetItemDisplayContainerType_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Prestige.SendPerkData
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Prestige::SendPerkData ( )
{
	static UFunction* pFnSendPerkData = NULL;

	if ( ! pFnSendPerkData )
		pFnSendPerkData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Prestige.SendPerkData" );

	UKFGFxPerksContainer_Prestige_execSendPerkData_Parms SendPerkData_Parms;

	this->ProcessEvent ( pFnSendPerkData, &SendPerkData_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Prestige.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Prestige::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Prestige.LocalizeText" );

	UKFGFxPerksContainer_Prestige_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Prestige.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Prestige::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Prestige.Initialize" );

	UKFGFxPerksContainer_Prestige_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Header.UpdatePerkHeader
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Header::UpdatePerkHeader ( )
{
	static UFunction* pFnUpdatePerkHeader = NULL;

	if ( ! pFnUpdatePerkHeader )
		pFnUpdatePerkHeader = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Header.UpdatePerkHeader" );

	UKFGFxPerksContainer_Header_execUpdatePerkHeader_Parms UpdatePerkHeader_Parms;

	this->ProcessEvent ( pFnUpdatePerkHeader, &UpdatePerkHeader_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Header.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Header::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Header.Initialize" );

	UKFGFxPerksContainer_Header_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Selection.SavePerk
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Selection::SavePerk ( )
{
	static UFunction* pFnSavePerk = NULL;

	if ( ! pFnSavePerk )
		pFnSavePerk = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Selection.SavePerk" );

	UKFGFxPerksContainer_Selection_execSavePerk_Parms SavePerk_Parms;

	this->ProcessEvent ( pFnSavePerk, &SavePerk_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Selection.SetPendingPerkChanges
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Selection::SetPendingPerkChanges ( )
{
	static UFunction* pFnSetPendingPerkChanges = NULL;

	if ( ! pFnSetPendingPerkChanges )
		pFnSetPendingPerkChanges = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Selection.SetPendingPerkChanges" );

	UKFGFxPerksContainer_Selection_execSetPendingPerkChanges_Parms SetPendingPerkChanges_Parms;

	this->ProcessEvent ( pFnSetPendingPerkChanges, &SetPendingPerkChanges_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Selection.UpdatePendingPerkInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Selection::UpdatePendingPerkInfo ( )
{
	static UFunction* pFnUpdatePendingPerkInfo = NULL;

	if ( ! pFnUpdatePendingPerkInfo )
		pFnUpdatePendingPerkInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Selection.UpdatePendingPerkInfo" );

	UKFGFxPerksContainer_Selection_execUpdatePendingPerkInfo_Parms UpdatePendingPerkInfo_Parms;

	this->ProcessEvent ( pFnUpdatePendingPerkInfo, &UpdatePendingPerkInfo_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Selection.SetPerkListEnabled
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Selection::SetPerkListEnabled ( )
{
	static UFunction* pFnSetPerkListEnabled = NULL;

	if ( ! pFnSetPerkListEnabled )
		pFnSetPerkListEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Selection.SetPerkListEnabled" );

	UKFGFxPerksContainer_Selection_execSetPerkListEnabled_Parms SetPerkListEnabled_Parms;

	this->ProcessEvent ( pFnSetPerkListEnabled, &SetPerkListEnabled_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Selection.UpdatePerkSelection
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Selection::UpdatePerkSelection ( )
{
	static UFunction* pFnUpdatePerkSelection = NULL;

	if ( ! pFnUpdatePerkSelection )
		pFnUpdatePerkSelection = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Selection.UpdatePerkSelection" );

	UKFGFxPerksContainer_Selection_execUpdatePerkSelection_Parms UpdatePerkSelection_Parms;

	this->ProcessEvent ( pFnUpdatePerkSelection, &UpdatePerkSelection_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Selection.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Selection::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Selection.LocalizeText" );

	UKFGFxPerksContainer_Selection_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Selection.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Selection::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Selection.Initialize" );

	UKFGFxPerksContainer_Selection_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Details.UpdatePassives
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Details::UpdatePassives ( )
{
	static UFunction* pFnUpdatePassives = NULL;

	if ( ! pFnUpdatePassives )
		pFnUpdatePassives = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Details.UpdatePassives" );

	UKFGFxPerksContainer_Details_execUpdatePassives_Parms UpdatePassives_Parms;

	this->ProcessEvent ( pFnUpdatePassives, &UpdatePassives_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Details.AddWeaponInfo
// [0x00420002] 
// Parameters infos:

void UKFGFxPerksContainer_Details::AddWeaponInfo ( )
{
	static UFunction* pFnAddWeaponInfo = NULL;

	if ( ! pFnAddWeaponInfo )
		pFnAddWeaponInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Details.AddWeaponInfo" );

	UKFGFxPerksContainer_Details_execAddWeaponInfo_Parms AddWeaponInfo_Parms;

	this->ProcessEvent ( pFnAddWeaponInfo, &AddWeaponInfo_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Details.UpdateDetails
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Details::UpdateDetails ( )
{
	static UFunction* pFnUpdateDetails = NULL;

	if ( ! pFnUpdateDetails )
		pFnUpdateDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Details.UpdateDetails" );

	UKFGFxPerksContainer_Details_execUpdateDetails_Parms UpdateDetails_Parms;

	this->ProcessEvent ( pFnUpdateDetails, &UpdateDetails_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Details.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Details::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Details.LocalizeContainer" );

	UKFGFxPerksContainer_Details_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Details.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Details::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Details.Initialize" );

	UKFGFxPerksContainer_Details_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Skills.GetSkillObject
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Skills::GetSkillObject ( )
{
	static UFunction* pFnGetSkillObject = NULL;

	if ( ! pFnGetSkillObject )
		pFnGetSkillObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Skills.GetSkillObject" );

	UKFGFxPerksContainer_Skills_execGetSkillObject_Parms GetSkillObject_Parms;

	this->ProcessEvent ( pFnGetSkillObject, &GetSkillObject_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Skills.UpdateTierUnlockState
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Skills::UpdateTierUnlockState ( )
{
	static UFunction* pFnUpdateTierUnlockState = NULL;

	if ( ! pFnUpdateTierUnlockState )
		pFnUpdateTierUnlockState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Skills.UpdateTierUnlockState" );

	UKFGFxPerksContainer_Skills_execUpdateTierUnlockState_Parms UpdateTierUnlockState_Parms;

	this->ProcessEvent ( pFnUpdateTierUnlockState, &UpdateTierUnlockState_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Skills.UpdateSkills
// [0x00420002] 
// Parameters infos:

void UKFGFxPerksContainer_Skills::UpdateSkills ( )
{
	static UFunction* pFnUpdateSkills = NULL;

	if ( ! pFnUpdateSkills )
		pFnUpdateSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Skills.UpdateSkills" );

	UKFGFxPerksContainer_Skills_execUpdateSkills_Parms UpdateSkills_Parms;

	this->ProcessEvent ( pFnUpdateSkills, &UpdateSkills_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Skills.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Skills::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Skills.LocalizeContainer" );

	UKFGFxPerksContainer_Skills_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_Skills.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_Skills::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_Skills.Initialize" );

	UKFGFxPerksContainer_Skills_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_SkillsSummary.UpdateSkills
// [0x00420002] 
// Parameters infos:

void UKFGFxPerksContainer_SkillsSummary::UpdateSkills ( )
{
	static UFunction* pFnUpdateSkills = NULL;

	if ( ! pFnUpdateSkills )
		pFnUpdateSkills = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_SkillsSummary.UpdateSkills" );

	UKFGFxPerksContainer_SkillsSummary_execUpdateSkills_Parms UpdateSkills_Parms;

	this->ProcessEvent ( pFnUpdateSkills, &UpdateSkills_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_SkillsSummary.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_SkillsSummary::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_SkillsSummary.LocalizeContainer" );

	UKFGFxPerksContainer_SkillsSummary_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_SkillsSummary.DelayedRefresh
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_SkillsSummary::DelayedRefresh ( )
{
	static UFunction* pFnDelayedRefresh = NULL;

	if ( ! pFnDelayedRefresh )
		pFnDelayedRefresh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_SkillsSummary.DelayedRefresh" );

	UKFGFxPerksContainer_SkillsSummary_execDelayedRefresh_Parms DelayedRefresh_Parms;

	this->ProcessEvent ( pFnDelayedRefresh, &DelayedRefresh_Parms, NULL );
};

// Function KFGame.KFGFxPerksContainer_SkillsSummary.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPerksContainer_SkillsSummary::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPerksContainer_SkillsSummary.Initialize" );

	UKFGFxPerksContainer_SkillsSummary_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.Callback_TopMapClicked
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::Callback_TopMapClicked ( )
{
	static UFunction* pFnCallback_TopMapClicked = NULL;

	if ( ! pFnCallback_TopMapClicked )
		pFnCallback_TopMapClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.Callback_TopMapClicked" );

	UKFGFxMenu_PostGameReport_execCallback_TopMapClicked_Parms Callback_TopMapClicked_Parms;

	this->ProcessEvent ( pFnCallback_TopMapClicked, &Callback_TopMapClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.Callback_MapVote
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::Callback_MapVote ( )
{
	static UFunction* pFnCallback_MapVote = NULL;

	if ( ! pFnCallback_MapVote )
		pFnCallback_MapVote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.Callback_MapVote" );

	UKFGFxMenu_PostGameReport_execCallback_MapVote_Parms Callback_MapVote_Parms;

	this->ProcessEvent ( pFnCallback_MapVote, &Callback_MapVote_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.Callback_BroadcastChatMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::Callback_BroadcastChatMessage ( )
{
	static UFunction* pFnCallback_BroadcastChatMessage = NULL;

	if ( ! pFnCallback_BroadcastChatMessage )
		pFnCallback_BroadcastChatMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.Callback_BroadcastChatMessage" );

	UKFGFxMenu_PostGameReport_execCallback_BroadcastChatMessage_Parms Callback_BroadcastChatMessage_Parms;

	this->ProcessEvent ( pFnCallback_BroadcastChatMessage, &Callback_BroadcastChatMessage_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.StartCountdown
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::StartCountdown ( )
{
	static UFunction* pFnStartCountdown = NULL;

	if ( ! pFnStartCountdown )
		pFnStartCountdown = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.StartCountdown" );

	UKFGFxMenu_PostGameReport_execStartCountdown_Parms StartCountdown_Parms;

	this->ProcessEvent ( pFnStartCountdown, &StartCountdown_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.RecieveTopMaps
// [0x00420002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::RecieveTopMaps ( )
{
	static UFunction* pFnRecieveTopMaps = NULL;

	if ( ! pFnRecieveTopMaps )
		pFnRecieveTopMaps = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.RecieveTopMaps" );

	UKFGFxMenu_PostGameReport_execRecieveTopMaps_Parms RecieveTopMaps_Parms;

	this->ProcessEvent ( pFnRecieveTopMaps, &RecieveTopMaps_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.ReceiveMessage
// [0x00024002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::ReceiveMessage ( )
{
	static UFunction* pFnReceiveMessage = NULL;

	if ( ! pFnReceiveMessage )
		pFnReceiveMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.ReceiveMessage" );

	UKFGFxMenu_PostGameReport_execReceiveMessage_Parms ReceiveMessage_Parms;

	this->ProcessEvent ( pFnReceiveMessage, &ReceiveMessage_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_PostGameReport::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.WidgetInitialized" );

	UKFGFxMenu_PostGameReport_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.OnClose
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::OnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.OnClose" );

	UKFGFxMenu_PostGameReport_execOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.OnOpen" );

	UKFGFxMenu_PostGameReport_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.FormatTime
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::FormatTime ( )
{
	static UFunction* pFnFormatTime = NULL;

	if ( ! pFnFormatTime )
		pFnFormatTime = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.FormatTime" );

	UKFGFxMenu_PostGameReport_execFormatTime_Parms FormatTime_Parms;

	this->ProcessEvent ( pFnFormatTime, &FormatTime_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.UpdateNextMapTime
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::UpdateNextMapTime ( )
{
	static UFunction* pFnUpdateNextMapTime = NULL;

	if ( ! pFnUpdateNextMapTime )
		pFnUpdateNextMapTime = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.UpdateNextMapTime" );

	UKFGFxMenu_PostGameReport_execUpdateNextMapTime_Parms UpdateNextMapTime_Parms;

	this->ProcessEvent ( pFnUpdateNextMapTime, &UpdateNextMapTime_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.VOIPEventTriggered
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::VOIPEventTriggered ( )
{
	static UFunction* pFnVOIPEventTriggered = NULL;

	if ( ! pFnVOIPEventTriggered )
		pFnVOIPEventTriggered = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.VOIPEventTriggered" );

	UKFGFxMenu_PostGameReport_execVOIPEventTriggered_Parms VOIPEventTriggered_Parms;

	this->ProcessEvent ( pFnVOIPEventTriggered, &VOIPEventTriggered_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.SendVoipData
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::SendVoipData ( )
{
	static UFunction* pFnSendVoipData = NULL;

	if ( ! pFnSendVoipData )
		pFnSendVoipData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.SendVoipData" );

	UKFGFxMenu_PostGameReport_execSendVoipData_Parms SendVoipData_Parms;

	this->ProcessEvent ( pFnSendVoipData, &SendVoipData_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.InitPlayerList
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::InitPlayerList ( )
{
	static UFunction* pFnInitPlayerList = NULL;

	if ( ! pFnInitPlayerList )
		pFnInitPlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.InitPlayerList" );

	UKFGFxMenu_PostGameReport_execInitPlayerList_Parms InitPlayerList_Parms;

	this->ProcessEvent ( pFnInitPlayerList, &InitPlayerList_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.SetPlayerInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::SetPlayerInfo ( )
{
	static UFunction* pFnSetPlayerInfo = NULL;

	if ( ! pFnSetPlayerInfo )
		pFnSetPlayerInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.SetPlayerInfo" );

	UKFGFxMenu_PostGameReport_execSetPlayerInfo_Parms SetPlayerInfo_Parms;

	this->ProcessEvent ( pFnSetPlayerInfo, &SetPlayerInfo_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.SetSumarryInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::SetSumarryInfo ( )
{
	static UFunction* pFnSetSumarryInfo = NULL;

	if ( ! pFnSetSumarryInfo )
		pFnSetSumarryInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.SetSumarryInfo" );

	UKFGFxMenu_PostGameReport_execSetSumarryInfo_Parms SetSumarryInfo_Parms;

	this->ProcessEvent ( pFnSetSumarryInfo, &SetSumarryInfo_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.OnItemRecieved
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::OnItemRecieved ( )
{
	static UFunction* pFnOnItemRecieved = NULL;

	if ( ! pFnOnItemRecieved )
		pFnOnItemRecieved = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.OnItemRecieved" );

	UKFGFxMenu_PostGameReport_execOnItemRecieved_Parms OnItemRecieved_Parms;

	this->ProcessEvent ( pFnOnItemRecieved, &OnItemRecieved_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.SearchInventoryForNewItem
// [0x00820002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::SearchInventoryForNewItem ( )
{
	static UFunction* pFnSearchInventoryForNewItem = NULL;

	if ( ! pFnSearchInventoryForNewItem )
		pFnSearchInventoryForNewItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.SearchInventoryForNewItem" );

	UKFGFxMenu_PostGameReport_execSearchInventoryForNewItem_Parms SearchInventoryForNewItem_Parms;

	this->ProcessEvent ( pFnSearchInventoryForNewItem, &SearchInventoryForNewItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.OnProcessEndGameRewardsComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::OnProcessEndGameRewardsComplete ( )
{
	static UFunction* pFnOnProcessEndGameRewardsComplete = NULL;

	if ( ! pFnOnProcessEndGameRewardsComplete )
		pFnOnProcessEndGameRewardsComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.OnProcessEndGameRewardsComplete" );

	UKFGFxMenu_PostGameReport_execOnProcessEndGameRewardsComplete_Parms OnProcessEndGameRewardsComplete_Parms;

	this->ProcessEvent ( pFnOnProcessEndGameRewardsComplete, &OnProcessEndGameRewardsComplete_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.SearchPlayfabInventoryForNewItem
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::SearchPlayfabInventoryForNewItem ( )
{
	static UFunction* pFnSearchPlayfabInventoryForNewItem = NULL;

	if ( ! pFnSearchPlayfabInventoryForNewItem )
		pFnSearchPlayfabInventoryForNewItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.SearchPlayfabInventoryForNewItem" );

	UKFGFxMenu_PostGameReport_execSearchPlayfabInventoryForNewItem_Parms SearchPlayfabInventoryForNewItem_Parms;

	this->ProcessEvent ( pFnSearchPlayfabInventoryForNewItem, &SearchPlayfabInventoryForNewItem_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.LocalizeText" );

	UKFGFxMenu_PostGameReport_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.OneSecondLoop" );

	UKFGFxMenu_PostGameReport_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxMenu_PostGameReport.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_PostGameReport::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_PostGameReport.InitializeMenu" );

	UKFGFxMenu_PostGameReport_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerStats.MakeAwardObject
// [0x00020000] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerStats::MakeAwardObject ( )
{
	static UFunction* pFnMakeAwardObject = NULL;

	if ( ! pFnMakeAwardObject )
		pFnMakeAwardObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerStats.MakeAwardObject" );

	UKFGFxPostGameContainer_PlayerStats_execMakeAwardObject_Parms MakeAwardObject_Parms;

	this->ProcessEvent ( pFnMakeAwardObject, &MakeAwardObject_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerStats.MakeWeaponObject
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerStats::MakeWeaponObject ( )
{
	static UFunction* pFnMakeWeaponObject = NULL;

	if ( ! pFnMakeWeaponObject )
		pFnMakeWeaponObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerStats.MakeWeaponObject" );

	UKFGFxPostGameContainer_PlayerStats_execMakeWeaponObject_Parms MakeWeaponObject_Parms;

	this->ProcessEvent ( pFnMakeWeaponObject, &MakeWeaponObject_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerStats.MakeZedKillObject
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerStats::MakeZedKillObject ( )
{
	static UFunction* pFnMakeZedKillObject = NULL;

	if ( ! pFnMakeZedKillObject )
		pFnMakeZedKillObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerStats.MakeZedKillObject" );

	UKFGFxPostGameContainer_PlayerStats_execMakeZedKillObject_Parms MakeZedKillObject_Parms;

	this->ProcessEvent ( pFnMakeZedKillObject, &MakeZedKillObject_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerStats.MakeTextObject
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerStats::MakeTextObject ( )
{
	static UFunction* pFnMakeTextObject = NULL;

	if ( ! pFnMakeTextObject )
		pFnMakeTextObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerStats.MakeTextObject" );

	UKFGFxPostGameContainer_PlayerStats_execMakeTextObject_Parms MakeTextObject_Parms;

	this->ProcessEvent ( pFnMakeTextObject, &MakeTextObject_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerStats.SetPlayerStats
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerStats::SetPlayerStats ( )
{
	static UFunction* pFnSetPlayerStats = NULL;

	if ( ! pFnSetPlayerStats )
		pFnSetPlayerStats = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerStats.SetPlayerStats" );

	UKFGFxPostGameContainer_PlayerStats_execSetPlayerStats_Parms SetPlayerStats_Parms;

	this->ProcessEvent ( pFnSetPlayerStats, &SetPlayerStats_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerStats.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerStats::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerStats.LocalizeText" );

	UKFGFxPostGameContainer_PlayerStats_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerStats.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerStats::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerStats.Initialize" );

	UKFGFxPostGameContainer_PlayerStats_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_MapVote.GetMapSource
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_MapVote::GetMapSource ( )
{
	static UFunction* pFnGetMapSource = NULL;

	if ( ! pFnGetMapSource )
		pFnGetMapSource = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_MapVote.GetMapSource" );

	UKFGFxPostGameContainer_MapVote_execGetMapSource_Parms GetMapSource_Parms;

	this->ProcessEvent ( pFnGetMapSource, &GetMapSource_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_MapVote.IndexToTopMapObject
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_MapVote::IndexToTopMapObject ( )
{
	static UFunction* pFnIndexToTopMapObject = NULL;

	if ( ! pFnIndexToTopMapObject )
		pFnIndexToTopMapObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_MapVote.IndexToTopMapObject" );

	UKFGFxPostGameContainer_MapVote_execIndexToTopMapObject_Parms IndexToTopMapObject_Parms;

	this->ProcessEvent ( pFnIndexToTopMapObject, &IndexToTopMapObject_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_MapVote.RecieveTopMaps
// [0x00420002] 
// Parameters infos:

void UKFGFxPostGameContainer_MapVote::RecieveTopMaps ( )
{
	static UFunction* pFnRecieveTopMaps = NULL;

	if ( ! pFnRecieveTopMaps )
		pFnRecieveTopMaps = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_MapVote.RecieveTopMaps" );

	UKFGFxPostGameContainer_MapVote_execRecieveTopMaps_Parms RecieveTopMaps_Parms;

	this->ProcessEvent ( pFnRecieveTopMaps, &RecieveTopMaps_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_MapVote.SetMapOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_MapVote::SetMapOptions ( )
{
	static UFunction* pFnSetMapOptions = NULL;

	if ( ! pFnSetMapOptions )
		pFnSetMapOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_MapVote.SetMapOptions" );

	UKFGFxPostGameContainer_MapVote_execSetMapOptions_Parms SetMapOptions_Parms;

	this->ProcessEvent ( pFnSetMapOptions, &SetMapOptions_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_MapVote.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_MapVote::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_MapVote.LocalizeText" );

	UKFGFxPostGameContainer_MapVote_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_MapVote.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_MapVote::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_MapVote.Initialize" );

	UKFGFxPostGameContainer_MapVote_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_TeamAwards.SendTeamAwards
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_TeamAwards::SendTeamAwards ( )
{
	static UFunction* pFnSendTeamAwards = NULL;

	if ( ! pFnSendTeamAwards )
		pFnSendTeamAwards = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_TeamAwards.SendTeamAwards" );

	UKFGFxPostGameContainer_TeamAwards_execSendTeamAwards_Parms SendTeamAwards_Parms;

	this->ProcessEvent ( pFnSendTeamAwards, &SendTeamAwards_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_TeamAwards.SendPersonalBests
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_TeamAwards::SendPersonalBests ( )
{
	static UFunction* pFnSendPersonalBests = NULL;

	if ( ! pFnSendPersonalBests )
		pFnSendPersonalBests = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_TeamAwards.SendPersonalBests" );

	UKFGFxPostGameContainer_TeamAwards_execSendPersonalBests_Parms SendPersonalBests_Parms;

	this->ProcessEvent ( pFnSendPersonalBests, &SendPersonalBests_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_TeamAwards.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_TeamAwards::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_TeamAwards.LocalizeText" );

	UKFGFxPostGameContainer_TeamAwards_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_TeamAwards.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_TeamAwards::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_TeamAwards.Initialize" );

	UKFGFxPostGameContainer_TeamAwards_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerXP.MakePerkXPObject
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerXP::MakePerkXPObject ( )
{
	static UFunction* pFnMakePerkXPObject = NULL;

	if ( ! pFnMakePerkXPObject )
		pFnMakePerkXPObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerXP.MakePerkXPObject" );

	UKFGFxPostGameContainer_PlayerXP_execMakePerkXPObject_Parms MakePerkXPObject_Parms;

	this->ProcessEvent ( pFnMakePerkXPObject, &MakePerkXPObject_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerXP.SetXPList
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerXP::SetXPList ( )
{
	static UFunction* pFnSetXPList = NULL;

	if ( ! pFnSetXPList )
		pFnSetXPList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerXP.SetXPList" );

	UKFGFxPostGameContainer_PlayerXP_execSetXPList_Parms SetXPList_Parms;

	this->ProcessEvent ( pFnSetXPList, &SetXPList_Parms, NULL );
};

// Function KFGame.KFGFxPostGameContainer_PlayerXP.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxPostGameContainer_PlayerXP::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPostGameContainer_PlayerXP.Initialize" );

	UKFGFxPostGameContainer_PlayerXP_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.OneSecondLoop" );

	UKFGFxMenu_ServerBrowser_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_ResetFilters
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_ResetFilters ( )
{
	static UFunction* pFnCallback_ResetFilters = NULL;

	if ( ! pFnCallback_ResetFilters )
		pFnCallback_ResetFilters = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_ResetFilters" );

	UKFGFxMenu_ServerBrowser_execCallback_ResetFilters_Parms Callback_ResetFilters_Parms;

	this->ProcessEvent ( pFnCallback_ResetFilters, &Callback_ResetFilters_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_ServerSelected ( )
{
	static UFunction* pFnCallBack_ServerSelected = NULL;

	if ( ! pFnCallBack_ServerSelected )
		pFnCallBack_ServerSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerSelected" );

	UKFGFxMenu_ServerBrowser_execCallBack_ServerSelected_Parms CallBack_ServerSelected_Parms;

	this->ProcessEvent ( pFnCallBack_ServerSelected, &CallBack_ServerSelected_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerDetailsClicked
// [0x00020000] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_ServerDetailsClicked ( )
{
	static UFunction* pFnCallBack_ServerDetailsClicked = NULL;

	if ( ! pFnCallBack_ServerDetailsClicked )
		pFnCallBack_ServerDetailsClicked = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerDetailsClicked" );

	UKFGFxMenu_ServerBrowser_execCallBack_ServerDetailsClicked_Parms CallBack_ServerDetailsClicked_Parms;

	this->ProcessEvent ( pFnCallBack_ServerDetailsClicked, &CallBack_ServerDetailsClicked_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerSpectateGame
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_ServerSpectateGame ( )
{
	static UFunction* pFnCallBack_ServerSpectateGame = NULL;

	if ( ! pFnCallBack_ServerSpectateGame )
		pFnCallBack_ServerSpectateGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerSpectateGame" );

	UKFGFxMenu_ServerBrowser_execCallBack_ServerSpectateGame_Parms CallBack_ServerSpectateGame_Parms;

	this->ProcessEvent ( pFnCallBack_ServerSpectateGame, &CallBack_ServerSpectateGame_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_ServerBrowser::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.OnClose" );

	UKFGFxMenu_ServerBrowser_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.OnOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::OnOpen ( )
{
	static UFunction* pFnOnOpen = NULL;

	if ( ! pFnOnOpen )
		pFnOnOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.OnOpen" );

	UKFGFxMenu_ServerBrowser_execOnOpen_Parms OnOpen_Parms;

	this->ProcessEvent ( pFnOnOpen, &OnOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.OnCancelPassword
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::OnCancelPassword ( )
{
	static UFunction* pFnOnCancelPassword = NULL;

	if ( ! pFnOnCancelPassword )
		pFnOnCancelPassword = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.OnCancelPassword" );

	UKFGFxMenu_ServerBrowser_execOnCancelPassword_Parms OnCancelPassword_Parms;

	this->ProcessEvent ( pFnOnCancelPassword, &OnCancelPassword_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.OnAttemptPassword
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::OnAttemptPassword ( )
{
	static UFunction* pFnOnAttemptPassword = NULL;

	if ( ! pFnOnAttemptPassword )
		pFnOnAttemptPassword = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.OnAttemptPassword" );

	UKFGFxMenu_ServerBrowser_execOnAttemptPassword_Parms OnAttemptPassword_Parms;

	this->ProcessEvent ( pFnOnAttemptPassword, &OnAttemptPassword_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.ShowPasswordPopUp
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::ShowPasswordPopUp ( )
{
	static UFunction* pFnShowPasswordPopUp = NULL;

	if ( ! pFnShowPasswordPopUp )
		pFnShowPasswordPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.ShowPasswordPopUp" );

	UKFGFxMenu_ServerBrowser_execShowPasswordPopUp_Parms ShowPasswordPopUp_Parms;

	this->ProcessEvent ( pFnShowPasswordPopUp, &ShowPasswordPopUp_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerJoinGame
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_ServerJoinGame ( )
{
	static UFunction* pFnCallBack_ServerJoinGame = NULL;

	if ( ! pFnCallBack_ServerJoinGame )
		pFnCallBack_ServerJoinGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerJoinGame" );

	UKFGFxMenu_ServerBrowser_execCallBack_ServerJoinGame_Parms CallBack_ServerJoinGame_Parms;

	this->ProcessEvent ( pFnCallBack_ServerJoinGame, &CallBack_ServerJoinGame_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerJoinGameWithPassword
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_ServerJoinGameWithPassword ( )
{
	static UFunction* pFnCallBack_ServerJoinGameWithPassword = NULL;

	if ( ! pFnCallBack_ServerJoinGameWithPassword )
		pFnCallBack_ServerJoinGameWithPassword = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerJoinGameWithPassword" );

	UKFGFxMenu_ServerBrowser_execCallBack_ServerJoinGameWithPassword_Parms CallBack_ServerJoinGameWithPassword_Parms;

	this->ProcessEvent ( pFnCallBack_ServerJoinGameWithPassword, &CallBack_ServerJoinGameWithPassword_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerRefesh
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_ServerRefesh ( )
{
	static UFunction* pFnCallBack_ServerRefesh = NULL;

	if ( ! pFnCallBack_ServerRefesh )
		pFnCallBack_ServerRefesh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerRefesh" );

	UKFGFxMenu_ServerBrowser_execCallBack_ServerRefesh_Parms CallBack_ServerRefesh_Parms;

	this->ProcessEvent ( pFnCallBack_ServerRefesh, &CallBack_ServerRefesh_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerFavorited
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_ServerFavorited ( )
{
	static UFunction* pFnCallBack_ServerFavorited = NULL;

	if ( ! pFnCallBack_ServerFavorited )
		pFnCallBack_ServerFavorited = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_ServerFavorited" );

	UKFGFxMenu_ServerBrowser_execCallBack_ServerFavorited_Parms CallBack_ServerFavorited_Parms;

	this->ProcessEvent ( pFnCallBack_ServerFavorited, &CallBack_ServerFavorited_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_SearchTabChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_SearchTabChanged ( )
{
	static UFunction* pFnCallBack_SearchTabChanged = NULL;

	if ( ! pFnCallBack_SearchTabChanged )
		pFnCallBack_SearchTabChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_SearchTabChanged" );

	UKFGFxMenu_ServerBrowser_execCallBack_SearchTabChanged_Parms CallBack_SearchTabChanged_Parms;

	this->ProcessEvent ( pFnCallBack_SearchTabChanged, &CallBack_SearchTabChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_PingFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_PingFilter ( )
{
	static UFunction* pFnCallback_PingFilter = NULL;

	if ( ! pFnCallback_PingFilter )
		pFnCallback_PingFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_PingFilter" );

	UKFGFxMenu_ServerBrowser_execCallback_PingFilter_Parms Callback_PingFilter_Parms;

	this->ProcessEvent ( pFnCallback_PingFilter, &Callback_PingFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_MapFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_MapFilter ( )
{
	static UFunction* pFnCallback_MapFilter = NULL;

	if ( ! pFnCallback_MapFilter )
		pFnCallback_MapFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_MapFilter" );

	UKFGFxMenu_ServerBrowser_execCallback_MapFilter_Parms Callback_MapFilter_Parms;

	this->ProcessEvent ( pFnCallback_MapFilter, &Callback_MapFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_DifficultyFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_DifficultyFilter ( )
{
	static UFunction* pFnCallback_DifficultyFilter = NULL;

	if ( ! pFnCallback_DifficultyFilter )
		pFnCallback_DifficultyFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_DifficultyFilter" );

	UKFGFxMenu_ServerBrowser_execCallback_DifficultyFilter_Parms Callback_DifficultyFilter_Parms;

	this->ProcessEvent ( pFnCallback_DifficultyFilter, &Callback_DifficultyFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_LengthFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_LengthFilter ( )
{
	static UFunction* pFnCallback_LengthFilter = NULL;

	if ( ! pFnCallback_LengthFilter )
		pFnCallback_LengthFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_LengthFilter" );

	UKFGFxMenu_ServerBrowser_execCallback_LengthFilter_Parms Callback_LengthFilter_Parms;

	this->ProcessEvent ( pFnCallback_LengthFilter, &Callback_LengthFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_ModeFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_ModeFilter ( )
{
	static UFunction* pFnCallback_ModeFilter = NULL;

	if ( ! pFnCallback_ModeFilter )
		pFnCallback_ModeFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_ModeFilter" );

	UKFGFxMenu_ServerBrowser_execCallback_ModeFilter_Parms Callback_ModeFilter_Parms;

	this->ProcessEvent ( pFnCallback_ModeFilter, &Callback_ModeFilter_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_SortList
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_SortList ( )
{
	static UFunction* pFnCallback_SortList = NULL;

	if ( ! pFnCallback_SortList )
		pFnCallback_SortList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_SortList" );

	UKFGFxMenu_ServerBrowser_execCallback_SortList_Parms Callback_SortList_Parms;

	this->ProcessEvent ( pFnCallback_SortList, &Callback_SortList_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_FilterChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_FilterChanged ( )
{
	static UFunction* pFnCallback_FilterChanged = NULL;

	if ( ! pFnCallback_FilterChanged )
		pFnCallback_FilterChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_FilterChanged" );

	UKFGFxMenu_ServerBrowser_execCallback_FilterChanged_Parms Callback_FilterChanged_Parms;

	this->ProcessEvent ( pFnCallback_FilterChanged, &Callback_FilterChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CallBack_FiltersApplied
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CallBack_FiltersApplied ( )
{
	static UFunction* pFnCallBack_FiltersApplied = NULL;

	if ( ! pFnCallBack_FiltersApplied )
		pFnCallBack_FiltersApplied = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CallBack_FiltersApplied" );

	UKFGFxMenu_ServerBrowser_execCallBack_FiltersApplied_Parms CallBack_FiltersApplied_Parms;

	this->ProcessEvent ( pFnCallBack_FiltersApplied, &CallBack_FiltersApplied_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_RefreshServer
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_RefreshServer ( )
{
	static UFunction* pFnCallback_RefreshServer = NULL;

	if ( ! pFnCallback_RefreshServer )
		pFnCallback_RefreshServer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_RefreshServer" );

	UKFGFxMenu_ServerBrowser_execCallback_RefreshServer_Parms Callback_RefreshServer_Parms;

	this->ProcessEvent ( pFnCallback_RefreshServer, &Callback_RefreshServer_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.Callback_CloseServerBrowser
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::Callback_CloseServerBrowser ( )
{
	static UFunction* pFnCallback_CloseServerBrowser = NULL;

	if ( ! pFnCallback_CloseServerBrowser )
		pFnCallback_CloseServerBrowser = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.Callback_CloseServerBrowser" );

	UKFGFxMenu_ServerBrowser_execCallback_CloseServerBrowser_Parms Callback_CloseServerBrowser_Parms;

	this->ProcessEvent ( pFnCallback_CloseServerBrowser, &Callback_CloseServerBrowser_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CloseMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CloseMenu ( )
{
	static UFunction* pFnCloseMenu = NULL;

	if ( ! pFnCloseMenu )
		pFnCloseMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CloseMenu" );

	UKFGFxMenu_ServerBrowser_execCloseMenu_Parms CloseMenu_Parms;

	this->ProcessEvent ( pFnCloseMenu, &CloseMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.SetAllowSpectate
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::SetAllowSpectate ( )
{
	static UFunction* pFnSetAllowSpectate = NULL;

	if ( ! pFnSetAllowSpectate )
		pFnSetAllowSpectate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.SetAllowSpectate" );

	UKFGFxMenu_ServerBrowser_execSetAllowSpectate_Parms SetAllowSpectate_Parms;

	this->ProcessEvent ( pFnSetAllowSpectate, &SetAllowSpectate_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.OnLobbyStatusChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::OnLobbyStatusChanged ( )
{
	static UFunction* pFnOnLobbyStatusChanged = NULL;

	if ( ! pFnOnLobbyStatusChanged )
		pFnOnLobbyStatusChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.OnLobbyStatusChanged" );

	UKFGFxMenu_ServerBrowser_execOnLobbyStatusChanged_Parms OnLobbyStatusChanged_Parms;

	this->ProcessEvent ( pFnOnLobbyStatusChanged, &OnLobbyStatusChanged_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.HandleCloseRequest
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::HandleCloseRequest ( )
{
	static UFunction* pFnHandleCloseRequest = NULL;

	if ( ! pFnHandleCloseRequest )
		pFnHandleCloseRequest = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.HandleCloseRequest" );

	UKFGFxMenu_ServerBrowser_execHandleCloseRequest_Parms HandleCloseRequest_Parms;

	this->ProcessEvent ( pFnHandleCloseRequest, &HandleCloseRequest_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.ApproveServerBroswerLeave
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::ApproveServerBroswerLeave ( )
{
	static UFunction* pFnApproveServerBroswerLeave = NULL;

	if ( ! pFnApproveServerBroswerLeave )
		pFnApproveServerBroswerLeave = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.ApproveServerBroswerLeave" );

	UKFGFxMenu_ServerBrowser_execApproveServerBroswerLeave_Parms ApproveServerBroswerLeave_Parms;

	this->ProcessEvent ( pFnApproveServerBroswerLeave, &ApproveServerBroswerLeave_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.GoToMultiplayerMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::GoToMultiplayerMenu ( )
{
	static UFunction* pFnGoToMultiplayerMenu = NULL;

	if ( ! pFnGoToMultiplayerMenu )
		pFnGoToMultiplayerMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.GoToMultiplayerMenu" );

	UKFGFxMenu_ServerBrowser_execGoToMultiplayerMenu_Parms GoToMultiplayerMenu_Parms;

	this->ProcessEvent ( pFnGoToMultiplayerMenu, &GoToMultiplayerMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CancelGameSearch
// [0x00020000] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CancelGameSearch ( )
{
	static UFunction* pFnCancelGameSearch = NULL;

	if ( ! pFnCancelGameSearch )
		pFnCancelGameSearch = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CancelGameSearch" );

	UKFGFxMenu_ServerBrowser_execCancelGameSearch_Parms CancelGameSearch_Parms;

	this->ProcessEvent ( pFnCancelGameSearch, &CancelGameSearch_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.CancelLeaveMenu
// [0x00020000] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::CancelLeaveMenu ( )
{
	static UFunction* pFnCancelLeaveMenu = NULL;

	if ( ! pFnCancelLeaveMenu )
		pFnCancelLeaveMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.CancelLeaveMenu" );

	UKFGFxMenu_ServerBrowser_execCancelLeaveMenu_Parms CancelLeaveMenu_Parms;

	this->ProcessEvent ( pFnCancelLeaveMenu, &CancelLeaveMenu_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.LocalizeTabs
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::LocalizeTabs ( )
{
	static UFunction* pFnLocalizeTabs = NULL;

	if ( ! pFnLocalizeTabs )
		pFnLocalizeTabs = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.LocalizeTabs" );

	UKFGFxMenu_ServerBrowser_execLocalizeTabs_Parms LocalizeTabs_Parms;

	this->ProcessEvent ( pFnLocalizeTabs, &LocalizeTabs_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.OnContainerOpen
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::OnContainerOpen ( )
{
	static UFunction* pFnOnContainerOpen = NULL;

	if ( ! pFnOnContainerOpen )
		pFnOnContainerOpen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.OnContainerOpen" );

	UKFGFxMenu_ServerBrowser_execOnContainerOpen_Parms OnContainerOpen_Parms;

	this->ProcessEvent ( pFnOnContainerOpen, &OnContainerOpen_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMenu_ServerBrowser::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.WidgetInitialized" );

	UKFGFxMenu_ServerBrowser_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMenu_ServerBrowser.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxMenu_ServerBrowser::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMenu_ServerBrowser.InitializeMenu" );

	UKFGFxMenu_ServerBrowser_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerDetails.GetMapSource
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerDetails::GetMapSource ( )
{
	static UFunction* pFnGetMapSource = NULL;

	if ( ! pFnGetMapSource )
		pFnGetMapSource = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerDetails.GetMapSource" );

	UKFGFxServerBrowser_ServerDetails_execGetMapSource_Parms GetMapSource_Parms;

	this->ProcessEvent ( pFnGetMapSource, &GetMapSource_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerDetails.UpdatePlayerList
// [0x00420002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerDetails::UpdatePlayerList ( )
{
	static UFunction* pFnUpdatePlayerList = NULL;

	if ( ! pFnUpdatePlayerList )
		pFnUpdatePlayerList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerDetails.UpdatePlayerList" );

	UKFGFxServerBrowser_ServerDetails_execUpdatePlayerList_Parms UpdatePlayerList_Parms;

	this->ProcessEvent ( pFnUpdatePlayerList, &UpdatePlayerList_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerDetails.CreatePlayerListGFXObject
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerDetails::CreatePlayerListGFXObject ( )
{
	static UFunction* pFnCreatePlayerListGFXObject = NULL;

	if ( ! pFnCreatePlayerListGFXObject )
		pFnCreatePlayerListGFXObject = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerDetails.CreatePlayerListGFXObject" );

	UKFGFxServerBrowser_ServerDetails_execCreatePlayerListGFXObject_Parms CreatePlayerListGFXObject_Parms;

	this->ProcessEvent ( pFnCreatePlayerListGFXObject, &CreatePlayerListGFXObject_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerDetails.SetDetails
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerDetails::SetDetails ( )
{
	static UFunction* pFnSetDetails = NULL;

	if ( ! pFnSetDetails )
		pFnSetDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerDetails.SetDetails" );

	UKFGFxServerBrowser_ServerDetails_execSetDetails_Parms SetDetails_Parms;

	this->ProcessEvent ( pFnSetDetails, &SetDetails_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerDetails.SetFavoriteButtonActive
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerDetails::SetFavoriteButtonActive ( )
{
	static UFunction* pFnSetFavoriteButtonActive = NULL;

	if ( ! pFnSetFavoriteButtonActive )
		pFnSetFavoriteButtonActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerDetails.SetFavoriteButtonActive" );

	UKFGFxServerBrowser_ServerDetails_execSetFavoriteButtonActive_Parms SetFavoriteButtonActive_Parms;

	this->ProcessEvent ( pFnSetFavoriteButtonActive, &SetFavoriteButtonActive_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerDetails.GetFavoriteButtonActive
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerDetails::GetFavoriteButtonActive ( )
{
	static UFunction* pFnGetFavoriteButtonActive = NULL;

	if ( ! pFnGetFavoriteButtonActive )
		pFnGetFavoriteButtonActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerDetails.GetFavoriteButtonActive" );

	UKFGFxServerBrowser_ServerDetails_execGetFavoriteButtonActive_Parms GetFavoriteButtonActive_Parms;

	this->ProcessEvent ( pFnGetFavoriteButtonActive, &GetFavoriteButtonActive_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerDetails.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerDetails::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerDetails.LocalizeText" );

	UKFGFxServerBrowser_ServerDetails_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxServerBrowser_ServerDetails.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxServerBrowser_ServerDetails::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxServerBrowser_ServerDetails.Initialize" );

	UKFGFxServerBrowser_ServerDetails_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_FindGame.LocalizeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_FindGame::LocalizeMenu ( )
{
	static UFunction* pFnLocalizeMenu = NULL;

	if ( ! pFnLocalizeMenu )
		pFnLocalizeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_FindGame.LocalizeMenu" );

	UKFGFxStartGameContainer_FindGame_execLocalizeMenu_Parms LocalizeMenu_Parms;

	this->ProcessEvent ( pFnLocalizeMenu, &LocalizeMenu_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_FindGame.SetWhatsNewItems
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_FindGame::SetWhatsNewItems ( )
{
	static UFunction* pFnSetWhatsNewItems = NULL;

	if ( ! pFnSetWhatsNewItems )
		pFnSetWhatsNewItems = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_FindGame.SetWhatsNewItems" );

	UKFGFxStartGameContainer_FindGame_execSetWhatsNewItems_Parms SetWhatsNewItems_Parms;

	this->ProcessEvent ( pFnSetWhatsNewItems, &SetWhatsNewItems_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_FindGame.CheckNewsState
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_FindGame::CheckNewsState ( )
{
	static UFunction* pFnCheckNewsState = NULL;

	if ( ! pFnCheckNewsState )
		pFnCheckNewsState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_FindGame.CheckNewsState" );

	UKFGFxStartGameContainer_FindGame_execCheckNewsState_Parms CheckNewsState_Parms;

	this->ProcessEvent ( pFnCheckNewsState, &CheckNewsState_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_FindGame.DisableSoloButton
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_FindGame::DisableSoloButton ( )
{
	static UFunction* pFnDisableSoloButton = NULL;

	if ( ! pFnDisableSoloButton )
		pFnDisableSoloButton = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_FindGame.DisableSoloButton" );

	UKFGFxStartGameContainer_FindGame_execDisableSoloButton_Parms DisableSoloButton_Parms;

	this->ProcessEvent ( pFnDisableSoloButton, &DisableSoloButton_Parms, NULL );
};

// Function KFGame.KFGFxStartGameContainer_FindGame.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxStartGameContainer_FindGame::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartGameContainer_FindGame.Initialize" );

	UKFGFxStartGameContainer_FindGame_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.SetCurrentMapInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::SetCurrentMapInfo ( )
{
	static UFunction* pFnSetCurrentMapInfo = NULL;

	if ( ! pFnSetCurrentMapInfo )
		pFnSetCurrentMapInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.SetCurrentMapInfo" );

	UKFGFxStartContainer_InGameOverview_execSetCurrentMapInfo_Parms SetCurrentMapInfo_Parms;

	this->ProcessEvent ( pFnSetCurrentMapInfo, &SetCurrentMapInfo_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.UpdateOverviewInGame
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::UpdateOverviewInGame ( )
{
	static UFunction* pFnUpdateOverviewInGame = NULL;

	if ( ! pFnUpdateOverviewInGame )
		pFnUpdateOverviewInGame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.UpdateOverviewInGame" );

	UKFGFxStartContainer_InGameOverview_execUpdateOverviewInGame_Parms UpdateOverviewInGame_Parms;

	this->ProcessEvent ( pFnUpdateOverviewInGame, &UpdateOverviewInGame_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.UpdatePrivacy
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::UpdatePrivacy ( )
{
	static UFunction* pFnUpdatePrivacy = NULL;

	if ( ! pFnUpdatePrivacy )
		pFnUpdatePrivacy = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.UpdatePrivacy" );

	UKFGFxStartContainer_InGameOverview_execUpdatePrivacy_Parms UpdatePrivacy_Parms;

	this->ProcessEvent ( pFnUpdatePrivacy, &UpdatePrivacy_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.UpdateServerType
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::UpdateServerType ( )
{
	static UFunction* pFnUpdateServerType = NULL;

	if ( ! pFnUpdateServerType )
		pFnUpdateServerType = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.UpdateServerType" );

	UKFGFxStartContainer_InGameOverview_execUpdateServerType_Parms UpdateServerType_Parms;

	this->ProcessEvent ( pFnUpdateServerType, &UpdateServerType_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.UpdateLength
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::UpdateLength ( )
{
	static UFunction* pFnUpdateLength = NULL;

	if ( ! pFnUpdateLength )
		pFnUpdateLength = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.UpdateLength" );

	UKFGFxStartContainer_InGameOverview_execUpdateLength_Parms UpdateLength_Parms;

	this->ProcessEvent ( pFnUpdateLength, &UpdateLength_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.UpdateDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::UpdateDifficulty ( )
{
	static UFunction* pFnUpdateDifficulty = NULL;

	if ( ! pFnUpdateDifficulty )
		pFnUpdateDifficulty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.UpdateDifficulty" );

	UKFGFxStartContainer_InGameOverview_execUpdateDifficulty_Parms UpdateDifficulty_Parms;

	this->ProcessEvent ( pFnUpdateDifficulty, &UpdateDifficulty_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.UpdateMap
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::UpdateMap ( )
{
	static UFunction* pFnUpdateMap = NULL;

	if ( ! pFnUpdateMap )
		pFnUpdateMap = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.UpdateMap" );

	UKFGFxStartContainer_InGameOverview_execUpdateMap_Parms UpdateMap_Parms;

	this->ProcessEvent ( pFnUpdateMap, &UpdateMap_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.UpdateGameMode
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::UpdateGameMode ( )
{
	static UFunction* pFnUpdateGameMode = NULL;

	if ( ! pFnUpdateGameMode )
		pFnUpdateGameMode = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.UpdateGameMode" );

	UKFGFxStartContainer_InGameOverview_execUpdateGameMode_Parms UpdateGameMode_Parms;

	this->ProcessEvent ( pFnUpdateGameMode, &UpdateGameMode_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.GetKFPRIArray
// [0x00420002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::GetKFPRIArray ( )
{
	static UFunction* pFnGetKFPRIArray = NULL;

	if ( ! pFnGetKFPRIArray )
		pFnGetKFPRIArray = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.GetKFPRIArray" );

	UKFGFxStartContainer_InGameOverview_execGetKFPRIArray_Parms GetKFPRIArray_Parms;

	this->ProcessEvent ( pFnGetKFPRIArray, &GetKFPRIArray_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.UpdateSharedContent
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::UpdateSharedContent ( )
{
	static UFunction* pFnUpdateSharedContent = NULL;

	if ( ! pFnUpdateSharedContent )
		pFnUpdateSharedContent = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.UpdateSharedContent" );

	UKFGFxStartContainer_InGameOverview_execUpdateSharedContent_Parms UpdateSharedContent_Parms;

	this->ProcessEvent ( pFnUpdateSharedContent, &UpdateSharedContent_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.ShowWelcomeScreen
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::ShowWelcomeScreen ( )
{
	static UFunction* pFnShowWelcomeScreen = NULL;

	if ( ! pFnShowWelcomeScreen )
		pFnShowWelcomeScreen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.ShowWelcomeScreen" );

	UKFGFxStartContainer_InGameOverview_execShowWelcomeScreen_Parms ShowWelcomeScreen_Parms;

	this->ProcessEvent ( pFnShowWelcomeScreen, &ShowWelcomeScreen_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.ImageDownloadComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::ImageDownloadComplete ( )
{
	static UFunction* pFnImageDownloadComplete = NULL;

	if ( ! pFnImageDownloadComplete )
		pFnImageDownloadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.ImageDownloadComplete" );

	UKFGFxStartContainer_InGameOverview_execImageDownloadComplete_Parms ImageDownloadComplete_Parms;

	this->ProcessEvent ( pFnImageDownloadComplete, &ImageDownloadComplete_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.LocalizeWelcomeScreen
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::LocalizeWelcomeScreen ( )
{
	static UFunction* pFnLocalizeWelcomeScreen = NULL;

	if ( ! pFnLocalizeWelcomeScreen )
		pFnLocalizeWelcomeScreen = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.LocalizeWelcomeScreen" );

	UKFGFxStartContainer_InGameOverview_execLocalizeWelcomeScreen_Parms LocalizeWelcomeScreen_Parms;

	this->ProcessEvent ( pFnLocalizeWelcomeScreen, &LocalizeWelcomeScreen_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.LocalizeContainer" );

	UKFGFxStartContainer_InGameOverview_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.HideLengthInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::HideLengthInfo ( )
{
	static UFunction* pFnHideLengthInfo = NULL;

	if ( ! pFnHideLengthInfo )
		pFnHideLengthInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.HideLengthInfo" );

	UKFGFxStartContainer_InGameOverview_execHideLengthInfo_Parms HideLengthInfo_Parms;

	this->ProcessEvent ( pFnHideLengthInfo, &HideLengthInfo_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_InGameOverview.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_InGameOverview::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_InGameOverview.Initialize" );

	UKFGFxStartContainer_InGameOverview_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_NewsImageHolder.ImageDownloadComplete
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_NewsImageHolder::ImageDownloadComplete ( )
{
	static UFunction* pFnImageDownloadComplete = NULL;

	if ( ! pFnImageDownloadComplete )
		pFnImageDownloadComplete = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_NewsImageHolder.ImageDownloadComplete" );

	UKFGFxStartContainer_NewsImageHolder_execImageDownloadComplete_Parms ImageDownloadComplete_Parms;

	this->ProcessEvent ( pFnImageDownloadComplete, &ImageDownloadComplete_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_NewsImageHolder.DownloadNewsImage
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_NewsImageHolder::DownloadNewsImage ( )
{
	static UFunction* pFnDownloadNewsImage = NULL;

	if ( ! pFnDownloadNewsImage )
		pFnDownloadNewsImage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_NewsImageHolder.DownloadNewsImage" );

	UKFGFxStartContainer_NewsImageHolder_execDownloadNewsImage_Parms DownloadNewsImage_Parms;

	this->ProcessEvent ( pFnDownloadNewsImage, &DownloadNewsImage_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_NewsImageHolder.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_NewsImageHolder::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_NewsImageHolder.LocalizeContainer" );

	UKFGFxStartContainer_NewsImageHolder_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_NewsImageHolder.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_NewsImageHolder::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_NewsImageHolder.Initialize" );

	UKFGFxStartContainer_NewsImageHolder_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxMissionObjectivesContainer.FullRefresh
// [0x00020002] 
// Parameters infos:

void UKFGFxMissionObjectivesContainer::FullRefresh ( )
{
	static UFunction* pFnFullRefresh = NULL;

	if ( ! pFnFullRefresh )
		pFnFullRefresh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMissionObjectivesContainer.FullRefresh" );

	UKFGFxMissionObjectivesContainer_execFullRefresh_Parms FullRefresh_Parms;

	this->ProcessEvent ( pFnFullRefresh, &FullRefresh_Parms, NULL );
};

// Function KFGame.KFGFxMissionObjectivesContainer.Refresh
// [0x00024002] 
// Parameters infos:

void UKFGFxMissionObjectivesContainer::Refresh ( )
{
	static UFunction* pFnRefresh = NULL;

	if ( ! pFnRefresh )
		pFnRefresh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMissionObjectivesContainer.Refresh" );

	UKFGFxMissionObjectivesContainer_execRefresh_Parms Refresh_Parms;

	this->ProcessEvent ( pFnRefresh, &Refresh_Parms, NULL );
};

// Function KFGame.KFGFxMissionObjectivesContainer.ShowShouldSpecialEvent
// [0x00020002] 
// Parameters infos:

void UKFGFxMissionObjectivesContainer::ShowShouldSpecialEvent ( )
{
	static UFunction* pFnShowShouldSpecialEvent = NULL;

	if ( ! pFnShowShouldSpecialEvent )
		pFnShowShouldSpecialEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMissionObjectivesContainer.ShowShouldSpecialEvent" );

	UKFGFxMissionObjectivesContainer_execShowShouldSpecialEvent_Parms ShowShouldSpecialEvent_Parms;

	this->ProcessEvent ( pFnShowShouldSpecialEvent, &ShowShouldSpecialEvent_Parms, NULL );
};

// Function KFGame.KFGFxMissionObjectivesContainer.UpdateSpecialEventActive
// [0x00020002] 
// Parameters infos:

void UKFGFxMissionObjectivesContainer::UpdateSpecialEventActive ( )
{
	static UFunction* pFnUpdateSpecialEventActive = NULL;

	if ( ! pFnUpdateSpecialEventActive )
		pFnUpdateSpecialEventActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMissionObjectivesContainer.UpdateSpecialEventActive" );

	UKFGFxMissionObjectivesContainer_execUpdateSpecialEventActive_Parms UpdateSpecialEventActive_Parms;

	this->ProcessEvent ( pFnUpdateSpecialEventActive, &UpdateSpecialEventActive_Parms, NULL );
};

// Function KFGame.KFGFxMissionObjectivesContainer.UpdateWeeklyUIActive
// [0x00020002] 
// Parameters infos:

void UKFGFxMissionObjectivesContainer::UpdateWeeklyUIActive ( )
{
	static UFunction* pFnUpdateWeeklyUIActive = NULL;

	if ( ! pFnUpdateWeeklyUIActive )
		pFnUpdateWeeklyUIActive = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMissionObjectivesContainer.UpdateWeeklyUIActive" );

	UKFGFxMissionObjectivesContainer_execUpdateWeeklyUIActive_Parms UpdateWeeklyUIActive_Parms;

	this->ProcessEvent ( pFnUpdateWeeklyUIActive, &UpdateWeeklyUIActive_Parms, NULL );
};

// Function KFGame.KFGFxMissionObjectivesContainer.UpdateMissionObjectiveState
// [0x00020002] 
// Parameters infos:

void UKFGFxMissionObjectivesContainer::UpdateMissionObjectiveState ( )
{
	static UFunction* pFnUpdateMissionObjectiveState = NULL;

	if ( ! pFnUpdateMissionObjectiveState )
		pFnUpdateMissionObjectiveState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMissionObjectivesContainer.UpdateMissionObjectiveState" );

	UKFGFxMissionObjectivesContainer_execUpdateMissionObjectiveState_Parms UpdateMissionObjectiveState_Parms;

	this->ProcessEvent ( pFnUpdateMissionObjectiveState, &UpdateMissionObjectiveState_Parms, NULL );
};

// Function KFGame.KFGFxMissionObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxMissionObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMissionObjectivesContainer.Initialize" );

	UKFGFxMissionObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_ServerBrowserOverview.SetDescriptionString
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_ServerBrowserOverview::SetDescriptionString ( )
{
	static UFunction* pFnSetDescriptionString = NULL;

	if ( ! pFnSetDescriptionString )
		pFnSetDescriptionString = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_ServerBrowserOverview.SetDescriptionString" );

	UKFGFxStartContainer_ServerBrowserOverview_execSetDescriptionString_Parms SetDescriptionString_Parms;

	this->ProcessEvent ( pFnSetDescriptionString, &SetDescriptionString_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_ServerBrowserOverview.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_ServerBrowserOverview::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_ServerBrowserOverview.LocalizeContainer" );

	UKFGFxStartContainer_ServerBrowserOverview_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxStartContainer_ServerBrowserOverview.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxStartContainer_ServerBrowserOverview::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStartContainer_ServerBrowserOverview.Initialize" );

	UKFGFxStartContainer_ServerBrowserOverview_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxSummerSideShowObjectivesContainer.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxSummerSideShowObjectivesContainer::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxSummerSideShowObjectivesContainer.Initialize" );

	UKFGFxSummerSideShowObjectivesContainer_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Details.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Details::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Details.LocalizeText" );

	UKFGFxStoreContainer_Details_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Details.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Details::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Details.Initialize" );

	UKFGFxStoreContainer_Details_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.IsFilterSame
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::IsFilterSame ( )
{
	static UFunction* pFnIsFilterSame = NULL;

	if ( ! pFnIsFilterSame )
		pFnIsFilterSame = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.IsFilterSame" );

	UKFGFxStoreContainer_Main_execIsFilterSame_Parms IsFilterSame_Parms;

	this->ProcessEvent ( pFnIsFilterSame, &IsFilterSame_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.CreateStoreItem
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::CreateStoreItem ( )
{
	static UFunction* pFnCreateStoreItem = NULL;

	if ( ! pFnCreateStoreItem )
		pFnCreateStoreItem = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.CreateStoreItem" );

	UKFGFxStoreContainer_Main_execCreateStoreItem_Parms CreateStoreItem_Parms;

	this->ProcessEvent ( pFnCreateStoreItem, &CreateStoreItem_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.SortItemsByPrice
// [0x00120002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::SortItemsByPrice ( )
{
	static UFunction* pFnSortItemsByPrice = NULL;

	if ( ! pFnSortItemsByPrice )
		pFnSortItemsByPrice = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.SortItemsByPrice" );

	UKFGFxStoreContainer_Main_execSortItemsByPrice_Parms SortItemsByPrice_Parms;

	this->ProcessEvent ( pFnSortItemsByPrice, &SortItemsByPrice_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.SortItemsByType
// [0x00120002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::SortItemsByType ( )
{
	static UFunction* pFnSortItemsByType = NULL;

	if ( ! pFnSortItemsByType )
		pFnSortItemsByType = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.SortItemsByType" );

	UKFGFxStoreContainer_Main_execSortItemsByType_Parms SortItemsByType_Parms;

	this->ProcessEvent ( pFnSortItemsByType, &SortItemsByType_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.ShuffleFeaturedItems
// [0x00C20002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::ShuffleFeaturedItems ( )
{
	static UFunction* pFnShuffleFeaturedItems = NULL;

	if ( ! pFnShuffleFeaturedItems )
		pFnShuffleFeaturedItems = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.ShuffleFeaturedItems" );

	UKFGFxStoreContainer_Main_execShuffleFeaturedItems_Parms ShuffleFeaturedItems_Parms;

	this->ProcessEvent ( pFnShuffleFeaturedItems, &ShuffleFeaturedItems_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.SendItems
// [0x00C20002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::SendItems ( )
{
	static UFunction* pFnSendItems = NULL;

	if ( ! pFnSendItems )
		pFnSendItems = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.SendItems" );

	UKFGFxStoreContainer_Main_execSendItems_Parms SendItems_Parms;

	this->ProcessEvent ( pFnSendItems, &SendItems_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.UpdateFilter
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::UpdateFilter ( )
{
	static UFunction* pFnUpdateFilter = NULL;

	if ( ! pFnUpdateFilter )
		pFnUpdateFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.UpdateFilter" );

	UKFGFxStoreContainer_Main_execUpdateFilter_Parms UpdateFilter_Parms;

	this->ProcessEvent ( pFnUpdateFilter, &UpdateFilter_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.LocalizeText" );

	UKFGFxStoreContainer_Main_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Main.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Main::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Main.Initialize" );

	UKFGFxStoreContainer_Main_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Cart.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Cart::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Cart.LocalizeText" );

	UKFGFxStoreContainer_Cart_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxStoreContainer_Cart.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxStoreContainer_Cart::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxStoreContainer_Cart.Initialize" );

	UKFGFxStoreContainer_Cart_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ErrorMessage.SetWarningMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_ErrorMessage::SetWarningMessage ( )
{
	static UFunction* pFnSetWarningMessage = NULL;

	if ( ! pFnSetWarningMessage )
		pFnSetWarningMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ErrorMessage.SetWarningMessage" );

	UKFGFxTraderContainer_ErrorMessage_execSetWarningMessage_Parms SetWarningMessage_Parms;

	this->ProcessEvent ( pFnSetWarningMessage, &SetWarningMessage_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ErrorMessage.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_ErrorMessage::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ErrorMessage.Initialize" );

	UKFGFxTraderContainer_ErrorMessage_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_GameInfo.SetCurrentWeight
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_GameInfo::SetCurrentWeight ( )
{
	static UFunction* pFnSetCurrentWeight = NULL;

	if ( ! pFnSetCurrentWeight )
		pFnSetCurrentWeight = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_GameInfo.SetCurrentWeight" );

	UKFGFxTraderContainer_GameInfo_execSetCurrentWeight_Parms SetCurrentWeight_Parms;

	this->ProcessEvent ( pFnSetCurrentWeight, &SetCurrentWeight_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_GameInfo.SetDosh
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_GameInfo::SetDosh ( )
{
	static UFunction* pFnSetDosh = NULL;

	if ( ! pFnSetDosh )
		pFnSetDosh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_GameInfo.SetDosh" );

	UKFGFxTraderContainer_GameInfo_execSetDosh_Parms SetDosh_Parms;

	this->ProcessEvent ( pFnSetDosh, &SetDosh_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_GameInfo.UpdateTraderTimer
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_GameInfo::UpdateTraderTimer ( )
{
	static UFunction* pFnUpdateTraderTimer = NULL;

	if ( ! pFnUpdateTraderTimer )
		pFnUpdateTraderTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_GameInfo.UpdateTraderTimer" );

	UKFGFxTraderContainer_GameInfo_execUpdateTraderTimer_Parms UpdateTraderTimer_Parms;

	this->ProcessEvent ( pFnUpdateTraderTimer, &UpdateTraderTimer_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_GameInfo.UpdateGameInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_GameInfo::UpdateGameInfo ( )
{
	static UFunction* pFnUpdateGameInfo = NULL;

	if ( ! pFnUpdateGameInfo )
		pFnUpdateGameInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_GameInfo.UpdateGameInfo" );

	UKFGFxTraderContainer_GameInfo_execUpdateGameInfo_Parms UpdateGameInfo_Parms;

	this->ProcessEvent ( pFnUpdateGameInfo, &UpdateGameInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_GameInfo.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_GameInfo::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_GameInfo.Initialize" );

	UKFGFxTraderContainer_GameInfo_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Filter.SetTabsData
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_Filter::SetTabsData ( )
{
	static UFunction* pFnSetTabsData = NULL;

	if ( ! pFnSetTabsData )
		pFnSetTabsData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Filter.SetTabsData" );

	UKFGFxTraderContainer_Filter_execSetTabsData_Parms SetTabsData_Parms;

	this->ProcessEvent ( pFnSetTabsData, &SetTabsData_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Filter.SetTypeFilterData
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_Filter::SetTypeFilterData ( )
{
	static UFunction* pFnSetTypeFilterData = NULL;

	if ( ! pFnSetTypeFilterData )
		pFnSetTypeFilterData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Filter.SetTypeFilterData" );

	UKFGFxTraderContainer_Filter_execSetTypeFilterData_Parms SetTypeFilterData_Parms;

	this->ProcessEvent ( pFnSetTypeFilterData, &SetTypeFilterData_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Filter.SetPerkFilterData
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_Filter::SetPerkFilterData ( )
{
	static UFunction* pFnSetPerkFilterData = NULL;

	if ( ! pFnSetPerkFilterData )
		pFnSetPerkFilterData = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Filter.SetPerkFilterData" );

	UKFGFxTraderContainer_Filter_execSetPerkFilterData_Parms SetPerkFilterData_Parms;

	this->ProcessEvent ( pFnSetPerkFilterData, &SetPerkFilterData_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Filter.ClearFilters
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_Filter::ClearFilters ( )
{
	static UFunction* pFnClearFilters = NULL;

	if ( ! pFnClearFilters )
		pFnClearFilters = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Filter.ClearFilters" );

	UKFGFxTraderContainer_Filter_execClearFilters_Parms ClearFilters_Parms;

	this->ProcessEvent ( pFnClearFilters, &ClearFilters_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.IsItemFiltered
// [0x00024002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::IsItemFiltered ( )
{
	static UFunction* pFnIsItemFiltered = NULL;

	if ( ! pFnIsItemFiltered )
		pFnIsItemFiltered = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.IsItemFiltered" );

	UKFGFxTraderContainer_Store_execIsItemFiltered_Parms IsItemFiltered_Parms;

	this->ProcessEvent ( pFnIsItemFiltered, &IsItemFiltered_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.SetItemInfo
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::SetItemInfo ( )
{
	static UFunction* pFnSetItemInfo = NULL;

	if ( ! pFnSetItemInfo )
		pFnSetItemInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.SetItemInfo" );

	UKFGFxTraderContainer_Store_execSetItemInfo_Parms SetItemInfo_Parms;

	this->ProcessEvent ( pFnSetItemInfo, &SetItemInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.RefreshAllItems
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::RefreshAllItems ( )
{
	static UFunction* pFnRefreshAllItems = NULL;

	if ( ! pFnRefreshAllItems )
		pFnRefreshAllItems = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.RefreshAllItems" );

	UKFGFxTraderContainer_Store_execRefreshAllItems_Parms RefreshAllItems_Parms;

	this->ProcessEvent ( pFnRefreshAllItems, &RefreshAllItems_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.RefreshFavoriteItems
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::RefreshFavoriteItems ( )
{
	static UFunction* pFnRefreshFavoriteItems = NULL;

	if ( ! pFnRefreshFavoriteItems )
		pFnRefreshFavoriteItems = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.RefreshFavoriteItems" );

	UKFGFxTraderContainer_Store_execRefreshFavoriteItems_Parms RefreshFavoriteItems_Parms;

	this->ProcessEvent ( pFnRefreshFavoriteItems, &RefreshFavoriteItems_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.RefreshItemsByType
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::RefreshItemsByType ( )
{
	static UFunction* pFnRefreshItemsByType = NULL;

	if ( ! pFnRefreshItemsByType )
		pFnRefreshItemsByType = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.RefreshItemsByType" );

	UKFGFxTraderContainer_Store_execRefreshItemsByType_Parms RefreshItemsByType_Parms;

	this->ProcessEvent ( pFnRefreshItemsByType, &RefreshItemsByType_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.RefreshWeaponListByPerk
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::RefreshWeaponListByPerk ( )
{
	static UFunction* pFnRefreshWeaponListByPerk = NULL;

	if ( ! pFnRefreshWeaponListByPerk )
		pFnRefreshWeaponListByPerk = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.RefreshWeaponListByPerk" );

	UKFGFxTraderContainer_Store_execRefreshWeaponListByPerk_Parms RefreshWeaponListByPerk_Parms;

	this->ProcessEvent ( pFnRefreshWeaponListByPerk, &RefreshWeaponListByPerk_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.SetSelectedIndex
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::SetSelectedIndex ( )
{
	static UFunction* pFnSetSelectedIndex = NULL;

	if ( ! pFnSetSelectedIndex )
		pFnSetSelectedIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.SetSelectedIndex" );

	UKFGFxTraderContainer_Store_execSetSelectedIndex_Parms SetSelectedIndex_Parms;

	this->ProcessEvent ( pFnSetSelectedIndex, &SetSelectedIndex_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.OnTraderReopened
// [0x00020000] 
// Parameters infos:

void UKFGFxTraderContainer_Store::OnTraderReopened ( )
{
	static UFunction* pFnOnTraderReopened = NULL;

	if ( ! pFnOnTraderReopened )
		pFnOnTraderReopened = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.OnTraderReopened" );

	UKFGFxTraderContainer_Store_execOnTraderReopened_Parms OnTraderReopened_Parms;

	this->ProcessEvent ( pFnOnTraderReopened, &OnTraderReopened_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.DelayedRefresh
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::DelayedRefresh ( )
{
	static UFunction* pFnDelayedRefresh = NULL;

	if ( ! pFnDelayedRefresh )
		pFnDelayedRefresh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.DelayedRefresh" );

	UKFGFxTraderContainer_Store_execDelayedRefresh_Parms DelayedRefresh_Parms;

	this->ProcessEvent ( pFnDelayedRefresh, &DelayedRefresh_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.LocalizeContainer" );

	UKFGFxTraderContainer_Store_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_Store.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_Store::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_Store.Initialize" );

	UKFGFxTraderContainer_Store_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.GetButtonState
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::GetButtonState ( )
{
	static UFunction* pFnGetButtonState = NULL;

	if ( ! pFnGetButtonState )
		pFnGetButtonState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.GetButtonState" );

	UKFGFxTraderContainer_PlayerInventory_execGetButtonState_Parms GetButtonState_Parms;

	this->ProcessEvent ( pFnGetButtonState, &GetButtonState_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.SetAutoFill
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::SetAutoFill ( )
{
	static UFunction* pFnSetAutoFill = NULL;

	if ( ! pFnSetAutoFill )
		pFnSetAutoFill = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.SetAutoFill" );

	UKFGFxTraderContainer_PlayerInventory_execSetAutoFill_Parms SetAutoFill_Parms;

	this->ProcessEvent ( pFnSetAutoFill, &SetAutoFill_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.SetSellInfo
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::SetSellInfo ( )
{
	static UFunction* pFnSetSellInfo = NULL;

	if ( ! pFnSetSellInfo )
		pFnSetSellInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.SetSellInfo" );

	UKFGFxTraderContainer_PlayerInventory_execSetSellInfo_Parms SetSellInfo_Parms;

	this->ProcessEvent ( pFnSetSellInfo, &SetSellInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.SetFillInfo
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::SetFillInfo ( )
{
	static UFunction* pFnSetFillInfo = NULL;

	if ( ! pFnSetFillInfo )
		pFnSetFillInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.SetFillInfo" );

	UKFGFxTraderContainer_PlayerInventory_execSetFillInfo_Parms SetFillInfo_Parms;

	this->ProcessEvent ( pFnSetFillInfo, &SetFillInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.SetMagInfo
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::SetMagInfo ( )
{
	static UFunction* pFnSetMagInfo = NULL;

	if ( ! pFnSetMagInfo )
		pFnSetMagInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.SetMagInfo" );

	UKFGFxTraderContainer_PlayerInventory_execSetMagInfo_Parms SetMagInfo_Parms;

	this->ProcessEvent ( pFnSetMagInfo, &SetMagInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.SetItemInfo
// [0x00424002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::SetItemInfo ( )
{
	static UFunction* pFnSetItemInfo = NULL;

	if ( ! pFnSetItemInfo )
		pFnSetItemInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.SetItemInfo" );

	UKFGFxTraderContainer_PlayerInventory_execSetItemInfo_Parms SetItemInfo_Parms;

	this->ProcessEvent ( pFnSetItemInfo, &SetItemInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.SetGrenadeInfo
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::SetGrenadeInfo ( )
{
	static UFunction* pFnSetGrenadeInfo = NULL;

	if ( ! pFnSetGrenadeInfo )
		pFnSetGrenadeInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.SetGrenadeInfo" );

	UKFGFxTraderContainer_PlayerInventory_execSetGrenadeInfo_Parms SetGrenadeInfo_Parms;

	this->ProcessEvent ( pFnSetGrenadeInfo, &SetGrenadeInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.SetArmorInfo
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::SetArmorInfo ( )
{
	static UFunction* pFnSetArmorInfo = NULL;

	if ( ! pFnSetArmorInfo )
		pFnSetArmorInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.SetArmorInfo" );

	UKFGFxTraderContainer_PlayerInventory_execSetArmorInfo_Parms SetArmorInfo_Parms;

	this->ProcessEvent ( pFnSetArmorInfo, &SetArmorInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.RefreshPlayerInventory
// [0x00820002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::RefreshPlayerInventory ( )
{
	static UFunction* pFnRefreshPlayerInventory = NULL;

	if ( ! pFnRefreshPlayerInventory )
		pFnRefreshPlayerInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.RefreshPlayerInventory" );

	UKFGFxTraderContainer_PlayerInventory_execRefreshPlayerInventory_Parms RefreshPlayerInventory_Parms;

	this->ProcessEvent ( pFnRefreshPlayerInventory, &RefreshPlayerInventory_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.UpdateLock
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::UpdateLock ( )
{
	static UFunction* pFnUpdateLock = NULL;

	if ( ! pFnUpdateLock )
		pFnUpdateLock = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.UpdateLock" );

	UKFGFxTraderContainer_PlayerInventory_execUpdateLock_Parms UpdateLock_Parms;

	this->ProcessEvent ( pFnUpdateLock, &UpdateLock_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.LocalizeContainer" );

	UKFGFxTraderContainer_PlayerInventory_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInventory.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInventory::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInventory.Initialize" );

	UKFGFxTraderContainer_PlayerInventory_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInfo.SetCharacterImage
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInfo::SetCharacterImage ( )
{
	static UFunction* pFnSetCharacterImage = NULL;

	if ( ! pFnSetCharacterImage )
		pFnSetCharacterImage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInfo.SetCharacterImage" );

	UKFGFxTraderContainer_PlayerInfo_execSetCharacterImage_Parms SetCharacterImage_Parms;

	this->ProcessEvent ( pFnSetCharacterImage, &SetCharacterImage_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInfo.SetPerkList
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInfo::SetPerkList ( )
{
	static UFunction* pFnSetPerkList = NULL;

	if ( ! pFnSetPerkList )
		pFnSetPerkList = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInfo.SetPerkList" );

	UKFGFxTraderContainer_PlayerInfo_execSetPerkList_Parms SetPerkList_Parms;

	this->ProcessEvent ( pFnSetPerkList, &SetPerkList_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInfo.SetPerkInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInfo::SetPerkInfo ( )
{
	static UFunction* pFnSetPerkInfo = NULL;

	if ( ! pFnSetPerkInfo )
		pFnSetPerkInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInfo.SetPerkInfo" );

	UKFGFxTraderContainer_PlayerInfo_execSetPerkInfo_Parms SetPerkInfo_Parms;

	this->ProcessEvent ( pFnSetPerkInfo, &SetPerkInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInfo.UpdatePlayerInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInfo::UpdatePlayerInfo ( )
{
	static UFunction* pFnUpdatePlayerInfo = NULL;

	if ( ! pFnUpdatePlayerInfo )
		pFnUpdatePlayerInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInfo.UpdatePlayerInfo" );

	UKFGFxTraderContainer_PlayerInfo_execUpdatePlayerInfo_Parms UpdatePlayerInfo_Parms;

	this->ProcessEvent ( pFnUpdatePlayerInfo, &UpdatePlayerInfo_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInfo.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInfo::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInfo.LocalizeText" );

	UKFGFxTraderContainer_PlayerInfo_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_PlayerInfo.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_PlayerInfo::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_PlayerInfo.Initialize" );

	UKFGFxTraderContainer_PlayerInfo_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.SetGenericItemDetails
// [0x00424002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::SetGenericItemDetails ( )
{
	static UFunction* pFnSetGenericItemDetails = NULL;

	if ( ! pFnSetGenericItemDetails )
		pFnSetGenericItemDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.SetGenericItemDetails" );

	UKFGFxTraderContainer_ItemDetails_execSetGenericItemDetails_Parms SetGenericItemDetails_Parms;

	this->ProcessEvent ( pFnSetGenericItemDetails, &SetGenericItemDetails_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.GetStatMax
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::GetStatMax ( )
{
	static UFunction* pFnGetStatMax = NULL;

	if ( ! pFnGetStatMax )
		pFnGetStatMax = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.GetStatMax" );

	UKFGFxTraderContainer_ItemDetails_execGetStatMax_Parms GetStatMax_Parms;

	this->ProcessEvent ( pFnGetStatMax, &GetStatMax_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.GetLocalizedStatString
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::GetLocalizedStatString ( )
{
	static UFunction* pFnGetLocalizedStatString = NULL;

	if ( ! pFnGetLocalizedStatString )
		pFnGetLocalizedStatString = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.GetLocalizedStatString" );

	UKFGFxTraderContainer_ItemDetails_execGetLocalizedStatString_Parms GetLocalizedStatString_Parms;

	this->ProcessEvent ( pFnGetLocalizedStatString, &GetLocalizedStatString_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.SetPlayerItemDetails
// [0x00424002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::SetPlayerItemDetails ( )
{
	static UFunction* pFnSetPlayerItemDetails = NULL;

	if ( ! pFnSetPlayerItemDetails )
		pFnSetPlayerItemDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.SetPlayerItemDetails" );

	UKFGFxTraderContainer_ItemDetails_execSetPlayerItemDetails_Parms SetPlayerItemDetails_Parms;

	this->ProcessEvent ( pFnSetPlayerItemDetails, &SetPlayerItemDetails_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.SetShopItemDetails
// [0x00420002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::SetShopItemDetails ( )
{
	static UFunction* pFnSetShopItemDetails = NULL;

	if ( ! pFnSetShopItemDetails )
		pFnSetShopItemDetails = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.SetShopItemDetails" );

	UKFGFxTraderContainer_ItemDetails_execSetShopItemDetails_Parms SetShopItemDetails_Parms;

	this->ProcessEvent ( pFnSetShopItemDetails, &SetShopItemDetails_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.SetDetailsText
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::SetDetailsText ( )
{
	static UFunction* pFnSetDetailsText = NULL;

	if ( ! pFnSetDetailsText )
		pFnSetDetailsText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.SetDetailsText" );

	UKFGFxTraderContainer_ItemDetails_execSetDetailsText_Parms SetDetailsText_Parms;

	this->ProcessEvent ( pFnSetDetailsText, &SetDetailsText_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.SetDetailsVisible
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::SetDetailsVisible ( )
{
	static UFunction* pFnSetDetailsVisible = NULL;

	if ( ! pFnSetDetailsVisible )
		pFnSetDetailsVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.SetDetailsVisible" );

	UKFGFxTraderContainer_ItemDetails_execSetDetailsVisible_Parms SetDetailsVisible_Parms;

	this->ProcessEvent ( pFnSetDetailsVisible, &SetDetailsVisible_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.LocalizeContainer
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::LocalizeContainer ( )
{
	static UFunction* pFnLocalizeContainer = NULL;

	if ( ! pFnLocalizeContainer )
		pFnLocalizeContainer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.LocalizeContainer" );

	UKFGFxTraderContainer_ItemDetails_execLocalizeContainer_Parms LocalizeContainer_Parms;

	this->ProcessEvent ( pFnLocalizeContainer, &LocalizeContainer_Parms, NULL );
};

// Function KFGame.KFGFxTraderContainer_ItemDetails.Initialize
// [0x00020002] 
// Parameters infos:

void UKFGFxTraderContainer_ItemDetails::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxTraderContainer_ItemDetails.Initialize" );

	UKFGFxTraderContainer_ItemDetails_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxWidget_ButtonPrompt.LocalizeWidget
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_ButtonPrompt::LocalizeWidget ( )
{
	static UFunction* pFnLocalizeWidget = NULL;

	if ( ! pFnLocalizeWidget )
		pFnLocalizeWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_ButtonPrompt.LocalizeWidget" );

	UKFGFxWidget_ButtonPrompt_execLocalizeWidget_Parms LocalizeWidget_Parms;

	this->ProcessEvent ( pFnLocalizeWidget, &LocalizeWidget_Parms, NULL );
};

// Function KFGame.KFGFxWidget_ButtonPrompt.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_ButtonPrompt::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_ButtonPrompt.InitializeMenu" );

	UKFGFxWidget_ButtonPrompt_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.OnNoReleased
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::OnNoReleased ( )
{
	static UFunction* pFnOnNoReleased = NULL;

	if ( ! pFnOnNoReleased )
		pFnOnNoReleased = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.OnNoReleased" );

	UKFGFxWidget_KickVote_execOnNoReleased_Parms OnNoReleased_Parms;

	this->ProcessEvent ( pFnOnNoReleased, &OnNoReleased_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.OnNoPressed
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::OnNoPressed ( )
{
	static UFunction* pFnOnNoPressed = NULL;

	if ( ! pFnOnNoPressed )
		pFnOnNoPressed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.OnNoPressed" );

	UKFGFxWidget_KickVote_execOnNoPressed_Parms OnNoPressed_Parms;

	this->ProcessEvent ( pFnOnNoPressed, &OnNoPressed_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.OnYesReleased
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::OnYesReleased ( )
{
	static UFunction* pFnOnYesReleased = NULL;

	if ( ! pFnOnYesReleased )
		pFnOnYesReleased = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.OnYesReleased" );

	UKFGFxWidget_KickVote_execOnYesReleased_Parms OnYesReleased_Parms;

	this->ProcessEvent ( pFnOnYesReleased, &OnYesReleased_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.OnYesPressed
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::OnYesPressed ( )
{
	static UFunction* pFnOnYesPressed = NULL;

	if ( ! pFnOnYesPressed )
		pFnOnYesPressed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.OnYesPressed" );

	UKFGFxWidget_KickVote_execOnYesPressed_Parms OnYesPressed_Parms;

	this->ProcessEvent ( pFnOnYesPressed, &OnYesPressed_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.VoteClosed
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::VoteClosed ( )
{
	static UFunction* pFnVoteClosed = NULL;

	if ( ! pFnVoteClosed )
		pFnVoteClosed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.VoteClosed" );

	UKFGFxWidget_KickVote_execVoteClosed_Parms VoteClosed_Parms;

	this->ProcessEvent ( pFnVoteClosed, &VoteClosed_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.UpdateKickVoteCount
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::UpdateKickVoteCount ( )
{
	static UFunction* pFnUpdateKickVoteCount = NULL;

	if ( ! pFnUpdateKickVoteCount )
		pFnUpdateKickVoteCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.UpdateKickVoteCount" );

	UKFGFxWidget_KickVote_execUpdateKickVoteCount_Parms UpdateKickVoteCount_Parms;

	this->ProcessEvent ( pFnUpdateKickVoteCount, &UpdateKickVoteCount_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.UpdateUsingGamePad
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::UpdateUsingGamePad ( )
{
	static UFunction* pFnUpdateUsingGamePad = NULL;

	if ( ! pFnUpdateUsingGamePad )
		pFnUpdateUsingGamePad = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.UpdateUsingGamePad" );

	UKFGFxWidget_KickVote_execUpdateUsingGamePad_Parms UpdateUsingGamePad_Parms;

	this->ProcessEvent ( pFnUpdateUsingGamePad, &UpdateUsingGamePad_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.SendVoteKickToAS3
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::SendVoteKickToAS3 ( )
{
	static UFunction* pFnSendVoteKickToAS3 = NULL;

	if ( ! pFnSendVoteKickToAS3 )
		pFnSendVoteKickToAS3 = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.SendVoteKickToAS3" );

	UKFGFxWidget_KickVote_execSendVoteKickToAS3_Parms SendVoteKickToAS3_Parms;

	this->ProcessEvent ( pFnSendVoteKickToAS3, &SendVoteKickToAS3_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.ShowKickVote
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::ShowKickVote ( )
{
	static UFunction* pFnShowKickVote = NULL;

	if ( ! pFnShowKickVote )
		pFnShowKickVote = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.ShowKickVote" );

	UKFGFxWidget_KickVote_execShowKickVote_Parms ShowKickVote_Parms;

	this->ProcessEvent ( pFnShowKickVote, &ShowKickVote_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.LocalizeText
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_KickVote::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.LocalizeText" );

	UKFGFxWidget_KickVote_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_KickVote.InitializeHUD
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_KickVote::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_KickVote.InitializeHUD" );

	UKFGFxWidget_KickVote_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VOIPNotification.UpdateWidget
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VOIPNotification::UpdateWidget ( )
{
	static UFunction* pFnUpdateWidget = NULL;

	if ( ! pFnUpdateWidget )
		pFnUpdateWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VOIPNotification.UpdateWidget" );

	UKFGFxWidget_VOIPNotification_execUpdateWidget_Parms UpdateWidget_Parms;

	this->ProcessEvent ( pFnUpdateWidget, &UpdateWidget_Parms, NULL );
};

// Function KFGame.KFGFxWidget_VOIPNotification.VOIPEventTriggered
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_VOIPNotification::VOIPEventTriggered ( )
{
	static UFunction* pFnVOIPEventTriggered = NULL;

	if ( ! pFnVOIPEventTriggered )
		pFnVOIPEventTriggered = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_VOIPNotification.VOIPEventTriggered" );

	UKFGFxWidget_VOIPNotification_execVOIPEventTriggered_Parms VOIPEventTriggered_Parms;

	this->ProcessEvent ( pFnVOIPEventTriggered, &VOIPEventTriggered_Parms, NULL );
};

// Function KFGame.KFGFxWidget_LevelUpNotification.ShowAchievementNotification
// [0x00024002] 
// Parameters infos:

void UKFGFxWidget_LevelUpNotification::ShowAchievementNotification ( )
{
	static UFunction* pFnShowAchievementNotification = NULL;

	if ( ! pFnShowAchievementNotification )
		pFnShowAchievementNotification = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_LevelUpNotification.ShowAchievementNotification" );

	UKFGFxWidget_LevelUpNotification_execShowAchievementNotification_Parms ShowAchievementNotification_Parms;

	this->ProcessEvent ( pFnShowAchievementNotification, &ShowAchievementNotification_Parms, NULL );
};

// Function KFGame.KFGFxWidget_LevelUpNotification.ShowObjectiveCompleteNotification
// [0x00024002] 
// Parameters infos:

void UKFGFxWidget_LevelUpNotification::ShowObjectiveCompleteNotification ( )
{
	static UFunction* pFnShowObjectiveCompleteNotification = NULL;

	if ( ! pFnShowObjectiveCompleteNotification )
		pFnShowObjectiveCompleteNotification = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_LevelUpNotification.ShowObjectiveCompleteNotification" );

	UKFGFxWidget_LevelUpNotification_execShowObjectiveCompleteNotification_Parms ShowObjectiveCompleteNotification_Parms;

	this->ProcessEvent ( pFnShowObjectiveCompleteNotification, &ShowObjectiveCompleteNotification_Parms, NULL );
};

// Function KFGame.KFGFxWidget_LevelUpNotification.ShowLevelUpNotification
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_LevelUpNotification::ShowLevelUpNotification ( )
{
	static UFunction* pFnShowLevelUpNotification = NULL;

	if ( ! pFnShowLevelUpNotification )
		pFnShowLevelUpNotification = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_LevelUpNotification.ShowLevelUpNotification" );

	UKFGFxWidget_LevelUpNotification_execShowLevelUpNotification_Parms ShowLevelUpNotification_Parms;

	this->ProcessEvent ( pFnShowLevelUpNotification, &ShowLevelUpNotification_Parms, NULL );
};

// Function KFGame.KFGFxWidget_LevelUpNotification.FinishedSpecialEvent
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_LevelUpNotification::FinishedSpecialEvent ( )
{
	static UFunction* pFnFinishedSpecialEvent = NULL;

	if ( ! pFnFinishedSpecialEvent )
		pFnFinishedSpecialEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_LevelUpNotification.FinishedSpecialEvent" );

	UKFGFxWidget_LevelUpNotification_execFinishedSpecialEvent_Parms FinishedSpecialEvent_Parms;

	this->ProcessEvent ( pFnFinishedSpecialEvent, &FinishedSpecialEvent_Parms, NULL );
};

// Function KFGame.KFGFxWidget_LevelUpNotification.FinishedDailyEvent
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_LevelUpNotification::FinishedDailyEvent ( )
{
	static UFunction* pFnFinishedDailyEvent = NULL;

	if ( ! pFnFinishedDailyEvent )
		pFnFinishedDailyEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_LevelUpNotification.FinishedDailyEvent" );

	UKFGFxWidget_LevelUpNotification_execFinishedDailyEvent_Parms FinishedDailyEvent_Parms;

	this->ProcessEvent ( pFnFinishedDailyEvent, &FinishedDailyEvent_Parms, NULL );
};

// Function KFGame.KFGFxWidget_LevelUpNotification.SetLocalizedText
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_LevelUpNotification::SetLocalizedText ( )
{
	static UFunction* pFnSetLocalizedText = NULL;

	if ( ! pFnSetLocalizedText )
		pFnSetLocalizedText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_LevelUpNotification.SetLocalizedText" );

	UKFGFxWidget_LevelUpNotification_execSetLocalizedText_Parms SetLocalizedText_Parms;

	this->ProcessEvent ( pFnSetLocalizedText, &SetLocalizedText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_LevelUpNotification.InitializeHUD
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_LevelUpNotification::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_LevelUpNotification.InitializeHUD" );

	UKFGFxWidget_LevelUpNotification_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MusicNotification.ShowSongInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MusicNotification::ShowSongInfo ( )
{
	static UFunction* pFnShowSongInfo = NULL;

	if ( ! pFnShowSongInfo )
		pFnShowSongInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MusicNotification.ShowSongInfo" );

	UKFGFxWidget_MusicNotification_execShowSongInfo_Parms ShowSongInfo_Parms;

	this->ProcessEvent ( pFnShowSongInfo, &ShowSongInfo_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MusicNotification.InitializeHUD
// [0x00020000] 
// Parameters infos:

void UKFGFxWidget_MusicNotification::InitializeHUD ( )
{
	static UFunction* pFnInitializeHUD = NULL;

	if ( ! pFnInitializeHUD )
		pFnInitializeHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MusicNotification.InitializeHUD" );

	UKFGFxWidget_MusicNotification_execInitializeHUD_Parms InitializeHUD_Parms;

	this->ProcessEvent ( pFnInitializeHUD, &InitializeHUD_Parms, NULL );
};

// Function KFGame.KFGFxWidget_NonCriticalGameMessage.ShowMessage
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_NonCriticalGameMessage::ShowMessage ( )
{
	static UFunction* pFnShowMessage = NULL;

	if ( ! pFnShowMessage )
		pFnShowMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_NonCriticalGameMessage.ShowMessage" );

	UKFGFxWidget_NonCriticalGameMessage_execShowMessage_Parms ShowMessage_Parms;

	this->ProcessEvent ( pFnShowMessage, &ShowMessage_Parms, NULL );
};

// Function KFGame.KFGFxWidget_RhythmCounter.SetBonusPercentage
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_RhythmCounter::SetBonusPercentage ( )
{
	static UFunction* pFnSetBonusPercentage = NULL;

	if ( ! pFnSetBonusPercentage )
		pFnSetBonusPercentage = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_RhythmCounter.SetBonusPercentage" );

	UKFGFxWidget_RhythmCounter_execSetBonusPercentage_Parms SetBonusPercentage_Parms;

	this->ProcessEvent ( pFnSetBonusPercentage, &SetBonusPercentage_Parms, NULL );
};

// Function KFGame.KFGFxWidget_RhythmCounter.SetCount
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_RhythmCounter::SetCount ( )
{
	static UFunction* pFnSetCount = NULL;

	if ( ! pFnSetCount )
		pFnSetCount = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_RhythmCounter.SetCount" );

	UKFGFxWidget_RhythmCounter_execSetCount_Parms SetCount_Parms;

	this->ProcessEvent ( pFnSetCount, &SetCount_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.SaveAndClose
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::SaveAndClose ( )
{
	static UFunction* pFnSaveAndClose = NULL;

	if ( ! pFnSaveAndClose )
		pFnSaveAndClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.SaveAndClose" );

	UKFGFxMoviePlayer_ScreenSize_execSaveAndClose_Parms SaveAndClose_Parms;

	this->ProcessEvent ( pFnSaveAndClose, &SaveAndClose_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.Callback_Cancel
// [0x00020000] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::Callback_Cancel ( )
{
	static UFunction* pFnCallback_Cancel = NULL;

	if ( ! pFnCallback_Cancel )
		pFnCallback_Cancel = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.Callback_Cancel" );

	UKFGFxMoviePlayer_ScreenSize_execCallback_Cancel_Parms Callback_Cancel_Parms;

	this->ProcessEvent ( pFnCallback_Cancel, &Callback_Cancel_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.Callback_Confirm
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::Callback_Confirm ( )
{
	static UFunction* pFnCallback_Confirm = NULL;

	if ( ! pFnCallback_Confirm )
		pFnCallback_Confirm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.Callback_Confirm" );

	UKFGFxMoviePlayer_ScreenSize_execCallback_Confirm_Parms Callback_Confirm_Parms;

	this->ProcessEvent ( pFnCallback_Confirm, &Callback_Confirm_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.Callback_Shrink
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::Callback_Shrink ( )
{
	static UFunction* pFnCallback_Shrink = NULL;

	if ( ! pFnCallback_Shrink )
		pFnCallback_Shrink = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.Callback_Shrink" );

	UKFGFxMoviePlayer_ScreenSize_execCallback_Shrink_Parms Callback_Shrink_Parms;

	this->ProcessEvent ( pFnCallback_Shrink, &Callback_Shrink_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.Callback_Enlarge
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::Callback_Enlarge ( )
{
	static UFunction* pFnCallback_Enlarge = NULL;

	if ( ! pFnCallback_Enlarge )
		pFnCallback_Enlarge = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.Callback_Enlarge" );

	UKFGFxMoviePlayer_ScreenSize_execCallback_Enlarge_Parms Callback_Enlarge_Parms;

	this->ProcessEvent ( pFnCallback_Enlarge, &Callback_Enlarge_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.NotifyControllerReconnected
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::NotifyControllerReconnected ( )
{
	static UFunction* pFnNotifyControllerReconnected = NULL;

	if ( ! pFnNotifyControllerReconnected )
		pFnNotifyControllerReconnected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.NotifyControllerReconnected" );

	UKFGFxMoviePlayer_ScreenSize_execNotifyControllerReconnected_Parms NotifyControllerReconnected_Parms;

	this->ProcessEvent ( pFnNotifyControllerReconnected, &NotifyControllerReconnected_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.NotifyControllerDisconnected
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::NotifyControllerDisconnected ( )
{
	static UFunction* pFnNotifyControllerDisconnected = NULL;

	if ( ! pFnNotifyControllerDisconnected )
		pFnNotifyControllerDisconnected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.NotifyControllerDisconnected" );

	UKFGFxMoviePlayer_ScreenSize_execNotifyControllerDisconnected_Parms NotifyControllerDisconnected_Parms;

	this->ProcessEvent ( pFnNotifyControllerDisconnected, &NotifyControllerDisconnected_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.GetUsingGamepad
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::GetUsingGamepad ( )
{
	static UFunction* pFnGetUsingGamepad = NULL;

	if ( ! pFnGetUsingGamepad )
		pFnGetUsingGamepad = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.GetUsingGamepad" );

	UKFGFxMoviePlayer_ScreenSize_execGetUsingGamepad_Parms GetUsingGamepad_Parms;

	this->ProcessEvent ( pFnGetUsingGamepad, &GetUsingGamepad_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.OnInputTypeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::OnInputTypeChanged ( )
{
	static UFunction* pFnOnInputTypeChanged = NULL;

	if ( ! pFnOnInputTypeChanged )
		pFnOnInputTypeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.OnInputTypeChanged" );

	UKFGFxMoviePlayer_ScreenSize_execOnInputTypeChanged_Parms OnInputTypeChanged_Parms;

	this->ProcessEvent ( pFnOnInputTypeChanged, &OnInputTypeChanged_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.CheckIfUsingGamepad
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::CheckIfUsingGamepad ( )
{
	static UFunction* pFnCheckIfUsingGamepad = NULL;

	if ( ! pFnCheckIfUsingGamepad )
		pFnCheckIfUsingGamepad = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.CheckIfUsingGamepad" );

	UKFGFxMoviePlayer_ScreenSize_execCheckIfUsingGamepad_Parms CheckIfUsingGamepad_Parms;

	this->ProcessEvent ( pFnCheckIfUsingGamepad, &CheckIfUsingGamepad_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.FilterButtonInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::eventFilterButtonInput ( )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.FilterButtonInput" );

	UKFGFxMoviePlayer_ScreenSize_eventFilterButtonInput_Parms FilterButtonInput_Parms;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.WidgetInitialized" );

	UKFGFxMoviePlayer_ScreenSize_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_ScreenSize.Init
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_ScreenSize::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_ScreenSize.Init" );

	UKFGFxMoviePlayer_ScreenSize_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.CanUseStore
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::CanUseStore ( )
{
	static UFunction* pFnCanUseStore = NULL;

	if ( ! pFnCanUseStore )
		pFnCanUseStore = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.CanUseStore" );

	UKFGFxWidget_MenuBar_execCanUseStore_Parms CanUseStore_Parms;

	this->ProcessEvent ( pFnCanUseStore, &CanUseStore_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.CanUseDoshVault
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::CanUseDoshVault ( )
{
	static UFunction* pFnCanUseDoshVault = NULL;

	if ( ! pFnCanUseDoshVault )
		pFnCanUseDoshVault = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.CanUseDoshVault" );

	UKFGFxWidget_MenuBar_execCanUseDoshVault_Parms CanUseDoshVault_Parms;

	this->ProcessEvent ( pFnCanUseDoshVault, &CanUseDoshVault_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.CanUseInventory
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::CanUseInventory ( )
{
	static UFunction* pFnCanUseInventory = NULL;

	if ( ! pFnCanUseInventory )
		pFnCanUseInventory = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.CanUseInventory" );

	UKFGFxWidget_MenuBar_execCanUseInventory_Parms CanUseInventory_Parms;

	this->ProcessEvent ( pFnCanUseInventory, &CanUseInventory_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.CanUseGearButton
// [0x00022002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::CanUseGearButton ( )
{
	static UFunction* pFnCanUseGearButton = NULL;

	if ( ! pFnCanUseGearButton )
		pFnCanUseGearButton = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.CanUseGearButton" );

	UKFGFxWidget_MenuBar_execCanUseGearButton_Parms CanUseGearButton_Parms;

	this->ProcessEvent ( pFnCanUseGearButton, &CanUseGearButton_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.ShouldStartMenuPulse
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::ShouldStartMenuPulse ( )
{
	static UFunction* pFnShouldStartMenuPulse = NULL;

	if ( ! pFnShouldStartMenuPulse )
		pFnShouldStartMenuPulse = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.ShouldStartMenuPulse" );

	UKFGFxWidget_MenuBar_execShouldStartMenuPulse_Parms ShouldStartMenuPulse_Parms;

	this->ProcessEvent ( pFnShouldStartMenuPulse, &ShouldStartMenuPulse_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.GetHomeButtonName
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::GetHomeButtonName ( )
{
	static UFunction* pFnGetHomeButtonName = NULL;

	if ( ! pFnGetHomeButtonName )
		pFnGetHomeButtonName = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.GetHomeButtonName" );

	UKFGFxWidget_MenuBar_execGetHomeButtonName_Parms GetHomeButtonName_Parms;

	this->ProcessEvent ( pFnGetHomeButtonName, &GetHomeButtonName_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.OnLogoutConfirm
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::OnLogoutConfirm ( )
{
	static UFunction* pFnOnLogoutConfirm = NULL;

	if ( ! pFnOnLogoutConfirm )
		pFnOnLogoutConfirm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.OnLogoutConfirm" );

	UKFGFxWidget_MenuBar_execOnLogoutConfirm_Parms OnLogoutConfirm_Parms;

	this->ProcessEvent ( pFnOnLogoutConfirm, &OnLogoutConfirm_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.OpenLogoutPopup
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::OpenLogoutPopup ( )
{
	static UFunction* pFnOpenLogoutPopup = NULL;

	if ( ! pFnOpenLogoutPopup )
		pFnOpenLogoutPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.OpenLogoutPopup" );

	UKFGFxWidget_MenuBar_execOpenLogoutPopup_Parms OpenLogoutPopup_Parms;

	this->ProcessEvent ( pFnOpenLogoutPopup, &OpenLogoutPopup_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.OnQuitConfirm
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::OnQuitConfirm ( )
{
	static UFunction* pFnOnQuitConfirm = NULL;

	if ( ! pFnOnQuitConfirm )
		pFnOnQuitConfirm = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.OnQuitConfirm" );

	UKFGFxWidget_MenuBar_execOnQuitConfirm_Parms OnQuitConfirm_Parms;

	this->ProcessEvent ( pFnOnQuitConfirm, &OnQuitConfirm_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.OpenQuitPopUp
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::OpenQuitPopUp ( )
{
	static UFunction* pFnOpenQuitPopUp = NULL;

	if ( ! pFnOpenQuitPopUp )
		pFnOpenQuitPopUp = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.OpenQuitPopUp" );

	UKFGFxWidget_MenuBar_execOpenQuitPopUp_Parms OpenQuitPopUp_Parms;

	this->ProcessEvent ( pFnOpenQuitPopUp, &OpenQuitPopUp_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.CheckGameFullyInstalled
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::CheckGameFullyInstalled ( )
{
	static UFunction* pFnCheckGameFullyInstalled = NULL;

	if ( ! pFnCheckGameFullyInstalled )
		pFnCheckGameFullyInstalled = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.CheckGameFullyInstalled" );

	UKFGFxWidget_MenuBar_execCheckGameFullyInstalled_Parms CheckGameFullyInstalled_Parms;

	this->ProcessEvent ( pFnCheckGameFullyInstalled, &CheckGameFullyInstalled_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.SetGearMenuEnabled
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::SetGearMenuEnabled ( )
{
	static UFunction* pFnSetGearMenuEnabled = NULL;

	if ( ! pFnSetGearMenuEnabled )
		pFnSetGearMenuEnabled = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.SetGearMenuEnabled" );

	UKFGFxWidget_MenuBar_execSetGearMenuEnabled_Parms SetGearMenuEnabled_Parms;

	this->ProcessEvent ( pFnSetGearMenuEnabled, &SetGearMenuEnabled_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.UpdateGearButtonState
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::UpdateGearButtonState ( )
{
	static UFunction* pFnUpdateGearButtonState = NULL;

	if ( ! pFnUpdateGearButtonState )
		pFnUpdateGearButtonState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.UpdateGearButtonState" );

	UKFGFxWidget_MenuBar_execUpdateGearButtonState_Parms UpdateGearButtonState_Parms;

	this->ProcessEvent ( pFnUpdateGearButtonState, &UpdateGearButtonState_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.UpdateInventoryButtonState
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::UpdateInventoryButtonState ( )
{
	static UFunction* pFnUpdateInventoryButtonState = NULL;

	if ( ! pFnUpdateInventoryButtonState )
		pFnUpdateInventoryButtonState = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.UpdateInventoryButtonState" );

	UKFGFxWidget_MenuBar_execUpdateInventoryButtonState_Parms UpdateInventoryButtonState_Parms;

	this->ProcessEvent ( pFnUpdateInventoryButtonState, &UpdateInventoryButtonState_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.HandleButtonSpecialCase
// [0x00420002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::HandleButtonSpecialCase ( )
{
	static UFunction* pFnHandleButtonSpecialCase = NULL;

	if ( ! pFnHandleButtonSpecialCase )
		pFnHandleButtonSpecialCase = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.HandleButtonSpecialCase" );

	UKFGFxWidget_MenuBar_execHandleButtonSpecialCase_Parms HandleButtonSpecialCase_Parms;

	this->ProcessEvent ( pFnHandleButtonSpecialCase, &HandleButtonSpecialCase_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.UpdateMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::UpdateMenu ( )
{
	static UFunction* pFnUpdateMenu = NULL;

	if ( ! pFnUpdateMenu )
		pFnUpdateMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.UpdateMenu" );

	UKFGFxWidget_MenuBar_execUpdateMenu_Parms UpdateMenu_Parms;

	this->ProcessEvent ( pFnUpdateMenu, &UpdateMenu_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.UnblockBumper
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::UnblockBumper ( )
{
	static UFunction* pFnUnblockBumper = NULL;

	if ( ! pFnUnblockBumper )
		pFnUnblockBumper = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.UnblockBumper" );

	UKFGFxWidget_MenuBar_execUnblockBumper_Parms UnblockBumper_Parms;

	this->ProcessEvent ( pFnUnblockBumper, &UnblockBumper_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.CalloutButtonBumperPress
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::CalloutButtonBumperPress ( )
{
	static UFunction* pFnCalloutButtonBumperPress = NULL;

	if ( ! pFnCalloutButtonBumperPress )
		pFnCalloutButtonBumperPress = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.CalloutButtonBumperPress" );

	UKFGFxWidget_MenuBar_execCalloutButtonBumperPress_Parms CalloutButtonBumperPress_Parms;

	this->ProcessEvent ( pFnCalloutButtonBumperPress, &CalloutButtonBumperPress_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBar.InitializeCurrentMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_MenuBar::InitializeCurrentMenu ( )
{
	static UFunction* pFnInitializeCurrentMenu = NULL;

	if ( ! pFnInitializeCurrentMenu )
		pFnInitializeCurrentMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBar.InitializeCurrentMenu" );

	UKFGFxWidget_MenuBar_execInitializeCurrentMenu_Parms InitializeCurrentMenu_Parms;

	this->ProcessEvent ( pFnInitializeCurrentMenu, &InitializeCurrentMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Selection.Callback_MenuSelected
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Selection::Callback_MenuSelected ( )
{
	static UFunction* pFnCallback_MenuSelected = NULL;

	if ( ! pFnCallback_MenuSelected )
		pFnCallback_MenuSelected = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Selection.Callback_MenuSelected" );

	UKFGFxOptionsMenu_Selection_execCallback_MenuSelected_Parms Callback_MenuSelected_Parms;

	this->ProcessEvent ( pFnCallback_MenuSelected, &Callback_MenuSelected_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Selection.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Selection::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Selection.InitializeMenu" );

	UKFGFxOptionsMenu_Selection_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.ResetAudioOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::ResetAudioOptions ( )
{
	static UFunction* pFnResetAudioOptions = NULL;

	if ( ! pFnResetAudioOptions )
		pFnResetAudioOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.ResetAudioOptions" );

	UKFGFxOptionsMenu_Audio_execResetAudioOptions_Parms ResetAudioOptions_Parms;

	this->ProcessEvent ( pFnResetAudioOptions, &ResetAudioOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.CallBack_ResetAudioOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::CallBack_ResetAudioOptions ( )
{
	static UFunction* pFnCallBack_ResetAudioOptions = NULL;

	if ( ! pFnCallBack_ResetAudioOptions )
		pFnCallBack_ResetAudioOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.CallBack_ResetAudioOptions" );

	UKFGFxOptionsMenu_Audio_execCallBack_ResetAudioOptions_Parms CallBack_ResetAudioOptions_Parms;

	this->ProcessEvent ( pFnCallBack_ResetAudioOptions, &CallBack_ResetAudioOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_VOIPVolumeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_VOIPVolumeChanged ( )
{
	static UFunction* pFnCallback_VOIPVolumeChanged = NULL;

	if ( ! pFnCallback_VOIPVolumeChanged )
		pFnCallback_VOIPVolumeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_VOIPVolumeChanged" );

	UKFGFxOptionsMenu_Audio_execCallback_VOIPVolumeChanged_Parms Callback_VOIPVolumeChanged_Parms;

	this->ProcessEvent ( pFnCallback_VOIPVolumeChanged, &Callback_VOIPVolumeChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_SFxVolumeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_SFxVolumeChanged ( )
{
	static UFunction* pFnCallback_SFxVolumeChanged = NULL;

	if ( ! pFnCallback_SFxVolumeChanged )
		pFnCallback_SFxVolumeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_SFxVolumeChanged" );

	UKFGFxOptionsMenu_Audio_execCallback_SFxVolumeChanged_Parms Callback_SFxVolumeChanged_Parms;

	this->ProcessEvent ( pFnCallback_SFxVolumeChanged, &Callback_SFxVolumeChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_MusicVolumeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_MusicVolumeChanged ( )
{
	static UFunction* pFnCallback_MusicVolumeChanged = NULL;

	if ( ! pFnCallback_MusicVolumeChanged )
		pFnCallback_MusicVolumeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_MusicVolumeChanged" );

	UKFGFxOptionsMenu_Audio_execCallback_MusicVolumeChanged_Parms Callback_MusicVolumeChanged_Parms;

	this->ProcessEvent ( pFnCallback_MusicVolumeChanged, &Callback_MusicVolumeChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_DialogVolumeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_DialogVolumeChanged ( )
{
	static UFunction* pFnCallback_DialogVolumeChanged = NULL;

	if ( ! pFnCallback_DialogVolumeChanged )
		pFnCallback_DialogVolumeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_DialogVolumeChanged" );

	UKFGFxOptionsMenu_Audio_execCallback_DialogVolumeChanged_Parms Callback_DialogVolumeChanged_Parms;

	this->ProcessEvent ( pFnCallback_DialogVolumeChanged, &Callback_DialogVolumeChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_MasterVolumeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_MasterVolumeChanged ( )
{
	static UFunction* pFnCallback_MasterVolumeChanged = NULL;

	if ( ! pFnCallback_MasterVolumeChanged )
		pFnCallback_MasterVolumeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_MasterVolumeChanged" );

	UKFGFxOptionsMenu_Audio_execCallback_MasterVolumeChanged_Parms Callback_MasterVolumeChanged_Parms;

	this->ProcessEvent ( pFnCallback_MasterVolumeChanged, &Callback_MasterVolumeChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_ConfigureControllerSound
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_ConfigureControllerSound ( )
{
	static UFunction* pFnCallback_ConfigureControllerSound = NULL;

	if ( ! pFnCallback_ConfigureControllerSound )
		pFnCallback_ConfigureControllerSound = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_ConfigureControllerSound" );

	UKFGFxOptionsMenu_Audio_execCallback_ConfigureControllerSound_Parms Callback_ConfigureControllerSound_Parms;

	this->ProcessEvent ( pFnCallback_ConfigureControllerSound, &Callback_ConfigureControllerSound_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_ConfigureVocals
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_ConfigureVocals ( )
{
	static UFunction* pFnCallback_ConfigureVocals = NULL;

	if ( ! pFnCallback_ConfigureVocals )
		pFnCallback_ConfigureVocals = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_ConfigureVocals" );

	UKFGFxOptionsMenu_Audio_execCallback_ConfigureVocals_Parms Callback_ConfigureVocals_Parms;

	this->ProcessEvent ( pFnCallback_ConfigureVocals, &Callback_ConfigureVocals_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_PushToTalkChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_PushToTalkChanged ( )
{
	static UFunction* pFnCallback_PushToTalkChanged = NULL;

	if ( ! pFnCallback_PushToTalkChanged )
		pFnCallback_PushToTalkChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_PushToTalkChanged" );

	UKFGFxOptionsMenu_Audio_execCallback_PushToTalkChanged_Parms Callback_PushToTalkChanged_Parms;

	this->ProcessEvent ( pFnCallback_PushToTalkChanged, &Callback_PushToTalkChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_ConfigureBattleChatter
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_ConfigureBattleChatter ( )
{
	static UFunction* pFnCallback_ConfigureBattleChatter = NULL;

	if ( ! pFnCallback_ConfigureBattleChatter )
		pFnCallback_ConfigureBattleChatter = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_ConfigureBattleChatter" );

	UKFGFxOptionsMenu_Audio_execCallback_ConfigureBattleChatter_Parms Callback_ConfigureBattleChatter_Parms;

	this->ProcessEvent ( pFnCallback_ConfigureBattleChatter, &Callback_ConfigureBattleChatter_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_ConfigureMicPress
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_ConfigureMicPress ( )
{
	static UFunction* pFnCallback_ConfigureMicPress = NULL;

	if ( ! pFnCallback_ConfigureMicPress )
		pFnCallback_ConfigureMicPress = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_ConfigureMicPress" );

	UKFGFxOptionsMenu_Audio_execCallback_ConfigureMicPress_Parms Callback_ConfigureMicPress_Parms;

	this->ProcessEvent ( pFnCallback_ConfigureMicPress, &Callback_ConfigureMicPress_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_CloseMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_CloseMenu ( )
{
	static UFunction* pFnCallback_CloseMenu = NULL;

	if ( ! pFnCallback_CloseMenu )
		pFnCallback_CloseMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_CloseMenu" );

	UKFGFxOptionsMenu_Audio_execCallback_CloseMenu_Parms Callback_CloseMenu_Parms;

	this->ProcessEvent ( pFnCallback_CloseMenu, &Callback_CloseMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.Callback_ScreenSizePress
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::Callback_ScreenSizePress ( )
{
	static UFunction* pFnCallback_ScreenSizePress = NULL;

	if ( ! pFnCallback_ScreenSizePress )
		pFnCallback_ScreenSizePress = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.Callback_ScreenSizePress" );

	UKFGFxOptionsMenu_Audio_execCallback_ScreenSizePress_Parms Callback_ScreenSizePress_Parms;

	this->ProcessEvent ( pFnCallback_ScreenSizePress, &Callback_ScreenSizePress_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.SaveConfigValues
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::SaveConfigValues ( )
{
	static UFunction* pFnSaveConfigValues = NULL;

	if ( ! pFnSaveConfigValues )
		pFnSaveConfigValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.SaveConfigValues" );

	UKFGFxOptionsMenu_Audio_execSaveConfigValues_Parms SaveConfigValues_Parms;

	this->ProcessEvent ( pFnSaveConfigValues, &SaveConfigValues_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.OnClose
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxOptionsMenu_Audio::eventOnClose ( )
{
	static UFunction* pFnOnClose = NULL;

	if ( ! pFnOnClose )
		pFnOnClose = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.OnClose" );

	UKFGFxOptionsMenu_Audio_eventOnClose_Parms OnClose_Parms;

	this->ProcessEvent ( pFnOnClose, &OnClose_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.SetVoIPMinMax
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::SetVoIPMinMax ( )
{
	static UFunction* pFnSetVoIPMinMax = NULL;

	if ( ! pFnSetVoIPMinMax )
		pFnSetVoIPMinMax = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.SetVoIPMinMax" );

	UKFGFxOptionsMenu_Audio_execSetVoIPMinMax_Parms SetVoIPMinMax_Parms;

	this->ProcessEvent ( pFnSetVoIPMinMax, &SetVoIPMinMax_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.InitValues
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::InitValues ( )
{
	static UFunction* pFnInitValues = NULL;

	if ( ! pFnInitValues )
		pFnInitValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.InitValues" );

	UKFGFxOptionsMenu_Audio_execInitValues_Parms InitValues_Parms;

	this->ProcessEvent ( pFnInitValues, &InitValues_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.ConditionallyHideDurangoButton
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::ConditionallyHideDurangoButton ( )
{
	static UFunction* pFnConditionallyHideDurangoButton = NULL;

	if ( ! pFnConditionallyHideDurangoButton )
		pFnConditionallyHideDurangoButton = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.ConditionallyHideDurangoButton" );

	UKFGFxOptionsMenu_Audio_execConditionallyHideDurangoButton_Parms ConditionallyHideDurangoButton_Parms;

	this->ProcessEvent ( pFnConditionallyHideDurangoButton, &ConditionallyHideDurangoButton_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.LocalizeText" );

	UKFGFxOptionsMenu_Audio_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Audio.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_Audio::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Audio.InitializeMenu" );

	UKFGFxOptionsMenu_Audio_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.ResetGameOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::ResetGameOptions ( )
{
	static UFunction* pFnResetGameOptions = NULL;

	if ( ! pFnResetGameOptions )
		pFnResetGameOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.ResetGameOptions" );

	UKFGFxOptionsMenu_GameSettings_execResetGameOptions_Parms ResetGameOptions_Parms;

	this->ProcessEvent ( pFnResetGameOptions, &ResetGameOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.CallBack_ResetGameOptions
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::CallBack_ResetGameOptions ( )
{
	static UFunction* pFnCallBack_ResetGameOptions = NULL;

	if ( ! pFnCallBack_ResetGameOptions )
		pFnCallBack_ResetGameOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.CallBack_ResetGameOptions" );

	UKFGFxOptionsMenu_GameSettings_execCallBack_ResetGameOptions_Parms CallBack_ResetGameOptions_Parms;

	this->ProcessEvent ( pFnCallBack_ResetGameOptions, &CallBack_ResetGameOptions_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_ReduceHighPitchNoiseChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_ReduceHighPitchNoiseChanged ( )
{
	static UFunction* pFnCallback_ReduceHighPitchNoiseChanged = NULL;

	if ( ! pFnCallback_ReduceHighPitchNoiseChanged )
		pFnCallback_ReduceHighPitchNoiseChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_ReduceHighPitchNoiseChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_ReduceHighPitchNoiseChanged_Parms Callback_ReduceHighPitchNoiseChanged_Parms;

	this->ProcessEvent ( pFnCallback_ReduceHighPitchNoiseChanged, &Callback_ReduceHighPitchNoiseChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_AutoTurnOffChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_AutoTurnOffChanged ( )
{
	static UFunction* pFnCallback_AutoTurnOffChanged = NULL;

	if ( ! pFnCallback_AutoTurnOffChanged )
		pFnCallback_AutoTurnOffChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_AutoTurnOffChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_AutoTurnOffChanged_Parms Callback_AutoTurnOffChanged_Parms;

	this->ProcessEvent ( pFnCallback_AutoTurnOffChanged, &Callback_AutoTurnOffChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_bShowWelderInInvChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_bShowWelderInInvChanged ( )
{
	static UFunction* pFnCallback_bShowWelderInInvChanged = NULL;

	if ( ! pFnCallback_bShowWelderInInvChanged )
		pFnCallback_bShowWelderInInvChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_bShowWelderInInvChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_bShowWelderInInvChanged_Parms Callback_bShowWelderInInvChanged_Parms;

	this->ProcessEvent ( pFnCallback_bShowWelderInInvChanged, &Callback_bShowWelderInInvChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_AntiMotionSicknessChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_AntiMotionSicknessChanged ( )
{
	static UFunction* pFnCallback_AntiMotionSicknessChanged = NULL;

	if ( ! pFnCallback_AntiMotionSicknessChanged )
		pFnCallback_AntiMotionSicknessChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_AntiMotionSicknessChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_AntiMotionSicknessChanged_Parms Callback_AntiMotionSicknessChanged_Parms;

	this->ProcessEvent ( pFnCallback_AntiMotionSicknessChanged, &Callback_AntiMotionSicknessChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_HideBossHealthBarChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_HideBossHealthBarChanged ( )
{
	static UFunction* pFnCallback_HideBossHealthBarChanged = NULL;

	if ( ! pFnCallback_HideBossHealthBarChanged )
		pFnCallback_HideBossHealthBarChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_HideBossHealthBarChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_HideBossHealthBarChanged_Parms Callback_HideBossHealthBarChanged_Parms;

	this->ProcessEvent ( pFnCallback_HideBossHealthBarChanged, &Callback_HideBossHealthBarChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_UseAltAimOnDualsChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_UseAltAimOnDualsChanged ( )
{
	static UFunction* pFnCallback_UseAltAimOnDualsChanged = NULL;

	if ( ! pFnCallback_UseAltAimOnDualsChanged )
		pFnCallback_UseAltAimOnDualsChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_UseAltAimOnDualsChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_UseAltAimOnDualsChanged_Parms Callback_UseAltAimOnDualsChanged_Parms;

	this->ProcessEvent ( pFnCallback_UseAltAimOnDualsChanged, &Callback_UseAltAimOnDualsChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_GoreChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_GoreChanged ( )
{
	static UFunction* pFnCallback_GoreChanged = NULL;

	if ( ! pFnCallback_GoreChanged )
		pFnCallback_GoreChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_GoreChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_GoreChanged_Parms Callback_GoreChanged_Parms;

	this->ProcessEvent ( pFnCallback_GoreChanged, &Callback_GoreChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_KillTickerChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_KillTickerChanged ( )
{
	static UFunction* pFnCallback_KillTickerChanged = NULL;

	if ( ! pFnCallback_KillTickerChanged )
		pFnCallback_KillTickerChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_KillTickerChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_KillTickerChanged_Parms Callback_KillTickerChanged_Parms;

	this->ProcessEvent ( pFnCallback_KillTickerChanged, &Callback_KillTickerChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_DisableRemoteHeadshotEffects
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_DisableRemoteHeadshotEffects ( )
{
	static UFunction* pFnCallback_DisableRemoteHeadshotEffects = NULL;

	if ( ! pFnCallback_DisableRemoteHeadshotEffects )
		pFnCallback_DisableRemoteHeadshotEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_DisableRemoteHeadshotEffects" );

	UKFGFxOptionsMenu_GameSettings_execCallback_DisableRemoteHeadshotEffects_Parms Callback_DisableRemoteHeadshotEffects_Parms;

	this->ProcessEvent ( pFnCallback_DisableRemoteHeadshotEffects, &Callback_DisableRemoteHeadshotEffects_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_DisableAutoUpgradeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_DisableAutoUpgradeChanged ( )
{
	static UFunction* pFnCallback_DisableAutoUpgradeChanged = NULL;

	if ( ! pFnCallback_DisableAutoUpgradeChanged )
		pFnCallback_DisableAutoUpgradeChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_DisableAutoUpgradeChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_DisableAutoUpgradeChanged_Parms Callback_DisableAutoUpgradeChanged_Parms;

	this->ProcessEvent ( pFnCallback_DisableAutoUpgradeChanged, &Callback_DisableAutoUpgradeChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_WeaponSelectChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_WeaponSelectChanged ( )
{
	static UFunction* pFnCallback_WeaponSelectChanged = NULL;

	if ( ! pFnCallback_WeaponSelectChanged )
		pFnCallback_WeaponSelectChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_WeaponSelectChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_WeaponSelectChanged_Parms Callback_WeaponSelectChanged_Parms;

	this->ProcessEvent ( pFnCallback_WeaponSelectChanged, &Callback_WeaponSelectChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_FriendlyHudChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_FriendlyHudChanged ( )
{
	static UFunction* pFnCallback_FriendlyHudChanged = NULL;

	if ( ! pFnCallback_FriendlyHudChanged )
		pFnCallback_FriendlyHudChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_FriendlyHudChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_FriendlyHudChanged_Parms Callback_FriendlyHudChanged_Parms;

	this->ProcessEvent ( pFnCallback_FriendlyHudChanged, &Callback_FriendlyHudChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_FOVChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_FOVChanged ( )
{
	static UFunction* pFnCallback_FOVChanged = NULL;

	if ( ! pFnCallback_FOVChanged )
		pFnCallback_FOVChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_FOVChanged" );

	UKFGFxOptionsMenu_GameSettings_execCallback_FOVChanged_Parms Callback_FOVChanged_Parms;

	this->ProcessEvent ( pFnCallback_FOVChanged, &Callback_FOVChanged_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_ToggleCrosshair
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_ToggleCrosshair ( )
{
	static UFunction* pFnCallback_ToggleCrosshair = NULL;

	if ( ! pFnCallback_ToggleCrosshair )
		pFnCallback_ToggleCrosshair = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_ToggleCrosshair" );

	UKFGFxOptionsMenu_GameSettings_execCallback_ToggleCrosshair_Parms Callback_ToggleCrosshair_Parms;

	this->ProcessEvent ( pFnCallback_ToggleCrosshair, &Callback_ToggleCrosshair_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_ToggleMixer
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_ToggleMixer ( )
{
	static UFunction* pFnCallback_ToggleMixer = NULL;

	if ( ! pFnCallback_ToggleMixer )
		pFnCallback_ToggleMixer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_ToggleMixer" );

	UKFGFxOptionsMenu_GameSettings_execCallback_ToggleMixer_Parms Callback_ToggleMixer_Parms;

	this->ProcessEvent ( pFnCallback_ToggleMixer, &Callback_ToggleMixer_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_CloseMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::Callback_CloseMenu ( )
{
	static UFunction* pFnCallback_CloseMenu = NULL;

	if ( ! pFnCallback_CloseMenu )
		pFnCallback_CloseMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.Callback_CloseMenu" );

	UKFGFxOptionsMenu_GameSettings_execCallback_CloseMenu_Parms Callback_CloseMenu_Parms;

	this->ProcessEvent ( pFnCallback_CloseMenu, &Callback_CloseMenu_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.SetFriendlyHudMinMax
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::SetFriendlyHudMinMax ( )
{
	static UFunction* pFnSetFriendlyHudMinMax = NULL;

	if ( ! pFnSetFriendlyHudMinMax )
		pFnSetFriendlyHudMinMax = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.SetFriendlyHudMinMax" );

	UKFGFxOptionsMenu_GameSettings_execSetFriendlyHudMinMax_Parms SetFriendlyHudMinMax_Parms;

	this->ProcessEvent ( pFnSetFriendlyHudMinMax, &SetFriendlyHudMinMax_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.SetFOVMinMax
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::SetFOVMinMax ( )
{
	static UFunction* pFnSetFOVMinMax = NULL;

	if ( ! pFnSetFOVMinMax )
		pFnSetFOVMinMax = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.SetFOVMinMax" );

	UKFGFxOptionsMenu_GameSettings_execSetFOVMinMax_Parms SetFOVMinMax_Parms;

	this->ProcessEvent ( pFnSetFOVMinMax, &SetFOVMinMax_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.InitValues
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::InitValues ( )
{
	static UFunction* pFnInitValues = NULL;

	if ( ! pFnInitValues )
		pFnInitValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.InitValues" );

	UKFGFxOptionsMenu_GameSettings_execInitValues_Parms InitValues_Parms;

	this->ProcessEvent ( pFnInitValues, &InitValues_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.LocalizeText" );

	UKFGFxOptionsMenu_GameSettings_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_GameSettings.InitializeMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxOptionsMenu_GameSettings::InitializeMenu ( )
{
	static UFunction* pFnInitializeMenu = NULL;

	if ( ! pFnInitializeMenu )
		pFnInitializeMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_GameSettings.InitializeMenu" );

	UKFGFxOptionsMenu_GameSettings_execInitializeMenu_Parms InitializeMenu_Parms;

	this->ProcessEvent ( pFnInitializeMenu, &InitializeMenu_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.SendMyOptions
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::SendMyOptions ( )
{
	static UFunction* pFnSendMyOptions = NULL;

	if ( ! pFnSendMyOptions )
		pFnSendMyOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.SendMyOptions" );

	UKFGFxWidget_PartyMainMenu_execSendMyOptions_Parms SendMyOptions_Parms;

	this->ProcessEvent ( pFnSendMyOptions, &SendMyOptions_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.AddFriend
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::AddFriend ( )
{
	static UFunction* pFnAddFriend = NULL;

	if ( ! pFnAddFriend )
		pFnAddFriend = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.AddFriend" );

	UKFGFxWidget_PartyMainMenu_execAddFriend_Parms AddFriend_Parms;

	this->ProcessEvent ( pFnAddFriend, &AddFriend_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.ViewProfile
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::ViewProfile ( )
{
	static UFunction* pFnViewProfile = NULL;

	if ( ! pFnViewProfile )
		pFnViewProfile = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.ViewProfile" );

	UKFGFxWidget_PartyMainMenu_execViewProfile_Parms ViewProfile_Parms;

	this->ProcessEvent ( pFnViewProfile, &ViewProfile_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.ToggelMuteOnPlayer
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::ToggelMuteOnPlayer ( )
{
	static UFunction* pFnToggelMuteOnPlayer = NULL;

	if ( ! pFnToggelMuteOnPlayer )
		pFnToggelMuteOnPlayer = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.ToggelMuteOnPlayer" );

	UKFGFxWidget_PartyMainMenu_execToggelMuteOnPlayer_Parms ToggelMuteOnPlayer_Parms;

	this->ProcessEvent ( pFnToggelMuteOnPlayer, &ToggelMuteOnPlayer_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.UpdateSearching
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::UpdateSearching ( )
{
	static UFunction* pFnUpdateSearching = NULL;

	if ( ! pFnUpdateSearching )
		pFnUpdateSearching = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.UpdateSearching" );

	UKFGFxWidget_PartyMainMenu_execUpdateSearching_Parms UpdateSearching_Parms;

	this->ProcessEvent ( pFnUpdateSearching, &UpdateSearching_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.PrintoutDebugMemberSlotInfo
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::PrintoutDebugMemberSlotInfo ( )
{
	static UFunction* pFnPrintoutDebugMemberSlotInfo = NULL;

	if ( ! pFnPrintoutDebugMemberSlotInfo )
		pFnPrintoutDebugMemberSlotInfo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.PrintoutDebugMemberSlotInfo" );

	UKFGFxWidget_PartyMainMenu_execPrintoutDebugMemberSlotInfo_Parms PrintoutDebugMemberSlotInfo_Parms;

	this->ProcessEvent ( pFnPrintoutDebugMemberSlotInfo, &PrintoutDebugMemberSlotInfo_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.UpdatePerkInfoForPlayerID
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::UpdatePerkInfoForPlayerID ( )
{
	static UFunction* pFnUpdatePerkInfoForPlayerID = NULL;

	if ( ! pFnUpdatePerkInfoForPlayerID )
		pFnUpdatePerkInfoForPlayerID = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.UpdatePerkInfoForPlayerID" );

	UKFGFxWidget_PartyMainMenu_execUpdatePerkInfoForPlayerID_Parms UpdatePerkInfoForPlayerID_Parms;

	this->ProcessEvent ( pFnUpdatePerkInfoForPlayerID, &UpdatePerkInfoForPlayerID_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.UpdatePerks
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::UpdatePerks ( )
{
	static UFunction* pFnUpdatePerks = NULL;

	if ( ! pFnUpdatePerks )
		pFnUpdatePerks = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.UpdatePerks" );

	UKFGFxWidget_PartyMainMenu_execUpdatePerks_Parms UpdatePerks_Parms;

	this->ProcessEvent ( pFnUpdatePerks, &UpdatePerks_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.RefreshSlot
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::RefreshSlot ( )
{
	static UFunction* pFnRefreshSlot = NULL;

	if ( ! pFnRefreshSlot )
		pFnRefreshSlot = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.RefreshSlot" );

	UKFGFxWidget_PartyMainMenu_execRefreshSlot_Parms RefreshSlot_Parms;

	this->ProcessEvent ( pFnRefreshSlot, &RefreshSlot_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.HandleLeaderChange
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::HandleLeaderChange ( )
{
	static UFunction* pFnHandleLeaderChange = NULL;

	if ( ! pFnHandleLeaderChange )
		pFnHandleLeaderChange = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.HandleLeaderChange" );

	UKFGFxWidget_PartyMainMenu_execHandleLeaderChange_Parms HandleLeaderChange_Parms;

	this->ProcessEvent ( pFnHandleLeaderChange, &HandleLeaderChange_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.RefreshParty
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::RefreshParty ( )
{
	static UFunction* pFnRefreshParty = NULL;

	if ( ! pFnRefreshParty )
		pFnRefreshParty = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.RefreshParty" );

	UKFGFxWidget_PartyMainMenu_execRefreshParty_Parms RefreshParty_Parms;

	this->ProcessEvent ( pFnRefreshParty, &RefreshParty_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.SetSearchingText
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::SetSearchingText ( )
{
	static UFunction* pFnSetSearchingText = NULL;

	if ( ! pFnSetSearchingText )
		pFnSetSearchingText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.SetSearchingText" );

	UKFGFxWidget_PartyMainMenu_execSetSearchingText_Parms SetSearchingText_Parms;

	this->ProcessEvent ( pFnSetSearchingText, &SetSearchingText_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.SendSearching
// [0x00820002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::SendSearching ( )
{
	static UFunction* pFnSendSearching = NULL;

	if ( ! pFnSendSearching )
		pFnSendSearching = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.SendSearching" );

	UKFGFxWidget_PartyMainMenu_execSendSearching_Parms SendSearching_Parms;

	this->ProcessEvent ( pFnSendSearching, &SendSearching_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.SoloGameMenuOpened
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::eventSoloGameMenuOpened ( )
{
	static UFunction* pFnSoloGameMenuOpened = NULL;

	if ( ! pFnSoloGameMenuOpened )
		pFnSoloGameMenuOpened = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.SoloGameMenuOpened" );

	UKFGFxWidget_PartyMainMenu_eventSoloGameMenuOpened_Parms SoloGameMenuOpened_Parms;

	this->ProcessEvent ( pFnSoloGameMenuOpened, &SoloGameMenuOpened_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.InitializeWidget
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::InitializeWidget ( )
{
	static UFunction* pFnInitializeWidget = NULL;

	if ( ! pFnInitializeWidget )
		pFnInitializeWidget = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.InitializeWidget" );

	UKFGFxWidget_PartyMainMenu_execInitializeWidget_Parms InitializeWidget_Parms;

	this->ProcessEvent ( pFnInitializeWidget, &InitializeWidget_Parms, NULL );
};

// Function KFGame.KFGFxWidget_PartyMainMenu.OneSecondLoop
// [0x00020002] 
// Parameters infos:

void UKFGFxWidget_PartyMainMenu::OneSecondLoop ( )
{
	static UFunction* pFnOneSecondLoop = NULL;

	if ( ! pFnOneSecondLoop )
		pFnOneSecondLoop = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_PartyMainMenu.OneSecondLoop" );

	UKFGFxWidget_PartyMainMenu_execOneSecondLoop_Parms OneSecondLoop_Parms;

	this->ProcessEvent ( pFnOneSecondLoop, &OneSecondLoop_Parms, NULL );
};

// Function KFGame.KFGFxOptionsMenu_Graphics_DX10.SetAmbientOcclusionOptions
// [0x00420002] 
// Parameters infos:

void UKFGFxOptionsMenu_Graphics_DX10::SetAmbientOcclusionOptions ( )
{
	static UFunction* pFnSetAmbientOcclusionOptions = NULL;

	if ( ! pFnSetAmbientOcclusionOptions )
		pFnSetAmbientOcclusionOptions = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxOptionsMenu_Graphics_DX10.SetAmbientOcclusionOptions" );

	UKFGFxOptionsMenu_Graphics_DX10_execSetAmbientOcclusionOptions_Parms SetAmbientOcclusionOptions_Parms;

	this->ProcessEvent ( pFnSetAmbientOcclusionOptions, &SetAmbientOcclusionOptions_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Gamma.Callback_DefaultGamma
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Gamma::Callback_DefaultGamma ( )
{
	static UFunction* pFnCallback_DefaultGamma = NULL;

	if ( ! pFnCallback_DefaultGamma )
		pFnCallback_DefaultGamma = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Gamma.Callback_DefaultGamma" );

	UKFGFxPopup_Gamma_execCallback_DefaultGamma_Parms Callback_DefaultGamma_Parms;

	this->ProcessEvent ( pFnCallback_DefaultGamma, &Callback_DefaultGamma_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Gamma.Callback_GammaChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Gamma::Callback_GammaChanged ( )
{
	static UFunction* pFnCallback_GammaChanged = NULL;

	if ( ! pFnCallback_GammaChanged )
		pFnCallback_GammaChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Gamma.Callback_GammaChanged" );

	UKFGFxPopup_Gamma_execCallback_GammaChanged_Parms Callback_GammaChanged_Parms;

	this->ProcessEvent ( pFnCallback_GammaChanged, &Callback_GammaChanged_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Gamma.Callback_ClosedPopup
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Gamma::Callback_ClosedPopup ( )
{
	static UFunction* pFnCallback_ClosedPopup = NULL;

	if ( ! pFnCallback_ClosedPopup )
		pFnCallback_ClosedPopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Gamma.Callback_ClosedPopup" );

	UKFGFxPopup_Gamma_execCallback_ClosedPopup_Parms Callback_ClosedPopup_Parms;

	this->ProcessEvent ( pFnCallback_ClosedPopup, &Callback_ClosedPopup_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Gamma.ResetGamma
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Gamma::ResetGamma ( )
{
	static UFunction* pFnResetGamma = NULL;

	if ( ! pFnResetGamma )
		pFnResetGamma = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Gamma.ResetGamma" );

	UKFGFxPopup_Gamma_execResetGamma_Parms ResetGamma_Parms;

	this->ProcessEvent ( pFnResetGamma, &ResetGamma_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Gamma.SetGamma
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Gamma::SetGamma ( )
{
	static UFunction* pFnSetGamma = NULL;

	if ( ! pFnSetGamma )
		pFnSetGamma = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Gamma.SetGamma" );

	UKFGFxPopup_Gamma_execSetGamma_Parms SetGamma_Parms;

	this->ProcessEvent ( pFnSetGamma, &SetGamma_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Gamma.OnClosed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxPopup_Gamma::eventOnClosed ( )
{
	static UFunction* pFnOnClosed = NULL;

	if ( ! pFnOnClosed )
		pFnOnClosed = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Gamma.OnClosed" );

	UKFGFxPopup_Gamma_eventOnClosed_Parms OnClosed_Parms;

	this->ProcessEvent ( pFnOnClosed, &OnClosed_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Gamma.InitializePopup
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Gamma::InitializePopup ( )
{
	static UFunction* pFnInitializePopup = NULL;

	if ( ! pFnInitializePopup )
		pFnInitializePopup = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Gamma.InitializePopup" );

	UKFGFxPopup_Gamma_execInitializePopup_Parms InitializePopup_Parms;

	this->ProcessEvent ( pFnInitializePopup, &InitializePopup_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Confirmation.Callback_ClickedRightOption
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Confirmation::Callback_ClickedRightOption ( )
{
	static UFunction* pFnCallback_ClickedRightOption = NULL;

	if ( ! pFnCallback_ClickedRightOption )
		pFnCallback_ClickedRightOption = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Confirmation.Callback_ClickedRightOption" );

	UKFGFxPopup_Confirmation_execCallback_ClickedRightOption_Parms Callback_ClickedRightOption_Parms;

	this->ProcessEvent ( pFnCallback_ClickedRightOption, &Callback_ClickedRightOption_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Confirmation.Callback_ClickedMiddleOption
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Confirmation::Callback_ClickedMiddleOption ( )
{
	static UFunction* pFnCallback_ClickedMiddleOption = NULL;

	if ( ! pFnCallback_ClickedMiddleOption )
		pFnCallback_ClickedMiddleOption = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Confirmation.Callback_ClickedMiddleOption" );

	UKFGFxPopup_Confirmation_execCallback_ClickedMiddleOption_Parms Callback_ClickedMiddleOption_Parms;

	this->ProcessEvent ( pFnCallback_ClickedMiddleOption, &Callback_ClickedMiddleOption_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Confirmation.Callback_ClickedLeftOption
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Confirmation::Callback_ClickedLeftOption ( )
{
	static UFunction* pFnCallback_ClickedLeftOption = NULL;

	if ( ! pFnCallback_ClickedLeftOption )
		pFnCallback_ClickedLeftOption = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Confirmation.Callback_ClickedLeftOption" );

	UKFGFxPopup_Confirmation_execCallback_ClickedLeftOption_Parms Callback_ClickedLeftOption_Parms;

	this->ProcessEvent ( pFnCallback_ClickedLeftOption, &Callback_ClickedLeftOption_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Confirmation.ClearDelegates
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Confirmation::ClearDelegates ( )
{
	static UFunction* pFnClearDelegates = NULL;

	if ( ! pFnClearDelegates )
		pFnClearDelegates = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Confirmation.ClearDelegates" );

	UKFGFxPopup_Confirmation_execClearDelegates_Parms ClearDelegates_Parms;

	this->ProcessEvent ( pFnClearDelegates, &ClearDelegates_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Confirmation.AssignRightButtonDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Confirmation::AssignRightButtonDelegate ( )
{
	static UFunction* pFnAssignRightButtonDelegate = NULL;

	if ( ! pFnAssignRightButtonDelegate )
		pFnAssignRightButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Confirmation.AssignRightButtonDelegate" );

	UKFGFxPopup_Confirmation_execAssignRightButtonDelegate_Parms AssignRightButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignRightButtonDelegate, &AssignRightButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Confirmation.AssignMiddleButtonDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Confirmation::AssignMiddleButtonDelegate ( )
{
	static UFunction* pFnAssignMiddleButtonDelegate = NULL;

	if ( ! pFnAssignMiddleButtonDelegate )
		pFnAssignMiddleButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Confirmation.AssignMiddleButtonDelegate" );

	UKFGFxPopup_Confirmation_execAssignMiddleButtonDelegate_Parms AssignMiddleButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignMiddleButtonDelegate, &AssignMiddleButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxPopup_Confirmation.AssignLeftButtonDelegate
// [0x00020002] 
// Parameters infos:

void UKFGFxPopup_Confirmation::AssignLeftButtonDelegate ( )
{
	static UFunction* pFnAssignLeftButtonDelegate = NULL;

	if ( ! pFnAssignLeftButtonDelegate )
		pFnAssignLeftButtonDelegate = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxPopup_Confirmation.AssignLeftButtonDelegate" );

	UKFGFxPopup_Confirmation_execAssignLeftButtonDelegate_Parms AssignLeftButtonDelegate_Parms;

	this->ProcessEvent ( pFnAssignLeftButtonDelegate, &AssignLeftButtonDelegate_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager_Versus.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Manager_Versus::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager_Versus.WidgetInitialized" );

	UKFGFxMoviePlayer_Manager_Versus_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_Manager_Versus.ClientRecieveNewTeam
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager_Versus::ClientRecieveNewTeam ( )
{
	static UFunction* pFnClientRecieveNewTeam = NULL;

	if ( ! pFnClientRecieveNewTeam )
		pFnClientRecieveNewTeam = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_Manager_Versus.ClientRecieveNewTeam" );

	UKFGFxMoviePlayer_Manager_Versus_execClientRecieveNewTeam_Parms ClientRecieveNewTeam_Parms;

	this->ProcessEvent ( pFnClientRecieveNewTeam, &ClientRecieveNewTeam_Parms, NULL );
};

// Function KFGame.KFGFxWidget_MenuBarVersus.CanUseGearButton
// [0x00022002] 
// Parameters infos:

void UKFGFxWidget_MenuBarVersus::CanUseGearButton ( )
{
	static UFunction* pFnCanUseGearButton = NULL;

	if ( ! pFnCanUseGearButton )
		pFnCanUseGearButton = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWidget_MenuBarVersus.CanUseGearButton" );

	UKFGFxWidget_MenuBarVersus_execCanUseGearButton_Parms CanUseGearButton_Parms;

	this->ProcessEvent ( pFnCanUseGearButton, &CanUseGearButton_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_NaughtyList.Refresh
// [0x00020102] 
// Parameters infos:

void UKFGFxMoviePlayer_NaughtyList::Refresh ( )
{
	static UFunction* pFnRefresh = NULL;

	if ( ! pFnRefresh )
		pFnRefresh = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_NaughtyList.Refresh" );

	UKFGFxMoviePlayer_NaughtyList_execRefresh_Parms Refresh_Parms;

	this->ProcessEvent ( pFnRefresh, &Refresh_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_NaughtyList.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_NaughtyList::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_NaughtyList.WidgetInitialized" );

	UKFGFxMoviePlayer_NaughtyList_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxNaughtyList.Initialize
// [0x00020000] 
// Parameters infos:

void UKFGFxNaughtyList::Initialize ( )
{
	static UFunction* pFnInitialize = NULL;

	if ( ! pFnInitialize )
		pFnInitialize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxNaughtyList.Initialize" );

	UKFGFxNaughtyList_execInitialize_Parms Initialize_Parms;

	this->ProcessEvent ( pFnInitialize, &Initialize_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.Callback_MovieSize
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::Callback_MovieSize ( )
{
	static UFunction* pFnCallback_MovieSize = NULL;

	if ( ! pFnCallback_MovieSize )
		pFnCallback_MovieSize = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.Callback_MovieSize" );

	UKFGFxMoviePlayer_PlayerInfo_execCallback_MovieSize_Parms Callback_MovieSize_Parms;

	this->ProcessEvent ( pFnCallback_MovieSize, &Callback_MovieSize_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.SetPlayerPawn
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::SetPlayerPawn ( )
{
	static UFunction* pFnSetPlayerPawn = NULL;

	if ( ! pFnSetPlayerPawn )
		pFnSetPlayerPawn = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.SetPlayerPawn" );

	UKFGFxMoviePlayer_PlayerInfo_execSetPlayerPawn_Parms SetPlayerPawn_Parms;

	this->ProcessEvent ( pFnSetPlayerPawn, &SetPlayerPawn_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.UpdatePlayerName
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::UpdatePlayerName ( )
{
	static UFunction* pFnUpdatePlayerName = NULL;

	if ( ! pFnUpdatePlayerName )
		pFnUpdatePlayerName = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.UpdatePlayerName" );

	UKFGFxMoviePlayer_PlayerInfo_execUpdatePlayerName_Parms UpdatePlayerName_Parms;

	this->ProcessEvent ( pFnUpdatePlayerName, &UpdatePlayerName_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.UpdateArmor
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::UpdateArmor ( )
{
	static UFunction* pFnUpdateArmor = NULL;

	if ( ! pFnUpdateArmor )
		pFnUpdateArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.UpdateArmor" );

	UKFGFxMoviePlayer_PlayerInfo_execUpdateArmor_Parms UpdateArmor_Parms;

	this->ProcessEvent ( pFnUpdateArmor, &UpdateArmor_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.UpdateHealth
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::UpdateHealth ( )
{
	static UFunction* pFnUpdateHealth = NULL;

	if ( ! pFnUpdateHealth )
		pFnUpdateHealth = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.UpdateHealth" );

	UKFGFxMoviePlayer_PlayerInfo_execUpdateHealth_Parms UpdateHealth_Parms;

	this->ProcessEvent ( pFnUpdateHealth, &UpdateHealth_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.UpdatePerk
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::UpdatePerk ( )
{
	static UFunction* pFnUpdatePerk = NULL;

	if ( ! pFnUpdatePerk )
		pFnUpdatePerk = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.UpdatePerk" );

	UKFGFxMoviePlayer_PlayerInfo_execUpdatePerk_Parms UpdatePerk_Parms;

	this->ProcessEvent ( pFnUpdatePerk, &UpdatePerk_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.GetMovieHeight
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::GetMovieHeight ( )
{
	static UFunction* pFnGetMovieHeight = NULL;

	if ( ! pFnGetMovieHeight )
		pFnGetMovieHeight = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.GetMovieHeight" );

	UKFGFxMoviePlayer_PlayerInfo_execGetMovieHeight_Parms GetMovieHeight_Parms;

	this->ProcessEvent ( pFnGetMovieHeight, &GetMovieHeight_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.GetMovieWitdth
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::GetMovieWitdth ( )
{
	static UFunction* pFnGetMovieWitdth = NULL;

	if ( ! pFnGetMovieWitdth )
		pFnGetMovieWitdth = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.GetMovieWitdth" );

	UKFGFxMoviePlayer_PlayerInfo_execGetMovieWitdth_Parms GetMovieWitdth_Parms;

	this->ProcessEvent ( pFnGetMovieWitdth, &GetMovieWitdth_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.SetVisible
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::SetVisible ( )
{
	static UFunction* pFnSetVisible = NULL;

	if ( ! pFnSetVisible )
		pFnSetVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.SetVisible" );

	UKFGFxMoviePlayer_PlayerInfo_execSetVisible_Parms SetVisible_Parms;

	this->ProcessEvent ( pFnSetVisible, &SetVisible_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.TickHud" );

	UKFGFxMoviePlayer_PlayerInfo_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.WidgetInitialized" );

	UKFGFxMoviePlayer_PlayerInfo_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxMoviePlayer_PlayerInfo.Init
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_PlayerInfo::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxMoviePlayer_PlayerInfo.Init" );

	UKFGFxMoviePlayer_PlayerInfo_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFGFxScreenSizeContainer.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxScreenSizeContainer::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxScreenSizeContainer.LocalizeText" );

	UKFGFxScreenSizeContainer_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function KFGame.KFGFxScreenSizeContainer.UpdateUsingGamePad
// [0x00020002] 
// Parameters infos:

void UKFGFxScreenSizeContainer::UpdateUsingGamePad ( )
{
	static UFunction* pFnUpdateUsingGamePad = NULL;

	if ( ! pFnUpdateUsingGamePad )
		pFnUpdateUsingGamePad = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxScreenSizeContainer.UpdateUsingGamePad" );

	UKFGFxScreenSizeContainer_execUpdateUsingGamePad_Parms UpdateUsingGamePad_Parms;

	this->ProcessEvent ( pFnUpdateUsingGamePad, &UpdateUsingGamePad_Parms, NULL );
};

// Function KFGame.KFGFxScreenSizeContainer.HideButtonsThatWeDoNotWantForNow
// [0x00020002] 
// Parameters infos:

void UKFGFxScreenSizeContainer::HideButtonsThatWeDoNotWantForNow ( )
{
	static UFunction* pFnHideButtonsThatWeDoNotWantForNow = NULL;

	if ( ! pFnHideButtonsThatWeDoNotWantForNow )
		pFnHideButtonsThatWeDoNotWantForNow = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxScreenSizeContainer.HideButtonsThatWeDoNotWantForNow" );

	UKFGFxScreenSizeContainer_execHideButtonsThatWeDoNotWantForNow_Parms HideButtonsThatWeDoNotWantForNow_Parms;

	this->ProcessEvent ( pFnHideButtonsThatWeDoNotWantForNow, &HideButtonsThatWeDoNotWantForNow_Parms, NULL );
};

// Function KFGame.KFGFxScreenSizeContainer.InitMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxScreenSizeContainer::InitMenu ( )
{
	static UFunction* pFnInitMenu = NULL;

	if ( ! pFnInitMenu )
		pFnInitMenu = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxScreenSizeContainer.InitMenu" );

	UKFGFxScreenSizeContainer_execInitMenu_Parms InitMenu_Parms;

	this->ProcessEvent ( pFnInitMenu, &InitMenu_Parms, NULL );
};

// Function KFGame.KFGFxWorld_C4Screen.SetReadOut
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_C4Screen::SetReadOut ( )
{
	static UFunction* pFnSetReadOut = NULL;

	if ( ! pFnSetReadOut )
		pFnSetReadOut = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_C4Screen.SetReadOut" );

	UKFGFxWorld_C4Screen_execSetReadOut_Parms SetReadOut_Parms;

	this->ProcessEvent ( pFnSetReadOut, &SetReadOut_Parms, NULL );
};

// Function KFGame.KFGFxWorld_C4Screen.SetActiveCharges
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_C4Screen::SetActiveCharges ( )
{
	static UFunction* pFnSetActiveCharges = NULL;

	if ( ! pFnSetActiveCharges )
		pFnSetActiveCharges = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_C4Screen.SetActiveCharges" );

	UKFGFxWorld_C4Screen_execSetActiveCharges_Parms SetActiveCharges_Parms;

	this->ProcessEvent ( pFnSetActiveCharges, &SetActiveCharges_Parms, NULL );
};

// Function KFGame.KFGFxWorld_C4Screen.SetMaxCharges
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_C4Screen::SetMaxCharges ( )
{
	static UFunction* pFnSetMaxCharges = NULL;

	if ( ! pFnSetMaxCharges )
		pFnSetMaxCharges = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_C4Screen.SetMaxCharges" );

	UKFGFxWorld_C4Screen_execSetMaxCharges_Parms SetMaxCharges_Parms;

	this->ProcessEvent ( pFnSetMaxCharges, &SetMaxCharges_Parms, NULL );
};

// Function KFGame.KFGFxWorld_C4Screen.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxWorld_C4Screen::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_C4Screen.WidgetInitialized" );

	UKFGFxWorld_C4Screen_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxWorld_HealerScreen.SetCharge
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_HealerScreen::SetCharge ( )
{
	static UFunction* pFnSetCharge = NULL;

	if ( ! pFnSetCharge )
		pFnSetCharge = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_HealerScreen.SetCharge" );

	UKFGFxWorld_HealerScreen_execSetCharge_Parms SetCharge_Parms;

	this->ProcessEvent ( pFnSetCharge, &SetCharge_Parms, NULL );
};

// Function KFGame.KFGFxWorld_HealerScreen.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxWorld_HealerScreen::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_HealerScreen.WidgetInitialized" );

	UKFGFxWorld_HealerScreen_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxWorld_MedicOptics.LockedOn
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_MedicOptics::LockedOn ( )
{
	static UFunction* pFnLockedOn = NULL;

	if ( ! pFnLockedOn )
		pFnLockedOn = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_MedicOptics.LockedOn" );

	UKFGFxWorld_MedicOptics_execLockedOn_Parms LockedOn_Parms;

	this->ProcessEvent ( pFnLockedOn, &LockedOn_Parms, NULL );
};

// Function KFGame.KFGFxWorld_MedicOptics.StartLockOn
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_MedicOptics::StartLockOn ( )
{
	static UFunction* pFnStartLockOn = NULL;

	if ( ! pFnStartLockOn )
		pFnStartLockOn = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_MedicOptics.StartLockOn" );

	UKFGFxWorld_MedicOptics_execStartLockOn_Parms StartLockOn_Parms;

	this->ProcessEvent ( pFnStartLockOn, &StartLockOn_Parms, NULL );
};

// Function KFGame.KFGFxWorld_MedicOptics.ClearLockOn
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_MedicOptics::ClearLockOn ( )
{
	static UFunction* pFnClearLockOn = NULL;

	if ( ! pFnClearLockOn )
		pFnClearLockOn = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_MedicOptics.ClearLockOn" );

	UKFGFxWorld_MedicOptics_execClearLockOn_Parms ClearLockOn_Parms;

	this->ProcessEvent ( pFnClearLockOn, &ClearLockOn_Parms, NULL );
};

// Function KFGame.KFGFxWorld_MedicOptics.SetHealerCharge
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_MedicOptics::SetHealerCharge ( )
{
	static UFunction* pFnSetHealerCharge = NULL;

	if ( ! pFnSetHealerCharge )
		pFnSetHealerCharge = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_MedicOptics.SetHealerCharge" );

	UKFGFxWorld_MedicOptics_execSetHealerCharge_Parms SetHealerCharge_Parms;

	this->ProcessEvent ( pFnSetHealerCharge, &SetHealerCharge_Parms, NULL );
};

// Function KFGame.KFGFxWorld_MedicOptics.SetShotPercentCost
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_MedicOptics::SetShotPercentCost ( )
{
	static UFunction* pFnSetShotPercentCost = NULL;

	if ( ! pFnSetShotPercentCost )
		pFnSetShotPercentCost = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_MedicOptics.SetShotPercentCost" );

	UKFGFxWorld_MedicOptics_execSetShotPercentCost_Parms SetShotPercentCost_Parms;

	this->ProcessEvent ( pFnSetShotPercentCost, &SetShotPercentCost_Parms, NULL );
};

// Function KFGame.KFGFxWorld_MedicOptics.SetPrimaryAmmo
// [0x00020102] 
// Parameters infos:

void UKFGFxWorld_MedicOptics::SetPrimaryAmmo ( )
{
	static UFunction* pFnSetPrimaryAmmo = NULL;

	if ( ! pFnSetPrimaryAmmo )
		pFnSetPrimaryAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_MedicOptics.SetPrimaryAmmo" );

	UKFGFxWorld_MedicOptics_execSetPrimaryAmmo_Parms SetPrimaryAmmo_Parms;

	this->ProcessEvent ( pFnSetPrimaryAmmo, &SetPrimaryAmmo_Parms, NULL );
};

// Function KFGame.KFGFxWorld_MedicOptics.InitValues
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_MedicOptics::InitValues ( )
{
	static UFunction* pFnInitValues = NULL;

	if ( ! pFnInitValues )
		pFnInitValues = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_MedicOptics.InitValues" );

	UKFGFxWorld_MedicOptics_execInitValues_Parms InitValues_Parms;

	this->ProcessEvent ( pFnInitValues, &InitValues_Parms, NULL );
};

// Function KFGame.KFGFxWorld_MedicOptics.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxWorld_MedicOptics::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_MedicOptics.WidgetInitialized" );

	UKFGFxWorld_MedicOptics_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGFxWorld_WelderScreen.SetIntegrity
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_WelderScreen::SetIntegrity ( )
{
	static UFunction* pFnSetIntegrity = NULL;

	if ( ! pFnSetIntegrity )
		pFnSetIntegrity = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_WelderScreen.SetIntegrity" );

	UKFGFxWorld_WelderScreen_execSetIntegrity_Parms SetIntegrity_Parms;

	this->ProcessEvent ( pFnSetIntegrity, &SetIntegrity_Parms, NULL );
};

// Function KFGame.KFGFxWorld_WelderScreen.SetCharge
// [0x00020002] 
// Parameters infos:

void UKFGFxWorld_WelderScreen::SetCharge ( )
{
	static UFunction* pFnSetCharge = NULL;

	if ( ! pFnSetCharge )
		pFnSetCharge = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_WelderScreen.SetCharge" );

	UKFGFxWorld_WelderScreen_execSetCharge_Parms SetCharge_Parms;

	this->ProcessEvent ( pFnSetCharge, &SetCharge_Parms, NULL );
};

// Function KFGame.KFGFxWorld_WelderScreen.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxWorld_WelderScreen::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function KFGame.KFGFxWorld_WelderScreen.WidgetInitialized" );

	UKFGFxWorld_WelderScreen_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function KFGame.KFGoreChunkAttachment_Skull.ShouldDetachGoreChunk
// [0x00020102] 
// Parameters infos:

void UKFGoreChunkAttachment_Skull::ShouldDetachGoreChunk ( )
{
	static UFunction* pFnShouldDetachGoreChunk = NULL;

	if ( ! pFnShouldDetachGoreChunk )
		pFnShouldDetachGoreChunk = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreChunkAttachment_Skull.ShouldDetachGoreChunk" );

	UKFGoreChunkAttachment_Skull_execShouldDetachGoreChunk_Parms ShouldDetachGoreChunk_Parms;

	this->ProcessEvent ( pFnShouldDetachGoreChunk, &ShouldDetachGoreChunk_Parms, NULL );
};

// Function KFGame.KFGoreChunkAttachment_Skull.ShouldAttachGoreChunk
// [0x00020102] 
// Parameters infos:

void UKFGoreChunkAttachment_Skull::ShouldAttachGoreChunk ( )
{
	static UFunction* pFnShouldAttachGoreChunk = NULL;

	if ( ! pFnShouldAttachGoreChunk )
		pFnShouldAttachGoreChunk = UObject::FindObject< UFunction > ( "Function KFGame.KFGoreChunkAttachment_Skull.ShouldAttachGoreChunk" );

	UKFGoreChunkAttachment_Skull_execShouldAttachGoreChunk_Parms ShouldAttachGoreChunk_Parms;

	this->ProcessEvent ( pFnShouldAttachGoreChunk, &ShouldAttachGoreChunk_Parms, NULL );
};

// Function KFGame.KFInterface_UsableTriggerTarget.TriggerTarget
// [0x00020100] 
// Parameters infos:

void UKFInterface_UsableTriggerTarget::TriggerTarget ( )
{
	static UFunction* pFnTriggerTarget = NULL;

	if ( ! pFnTriggerTarget )
		pFnTriggerTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFInterface_UsableTriggerTarget.TriggerTarget" );

	UKFInterface_UsableTriggerTarget_execTriggerTarget_Parms TriggerTarget_Parms;

	this->ProcessEvent ( pFnTriggerTarget, &TriggerTarget_Parms, NULL );
};

// Function KFGame.KFUsableTrigger.AddTriggerHook
// [0x00020002] 
// Parameters infos:

void AKFUsableTrigger::AddTriggerHook ( )
{
	static UFunction* pFnAddTriggerHook = NULL;

	if ( ! pFnAddTriggerHook )
		pFnAddTriggerHook = UObject::FindObject< UFunction > ( "Function KFGame.KFUsableTrigger.AddTriggerHook" );

	AKFUsableTrigger_execAddTriggerHook_Parms AddTriggerHook_Parms;

	this->ProcessEvent ( pFnAddTriggerHook, &AddTriggerHook_Parms, NULL );
};

// Function KFGame.KFUsableTrigger.UsedBy
// [0x00020002] 
// Parameters infos:

void AKFUsableTrigger::UsedBy ( )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFUsableTrigger.UsedBy" );

	AKFUsableTrigger_execUsedBy_Parms UsedBy_Parms;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );
};

// Function KFGame.KFUsableTrigger.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFUsableTrigger::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFUsableTrigger.UnTouch" );

	AKFUsableTrigger_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFUsableTrigger.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFUsableTrigger::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFUsableTrigger.Touch" );

	AKFUsableTrigger_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFUsableTrigger.GetInteractionIndex
// [0x00020002] 
// Parameters infos:

void AKFUsableTrigger::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFUsableTrigger.GetInteractionIndex" );

	AKFUsableTrigger_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFUsableTrigger.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFUsableTrigger::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFUsableTrigger.GetIsUsable" );

	AKFUsableTrigger_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFTrigger_DoshActivated.ActivateGame
// [0x00020002] 
// Parameters infos:

void AKFTrigger_DoshActivated::ActivateGame ( )
{
	static UFunction* pFnActivateGame = NULL;

	if ( ! pFnActivateGame )
		pFnActivateGame = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_DoshActivated.ActivateGame" );

	AKFTrigger_DoshActivated_execActivateGame_Parms ActivateGame_Parms;

	this->ProcessEvent ( pFnActivateGame, &ActivateGame_Parms, NULL );
};

// Function KFGame.KFTrigger_DoshActivated.UsedBy
// [0x00020002] 
// Parameters infos:

void AKFTrigger_DoshActivated::UsedBy ( )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_DoshActivated.UsedBy" );

	AKFTrigger_DoshActivated_execUsedBy_Parms UsedBy_Parms;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );
};

// Function KFGame.KFTrigger_DoshActivated.GetInteractionIndex
// [0x00020102] 
// Parameters infos:

void AKFTrigger_DoshActivated::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFTrigger_DoshActivated.GetInteractionIndex" );

	AKFTrigger_DoshActivated_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFRepairableActorTrigger.GetInteractionIndex
// [0x00020002] 
// Parameters infos:

void AKFRepairableActorTrigger::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActorTrigger.GetInteractionIndex" );

	AKFRepairableActorTrigger_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFRepairableActorTrigger.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFRepairableActorTrigger::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActorTrigger.GetIsUsable" );

	AKFRepairableActorTrigger_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFRepairableActorTrigger.OnDestroyOrReset
// [0x00020002] 
// Parameters infos:

void AKFRepairableActorTrigger::OnDestroyOrReset ( )
{
	static UFunction* pFnOnDestroyOrReset = NULL;

	if ( ! pFnOnDestroyOrReset )
		pFnOnDestroyOrReset = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActorTrigger.OnDestroyOrReset" );

	AKFRepairableActorTrigger_execOnDestroyOrReset_Parms OnDestroyOrReset_Parms;

	this->ProcessEvent ( pFnOnDestroyOrReset, &OnDestroyOrReset_Parms, NULL );
};

// Function KFGame.KFRepairableActorTrigger.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFRepairableActorTrigger::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActorTrigger.UnTouch" );

	AKFRepairableActorTrigger_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFRepairableActorTrigger.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFRepairableActorTrigger::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActorTrigger.Touch" );

	AKFRepairableActorTrigger_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFRepairableActorTrigger.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFRepairableActorTrigger::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFRepairableActorTrigger.PostBeginPlay" );

	AKFRepairableActorTrigger_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFWeldableTrigger.GetInteractionIndex
// [0x00020002] 
// Parameters infos:

void AKFWeldableTrigger::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableTrigger.GetInteractionIndex" );

	AKFWeldableTrigger_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function KFGame.KFWeldableTrigger.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFWeldableTrigger::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableTrigger.GetIsUsable" );

	AKFWeldableTrigger_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function KFGame.KFWeldableTrigger.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeldableTrigger::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableTrigger.UnTouch" );

	AKFWeldableTrigger_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function KFGame.KFWeldableTrigger.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeldableTrigger::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFWeldableTrigger.Touch" );

	AKFWeldableTrigger_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.GetActivePlayerCount
// [0x00020002] 
// Parameters infos:

void AKFWeap_HealerBase::GetActivePlayerCount ( )
{
	static UFunction* pFnGetActivePlayerCount = NULL;

	if ( ! pFnGetActivePlayerCount )
		pFnGetActivePlayerCount = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.GetActivePlayerCount" );

	AKFWeap_HealerBase_execGetActivePlayerCount_Parms GetActivePlayerCount_Parms;

	this->ProcessEvent ( pFnGetActivePlayerCount, &GetActivePlayerCount_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.ServerStartQuickHeal
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeap_HealerBase::ServerStartQuickHeal ( )
{
	static UFunction* pFnServerStartQuickHeal = NULL;

	if ( ! pFnServerStartQuickHeal )
		pFnServerStartQuickHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.ServerStartQuickHeal" );

	AKFWeap_HealerBase_execServerStartQuickHeal_Parms ServerStartQuickHeal_Parms;

	this->ProcessEvent ( pFnServerStartQuickHeal, &ServerStartQuickHeal_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.Activate
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::Activate ( )
{
	static UFunction* pFnActivate = NULL;

	if ( ! pFnActivate )
		pFnActivate = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.Activate" );

	AKFWeap_HealerBase_execActivate_Parms Activate_Parms;

	this->ProcessEvent ( pFnActivate, &Activate_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.QuickHealFireTimer
// [0x00020100] 
// Parameters infos:

void AKFWeap_HealerBase::QuickHealFireTimer ( )
{
	static UFunction* pFnQuickHealFireTimer = NULL;

	if ( ! pFnQuickHealFireTimer )
		pFnQuickHealFireTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.QuickHealFireTimer" );

	AKFWeap_HealerBase_execQuickHealFireTimer_Parms QuickHealFireTimer_Parms;

	this->ProcessEvent ( pFnQuickHealFireTimer, &QuickHealFireTimer_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.QuickHealEndTimer
// [0x00020100] 
// Parameters infos:

void AKFWeap_HealerBase::QuickHealEndTimer ( )
{
	static UFunction* pFnQuickHealEndTimer = NULL;

	if ( ! pFnQuickHealEndTimer )
		pFnQuickHealEndTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.QuickHealEndTimer" );

	AKFWeap_HealerBase_execQuickHealEndTimer_Parms QuickHealEndTimer_Parms;

	this->ProcessEvent ( pFnQuickHealEndTimer, &QuickHealEndTimer_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.UpdateHealTarget
// [0x00824102] 
// Parameters infos:

void AKFWeap_HealerBase::UpdateHealTarget ( )
{
	static UFunction* pFnUpdateHealTarget = NULL;

	if ( ! pFnUpdateHealTarget )
		pFnUpdateHealTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.UpdateHealTarget" );

	AKFWeap_HealerBase_execUpdateHealTarget_Parms UpdateHealTarget_Parms;

	this->ProcessEvent ( pFnUpdateHealTarget, &UpdateHealTarget_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.UpdateScreenUI
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::UpdateScreenUI ( )
{
	static UFunction* pFnUpdateScreenUI = NULL;

	if ( ! pFnUpdateScreenUI )
		pFnUpdateScreenUI = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.UpdateScreenUI" );

	AKFWeap_HealerBase_execUpdateScreenUI_Parms UpdateScreenUI_Parms;

	this->ProcessEvent ( pFnUpdateScreenUI, &UpdateScreenUI_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.UpdateInteractionMessage
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::UpdateInteractionMessage ( )
{
	static UFunction* pFnUpdateInteractionMessage = NULL;

	if ( ! pFnUpdateInteractionMessage )
		pFnUpdateInteractionMessage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.UpdateInteractionMessage" );

	AKFWeap_HealerBase_execUpdateInteractionMessage_Parms UpdateInteractionMessage_Parms;

	this->ProcessEvent ( pFnUpdateInteractionMessage, &UpdateInteractionMessage_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_HealerBase::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.Tick" );

	AKFWeap_HealerBase_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.ShouldRefire
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.ShouldRefire" );

	AKFWeap_HealerBase_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.GetFireInterval
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::GetFireInterval ( )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.GetFireInterval" );

	AKFWeap_HealerBase_execGetFireInterval_Parms GetFireInterval_Parms;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.GetHealAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::GetHealAnimName ( )
{
	static UFunction* pFnGetHealAnimName = NULL;

	if ( ! pFnGetHealAnimName )
		pFnGetHealAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.GetHealAnimName" );

	AKFWeap_HealerBase_execGetHealAnimName_Parms GetHealAnimName_Parms;

	this->ProcessEvent ( pFnGetHealAnimName, &GetHealAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.PlayFireEffects
// [0x00024102] 
// Parameters infos:

void AKFWeap_HealerBase::PlayFireEffects ( )
{
	static UFunction* pFnPlayFireEffects = NULL;

	if ( ! pFnPlayFireEffects )
		pFnPlayFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.PlayFireEffects" );

	AKFWeap_HealerBase_execPlayFireEffects_Parms PlayFireEffects_Parms;

	this->ProcessEvent ( pFnPlayFireEffects, &PlayFireEffects_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.ServerMissHeal
// [0x00240043] ( FUNC_Final )
// Parameters infos:

void AKFWeap_HealerBase::ServerMissHeal ( )
{
	static UFunction* pFnServerMissHeal = NULL;

	if ( ! pFnServerMissHeal )
		pFnServerMissHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.ServerMissHeal" );

	AKFWeap_HealerBase_execServerMissHeal_Parms ServerMissHeal_Parms;

	this->ProcessEvent ( pFnServerMissHeal, &ServerMissHeal_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.MissHeal
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::MissHeal ( )
{
	static UFunction* pFnMissHeal = NULL;

	if ( ! pFnMissHeal )
		pFnMissHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.MissHeal" );

	AKFWeap_HealerBase_execMissHeal_Parms MissHeal_Parms;

	this->ProcessEvent ( pFnMissHeal, &MissHeal_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.ServerStartHeal
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeap_HealerBase::ServerStartHeal ( )
{
	static UFunction* pFnServerStartHeal = NULL;

	if ( ! pFnServerStartHeal )
		pFnServerStartHeal = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.ServerStartHeal" );

	AKFWeap_HealerBase_execServerStartHeal_Parms ServerStartHeal_Parms;

	this->ProcessEvent ( pFnServerStartHeal, &ServerStartHeal_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.IsValidHealingTarget
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::IsValidHealingTarget ( )
{
	static UFunction* pFnIsValidHealingTarget = NULL;

	if ( ! pFnIsValidHealingTarget )
		pFnIsValidHealingTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.IsValidHealingTarget" );

	AKFWeap_HealerBase_execIsValidHealingTarget_Parms IsValidHealingTarget_Parms;

	this->ProcessEvent ( pFnIsValidHealingTarget, &IsValidHealingTarget_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.StartFire" );

	AKFWeap_HealerBase_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.CustomFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.CustomFire" );

	AKFWeap_HealerBase_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.AltFireMode" );

	AKFWeap_HealerBase_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.CanReload
// [0x00024100] 
// Parameters infos:

void AKFWeap_HealerBase::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.CanReload" );

	AKFWeap_HealerBase_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.HealAmmoRegeneration
// [0x00020002] 
// Parameters infos:

void AKFWeap_HealerBase::HealAmmoRegeneration ( )
{
	static UFunction* pFnHealAmmoRegeneration = NULL;

	if ( ! pFnHealAmmoRegeneration )
		pFnHealAmmoRegeneration = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.HealAmmoRegeneration" );

	AKFWeap_HealerBase_execHealAmmoRegeneration_Parms HealAmmoRegeneration_Parms;

	this->ProcessEvent ( pFnHealAmmoRegeneration, &HealAmmoRegeneration_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.PerformReload
// [0x00024102] 
// Parameters infos:

void AKFWeap_HealerBase::PerformReload ( )
{
	static UFunction* pFnPerformReload = NULL;

	if ( ! pFnPerformReload )
		pFnPerformReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.PerformReload" );

	AKFWeap_HealerBase_execPerformReload_Parms PerformReload_Parms;

	this->ProcessEvent ( pFnPerformReload, &PerformReload_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.HasAnyAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.HasAnyAmmo" );

	AKFWeap_HealerBase_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.GetSpareAmmoForHUD
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::GetSpareAmmoForHUD ( )
{
	static UFunction* pFnGetSpareAmmoForHUD = NULL;

	if ( ! pFnGetSpareAmmoForHUD )
		pFnGetSpareAmmoForHUD = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.GetSpareAmmoForHUD" );

	AKFWeap_HealerBase_execGetSpareAmmoForHUD_Parms GetSpareAmmoForHUD_Parms;

	this->ProcessEvent ( pFnGetSpareAmmoForHUD, &GetSpareAmmoForHUD_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_HealerBase::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.Destroyed" );

	AKFWeap_HealerBase_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.DetachWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeap_HealerBase::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.DetachWeapon" );

	AKFWeap_HealerBase_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.AttachWeaponTo
// [0x00024102] 
// Parameters infos:

void AKFWeap_HealerBase::AttachWeaponTo ( )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.AttachWeaponTo" );

	AKFWeap_HealerBase_execAttachWeaponTo_Parms AttachWeaponTo_Parms;

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.GivenTo
// [0x00024002] 
// Parameters infos:

void AKFWeap_HealerBase::GivenTo ( )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.GivenTo" );

	AKFWeap_HealerBase_execGivenTo_Parms GivenTo_Parms;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function KFGame.KFWeap_HealerBase.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_HealerBase::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_HealerBase.ReplicatedEvent" );

	AKFWeap_HealerBase_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFKActor.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFKActor::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFKActor.PreBeginPlay" );

	AKFKActor_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFLocalMessage_ServerNotification.GetString
// [0x00026002] 
// Parameters infos:

void UKFLocalMessage_ServerNotification::GetString ( )
{
	static UFunction* pFnGetString = NULL;

	if ( ! pFnGetString )
		pFnGetString = UObject::FindObject< UFunction > ( "Function KFGame.KFLocalMessage_ServerNotification.GetString" );

	UKFLocalMessage_ServerNotification_execGetString_Parms GetString_Parms;

	this->ProcessEvent ( pFnGetString, &GetString_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.PlayMeleeHitEffects
// [0x00024102] 
// Parameters infos:

void UKFMeleeHelperWeapon::PlayMeleeHitEffects ( )
{
	static UFunction* pFnPlayMeleeHitEffects = NULL;

	if ( ! pFnPlayMeleeHitEffects )
		pFnPlayMeleeHitEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.PlayMeleeHitEffects" );

	UKFMeleeHelperWeapon_execPlayMeleeHitEffects_Parms PlayMeleeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayMeleeHitEffects, &PlayMeleeHitEffects_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.GetDamageScaleByAngle
// [0x00820102] 
// Parameters infos:

void UKFMeleeHelperWeapon::GetDamageScaleByAngle ( )
{
	static UFunction* pFnGetDamageScaleByAngle = NULL;

	if ( ! pFnGetDamageScaleByAngle )
		pFnGetDamageScaleByAngle = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.GetDamageScaleByAngle" );

	UKFMeleeHelperWeapon_execGetDamageScaleByAngle_Parms GetDamageScaleByAngle_Parms;

	this->ProcessEvent ( pFnGetDamageScaleByAngle, &GetDamageScaleByAngle_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.GetDamageType
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperWeapon::GetDamageType ( )
{
	static UFunction* pFnGetDamageType = NULL;

	if ( ! pFnGetDamageType )
		pFnGetDamageType = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.GetDamageType" );

	UKFMeleeHelperWeapon_execGetDamageType_Parms GetDamageType_Parms;

	this->ProcessEvent ( pFnGetDamageType, &GetDamageType_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.ProcessMeleeHit
// [0x00820102] 
// Parameters infos:

void UKFMeleeHelperWeapon::ProcessMeleeHit ( )
{
	static UFunction* pFnProcessMeleeHit = NULL;

	if ( ! pFnProcessMeleeHit )
		pFnProcessMeleeHit = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.ProcessMeleeHit" );

	UKFMeleeHelperWeapon_execProcessMeleeHit_Parms ProcessMeleeHit_Parms;

	this->ProcessEvent ( pFnProcessMeleeHit, &ProcessMeleeHit_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.ContinueMeleeAttack
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperWeapon::ContinueMeleeAttack ( )
{
	static UFunction* pFnContinueMeleeAttack = NULL;

	if ( ! pFnContinueMeleeAttack )
		pFnContinueMeleeAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.ContinueMeleeAttack" );

	UKFMeleeHelperWeapon_execContinueMeleeAttack_Parms ContinueMeleeAttack_Parms;

	this->ProcessEvent ( pFnContinueMeleeAttack, &ContinueMeleeAttack_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.MeleeCheckTimer
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperWeapon::MeleeCheckTimer ( )
{
	static UFunction* pFnMeleeCheckTimer = NULL;

	if ( ! pFnMeleeCheckTimer )
		pFnMeleeCheckTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.MeleeCheckTimer" );

	UKFMeleeHelperWeapon_execMeleeCheckTimer_Parms MeleeCheckTimer_Parms;

	this->ProcessEvent ( pFnMeleeCheckTimer, &MeleeCheckTimer_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.InitAttackSequence
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperWeapon::InitAttackSequence ( )
{
	static UFunction* pFnInitAttackSequence = NULL;

	if ( ! pFnInitAttackSequence )
		pFnInitAttackSequence = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.InitAttackSequence" );

	UKFMeleeHelperWeapon_execInitAttackSequence_Parms InitAttackSequence_Parms;

	this->ProcessEvent ( pFnInitAttackSequence, &InitAttackSequence_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.ChooseAttackDir
// [0x00820102] 
// Parameters infos:

void UKFMeleeHelperWeapon::ChooseAttackDir ( )
{
	static UFunction* pFnChooseAttackDir = NULL;

	if ( ! pFnChooseAttackDir )
		pFnChooseAttackDir = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.ChooseAttackDir" );

	UKFMeleeHelperWeapon_execChooseAttackDir_Parms ChooseAttackDir_Parms;

	this->ProcessEvent ( pFnChooseAttackDir, &ChooseAttackDir_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.GetMeleeBlendInTime
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperWeapon::GetMeleeBlendInTime ( )
{
	static UFunction* pFnGetMeleeBlendInTime = NULL;

	if ( ! pFnGetMeleeBlendInTime )
		pFnGetMeleeBlendInTime = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.GetMeleeBlendInTime" );

	UKFMeleeHelperWeapon_execGetMeleeBlendInTime_Parms GetMeleeBlendInTime_Parms;

	this->ProcessEvent ( pFnGetMeleeBlendInTime, &GetMeleeBlendInTime_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.PlayMeleeAttackAnimation
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperWeapon::PlayMeleeAttackAnimation ( )
{
	static UFunction* pFnPlayMeleeAttackAnimation = NULL;

	if ( ! pFnPlayMeleeAttackAnimation )
		pFnPlayMeleeAttackAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.PlayMeleeAttackAnimation" );

	UKFMeleeHelperWeapon_execPlayMeleeAttackAnimation_Parms PlayMeleeAttackAnimation_Parms;

	this->ProcessEvent ( pFnPlayMeleeAttackAnimation, &PlayMeleeAttackAnimation_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.BeginMeleeAttack
// [0x00824102] 
// Parameters infos:

void UKFMeleeHelperWeapon::BeginMeleeAttack ( )
{
	static UFunction* pFnBeginMeleeAttack = NULL;

	if ( ! pFnBeginMeleeAttack )
		pFnBeginMeleeAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.BeginMeleeAttack" );

	UKFMeleeHelperWeapon_execBeginMeleeAttack_Parms BeginMeleeAttack_Parms;

	this->ProcessEvent ( pFnBeginMeleeAttack, &BeginMeleeAttack_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.HitboxSimpleWorldTrace
// [0x00820002] 
// Parameters infos:

void UKFMeleeHelperWeapon::HitboxSimpleWorldTrace ( )
{
	static UFunction* pFnHitboxSimpleWorldTrace = NULL;

	if ( ! pFnHitboxSimpleWorldTrace )
		pFnHitboxSimpleWorldTrace = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.HitboxSimpleWorldTrace" );

	UKFMeleeHelperWeapon_execHitboxSimpleWorldTrace_Parms HitboxSimpleWorldTrace_Parms;

	this->ProcessEvent ( pFnHitboxSimpleWorldTrace, &HitboxSimpleWorldTrace_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.InitWorldTraceForHitboxCollision
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFMeleeHelperWeapon::eventInitWorldTraceForHitboxCollision ( )
{
	static UFunction* pFnInitWorldTraceForHitboxCollision = NULL;

	if ( ! pFnInitWorldTraceForHitboxCollision )
		pFnInitWorldTraceForHitboxCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.InitWorldTraceForHitboxCollision" );

	UKFMeleeHelperWeapon_eventInitWorldTraceForHitboxCollision_Parms InitWorldTraceForHitboxCollision_Parms;

	this->ProcessEvent ( pFnInitWorldTraceForHitboxCollision, &InitWorldTraceForHitboxCollision_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.ProcessHitboxCollision
// [0x00C24802] ( FUNC_Event )
// Parameters infos:

void UKFMeleeHelperWeapon::eventProcessHitboxCollision ( )
{
	static UFunction* pFnProcessHitboxCollision = NULL;

	if ( ! pFnProcessHitboxCollision )
		pFnProcessHitboxCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.ProcessHitboxCollision" );

	UKFMeleeHelperWeapon_eventProcessHitboxCollision_Parms ProcessHitboxCollision_Parms;

	this->ProcessEvent ( pFnProcessHitboxCollision, &ProcessHitboxCollision_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.GetAdjustedRayDir
// [0x00820102] 
// Parameters infos:

void UKFMeleeHelperWeapon::GetAdjustedRayDir ( )
{
	static UFunction* pFnGetAdjustedRayDir = NULL;

	if ( ! pFnGetAdjustedRayDir )
		pFnGetAdjustedRayDir = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.GetAdjustedRayDir" );

	UKFMeleeHelperWeapon_execGetAdjustedRayDir_Parms GetAdjustedRayDir_Parms;

	this->ProcessEvent ( pFnGetAdjustedRayDir, &GetAdjustedRayDir_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.CalcVictimImpactList
// [0x00C24102] 
// Parameters infos:

void UKFMeleeHelperWeapon::CalcVictimImpactList ( )
{
	static UFunction* pFnCalcVictimImpactList = NULL;

	if ( ! pFnCalcVictimImpactList )
		pFnCalcVictimImpactList = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.CalcVictimImpactList" );

	UKFMeleeHelperWeapon_execCalcVictimImpactList_Parms CalcVictimImpactList_Parms;

	this->ProcessEvent ( pFnCalcVictimImpactList, &CalcVictimImpactList_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.CalcWeaponMeleeAttack
// [0x00C24102] 
// Parameters infos:

void UKFMeleeHelperWeapon::CalcWeaponMeleeAttack ( )
{
	static UFunction* pFnCalcWeaponMeleeAttack = NULL;

	if ( ! pFnCalcWeaponMeleeAttack )
		pFnCalcWeaponMeleeAttack = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.CalcWeaponMeleeAttack" );

	UKFMeleeHelperWeapon_execCalcWeaponMeleeAttack_Parms CalcWeaponMeleeAttack_Parms;

	this->ProcessEvent ( pFnCalcWeaponMeleeAttack, &CalcWeaponMeleeAttack_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.MeleeAttackImpact
// [0x00820102] 
// Parameters infos:

void UKFMeleeHelperWeapon::MeleeAttackImpact ( )
{
	static UFunction* pFnMeleeAttackImpact = NULL;

	if ( ! pFnMeleeAttackImpact )
		pFnMeleeAttackImpact = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.MeleeAttackImpact" );

	UKFMeleeHelperWeapon_execMeleeAttackImpact_Parms MeleeAttackImpact_Parms;

	this->ProcessEvent ( pFnMeleeAttackImpact, &MeleeAttackImpact_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.MeleeImpactTimer
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperWeapon::MeleeImpactTimer ( )
{
	static UFunction* pFnMeleeImpactTimer = NULL;

	if ( ! pFnMeleeImpactTimer )
		pFnMeleeImpactTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.MeleeImpactTimer" );

	UKFMeleeHelperWeapon_execMeleeImpactTimer_Parms MeleeImpactTimer_Parms;

	this->ProcessEvent ( pFnMeleeImpactTimer, &MeleeImpactTimer_Parms, NULL );
};

// Function KFGame.KFMeleeHelperWeapon.MeleeImpactNotify
// [0x00020102] 
// Parameters infos:

void UKFMeleeHelperWeapon::MeleeImpactNotify ( )
{
	static UFunction* pFnMeleeImpactNotify = NULL;

	if ( ! pFnMeleeImpactNotify )
		pFnMeleeImpactNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFMeleeHelperWeapon.MeleeImpactNotify" );

	UKFMeleeHelperWeapon_execMeleeImpactNotify_Parms MeleeImpactNotify_Parms;

	this->ProcessEvent ( pFnMeleeImpactNotify, &MeleeImpactNotify_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnFollower.InteractionStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnFollower::InteractionStarted ( )
{
	static UFunction* pFnInteractionStarted = NULL;

	if ( ! pFnInteractionStarted )
		pFnInteractionStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnFollower.InteractionStarted" );

	UKFSM_InteractionPawnFollower_execInteractionStarted_Parms InteractionStarted_Parms;

	this->ProcessEvent ( pFnInteractionStarted, &InteractionStarted_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnFollower.MessageEvent
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnFollower::MessageEvent ( )
{
	static UFunction* pFnMessageEvent = NULL;

	if ( ! pFnMessageEvent )
		pFnMessageEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnFollower.MessageEvent" );

	UKFSM_InteractionPawnFollower_execMessageEvent_Parms MessageEvent_Parms;

	this->ProcessEvent ( pFnMessageEvent, &MessageEvent_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnFollower.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnFollower::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnFollower.SpecialMoveEnded" );

	UKFSM_InteractionPawnFollower_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnFollower.OnLeaderLeavingSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnFollower::OnLeaderLeavingSpecialMove ( )
{
	static UFunction* pFnOnLeaderLeavingSpecialMove = NULL;

	if ( ! pFnOnLeaderLeavingSpecialMove )
		pFnOnLeaderLeavingSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnFollower.OnLeaderLeavingSpecialMove" );

	UKFSM_InteractionPawnFollower_execOnLeaderLeavingSpecialMove_Parms OnLeaderLeavingSpecialMove_Parms;

	this->ProcessEvent ( pFnOnLeaderLeavingSpecialMove, &OnLeaderLeavingSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_InteractionPawnFollower.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_InteractionPawnFollower::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_InteractionPawnFollower.SpecialMoveStarted" );

	UKFSM_InteractionPawnFollower_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFMutator.ModifyActivatedPickupFactory
// [0x00420002] 
// Parameters infos:

void AKFMutator::ModifyActivatedPickupFactory ( )
{
	static UFunction* pFnModifyActivatedPickupFactory = NULL;

	if ( ! pFnModifyActivatedPickupFactory )
		pFnModifyActivatedPickupFactory = UObject::FindObject< UFunction > ( "Function KFGame.KFMutator.ModifyActivatedPickupFactory" );

	AKFMutator_execModifyActivatedPickupFactory_Parms ModifyActivatedPickupFactory_Parms;

	this->ProcessEvent ( pFnModifyActivatedPickupFactory, &ModifyActivatedPickupFactory_Parms, NULL );
};

// Function KFGame.KFMutator.ModifyPickupFactories
// [0x00020002] 
// Parameters infos:

void AKFMutator::ModifyPickupFactories ( )
{
	static UFunction* pFnModifyPickupFactories = NULL;

	if ( ! pFnModifyPickupFactories )
		pFnModifyPickupFactories = UObject::FindObject< UFunction > ( "Function KFGame.KFMutator.ModifyPickupFactories" );

	AKFMutator_execModifyPickupFactories_Parms ModifyPickupFactories_Parms;

	this->ProcessEvent ( pFnModifyPickupFactories, &ModifyPickupFactories_Parms, NULL );
};

// Function KFGame.KFMutator.ModifyZedTime
// [0x00420002] 
// Parameters infos:

void AKFMutator::ModifyZedTime ( )
{
	static UFunction* pFnModifyZedTime = NULL;

	if ( ! pFnModifyZedTime )
		pFnModifyZedTime = UObject::FindObject< UFunction > ( "Function KFGame.KFMutator.ModifyZedTime" );

	AKFMutator_execModifyZedTime_Parms ModifyZedTime_Parms;

	this->ProcessEvent ( pFnModifyZedTime, &ModifyZedTime_Parms, NULL );
};

// Function KFGame.KFMutator.ModifyAIEnemy
// [0x00020002] 
// Parameters infos:

void AKFMutator::ModifyAIEnemy ( )
{
	static UFunction* pFnModifyAIEnemy = NULL;

	if ( ! pFnModifyAIEnemy )
		pFnModifyAIEnemy = UObject::FindObject< UFunction > ( "Function KFGame.KFMutator.ModifyAIEnemy" );

	AKFMutator_execModifyAIEnemy_Parms ModifyAIEnemy_Parms;

	this->ProcessEvent ( pFnModifyAIEnemy, &ModifyAIEnemy_Parms, NULL );
};

// Function KFGame.KFMutator.ModifyAI
// [0x00020002] 
// Parameters infos:

void AKFMutator::ModifyAI ( )
{
	static UFunction* pFnModifyAI = NULL;

	if ( ! pFnModifyAI )
		pFnModifyAI = UObject::FindObject< UFunction > ( "Function KFGame.KFMutator.ModifyAI" );

	AKFMutator_execModifyAI_Parms ModifyAI_Parms;

	this->ProcessEvent ( pFnModifyAI, &ModifyAI_Parms, NULL );
};

// Function KFGame.KFMutator.ModifyNextTraderIndex
// [0x00420002] 
// Parameters infos:

void AKFMutator::ModifyNextTraderIndex ( )
{
	static UFunction* pFnModifyNextTraderIndex = NULL;

	if ( ! pFnModifyNextTraderIndex )
		pFnModifyNextTraderIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFMutator.ModifyNextTraderIndex" );

	AKFMutator_execModifyNextTraderIndex_Parms ModifyNextTraderIndex_Parms;

	this->ProcessEvent ( pFnModifyNextTraderIndex, &ModifyNextTraderIndex_Parms, NULL );
};

// Function KFGame.KFMutator.InitMutator
// [0x00420002] 
// Parameters infos:

void AKFMutator::InitMutator ( )
{
	static UFunction* pFnInitMutator = NULL;

	if ( ! pFnInitMutator )
		pFnInitMutator = UObject::FindObject< UFunction > ( "Function KFGame.KFMutator.InitMutator" );

	AKFMutator_execInitMutator_Parms InitMutator_Parms;

	this->ProcessEvent ( pFnInitMutator, &InitMutator_Parms, NULL );
};

// Function KFGame.KFNaughtyListActor.Update
// [0x00020102] 
// Parameters infos:

void AKFNaughtyListActor::Update ( )
{
	static UFunction* pFnUpdate = NULL;

	if ( ! pFnUpdate )
		pFnUpdate = UObject::FindObject< UFunction > ( "Function KFGame.KFNaughtyListActor.Update" );

	AKFNaughtyListActor_execUpdate_Parms Update_Parms;

	this->ProcessEvent ( pFnUpdate, &Update_Parms, NULL );
};

// Function KFGame.KFNaughtyListActor.Init
// [0x00020102] 
// Parameters infos:

void AKFNaughtyListActor::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFNaughtyListActor.Init" );

	AKFNaughtyListActor_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFNaughtyListActor.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFNaughtyListActor::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFNaughtyListActor.PostBeginPlay" );

	AKFNaughtyListActor_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFSM_GrappleVictim.SetGrabEffect
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleVictim::SetGrabEffect ( )
{
	static UFunction* pFnSetGrabEffect = NULL;

	if ( ! pFnSetGrabEffect )
		pFnSetGrabEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleVictim.SetGrabEffect" );

	UKFSM_GrappleVictim_execSetGrabEffect_Parms SetGrabEffect_Parms;

	this->ProcessEvent ( pFnSetGrabEffect, &SetGrabEffect_Parms, NULL );
};

// Function KFGame.KFSM_GrappleVictim.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleVictim::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleVictim.SpecialMoveEnded" );

	UKFSM_GrappleVictim_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_GrappleVictim.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleVictim::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_GrappleVictim.SpecialMoveStarted" );

	UKFSM_GrappleVictim_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_HansGrappleVictim.SetGrabEffect
// [0x00020000] 
// Parameters infos:

void UKFSM_HansGrappleVictim::SetGrabEffect ( )
{
	static UFunction* pFnSetGrabEffect = NULL;

	if ( ! pFnSetGrabEffect )
		pFnSetGrabEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_HansGrappleVictim.SetGrabEffect" );

	UKFSM_HansGrappleVictim_execSetGrabEffect_Parms SetGrabEffect_Parms;

	this->ProcessEvent ( pFnSetGrabEffect, &SetGrabEffect_Parms, NULL );
};

// Function KFGame.KFSM_HansGrappleVictim.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_HansGrappleVictim::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_HansGrappleVictim.SpecialMoveEnded" );

	UKFSM_HansGrappleVictim_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_HansGrappleVictim.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_HansGrappleVictim::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_HansGrappleVictim.SpecialMoveStarted" );

	UKFSM_HansGrappleVictim_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.GetSMAimRotation
// [0x00420002] 
// Parameters infos:

void UKFSM_Player_Emote::GetSMAimRotation ( )
{
	static UFunction* pFnGetSMAimRotation = NULL;

	if ( ! pFnGetSMAimRotation )
		pFnGetSMAimRotation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.GetSMAimRotation" );

	UKFSM_Player_Emote_execGetSMAimRotation_Parms GetSMAimRotation_Parms;

	this->ProcessEvent ( pFnGetSMAimRotation, &GetSMAimRotation_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Player_Emote::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.SpecialMoveEnded" );

	UKFSM_Player_Emote_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.Tick
// [0x00020002] 
// Parameters infos:

void UKFSM_Player_Emote::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.Tick" );

	UKFSM_Player_Emote_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.OnAnimNotifyParticleSystemSpawned
// [0x00020002] 
// Parameters infos:

void UKFSM_Player_Emote::OnAnimNotifyParticleSystemSpawned ( )
{
	static UFunction* pFnOnAnimNotifyParticleSystemSpawned = NULL;

	if ( ! pFnOnAnimNotifyParticleSystemSpawned )
		pFnOnAnimNotifyParticleSystemSpawned = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.OnAnimNotifyParticleSystemSpawned" );

	UKFSM_Player_Emote_execOnAnimNotifyParticleSystemSpawned_Parms OnAnimNotifyParticleSystemSpawned_Parms;

	this->ProcessEvent ( pFnOnAnimNotifyParticleSystemSpawned, &OnAnimNotifyParticleSystemSpawned_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.SetParticlesVisible
// [0x00820002] 
// Parameters infos:

void UKFSM_Player_Emote::SetParticlesVisible ( )
{
	static UFunction* pFnSetParticlesVisible = NULL;

	if ( ! pFnSetParticlesVisible )
		pFnSetParticlesVisible = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.SetParticlesVisible" );

	UKFSM_Player_Emote_execSetParticlesVisible_Parms SetParticlesVisible_Parms;

	this->ProcessEvent ( pFnSetParticlesVisible, &SetParticlesVisible_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.ClearSMParticles
// [0x00020002] 
// Parameters infos:

void UKFSM_Player_Emote::ClearSMParticles ( )
{
	static UFunction* pFnClearSMParticles = NULL;

	if ( ! pFnClearSMParticles )
		pFnClearSMParticles = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.ClearSMParticles" );

	UKFSM_Player_Emote_execClearSMParticles_Parms ClearSMParticles_Parms;

	this->ProcessEvent ( pFnClearSMParticles, &ClearSMParticles_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Player_Emote::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.PlayAnimation" );

	UKFSM_Player_Emote_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Player_Emote::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.SpecialMoveStarted" );

	UKFSM_Player_Emote_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_Player_Emote::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.PackFlagsBase" );

	UKFSM_Player_Emote_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.CanDrawCrosshair
// [0x00020002] 
// Parameters infos:

void UKFSM_Player_Emote::CanDrawCrosshair ( )
{
	static UFunction* pFnCanDrawCrosshair = NULL;

	if ( ! pFnCanDrawCrosshair )
		pFnCanDrawCrosshair = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.CanDrawCrosshair" );

	UKFSM_Player_Emote_execCanDrawCrosshair_Parms CanDrawCrosshair_Parms;

	this->ProcessEvent ( pFnCanDrawCrosshair, &CanDrawCrosshair_Parms, NULL );
};

// Function KFGame.KFSM_Player_Emote.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_Player_Emote::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Player_Emote.InternalCanDoSpecialMove" );

	UKFSM_Player_Emote_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_EvilDAR_EMPGrapple.SetGrabEffect
// [0x00020002] 
// Parameters infos:

void UKFSM_EvilDAR_EMPGrapple::SetGrabEffect ( )
{
	static UFunction* pFnSetGrabEffect = NULL;

	if ( ! pFnSetGrabEffect )
		pFnSetGrabEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_EvilDAR_EMPGrapple.SetGrabEffect" );

	UKFSM_EvilDAR_EMPGrapple_execSetGrabEffect_Parms SetGrabEffect_Parms;

	this->ProcessEvent ( pFnSetGrabEffect, &SetGrabEffect_Parms, NULL );
};

// Function KFGame.KFSM_Stunned.AttachDazedEffect
// [0x00022002] 
// Parameters infos:

void UKFSM_Stunned::AttachDazedEffect ( )
{
	static UFunction* pFnAttachDazedEffect = NULL;

	if ( ! pFnAttachDazedEffect )
		pFnAttachDazedEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stunned.AttachDazedEffect" );

	UKFSM_Stunned_execAttachDazedEffect_Parms AttachDazedEffect_Parms;

	this->ProcessEvent ( pFnAttachDazedEffect, &AttachDazedEffect_Parms, NULL );
};

// Function KFGame.KFSM_Stunned.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Stunned::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stunned.SpecialMoveEnded" );

	UKFSM_Stunned_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_Stunned.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_Stunned::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stunned.SpecialMoveFlagsUpdated" );

	UKFSM_Stunned_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function KFGame.KFSM_Stunned.PlayWakeupAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Stunned::PlayWakeupAnimation ( )
{
	static UFunction* pFnPlayWakeupAnimation = NULL;

	if ( ! pFnPlayWakeupAnimation )
		pFnPlayWakeupAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stunned.PlayWakeupAnimation" );

	UKFSM_Stunned_execPlayWakeupAnimation_Parms PlayWakeupAnimation_Parms;

	this->ProcessEvent ( pFnPlayWakeupAnimation, &PlayWakeupAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Stunned.DoWakeup
// [0x00020002] 
// Parameters infos:

void UKFSM_Stunned::DoWakeup ( )
{
	static UFunction* pFnDoWakeup = NULL;

	if ( ! pFnDoWakeup )
		pFnDoWakeup = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stunned.DoWakeup" );

	UKFSM_Stunned_execDoWakeup_Parms DoWakeup_Parms;

	this->ProcessEvent ( pFnDoWakeup, &DoWakeup_Parms, NULL );
};

// Function KFGame.KFSM_Stunned.DoStun
// [0x00020002] 
// Parameters infos:

void UKFSM_Stunned::DoStun ( )
{
	static UFunction* pFnDoStun = NULL;

	if ( ! pFnDoStun )
		pFnDoStun = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stunned.DoStun" );

	UKFSM_Stunned_execDoStun_Parms DoStun_Parms;

	this->ProcessEvent ( pFnDoStun, &DoStun_Parms, NULL );
};

// Function KFGame.KFSM_Stunned.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Stunned::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Stunned.SpecialMoveStarted" );

	UKFSM_Stunned_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.FindAnchorFailsafe
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::FindAnchorFailsafe ( )
{
	static UFunction* pFnFindAnchorFailsafe = NULL;

	if ( ! pFnFindAnchorFailsafe )
		pFnFindAnchorFailsafe = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.FindAnchorFailsafe" );

	UKFSM_Emerge_execFindAnchorFailsafe_Parms FindAnchorFailsafe_Parms;

	this->ProcessEvent ( pFnFindAnchorFailsafe, &FindAnchorFailsafe_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.AbortSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::AbortSpecialMove ( )
{
	static UFunction* pFnAbortSpecialMove = NULL;

	if ( ! pFnAbortSpecialMove )
		pFnAbortSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.AbortSpecialMove" );

	UKFSM_Emerge_execAbortSpecialMove_Parms AbortSpecialMove_Parms;

	this->ProcessEvent ( pFnAbortSpecialMove, &AbortSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.PushOverlappingHumans
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::PushOverlappingHumans ( )
{
	static UFunction* pFnPushOverlappingHumans = NULL;

	if ( ! pFnPushOverlappingHumans )
		pFnPushOverlappingHumans = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.PushOverlappingHumans" );

	UKFSM_Emerge_execPushOverlappingHumans_Parms PushOverlappingHumans_Parms;

	this->ProcessEvent ( pFnPushOverlappingHumans, &PushOverlappingHumans_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.RestoreCollision
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::RestoreCollision ( )
{
	static UFunction* pFnRestoreCollision = NULL;

	if ( ! pFnRestoreCollision )
		pFnRestoreCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.RestoreCollision" );

	UKFSM_Emerge_execRestoreCollision_Parms RestoreCollision_Parms;

	this->ProcessEvent ( pFnRestoreCollision, &RestoreCollision_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.AnimEndNotify" );

	UKFSM_Emerge_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.Timer_CheckForPortalDestructibles
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::Timer_CheckForPortalDestructibles ( )
{
	static UFunction* pFnTimer_CheckForPortalDestructibles = NULL;

	if ( ! pFnTimer_CheckForPortalDestructibles )
		pFnTimer_CheckForPortalDestructibles = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.Timer_CheckForPortalDestructibles" );

	UKFSM_Emerge_execTimer_CheckForPortalDestructibles_Parms Timer_CheckForPortalDestructibles_Parms;

	this->ProcessEvent ( pFnTimer_CheckForPortalDestructibles, &Timer_CheckForPortalDestructibles_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.SpecialMoveEnded" );

	UKFSM_Emerge_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.PlayEmerge
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::PlayEmerge ( )
{
	static UFunction* pFnPlayEmerge = NULL;

	if ( ! pFnPlayEmerge )
		pFnPlayEmerge = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.PlayEmerge" );

	UKFSM_Emerge_execPlayEmerge_Parms PlayEmerge_Parms;

	this->ProcessEvent ( pFnPlayEmerge, &PlayEmerge_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.SpecialMoveStarted" );

	UKFSM_Emerge_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.CanOverrideMoveWith
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::CanOverrideMoveWith ( )
{
	static UFunction* pFnCanOverrideMoveWith = NULL;

	if ( ! pFnCanOverrideMoveWith )
		pFnCanOverrideMoveWith = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.CanOverrideMoveWith" );

	UKFSM_Emerge_execCanOverrideMoveWith_Parms CanOverrideMoveWith_Parms;

	this->ProcessEvent ( pFnCanOverrideMoveWith, &CanOverrideMoveWith_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.GetEmergeAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge::GetEmergeAnim ( )
{
	static UFunction* pFnGetEmergeAnim = NULL;

	if ( ! pFnGetEmergeAnim )
		pFnGetEmergeAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.GetEmergeAnim" );

	UKFSM_Emerge_execGetEmergeAnim_Parms GetEmergeAnim_Parms;

	this->ProcessEvent ( pFnGetEmergeAnim, &GetEmergeAnim_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.GetEmergeAnimNum
// [0x00022002] 
// Parameters infos:

void UKFSM_Emerge::GetEmergeAnimNum ( )
{
	static UFunction* pFnGetEmergeAnimNum = NULL;

	if ( ! pFnGetEmergeAnimNum )
		pFnGetEmergeAnimNum = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.GetEmergeAnimNum" );

	UKFSM_Emerge_execGetEmergeAnimNum_Parms GetEmergeAnimNum_Parms;

	this->ProcessEvent ( pFnGetEmergeAnimNum, &GetEmergeAnimNum_Parms, NULL );
};

// Function KFGame.KFSM_Emerge.PackAnimFlag
// [0x00426002] 
// Parameters infos:

void UKFSM_Emerge::PackAnimFlag ( )
{
	static UFunction* pFnPackAnimFlag = NULL;

	if ( ! pFnPackAnimFlag )
		pFnPackAnimFlag = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Emerge.PackAnimFlag" );

	UKFSM_Emerge_execPackAnimFlag_Parms PackAnimFlag_Parms;

	this->ProcessEvent ( pFnPackAnimFlag, &PackAnimFlag_Parms, NULL );
};

// Function KFGame.KFZedArmorInfo.AdjustNonBoneDamage
// [0x00420002] 
// Parameters infos:

void UKFZedArmorInfo::AdjustNonBoneDamage ( )
{
	static UFunction* pFnAdjustNonBoneDamage = NULL;

	if ( ! pFnAdjustNonBoneDamage )
		pFnAdjustNonBoneDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFZedArmorInfo.AdjustNonBoneDamage" );

	UKFZedArmorInfo_execAdjustNonBoneDamage_Parms AdjustNonBoneDamage_Parms;

	this->ProcessEvent ( pFnAdjustNonBoneDamage, &AdjustNonBoneDamage_Parms, NULL );
};

// Function KFGame.KFZedArmorInfo.AdjustBoneDamage
// [0x00420002] 
// Parameters infos:

void UKFZedArmorInfo::AdjustBoneDamage ( )
{
	static UFunction* pFnAdjustBoneDamage = NULL;

	if ( ! pFnAdjustBoneDamage )
		pFnAdjustBoneDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFZedArmorInfo.AdjustBoneDamage" );

	UKFZedArmorInfo_execAdjustBoneDamage_Parms AdjustBoneDamage_Parms;

	this->ProcessEvent ( pFnAdjustBoneDamage, &AdjustBoneDamage_Parms, NULL );
};

// Function KFGame.KFZedArmorInfo.SetShieldScale
// [0x00020002] 
// Parameters infos:

void UKFZedArmorInfo::SetShieldScale ( )
{
	static UFunction* pFnSetShieldScale = NULL;

	if ( ! pFnSetShieldScale )
		pFnSetShieldScale = UObject::FindObject< UFunction > ( "Function KFGame.KFZedArmorInfo.SetShieldScale" );

	UKFZedArmorInfo_execSetShieldScale_Parms SetShieldScale_Parms;

	this->ProcessEvent ( pFnSetShieldScale, &SetShieldScale_Parms, NULL );
};

// Function KFGame.KFZedArmorInfo.UpdateArmorUI
// [0x00020100] 
// Parameters infos:

void UKFZedArmorInfo::UpdateArmorUI ( )
{
	static UFunction* pFnUpdateArmorUI = NULL;

	if ( ! pFnUpdateArmorUI )
		pFnUpdateArmorUI = UObject::FindObject< UFunction > ( "Function KFGame.KFZedArmorInfo.UpdateArmorUI" );

	UKFZedArmorInfo_execUpdateArmorUI_Parms UpdateArmorUI_Parms;

	this->ProcessEvent ( pFnUpdateArmorUI, &UpdateArmorUI_Parms, NULL );
};

// Function KFGame.KFZedArmorInfo.UpdateArmorPieces
// [0x00020100] 
// Parameters infos:

void UKFZedArmorInfo::UpdateArmorPieces ( )
{
	static UFunction* pFnUpdateArmorPieces = NULL;

	if ( ! pFnUpdateArmorPieces )
		pFnUpdateArmorPieces = UObject::FindObject< UFunction > ( "Function KFGame.KFZedArmorInfo.UpdateArmorPieces" );

	UKFZedArmorInfo_execUpdateArmorPieces_Parms UpdateArmorPieces_Parms;

	this->ProcessEvent ( pFnUpdateArmorPieces, &UpdateArmorPieces_Parms, NULL );
};

// Function KFGame.KFZedArmorInfo.ExplodeArmor
// [0x00020000] 
// Parameters infos:

void UKFZedArmorInfo::ExplodeArmor ( )
{
	static UFunction* pFnExplodeArmor = NULL;

	if ( ! pFnExplodeArmor )
		pFnExplodeArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFZedArmorInfo.ExplodeArmor" );

	UKFZedArmorInfo_execExplodeArmor_Parms ExplodeArmor_Parms;

	this->ProcessEvent ( pFnExplodeArmor, &ExplodeArmor_Parms, NULL );
};

// Function KFGame.KFZedArmorInfo.InitArmor
// [0x00020002] 
// Parameters infos:

void UKFZedArmorInfo::InitArmor ( )
{
	static UFunction* pFnInitArmor = NULL;

	if ( ! pFnInitArmor )
		pFnInitArmor = UObject::FindObject< UFunction > ( "Function KFGame.KFZedArmorInfo.InitArmor" );

	UKFZedArmorInfo_execInitArmor_Parms InitArmor_Parms;

	this->ProcessEvent ( pFnInitArmor, &InitArmor_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.RestoreRBCollision
// [0x00022002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::RestoreRBCollision ( )
{
	static UFunction* pFnRestoreRBCollision = NULL;

	if ( ! pFnRestoreRBCollision )
		pFnRestoreRBCollision = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.RestoreRBCollision" );

	UKFSM_RagdollKnockdown_execRestoreRBCollision_Parms RestoreRBCollision_Parms;

	this->ProcessEvent ( pFnRestoreRBCollision, &RestoreRBCollision_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.TermKnockdownRagdoll
// [0x00022002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::TermKnockdownRagdoll ( )
{
	static UFunction* pFnTermKnockdownRagdoll = NULL;

	if ( ! pFnTermKnockdownRagdoll )
		pFnTermKnockdownRagdoll = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.TermKnockdownRagdoll" );

	UKFSM_RagdollKnockdown_execTermKnockdownRagdoll_Parms TermKnockdownRagdoll_Parms;

	this->ProcessEvent ( pFnTermKnockdownRagdoll, &TermKnockdownRagdoll_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.EndKnockdown
// [0x00084002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::EndKnockdown ( )
{
	static UFunction* pFnEndKnockdown = NULL;

	if ( ! pFnEndKnockdown )
		pFnEndKnockdown = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.EndKnockdown" );

	UKFSM_RagdollKnockdown_execEndKnockdown_Parms EndKnockdown_Parms;

	this->ProcessEvent ( pFnEndKnockdown, &EndKnockdown_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.KnockdownTimer
// [0x00080002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::KnockdownTimer ( )
{
	static UFunction* pFnKnockdownTimer = NULL;

	if ( ! pFnKnockdownTimer )
		pFnKnockdownTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.KnockdownTimer" );

	UKFSM_RagdollKnockdown_execKnockdownTimer_Parms KnockdownTimer_Parms;

	this->ProcessEvent ( pFnKnockdownTimer, &KnockdownTimer_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.KnockdownFailsafe
// [0x00080802] ( FUNC_Event )
// Parameters infos:

void UKFSM_RagdollKnockdown::eventKnockdownFailsafe ( )
{
	static UFunction* pFnKnockdownFailsafe = NULL;

	if ( ! pFnKnockdownFailsafe )
		pFnKnockdownFailsafe = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.KnockdownFailsafe" );

	UKFSM_RagdollKnockdown_eventKnockdownFailsafe_Parms KnockdownFailsafe_Parms;

	this->ProcessEvent ( pFnKnockdownFailsafe, &KnockdownFailsafe_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.PlayFallDown
// [0x00080002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::PlayFallDown ( )
{
	static UFunction* pFnPlayFallDown = NULL;

	if ( ! pFnPlayFallDown )
		pFnPlayFallDown = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.PlayFallDown" );

	UKFSM_RagdollKnockdown_execPlayFallDown_Parms PlayFallDown_Parms;

	this->ProcessEvent ( pFnPlayFallDown, &PlayFallDown_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.ApplyKnockdownImpulse
// [0x00C20002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::ApplyKnockdownImpulse ( )
{
	static UFunction* pFnApplyKnockdownImpulse = NULL;

	if ( ! pFnApplyKnockdownImpulse )
		pFnApplyKnockdownImpulse = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.ApplyKnockdownImpulse" );

	UKFSM_RagdollKnockdown_execApplyKnockdownImpulse_Parms ApplyKnockdownImpulse_Parms;

	this->ProcessEvent ( pFnApplyKnockdownImpulse, &ApplyKnockdownImpulse_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.DeferApplyKnockdownImpulse
// [0x00020002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::DeferApplyKnockdownImpulse ( )
{
	static UFunction* pFnDeferApplyKnockdownImpulse = NULL;

	if ( ! pFnDeferApplyKnockdownImpulse )
		pFnDeferApplyKnockdownImpulse = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.DeferApplyKnockdownImpulse" );

	UKFSM_RagdollKnockdown_execDeferApplyKnockdownImpulse_Parms DeferApplyKnockdownImpulse_Parms;

	this->ProcessEvent ( pFnDeferApplyKnockdownImpulse, &DeferApplyKnockdownImpulse_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.SpecialMoveEnded" );

	UKFSM_RagdollKnockdown_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.SpecialMoveStarted" );

	UKFSM_RagdollKnockdown_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_RagdollKnockdown.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_RagdollKnockdown::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RagdollKnockdown.InternalCanDoSpecialMove" );

	UKFSM_RagdollKnockdown_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.CanOverrideSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::CanOverrideSpecialMove ( )
{
	static UFunction* pFnCanOverrideSpecialMove = NULL;

	if ( ! pFnCanOverrideSpecialMove )
		pFnCanOverrideSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.CanOverrideSpecialMove" );

	UKFSM_Frozen_execCanOverrideSpecialMove_Parms CanOverrideSpecialMove_Parms;

	this->ProcessEvent ( pFnCanOverrideSpecialMove, &CanOverrideSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.DelayedShatterTimer
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::DelayedShatterTimer ( )
{
	static UFunction* pFnDelayedShatterTimer = NULL;

	if ( ! pFnDelayedShatterTimer )
		pFnDelayedShatterTimer = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.DelayedShatterTimer" );

	UKFSM_Frozen_execDelayedShatterTimer_Parms DelayedShatterTimer_Parms;

	this->ProcessEvent ( pFnDelayedShatterTimer, &DelayedShatterTimer_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.PlayDeathEffects
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::PlayDeathEffects ( )
{
	static UFunction* pFnPlayDeathEffects = NULL;

	if ( ! pFnPlayDeathEffects )
		pFnPlayDeathEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.PlayDeathEffects" );

	UKFSM_Frozen_execPlayDeathEffects_Parms PlayDeathEffects_Parms;

	this->ProcessEvent ( pFnPlayDeathEffects, &PlayDeathEffects_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.ApplyFreeze
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::ApplyFreeze ( )
{
	static UFunction* pFnApplyFreeze = NULL;

	if ( ! pFnApplyFreeze )
		pFnApplyFreeze = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.ApplyFreeze" );

	UKFSM_Frozen_execApplyFreeze_Parms ApplyFreeze_Parms;

	this->ProcessEvent ( pFnApplyFreeze, &ApplyFreeze_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.SetFrozenParameter
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::SetFrozenParameter ( )
{
	static UFunction* pFnSetFrozenParameter = NULL;

	if ( ! pFnSetFrozenParameter )
		pFnSetFrozenParameter = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.SetFrozenParameter" );

	UKFSM_Frozen_execSetFrozenParameter_Parms SetFrozenParameter_Parms;

	this->ProcessEvent ( pFnSetFrozenParameter, &SetFrozenParameter_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.OnGoreMeshSwap
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::OnGoreMeshSwap ( )
{
	static UFunction* pFnOnGoreMeshSwap = NULL;

	if ( ! pFnOnGoreMeshSwap )
		pFnOnGoreMeshSwap = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.OnGoreMeshSwap" );

	UKFSM_Frozen_execOnGoreMeshSwap_Parms OnGoreMeshSwap_Parms;

	this->ProcessEvent ( pFnOnGoreMeshSwap, &OnGoreMeshSwap_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.SpecialMoveEnded" );

	UKFSM_Frozen_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.UpdateFreezeOutParam
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::UpdateFreezeOutParam ( )
{
	static UFunction* pFnUpdateFreezeOutParam = NULL;

	if ( ! pFnUpdateFreezeOutParam )
		pFnUpdateFreezeOutParam = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.UpdateFreezeOutParam" );

	UKFSM_Frozen_execUpdateFreezeOutParam_Parms UpdateFreezeOutParam_Parms;

	this->ProcessEvent ( pFnUpdateFreezeOutParam, &UpdateFreezeOutParam_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.UpdateFreezeInParam
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::UpdateFreezeInParam ( )
{
	static UFunction* pFnUpdateFreezeInParam = NULL;

	if ( ! pFnUpdateFreezeInParam )
		pFnUpdateFreezeInParam = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.UpdateFreezeInParam" );

	UKFSM_Frozen_execUpdateFreezeInParam_Parms UpdateFreezeInParam_Parms;

	this->ProcessEvent ( pFnUpdateFreezeInParam, &UpdateFreezeInParam_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.SpecialMoveFlagsUpdated" );

	UKFSM_Frozen_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.PlayThawAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::PlayThawAnimation ( )
{
	static UFunction* pFnPlayThawAnimation = NULL;

	if ( ! pFnPlayThawAnimation )
		pFnPlayThawAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.PlayThawAnimation" );

	UKFSM_Frozen_execPlayThawAnimation_Parms PlayThawAnimation_Parms;

	this->ProcessEvent ( pFnPlayThawAnimation, &PlayThawAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.DoThaw
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::DoThaw ( )
{
	static UFunction* pFnDoThaw = NULL;

	if ( ! pFnDoThaw )
		pFnDoThaw = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.DoThaw" );

	UKFSM_Frozen_execDoThaw_Parms DoThaw_Parms;

	this->ProcessEvent ( pFnDoThaw, &DoThaw_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.DoFreeze
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::DoFreeze ( )
{
	static UFunction* pFnDoFreeze = NULL;

	if ( ! pFnDoFreeze )
		pFnDoFreeze = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.DoFreeze" );

	UKFSM_Frozen_execDoFreeze_Parms DoFreeze_Parms;

	this->ProcessEvent ( pFnDoFreeze, &DoFreeze_Parms, NULL );
};

// Function KFGame.KFSM_Frozen.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Frozen::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Frozen.SpecialMoveStarted" );

	UKFSM_Frozen_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_Zed_WalkingTaunt.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Zed_WalkingTaunt::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_WalkingTaunt.PlayAnimation" );

	UKFSM_Zed_WalkingTaunt_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_Zed_WalkingTaunt.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_Zed_WalkingTaunt::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_Zed_WalkingTaunt.InternalCanDoSpecialMove" );

	UKFSM_Zed_WalkingTaunt_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFPlayerStart.Reset
// [0x00020002] 
// Parameters infos:

void AKFPlayerStart::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerStart.Reset" );

	AKFPlayerStart_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function KFGame.KFPlayerStart.PreBeginPlay
// [0x00020002] 
// Parameters infos:

void AKFPlayerStart::PreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFPlayerStart.PreBeginPlay" );

	AKFPlayerStart_execPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.SetExplosionActorClass
// [0x00080102] 
// Parameters infos:

void AKFProj_BallisticExplosive::SetExplosionActorClass ( )
{
	static UFunction* pFnSetExplosionActorClass = NULL;

	if ( ! pFnSetExplosionActorClass )
		pFnSetExplosionActorClass = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.SetExplosionActorClass" );

	AKFProj_BallisticExplosive_execSetExplosionActorClass_Parms SetExplosionActorClass_Parms;

	this->ProcessEvent ( pFnSetExplosionActorClass, &SetExplosionActorClass_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_BallisticExplosive::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.PrepareExplosionTemplate" );

	AKFProj_BallisticExplosive_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.TraceProjHitZones
// [0x00C20102] 
// Parameters infos:

void AKFProj_BallisticExplosive::TraceProjHitZones ( )
{
	static UFunction* pFnTraceProjHitZones = NULL;

	if ( ! pFnTraceProjHitZones )
		pFnTraceProjHitZones = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.TraceProjHitZones" );

	AKFProj_BallisticExplosive_execTraceProjHitZones_Parms TraceProjHitZones_Parms;

	this->ProcessEvent ( pFnTraceProjHitZones, &TraceProjHitZones_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.OnDudEffect
// [0x00020100] 
// Parameters infos:

void AKFProj_BallisticExplosive::OnDudEffect ( )
{
	static UFunction* pFnOnDudEffect = NULL;

	if ( ! pFnOnDudEffect )
		pFnOnDudEffect = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.OnDudEffect" );

	AKFProj_BallisticExplosive_execOnDudEffect_Parms OnDudEffect_Parms;

	this->ProcessEvent ( pFnOnDudEffect, &OnDudEffect_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.SetIsDud
// [0x00020102] 
// Parameters infos:

void AKFProj_BallisticExplosive::SetIsDud ( )
{
	static UFunction* pFnSetIsDud = NULL;

	if ( ! pFnSetIsDud )
		pFnSetIsDud = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.SetIsDud" );

	AKFProj_BallisticExplosive_execSetIsDud_Parms SetIsDud_Parms;

	this->ProcessEvent ( pFnSetIsDud, &SetIsDud_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.ProcessBulletTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_BallisticExplosive::ProcessBulletTouch ( )
{
	static UFunction* pFnProcessBulletTouch = NULL;

	if ( ! pFnProcessBulletTouch )
		pFnProcessBulletTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.ProcessBulletTouch" );

	AKFProj_BallisticExplosive_execProcessBulletTouch_Parms ProcessBulletTouch_Parms;

	this->ProcessEvent ( pFnProcessBulletTouch, &ProcessBulletTouch_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.ProcessTouch
// [0x00820102] 
// Parameters infos:

void AKFProj_BallisticExplosive::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.ProcessTouch" );

	AKFProj_BallisticExplosive_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.GetTerminalVelocity
// [0x00020002] 
// Parameters infos:

void AKFProj_BallisticExplosive::GetTerminalVelocity ( )
{
	static UFunction* pFnGetTerminalVelocity = NULL;

	if ( ! pFnGetTerminalVelocity )
		pFnGetTerminalVelocity = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.GetTerminalVelocity" );

	AKFProj_BallisticExplosive_execGetTerminalVelocity_Parms GetTerminalVelocity_Parms;

	this->ProcessEvent ( pFnGetTerminalVelocity, &GetTerminalVelocity_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.HitWall
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BallisticExplosive::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.HitWall" );

	AKFProj_BallisticExplosive_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.CallExplode
// [0x00020102] 
// Parameters infos:

void AKFProj_BallisticExplosive::CallExplode ( )
{
	static UFunction* pFnCallExplode = NULL;

	if ( ! pFnCallExplode )
		pFnCallExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.CallExplode" );

	AKFProj_BallisticExplosive_execCallExplode_Parms CallExplode_Parms;

	this->ProcessEvent ( pFnCallExplode, &CallExplode_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.Explode
// [0x00020102] 
// Parameters infos:

void AKFProj_BallisticExplosive::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.Explode" );

	AKFProj_BallisticExplosive_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BallisticExplosive::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.PreBeginPlay" );

	AKFProj_BallisticExplosive_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFProj_BallisticExplosive.SyncOriginalLocation
// [0x00020102] 
// Parameters infos:

void AKFProj_BallisticExplosive::SyncOriginalLocation ( )
{
	static UFunction* pFnSyncOriginalLocation = NULL;

	if ( ! pFnSyncOriginalLocation )
		pFnSyncOriginalLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_BallisticExplosive.SyncOriginalLocation" );

	AKFProj_BallisticExplosive_execSyncOriginalLocation_Parms SyncOriginalLocation_Parms;

	this->ProcessEvent ( pFnSyncOriginalLocation, &SyncOriginalLocation_Parms, NULL );
};

// Function KFGame.KFProj_ExplosiveSubmunition_HX25.AllowNuke
// [0x00020102] 
// Parameters infos:

void AKFProj_ExplosiveSubmunition_HX25::AllowNuke ( )
{
	static UFunction* pFnAllowNuke = NULL;

	if ( ! pFnAllowNuke )
		pFnAllowNuke = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_ExplosiveSubmunition_HX25.AllowNuke" );

	AKFProj_ExplosiveSubmunition_HX25_execAllowNuke_Parms AllowNuke_Parms;

	this->ProcessEvent ( pFnAllowNuke, &AllowNuke_Parms, NULL );
};

// Function KFGame.KFProj_ExplosiveSubmunition_HX25.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_ExplosiveSubmunition_HX25::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_ExplosiveSubmunition_HX25.HitWall" );

	AKFProj_ExplosiveSubmunition_HX25_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function KFGame.KFProj_ExplosiveSubmunition_HX25.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_ExplosiveSubmunition_HX25::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_ExplosiveSubmunition_HX25.PrepareExplosionTemplate" );

	AKFProj_ExplosiveSubmunition_HX25_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function KFGame.KFProj_ExplosiveSubmunition_HX25.ShouldWarnAIWhenFired
// [0x00020002] 
// Parameters infos:

void AKFProj_ExplosiveSubmunition_HX25::ShouldWarnAIWhenFired ( )
{
	static UFunction* pFnShouldWarnAIWhenFired = NULL;

	if ( ! pFnShouldWarnAIWhenFired )
		pFnShouldWarnAIWhenFired = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_ExplosiveSubmunition_HX25.ShouldWarnAIWhenFired" );

	AKFProj_ExplosiveSubmunition_HX25_execShouldWarnAIWhenFired_Parms ShouldWarnAIWhenFired_Parms;

	this->ProcessEvent ( pFnShouldWarnAIWhenFired, &ShouldWarnAIWhenFired_Parms, NULL );
};

// Function KFGame.KFProj_ExplosiveSubmunition_HX25.Init
// [0x00020002] 
// Parameters infos:

void AKFProj_ExplosiveSubmunition_HX25::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_ExplosiveSubmunition_HX25.Init" );

	AKFProj_ExplosiveSubmunition_HX25_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.ShouldProcessBulletTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetStickBullet::ShouldProcessBulletTouch ( )
{
	static UFunction* pFnShouldProcessBulletTouch = NULL;

	if ( ! pFnShouldProcessBulletTouch )
		pFnShouldProcessBulletTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.ShouldProcessBulletTouch" );

	AKFProj_RicochetStickBullet_execShouldProcessBulletTouch_Parms ShouldProcessBulletTouch_Parms;

	this->ProcessEvent ( pFnShouldProcessBulletTouch, &ShouldProcessBulletTouch_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetStickBullet::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.ProcessTouch" );

	AKFProj_RicochetStickBullet_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.Tick
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetStickBullet::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.Tick" );

	AKFProj_RicochetStickBullet_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.DelayedStick
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetStickBullet::DelayedStick ( )
{
	static UFunction* pFnDelayedStick = NULL;

	if ( ! pFnDelayedStick )
		pFnDelayedStick = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.DelayedStick" );

	AKFProj_RicochetStickBullet_execDelayedStick_Parms DelayedStick_Parms;

	this->ProcessEvent ( pFnDelayedStick, &DelayedStick_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.Stick
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetStickBullet::Stick ( )
{
	static UFunction* pFnStick = NULL;

	if ( ! pFnStick )
		pFnStick = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.Stick" );

	AKFProj_RicochetStickBullet_execStick_Parms Stick_Parms;

	this->ProcessEvent ( pFnStick, &Stick_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.SpawnFlightEffects
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetStickBullet::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.SpawnFlightEffects" );

	AKFProj_RicochetStickBullet_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.DecodeSmallVector
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetStickBullet::DecodeSmallVector ( )
{
	static UFunction* pFnDecodeSmallVector = NULL;

	if ( ! pFnDecodeSmallVector )
		pFnDecodeSmallVector = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.DecodeSmallVector" );

	AKFProj_RicochetStickBullet_execDecodeSmallVector_Parms DecodeSmallVector_Parms;

	this->ProcessEvent ( pFnDecodeSmallVector, &DecodeSmallVector_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.EncodeSmallVector
// [0x00020102] 
// Parameters infos:

void AKFProj_RicochetStickBullet::EncodeSmallVector ( )
{
	static UFunction* pFnEncodeSmallVector = NULL;

	if ( ! pFnEncodeSmallVector )
		pFnEncodeSmallVector = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.EncodeSmallVector" );

	AKFProj_RicochetStickBullet_execEncodeSmallVector_Parms EncodeSmallVector_Parms;

	this->ProcessEvent ( pFnEncodeSmallVector, &EncodeSmallVector_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.HitWall
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProj_RicochetStickBullet::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.HitWall" );

	AKFProj_RicochetStickBullet_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFProj_RicochetStickBullet::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.PreBeginPlay" );

	AKFProj_RicochetStickBullet_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function KFGame.KFProj_RicochetStickBullet.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_RicochetStickBullet::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFProj_RicochetStickBullet.ReplicatedEvent" );

	AKFProj_RicochetStickBullet_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFSeqAct_ShowPath.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAct_ShowPath::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqAct_ShowPath.Activated" );

	UKFSeqAct_ShowPath_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function KFGame.KFReplicatedShowPathActor.GetPathClass
// [0x00020102] 
// Parameters infos:

void AKFReplicatedShowPathActor::GetPathClass ( )
{
	static UFunction* pFnGetPathClass = NULL;

	if ( ! pFnGetPathClass )
		pFnGetPathClass = UObject::FindObject< UFunction > ( "Function KFGame.KFReplicatedShowPathActor.GetPathClass" );

	AKFReplicatedShowPathActor_execGetPathClass_Parms GetPathClass_Parms;

	this->ProcessEvent ( pFnGetPathClass, &GetPathClass_Parms, NULL );
};

// Function KFGame.KFReplicatedShowPathActor.ShowPath
// [0x00020102] 
// Parameters infos:

void AKFReplicatedShowPathActor::ShowPath ( )
{
	static UFunction* pFnShowPath = NULL;

	if ( ! pFnShowPath )
		pFnShowPath = UObject::FindObject< UFunction > ( "Function KFGame.KFReplicatedShowPathActor.ShowPath" );

	AKFReplicatedShowPathActor_execShowPath_Parms ShowPath_Parms;

	this->ProcessEvent ( pFnShowPath, &ShowPath_Parms, NULL );
};

// Function KFGame.KFReplicatedShowPathActor.Timer_ShowPath
// [0x00020102] 
// Parameters infos:

void AKFReplicatedShowPathActor::Timer_ShowPath ( )
{
	static UFunction* pFnTimer_ShowPath = NULL;

	if ( ! pFnTimer_ShowPath )
		pFnTimer_ShowPath = UObject::FindObject< UFunction > ( "Function KFGame.KFReplicatedShowPathActor.Timer_ShowPath" );

	AKFReplicatedShowPathActor_execTimer_ShowPath_Parms Timer_ShowPath_Parms;

	this->ProcessEvent ( pFnTimer_ShowPath, &Timer_ShowPath_Parms, NULL );
};

// Function KFGame.KFReplicatedShowPathActor.InitPath
// [0x00020102] 
// Parameters infos:

void AKFReplicatedShowPathActor::InitPath ( )
{
	static UFunction* pFnInitPath = NULL;

	if ( ! pFnInitPath )
		pFnInitPath = UObject::FindObject< UFunction > ( "Function KFGame.KFReplicatedShowPathActor.InitPath" );

	AKFReplicatedShowPathActor_execInitPath_Parms InitPath_Parms;

	this->ProcessEvent ( pFnInitPath, &InitPath_Parms, NULL );
};

// Function KFGame.KFReplicatedShowPathActor.SetObjeciveType
// [0x00020100] 
// Parameters infos:

void AKFReplicatedShowPathActor::SetObjeciveType ( )
{
	static UFunction* pFnSetObjeciveType = NULL;

	if ( ! pFnSetObjeciveType )
		pFnSetObjeciveType = UObject::FindObject< UFunction > ( "Function KFGame.KFReplicatedShowPathActor.SetObjeciveType" );

	AKFReplicatedShowPathActor_execSetObjeciveType_Parms SetObjeciveType_Parms;

	this->ProcessEvent ( pFnSetObjeciveType, &SetObjeciveType_Parms, NULL );
};

// Function KFGame.KFReplicatedShowPathActor.SetPathTarget
// [0x00024002] 
// Parameters infos:

void AKFReplicatedShowPathActor::SetPathTarget ( )
{
	static UFunction* pFnSetPathTarget = NULL;

	if ( ! pFnSetPathTarget )
		pFnSetPathTarget = UObject::FindObject< UFunction > ( "Function KFGame.KFReplicatedShowPathActor.SetPathTarget" );

	AKFReplicatedShowPathActor_execSetPathTarget_Parms SetPathTarget_Parms;

	this->ProcessEvent ( pFnSetPathTarget, &SetPathTarget_Parms, NULL );
};

// Function KFGame.KFReplicatedShowPathActor.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFReplicatedShowPathActor::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function KFGame.KFReplicatedShowPathActor.ReplicatedEvent" );

	AKFReplicatedShowPathActor_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function KFGame.KFSeqAct_SetTraderVolumeIgnore.IsActorInVolume
// [0x00022002] 
// Parameters infos:

void UKFSeqAct_SetTraderVolumeIgnore::IsActorInVolume ( )
{
	static UFunction* pFnIsActorInVolume = NULL;

	if ( ! pFnIsActorInVolume )
		pFnIsActorInVolume = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqAct_SetTraderVolumeIgnore.IsActorInVolume" );

	UKFSeqAct_SetTraderVolumeIgnore_execIsActorInVolume_Parms IsActorInVolume_Parms;

	this->ProcessEvent ( pFnIsActorInVolume, &IsActorInVolume_Parms, NULL );
};

// Function KFGame.KFSeqAct_SetTraderVolumeIgnore.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAct_SetTraderVolumeIgnore::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqAct_SetTraderVolumeIgnore.Activated" );

	UKFSeqAct_SetTraderVolumeIgnore_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function KFGame.KFSeqAct_FlickerLightning.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAct_FlickerLightning::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqAct_FlickerLightning.Activated" );

	UKFSeqAct_FlickerLightning_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function KFGame.KFSeqAct_SetPathnodeExtraCost.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAct_SetPathnodeExtraCost::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqAct_SetPathnodeExtraCost.Activated" );

	UKFSeqAct_SetPathnodeExtraCost_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function KFGame.KFSeqAct_SetPawnIconVisibility.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAct_SetPawnIconVisibility::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqAct_SetPawnIconVisibility.Activated" );

	UKFSeqAct_SetPawnIconVisibility_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function KFGame.KFSeqAct_SetTrader.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAct_SetTrader::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqAct_SetTrader.Activated" );

	UKFSeqAct_SetTrader_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function KFGame.KFSeqAction_DoshVault.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAction_DoshVault::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqAction_DoshVault.Activated" );

	UKFSeqAction_DoshVault_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function KFGame.KFSeqEvent_MapObjectiveActivated.NotifyDeactivation
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MapObjectiveActivated::NotifyDeactivation ( )
{
	static UFunction* pFnNotifyDeactivation = NULL;

	if ( ! pFnNotifyDeactivation )
		pFnNotifyDeactivation = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_MapObjectiveActivated.NotifyDeactivation" );

	UKFSeqEvent_MapObjectiveActivated_execNotifyDeactivation_Parms NotifyDeactivation_Parms;

	this->ProcessEvent ( pFnNotifyDeactivation, &NotifyDeactivation_Parms, NULL );
};

// Function KFGame.KFSeqEvent_MapObjectiveActivated.NotifyActivation
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MapObjectiveActivated::NotifyActivation ( )
{
	static UFunction* pFnNotifyActivation = NULL;

	if ( ! pFnNotifyActivation )
		pFnNotifyActivation = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_MapObjectiveActivated.NotifyActivation" );

	UKFSeqEvent_MapObjectiveActivated_execNotifyActivation_Parms NotifyActivation_Parms;

	this->ProcessEvent ( pFnNotifyActivation, &NotifyActivation_Parms, NULL );
};

// Function KFGame.KFSeqEvent_MinigameActivated.NotifyStartup
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MinigameActivated::NotifyStartup ( )
{
	static UFunction* pFnNotifyStartup = NULL;

	if ( ! pFnNotifyStartup )
		pFnNotifyStartup = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_MinigameActivated.NotifyStartup" );

	UKFSeqEvent_MinigameActivated_execNotifyStartup_Parms NotifyStartup_Parms;

	this->ProcessEvent ( pFnNotifyStartup, &NotifyStartup_Parms, NULL );
};

// Function KFGame.KFSeqEvent_MinigameActivated.NotifyDeactivation
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MinigameActivated::NotifyDeactivation ( )
{
	static UFunction* pFnNotifyDeactivation = NULL;

	if ( ! pFnNotifyDeactivation )
		pFnNotifyDeactivation = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_MinigameActivated.NotifyDeactivation" );

	UKFSeqEvent_MinigameActivated_execNotifyDeactivation_Parms NotifyDeactivation_Parms;

	this->ProcessEvent ( pFnNotifyDeactivation, &NotifyDeactivation_Parms, NULL );
};

// Function KFGame.KFSeqEvent_MinigameActivated.NotifyDelayedActivation
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MinigameActivated::NotifyDelayedActivation ( )
{
	static UFunction* pFnNotifyDelayedActivation = NULL;

	if ( ! pFnNotifyDelayedActivation )
		pFnNotifyDelayedActivation = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_MinigameActivated.NotifyDelayedActivation" );

	UKFSeqEvent_MinigameActivated_execNotifyDelayedActivation_Parms NotifyDelayedActivation_Parms;

	this->ProcessEvent ( pFnNotifyDelayedActivation, &NotifyDelayedActivation_Parms, NULL );
};

// Function KFGame.KFSeqEvent_MinigameActivated.NotifyActivation
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MinigameActivated::NotifyActivation ( )
{
	static UFunction* pFnNotifyActivation = NULL;

	if ( ! pFnNotifyActivation )
		pFnNotifyActivation = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_MinigameActivated.NotifyActivation" );

	UKFSeqEvent_MinigameActivated_execNotifyActivation_Parms NotifyActivation_Parms;

	this->ProcessEvent ( pFnNotifyActivation, &NotifyActivation_Parms, NULL );
};

// Function KFGame.KFSeqEvent_MinigameStateChanged.StateChanged
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MinigameStateChanged::StateChanged ( )
{
	static UFunction* pFnStateChanged = NULL;

	if ( ! pFnStateChanged )
		pFnStateChanged = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_MinigameStateChanged.StateChanged" );

	UKFSeqEvent_MinigameStateChanged_execStateChanged_Parms StateChanged_Parms;

	this->ProcessEvent ( pFnStateChanged, &StateChanged_Parms, NULL );
};

// Function KFGame.KFSeqEvent_WaveEnd.SetWaveNum
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_WaveEnd::SetWaveNum ( )
{
	static UFunction* pFnSetWaveNum = NULL;

	if ( ! pFnSetWaveNum )
		pFnSetWaveNum = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_WaveEnd.SetWaveNum" );

	UKFSeqEvent_WaveEnd_execSetWaveNum_Parms SetWaveNum_Parms;

	this->ProcessEvent ( pFnSetWaveNum, &SetWaveNum_Parms, NULL );
};

// Function KFGame.KFSeqEvent_WaveProgress.SetWaveProgress
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_WaveProgress::SetWaveProgress ( )
{
	static UFunction* pFnSetWaveProgress = NULL;

	if ( ! pFnSetWaveProgress )
		pFnSetWaveProgress = UObject::FindObject< UFunction > ( "Function KFGame.KFSeqEvent_WaveProgress.SetWaveProgress" );

	UKFSeqEvent_WaveProgress_execSetWaveProgress_Parms SetWaveProgress_Parms;

	this->ProcessEvent ( pFnSetWaveProgress, &SetWaveProgress_Parms, NULL );
};

// Function KFGame.KFSFXVolume.GetRandomInterval
// [0x00020102] 
// Parameters infos:

void AKFSFXVolume::GetRandomInterval ( )
{
	static UFunction* pFnGetRandomInterval = NULL;

	if ( ! pFnGetRandomInterval )
		pFnGetRandomInterval = UObject::FindObject< UFunction > ( "Function KFGame.KFSFXVolume.GetRandomInterval" );

	AKFSFXVolume_execGetRandomInterval_Parms GetRandomInterval_Parms;

	this->ProcessEvent ( pFnGetRandomInterval, &GetRandomInterval_Parms, NULL );
};

// Function KFGame.KFSFXVolume.PlaySFX
// [0x00820102] 
// Parameters infos:

void AKFSFXVolume::PlaySFX ( )
{
	static UFunction* pFnPlaySFX = NULL;

	if ( ! pFnPlaySFX )
		pFnPlaySFX = UObject::FindObject< UFunction > ( "Function KFGame.KFSFXVolume.PlaySFX" );

	AKFSFXVolume_execPlaySFX_Parms PlaySFX_Parms;

	this->ProcessEvent ( pFnPlaySFX, &PlaySFX_Parms, NULL );
};

// Function KFGame.KFSFXVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFSFXVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFSFXVolume.PostBeginPlay" );

	AKFSFXVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFSkeletalMeshActor.OnSetMaterial
// [0x00020102] 
// Parameters infos:

void AKFSkeletalMeshActor::OnSetMaterial ( )
{
	static UFunction* pFnOnSetMaterial = NULL;

	if ( ! pFnOnSetMaterial )
		pFnOnSetMaterial = UObject::FindObject< UFunction > ( "Function KFGame.KFSkeletalMeshActor.OnSetMaterial" );

	AKFSkeletalMeshActor_execOnSetMaterial_Parms OnSetMaterial_Parms;

	this->ProcessEvent ( pFnOnSetMaterial, &OnSetMaterial_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveButtonReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveButtonReleased" );

	UKFSM_PlayerMeleeBase_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveButtonRetriggered
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveButtonRetriggered" );

	UKFSM_PlayerMeleeBase_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveFlagsUpdated" );

	UKFSM_PlayerMeleeBase_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.Timer_AnimInterrupt
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::Timer_AnimInterrupt ( )
{
	static UFunction* pFnTimer_AnimInterrupt = NULL;

	if ( ! pFnTimer_AnimInterrupt )
		pFnTimer_AnimInterrupt = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.Timer_AnimInterrupt" );

	UKFSM_PlayerMeleeBase_execTimer_AnimInterrupt_Parms Timer_AnimInterrupt_Parms;

	this->ProcessEvent ( pFnTimer_AnimInterrupt, &Timer_AnimInterrupt_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.UnpackSpecialMoveFlags
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::UnpackSpecialMoveFlags ( )
{
	static UFunction* pFnUnpackSpecialMoveFlags = NULL;

	if ( ! pFnUnpackSpecialMoveFlags )
		pFnUnpackSpecialMoveFlags = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.UnpackSpecialMoveFlags" );

	UKFSM_PlayerMeleeBase_execUnpackSpecialMoveFlags_Parms UnpackSpecialMoveFlags_Parms;

	this->ProcessEvent ( pFnUnpackSpecialMoveFlags, &UnpackSpecialMoveFlags_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.GetFourWayMoveDirection
// [0x00822002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::GetFourWayMoveDirection ( )
{
	static UFunction* pFnGetFourWayMoveDirection = NULL;

	if ( ! pFnGetFourWayMoveDirection )
		pFnGetFourWayMoveDirection = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.GetFourWayMoveDirection" );

	UKFSM_PlayerMeleeBase_execGetFourWayMoveDirection_Parms GetFourWayMoveDirection_Parms;

	this->ProcessEvent ( pFnGetFourWayMoveDirection, &GetFourWayMoveDirection_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.IsInSpecialMode
// [0x00022002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::IsInSpecialMode ( )
{
	static UFunction* pFnIsInSpecialMode = NULL;

	if ( ! pFnIsInSpecialMode )
		pFnIsInSpecialMode = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.IsInSpecialMode" );

	UKFSM_PlayerMeleeBase_execIsInSpecialMode_Parms IsInSpecialMode_Parms;

	this->ProcessEvent ( pFnIsInSpecialMode, &IsInSpecialMode_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveEnded" );

	UKFSM_PlayerMeleeBase_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.SpecialMoveStarted" );

	UKFSM_PlayerMeleeBase_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_PlayerMeleeBase.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_PlayerMeleeBase::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_PlayerMeleeBase.PackFlagsBase" );

	UKFSM_PlayerMeleeBase_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function KFGame.KFSM_RangedAttack.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_RangedAttack::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RangedAttack.SpecialMoveEnded" );

	UKFSM_RangedAttack_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function KFGame.KFSM_RangedAttack.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_RangedAttack::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RangedAttack.PlayAnimation" );

	UKFSM_RangedAttack_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function KFGame.KFSM_RangedAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_RangedAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RangedAttack.SpecialMoveStarted" );

	UKFSM_RangedAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function KFGame.KFSM_RangedAttack.GetFireOffset
// [0x00020002] 
// Parameters infos:

void UKFSM_RangedAttack::GetFireOffset ( )
{
	static UFunction* pFnGetFireOffset = NULL;

	if ( ! pFnGetFireOffset )
		pFnGetFireOffset = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RangedAttack.GetFireOffset" );

	UKFSM_RangedAttack_execGetFireOffset_Parms GetFireOffset_Parms;

	this->ProcessEvent ( pFnGetFireOffset, &GetFireOffset_Parms, NULL );
};

// Function KFGame.KFSM_RangedAttack.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_RangedAttack::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RangedAttack.InternalCanDoSpecialMove" );

	UKFSM_RangedAttack_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function KFGame.KFSM_RangedAttack.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_RangedAttack::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function KFGame.KFSM_RangedAttack.PackFlagsBase" );

	UKFSM_RangedAttack_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function KFGame.KFTeleporter.SpecialHandling
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTeleporter::eventSpecialHandling ( )
{
	static UFunction* pFnSpecialHandling = NULL;

	if ( ! pFnSpecialHandling )
		pFnSpecialHandling = UObject::FindObject< UFunction > ( "Function KFGame.KFTeleporter.SpecialHandling" );

	AKFTeleporter_eventSpecialHandling_Parms SpecialHandling_Parms;

	this->ProcessEvent ( pFnSpecialHandling, &SpecialHandling_Parms, NULL );
};

// Function KFGame.KFTeleporter.PostTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFTeleporter::eventPostTouch ( )
{
	static UFunction* pFnPostTouch = NULL;

	if ( ! pFnPostTouch )
		pFnPostTouch = UObject::FindObject< UFunction > ( "Function KFGame.KFTeleporter.PostTouch" );

	AKFTeleporter_eventPostTouch_Parms PostTouch_Parms;

	this->ProcessEvent ( pFnPostTouch, &PostTouch_Parms, NULL );
};

// Function KFGame.KFTeleporter.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTeleporter::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFTeleporter.PostBeginPlay" );

	AKFTeleporter_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function KFGame.KFTeleporter.OnSetURLNum
// [0x00020002] 
// Parameters infos:

void AKFTeleporter::OnSetURLNum ( )
{
	static UFunction* pFnOnSetURLNum = NULL;

	if ( ! pFnOnSetURLNum )
		pFnOnSetURLNum = UObject::FindObject< UFunction > ( "Function KFGame.KFTeleporter.OnSetURLNum" );

	AKFTeleporter_execOnSetURLNum_Parms OnSetURLNum_Parms;

	this->ProcessEvent ( pFnOnSetURLNum, &OnSetURLNum_Parms, NULL );
};

// Function KFGame.KFVoiceInfo.GetNeedOurFlagMessageIndex
// [0x00022002] 
// Parameters infos:

void UKFVoiceInfo::GetNeedOurFlagMessageIndex ( )
{
	static UFunction* pFnGetNeedOurFlagMessageIndex = NULL;

	if ( ! pFnGetNeedOurFlagMessageIndex )
		pFnGetNeedOurFlagMessageIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFVoiceInfo.GetNeedOurFlagMessageIndex" );

	UKFVoiceInfo_execGetNeedOurFlagMessageIndex_Parms GetNeedOurFlagMessageIndex_Parms;

	this->ProcessEvent ( pFnGetNeedOurFlagMessageIndex, &GetNeedOurFlagMessageIndex_Parms, NULL );
};

// Function KFGame.KFVoiceInfo.GetGotYourBackMessageIndex
// [0x00022002] 
// Parameters infos:

void UKFVoiceInfo::GetGotYourBackMessageIndex ( )
{
	static UFunction* pFnGetGotYourBackMessageIndex = NULL;

	if ( ! pFnGetGotYourBackMessageIndex )
		pFnGetGotYourBackMessageIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFVoiceInfo.GetGotYourBackMessageIndex" );

	UKFVoiceInfo_execGetGotYourBackMessageIndex_Parms GetGotYourBackMessageIndex_Parms;

	this->ProcessEvent ( pFnGetGotYourBackMessageIndex, &GetGotYourBackMessageIndex_Parms, NULL );
};

// Function KFGame.KFVoiceInfo.GetFriendlyFireMessageIndex
// [0x00022002] 
// Parameters infos:

void UKFVoiceInfo::GetFriendlyFireMessageIndex ( )
{
	static UFunction* pFnGetFriendlyFireMessageIndex = NULL;

	if ( ! pFnGetFriendlyFireMessageIndex )
		pFnGetFriendlyFireMessageIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFVoiceInfo.GetFriendlyFireMessageIndex" );

	UKFVoiceInfo_execGetFriendlyFireMessageIndex_Parms GetFriendlyFireMessageIndex_Parms;

	this->ProcessEvent ( pFnGetFriendlyFireMessageIndex, &GetFriendlyFireMessageIndex_Parms, NULL );
};

// Function KFGame.KFVoiceInfo.GetAckMessageIndex
// [0x00022002] 
// Parameters infos:

void UKFVoiceInfo::GetAckMessageIndex ( )
{
	static UFunction* pFnGetAckMessageIndex = NULL;

	if ( ! pFnGetAckMessageIndex )
		pFnGetAckMessageIndex = UObject::FindObject< UFunction > ( "Function KFGame.KFVoiceInfo.GetAckMessageIndex" );

	UKFVoiceInfo_execGetAckMessageIndex_Parms GetAckMessageIndex_Parms;

	this->ProcessEvent ( pFnGetAckMessageIndex, &GetAckMessageIndex_Parms, NULL );
};

// Function KFGame.KFWeap_GrenadeLauncher_Base.ProcessInstantHitEx
// [0x00424102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_Base::ProcessInstantHitEx ( )
{
	static UFunction* pFnProcessInstantHitEx = NULL;

	if ( ! pFnProcessInstantHitEx )
		pFnProcessInstantHitEx = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_GrenadeLauncher_Base.ProcessInstantHitEx" );

	AKFWeap_GrenadeLauncher_Base_execProcessInstantHitEx_Parms ProcessInstantHitEx_Parms;

	this->ProcessEvent ( pFnProcessInstantHitEx, &ProcessInstantHitEx_Parms, NULL );
};

// Function KFGame.KFWeap_GrenadeLauncher_Base.GetReloadAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_Base::GetReloadAnimName ( )
{
	static UFunction* pFnGetReloadAnimName = NULL;

	if ( ! pFnGetReloadAnimName )
		pFnGetReloadAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_GrenadeLauncher_Base.GetReloadAnimName" );

	AKFWeap_GrenadeLauncher_Base_execGetReloadAnimName_Parms GetReloadAnimName_Parms;

	this->ProcessEvent ( pFnGetReloadAnimName, &GetReloadAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_GrenadeLauncher_Base.ShouldPlayFireLast
// [0x00020102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_Base::ShouldPlayFireLast ( )
{
	static UFunction* pFnShouldPlayFireLast = NULL;

	if ( ! pFnShouldPlayFireLast )
		pFnShouldPlayFireLast = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_GrenadeLauncher_Base.ShouldPlayFireLast" );

	AKFWeap_GrenadeLauncher_Base_execShouldPlayFireLast_Parms ShouldPlayFireLast_Parms;

	this->ProcessEvent ( pFnShouldPlayFireLast, &ShouldPlayFireLast_Parms, NULL );
};

// Function KFGame.KFWeap_GrenadeLauncher_Base.GetForceReloadDelay
// [0x00020102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_Base::GetForceReloadDelay ( )
{
	static UFunction* pFnGetForceReloadDelay = NULL;

	if ( ! pFnGetForceReloadDelay )
		pFnGetForceReloadDelay = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_GrenadeLauncher_Base.GetForceReloadDelay" );

	AKFWeap_GrenadeLauncher_Base_execGetForceReloadDelay_Parms GetForceReloadDelay_Parms;

	this->ProcessEvent ( pFnGetForceReloadDelay, &GetForceReloadDelay_Parms, NULL );
};

// Function KFGame.KFWeap_GrenadeLauncher_Base.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_GrenadeLauncher_Base::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_GrenadeLauncher_Base.GetTraderFilter" );

	AKFWeap_GrenadeLauncher_Base_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeap_GrenadeLauncher_Base.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_Base::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_GrenadeLauncher_Base.CalculateTraderWeaponStatDamage" );

	AKFWeap_GrenadeLauncher_Base_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function KFGame.KFWeap_RifleBase.ProcessInstantHitEx
// [0x00424102] 
// Parameters infos:

void AKFWeap_RifleBase::ProcessInstantHitEx ( )
{
	static UFunction* pFnProcessInstantHitEx = NULL;

	if ( ! pFnProcessInstantHitEx )
		pFnProcessInstantHitEx = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_RifleBase.ProcessInstantHitEx" );

	AKFWeap_RifleBase_execProcessInstantHitEx_Parms ProcessInstantHitEx_Parms;

	this->ProcessEvent ( pFnProcessInstantHitEx, &ProcessInstantHitEx_Parms, NULL );
};

// Function KFGame.KFWeap_RifleBase.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_RifleBase::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_RifleBase.GetTraderFilter" );

	AKFWeap_RifleBase_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeap_ShotgunBase.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_ShotgunBase::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ShotgunBase.GetTraderFilter" );

	AKFWeap_ShotgunBase_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeap_ShotgunBase.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_ShotgunBase::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ShotgunBase.CalculateTraderWeaponStatDamage" );

	AKFWeap_ShotgunBase_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function KFGame.KFWeap_ShotgunBase.AddMultiShotSpread
// [0x00822002] 
// Parameters infos:

void AKFWeap_ShotgunBase::AddMultiShotSpread ( )
{
	static UFunction* pFnAddMultiShotSpread = NULL;

	if ( ! pFnAddMultiShotSpread )
		pFnAddMultiShotSpread = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ShotgunBase.AddMultiShotSpread" );

	AKFWeap_ShotgunBase_execAddMultiShotSpread_Parms AddMultiShotSpread_Parms;

	this->ProcessEvent ( pFnAddMultiShotSpread, &AddMultiShotSpread_Parms, NULL );
};

// Function KFGame.KFWeap_ShotgunBase.AddSpread
// [0x00020102] 
// Parameters infos:

void AKFWeap_ShotgunBase::AddSpread ( )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ShotgunBase.AddSpread" );

	AKFWeap_ShotgunBase_execAddSpread_Parms AddSpread_Parms;

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );
};

// Function KFGame.KFWeap_ShotgunBase.HandleWeaponShotTaken
// [0x00020002] 
// Parameters infos:

void AKFWeap_ShotgunBase::HandleWeaponShotTaken ( )
{
	static UFunction* pFnHandleWeaponShotTaken = NULL;

	if ( ! pFnHandleWeaponShotTaken )
		pFnHandleWeaponShotTaken = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ShotgunBase.HandleWeaponShotTaken" );

	AKFWeap_ShotgunBase_execHandleWeaponShotTaken_Parms HandleWeaponShotTaken_Parms;

	this->ProcessEvent ( pFnHandleWeaponShotTaken, &HandleWeaponShotTaken_Parms, NULL );
};

// Function KFGame.KFWeap_ShotgunBase.GetNumProjectilesToFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_ShotgunBase::GetNumProjectilesToFire ( )
{
	static UFunction* pFnGetNumProjectilesToFire = NULL;

	if ( ! pFnGetNumProjectilesToFire )
		pFnGetNumProjectilesToFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ShotgunBase.GetNumProjectilesToFire" );

	AKFWeap_ShotgunBase_execGetNumProjectilesToFire_Parms GetNumProjectilesToFire_Parms;

	this->ProcessEvent ( pFnGetNumProjectilesToFire, &GetNumProjectilesToFire_Parms, NULL );
};

// Function KFGame.KFWeap_ShotgunBase.SpawnProjectile
// [0x00820102] 
// Parameters infos:

void AKFWeap_ShotgunBase::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ShotgunBase.SpawnProjectile" );

	AKFWeap_ShotgunBase_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function KFGame.KFWeap_SMGBase.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_SMGBase::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_SMGBase.GetTraderFilter" );

	AKFWeap_SMGBase_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_ThrownBase::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.CalculateTraderWeaponStatDamage" );

	AKFWeap_ThrownBase_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.ShouldIncrementFlashCountOnFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::ShouldIncrementFlashCountOnFire ( )
{
	static UFunction* pFnShouldIncrementFlashCountOnFire = NULL;

	if ( ! pFnShouldIncrementFlashCountOnFire )
		pFnShouldIncrementFlashCountOnFire = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.ShouldIncrementFlashCountOnFire" );

	AKFWeap_ThrownBase_execShouldIncrementFlashCountOnFire_Parms ShouldIncrementFlashCountOnFire_Parms;

	this->ProcessEvent ( pFnShouldIncrementFlashCountOnFire, &ShouldIncrementFlashCountOnFire_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.SendToFiringState
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::SendToFiringState ( )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.SendToFiringState" );

	AKFWeap_ThrownBase_execSendToFiringState_Parms SendToFiringState_Parms;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.PerformArtificialReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::PerformArtificialReload ( )
{
	static UFunction* pFnPerformArtificialReload = NULL;

	if ( ! pFnPerformArtificialReload )
		pFnPerformArtificialReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.PerformArtificialReload" );

	AKFWeap_ThrownBase_execPerformArtificialReload_Parms PerformArtificialReload_Parms;

	this->ProcessEvent ( pFnPerformArtificialReload, &PerformArtificialReload_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.ClientNotifyAmmoAddedEmpty
// [0x010201C2] 
// Parameters infos:

void AKFWeap_ThrownBase::ClientNotifyAmmoAddedEmpty ( )
{
	static UFunction* pFnClientNotifyAmmoAddedEmpty = NULL;

	if ( ! pFnClientNotifyAmmoAddedEmpty )
		pFnClientNotifyAmmoAddedEmpty = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.ClientNotifyAmmoAddedEmpty" );

	AKFWeap_ThrownBase_execClientNotifyAmmoAddedEmpty_Parms ClientNotifyAmmoAddedEmpty_Parms;

	this->ProcessEvent ( pFnClientNotifyAmmoAddedEmpty, &ClientNotifyAmmoAddedEmpty_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.AllowSprinting
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::AllowSprinting ( )
{
	static UFunction* pFnAllowSprinting = NULL;

	if ( ! pFnAllowSprinting )
		pFnAllowSprinting = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.AllowSprinting" );

	AKFWeap_ThrownBase_execAllowSprinting_Parms AllowSprinting_Parms;

	this->ProcessEvent ( pFnAllowSprinting, &AllowSprinting_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.ShouldAutoReload" );

	AKFWeap_ThrownBase_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.ShouldPlayFireLast
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::ShouldPlayFireLast ( )
{
	static UFunction* pFnShouldPlayFireLast = NULL;

	if ( ! pFnShouldPlayFireLast )
		pFnShouldPlayFireLast = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.ShouldPlayFireLast" );

	AKFWeap_ThrownBase_execShouldPlayFireLast_Parms ShouldPlayFireLast_Parms;

	this->ProcessEvent ( pFnShouldPlayFireLast, &ShouldPlayFireLast_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.GetGrenadeThrowAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::GetGrenadeThrowAnim ( )
{
	static UFunction* pFnGetGrenadeThrowAnim = NULL;

	if ( ! pFnGetGrenadeThrowAnim )
		pFnGetGrenadeThrowAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.GetGrenadeThrowAnim" );

	AKFWeap_ThrownBase_execGetGrenadeThrowAnim_Parms GetGrenadeThrowAnim_Parms;

	this->ProcessEvent ( pFnGetGrenadeThrowAnim, &GetGrenadeThrowAnim_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.GetEquipAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::GetEquipAnimName ( )
{
	static UFunction* pFnGetEquipAnimName = NULL;

	if ( ! pFnGetEquipAnimName )
		pFnGetEquipAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.GetEquipAnimName" );

	AKFWeap_ThrownBase_execGetEquipAnimName_Parms GetEquipAnimName_Parms;

	this->ProcessEvent ( pFnGetEquipAnimName, &GetEquipAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.GetSprintEndAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::GetSprintEndAnimName ( )
{
	static UFunction* pFnGetSprintEndAnimName = NULL;

	if ( ! pFnGetSprintEndAnimName )
		pFnGetSprintEndAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.GetSprintEndAnimName" );

	AKFWeap_ThrownBase_execGetSprintEndAnimName_Parms GetSprintEndAnimName_Parms;

	this->ProcessEvent ( pFnGetSprintEndAnimName, &GetSprintEndAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.GetSprintLoopAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::GetSprintLoopAnimName ( )
{
	static UFunction* pFnGetSprintLoopAnimName = NULL;

	if ( ! pFnGetSprintLoopAnimName )
		pFnGetSprintLoopAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.GetSprintLoopAnimName" );

	AKFWeap_ThrownBase_execGetSprintLoopAnimName_Parms GetSprintLoopAnimName_Parms;

	this->ProcessEvent ( pFnGetSprintLoopAnimName, &GetSprintLoopAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.GetSprintStartAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::GetSprintStartAnimName ( )
{
	static UFunction* pFnGetSprintStartAnimName = NULL;

	if ( ! pFnGetSprintStartAnimName )
		pFnGetSprintStartAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.GetSprintStartAnimName" );

	AKFWeap_ThrownBase_execGetSprintStartAnimName_Parms GetSprintStartAnimName_Parms;

	this->ProcessEvent ( pFnGetSprintStartAnimName, &GetSprintStartAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.GetWeaponPutDownAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::GetWeaponPutDownAnimName ( )
{
	static UFunction* pFnGetWeaponPutDownAnimName = NULL;

	if ( ! pFnGetWeaponPutDownAnimName )
		pFnGetWeaponPutDownAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.GetWeaponPutDownAnimName" );

	AKFWeap_ThrownBase_execGetWeaponPutDownAnimName_Parms GetWeaponPutDownAnimName_Parms;

	this->ProcessEvent ( pFnGetWeaponPutDownAnimName, &GetWeaponPutDownAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.GetMeleeAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::GetMeleeAnimName ( )
{
	static UFunction* pFnGetMeleeAnimName = NULL;

	if ( ! pFnGetMeleeAnimName )
		pFnGetMeleeAnimName = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.GetMeleeAnimName" );

	AKFWeap_ThrownBase_execGetMeleeAnimName_Parms GetMeleeAnimName_Parms;

	this->ProcessEvent ( pFnGetMeleeAnimName, &GetMeleeAnimName_Parms, NULL );
};

// Function KFGame.KFWeap_ThrownBase.ShouldPlayLastAnims
// [0x00020102] 
// Parameters infos:

void AKFWeap_ThrownBase::ShouldPlayLastAnims ( )
{
	static UFunction* pFnShouldPlayLastAnims = NULL;

	if ( ! pFnShouldPlayLastAnims )
		pFnShouldPlayLastAnims = UObject::FindObject< UFunction > ( "Function KFGame.KFWeap_ThrownBase.ShouldPlayLastAnims" );

	AKFWeap_ThrownBase_execShouldPlayLastAnims_Parms ShouldPlayLastAnims_Parms;

	this->ProcessEvent ( pFnShouldPlayLastAnims, &ShouldPlayLastAnims_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.HasOutdoorLighting
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::HasOutdoorLighting ( )
{
	static UFunction* pFnHasOutdoorLighting = NULL;

	if ( ! pFnHasOutdoorLighting )
		pFnHasOutdoorLighting = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.HasOutdoorLighting" );

	AKFWeapAttach_DualBase_execHasOutdoorLighting_Parms HasOutdoorLighting_Parms;

	this->ProcessEvent ( pFnHasOutdoorLighting, &HasOutdoorLighting_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.HasIndoorLighting
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::HasIndoorLighting ( )
{
	static UFunction* pFnHasIndoorLighting = NULL;

	if ( ! pFnHasIndoorLighting )
		pFnHasIndoorLighting = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.HasIndoorLighting" );

	AKFWeapAttach_DualBase_execHasIndoorLighting_Parms HasIndoorLighting_Parms;

	this->ProcessEvent ( pFnHasIndoorLighting, &HasIndoorLighting_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.SetMeshLightingChannels
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::SetMeshLightingChannels ( )
{
	static UFunction* pFnSetMeshLightingChannels = NULL;

	if ( ! pFnSetMeshLightingChannels )
		pFnSetMeshLightingChannels = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.SetMeshLightingChannels" );

	AKFWeapAttach_DualBase_execSetMeshLightingChannels_Parms SetMeshLightingChannels_Parms;

	this->ProcessEvent ( pFnSetMeshLightingChannels, &SetMeshLightingChannels_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.PlayWeaponMeshAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::PlayWeaponMeshAnim ( )
{
	static UFunction* pFnPlayWeaponMeshAnim = NULL;

	if ( ! pFnPlayWeaponMeshAnim )
		pFnPlayWeaponMeshAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.PlayWeaponMeshAnim" );

	AKFWeapAttach_DualBase_execPlayWeaponMeshAnim_Parms PlayWeaponMeshAnim_Parms;

	this->ProcessEvent ( pFnPlayWeaponMeshAnim, &PlayWeaponMeshAnim_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.GetMuzzleLocation
// [0x00824102] 
// Parameters infos:

void AKFWeapAttach_DualBase::GetMuzzleLocation ( )
{
	static UFunction* pFnGetMuzzleLocation = NULL;

	if ( ! pFnGetMuzzleLocation )
		pFnGetMuzzleLocation = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.GetMuzzleLocation" );

	AKFWeapAttach_DualBase_execGetMuzzleLocation_Parms GetMuzzleLocation_Parms;

	this->ProcessEvent ( pFnGetMuzzleLocation, &GetMuzzleLocation_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.CauseMuzzleFlash" );

	AKFWeapAttach_DualBase_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.PlayPawnFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::PlayPawnFireAnim ( )
{
	static UFunction* pFnPlayPawnFireAnim = NULL;

	if ( ! pFnPlayPawnFireAnim )
		pFnPlayPawnFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.PlayPawnFireAnim" );

	AKFWeapAttach_DualBase_execPlayPawnFireAnim_Parms PlayPawnFireAnim_Parms;

	this->ProcessEvent ( pFnPlayPawnFireAnim, &PlayPawnFireAnim_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.PlayWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::PlayWeaponFireAnim ( )
{
	static UFunction* pFnPlayWeaponFireAnim = NULL;

	if ( ! pFnPlayWeaponFireAnim )
		pFnPlayWeaponFireAnim = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.PlayWeaponFireAnim" );

	AKFWeapAttach_DualBase_execPlayWeaponFireAnim_Parms PlayWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnPlayWeaponFireAnim, &PlayWeaponFireAnim_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::ThirdPersonFireEffects ( )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.ThirdPersonFireEffects" );

	AKFWeapAttach_DualBase_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.ChooseActiveWeapon
// [0x00020002] 
// Parameters infos:

void AKFWeapAttach_DualBase::ChooseActiveWeapon ( )
{
	static UFunction* pFnChooseActiveWeapon = NULL;

	if ( ! pFnChooseActiveWeapon )
		pFnChooseActiveWeapon = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.ChooseActiveWeapon" );

	AKFWeapAttach_DualBase_execChooseActiveWeapon_Parms ChooseActiveWeapon_Parms;

	this->ProcessEvent ( pFnChooseActiveWeapon, &ChooseActiveWeapon_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.SetWeaponSkin
// [0x00020002] 
// Parameters infos:

void AKFWeapAttach_DualBase::SetWeaponSkin ( )
{
	static UFunction* pFnSetWeaponSkin = NULL;

	if ( ! pFnSetWeaponSkin )
		pFnSetWeaponSkin = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.SetWeaponSkin" );

	AKFWeapAttach_DualBase_execSetWeaponSkin_Parms SetWeaponSkin_Parms;

	this->ProcessEvent ( pFnSetWeaponSkin, &SetWeaponSkin_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.AttachMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::AttachMuzzleFlash ( )
{
	static UFunction* pFnAttachMuzzleFlash = NULL;

	if ( ! pFnAttachMuzzleFlash )
		pFnAttachMuzzleFlash = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.AttachMuzzleFlash" );

	AKFWeapAttach_DualBase_execAttachMuzzleFlash_Parms AttachMuzzleFlash_Parms;

	this->ProcessEvent ( pFnAttachMuzzleFlash, &AttachMuzzleFlash_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.DetachFrom
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::DetachFrom ( )
{
	static UFunction* pFnDetachFrom = NULL;

	if ( ! pFnDetachFrom )
		pFnDetachFrom = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.DetachFrom" );

	AKFWeapAttach_DualBase_execDetachFrom_Parms DetachFrom_Parms;

	this->ProcessEvent ( pFnDetachFrom, &DetachFrom_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.AttachTo
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_DualBase::AttachTo ( )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.AttachTo" );

	AKFWeapAttach_DualBase_execAttachTo_Parms AttachTo_Parms;

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.ChangeVisibility
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWeapAttach_DualBase::eventChangeVisibility ( )
{
	static UFunction* pFnChangeVisibility = NULL;

	if ( ! pFnChangeVisibility )
		pFnChangeVisibility = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.ChangeVisibility" );

	AKFWeapAttach_DualBase_eventChangeVisibility_Parms ChangeVisibility_Parms;

	this->ProcessEvent ( pFnChangeVisibility, &ChangeVisibility_Parms, NULL );
};

// Function KFGame.KFWeapAttach_DualBase.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWeapAttach_DualBase::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function KFGame.KFWeapAttach_DualBase.PreBeginPlay" );

	AKFWeapAttach_DualBase_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif