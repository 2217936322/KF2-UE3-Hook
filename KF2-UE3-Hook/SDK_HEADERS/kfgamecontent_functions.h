/*
#############################################################################################
# Killing Floor 2 (1.8787) SDK
# Generated with TheFeckless UE3 SDK Generator v1.4_Beta-Rev.51
# ========================================================================================= #
# File: kfgamecontent_functions.h
# ========================================================================================= #
# Credits: uNrEaL, Tamimego, SystemFiles, R00T88, _silencer, the1domo, K@N@VEL
# Thanks: HOOAH07, lowHertz
# Forums: www.uc-forum.com, www.gamedeception.net
#############################################################################################
*/

#ifdef _MSC_VER
	#pragma pack ( push, 0x4 )
#endif

/*
# ========================================================================================= #
# Functions
# ========================================================================================= #
*/

// Function kfgamecontent.KFAIController_ZedPatriarch.DrawDebug
// [0x00020102] 
// Parameters infos:

void AKFAIController_ZedPatriarch::DrawDebug ( )
{
	static UFunction* pFnDrawDebug = NULL;

	if ( ! pFnDrawDebug )
		pFnDrawDebug = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.DrawDebug" );

	AKFAIController_ZedPatriarch_execDrawDebug_Parms DrawDebug_Parms;

	this->ProcessEvent ( pFnDrawDebug, &DrawDebug_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.PlayDamagePlayerDialog
// [0x00020000] 
// Parameters infos:

void AKFAIController_ZedPatriarch::PlayDamagePlayerDialog ( )
{
	static UFunction* pFnPlayDamagePlayerDialog = NULL;

	if ( ! pFnPlayDamagePlayerDialog )
		pFnPlayDamagePlayerDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.PlayDamagePlayerDialog" );

	AKFAIController_ZedPatriarch_execPlayDamagePlayerDialog_Parms PlayDamagePlayerDialog_Parms;

	this->ProcessEvent ( pFnPlayDamagePlayerDialog, &PlayDamagePlayerDialog_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.EnterZedVictoryState
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::EnterZedVictoryState ( )
{
	static UFunction* pFnEnterZedVictoryState = NULL;

	if ( ! pFnEnterZedVictoryState )
		pFnEnterZedVictoryState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.EnterZedVictoryState" );

	AKFAIController_ZedPatriarch_execEnterZedVictoryState_Parms EnterZedVictoryState_Parms;

	this->ProcessEvent ( pFnEnterZedVictoryState, &EnterZedVictoryState_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.ForceHeal
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::ForceHeal ( )
{
	static UFunction* pFnForceHeal = NULL;

	if ( ! pFnForceHeal )
		pFnForceHeal = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.ForceHeal" );

	AKFAIController_ZedPatriarch_execForceHeal_Parms ForceHeal_Parms;

	this->ProcessEvent ( pFnForceHeal, &ForceHeal_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NotifyFleeFinished
// [0x00024002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NotifyFleeFinished ( )
{
	static UFunction* pFnNotifyFleeFinished = NULL;

	if ( ! pFnNotifyFleeFinished )
		pFnNotifyFleeFinished = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NotifyFleeFinished" );

	AKFAIController_ZedPatriarch_execNotifyFleeFinished_Parms NotifyFleeFinished_Parms;

	this->ProcessEvent ( pFnNotifyFleeFinished, &NotifyFleeFinished_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.Flee
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::Flee ( )
{
	static UFunction* pFnFlee = NULL;

	if ( ! pFnFlee )
		pFnFlee = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.Flee" );

	AKFAIController_ZedPatriarch_execFlee_Parms Flee_Parms;

	this->ProcessEvent ( pFnFlee, &Flee_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.DoFleeFrom
// [0x00024002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::DoFleeFrom ( )
{
	static UFunction* pFnDoFleeFrom = NULL;

	if ( ! pFnDoFleeFrom )
		pFnDoFleeFrom = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.DoFleeFrom" );

	AKFAIController_ZedPatriarch_execDoFleeFrom_Parms DoFleeFrom_Parms;

	this->ProcessEvent ( pFnDoFleeFrom, &DoFleeFrom_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.DoHeavyZedBump
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::DoHeavyZedBump ( )
{
	static UFunction* pFnDoHeavyZedBump = NULL;

	if ( ! pFnDoHeavyZedBump )
		pFnDoHeavyZedBump = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.DoHeavyZedBump" );

	AKFAIController_ZedPatriarch_execDoHeavyZedBump_Parms DoHeavyZedBump_Parms;

	this->ProcessEvent ( pFnDoHeavyZedBump, &DoHeavyZedBump_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.DoHeavyBump
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::DoHeavyBump ( )
{
	static UFunction* pFnDoHeavyBump = NULL;

	if ( ! pFnDoHeavyBump )
		pFnDoHeavyBump = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.DoHeavyBump" );

	AKFAIController_ZedPatriarch_execDoHeavyBump_Parms DoHeavyBump_Parms;

	this->ProcessEvent ( pFnDoHeavyBump, &DoHeavyBump_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.Timer_SearchForChargeObstructions
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::Timer_SearchForChargeObstructions ( )
{
	static UFunction* pFnTimer_SearchForChargeObstructions = NULL;

	if ( ! pFnTimer_SearchForChargeObstructions )
		pFnTimer_SearchForChargeObstructions = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.Timer_SearchForChargeObstructions" );

	AKFAIController_ZedPatriarch_execTimer_SearchForChargeObstructions_Parms Timer_SearchForChargeObstructions_Parms;

	this->ProcessEvent ( pFnTimer_SearchForChargeObstructions, &Timer_SearchForChargeObstructions_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.Timer_SearchForFleeObstructions
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::Timer_SearchForFleeObstructions ( )
{
	static UFunction* pFnTimer_SearchForFleeObstructions = NULL;

	if ( ! pFnTimer_SearchForFleeObstructions )
		pFnTimer_SearchForFleeObstructions = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.Timer_SearchForFleeObstructions" );

	AKFAIController_ZedPatriarch_execTimer_SearchForFleeObstructions_Parms Timer_SearchForFleeObstructions_Parms;

	this->ProcessEvent ( pFnTimer_SearchForFleeObstructions, &Timer_SearchForFleeObstructions_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NextBattlePhase
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NextBattlePhase ( )
{
	static UFunction* pFnNextBattlePhase = NULL;

	if ( ! pFnNextBattlePhase )
		pFnNextBattlePhase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NextBattlePhase" );

	AKFAIController_ZedPatriarch_execNextBattlePhase_Parms NextBattlePhase_Parms;

	this->ProcessEvent ( pFnNextBattlePhase, &NextBattlePhase_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.Timer_StopSummoningZeds
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::Timer_StopSummoningZeds ( )
{
	static UFunction* pFnTimer_StopSummoningZeds = NULL;

	if ( ! pFnTimer_StopSummoningZeds )
		pFnTimer_StopSummoningZeds = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.Timer_StopSummoningZeds" );

	AKFAIController_ZedPatriarch_execTimer_StopSummoningZeds_Parms Timer_StopSummoningZeds_Parms;

	this->ProcessEvent ( pFnTimer_StopSummoningZeds, &Timer_StopSummoningZeds_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.AmIAllowedToSuicideWhenStuck
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::AmIAllowedToSuicideWhenStuck ( )
{
	static UFunction* pFnAmIAllowedToSuicideWhenStuck = NULL;

	if ( ! pFnAmIAllowedToSuicideWhenStuck )
		pFnAmIAllowedToSuicideWhenStuck = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.AmIAllowedToSuicideWhenStuck" );

	AKFAIController_ZedPatriarch_execAmIAllowedToSuicideWhenStuck_Parms AmIAllowedToSuicideWhenStuck_Parms;

	this->ProcessEvent ( pFnAmIAllowedToSuicideWhenStuck, &AmIAllowedToSuicideWhenStuck_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.Timer_RageTimeOut
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::Timer_RageTimeOut ( )
{
	static UFunction* pFnTimer_RageTimeOut = NULL;

	if ( ! pFnTimer_RageTimeOut )
		pFnTimer_RageTimeOut = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.Timer_RageTimeOut" );

	AKFAIController_ZedPatriarch_execTimer_RageTimeOut_Parms Timer_RageTimeOut_Parms;

	this->ProcessEvent ( pFnTimer_RageTimeOut, &Timer_RageTimeOut_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.UpdateRageState
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::UpdateRageState ( )
{
	static UFunction* pFnUpdateRageState = NULL;

	if ( ! pFnUpdateRageState )
		pFnUpdateRageState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.UpdateRageState" );

	AKFAIController_ZedPatriarch_execUpdateRageState_Parms UpdateRageState_Parms;

	this->ProcessEvent ( pFnUpdateRageState, &UpdateRageState_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.StartPaternalInstinct
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::StartPaternalInstinct ( )
{
	static UFunction* pFnStartPaternalInstinct = NULL;

	if ( ! pFnStartPaternalInstinct )
		pFnStartPaternalInstinct = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.StartPaternalInstinct" );

	AKFAIController_ZedPatriarch_execStartPaternalInstinct_Parms StartPaternalInstinct_Parms;

	this->ProcessEvent ( pFnStartPaternalInstinct, &StartPaternalInstinct_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NotifyTakeHit
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NotifyTakeHit" );

	AKFAIController_ZedPatriarch_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NotifyKilled
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NotifyKilled ( )
{
	static UFunction* pFnNotifyKilled = NULL;

	if ( ! pFnNotifyKilled )
		pFnNotifyKilled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NotifyKilled" );

	AKFAIController_ZedPatriarch_execNotifyKilled_Parms NotifyKilled_Parms;

	this->ProcessEvent ( pFnNotifyKilled, &NotifyKilled_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NotifyMeleeDamageDealt
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NotifyMeleeDamageDealt ( )
{
	static UFunction* pFnNotifyMeleeDamageDealt = NULL;

	if ( ! pFnNotifyMeleeDamageDealt )
		pFnNotifyMeleeDamageDealt = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NotifyMeleeDamageDealt" );

	AKFAIController_ZedPatriarch_execNotifyMeleeDamageDealt_Parms NotifyMeleeDamageDealt_Parms;

	this->ProcessEvent ( pFnNotifyMeleeDamageDealt, &NotifyMeleeDamageDealt_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NotifySpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NotifySpecialMoveEnded" );

	AKFAIController_ZedPatriarch_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NotifyCommandFinished
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NotifyCommandFinished ( )
{
	static UFunction* pFnNotifyCommandFinished = NULL;

	if ( ! pFnNotifyCommandFinished )
		pFnNotifyCommandFinished = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NotifyCommandFinished" );

	AKFAIController_ZedPatriarch_execNotifyCommandFinished_Parms NotifyCommandFinished_Parms;

	this->ProcessEvent ( pFnNotifyCommandFinished, &NotifyCommandFinished_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NotifyAttackActor
// [0x00020000] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NotifyAttackActor ( )
{
	static UFunction* pFnNotifyAttackActor = NULL;

	if ( ! pFnNotifyAttackActor )
		pFnNotifyAttackActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NotifyAttackActor" );

	AKFAIController_ZedPatriarch_execNotifyAttackActor_Parms NotifyAttackActor_Parms;

	this->ProcessEvent ( pFnNotifyAttackActor, &NotifyAttackActor_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.DoorFinished
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::DoorFinished ( )
{
	static UFunction* pFnDoorFinished = NULL;

	if ( ! pFnDoorFinished )
		pFnDoorFinished = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.DoorFinished" );

	AKFAIController_ZedPatriarch_execDoorFinished_Parms DoorFinished_Parms;

	this->ProcessEvent ( pFnDoorFinished, &DoorFinished_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.NotifyAttackDoor
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::NotifyAttackDoor ( )
{
	static UFunction* pFnNotifyAttackDoor = NULL;

	if ( ! pFnNotifyAttackDoor )
		pFnNotifyAttackDoor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.NotifyAttackDoor" );

	AKFAIController_ZedPatriarch_execNotifyAttackDoor_Parms NotifyAttackDoor_Parms;

	this->ProcessEvent ( pFnNotifyAttackDoor, &NotifyAttackDoor_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.SomeEnemiesAreHidden
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::SomeEnemiesAreHidden ( )
{
	static UFunction* pFnSomeEnemiesAreHidden = NULL;

	if ( ! pFnSomeEnemiesAreHidden )
		pFnSomeEnemiesAreHidden = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.SomeEnemiesAreHidden" );

	AKFAIController_ZedPatriarch_execSomeEnemiesAreHidden_Parms SomeEnemiesAreHidden_Parms;

	this->ProcessEvent ( pFnSomeEnemiesAreHidden, &SomeEnemiesAreHidden_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.IsCeilingClear
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::IsCeilingClear ( )
{
	static UFunction* pFnIsCeilingClear = NULL;

	if ( ! pFnIsCeilingClear )
		pFnIsCeilingClear = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.IsCeilingClear" );

	AKFAIController_ZedPatriarch_execIsCeilingClear_Parms IsCeilingClear_Parms;

	this->ProcessEvent ( pFnIsCeilingClear, &IsCeilingClear_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.CanSetSprinting
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::CanSetSprinting ( )
{
	static UFunction* pFnCanSetSprinting = NULL;

	if ( ! pFnCanSetSprinting )
		pFnCanSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.CanSetSprinting" );

	AKFAIController_ZedPatriarch_execCanSetSprinting_Parms CanSetSprinting_Parms;

	this->ProcessEvent ( pFnCanSetSprinting, &CanSetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.ShouldSprint" );

	AKFAIController_ZedPatriarch_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.EvaluateSprinting
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::EvaluateSprinting ( )
{
	static UFunction* pFnEvaluateSprinting = NULL;

	if ( ! pFnEvaluateSprinting )
		pFnEvaluateSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.EvaluateSprinting" );

	AKFAIController_ZedPatriarch_execEvaluateSprinting_Parms EvaluateSprinting_Parms;

	this->ProcessEvent ( pFnEvaluateSprinting, &EvaluateSprinting_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.DoStrike
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::DoStrike ( )
{
	static UFunction* pFnDoStrike = NULL;

	if ( ! pFnDoStrike )
		pFnDoStrike = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.DoStrike" );

	AKFAIController_ZedPatriarch_execDoStrike_Parms DoStrike_Parms;

	this->ProcessEvent ( pFnDoStrike, &DoStrike_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.GetAdjustedAimFor
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::GetAdjustedAimFor ( )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.GetAdjustedAimFor" );

	AKFAIController_ZedPatriarch_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.IsWeaponArmClear
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::IsWeaponArmClear ( )
{
	static UFunction* pFnIsWeaponArmClear = NULL;

	if ( ! pFnIsWeaponArmClear )
		pFnIsWeaponArmClear = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.IsWeaponArmClear" );

	AKFAIController_ZedPatriarch_execIsWeaponArmClear_Parms IsWeaponArmClear_Parms;

	this->ProcessEvent ( pFnIsWeaponArmClear, &IsWeaponArmClear_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.EvaluateAttacks
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::EvaluateAttacks ( )
{
	static UFunction* pFnEvaluateAttacks = NULL;

	if ( ! pFnEvaluateAttacks )
		pFnEvaluateAttacks = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.EvaluateAttacks" );

	AKFAIController_ZedPatriarch_execEvaluateAttacks_Parms EvaluateAttacks_Parms;

	this->ProcessEvent ( pFnEvaluateAttacks, &EvaluateAttacks_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.UpdateRecentlySeenEnemyList
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::UpdateRecentlySeenEnemyList ( )
{
	static UFunction* pFnUpdateRecentlySeenEnemyList = NULL;

	if ( ! pFnUpdateRecentlySeenEnemyList )
		pFnUpdateRecentlySeenEnemyList = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.UpdateRecentlySeenEnemyList" );

	AKFAIController_ZedPatriarch_execUpdateRecentlySeenEnemyList_Parms UpdateRecentlySeenEnemyList_Parms;

	this->ProcessEvent ( pFnUpdateRecentlySeenEnemyList, &UpdateRecentlySeenEnemyList_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.SeePlayer
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedPatriarch::eventSeePlayer ( )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.SeePlayer" );

	AKFAIController_ZedPatriarch_eventSeePlayer_Parms SeePlayer_Parms;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.Tick
// [0x00020102] 
// Parameters infos:

void AKFAIController_ZedPatriarch::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.Tick" );

	AKFAIController_ZedPatriarch_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.SetBestTarget
// [0x00C24002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::SetBestTarget ( )
{
	static UFunction* pFnSetBestTarget = NULL;

	if ( ! pFnSetBestTarget )
		pFnSetBestTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.SetBestTarget" );

	AKFAIController_ZedPatriarch_execSetBestTarget_Parms SetBestTarget_Parms;

	this->ProcessEvent ( pFnSetBestTarget, &SetBestTarget_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.ChangeEnemy
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedPatriarch::eventChangeEnemy ( )
{
	static UFunction* pFnChangeEnemy = NULL;

	if ( ! pFnChangeEnemy )
		pFnChangeEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.ChangeEnemy" );

	AKFAIController_ZedPatriarch_eventChangeEnemy_Parms ChangeEnemy_Parms;

	this->ProcessEvent ( pFnChangeEnemy, &ChangeEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.ForceSetEnemy
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::ForceSetEnemy ( )
{
	static UFunction* pFnForceSetEnemy = NULL;

	if ( ! pFnForceSetEnemy )
		pFnForceSetEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.ForceSetEnemy" );

	AKFAIController_ZedPatriarch_execForceSetEnemy_Parms ForceSetEnemy_Parms;

	this->ProcessEvent ( pFnForceSetEnemy, &ForceSetEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.SetEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedPatriarch::eventSetEnemy ( )
{
	static UFunction* pFnSetEnemy = NULL;

	if ( ! pFnSetEnemy )
		pFnSetEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.SetEnemy" );

	AKFAIController_ZedPatriarch_eventSetEnemy_Parms SetEnemy_Parms;

	this->ProcessEvent ( pFnSetEnemy, &SetEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.FindNewEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedPatriarch::eventFindNewEnemy ( )
{
	static UFunction* pFnFindNewEnemy = NULL;

	if ( ! pFnFindNewEnemy )
		pFnFindNewEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.FindNewEnemy" );

	AKFAIController_ZedPatriarch_eventFindNewEnemy_Parms FindNewEnemy_Parms;

	this->ProcessEvent ( pFnFindNewEnemy, &FindNewEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.GetAggroRating
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::GetAggroRating ( )
{
	static UFunction* pFnGetAggroRating = NULL;

	if ( ! pFnGetAggroRating )
		pFnGetAggroRating = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.GetAggroRating" );

	AKFAIController_ZedPatriarch_execGetAggroRating_Parms GetAggroRating_Parms;

	this->ProcessEvent ( pFnGetAggroRating, &GetAggroRating_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.CanSwitchEnemies
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::CanSwitchEnemies ( )
{
	static UFunction* pFnCanSwitchEnemies = NULL;

	if ( ! pFnCanSwitchEnemies )
		pFnCanSwitchEnemies = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.CanSwitchEnemies" );

	AKFAIController_ZedPatriarch_execCanSwitchEnemies_Parms CanSwitchEnemies_Parms;

	this->ProcessEvent ( pFnCanSwitchEnemies, &CanSwitchEnemies_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.IsAggroEnemySwitchAllowed
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::IsAggroEnemySwitchAllowed ( )
{
	static UFunction* pFnIsAggroEnemySwitchAllowed = NULL;

	if ( ! pFnIsAggroEnemySwitchAllowed )
		pFnIsAggroEnemySwitchAllowed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.IsAggroEnemySwitchAllowed" );

	AKFAIController_ZedPatriarch_execIsAggroEnemySwitchAllowed_Parms IsAggroEnemySwitchAllowed_Parms;

	this->ProcessEvent ( pFnIsAggroEnemySwitchAllowed, &IsAggroEnemySwitchAllowed_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedPatriarch::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.Destroyed" );

	AKFAIController_ZedPatriarch_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.PawnDied
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedPatriarch::PawnDied ( )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.PawnDied" );

	AKFAIController_ZedPatriarch_execPawnDied_Parms PawnDied_Parms;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedPatriarch.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedPatriarch::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedPatriarch.Possess" );

	AKFAIController_ZedPatriarch_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function kfgamecontent.AICommand_BloatKing_Gorge.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_BloatKing_Gorge::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_BloatKing_Gorge.Popped" );

	UAICommand_BloatKing_Gorge_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_BloatKing_Gorge.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_BloatKing_Gorge::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_BloatKing_Gorge.Pushed" );

	UAICommand_BloatKing_Gorge_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_BloatKing_Gorge.StartGorge
// [0x00022002] 
// Parameters infos:

void UAICommand_BloatKing_Gorge::StartGorge ( )
{
	static UFunction* pFnStartGorge = NULL;

	if ( ! pFnStartGorge )
		pFnStartGorge = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_BloatKing_Gorge.StartGorge" );

	UAICommand_BloatKing_Gorge_execStartGorge_Parms StartGorge_Parms;

	this->ProcessEvent ( pFnStartGorge, &StartGorge_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.EnterZedVictoryState
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::EnterZedVictoryState ( )
{
	static UFunction* pFnEnterZedVictoryState = NULL;

	if ( ! pFnEnterZedVictoryState )
		pFnEnterZedVictoryState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.EnterZedVictoryState" );

	AKFAIController_ZedBloatKing_execEnterZedVictoryState_Parms EnterZedVictoryState_Parms;

	this->ProcessEvent ( pFnEnterZedVictoryState, &EnterZedVictoryState_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.PawnDied
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::PawnDied ( )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.PawnDied" );

	AKFAIController_ZedBloatKing_execPawnDied_Parms PawnDied_Parms;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.EndArmorEnrage
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::EndArmorEnrage ( )
{
	static UFunction* pFnEndArmorEnrage = NULL;

	if ( ! pFnEndArmorEnrage )
		pFnEndArmorEnrage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.EndArmorEnrage" );

	AKFAIController_ZedBloatKing_execEndArmorEnrage_Parms EndArmorEnrage_Parms;

	this->ProcessEvent ( pFnEndArmorEnrage, &EndArmorEnrage_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.StartArmorEnrage
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::StartArmorEnrage ( )
{
	static UFunction* pFnStartArmorEnrage = NULL;

	if ( ! pFnStartArmorEnrage )
		pFnStartArmorEnrage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.StartArmorEnrage" );

	AKFAIController_ZedBloatKing_execStartArmorEnrage_Parms StartArmorEnrage_Parms;

	this->ProcessEvent ( pFnStartArmorEnrage, &StartArmorEnrage_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.SetEnrageTimer
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::SetEnrageTimer ( )
{
	static UFunction* pFnSetEnrageTimer = NULL;

	if ( ! pFnSetEnrageTimer )
		pFnSetEnrageTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.SetEnrageTimer" );

	AKFAIController_ZedBloatKing_execSetEnrageTimer_Parms SetEnrageTimer_Parms;

	this->ProcessEvent ( pFnSetEnrageTimer, &SetEnrageTimer_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.GetNumMinionsToSpawn
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::GetNumMinionsToSpawn ( )
{
	static UFunction* pFnGetNumMinionsToSpawn = NULL;

	if ( ! pFnGetNumMinionsToSpawn )
		pFnGetNumMinionsToSpawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.GetNumMinionsToSpawn" );

	AKFAIController_ZedBloatKing_execGetNumMinionsToSpawn_Parms GetNumMinionsToSpawn_Parms;

	this->ProcessEvent ( pFnGetNumMinionsToSpawn, &GetNumMinionsToSpawn_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.GetWaveInfo
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::GetWaveInfo ( )
{
	static UFunction* pFnGetWaveInfo = NULL;

	if ( ! pFnGetWaveInfo )
		pFnGetWaveInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.GetWaveInfo" );

	AKFAIController_ZedBloatKing_execGetWaveInfo_Parms GetWaveInfo_Parms;

	this->ProcessEvent ( pFnGetWaveInfo, &GetWaveInfo_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.StopBossWave
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::StopBossWave ( )
{
	static UFunction* pFnStopBossWave = NULL;

	if ( ! pFnStopBossWave )
		pFnStopBossWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.StopBossWave" );

	AKFAIController_ZedBloatKing_execStopBossWave_Parms StopBossWave_Parms;

	this->ProcessEvent ( pFnStopBossWave, &StopBossWave_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.PauseBossWave
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::PauseBossWave ( )
{
	static UFunction* pFnPauseBossWave = NULL;

	if ( ! pFnPauseBossWave )
		pFnPauseBossWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.PauseBossWave" );

	AKFAIController_ZedBloatKing_execPauseBossWave_Parms PauseBossWave_Parms;

	this->ProcessEvent ( pFnPauseBossWave, &PauseBossWave_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.SpawnMinions
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::SpawnMinions ( )
{
	static UFunction* pFnSpawnMinions = NULL;

	if ( ! pFnSpawnMinions )
		pFnSpawnMinions = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.SpawnMinions" );

	AKFAIController_ZedBloatKing_execSpawnMinions_Parms SpawnMinions_Parms;

	this->ProcessEvent ( pFnSpawnMinions, &SpawnMinions_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.StartMinionWaves
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::StartMinionWaves ( )
{
	static UFunction* pFnStartMinionWaves = NULL;

	if ( ! pFnStartMinionWaves )
		pFnStartMinionWaves = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.StartMinionWaves" );

	AKFAIController_ZedBloatKing_execStartMinionWaves_Parms StartMinionWaves_Parms;

	this->ProcessEvent ( pFnStartMinionWaves, &StartMinionWaves_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.ShouldSprint" );

	AKFAIController_ZedBloatKing_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.EvaluateSprinting
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::EvaluateSprinting ( )
{
	static UFunction* pFnEvaluateSprinting = NULL;

	if ( ! pFnEvaluateSprinting )
		pFnEvaluateSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.EvaluateSprinting" );

	AKFAIController_ZedBloatKing_execEvaluateSprinting_Parms EvaluateSprinting_Parms;

	this->ProcessEvent ( pFnEvaluateSprinting, &EvaluateSprinting_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.ChangeEnemy
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedBloatKing::eventChangeEnemy ( )
{
	static UFunction* pFnChangeEnemy = NULL;

	if ( ! pFnChangeEnemy )
		pFnChangeEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.ChangeEnemy" );

	AKFAIController_ZedBloatKing_eventChangeEnemy_Parms ChangeEnemy_Parms;

	this->ProcessEvent ( pFnChangeEnemy, &ChangeEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.NotifySpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.NotifySpecialMoveEnded" );

	AKFAIController_ZedBloatKing_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.SeePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedBloatKing::eventSeePlayer ( )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.SeePlayer" );

	AKFAIController_ZedBloatKing_eventSeePlayer_Parms SeePlayer_Parms;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.CanDoGorgeAttack
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::CanDoGorgeAttack ( )
{
	static UFunction* pFnCanDoGorgeAttack = NULL;

	if ( ! pFnCanDoGorgeAttack )
		pFnCanDoGorgeAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.CanDoGorgeAttack" );

	AKFAIController_ZedBloatKing_execCanDoGorgeAttack_Parms CanDoGorgeAttack_Parms;

	this->ProcessEvent ( pFnCanDoGorgeAttack, &CanDoGorgeAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.TriggerGorge
// [0x00024002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::TriggerGorge ( )
{
	static UFunction* pFnTriggerGorge = NULL;

	if ( ! pFnTriggerGorge )
		pFnTriggerGorge = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.TriggerGorge" );

	AKFAIController_ZedBloatKing_execTriggerGorge_Parms TriggerGorge_Parms;

	this->ProcessEvent ( pFnTriggerGorge, &TriggerGorge_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.EvaluateSpecialMoves
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::EvaluateSpecialMoves ( )
{
	static UFunction* pFnEvaluateSpecialMoves = NULL;

	if ( ! pFnEvaluateSpecialMoves )
		pFnEvaluateSpecialMoves = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.EvaluateSpecialMoves" );

	AKFAIController_ZedBloatKing_execEvaluateSpecialMoves_Parms EvaluateSpecialMoves_Parms;

	this->ProcessEvent ( pFnEvaluateSpecialMoves, &EvaluateSpecialMoves_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.AmIAllowedToSuicideWhenStuck
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKing::AmIAllowedToSuicideWhenStuck ( )
{
	static UFunction* pFnAmIAllowedToSuicideWhenStuck = NULL;

	if ( ! pFnAmIAllowedToSuicideWhenStuck )
		pFnAmIAllowedToSuicideWhenStuck = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.AmIAllowedToSuicideWhenStuck" );

	AKFAIController_ZedBloatKing_execAmIAllowedToSuicideWhenStuck_Parms AmIAllowedToSuicideWhenStuck_Parms;

	this->ProcessEvent ( pFnAmIAllowedToSuicideWhenStuck, &AmIAllowedToSuicideWhenStuck_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.Tick
// [0x00020102] 
// Parameters infos:

void AKFAIController_ZedBloatKing::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.Tick" );

	AKFAIController_ZedBloatKing_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKing.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedBloatKing::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKing.Possess" );

	AKFAIController_ZedBloatKing_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function kfgamecontent.AICommand_BloatKingSubspawn_Explode.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_BloatKingSubspawn_Explode::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_BloatKingSubspawn_Explode.Popped" );

	UAICommand_BloatKingSubspawn_Explode_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_BloatKingSubspawn_Explode.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_BloatKingSubspawn_Explode::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_BloatKingSubspawn_Explode.Pushed" );

	UAICommand_BloatKingSubspawn_Explode_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_BloatKingSubspawn_Explode.StartExplode
// [0x00022002] 
// Parameters infos:

void UAICommand_BloatKingSubspawn_Explode::StartExplode ( )
{
	static UFunction* pFnStartExplode = NULL;

	if ( ! pFnStartExplode )
		pFnStartExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_BloatKingSubspawn_Explode.StartExplode" );

	UAICommand_BloatKingSubspawn_Explode_execStartExplode_Parms StartExplode_Parms;

	this->ProcessEvent ( pFnStartExplode, &StartExplode_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKingSubspawn.CheckMeleeTargetExplosion
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedBloatKingSubspawn::CheckMeleeTargetExplosion ( )
{
	static UFunction* pFnCheckMeleeTargetExplosion = NULL;

	if ( ! pFnCheckMeleeTargetExplosion )
		pFnCheckMeleeTargetExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKingSubspawn.CheckMeleeTargetExplosion" );

	AKFAIController_ZedBloatKingSubspawn_execCheckMeleeTargetExplosion_Parms CheckMeleeTargetExplosion_Parms;

	this->ProcessEvent ( pFnCheckMeleeTargetExplosion, &CheckMeleeTargetExplosion_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKingSubspawn.CanDoStrike
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedBloatKingSubspawn::CanDoStrike ( )
{
	static UFunction* pFnCanDoStrike = NULL;

	if ( ! pFnCanDoStrike )
		pFnCanDoStrike = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKingSubspawn.CanDoStrike" );

	AKFAIController_ZedBloatKingSubspawn_execCanDoStrike_Parms CanDoStrike_Parms;

	this->ProcessEvent ( pFnCanDoStrike, &CanDoStrike_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKingSubspawn.Tick
// [0x00020102] 
// Parameters infos:

void AKFAIController_ZedBloatKingSubspawn::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKingSubspawn.Tick" );

	AKFAIController_ZedBloatKingSubspawn_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedBloatKingSubspawn.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedBloatKingSubspawn::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedBloatKingSubspawn.Possess" );

	AKFAIController_ZedBloatKingSubspawn_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function kfgamecontent.AICommand_RangedAttack.HandleAICommandSpecialAction
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UAICommand_RangedAttack::eventHandleAICommandSpecialAction ( )
{
	static UFunction* pFnHandleAICommandSpecialAction = NULL;

	if ( ! pFnHandleAICommandSpecialAction )
		pFnHandleAICommandSpecialAction = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_RangedAttack.HandleAICommandSpecialAction" );

	UAICommand_RangedAttack_eventHandleAICommandSpecialAction_Parms HandleAICommandSpecialAction_Parms;

	this->ProcessEvent ( pFnHandleAICommandSpecialAction, &HandleAICommandSpecialAction_Parms, NULL );
};

// Function kfgamecontent.AICommand_RangedAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_RangedAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_RangedAttack.Popped" );

	UAICommand_RangedAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_RangedAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_RangedAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_RangedAttack.Pushed" );

	UAICommand_RangedAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_EMPAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_DAR_EMPAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_EMPAttack.Popped" );

	UAICommand_DAR_EMPAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_EMPAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_DAR_EMPAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_EMPAttack.Pushed" );

	UAICommand_DAR_EMPAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_EMPAttack.EMPAttack
// [0x00022002] 
// Parameters infos:

void UAICommand_DAR_EMPAttack::EMPAttack ( )
{
	static UFunction* pFnEMPAttack = NULL;

	if ( ! pFnEMPAttack )
		pFnEMPAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_EMPAttack.EMPAttack" );

	UAICommand_DAR_EMPAttack_execEMPAttack_Parms EMPAttack_Parms;

	this->ProcessEvent ( pFnEMPAttack, &EMPAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.OnArmorLoss
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedDAR::OnArmorLoss ( )
{
	static UFunction* pFnOnArmorLoss = NULL;

	if ( ! pFnOnArmorLoss )
		pFnOnArmorLoss = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.OnArmorLoss" );

	AKFAIController_ZedDAR_execOnArmorLoss_Parms OnArmorLoss_Parms;

	this->ProcessEvent ( pFnOnArmorLoss, &OnArmorLoss_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.CanEvade
// [0x00024002] 
// Parameters infos:

void AKFAIController_ZedDAR::CanEvade ( )
{
	static UFunction* pFnCanEvade = NULL;

	if ( ! pFnCanEvade )
		pFnCanEvade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.CanEvade" );

	AKFAIController_ZedDAR_execCanEvade_Parms CanEvade_Parms;

	this->ProcessEvent ( pFnCanEvade, &CanEvade_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedDAR::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.ShouldSprint" );

	AKFAIController_ZedDAR_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.GetStartFireLocation
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedDAR::GetStartFireLocation ( )
{
	static UFunction* pFnGetStartFireLocation = NULL;

	if ( ! pFnGetStartFireLocation )
		pFnGetStartFireLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.GetStartFireLocation" );

	AKFAIController_ZedDAR_execGetStartFireLocation_Parms GetStartFireLocation_Parms;

	this->ProcessEvent ( pFnGetStartFireLocation, &GetStartFireLocation_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.FireRangedAttack
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedDAR::FireRangedAttack ( )
{
	static UFunction* pFnFireRangedAttack = NULL;

	if ( ! pFnFireRangedAttack )
		pFnFireRangedAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.FireRangedAttack" );

	AKFAIController_ZedDAR_execFireRangedAttack_Parms FireRangedAttack_Parms;

	this->ProcessEvent ( pFnFireRangedAttack, &FireRangedAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.StartRangedAttack
// [0x00020000] 
// Parameters infos:

void AKFAIController_ZedDAR::StartRangedAttack ( )
{
	static UFunction* pFnStartRangedAttack = NULL;

	if ( ! pFnStartRangedAttack )
		pFnStartRangedAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.StartRangedAttack" );

	AKFAIController_ZedDAR_execStartRangedAttack_Parms StartRangedAttack_Parms;

	this->ProcessEvent ( pFnStartRangedAttack, &StartRangedAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.SetEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedDAR::eventSetEnemy ( )
{
	static UFunction* pFnSetEnemy = NULL;

	if ( ! pFnSetEnemy )
		pFnSetEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.SetEnemy" );

	AKFAIController_ZedDAR_eventSetEnemy_Parms SetEnemy_Parms;

	this->ProcessEvent ( pFnSetEnemy, &SetEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.Tick
// [0x00020102] 
// Parameters infos:

void AKFAIController_ZedDAR::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.Tick" );

	AKFAIController_ZedDAR_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.CanDoRangedAttack
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedDAR::CanDoRangedAttack ( )
{
	static UFunction* pFnCanDoRangedAttack = NULL;

	if ( ! pFnCanDoRangedAttack )
		pFnCanDoRangedAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.CanDoRangedAttack" );

	AKFAIController_ZedDAR_execCanDoRangedAttack_Parms CanDoRangedAttack_Parms;

	this->ProcessEvent ( pFnCanDoRangedAttack, &CanDoRangedAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.GetAttackIntervalByDifficulty
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedDAR::GetAttackIntervalByDifficulty ( )
{
	static UFunction* pFnGetAttackIntervalByDifficulty = NULL;

	if ( ! pFnGetAttackIntervalByDifficulty )
		pFnGetAttackIntervalByDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.GetAttackIntervalByDifficulty" );

	AKFAIController_ZedDAR_execGetAttackIntervalByDifficulty_Parms GetAttackIntervalByDifficulty_Parms;

	this->ProcessEvent ( pFnGetAttackIntervalByDifficulty, &GetAttackIntervalByDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedDAR::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR.PostBeginPlay" );

	AKFAIController_ZedDAR_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFAIController_Ranged.DebugAimError
// [0x00824002] 
// Parameters infos:

void AKFAIController_Ranged::DebugAimError ( )
{
	static UFunction* pFnDebugAimError = NULL;

	if ( ! pFnDebugAimError )
		pFnDebugAimError = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_Ranged.DebugAimError" );

	AKFAIController_Ranged_execDebugAimError_Parms DebugAimError_Parms;

	this->ProcessEvent ( pFnDebugAimError, &DebugAimError_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR_EMP.StartRangedAttack
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedDAR_EMP::StartRangedAttack ( )
{
	static UFunction* pFnStartRangedAttack = NULL;

	if ( ! pFnStartRangedAttack )
		pFnStartRangedAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR_EMP.StartRangedAttack" );

	AKFAIController_ZedDAR_EMP_execStartRangedAttack_Parms StartRangedAttack_Parms;

	this->ProcessEvent ( pFnStartRangedAttack, &StartRangedAttack_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.DeactivateHitPSC
// [0x00020002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::DeactivateHitPSC ( )
{
	static UFunction* pFnDeactivateHitPSC = NULL;

	if ( ! pFnDeactivateHitPSC )
		pFnDeactivateHitPSC = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.DeactivateHitPSC" );

	UKFSM_DAR_EMPAttack_execDeactivateHitPSC_Parms DeactivateHitPSC_Parms;

	this->ProcessEvent ( pFnDeactivateHitPSC, &DeactivateHitPSC_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.DeactivatePSC
// [0x00020002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::DeactivatePSC ( )
{
	static UFunction* pFnDeactivatePSC = NULL;

	if ( ! pFnDeactivatePSC )
		pFnDeactivatePSC = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.DeactivatePSC" );

	UKFSM_DAR_EMPAttack_execDeactivatePSC_Parms DeactivatePSC_Parms;

	this->ProcessEvent ( pFnDeactivatePSC, &DeactivatePSC_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.ReleaseVictims
// [0x00820002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::ReleaseVictims ( )
{
	static UFunction* pFnReleaseVictims = NULL;

	if ( ! pFnReleaseVictims )
		pFnReleaseVictims = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.ReleaseVictims" );

	UKFSM_DAR_EMPAttack_execReleaseVictims_Parms ReleaseVictims_Parms;

	this->ProcessEvent ( pFnReleaseVictims, &ReleaseVictims_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.ApplyDamage
// [0x00820002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::ApplyDamage ( )
{
	static UFunction* pFnApplyDamage = NULL;

	if ( ! pFnApplyDamage )
		pFnApplyDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.ApplyDamage" );

	UKFSM_DAR_EMPAttack_execApplyDamage_Parms ApplyDamage_Parms;

	this->ProcessEvent ( pFnApplyDamage, &ApplyDamage_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.GetEnemyByTrace
// [0x00C20002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::GetEnemyByTrace ( )
{
	static UFunction* pFnGetEnemyByTrace = NULL;

	if ( ! pFnGetEnemyByTrace )
		pFnGetEnemyByTrace = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.GetEnemyByTrace" );

	UKFSM_DAR_EMPAttack_execGetEnemyByTrace_Parms GetEnemyByTrace_Parms;

	this->ProcessEvent ( pFnGetEnemyByTrace, &GetEnemyByTrace_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.SetEMPEndPoint
// [0x00820002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::SetEMPEndPoint ( )
{
	static UFunction* pFnSetEMPEndPoint = NULL;

	if ( ! pFnSetEMPEndPoint )
		pFnSetEMPEndPoint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.SetEMPEndPoint" );

	UKFSM_DAR_EMPAttack_execSetEMPEndPoint_Parms SetEMPEndPoint_Parms;

	this->ProcessEvent ( pFnSetEMPEndPoint, &SetEMPEndPoint_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.WithinRange
// [0x00020002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::WithinRange ( )
{
	static UFunction* pFnWithinRange = NULL;

	if ( ! pFnWithinRange )
		pFnWithinRange = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.WithinRange" );

	UKFSM_DAR_EMPAttack_execWithinRange_Parms WithinRange_Parms;

	this->ProcessEvent ( pFnWithinRange, &WithinRange_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.IsValidTarget
// [0x00020002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::IsValidTarget ( )
{
	static UFunction* pFnIsValidTarget = NULL;

	if ( ! pFnIsValidTarget )
		pFnIsValidTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.IsValidTarget" );

	UKFSM_DAR_EMPAttack_execIsValidTarget_Parms IsValidTarget_Parms;

	this->ProcessEvent ( pFnIsValidTarget, &IsValidTarget_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.DisableEMP
// [0x00020002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::DisableEMP ( )
{
	static UFunction* pFnDisableEMP = NULL;

	if ( ! pFnDisableEMP )
		pFnDisableEMP = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.DisableEMP" );

	UKFSM_DAR_EMPAttack_execDisableEMP_Parms DisableEMP_Parms;

	this->ProcessEvent ( pFnDisableEMP, &DisableEMP_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.ToggleEMP
// [0x00820002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::ToggleEMP ( )
{
	static UFunction* pFnToggleEMP = NULL;

	if ( ! pFnToggleEMP )
		pFnToggleEMP = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.ToggleEMP" );

	UKFSM_DAR_EMPAttack_execToggleEMP_Parms ToggleEMP_Parms;

	this->ProcessEvent ( pFnToggleEMP, &ToggleEMP_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.SpecialMoveEnded" );

	UKFSM_DAR_EMPAttack_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_DAR_EMPAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_DAR_EMPAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_DAR_EMPAttack.SpecialMoveStarted" );

	UKFSM_DAR_EMPAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_LaserAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_DAR_LaserAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_LaserAttack.Popped" );

	UAICommand_DAR_LaserAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_LaserAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_DAR_LaserAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_LaserAttack.Pushed" );

	UAICommand_DAR_LaserAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_LaserAttack.LaserAttack
// [0x00022002] 
// Parameters infos:

void UAICommand_DAR_LaserAttack::LaserAttack ( )
{
	static UFunction* pFnLaserAttack = NULL;

	if ( ! pFnLaserAttack )
		pFnLaserAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_LaserAttack.LaserAttack" );

	UAICommand_DAR_LaserAttack_execLaserAttack_Parms LaserAttack_Parms;

	this->ProcessEvent ( pFnLaserAttack, &LaserAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR_Laser.GetStartFireLocation
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedDAR_Laser::GetStartFireLocation ( )
{
	static UFunction* pFnGetStartFireLocation = NULL;

	if ( ! pFnGetStartFireLocation )
		pFnGetStartFireLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR_Laser.GetStartFireLocation" );

	AKFAIController_ZedDAR_Laser_execGetStartFireLocation_Parms GetStartFireLocation_Parms;

	this->ProcessEvent ( pFnGetStartFireLocation, &GetStartFireLocation_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR_Laser.StartRangedAttack
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedDAR_Laser::StartRangedAttack ( )
{
	static UFunction* pFnStartRangedAttack = NULL;

	if ( ! pFnStartRangedAttack )
		pFnStartRangedAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR_Laser.StartRangedAttack" );

	AKFAIController_ZedDAR_Laser_execStartRangedAttack_Parms StartRangedAttack_Parms;

	this->ProcessEvent ( pFnStartRangedAttack, &StartRangedAttack_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_RocketAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_DAR_RocketAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_RocketAttack.Popped" );

	UAICommand_DAR_RocketAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_RocketAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_DAR_RocketAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_RocketAttack.Pushed" );

	UAICommand_DAR_RocketAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_DAR_RocketAttack.RocketAttack
// [0x00022002] 
// Parameters infos:

void UAICommand_DAR_RocketAttack::RocketAttack ( )
{
	static UFunction* pFnRocketAttack = NULL;

	if ( ! pFnRocketAttack )
		pFnRocketAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_DAR_RocketAttack.RocketAttack" );

	UAICommand_DAR_RocketAttack_execRocketAttack_Parms RocketAttack_Parms;

	this->ProcessEvent ( pFnRocketAttack, &RocketAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR_Rocket.GetStartFireLocation
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedDAR_Rocket::GetStartFireLocation ( )
{
	static UFunction* pFnGetStartFireLocation = NULL;

	if ( ! pFnGetStartFireLocation )
		pFnGetStartFireLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR_Rocket.GetStartFireLocation" );

	AKFAIController_ZedDAR_Rocket_execGetStartFireLocation_Parms GetStartFireLocation_Parms;

	this->ProcessEvent ( pFnGetStartFireLocation, &GetStartFireLocation_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedDAR_Rocket.StartRangedAttack
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedDAR_Rocket::StartRangedAttack ( )
{
	static UFunction* pFnStartRangedAttack = NULL;

	if ( ! pFnStartRangedAttack )
		pFnStartRangedAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedDAR_Rocket.StartRangedAttack" );

	AKFAIController_ZedDAR_Rocket_execStartRangedAttack_Parms StartRangedAttack_Parms;

	this->ProcessEvent ( pFnStartRangedAttack, &StartRangedAttack_Parms, NULL );
};

// Function kfgamecontent.AICommand_FleshpoundKing_ChestBeamAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_FleshpoundKing_ChestBeamAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_FleshpoundKing_ChestBeamAttack.Popped" );

	UAICommand_FleshpoundKing_ChestBeamAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_FleshpoundKing_ChestBeamAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_FleshpoundKing_ChestBeamAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_FleshpoundKing_ChestBeamAttack.Pushed" );

	UAICommand_FleshpoundKing_ChestBeamAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_FleshpoundKing_ChestBeamAttack.ChestBeamAttack
// [0x00022002] 
// Parameters infos:

void UAICommand_FleshpoundKing_ChestBeamAttack::ChestBeamAttack ( )
{
	static UFunction* pFnChestBeamAttack = NULL;

	if ( ! pFnChestBeamAttack )
		pFnChestBeamAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_FleshpoundKing_ChestBeamAttack.ChestBeamAttack" );

	UAICommand_FleshpoundKing_ChestBeamAttack_execChestBeamAttack_Parms ChestBeamAttack_Parms;

	this->ProcessEvent ( pFnChestBeamAttack, &ChestBeamAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.ForceTargetChange
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::ForceTargetChange ( )
{
	static UFunction* pFnForceTargetChange = NULL;

	if ( ! pFnForceTargetChange )
		pFnForceTargetChange = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.ForceTargetChange" );

	AKFAIController_ZedFleshpoundKing_execForceTargetChange_Parms ForceTargetChange_Parms;

	this->ProcessEvent ( pFnForceTargetChange, &ForceTargetChange_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.ChangeEnemy
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::eventChangeEnemy ( )
{
	static UFunction* pFnChangeEnemy = NULL;

	if ( ! pFnChangeEnemy )
		pFnChangeEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.ChangeEnemy" );

	AKFAIController_ZedFleshpoundKing_eventChangeEnemy_Parms ChangeEnemy_Parms;

	this->ProcessEvent ( pFnChangeEnemy, &ChangeEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.SetEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::eventSetEnemy ( )
{
	static UFunction* pFnSetEnemy = NULL;

	if ( ! pFnSetEnemy )
		pFnSetEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.SetEnemy" );

	AKFAIController_ZedFleshpoundKing_eventSetEnemy_Parms SetEnemy_Parms;

	this->ProcessEvent ( pFnSetEnemy, &SetEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.FindNewEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::eventFindNewEnemy ( )
{
	static UFunction* pFnFindNewEnemy = NULL;

	if ( ! pFnFindNewEnemy )
		pFnFindNewEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.FindNewEnemy" );

	AKFAIController_ZedFleshpoundKing_eventFindNewEnemy_Parms FindNewEnemy_Parms;

	this->ProcessEvent ( pFnFindNewEnemy, &FindNewEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.CanSwitchEnemies
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::CanSwitchEnemies ( )
{
	static UFunction* pFnCanSwitchEnemies = NULL;

	if ( ! pFnCanSwitchEnemies )
		pFnCanSwitchEnemies = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.CanSwitchEnemies" );

	AKFAIController_ZedFleshpoundKing_execCanSwitchEnemies_Parms CanSwitchEnemies_Parms;

	this->ProcessEvent ( pFnCanSwitchEnemies, &CanSwitchEnemies_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.NotifySpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.NotifySpecialMoveEnded" );

	AKFAIController_ZedFleshpoundKing_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.TransitionToPhase
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::TransitionToPhase ( )
{
	static UFunction* pFnTransitionToPhase = NULL;

	if ( ! pFnTransitionToPhase )
		pFnTransitionToPhase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.TransitionToPhase" );

	AKFAIController_ZedFleshpoundKing_execTransitionToPhase_Parms TransitionToPhase_Parms;

	this->ProcessEvent ( pFnTransitionToPhase, &TransitionToPhase_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.NotifyTakeHit" );

	AKFAIController_ZedFleshpoundKing_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.CheckForBeamAttack
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::CheckForBeamAttack ( )
{
	static UFunction* pFnCheckForBeamAttack = NULL;

	if ( ! pFnCheckForBeamAttack )
		pFnCheckForBeamAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.CheckForBeamAttack" );

	AKFAIController_ZedFleshpoundKing_execCheckForBeamAttack_Parms CheckForBeamAttack_Parms;

	this->ProcessEvent ( pFnCheckForBeamAttack, &CheckForBeamAttack_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.Tick" );

	AKFAIController_ZedFleshpoundKing_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.SeePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::eventSeePlayer ( )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.SeePlayer" );

	AKFAIController_ZedFleshpoundKing_eventSeePlayer_Parms SeePlayer_Parms;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.AmIAllowedToSuicideWhenStuck
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::AmIAllowedToSuicideWhenStuck ( )
{
	static UFunction* pFnAmIAllowedToSuicideWhenStuck = NULL;

	if ( ! pFnAmIAllowedToSuicideWhenStuck )
		pFnAmIAllowedToSuicideWhenStuck = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.AmIAllowedToSuicideWhenStuck" );

	AKFAIController_ZedFleshpoundKing_execAmIAllowedToSuicideWhenStuck_Parms AmIAllowedToSuicideWhenStuck_Parms;

	this->ProcessEvent ( pFnAmIAllowedToSuicideWhenStuck, &AmIAllowedToSuicideWhenStuck_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedFleshpoundKing.Possess
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedFleshpoundKing::eventPossess ( )
{
	static UFunction* pFnPossess = NULL;

	if ( ! pFnPossess )
		pFnPossess = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedFleshpoundKing.Possess" );

	AKFAIController_ZedFleshpoundKing_eventPossess_Parms Possess_Parms;

	this->ProcessEvent ( pFnPossess, &Possess_Parms, NULL );
};

// Function kfgamecontent.KFDifficulty_FleshpoundKing.GetChestBeamCooldownTime
// [0x00022002] 
// Parameters infos:

void UKFDifficulty_FleshpoundKing::GetChestBeamCooldownTime ( )
{
	static UFunction* pFnGetChestBeamCooldownTime = NULL;

	if ( ! pFnGetChestBeamCooldownTime )
		pFnGetChestBeamCooldownTime = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDifficulty_FleshpoundKing.GetChestBeamCooldownTime" );

	UKFDifficulty_FleshpoundKing_execGetChestBeamCooldownTime_Parms GetChestBeamCooldownTime_Parms;

	this->ProcessEvent ( pFnGetChestBeamCooldownTime, &GetChestBeamCooldownTime_Parms, NULL );
};

// Function kfgamecontent.AICommand_Husk_Suicide.GetSpecialMove
// [0x00020000] 
// Parameters infos:

void UAICommand_Husk_Suicide::GetSpecialMove ( )
{
	static UFunction* pFnGetSpecialMove = NULL;

	if ( ! pFnGetSpecialMove )
		pFnGetSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Husk_Suicide.GetSpecialMove" );

	UAICommand_Husk_Suicide_execGetSpecialMove_Parms GetSpecialMove_Parms;

	this->ProcessEvent ( pFnGetSpecialMove, &GetSpecialMove_Parms, NULL );
};

// Function kfgamecontent.AICommand_Husk_Suicide.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Husk_Suicide::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Husk_Suicide.Popped" );

	UAICommand_Husk_Suicide_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_Husk_Suicide.Paused
// [0x00020002] 
// Parameters infos:

void UAICommand_Husk_Suicide::Paused ( )
{
	static UFunction* pFnPaused = NULL;

	if ( ! pFnPaused )
		pFnPaused = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Husk_Suicide.Paused" );

	UAICommand_Husk_Suicide_execPaused_Parms Paused_Parms;

	this->ProcessEvent ( pFnPaused, &Paused_Parms, NULL );
};

// Function kfgamecontent.AICommand_Husk_Suicide.Resumed
// [0x00020002] 
// Parameters infos:

void UAICommand_Husk_Suicide::Resumed ( )
{
	static UFunction* pFnResumed = NULL;

	if ( ! pFnResumed )
		pFnResumed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Husk_Suicide.Resumed" );

	UAICommand_Husk_Suicide_execResumed_Parms Resumed_Parms;

	this->ProcessEvent ( pFnResumed, &Resumed_Parms, NULL );
};

// Function kfgamecontent.AICommand_Husk_Suicide.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Husk_Suicide::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Husk_Suicide.Pushed" );

	UAICommand_Husk_Suicide_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_Husk_Suicide.Suicide
// [0x00022002] 
// Parameters infos:

void UAICommand_Husk_Suicide::Suicide ( )
{
	static UFunction* pFnSuicide = NULL;

	if ( ! pFnSuicide )
		pFnSuicide = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Husk_Suicide.Suicide" );

	UAICommand_Husk_Suicide_execSuicide_Parms Suicide_Parms;

	this->ProcessEvent ( pFnSuicide, &Suicide_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.ShootFireball
// [0x00820002] 
// Parameters infos:

void AKFAIController_ZedHusk::ShootFireball ( )
{
	static UFunction* pFnShootFireball = NULL;

	if ( ! pFnShootFireball )
		pFnShootFireball = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.ShootFireball" );

	AKFAIController_ZedHusk_execShootFireball_Parms ShootFireball_Parms;

	this->ProcessEvent ( pFnShootFireball, &ShootFireball_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.DoStrike
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedHusk::DoStrike ( )
{
	static UFunction* pFnDoStrike = NULL;

	if ( ! pFnDoStrike )
		pFnDoStrike = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.DoStrike" );

	AKFAIController_ZedHusk_execDoStrike_Parms DoStrike_Parms;

	this->ProcessEvent ( pFnDoStrike, &DoStrike_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedHusk::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.ShouldSprint" );

	AKFAIController_ZedHusk_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.SetEnemy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedHusk::eventSetEnemy ( )
{
	static UFunction* pFnSetEnemy = NULL;

	if ( ! pFnSetEnemy )
		pFnSetEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.SetEnemy" );

	AKFAIController_ZedHusk_eventSetEnemy_Parms SetEnemy_Parms;

	this->ProcessEvent ( pFnSetEnemy, &SetEnemy_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.CanDoFireball
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedHusk::CanDoFireball ( )
{
	static UFunction* pFnCanDoFireball = NULL;

	if ( ! pFnCanDoFireball )
		pFnCanDoFireball = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.CanDoFireball" );

	AKFAIController_ZedHusk_execCanDoFireball_Parms CanDoFireball_Parms;

	this->ProcessEvent ( pFnCanDoFireball, &CanDoFireball_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.CanDoFlamethrower
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedHusk::CanDoFlamethrower ( )
{
	static UFunction* pFnCanDoFlamethrower = NULL;

	if ( ! pFnCanDoFlamethrower )
		pFnCanDoFlamethrower = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.CanDoFlamethrower" );

	AKFAIController_ZedHusk_execCanDoFlamethrower_Parms CanDoFlamethrower_Parms;

	this->ProcessEvent ( pFnCanDoFlamethrower, &CanDoFlamethrower_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.CanDoSuicide
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedHusk::CanDoSuicide ( )
{
	static UFunction* pFnCanDoSuicide = NULL;

	if ( ! pFnCanDoSuicide )
		pFnCanDoSuicide = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.CanDoSuicide" );

	AKFAIController_ZedHusk_execCanDoSuicide_Parms CanDoSuicide_Parms;

	this->ProcessEvent ( pFnCanDoSuicide, &CanDoSuicide_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.IsSuicidal
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedHusk::IsSuicidal ( )
{
	static UFunction* pFnIsSuicidal = NULL;

	if ( ! pFnIsSuicidal )
		pFnIsSuicidal = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.IsSuicidal" );

	AKFAIController_ZedHusk_execIsSuicidal_Parms IsSuicidal_Parms;

	this->ProcessEvent ( pFnIsSuicidal, &IsSuicidal_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.Tick
// [0x00020102] 
// Parameters infos:

void AKFAIController_ZedHusk::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.Tick" );

	AKFAIController_ZedHusk_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedHusk.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedHusk::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedHusk.PostBeginPlay" );

	AKFAIController_ZedHusk_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.AICommand_HuskFireBallAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_HuskFireBallAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_HuskFireBallAttack.Popped" );

	UAICommand_HuskFireBallAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_HuskFireBallAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_HuskFireBallAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_HuskFireBallAttack.Pushed" );

	UAICommand_HuskFireBallAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_HuskFireBallAttack.FireBallAttack
// [0x00022002] 
// Parameters infos:

void UAICommand_HuskFireBallAttack::FireBallAttack ( )
{
	static UFunction* pFnFireBallAttack = NULL;

	if ( ! pFnFireBallAttack )
		pFnFireBallAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_HuskFireBallAttack.FireBallAttack" );

	UAICommand_HuskFireBallAttack_execFireBallAttack_Parms FireBallAttack_Parms;

	this->ProcessEvent ( pFnFireBallAttack, &FireBallAttack_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FireBallAttack.CanOverrideMoveWith
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_FireBallAttack::CanOverrideMoveWith ( )
{
	static UFunction* pFnCanOverrideMoveWith = NULL;

	if ( ! pFnCanOverrideMoveWith )
		pFnCanOverrideMoveWith = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FireBallAttack.CanOverrideMoveWith" );

	UKFSM_Husk_FireBallAttack_execCanOverrideMoveWith_Parms CanOverrideMoveWith_Parms;

	this->ProcessEvent ( pFnCanOverrideMoveWith, &CanOverrideMoveWith_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FireBallAttack.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_FireBallAttack::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FireBallAttack.SpecialMoveEnded" );

	UKFSM_Husk_FireBallAttack_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FireBallAttack.NotifyFireballFired
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_FireBallAttack::NotifyFireballFired ( )
{
	static UFunction* pFnNotifyFireballFired = NULL;

	if ( ! pFnNotifyFireballFired )
		pFnNotifyFireballFired = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FireBallAttack.NotifyFireballFired" );

	UKFSM_Husk_FireBallAttack_execNotifyFireballFired_Parms NotifyFireballFired_Parms;

	this->ProcessEvent ( pFnNotifyFireballFired, &NotifyFireballFired_Parms, NULL );
};

// Function kfgamecontent.AICommand_HuskFlameThrowerAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_HuskFlameThrowerAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_HuskFlameThrowerAttack.Popped" );

	UAICommand_HuskFlameThrowerAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_HuskFlameThrowerAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_HuskFlameThrowerAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_HuskFlameThrowerAttack.Pushed" );

	UAICommand_HuskFlameThrowerAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_HuskFlameThrowerAttack.FlameThrowerAttack
// [0x00022002] 
// Parameters infos:

void UAICommand_HuskFlameThrowerAttack::FlameThrowerAttack ( )
{
	static UFunction* pFnFlameThrowerAttack = NULL;

	if ( ! pFnFlameThrowerAttack )
		pFnFlameThrowerAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_HuskFlameThrowerAttack.FlameThrowerAttack" );

	UAICommand_HuskFlameThrowerAttack_execFlameThrowerAttack_Parms FlameThrowerAttack_Parms;

	this->ProcessEvent ( pFnFlameThrowerAttack, &FlameThrowerAttack_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_Grab.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_Grab::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_Grab.Popped" );

	UAICommand_Patriarch_Grab_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_Grab.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_Grab::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_Grab.Pushed" );

	UAICommand_Patriarch_Grab_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_Grab.TentacleGrab
// [0x00022002] 
// Parameters infos:

void UAICommand_Patriarch_Grab::TentacleGrab ( )
{
	static UFunction* pFnTentacleGrab = NULL;

	if ( ! pFnTentacleGrab )
		pFnTentacleGrab = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_Grab.TentacleGrab" );

	UAICommand_Patriarch_Grab_execTentacleGrab_Parms TentacleGrab_Parms;

	this->ProcessEvent ( pFnTentacleGrab, &TentacleGrab_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayBossMusic
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PlayBossMusic ( )
{
	static UFunction* pFnPlayBossMusic = NULL;

	if ( ! pFnPlayBossMusic )
		pFnPlayBossMusic = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayBossMusic" );

	AKFPawn_ZedPatriarch_execPlayBossMusic_Parms PlayBossMusic_Parms;

	this->ProcessEvent ( pFnPlayBossMusic, &PlayBossMusic_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.Timer_TickPatriarchDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::Timer_TickPatriarchDialog ( )
{
	static UFunction* pFnTimer_TickPatriarchDialog = NULL;

	if ( ! pFnTimer_TickPatriarchDialog )
		pFnTimer_TickPatriarchDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.Timer_TickPatriarchDialog" );

	AKFPawn_ZedPatriarch_execTimer_TickPatriarchDialog_Parms Timer_TickPatriarchDialog_Parms;

	this->ProcessEvent ( pFnTimer_TickPatriarchDialog, &Timer_TickPatriarchDialog_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayGrabbedPlayerDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PlayGrabbedPlayerDialog ( )
{
	static UFunction* pFnPlayGrabbedPlayerDialog = NULL;

	if ( ! pFnPlayGrabbedPlayerDialog )
		pFnPlayGrabbedPlayerDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayGrabbedPlayerDialog" );

	AKFPawn_ZedPatriarch_execPlayGrabbedPlayerDialog_Parms PlayGrabbedPlayerDialog_Parms;

	this->ProcessEvent ( pFnPlayGrabbedPlayerDialog, &PlayGrabbedPlayerDialog_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayMinigunAttackDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PlayMinigunAttackDialog ( )
{
	static UFunction* pFnPlayMinigunAttackDialog = NULL;

	if ( ! pFnPlayMinigunAttackDialog )
		pFnPlayMinigunAttackDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayMinigunAttackDialog" );

	AKFPawn_ZedPatriarch_execPlayMinigunAttackDialog_Parms PlayMinigunAttackDialog_Parms;

	this->ProcessEvent ( pFnPlayMinigunAttackDialog, &PlayMinigunAttackDialog_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayMinigunWarnDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PlayMinigunWarnDialog ( )
{
	static UFunction* pFnPlayMinigunWarnDialog = NULL;

	if ( ! pFnPlayMinigunWarnDialog )
		pFnPlayMinigunWarnDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayMinigunWarnDialog" );

	AKFPawn_ZedPatriarch_execPlayMinigunWarnDialog_Parms PlayMinigunWarnDialog_Parms;

	this->ProcessEvent ( pFnPlayMinigunWarnDialog, &PlayMinigunWarnDialog_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayStealthSoundLoopEnd
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PlayStealthSoundLoopEnd ( )
{
	static UFunction* pFnPlayStealthSoundLoopEnd = NULL;

	if ( ! pFnPlayStealthSoundLoopEnd )
		pFnPlayStealthSoundLoopEnd = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayStealthSoundLoopEnd" );

	AKFPawn_ZedPatriarch_execPlayStealthSoundLoopEnd_Parms PlayStealthSoundLoopEnd_Parms;

	this->ProcessEvent ( pFnPlayStealthSoundLoopEnd, &PlayStealthSoundLoopEnd_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayStealthSoundLoop
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PlayStealthSoundLoop ( )
{
	static UFunction* pFnPlayStealthSoundLoop = NULL;

	if ( ! pFnPlayStealthSoundLoop )
		pFnPlayStealthSoundLoop = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayStealthSoundLoop" );

	AKFPawn_ZedPatriarch_execPlayStealthSoundLoop_Parms PlayStealthSoundLoop_Parms;

	this->ProcessEvent ( pFnPlayStealthSoundLoop, &PlayStealthSoundLoop_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetSpotterDialogID" );

	AKFPawn_ZedPatriarch_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SetWeaponAmbientSound
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SetWeaponAmbientSound ( )
{
	static UFunction* pFnSetWeaponAmbientSound = NULL;

	if ( ! pFnSetWeaponAmbientSound )
		pFnSetWeaponAmbientSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SetWeaponAmbientSound" );

	AKFPawn_ZedPatriarch_execSetWeaponAmbientSound_Parms SetWeaponAmbientSound_Parms;

	this->ProcessEvent ( pFnSetWeaponAmbientSound, &SetWeaponAmbientSound_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayFootStepSound
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventPlayFootStepSound ( )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayFootStepSound" );

	AKFPawn_ZedPatriarch_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CauseHeadTrauma" );

	AKFPawn_ZedPatriarch_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.TerminateEffectsOnDeath" );

	AKFPawn_ZedPatriarch_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayDying" );

	AKFPawn_ZedPatriarch_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanInjureHitZone
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanInjureHitZone ( )
{
	static UFunction* pFnCanInjureHitZone = NULL;

	if ( ! pFnCanInjureHitZone )
		pFnCanInjureHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanInjureHitZone" );

	AKFPawn_ZedPatriarch_execCanInjureHitZone_Parms CanInjureHitZone_Parms;

	this->ProcessEvent ( pFnCanInjureHitZone, &CanInjureHitZone_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetHitZoneSkinTypeEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetHitZoneSkinTypeEffects ( )
{
	static UFunction* pFnGetHitZoneSkinTypeEffects = NULL;

	if ( ! pFnGetHitZoneSkinTypeEffects )
		pFnGetHitZoneSkinTypeEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetHitZoneSkinTypeEffects" );

	AKFPawn_ZedPatriarch_execGetHitZoneSkinTypeEffects_Parms GetHitZoneSkinTypeEffects_Parms;

	this->ProcessEvent ( pFnGetHitZoneSkinTypeEffects, &GetHitZoneSkinTypeEffects_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PlayTakeHitEffects
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PlayTakeHitEffects ( )
{
	static UFunction* pFnPlayTakeHitEffects = NULL;

	if ( ! pFnPlayTakeHitEffects )
		pFnPlayTakeHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PlayTakeHitEffects" );

	AKFPawn_ZedPatriarch_execPlayTakeHitEffects_Parms PlayTakeHitEffects_Parms;

	this->ProcessEvent ( pFnPlayTakeHitEffects, &PlayTakeHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SetDamageFXActive
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SetDamageFXActive ( )
{
	static UFunction* pFnSetDamageFXActive = NULL;

	if ( ! pFnSetDamageFXActive )
		pFnSetDamageFXActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SetDamageFXActive" );

	AKFPawn_ZedPatriarch_execSetDamageFXActive_Parms SetDamageFXActive_Parms;

	this->ProcessEvent ( pFnSetDamageFXActive, &SetDamageFXActive_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.UpdateBattlePhaseFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::UpdateBattlePhaseFX ( )
{
	static UFunction* pFnUpdateBattlePhaseFX = NULL;

	if ( ! pFnUpdateBattlePhaseFX )
		pFnUpdateBattlePhaseFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.UpdateBattlePhaseFX" );

	AKFPawn_ZedPatriarch_execUpdateBattlePhaseFX_Parms UpdateBattlePhaseFX_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseFX, &UpdateBattlePhaseFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.UpdateBattlePhaseLights
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::UpdateBattlePhaseLights ( )
{
	static UFunction* pFnUpdateBattlePhaseLights = NULL;

	if ( ! pFnUpdateBattlePhaseLights )
		pFnUpdateBattlePhaseLights = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.UpdateBattlePhaseLights" );

	AKFPawn_ZedPatriarch_execUpdateBattlePhaseLights_Parms UpdateBattlePhaseLights_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseLights, &UpdateBattlePhaseLights_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.UpdateBattlePhaseMaterials
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::UpdateBattlePhaseMaterials ( )
{
	static UFunction* pFnUpdateBattlePhaseMaterials = NULL;

	if ( ! pFnUpdateBattlePhaseMaterials )
		pFnUpdateBattlePhaseMaterials = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.UpdateBattlePhaseMaterials" );

	AKFPawn_ZedPatriarch_execUpdateBattlePhaseMaterials_Parms UpdateBattlePhaseMaterials_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseMaterials, &UpdateBattlePhaseMaterials_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.DoCloakFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::DoCloakFX ( )
{
	static UFunction* pFnDoCloakFX = NULL;

	if ( ! pFnDoCloakFX )
		pFnDoCloakFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.DoCloakFX" );

	AKFPawn_ZedPatriarch_execDoCloakFX_Parms DoCloakFX_Parms;

	this->ProcessEvent ( pFnDoCloakFX, &DoCloakFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.UpdateGameplayMICParams
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::UpdateGameplayMICParams ( )
{
	static UFunction* pFnUpdateGameplayMICParams = NULL;

	if ( ! pFnUpdateGameplayMICParams )
		pFnUpdateGameplayMICParams = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.UpdateGameplayMICParams" );

	AKFPawn_ZedPatriarch_execUpdateGameplayMICParams_Parms UpdateGameplayMICParams_Parms;

	this->ProcessEvent ( pFnUpdateGameplayMICParams, &UpdateGameplayMICParams_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CallOutCloakingExpired
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CallOutCloakingExpired ( )
{
	static UFunction* pFnCallOutCloakingExpired = NULL;

	if ( ! pFnCallOutCloakingExpired )
		pFnCallOutCloakingExpired = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CallOutCloakingExpired" );

	AKFPawn_ZedPatriarch_execCallOutCloakingExpired_Parms CallOutCloakingExpired_Parms;

	this->ProcessEvent ( pFnCallOutCloakingExpired, &CallOutCloakingExpired_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CallOutCloaking
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CallOutCloaking ( )
{
	static UFunction* pFnCallOutCloaking = NULL;

	if ( ! pFnCallOutCloaking )
		pFnCallOutCloaking = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CallOutCloaking" );

	AKFPawn_ZedPatriarch_execCallOutCloaking_Parms CallOutCloaking_Parms;

	this->ProcessEvent ( pFnCallOutCloaking, &CallOutCloaking_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.UpdateSpottedStatus
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventUpdateSpottedStatus ( )
{
	static UFunction* pFnUpdateSpottedStatus = NULL;

	if ( ! pFnUpdateSpottedStatus )
		pFnUpdateSpottedStatus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.UpdateSpottedStatus" );

	AKFPawn_ZedPatriarch_eventUpdateSpottedStatus_Parms UpdateSpottedStatus_Parms;

	this->ProcessEvent ( pFnUpdateSpottedStatus, &UpdateSpottedStatus_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CausePanicWander
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CausePanicWander ( )
{
	static UFunction* pFnCausePanicWander = NULL;

	if ( ! pFnCausePanicWander )
		pFnCausePanicWander = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CausePanicWander" );

	AKFPawn_ZedPatriarch_execCausePanicWander_Parms CausePanicWander_Parms;

	this->ProcessEvent ( pFnCausePanicWander, &CausePanicWander_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.OnStackingAfflictionChanged
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::OnStackingAfflictionChanged ( )
{
	static UFunction* pFnOnStackingAfflictionChanged = NULL;

	if ( ! pFnOnStackingAfflictionChanged )
		pFnOnStackingAfflictionChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.OnStackingAfflictionChanged" );

	AKFPawn_ZedPatriarch_execOnStackingAfflictionChanged_Parms OnStackingAfflictionChanged_Parms;

	this->ProcessEvent ( pFnOnStackingAfflictionChanged, &OnStackingAfflictionChanged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.ClientCloakingStateUpdated
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::ClientCloakingStateUpdated ( )
{
	static UFunction* pFnClientCloakingStateUpdated = NULL;

	if ( ! pFnClientCloakingStateUpdated )
		pFnClientCloakingStateUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.ClientCloakingStateUpdated" );

	AKFPawn_ZedPatriarch_execClientCloakingStateUpdated_Parms ClientCloakingStateUpdated_Parms;

	this->ProcessEvent ( pFnClientCloakingStateUpdated, &ClientCloakingStateUpdated_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SetCloaked
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SetCloaked ( )
{
	static UFunction* pFnSetCloaked = NULL;

	if ( ! pFnSetCloaked )
		pFnSetCloaked = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SetCloaked" );

	AKFPawn_ZedPatriarch_execSetCloaked_Parms SetCloaked_Parms;

	this->ProcessEvent ( pFnSetCloaked, &SetCloaked_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.NotifyGoreMeshActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventNotifyGoreMeshActive ( )
{
	static UFunction* pFnNotifyGoreMeshActive = NULL;

	if ( ! pFnNotifyGoreMeshActive )
		pFnNotifyGoreMeshActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.NotifyGoreMeshActive" );

	AKFPawn_ZedPatriarch_eventNotifyGoreMeshActive_Parms NotifyGoreMeshActive_Parms;

	this->ProcessEvent ( pFnNotifyGoreMeshActive, &NotifyGoreMeshActive_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.UpdateHealingSyringeTransparency
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::UpdateHealingSyringeTransparency ( )
{
	static UFunction* pFnUpdateHealingSyringeTransparency = NULL;

	if ( ! pFnUpdateHealingSyringeTransparency )
		pFnUpdateHealingSyringeTransparency = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.UpdateHealingSyringeTransparency" );

	AKFPawn_ZedPatriarch_execUpdateHealingSyringeTransparency_Parms UpdateHealingSyringeTransparency_Parms;

	this->ProcessEvent ( pFnUpdateHealingSyringeTransparency, &UpdateHealingSyringeTransparency_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetMinCloakPct
// [0x00080102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetMinCloakPct ( )
{
	static UFunction* pFnGetMinCloakPct = NULL;

	if ( ! pFnGetMinCloakPct )
		pFnGetMinCloakPct = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetMinCloakPct" );

	AKFPawn_ZedPatriarch_execGetMinCloakPct_Parms GetMinCloakPct_Parms;

	this->ProcessEvent ( pFnGetMinCloakPct, &GetMinCloakPct_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.UpdateGunTrackingSkelCtrl
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::UpdateGunTrackingSkelCtrl ( )
{
	static UFunction* pFnUpdateGunTrackingSkelCtrl = NULL;

	if ( ! pFnUpdateGunTrackingSkelCtrl )
		pFnUpdateGunTrackingSkelCtrl = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.UpdateGunTrackingSkelCtrl" );

	AKFPawn_ZedPatriarch_execUpdateGunTrackingSkelCtrl_Parms UpdateGunTrackingSkelCtrl_Parms;

	this->ProcessEvent ( pFnUpdateGunTrackingSkelCtrl, &UpdateGunTrackingSkelCtrl_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.Tick" );

	AKFPawn_ZedPatriarch_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetMortarAimDirAndTargetLoc
// [0x00C20002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetMortarAimDirAndTargetLoc ( )
{
	static UFunction* pFnGetMortarAimDirAndTargetLoc = NULL;

	if ( ! pFnGetMortarAimDirAndTargetLoc )
		pFnGetMortarAimDirAndTargetLoc = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetMortarAimDirAndTargetLoc" );

	AKFPawn_ZedPatriarch_execGetMortarAimDirAndTargetLoc_Parms GetMortarAimDirAndTargetLoc_Parms;

	this->ProcessEvent ( pFnGetMortarAimDirAndTargetLoc, &GetMortarAimDirAndTargetLoc_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetMortarTarget
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetMortarTarget ( )
{
	static UFunction* pFnGetMortarTarget = NULL;

	if ( ! pFnGetMortarTarget )
		pFnGetMortarTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetMortarTarget" );

	AKFPawn_ZedPatriarch_execGetMortarTarget_Parms GetMortarTarget_Parms;

	this->ProcessEvent ( pFnGetMortarTarget, &GetMortarTarget_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.ClearMortarTargets
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::ClearMortarTargets ( )
{
	static UFunction* pFnClearMortarTargets = NULL;

	if ( ! pFnClearMortarTargets )
		pFnClearMortarTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.ClearMortarTargets" );

	AKFPawn_ZedPatriarch_execClearMortarTargets_Parms ClearMortarTargets_Parms;

	this->ProcessEvent ( pFnClearMortarTargets, &ClearMortarTargets_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PreMortarAttack
// [0x00020000] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PreMortarAttack ( )
{
	static UFunction* pFnPreMortarAttack = NULL;

	if ( ! pFnPreMortarAttack )
		pFnPreMortarAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PreMortarAttack" );

	AKFPawn_ZedPatriarch_execPreMortarAttack_Parms PreMortarAttack_Parms;

	this->ProcessEvent ( pFnPreMortarAttack, &PreMortarAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CollectMortarTargets
// [0x00824002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CollectMortarTargets ( )
{
	static UFunction* pFnCollectMortarTargets = NULL;

	if ( ! pFnCollectMortarTargets )
		pFnCollectMortarTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CollectMortarTargets" );

	AKFPawn_ZedPatriarch_execCollectMortarTargets_Parms CollectMortarTargets_Parms;

	this->ProcessEvent ( pFnCollectMortarTargets, &CollectMortarTargets_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetMortarClass
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetMortarClass ( )
{
	static UFunction* pFnGetMortarClass = NULL;

	if ( ! pFnGetMortarClass )
		pFnGetMortarClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetMortarClass" );

	AKFPawn_ZedPatriarch_execGetMortarClass_Parms GetMortarClass_Parms;

	this->ProcessEvent ( pFnGetMortarClass, &GetMortarClass_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetMissileAimDirAndTargetLoc
// [0x00C20002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetMissileAimDirAndTargetLoc ( )
{
	static UFunction* pFnGetMissileAimDirAndTargetLoc = NULL;

	if ( ! pFnGetMissileAimDirAndTargetLoc )
		pFnGetMissileAimDirAndTargetLoc = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetMissileAimDirAndTargetLoc" );

	AKFPawn_ZedPatriarch_execGetMissileAimDirAndTargetLoc_Parms GetMissileAimDirAndTargetLoc_Parms;

	this->ProcessEvent ( pFnGetMissileAimDirAndTargetLoc, &GetMissileAimDirAndTargetLoc_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetMissileClass
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetMissileClass ( )
{
	static UFunction* pFnGetMissileClass = NULL;

	if ( ! pFnGetMissileClass )
		pFnGetMissileClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetMissileClass" );

	AKFPawn_ZedPatriarch_execGetMissileClass_Parms GetMissileClass_Parms;

	this->ProcessEvent ( pFnGetMissileClass, &GetMissileClass_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetAdjustedAimFor
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetAdjustedAimFor ( )
{
	static UFunction* pFnGetAdjustedAimFor = NULL;

	if ( ! pFnGetAdjustedAimFor )
		pFnGetAdjustedAimFor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetAdjustedAimFor" );

	AKFPawn_ZedPatriarch_execGetAdjustedAimFor_Parms GetAdjustedAimFor_Parms;

	this->ProcessEvent ( pFnGetAdjustedAimFor, &GetAdjustedAimFor_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetWeaponStartTraceLocation
// [0x00824902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventGetWeaponStartTraceLocation ( )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetWeaponStartTraceLocation" );

	AKFPawn_ZedPatriarch_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SetGunTracking
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SetGunTracking ( )
{
	static UFunction* pFnSetGunTracking = NULL;

	if ( ! pFnSetGunTracking )
		pFnSetGunTracking = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SetGunTracking" );

	AKFPawn_ZedPatriarch_execSetGunTracking_Parms SetGunTracking_Parms;

	this->ProcessEvent ( pFnSetGunTracking, &SetGunTracking_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SpinMinigunBarrels
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SpinMinigunBarrels ( )
{
	static UFunction* pFnSpinMinigunBarrels = NULL;

	if ( ! pFnSpinMinigunBarrels )
		pFnSpinMinigunBarrels = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SpinMinigunBarrels" );

	AKFPawn_ZedPatriarch_execSpinMinigunBarrels_Parms SpinMinigunBarrels_Parms;

	this->ProcessEvent ( pFnSpinMinigunBarrels, &SpinMinigunBarrels_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanMoveWhenMinigunning
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanMoveWhenMinigunning ( )
{
	static UFunction* pFnCanMoveWhenMinigunning = NULL;

	if ( ! pFnCanMoveWhenMinigunning )
		pFnCanMoveWhenMinigunning = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanMoveWhenMinigunning" );

	AKFPawn_ZedPatriarch_execCanMoveWhenMinigunning_Parms CanMoveWhenMinigunning_Parms;

	this->ProcessEvent ( pFnCanMoveWhenMinigunning, &CanMoveWhenMinigunning_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanBlock
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanBlock ( )
{
	static UFunction* pFnCanBlock = NULL;

	if ( ! pFnCanBlock )
		pFnCanBlock = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanBlock" );

	AKFPawn_ZedPatriarch_execCanBlock_Parms CanBlock_Parms;

	this->ProcessEvent ( pFnCanBlock, &CanBlock_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanDoMortarBarrage
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanDoMortarBarrage ( )
{
	static UFunction* pFnCanDoMortarBarrage = NULL;

	if ( ! pFnCanDoMortarBarrage )
		pFnCanDoMortarBarrage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanDoMortarBarrage" );

	AKFPawn_ZedPatriarch_execCanDoMortarBarrage_Parms CanDoMortarBarrage_Parms;

	this->ProcessEvent ( pFnCanDoMortarBarrage, &CanDoMortarBarrage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanMortarAttack
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanMortarAttack ( )
{
	static UFunction* pFnCanMortarAttack = NULL;

	if ( ! pFnCanMortarAttack )
		pFnCanMortarAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanMortarAttack" );

	AKFPawn_ZedPatriarch_execCanMortarAttack_Parms CanMortarAttack_Parms;

	this->ProcessEvent ( pFnCanMortarAttack, &CanMortarAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanMissileAttack
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanMissileAttack ( )
{
	static UFunction* pFnCanMissileAttack = NULL;

	if ( ! pFnCanMissileAttack )
		pFnCanMissileAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanMissileAttack" );

	AKFPawn_ZedPatriarch_execCanMissileAttack_Parms CanMissileAttack_Parms;

	this->ProcessEvent ( pFnCanMissileAttack, &CanMissileAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanTentacleGrab
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanTentacleGrab ( )
{
	static UFunction* pFnCanTentacleGrab = NULL;

	if ( ! pFnCanTentacleGrab )
		pFnCanTentacleGrab = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanTentacleGrab" );

	AKFPawn_ZedPatriarch_execCanTentacleGrab_Parms CanTentacleGrab_Parms;

	this->ProcessEvent ( pFnCanTentacleGrab, &CanTentacleGrab_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanChargeAttack
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanChargeAttack ( )
{
	static UFunction* pFnCanChargeAttack = NULL;

	if ( ! pFnCanChargeAttack )
		pFnCanChargeAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanChargeAttack" );

	AKFPawn_ZedPatriarch_execCanChargeAttack_Parms CanChargeAttack_Parms;

	this->ProcessEvent ( pFnCanChargeAttack, &CanChargeAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.StartWeaponCooldown
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::StartWeaponCooldown ( )
{
	static UFunction* pFnStartWeaponCooldown = NULL;

	if ( ! pFnStartWeaponCooldown )
		pFnStartWeaponCooldown = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.StartWeaponCooldown" );

	AKFPawn_ZedPatriarch_execStartWeaponCooldown_Parms StartWeaponCooldown_Parms;

	this->ProcessEvent ( pFnStartWeaponCooldown, &StartWeaponCooldown_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SetPhaseCooldowns
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SetPhaseCooldowns ( )
{
	static UFunction* pFnSetPhaseCooldowns = NULL;

	if ( ! pFnSetPhaseCooldowns )
		pFnSetPhaseCooldowns = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SetPhaseCooldowns" );

	AKFPawn_ZedPatriarch_execSetPhaseCooldowns_Parms SetPhaseCooldowns_Parms;

	this->ProcessEvent ( pFnSetPhaseCooldowns, &SetPhaseCooldowns_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.OnBattlePhaseChanged
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::OnBattlePhaseChanged ( )
{
	static UFunction* pFnOnBattlePhaseChanged = NULL;

	if ( ! pFnOnBattlePhaseChanged )
		pFnOnBattlePhaseChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.OnBattlePhaseChanged" );

	AKFPawn_ZedPatriarch_execOnBattlePhaseChanged_Parms OnBattlePhaseChanged_Parms;

	this->ProcessEvent ( pFnOnBattlePhaseChanged, &OnBattlePhaseChanged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.IncrementBattlePhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::IncrementBattlePhase ( )
{
	static UFunction* pFnIncrementBattlePhase = NULL;

	if ( ! pFnIncrementBattlePhase )
		pFnIncrementBattlePhase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.IncrementBattlePhase" );

	AKFPawn_ZedPatriarch_execIncrementBattlePhase_Parms IncrementBattlePhase_Parms;

	this->ProcessEvent ( pFnIncrementBattlePhase, &IncrementBattlePhase_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.DesireSprintingInThisPhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::DesireSprintingInThisPhase ( )
{
	static UFunction* pFnDesireSprintingInThisPhase = NULL;

	if ( ! pFnDesireSprintingInThisPhase )
		pFnDesireSprintingInThisPhase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.DesireSprintingInThisPhase" );

	AKFPawn_ZedPatriarch_execDesireSprintingInThisPhase_Parms DesireSprintingInThisPhase_Parms;

	this->ProcessEvent ( pFnDesireSprintingInThisPhase, &DesireSprintingInThisPhase_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.FleeAndHealBump
// [0x00820002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::FleeAndHealBump ( )
{
	static UFunction* pFnFleeAndHealBump = NULL;

	if ( ! pFnFleeAndHealBump )
		pFnFleeAndHealBump = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.FleeAndHealBump" );

	AKFPawn_ZedPatriarch_execFleeAndHealBump_Parms FleeAndHealBump_Parms;

	this->ProcessEvent ( pFnFleeAndHealBump, &FleeAndHealBump_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.Bump
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventBump ( )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.Bump" );

	AKFPawn_ZedPatriarch_eventBump_Parms Bump_Parms;

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.BreakOffSyringe
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::BreakOffSyringe ( )
{
	static UFunction* pFnBreakOffSyringe = NULL;

	if ( ! pFnBreakOffSyringe )
		pFnBreakOffSyringe = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.BreakOffSyringe" );

	AKFPawn_ZedPatriarch_execBreakOffSyringe_Parms BreakOffSyringe_Parms;

	this->ProcessEvent ( pFnBreakOffSyringe, &BreakOffSyringe_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.ANIMNOTIFY_SpawnedKActor
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::ANIMNOTIFY_SpawnedKActor ( )
{
	static UFunction* pFnANIMNOTIFY_SpawnedKActor = NULL;

	if ( ! pFnANIMNOTIFY_SpawnedKActor )
		pFnANIMNOTIFY_SpawnedKActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.ANIMNOTIFY_SpawnedKActor" );

	AKFPawn_ZedPatriarch_execANIMNOTIFY_SpawnedKActor_Parms ANIMNOTIFY_SpawnedKActor_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_SpawnedKActor, &ANIMNOTIFY_SpawnedKActor_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.ANIMNOTIFY_GrabSyringe
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::ANIMNOTIFY_GrabSyringe ( )
{
	static UFunction* pFnANIMNOTIFY_GrabSyringe = NULL;

	if ( ! pFnANIMNOTIFY_GrabSyringe )
		pFnANIMNOTIFY_GrabSyringe = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.ANIMNOTIFY_GrabSyringe" );

	AKFPawn_ZedPatriarch_execANIMNOTIFY_GrabSyringe_Parms ANIMNOTIFY_GrabSyringe_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_GrabSyringe, &ANIMNOTIFY_GrabSyringe_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.CanSummonChildren
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::CanSummonChildren ( )
{
	static UFunction* pFnCanSummonChildren = NULL;

	if ( ! pFnCanSummonChildren )
		pFnCanSummonChildren = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.CanSummonChildren" );

	AKFPawn_ZedPatriarch_execCanSummonChildren_Parms CanSummonChildren_Parms;

	this->ProcessEvent ( pFnCanSummonChildren, &CanSummonChildren_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SummonChildren
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SummonChildren ( )
{
	static UFunction* pFnSummonChildren = NULL;

	if ( ! pFnSummonChildren )
		pFnSummonChildren = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SummonChildren" );

	AKFPawn_ZedPatriarch_execSummonChildren_Parms SummonChildren_Parms;

	this->ProcessEvent ( pFnSummonChildren, &SummonChildren_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SetFleeAndHealMode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SetFleeAndHealMode ( )
{
	static UFunction* pFnSetFleeAndHealMode = NULL;

	if ( ! pFnSetFleeAndHealMode )
		pFnSetFleeAndHealMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SetFleeAndHealMode" );

	AKFPawn_ZedPatriarch_execSetFleeAndHealMode_Parms SetFleeAndHealMode_Parms;

	this->ProcessEvent ( pFnSetFleeAndHealMode, &SetFleeAndHealMode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.GetBumpAttackDamageType
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::GetBumpAttackDamageType ( )
{
	static UFunction* pFnGetBumpAttackDamageType = NULL;

	if ( ! pFnGetBumpAttackDamageType )
		pFnGetBumpAttackDamageType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.GetBumpAttackDamageType" );

	AKFPawn_ZedPatriarch_execGetBumpAttackDamageType_Parms GetBumpAttackDamageType_Parms;

	this->ProcessEvent ( pFnGetBumpAttackDamageType, &GetBumpAttackDamageType_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PossessedBy" );

	AKFPawn_ZedPatriarch_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PostInitAnimTree" );

	AKFPawn_ZedPatriarch_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.SetCharacterArch
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedPatriarch::SetCharacterArch ( )
{
	static UFunction* pFnSetCharacterArch = NULL;

	if ( ! pFnSetCharacterArch )
		pFnSetCharacterArch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.SetCharacterArch" );

	AKFPawn_ZedPatriarch_execSetCharacterArch_Parms SetCharacterArch_Parms;

	this->ProcessEvent ( pFnSetCharacterArch, &SetCharacterArch_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.PostBeginPlay" );

	AKFPawn_ZedPatriarch_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch.ReplicatedEvent" );

	AKFPawn_ZedPatriarch_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.GetSpecialMove
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_MinigunBarrage::GetSpecialMove ( )
{
	static UFunction* pFnGetSpecialMove = NULL;

	if ( ! pFnGetSpecialMove )
		pFnGetSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.GetSpecialMove" );

	UAICommand_Patriarch_MinigunBarrage_execGetSpecialMove_Parms GetSpecialMove_Parms;

	this->ProcessEvent ( pFnGetSpecialMove, &GetSpecialMove_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_MinigunBarrage::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.Popped" );

	UAICommand_Patriarch_MinigunBarrage_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.LockdownAI
// [0x00020000] 
// Parameters infos:

void UAICommand_Patriarch_MinigunBarrage::LockdownAI ( )
{
	static UFunction* pFnLockdownAI = NULL;

	if ( ! pFnLockdownAI )
		pFnLockdownAI = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.LockdownAI" );

	UAICommand_Patriarch_MinigunBarrage_execLockdownAI_Parms LockdownAI_Parms;

	this->ProcessEvent ( pFnLockdownAI, &LockdownAI_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_MinigunBarrage::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.Pushed" );

	UAICommand_Patriarch_MinigunBarrage_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.MinigunBarrage
// [0x00022002] 
// Parameters infos:

void UAICommand_Patriarch_MinigunBarrage::MinigunBarrage ( )
{
	static UFunction* pFnMinigunBarrage = NULL;

	if ( ! pFnMinigunBarrage )
		pFnMinigunBarrage = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MinigunBarrage.MinigunBarrage" );

	UAICommand_Patriarch_MinigunBarrage_execMinigunBarrage_Parms MinigunBarrage_Parms;

	this->ProcessEvent ( pFnMinigunBarrage, &MinigunBarrage_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.SpecialMoveEnded" );

	UKFSM_Patriarch_MinigunBarrage_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.AnimEndNotify" );

	UKFSM_Patriarch_MinigunBarrage_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PlayWindDownAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::PlayWindDownAnim ( )
{
	static UFunction* pFnPlayWindDownAnim = NULL;

	if ( ! pFnPlayWindDownAnim )
		pFnPlayWindDownAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PlayWindDownAnim" );

	UKFSM_Patriarch_MinigunBarrage_execPlayWindDownAnim_Parms PlayWindDownAnim_Parms;

	this->ProcessEvent ( pFnPlayWindDownAnim, &PlayWindDownAnim_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.Timer_SearchForMinigunTargets
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::Timer_SearchForMinigunTargets ( )
{
	static UFunction* pFnTimer_SearchForMinigunTargets = NULL;

	if ( ! pFnTimer_SearchForMinigunTargets )
		pFnTimer_SearchForMinigunTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.Timer_SearchForMinigunTargets" );

	UKFSM_Patriarch_MinigunBarrage_execTimer_SearchForMinigunTargets_Parms Timer_SearchForMinigunTargets_Parms;

	this->ProcessEvent ( pFnTimer_SearchForMinigunTargets, &Timer_SearchForMinigunTargets_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.Timer_CheckIfFireAllowed
// [0x00820002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::Timer_CheckIfFireAllowed ( )
{
	static UFunction* pFnTimer_CheckIfFireAllowed = NULL;

	if ( ! pFnTimer_CheckIfFireAllowed )
		pFnTimer_CheckIfFireAllowed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.Timer_CheckIfFireAllowed" );

	UKFSM_Patriarch_MinigunBarrage_execTimer_CheckIfFireAllowed_Parms Timer_CheckIfFireAllowed_Parms;

	this->ProcessEvent ( pFnTimer_CheckIfFireAllowed, &Timer_CheckIfFireAllowed_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PlayFireAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::PlayFireAnim ( )
{
	static UFunction* pFnPlayFireAnim = NULL;

	if ( ! pFnPlayFireAnim )
		pFnPlayFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PlayFireAnim" );

	UKFSM_Patriarch_MinigunBarrage_execPlayFireAnim_Parms PlayFireAnim_Parms;

	this->ProcessEvent ( pFnPlayFireAnim, &PlayFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.SpecialMoveFlagsUpdated" );

	UKFSM_Patriarch_MinigunBarrage_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.Timer_CheckEnemyLOS
// [0x00820002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::Timer_CheckEnemyLOS ( )
{
	static UFunction* pFnTimer_CheckEnemyLOS = NULL;

	if ( ! pFnTimer_CheckEnemyLOS )
		pFnTimer_CheckEnemyLOS = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.Timer_CheckEnemyLOS" );

	UKFSM_Patriarch_MinigunBarrage_execTimer_CheckEnemyLOS_Parms Timer_CheckEnemyLOS_Parms;

	this->ProcessEvent ( pFnTimer_CheckEnemyLOS, &Timer_CheckEnemyLOS_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PlayWindUpAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::PlayWindUpAnimation ( )
{
	static UFunction* pFnPlayWindUpAnimation = NULL;

	if ( ! pFnPlayWindUpAnimation )
		pFnPlayWindUpAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PlayWindUpAnimation" );

	UKFSM_Patriarch_MinigunBarrage_execPlayWindUpAnimation_Parms PlayWindUpAnimation_Parms;

	this->ProcessEvent ( pFnPlayWindUpAnimation, &PlayWindUpAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PlayAnimation
// [0x00020000] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PlayAnimation" );

	UKFSM_Patriarch_MinigunBarrage_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.GetAnimStance
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::GetAnimStance ( )
{
	static UFunction* pFnGetAnimStance = NULL;

	if ( ! pFnGetAnimStance )
		pFnGetAnimStance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.GetAnimStance" );

	UKFSM_Patriarch_MinigunBarrage_execGetAnimStance_Parms GetAnimStance_Parms;

	this->ProcessEvent ( pFnGetAnimStance, &GetAnimStance_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.SpecialMoveStarted" );

	UKFSM_Patriarch_MinigunBarrage_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PackSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Patriarch_MinigunBarrage::PackSMFlags ( )
{
	static UFunction* pFnPackSMFlags = NULL;

	if ( ! pFnPackSMFlags )
		pFnPackSMFlags = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MinigunBarrage.PackSMFlags" );

	UKFSM_Patriarch_MinigunBarrage_execPackSMFlags_Parms PackSMFlags_Parms;

	this->ProcessEvent ( pFnPackSMFlags, &PackSMFlags_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MissileAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_MissileAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MissileAttack.Popped" );

	UAICommand_Patriarch_MissileAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MissileAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_MissileAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MissileAttack.Pushed" );

	UAICommand_Patriarch_MissileAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MissileAttack.FireMissiles
// [0x00022002] 
// Parameters infos:

void UAICommand_Patriarch_MissileAttack::FireMissiles ( )
{
	static UFunction* pFnFireMissiles = NULL;

	if ( ! pFnFireMissiles )
		pFnFireMissiles = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MissileAttack.FireMissiles" );

	UAICommand_Patriarch_MissileAttack_execFireMissiles_Parms FireMissiles_Parms;

	this->ProcessEvent ( pFnFireMissiles, &FireMissiles_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MortarAttack.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_MortarAttack::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MortarAttack.Popped" );

	UAICommand_Patriarch_MortarAttack_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MortarAttack.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Patriarch_MortarAttack::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MortarAttack.Pushed" );

	UAICommand_Patriarch_MortarAttack_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_Patriarch_MortarAttack.FireMortar
// [0x00022002] 
// Parameters infos:

void UAICommand_Patriarch_MortarAttack::FireMortar ( )
{
	static UFunction* pFnFireMortar = NULL;

	if ( ! pFnFireMortar )
		pFnFireMortar = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Patriarch_MortarAttack.FireMortar" );

	UAICommand_Patriarch_MortarAttack_execFireMortar_Parms FireMortar_Parms;

	this->ProcessEvent ( pFnFireMortar, &FireMortar_Parms, NULL );
};

// Function kfgamecontent.AICommand_Siren_Scream.Popped
// [0x00020002] 
// Parameters infos:

void UAICommand_Siren_Scream::Popped ( )
{
	static UFunction* pFnPopped = NULL;

	if ( ! pFnPopped )
		pFnPopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Siren_Scream.Popped" );

	UAICommand_Siren_Scream_execPopped_Parms Popped_Parms;

	this->ProcessEvent ( pFnPopped, &Popped_Parms, NULL );
};

// Function kfgamecontent.AICommand_Siren_Scream.Pushed
// [0x00020002] 
// Parameters infos:

void UAICommand_Siren_Scream::Pushed ( )
{
	static UFunction* pFnPushed = NULL;

	if ( ! pFnPushed )
		pFnPushed = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Siren_Scream.Pushed" );

	UAICommand_Siren_Scream_execPushed_Parms Pushed_Parms;

	this->ProcessEvent ( pFnPushed, &Pushed_Parms, NULL );
};

// Function kfgamecontent.AICommand_Siren_Scream.LockdownAI
// [0x00020000] 
// Parameters infos:

void UAICommand_Siren_Scream::LockdownAI ( )
{
	static UFunction* pFnLockdownAI = NULL;

	if ( ! pFnLockdownAI )
		pFnLockdownAI = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Siren_Scream.LockdownAI" );

	UAICommand_Siren_Scream_execLockdownAI_Parms LockdownAI_Parms;

	this->ProcessEvent ( pFnLockdownAI, &LockdownAI_Parms, NULL );
};

// Function kfgamecontent.AICommand_Siren_Scream.Scream
// [0x00022002] 
// Parameters infos:

void UAICommand_Siren_Scream::Scream ( )
{
	static UFunction* pFnScream = NULL;

	if ( ! pFnScream )
		pFnScream = UObject::FindObject< UFunction > ( "Function kfgamecontent.AICommand_Siren_Scream.Scream" );

	UAICommand_Siren_Scream_execScream_Parms Scream_Parms;

	this->ProcessEvent ( pFnScream, &Scream_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.EnterZedVictoryState
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedSiren::EnterZedVictoryState ( )
{
	static UFunction* pFnEnterZedVictoryState = NULL;

	if ( ! pFnEnterZedVictoryState )
		pFnEnterZedVictoryState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.EnterZedVictoryState" );

	AKFAIController_ZedSiren_execEnterZedVictoryState_Parms EnterZedVictoryState_Parms;

	this->ProcessEvent ( pFnEnterZedVictoryState, &EnterZedVictoryState_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.DoPanicWander
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedSiren::DoPanicWander ( )
{
	static UFunction* pFnDoPanicWander = NULL;

	if ( ! pFnDoPanicWander )
		pFnDoPanicWander = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.DoPanicWander" );

	AKFAIController_ZedSiren_execDoPanicWander_Parms DoPanicWander_Parms;

	this->ProcessEvent ( pFnDoPanicWander, &DoPanicWander_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.NotifyCommandFinished
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedSiren::NotifyCommandFinished ( )
{
	static UFunction* pFnNotifyCommandFinished = NULL;

	if ( ! pFnNotifyCommandFinished )
		pFnNotifyCommandFinished = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.NotifyCommandFinished" );

	AKFAIController_ZedSiren_execNotifyCommandFinished_Parms NotifyCommandFinished_Parms;

	this->ProcessEvent ( pFnNotifyCommandFinished, &NotifyCommandFinished_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.NotifyMeleeAttackFinished
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedSiren::NotifyMeleeAttackFinished ( )
{
	static UFunction* pFnNotifyMeleeAttackFinished = NULL;

	if ( ! pFnNotifyMeleeAttackFinished )
		pFnNotifyMeleeAttackFinished = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.NotifyMeleeAttackFinished" );

	AKFAIController_ZedSiren_execNotifyMeleeAttackFinished_Parms NotifyMeleeAttackFinished_Parms;

	this->ProcessEvent ( pFnNotifyMeleeAttackFinished, &NotifyMeleeAttackFinished_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.NotifyReachedLatentMoveGoal
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedSiren::NotifyReachedLatentMoveGoal ( )
{
	static UFunction* pFnNotifyReachedLatentMoveGoal = NULL;

	if ( ! pFnNotifyReachedLatentMoveGoal )
		pFnNotifyReachedLatentMoveGoal = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.NotifyReachedLatentMoveGoal" );

	AKFAIController_ZedSiren_execNotifyReachedLatentMoveGoal_Parms NotifyReachedLatentMoveGoal_Parms;

	this->ProcessEvent ( pFnNotifyReachedLatentMoveGoal, &NotifyReachedLatentMoveGoal_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.NotifySpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedSiren::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.NotifySpecialMoveEnded" );

	AKFAIController_ZedSiren_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.NotifySpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedSiren::NotifySpecialMoveStarted ( )
{
	static UFunction* pFnNotifySpecialMoveStarted = NULL;

	if ( ! pFnNotifySpecialMoveStarted )
		pFnNotifySpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.NotifySpecialMoveStarted" );

	AKFAIController_ZedSiren_execNotifySpecialMoveStarted_Parms NotifySpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveStarted, &NotifySpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.AcquireEnemyAndScream
// [0x00024002] 
// Parameters infos:

void AKFAIController_ZedSiren::AcquireEnemyAndScream ( )
{
	static UFunction* pFnAcquireEnemyAndScream = NULL;

	if ( ! pFnAcquireEnemyAndScream )
		pFnAcquireEnemyAndScream = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.AcquireEnemyAndScream" );

	AKFAIController_ZedSiren_execAcquireEnemyAndScream_Parms AcquireEnemyAndScream_Parms;

	this->ProcessEvent ( pFnAcquireEnemyAndScream, &AcquireEnemyAndScream_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.DoScream
// [0x00024002] 
// Parameters infos:

void AKFAIController_ZedSiren::DoScream ( )
{
	static UFunction* pFnDoScream = NULL;

	if ( ! pFnDoScream )
		pFnDoScream = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.DoScream" );

	AKFAIController_ZedSiren_execDoScream_Parms DoScream_Parms;

	this->ProcessEvent ( pFnDoScream, &DoScream_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedSiren.PreMoveToEnemy
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedSiren::PreMoveToEnemy ( )
{
	static UFunction* pFnPreMoveToEnemy = NULL;

	if ( ! pFnPreMoveToEnemy )
		pFnPreMoveToEnemy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedSiren.PreMoveToEnemy" );

	AKFAIController_ZedSiren_execPreMoveToEnemy_Parms PreMoveToEnemy_Parms;

	this->ProcessEvent ( pFnPreMoveToEnemy, &PreMoveToEnemy_Parms, NULL );
};

// Function kfgamecontent.KFActor_DestructibleTracker.OnDestroyed
// [0x00020002] 
// Parameters infos:

void AKFActor_DestructibleTracker::OnDestroyed ( )
{
	static UFunction* pFnOnDestroyed = NULL;

	if ( ! pFnOnDestroyed )
		pFnOnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFActor_DestructibleTracker.OnDestroyed" );

	AKFActor_DestructibleTracker_execOnDestroyed_Parms OnDestroyed_Parms;

	this->ProcessEvent ( pFnOnDestroyed, &OnDestroyed_Parms, NULL );
};

// Function kfgamecontent.KFActor_DestructibleTracker.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFActor_DestructibleTracker::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFActor_DestructibleTracker.Destroyed" );

	AKFActor_DestructibleTracker_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFActor_DestructibleTracker.SetupActorDelegates
// [0x00020002] 
// Parameters infos:

void AKFActor_DestructibleTracker::SetupActorDelegates ( )
{
	static UFunction* pFnSetupActorDelegates = NULL;

	if ( ! pFnSetupActorDelegates )
		pFnSetupActorDelegates = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFActor_DestructibleTracker.SetupActorDelegates" );

	AKFActor_DestructibleTracker_execSetupActorDelegates_Parms SetupActorDelegates_Parms;

	this->ProcessEvent ( pFnSetupActorDelegates, &SetupActorDelegates_Parms, NULL );
};

// Function kfgamecontent.KFActor_DestructibleTracker.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFActor_DestructibleTracker::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFActor_DestructibleTracker.SetInitialState" );

	AKFActor_DestructibleTracker_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function kfgamecontent.KFAffliction_Fire_Patriarch.SetMaterialParameter
// [0x00020002] 
// Parameters infos:

void UKFAffliction_Fire_Patriarch::SetMaterialParameter ( )
{
	static UFunction* pFnSetMaterialParameter = NULL;

	if ( ! pFnSetMaterialParameter )
		pFnSetMaterialParameter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAffliction_Fire_Patriarch.SetMaterialParameter" );

	UKFAffliction_Fire_Patriarch_execSetMaterialParameter_Parms SetMaterialParameter_Parms;

	this->ProcessEvent ( pFnSetMaterialParameter, &SetMaterialParameter_Parms, NULL );
};

// Function kfgamecontent.KFAIController_HansFriendlyTest.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void AKFAIController_HansFriendlyTest::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_HansFriendlyTest.NotifyTakeHit" );

	AKFAIController_HansFriendlyTest_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function kfgamecontent.KFAIController_HansFriendlyTest.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_HansFriendlyTest::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_HansFriendlyTest.ShouldSprint" );

	AKFAIController_HansFriendlyTest_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function kfgamecontent.KFAIController_HansFriendlyTest.ScriptGetTeamNum
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController_HansFriendlyTest::eventScriptGetTeamNum ( )
{
	static UFunction* pFnScriptGetTeamNum = NULL;

	if ( ! pFnScriptGetTeamNum )
		pFnScriptGetTeamNum = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_HansFriendlyTest.ScriptGetTeamNum" );

	AKFAIController_HansFriendlyTest_eventScriptGetTeamNum_Parms ScriptGetTeamNum_Parms;

	this->ProcessEvent ( pFnScriptGetTeamNum, &ScriptGetTeamNum_Parms, NULL );
};

// Function kfgamecontent.KFAIController_HansFriendlyTest.InitPlayerReplicationInfo
// [0x00020000] 
// Parameters infos:

void AKFAIController_HansFriendlyTest::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_HansFriendlyTest.InitPlayerReplicationInfo" );

	AKFAIController_HansFriendlyTest_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedHusk::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.GetTraderAdviceID" );

	AKFPawn_ZedHusk_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.OnStackingAfflictionChanged
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHusk::OnStackingAfflictionChanged ( )
{
	static UFunction* pFnOnStackingAfflictionChanged = NULL;

	if ( ! pFnOnStackingAfflictionChanged )
		pFnOnStackingAfflictionChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.OnStackingAfflictionChanged" );

	AKFPawn_ZedHusk_execOnStackingAfflictionChanged_Parms OnStackingAfflictionChanged_Parms;

	this->ProcessEvent ( pFnOnStackingAfflictionChanged, &OnStackingAfflictionChanged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.PlayHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHusk::PlayHit ( )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.PlayHit" );

	AKFPawn_ZedHusk_execPlayHit_Parms PlayHit_Parms;

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHusk::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.NotifyTakeHit" );

	AKFPawn_ZedHusk_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFPawn_ZedHusk::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.AdjustDamage" );

	AKFPawn_ZedHusk_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.OnExploded
// [0x00020100] 
// Parameters infos:

void AKFPawn_ZedHusk::OnExploded ( )
{
	static UFunction* pFnOnExploded = NULL;

	if ( ! pFnOnExploded )
		pFnOnExploded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.OnExploded" );

	AKFPawn_ZedHusk_execOnExploded_Parms OnExploded_Parms;

	this->ProcessEvent ( pFnOnExploded, &OnExploded_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.WeeklyShouldExplodeOnDeath
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHusk::WeeklyShouldExplodeOnDeath ( )
{
	static UFunction* pFnWeeklyShouldExplodeOnDeath = NULL;

	if ( ! pFnWeeklyShouldExplodeOnDeath )
		pFnWeeklyShouldExplodeOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.WeeklyShouldExplodeOnDeath" );

	AKFPawn_ZedHusk_execWeeklyShouldExplodeOnDeath_Parms WeeklyShouldExplodeOnDeath_Parms;

	this->ProcessEvent ( pFnWeeklyShouldExplodeOnDeath, &WeeklyShouldExplodeOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.TriggerExplosion
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedHusk::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.TriggerExplosion" );

	AKFPawn_ZedHusk_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.HitZoneInjured
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedHusk::HitZoneInjured ( )
{
	static UFunction* pFnHitZoneInjured = NULL;

	if ( ! pFnHitZoneInjured )
		pFnHitZoneInjured = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.HitZoneInjured" );

	AKFPawn_ZedHusk_execHitZoneInjured_Parms HitZoneInjured_Parms;

	this->ProcessEvent ( pFnHitZoneInjured, &HitZoneInjured_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.CanInjureHitZone
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHusk::CanInjureHitZone ( )
{
	static UFunction* pFnCanInjureHitZone = NULL;

	if ( ! pFnCanInjureHitZone )
		pFnCanInjureHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.CanInjureHitZone" );

	AKFPawn_ZedHusk_execCanInjureHitZone_Parms CanInjureHitZone_Parms;

	this->ProcessEvent ( pFnCanInjureHitZone, &CanInjureHitZone_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.ApplySpecialZoneHealthMod
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHusk::ApplySpecialZoneHealthMod ( )
{
	static UFunction* pFnApplySpecialZoneHealthMod = NULL;

	if ( ! pFnApplySpecialZoneHealthMod )
		pFnApplySpecialZoneHealthMod = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.ApplySpecialZoneHealthMod" );

	AKFPawn_ZedHusk_execApplySpecialZoneHealthMod_Parms ApplySpecialZoneHealthMod_Parms;

	this->ProcessEvent ( pFnApplySpecialZoneHealthMod, &ApplySpecialZoneHealthMod_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.GetSuicideSM
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk::GetSuicideSM ( )
{
	static UFunction* pFnGetSuicideSM = NULL;

	if ( ! pFnGetSuicideSM )
		pFnGetSuicideSM = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.GetSuicideSM" );

	AKFPawn_ZedHusk_execGetSuicideSM_Parms GetSuicideSM_Parms;

	this->ProcessEvent ( pFnGetSuicideSM, &GetSuicideSM_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.OnAnimNotifyParticleSystemSpawned
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk::OnAnimNotifyParticleSystemSpawned ( )
{
	static UFunction* pFnOnAnimNotifyParticleSystemSpawned = NULL;

	if ( ! pFnOnAnimNotifyParticleSystemSpawned )
		pFnOnAnimNotifyParticleSystemSpawned = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.OnAnimNotifyParticleSystemSpawned" );

	AKFPawn_ZedHusk_execOnAnimNotifyParticleSystemSpawned_Parms OnAnimNotifyParticleSystemSpawned_Parms;

	this->ProcessEvent ( pFnOnAnimNotifyParticleSystemSpawned, &OnAnimNotifyParticleSystemSpawned_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.TerminateEffectsOnDeath" );

	AKFPawn_ZedHusk_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.GetWeaponStartTraceLocation
// [0x00824902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHusk::eventGetWeaponStartTraceLocation ( )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.GetWeaponStartTraceLocation" );

	AKFPawn_ZedHusk_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.ANIMNOTIFY_HuskFireballAttack
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk::ANIMNOTIFY_HuskFireballAttack ( )
{
	static UFunction* pFnANIMNOTIFY_HuskFireballAttack = NULL;

	if ( ! pFnANIMNOTIFY_HuskFireballAttack )
		pFnANIMNOTIFY_HuskFireballAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.ANIMNOTIFY_HuskFireballAttack" );

	AKFPawn_ZedHusk_execANIMNOTIFY_HuskFireballAttack_Parms ANIMNOTIFY_HuskFireballAttack_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_HuskFireballAttack, &ANIMNOTIFY_HuskFireballAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHusk::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.Tick" );

	AKFPawn_ZedHusk_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.SetFireLightEnabled
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk::SetFireLightEnabled ( )
{
	static UFunction* pFnSetFireLightEnabled = NULL;

	if ( ! pFnSetFireLightEnabled )
		pFnSetFireLightEnabled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.SetFireLightEnabled" );

	AKFPawn_ZedHusk_execSetFireLightEnabled_Parms SetFireLightEnabled_Parms;

	this->ProcessEvent ( pFnSetFireLightEnabled, &SetFireLightEnabled_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.ANIMNOTIFY_WarnZedsOfFireball
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedHusk::ANIMNOTIFY_WarnZedsOfFireball ( )
{
	static UFunction* pFnANIMNOTIFY_WarnZedsOfFireball = NULL;

	if ( ! pFnANIMNOTIFY_WarnZedsOfFireball )
		pFnANIMNOTIFY_WarnZedsOfFireball = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.ANIMNOTIFY_WarnZedsOfFireball" );

	AKFPawn_ZedHusk_execANIMNOTIFY_WarnZedsOfFireball_Parms ANIMNOTIFY_WarnZedsOfFireball_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_WarnZedsOfFireball, &ANIMNOTIFY_WarnZedsOfFireball_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.NotifyAnimInterrupt
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedHusk::NotifyAnimInterrupt ( )
{
	static UFunction* pFnNotifyAnimInterrupt = NULL;

	if ( ! pFnNotifyAnimInterrupt )
		pFnNotifyAnimInterrupt = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.NotifyAnimInterrupt" );

	AKFPawn_ZedHusk_execNotifyAnimInterrupt_Parms NotifyAnimInterrupt_Parms;

	this->ProcessEvent ( pFnNotifyAnimInterrupt, &NotifyAnimInterrupt_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.ANIMNOTIFY_FlameThrowerOff
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk::ANIMNOTIFY_FlameThrowerOff ( )
{
	static UFunction* pFnANIMNOTIFY_FlameThrowerOff = NULL;

	if ( ! pFnANIMNOTIFY_FlameThrowerOff )
		pFnANIMNOTIFY_FlameThrowerOff = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.ANIMNOTIFY_FlameThrowerOff" );

	AKFPawn_ZedHusk_execANIMNOTIFY_FlameThrowerOff_Parms ANIMNOTIFY_FlameThrowerOff_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_FlameThrowerOff, &ANIMNOTIFY_FlameThrowerOff_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.ANIMNOTIFY_FlameThrowerOn
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk::ANIMNOTIFY_FlameThrowerOn ( )
{
	static UFunction* pFnANIMNOTIFY_FlameThrowerOn = NULL;

	if ( ! pFnANIMNOTIFY_FlameThrowerOn )
		pFnANIMNOTIFY_FlameThrowerOn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.ANIMNOTIFY_FlameThrowerOn" );

	AKFPawn_ZedHusk_execANIMNOTIFY_FlameThrowerOn_Parms ANIMNOTIFY_FlameThrowerOn_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_FlameThrowerOn, &ANIMNOTIFY_FlameThrowerOn_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.SetCharacterArch
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedHusk::SetCharacterArch ( )
{
	static UFunction* pFnSetCharacterArch = NULL;

	if ( ! pFnSetCharacterArch )
		pFnSetCharacterArch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.SetCharacterArch" );

	AKFPawn_ZedHusk_execSetCharacterArch_Parms SetCharacterArch_Parms;

	this->ProcessEvent ( pFnSetCharacterArch, &SetCharacterArch_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHusk::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk.PossessedBy" );

	AKFPawn_ZedHusk_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFProj_Husk_Fireball.TriggerExplosion
// [0x00020102] 
// Parameters infos:

void AKFProj_Husk_Fireball::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Husk_Fireball.TriggerExplosion" );

	AKFProj_Husk_Fireball_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFProj_Husk_Fireball.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_Husk_Fireball::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Husk_Fireball.PrepareExplosionTemplate" );

	AKFProj_Husk_Fireball_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_Husk_Fireball.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_Husk_Fireball::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Husk_Fireball.ProcessTouch" );

	AKFProj_Husk_Fireball_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFAIController_HuskFriendlyTest.CanDoFlamethrower
// [0x00020002] 
// Parameters infos:

void AKFAIController_HuskFriendlyTest::CanDoFlamethrower ( )
{
	static UFunction* pFnCanDoFlamethrower = NULL;

	if ( ! pFnCanDoFlamethrower )
		pFnCanDoFlamethrower = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_HuskFriendlyTest.CanDoFlamethrower" );

	AKFAIController_HuskFriendlyTest_execCanDoFlamethrower_Parms CanDoFlamethrower_Parms;

	this->ProcessEvent ( pFnCanDoFlamethrower, &CanDoFlamethrower_Parms, NULL );
};

// Function kfgamecontent.KFAIController_HuskFriendlyTest.CanDoFireball
// [0x00020002] 
// Parameters infos:

void AKFAIController_HuskFriendlyTest::CanDoFireball ( )
{
	static UFunction* pFnCanDoFireball = NULL;

	if ( ! pFnCanDoFireball )
		pFnCanDoFireball = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_HuskFriendlyTest.CanDoFireball" );

	AKFAIController_HuskFriendlyTest_execCanDoFireball_Parms CanDoFireball_Parms;

	this->ProcessEvent ( pFnCanDoFireball, &CanDoFireball_Parms, NULL );
};

// Function kfgamecontent.KFAIController_HuskFriendlyTest.ScriptGetTeamNum
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFAIController_HuskFriendlyTest::eventScriptGetTeamNum ( )
{
	static UFunction* pFnScriptGetTeamNum = NULL;

	if ( ! pFnScriptGetTeamNum )
		pFnScriptGetTeamNum = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_HuskFriendlyTest.ScriptGetTeamNum" );

	AKFAIController_HuskFriendlyTest_eventScriptGetTeamNum_Parms ScriptGetTeamNum_Parms;

	this->ProcessEvent ( pFnScriptGetTeamNum, &ScriptGetTeamNum_Parms, NULL );
};

// Function kfgamecontent.KFAIController_HuskFriendlyTest.InitPlayerReplicationInfo
// [0x00020000] 
// Parameters infos:

void AKFAIController_HuskFriendlyTest::InitPlayerReplicationInfo ( )
{
	static UFunction* pFnInitPlayerReplicationInfo = NULL;

	if ( ! pFnInitPlayerReplicationInfo )
		pFnInitPlayerReplicationInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_HuskFriendlyTest.InitPlayerReplicationInfo" );

	AKFAIController_HuskFriendlyTest_execInitPlayerReplicationInfo_Parms InitPlayerReplicationInfo_Parms;

	this->ProcessEvent ( pFnInitPlayerReplicationInfo, &InitPlayerReplicationInfo_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.ApplyHeadChunkGore
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::ApplyHeadChunkGore ( )
{
	static UFunction* pFnApplyHeadChunkGore = NULL;

	if ( ! pFnApplyHeadChunkGore )
		pFnApplyHeadChunkGore = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.ApplyHeadChunkGore" );

	AKFPawn_ZedBloatKing_execApplyHeadChunkGore_Parms ApplyHeadChunkGore_Parms;

	this->ProcessEvent ( pFnApplyHeadChunkGore, &ApplyHeadChunkGore_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.PlayHeadAsplode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::PlayHeadAsplode ( )
{
	static UFunction* pFnPlayHeadAsplode = NULL;

	if ( ! pFnPlayHeadAsplode )
		pFnPlayHeadAsplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.PlayHeadAsplode" );

	AKFPawn_ZedBloatKing_execPlayHeadAsplode_Parms PlayHeadAsplode_Parms;

	this->ProcessEvent ( pFnPlayHeadAsplode, &PlayHeadAsplode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.PlayDismemberment
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::PlayDismemberment ( )
{
	static UFunction* pFnPlayDismemberment = NULL;

	if ( ! pFnPlayDismemberment )
		pFnPlayDismemberment = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.PlayDismemberment" );

	AKFPawn_ZedBloatKing_execPlayDismemberment_Parms PlayDismemberment_Parms;

	this->ProcessEvent ( pFnPlayDismemberment, &PlayDismemberment_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.CauseHeadTrauma" );

	AKFPawn_ZedBloatKing_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.PlayPoopSpawnFX
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::PlayPoopSpawnFX ( )
{
	static UFunction* pFnPlayPoopSpawnFX = NULL;

	if ( ! pFnPlayPoopSpawnFX )
		pFnPlayPoopSpawnFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.PlayPoopSpawnFX" );

	AKFPawn_ZedBloatKing_execPlayPoopSpawnFX_Parms PlayPoopSpawnFX_Parms;

	this->ProcessEvent ( pFnPlayPoopSpawnFX, &PlayPoopSpawnFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.SpawnPoopMonster
// [0x00820002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::SpawnPoopMonster ( )
{
	static UFunction* pFnSpawnPoopMonster = NULL;

	if ( ! pFnSpawnPoopMonster )
		pFnSpawnPoopMonster = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.SpawnPoopMonster" );

	AKFPawn_ZedBloatKing_execSpawnPoopMonster_Parms SpawnPoopMonster_Parms;

	this->ProcessEvent ( pFnSpawnPoopMonster, &SpawnPoopMonster_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.AllowNextPoopMonster
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::AllowNextPoopMonster ( )
{
	static UFunction* pFnAllowNextPoopMonster = NULL;

	if ( ! pFnAllowNextPoopMonster )
		pFnAllowNextPoopMonster = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.AllowNextPoopMonster" );

	AKFPawn_ZedBloatKing_execAllowNextPoopMonster_Parms AllowNextPoopMonster_Parms;

	this->ProcessEvent ( pFnAllowNextPoopMonster, &AllowNextPoopMonster_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.RemoveGorgeVictim
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::RemoveGorgeVictim ( )
{
	static UFunction* pFnRemoveGorgeVictim = NULL;

	if ( ! pFnRemoveGorgeVictim )
		pFnRemoveGorgeVictim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.RemoveGorgeVictim" );

	AKFPawn_ZedBloatKing_execRemoveGorgeVictim_Parms RemoveGorgeVictim_Parms;

	this->ProcessEvent ( pFnRemoveGorgeVictim, &RemoveGorgeVictim_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.AddGorgeVictim
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::AddGorgeVictim ( )
{
	static UFunction* pFnAddGorgeVictim = NULL;

	if ( ! pFnAddGorgeVictim )
		pFnAddGorgeVictim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.AddGorgeVictim" );

	AKFPawn_ZedBloatKing_execAddGorgeVictim_Parms AddGorgeVictim_Parms;

	this->ProcessEvent ( pFnAddGorgeVictim, &AddGorgeVictim_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.PlayFartSpawnFX
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::PlayFartSpawnFX ( )
{
	static UFunction* pFnPlayFartSpawnFX = NULL;

	if ( ! pFnPlayFartSpawnFX )
		pFnPlayFartSpawnFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.PlayFartSpawnFX" );

	AKFPawn_ZedBloatKing_execPlayFartSpawnFX_Parms PlayFartSpawnFX_Parms;

	this->ProcessEvent ( pFnPlayFartSpawnFX, &PlayFartSpawnFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.TimerFartAttack
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::TimerFartAttack ( )
{
	static UFunction* pFnTimerFartAttack = NULL;

	if ( ! pFnTimerFartAttack )
		pFnTimerFartAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.TimerFartAttack" );

	AKFPawn_ZedBloatKing_execTimerFartAttack_Parms TimerFartAttack_Parms;

	this->ProcessEvent ( pFnTimerFartAttack, &TimerFartAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.ClearFartTimer
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::ClearFartTimer ( )
{
	static UFunction* pFnClearFartTimer = NULL;

	if ( ! pFnClearFartTimer )
		pFnClearFartTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.ClearFartTimer" );

	AKFPawn_ZedBloatKing_execClearFartTimer_Parms ClearFartTimer_Parms;

	this->ProcessEvent ( pFnClearFartTimer, &ClearFartTimer_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.SetFartAttackTimer
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::SetFartAttackTimer ( )
{
	static UFunction* pFnSetFartAttackTimer = NULL;

	if ( ! pFnSetFartAttackTimer )
		pFnSetFartAttackTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.SetFartAttackTimer" );

	AKFPawn_ZedBloatKing_execSetFartAttackTimer_Parms SetFartAttackTimer_Parms;

	this->ProcessEvent ( pFnSetFartAttackTimer, &SetFartAttackTimer_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.ANIMNOTIFY_PukeMineAttack
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::ANIMNOTIFY_PukeMineAttack ( )
{
	static UFunction* pFnANIMNOTIFY_PukeMineAttack = NULL;

	if ( ! pFnANIMNOTIFY_PukeMineAttack )
		pFnANIMNOTIFY_PukeMineAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.ANIMNOTIFY_PukeMineAttack" );

	AKFPawn_ZedBloatKing_execANIMNOTIFY_PukeMineAttack_Parms ANIMNOTIFY_PukeMineAttack_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_PukeMineAttack, &ANIMNOTIFY_PukeMineAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.PlayFootStepSound
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedBloatKing::eventPlayFootStepSound ( )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.PlayFootStepSound" );

	AKFPawn_ZedBloatKing_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.AdjustMovementSpeed
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::AdjustMovementSpeed ( )
{
	static UFunction* pFnAdjustMovementSpeed = NULL;

	if ( ! pFnAdjustMovementSpeed )
		pFnAdjustMovementSpeed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.AdjustMovementSpeed" );

	AKFPawn_ZedBloatKing_execAdjustMovementSpeed_Parms AdjustMovementSpeed_Parms;

	this->ProcessEvent ( pFnAdjustMovementSpeed, &AdjustMovementSpeed_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.SetEnraged
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::SetEnraged ( )
{
	static UFunction* pFnSetEnraged = NULL;

	if ( ! pFnSetEnraged )
		pFnSetEnraged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.SetEnraged" );

	AKFPawn_ZedBloatKing_execSetEnraged_Parms SetEnraged_Parms;

	this->ProcessEvent ( pFnSetEnraged, &SetEnraged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.IsEnraged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedBloatKing::eventIsEnraged ( )
{
	static UFunction* pFnIsEnraged = NULL;

	if ( ! pFnIsEnraged )
		pFnIsEnraged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.IsEnraged" );

	AKFPawn_ZedBloatKing_eventIsEnraged_Parms IsEnraged_Parms;

	this->ProcessEvent ( pFnIsEnraged, &IsEnraged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.ShouldPlaySpecialMeleeAnims
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::ShouldPlaySpecialMeleeAnims ( )
{
	static UFunction* pFnShouldPlaySpecialMeleeAnims = NULL;

	if ( ! pFnShouldPlaySpecialMeleeAnims )
		pFnShouldPlaySpecialMeleeAnims = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.ShouldPlaySpecialMeleeAnims" );

	AKFPawn_ZedBloatKing_execShouldPlaySpecialMeleeAnims_Parms ShouldPlaySpecialMeleeAnims_Parms;

	this->ProcessEvent ( pFnShouldPlaySpecialMeleeAnims, &ShouldPlaySpecialMeleeAnims_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.CanDoSpecialMove
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedBloatKing::eventCanDoSpecialMove ( )
{
	static UFunction* pFnCanDoSpecialMove = NULL;

	if ( ! pFnCanDoSpecialMove )
		pFnCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.CanDoSpecialMove" );

	AKFPawn_ZedBloatKing_eventCanDoSpecialMove_Parms CanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnCanDoSpecialMove, &CanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.ZedExplodeArmor
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::ZedExplodeArmor ( )
{
	static UFunction* pFnZedExplodeArmor = NULL;

	if ( ! pFnZedExplodeArmor )
		pFnZedExplodeArmor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.ZedExplodeArmor" );

	AKFPawn_ZedBloatKing_execZedExplodeArmor_Parms ZedExplodeArmor_Parms;

	this->ProcessEvent ( pFnZedExplodeArmor, &ZedExplodeArmor_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetHitZoneSkinTypeEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetHitZoneSkinTypeEffects ( )
{
	static UFunction* pFnGetHitZoneSkinTypeEffects = NULL;

	if ( ! pFnGetHitZoneSkinTypeEffects )
		pFnGetHitZoneSkinTypeEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetHitZoneSkinTypeEffects" );

	AKFPawn_ZedBloatKing_execGetHitZoneSkinTypeEffects_Parms GetHitZoneSkinTypeEffects_Parms;

	this->ProcessEvent ( pFnGetHitZoneSkinTypeEffects, &GetHitZoneSkinTypeEffects_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.PlayHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::PlayHit ( )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.PlayHit" );

	AKFPawn_ZedBloatKing_execPlayHit_Parms PlayHit_Parms;

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetHitZoneIndex
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetHitZoneIndex ( )
{
	static UFunction* pFnGetHitZoneIndex = NULL;

	if ( ! pFnGetHitZoneIndex )
		pFnGetHitZoneIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetHitZoneIndex" );

	AKFPawn_ZedBloatKing_execGetHitZoneIndex_Parms GetHitZoneIndex_Parms;

	this->ProcessEvent ( pFnGetHitZoneIndex, &GetHitZoneIndex_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedBloatKing::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.TakeDamage" );

	AKFPawn_ZedBloatKing_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.CanObliterateDoors
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::CanObliterateDoors ( )
{
	static UFunction* pFnCanObliterateDoors = NULL;

	if ( ! pFnCanObliterateDoors )
		pFnCanObliterateDoors = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.CanObliterateDoors" );

	AKFPawn_ZedBloatKing_execCanObliterateDoors_Parms CanObliterateDoors_Parms;

	this->ProcessEvent ( pFnCanObliterateDoors, &CanObliterateDoors_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.PlayBossMusic
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::PlayBossMusic ( )
{
	static UFunction* pFnPlayBossMusic = NULL;

	if ( ! pFnPlayBossMusic )
		pFnPlayBossMusic = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.PlayBossMusic" );

	AKFPawn_ZedBloatKing_execPlayBossMusic_Parms PlayBossMusic_Parms;

	this->ProcessEvent ( pFnPlayBossMusic, &PlayBossMusic_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.PossessedBy" );

	AKFPawn_ZedBloatKing_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetNumMinionsToSpawn
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetNumMinionsToSpawn ( )
{
	static UFunction* pFnGetNumMinionsToSpawn = NULL;

	if ( ! pFnGetNumMinionsToSpawn )
		pFnGetNumMinionsToSpawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetNumMinionsToSpawn" );

	AKFPawn_ZedBloatKing_execGetNumMinionsToSpawn_Parms GetNumMinionsToSpawn_Parms;

	this->ProcessEvent ( pFnGetNumMinionsToSpawn, &GetNumMinionsToSpawn_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetWaveInfo
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetWaveInfo ( )
{
	static UFunction* pFnGetWaveInfo = NULL;

	if ( ! pFnGetWaveInfo )
		pFnGetWaveInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetWaveInfo" );

	AKFPawn_ZedBloatKing_execGetWaveInfo_Parms GetWaveInfo_Parms;

	this->ProcessEvent ( pFnGetWaveInfo, &GetWaveInfo_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.OnZedDied
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKing::OnZedDied ( )
{
	static UFunction* pFnOnZedDied = NULL;

	if ( ! pFnOnZedDied )
		pFnOnZedDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.OnZedDied" );

	AKFPawn_ZedBloatKing_execOnZedDied_Parms OnZedDied_Parms;

	this->ProcessEvent ( pFnOnZedDied, &OnZedDied_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetBossCameraOffset
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetBossCameraOffset ( )
{
	static UFunction* pFnGetBossCameraOffset = NULL;

	if ( ! pFnGetBossCameraOffset )
		pFnGetBossCameraOffset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetBossCameraOffset" );

	AKFPawn_ZedBloatKing_execGetBossCameraOffset_Parms GetBossCameraOffset_Parms;

	this->ProcessEvent ( pFnGetBossCameraOffset, &GetBossCameraOffset_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetBossCameraSocket
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetBossCameraSocket ( )
{
	static UFunction* pFnGetBossCameraSocket = NULL;

	if ( ! pFnGetBossCameraSocket )
		pFnGetBossCameraSocket = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetBossCameraSocket" );

	AKFPawn_ZedBloatKing_execGetBossCameraSocket_Parms GetBossCameraSocket_Parms;

	this->ProcessEvent ( pFnGetBossCameraSocket, &GetBossCameraSocket_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.UseAnimatedBossCamera
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::UseAnimatedBossCamera ( )
{
	static UFunction* pFnUseAnimatedBossCamera = NULL;

	if ( ! pFnUseAnimatedBossCamera )
		pFnUseAnimatedBossCamera = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.UseAnimatedBossCamera" );

	AKFPawn_ZedBloatKing_execUseAnimatedBossCamera_Parms UseAnimatedBossCamera_Parms;

	this->ProcessEvent ( pFnUseAnimatedBossCamera, &UseAnimatedBossCamera_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.SetAnimatedBossCamera
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::SetAnimatedBossCamera ( )
{
	static UFunction* pFnSetAnimatedBossCamera = NULL;

	if ( ! pFnSetAnimatedBossCamera )
		pFnSetAnimatedBossCamera = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.SetAnimatedBossCamera" );

	AKFPawn_ZedBloatKing_execSetAnimatedBossCamera_Parms SetAnimatedBossCamera_Parms;

	this->ProcessEvent ( pFnSetAnimatedBossCamera, &SetAnimatedBossCamera_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetHealthPercent
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetHealthPercent ( )
{
	static UFunction* pFnGetHealthPercent = NULL;

	if ( ! pFnGetHealthPercent )
		pFnGetHealthPercent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetHealthPercent" );

	AKFPawn_ZedBloatKing_execGetHealthPercent_Parms GetHealthPercent_Parms;

	this->ProcessEvent ( pFnGetHealthPercent, &GetHealthPercent_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.IsABoss
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedBloatKing::eventIsABoss ( )
{
	static UFunction* pFnIsABoss = NULL;

	if ( ! pFnIsABoss )
		pFnIsABoss = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.IsABoss" );

	AKFPawn_ZedBloatKing_eventIsABoss_Parms IsABoss_Parms;

	this->ProcessEvent ( pFnIsABoss, &IsABoss_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetRandomBossCaption
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetRandomBossCaption ( )
{
	static UFunction* pFnGetRandomBossCaption = NULL;

	if ( ! pFnGetRandomBossCaption )
		pFnGetRandomBossCaption = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetRandomBossCaption" );

	AKFPawn_ZedBloatKing_execGetRandomBossCaption_Parms GetRandomBossCaption_Parms;

	this->ProcessEvent ( pFnGetRandomBossCaption, &GetRandomBossCaption_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.GetMonsterPawn
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKing::GetMonsterPawn ( )
{
	static UFunction* pFnGetMonsterPawn = NULL;

	if ( ! pFnGetMonsterPawn )
		pFnGetMonsterPawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.GetMonsterPawn" );

	AKFPawn_ZedBloatKing_execGetMonsterPawn_Parms GetMonsterPawn_Parms;

	this->ProcessEvent ( pFnGetMonsterPawn, &GetMonsterPawn_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKing.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedBloatKing::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKing.ReplicatedEvent" );

	AKFPawn_ZedBloatKing_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedBloat::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.GetTraderAdviceID" );

	AKFPawn_ZedBloat_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.SpawnPukeMinesOnDeath
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloat::SpawnPukeMinesOnDeath ( )
{
	static UFunction* pFnSpawnPukeMinesOnDeath = NULL;

	if ( ! pFnSpawnPukeMinesOnDeath )
		pFnSpawnPukeMinesOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.SpawnPukeMinesOnDeath" );

	AKFPawn_ZedBloat_execSpawnPukeMinesOnDeath_Parms SpawnPukeMinesOnDeath_Parms;

	this->ProcessEvent ( pFnSpawnPukeMinesOnDeath, &SpawnPukeMinesOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.SpawnPukeMine
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloat::SpawnPukeMine ( )
{
	static UFunction* pFnSpawnPukeMine = NULL;

	if ( ! pFnSpawnPukeMine )
		pFnSpawnPukeMine = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.SpawnPukeMine" );

	AKFPawn_ZedBloat_execSpawnPukeMine_Parms SpawnPukeMine_Parms;

	this->ProcessEvent ( pFnSpawnPukeMine, &SpawnPukeMine_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.DealExplosionDamage
// [0x00820002] 
// Parameters infos:

void AKFPawn_ZedBloat::DealExplosionDamage ( )
{
	static UFunction* pFnDealExplosionDamage = NULL;

	if ( ! pFnDealExplosionDamage )
		pFnDealExplosionDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.DealExplosionDamage" );

	AKFPawn_ZedBloat_execDealExplosionDamage_Parms DealExplosionDamage_Parms;

	this->ProcessEvent ( pFnDealExplosionDamage, &DealExplosionDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.HitExplosiveBone
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloat::HitExplosiveBone ( )
{
	static UFunction* pFnHitExplosiveBone = NULL;

	if ( ! pFnHitExplosiveBone )
		pFnHitExplosiveBone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.HitExplosiveBone" );

	AKFPawn_ZedBloat_execHitExplosiveBone_Parms HitExplosiveBone_Parms;

	this->ProcessEvent ( pFnHitExplosiveBone, &HitExplosiveBone_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.TakeHitZoneDamage
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloat::TakeHitZoneDamage ( )
{
	static UFunction* pFnTakeHitZoneDamage = NULL;

	if ( ! pFnTakeHitZoneDamage )
		pFnTakeHitZoneDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.TakeHitZoneDamage" );

	AKFPawn_ZedBloat_execTakeHitZoneDamage_Parms TakeHitZoneDamage_Parms;

	this->ProcessEvent ( pFnTakeHitZoneDamage, &TakeHitZoneDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.Died
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloat::Died ( )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.Died" );

	AKFPawn_ZedBloat_execDied_Parms Died_Parms;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.HasInjuredHitZones
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloat::HasInjuredHitZones ( )
{
	static UFunction* pFnHasInjuredHitZones = NULL;

	if ( ! pFnHasInjuredHitZones )
		pFnHasInjuredHitZones = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.HasInjuredHitZones" );

	AKFPawn_ZedBloat_execHasInjuredHitZones_Parms HasInjuredHitZones_Parms;

	this->ProcessEvent ( pFnHasInjuredHitZones, &HasInjuredHitZones_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.CanInjureHitZone
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloat::CanInjureHitZone ( )
{
	static UFunction* pFnCanInjureHitZone = NULL;

	if ( ! pFnCanInjureHitZone )
		pFnCanInjureHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.CanInjureHitZone" );

	AKFPawn_ZedBloat_execCanInjureHitZone_Parms CanInjureHitZone_Parms;

	this->ProcessEvent ( pFnCanInjureHitZone, &CanInjureHitZone_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.CanPukeOnTarget
// [0x00820002] 
// Parameters infos:

void AKFPawn_ZedBloat::CanPukeOnTarget ( )
{
	static UFunction* pFnCanPukeOnTarget = NULL;

	if ( ! pFnCanPukeOnTarget )
		pFnCanPukeOnTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.CanPukeOnTarget" );

	AKFPawn_ZedBloat_execCanPukeOnTarget_Parms CanPukeOnTarget_Parms;

	this->ProcessEvent ( pFnCanPukeOnTarget, &CanPukeOnTarget_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.DealPukeDamage
// [0x00820002] 
// Parameters infos:

void AKFPawn_ZedBloat::DealPukeDamage ( )
{
	static UFunction* pFnDealPukeDamage = NULL;

	if ( ! pFnDealPukeDamage )
		pFnDealPukeDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.DealPukeDamage" );

	AKFPawn_ZedBloat_execDealPukeDamage_Parms DealPukeDamage_Parms;

	this->ProcessEvent ( pFnDealPukeDamage, &DealPukeDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.Puke
// [0x00820002] 
// Parameters infos:

void AKFPawn_ZedBloat::Puke ( )
{
	static UFunction* pFnPuke = NULL;

	if ( ! pFnPuke )
		pFnPuke = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.Puke" );

	AKFPawn_ZedBloat_execPuke_Parms Puke_Parms;

	this->ProcessEvent ( pFnPuke, &Puke_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.ANIMNOTIFY_PukeAttack
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloat::ANIMNOTIFY_PukeAttack ( )
{
	static UFunction* pFnANIMNOTIFY_PukeAttack = NULL;

	if ( ! pFnANIMNOTIFY_PukeAttack )
		pFnANIMNOTIFY_PukeAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.ANIMNOTIFY_PukeAttack" );

	AKFPawn_ZedBloat_execANIMNOTIFY_PukeAttack_Parms ANIMNOTIFY_PukeAttack_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_PukeAttack, &ANIMNOTIFY_PukeAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloat::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat.PostBeginPlay" );

	AKFPawn_ZedBloat_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.StopPullingPawn
// [0x00024002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::StopPullingPawn ( )
{
	static UFunction* pFnStopPullingPawn = NULL;

	if ( ! pFnStopPullingPawn )
		pFnStopPullingPawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.StopPullingPawn" );

	UKFSM_BloatKing_Gorge_execStopPullingPawn_Parms StopPullingPawn_Parms;

	this->ProcessEvent ( pFnStopPullingPawn, &StopPullingPawn_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.StartPullingPawn
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::StartPullingPawn ( )
{
	static UFunction* pFnStartPullingPawn = NULL;

	if ( ! pFnStartPullingPawn )
		pFnStartPullingPawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.StartPullingPawn" );

	UKFSM_BloatKing_Gorge_execStartPullingPawn_Parms StartPullingPawn_Parms;

	this->ProcessEvent ( pFnStartPullingPawn, &StartPullingPawn_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.RemoveVictim
// [0x00024002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::RemoveVictim ( )
{
	static UFunction* pFnRemoveVictim = NULL;

	if ( ! pFnRemoveVictim )
		pFnRemoveVictim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.RemoveVictim" );

	UKFSM_BloatKing_Gorge_execRemoveVictim_Parms RemoveVictim_Parms;

	this->ProcessEvent ( pFnRemoveVictim, &RemoveVictim_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.AddNewVictim
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::AddNewVictim ( )
{
	static UFunction* pFnAddNewVictim = NULL;

	if ( ! pFnAddNewVictim )
		pFnAddNewVictim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.AddNewVictim" );

	UKFSM_BloatKing_Gorge_execAddNewVictim_Parms AddNewVictim_Parms;

	this->ProcessEvent ( pFnAddNewVictim, &AddNewVictim_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.UpdateVictims
// [0x00820002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::UpdateVictims ( )
{
	static UFunction* pFnUpdateVictims = NULL;

	if ( ! pFnUpdateVictims )
		pFnUpdateVictims = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.UpdateVictims" );

	UKFSM_BloatKing_Gorge_execUpdateVictims_Parms UpdateVictims_Parms;

	this->ProcessEvent ( pFnUpdateVictims, &UpdateVictims_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.IsValidPullClass
// [0x00022002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::IsValidPullClass ( )
{
	static UFunction* pFnIsValidPullClass = NULL;

	if ( ! pFnIsValidPullClass )
		pFnIsValidPullClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.IsValidPullClass" );

	UKFSM_BloatKing_Gorge_execIsValidPullClass_Parms IsValidPullClass_Parms;

	this->ProcessEvent ( pFnIsValidPullClass, &IsValidPullClass_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.FindNewVictims
// [0x00820002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::FindNewVictims ( )
{
	static UFunction* pFnFindNewVictims = NULL;

	if ( ! pFnFindNewVictims )
		pFnFindNewVictims = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.FindNewVictims" );

	UKFSM_BloatKing_Gorge_execFindNewVictims_Parms FindNewVictims_Parms;

	this->ProcessEvent ( pFnFindNewVictims, &FindNewVictims_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.Tick
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.Tick" );

	UKFSM_BloatKing_Gorge_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.TimeOut
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::TimeOut ( )
{
	static UFunction* pFnTimeOut = NULL;

	if ( ! pFnTimeOut )
		pFnTimeOut = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.TimeOut" );

	UKFSM_BloatKing_Gorge_execTimeOut_Parms TimeOut_Parms;

	this->ProcessEvent ( pFnTimeOut, &TimeOut_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.PlayAnimation" );

	UKFSM_BloatKing_Gorge_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.SpecialMoveEnded" );

	UKFSM_BloatKing_Gorge_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.StartGorgePull
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::StartGorgePull ( )
{
	static UFunction* pFnStartGorgePull = NULL;

	if ( ! pFnStartGorgePull )
		pFnStartGorgePull = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.StartGorgePull" );

	UKFSM_BloatKing_Gorge_execStartGorgePull_Parms StartGorgePull_Parms;

	this->ProcessEvent ( pFnStartGorgePull, &StartGorgePull_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.SpecialMoveStarted" );

	UKFSM_BloatKing_Gorge_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKing_Gorge.GetGorgeCooldown
// [0x00022002] 
// Parameters infos:

void UKFSM_BloatKing_Gorge::GetGorgeCooldown ( )
{
	static UFunction* pFnGetGorgeCooldown = NULL;

	if ( ! pFnGetGorgeCooldown )
		pFnGetGorgeCooldown = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKing_Gorge.GetGorgeCooldown" );

	UKFSM_BloatKing_Gorge_execGetGorgeCooldown_Parms GetGorgeCooldown_Parms;

	this->ProcessEvent ( pFnGetGorgeCooldown, &GetGorgeCooldown_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.ApplyHeadChunkGore
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::ApplyHeadChunkGore ( )
{
	static UFunction* pFnApplyHeadChunkGore = NULL;

	if ( ! pFnApplyHeadChunkGore )
		pFnApplyHeadChunkGore = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.ApplyHeadChunkGore" );

	AKFPawn_ZedBloatKingSubspawn_execApplyHeadChunkGore_Parms ApplyHeadChunkGore_Parms;

	this->ProcessEvent ( pFnApplyHeadChunkGore, &ApplyHeadChunkGore_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.PlayHeadAsplode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::PlayHeadAsplode ( )
{
	static UFunction* pFnPlayHeadAsplode = NULL;

	if ( ! pFnPlayHeadAsplode )
		pFnPlayHeadAsplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.PlayHeadAsplode" );

	AKFPawn_ZedBloatKingSubspawn_execPlayHeadAsplode_Parms PlayHeadAsplode_Parms;

	this->ProcessEvent ( pFnPlayHeadAsplode, &PlayHeadAsplode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.CauseHeadTrauma" );

	AKFPawn_ZedBloatKingSubspawn_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.Explode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.Explode" );

	AKFPawn_ZedBloatKingSubspawn_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.PlayDying" );

	AKFPawn_ZedBloatKingSubspawn_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.DelayExplode
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::DelayExplode ( )
{
	static UFunction* pFnDelayExplode = NULL;

	if ( ! pFnDelayExplode )
		pFnDelayExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.DelayExplode" );

	AKFPawn_ZedBloatKingSubspawn_execDelayExplode_Parms DelayExplode_Parms;

	this->ProcessEvent ( pFnDelayExplode, &DelayExplode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.Tick" );

	AKFPawn_ZedBloatKingSubspawn_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.Died
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::Died ( )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.Died" );

	AKFPawn_ZedBloatKingSubspawn_execDied_Parms Died_Parms;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.CanDoSpecialMove
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedBloatKingSubspawn::eventCanDoSpecialMove ( )
{
	static UFunction* pFnCanDoSpecialMove = NULL;

	if ( ! pFnCanDoSpecialMove )
		pFnCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloatKingSubspawn.CanDoSpecialMove" );

	AKFPawn_ZedBloatKingSubspawn_eventCanDoSpecialMove_Parms CanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnCanDoSpecialMove, &CanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedClot_AlphaKing.StartArmorLoss
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot_AlphaKing::StartArmorLoss ( )
{
	static UFunction* pFnStartArmorLoss = NULL;

	if ( ! pFnStartArmorLoss )
		pFnStartArmorLoss = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedClot_AlphaKing.StartArmorLoss" );

	AKFAIController_ZedClot_AlphaKing_execStartArmorLoss_Parms StartArmorLoss_Parms;

	this->ProcessEvent ( pFnStartArmorLoss, &StartArmorLoss_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedClot_AlphaKing.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot_AlphaKing::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedClot_AlphaKing.ShouldSprint" );

	AKFAIController_ZedClot_AlphaKing_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedClot_AlphaKing.SetCanSprintWhenDamaged
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot_AlphaKing::SetCanSprintWhenDamaged ( )
{
	static UFunction* pFnSetCanSprintWhenDamaged = NULL;

	if ( ! pFnSetCanSprintWhenDamaged )
		pFnSetCanSprintWhenDamaged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedClot_AlphaKing.SetCanSprintWhenDamaged" );

	AKFAIController_ZedClot_AlphaKing_execSetCanSprintWhenDamaged_Parms SetCanSprintWhenDamaged_Parms;

	this->ProcessEvent ( pFnSetCanSprintWhenDamaged, &SetCanSprintWhenDamaged_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedClot_AlphaKing.SetSprintingDisabled
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot_AlphaKing::SetSprintingDisabled ( )
{
	static UFunction* pFnSetSprintingDisabled = NULL;

	if ( ! pFnSetSprintingDisabled )
		pFnSetSprintingDisabled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedClot_AlphaKing.SetSprintingDisabled" );

	AKFAIController_ZedClot_AlphaKing_execSetSprintingDisabled_Parms SetSprintingDisabled_Parms;

	this->ProcessEvent ( pFnSetSprintingDisabled, &SetSprintingDisabled_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedClot_AlphaKing.SetCanSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot_AlphaKing::SetCanSprint ( )
{
	static UFunction* pFnSetCanSprint = NULL;

	if ( ! pFnSetCanSprint )
		pFnSetCanSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedClot_AlphaKing.SetCanSprint" );

	AKFAIController_ZedClot_AlphaKing_execSetCanSprint_Parms SetCanSprint_Parms;

	this->ProcessEvent ( pFnSetCanSprint, &SetCanSprint_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedClot_AlphaKing.Timer_CheckForRally
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot_AlphaKing::Timer_CheckForRally ( )
{
	static UFunction* pFnTimer_CheckForRally = NULL;

	if ( ! pFnTimer_CheckForRally )
		pFnTimer_CheckForRally = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedClot_AlphaKing.Timer_CheckForRally" );

	AKFAIController_ZedClot_AlphaKing_execTimer_CheckForRally_Parms Timer_CheckForRally_Parms;

	this->ProcessEvent ( pFnTimer_CheckForRally, &Timer_CheckForRally_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedClot_AlphaKing.SeePlayer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedClot_AlphaKing::eventSeePlayer ( )
{
	static UFunction* pFnSeePlayer = NULL;

	if ( ! pFnSeePlayer )
		pFnSeePlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedClot_AlphaKing.SeePlayer" );

	AKFAIController_ZedClot_AlphaKing_eventSeePlayer_Parms SeePlayer_Parms;

	this->ProcessEvent ( pFnSeePlayer, &SeePlayer_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedClot_AlphaKing.InitRallySettings
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedClot_AlphaKing::InitRallySettings ( )
{
	static UFunction* pFnInitRallySettings = NULL;

	if ( ! pFnInitRallySettings )
		pFnInitRallySettings = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedClot_AlphaKing.InitRallySettings" );

	AKFAIController_ZedClot_AlphaKing_execInitRallySettings_Parms InitRallySettings_Parms;

	this->ProcessEvent ( pFnInitRallySettings, &InitRallySettings_Parms, NULL );
};

// Function kfgamecontent.KFSM_AlphaRally.RallyZeds
// [0x00020002] 
// Parameters infos:

void UKFSM_AlphaRally::RallyZeds ( )
{
	static UFunction* pFnRallyZeds = NULL;

	if ( ! pFnRallyZeds )
		pFnRallyZeds = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_AlphaRally.RallyZeds" );

	UKFSM_AlphaRally_execRallyZeds_Parms RallyZeds_Parms;

	this->ProcessEvent ( pFnRallyZeds, &RallyZeds_Parms, NULL );
};

// Function kfgamecontent.KFSM_AlphaRally.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_AlphaRally::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_AlphaRally.PlayAnimation" );

	UKFSM_AlphaRally_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_AlphaRally.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_AlphaRally::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_AlphaRally.SpecialMoveStarted" );

	UKFSM_AlphaRally_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_AlphaRally.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_AlphaRally::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_AlphaRally.InternalCanDoSpecialMove" );

	UKFSM_AlphaRally_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_AlphaRally.PackRallyFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_AlphaRally::PackRallyFlags ( )
{
	static UFunction* pFnPackRallyFlags = NULL;

	if ( ! pFnPackRallyFlags )
		pFnPackRallyFlags = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_AlphaRally.PackRallyFlags" );

	UKFSM_AlphaRally_execPackRallyFlags_Parms PackRallyFlags_Parms;

	this->ProcessEvent ( pFnPackRallyFlags, &PackRallyFlags_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.ShouldAllowHeadBoneToBreak
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR::ShouldAllowHeadBoneToBreak ( )
{
	static UFunction* pFnShouldAllowHeadBoneToBreak = NULL;

	if ( ! pFnShouldAllowHeadBoneToBreak )
		pFnShouldAllowHeadBoneToBreak = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.ShouldAllowHeadBoneToBreak" );

	AKFPawn_ZedDAR_execShouldAllowHeadBoneToBreak_Parms ShouldAllowHeadBoneToBreak_Parms;

	this->ProcessEvent ( pFnShouldAllowHeadBoneToBreak, &ShouldAllowHeadBoneToBreak_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.OnExploded
// [0x00020100] 
// Parameters infos:

void AKFPawn_ZedDAR::OnExploded ( )
{
	static UFunction* pFnOnExploded = NULL;

	if ( ! pFnOnExploded )
		pFnOnExploded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.OnExploded" );

	AKFPawn_ZedDAR_execOnExploded_Parms OnExploded_Parms;

	this->ProcessEvent ( pFnOnExploded, &OnExploded_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.WeeklyShouldExplodeOnDeath
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR::WeeklyShouldExplodeOnDeath ( )
{
	static UFunction* pFnWeeklyShouldExplodeOnDeath = NULL;

	if ( ! pFnWeeklyShouldExplodeOnDeath )
		pFnWeeklyShouldExplodeOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.WeeklyShouldExplodeOnDeath" );

	AKFPawn_ZedDAR_execWeeklyShouldExplodeOnDeath_Parms WeeklyShouldExplodeOnDeath_Parms;

	this->ProcessEvent ( pFnWeeklyShouldExplodeOnDeath, &WeeklyShouldExplodeOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.TriggerExplosion
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedDAR::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.TriggerExplosion" );

	AKFPawn_ZedDAR_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.HitZoneInjured
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedDAR::HitZoneInjured ( )
{
	static UFunction* pFnHitZoneInjured = NULL;

	if ( ! pFnHitZoneInjured )
		pFnHitZoneInjured = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.HitZoneInjured" );

	AKFPawn_ZedDAR_execHitZoneInjured_Parms HitZoneInjured_Parms;

	this->ProcessEvent ( pFnHitZoneInjured, &HitZoneInjured_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.CanInjureHitZone
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR::CanInjureHitZone ( )
{
	static UFunction* pFnCanInjureHitZone = NULL;

	if ( ! pFnCanInjureHitZone )
		pFnCanInjureHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.CanInjureHitZone" );

	AKFPawn_ZedDAR_execCanInjureHitZone_Parms CanInjureHitZone_Parms;

	this->ProcessEvent ( pFnCanInjureHitZone, &CanInjureHitZone_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.PlayDeadHitEffects
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedDAR::PlayDeadHitEffects ( )
{
	static UFunction* pFnPlayDeadHitEffects = NULL;

	if ( ! pFnPlayDeadHitEffects )
		pFnPlayDeadHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.PlayDeadHitEffects" );

	AKFPawn_ZedDAR_execPlayDeadHitEffects_Parms PlayDeadHitEffects_Parms;

	this->ProcessEvent ( pFnPlayDeadHitEffects, &PlayDeadHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.NotifySpecialMoveEnded
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.NotifySpecialMoveEnded" );

	AKFPawn_ZedDAR_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.SetSprinting" );

	AKFPawn_ZedDAR_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.ZedExplodeArmor
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR::ZedExplodeArmor ( )
{
	static UFunction* pFnZedExplodeArmor = NULL;

	if ( ! pFnZedExplodeArmor )
		pFnZedExplodeArmor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.ZedExplodeArmor" );

	AKFPawn_ZedDAR_execZedExplodeArmor_Parms ZedExplodeArmor_Parms;

	this->ProcessEvent ( pFnZedExplodeArmor, &ZedExplodeArmor_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.CauseHeadTrauma
// [0x00024000] 
// Parameters infos:

void AKFPawn_ZedDAR::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.CauseHeadTrauma" );

	AKFPawn_ZedDAR_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.GetHitZoneSkinTypeEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR::GetHitZoneSkinTypeEffects ( )
{
	static UFunction* pFnGetHitZoneSkinTypeEffects = NULL;

	if ( ! pFnGetHitZoneSkinTypeEffects )
		pFnGetHitZoneSkinTypeEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.GetHitZoneSkinTypeEffects" );

	AKFPawn_ZedDAR_execGetHitZoneSkinTypeEffects_Parms GetHitZoneSkinTypeEffects_Parms;

	this->ProcessEvent ( pFnGetHitZoneSkinTypeEffects, &GetHitZoneSkinTypeEffects_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.GetHitZoneIndex
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR::GetHitZoneIndex ( )
{
	static UFunction* pFnGetHitZoneIndex = NULL;

	if ( ! pFnGetHitZoneIndex )
		pFnGetHitZoneIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.GetHitZoneIndex" );

	AKFPawn_ZedDAR_execGetHitZoneIndex_Parms GetHitZoneIndex_Parms;

	this->ProcessEvent ( pFnGetHitZoneIndex, &GetHitZoneIndex_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.PlayHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR::PlayHit ( )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.PlayHit" );

	AKFPawn_ZedDAR_execPlayHit_Parms PlayHit_Parms;

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.OnStackingAfflictionChanged
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR::OnStackingAfflictionChanged ( )
{
	static UFunction* pFnOnStackingAfflictionChanged = NULL;

	if ( ! pFnOnStackingAfflictionChanged )
		pFnOnStackingAfflictionChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.OnStackingAfflictionChanged" );

	AKFPawn_ZedDAR_execOnStackingAfflictionChanged_Parms OnStackingAfflictionChanged_Parms;

	this->ProcessEvent ( pFnOnStackingAfflictionChanged, &OnStackingAfflictionChanged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.StartRangedAttack
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR::StartRangedAttack ( )
{
	static UFunction* pFnStartRangedAttack = NULL;

	if ( ! pFnStartRangedAttack )
		pFnStartRangedAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.StartRangedAttack" );

	AKFPawn_ZedDAR_execStartRangedAttack_Parms StartRangedAttack_Parms;

	this->ProcessEvent ( pFnStartRangedAttack, &StartRangedAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR.PossessedBy" );

	AKFPawn_ZedDAR_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.UpdateShieldUI
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::UpdateShieldUI ( )
{
	static UFunction* pFnUpdateShieldUI = NULL;

	if ( ! pFnUpdateShieldUI )
		pFnUpdateShieldUI = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.UpdateShieldUI" );

	AKFPawn_ZedFleshpoundKing_execUpdateShieldUI_Parms UpdateShieldUI_Parms;

	this->ProcessEvent ( pFnUpdateShieldUI, &UpdateShieldUI_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.DetachShieldFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::DetachShieldFX ( )
{
	static UFunction* pFnDetachShieldFX = NULL;

	if ( ! pFnDetachShieldFX )
		pFnDetachShieldFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.DetachShieldFX" );

	AKFPawn_ZedFleshpoundKing_execDetachShieldFX_Parms DetachShieldFX_Parms;

	this->ProcessEvent ( pFnDetachShieldFX, &DetachShieldFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.BreakShield
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::BreakShield ( )
{
	static UFunction* pFnBreakShield = NULL;

	if ( ! pFnBreakShield )
		pFnBreakShield = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.BreakShield" );

	AKFPawn_ZedFleshpoundKing_execBreakShield_Parms BreakShield_Parms;

	this->ProcessEvent ( pFnBreakShield, &BreakShield_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.MakeVectorFromColor
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::MakeVectorFromColor ( )
{
	static UFunction* pFnMakeVectorFromColor = NULL;

	if ( ! pFnMakeVectorFromColor )
		pFnMakeVectorFromColor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.MakeVectorFromColor" );

	AKFPawn_ZedFleshpoundKing_execMakeVectorFromColor_Parms MakeVectorFromColor_Parms;

	this->ProcessEvent ( pFnMakeVectorFromColor, &MakeVectorFromColor_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.UpdateShield
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::UpdateShield ( )
{
	static UFunction* pFnUpdateShield = NULL;

	if ( ! pFnUpdateShield )
		pFnUpdateShield = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.UpdateShield" );

	AKFPawn_ZedFleshpoundKing_execUpdateShield_Parms UpdateShield_Parms;

	this->ProcessEvent ( pFnUpdateShield, &UpdateShield_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ActivateShieldFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ActivateShieldFX ( )
{
	static UFunction* pFnActivateShieldFX = NULL;

	if ( ! pFnActivateShieldFX )
		pFnActivateShieldFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ActivateShieldFX" );

	AKFPawn_ZedFleshpoundKing_execActivateShieldFX_Parms ActivateShieldFX_Parms;

	this->ProcessEvent ( pFnActivateShieldFX, &ActivateShieldFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ActivateShield
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ActivateShield ( )
{
	static UFunction* pFnActivateShield = NULL;

	if ( ! pFnActivateShield )
		pFnActivateShield = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ActivateShield" );

	AKFPawn_ZedFleshpoundKing_execActivateShield_Parms ActivateShield_Parms;

	this->ProcessEvent ( pFnActivateShield, &ActivateShield_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.SetShieldScale
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::SetShieldScale ( )
{
	static UFunction* pFnSetShieldScale = NULL;

	if ( ! pFnSetShieldScale )
		pFnSetShieldScale = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.SetShieldScale" );

	AKFPawn_ZedFleshpoundKing_execSetShieldScale_Parms SetShieldScale_Parms;

	this->ProcessEvent ( pFnSetShieldScale, &SetShieldScale_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.HandleAfflictionsOnHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::HandleAfflictionsOnHit ( )
{
	static UFunction* pFnHandleAfflictionsOnHit = NULL;

	if ( ! pFnHandleAfflictionsOnHit )
		pFnHandleAfflictionsOnHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.HandleAfflictionsOnHit" );

	AKFPawn_ZedFleshpoundKing_execHandleAfflictionsOnHit_Parms HandleAfflictionsOnHit_Parms;

	this->ProcessEvent ( pFnHandleAfflictionsOnHit, &HandleAfflictionsOnHit_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.AdjustDamage" );

	AKFPawn_ZedFleshpoundKing_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.TriggerRagePoundExplosion
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::TriggerRagePoundExplosion ( )
{
	static UFunction* pFnTriggerRagePoundExplosion = NULL;

	if ( ! pFnTriggerRagePoundExplosion )
		pFnTriggerRagePoundExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.TriggerRagePoundExplosion" );

	AKFPawn_ZedFleshpoundKing_execTriggerRagePoundExplosion_Parms TriggerRagePoundExplosion_Parms;

	this->ProcessEvent ( pFnTriggerRagePoundExplosion, &TriggerRagePoundExplosion_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.StopBossWave
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::StopBossWave ( )
{
	static UFunction* pFnStopBossWave = NULL;

	if ( ! pFnStopBossWave )
		pFnStopBossWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.StopBossWave" );

	AKFPawn_ZedFleshpoundKing_execStopBossWave_Parms StopBossWave_Parms;

	this->ProcessEvent ( pFnStopBossWave, &StopBossWave_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.PauseBossWave
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::PauseBossWave ( )
{
	static UFunction* pFnPauseBossWave = NULL;

	if ( ! pFnPauseBossWave )
		pFnPauseBossWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.PauseBossWave" );

	AKFPawn_ZedFleshpoundKing_execPauseBossWave_Parms PauseBossWave_Parms;

	this->ProcessEvent ( pFnPauseBossWave, &PauseBossWave_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.SpawnSubWave
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::SpawnSubWave ( )
{
	static UFunction* pFnSpawnSubWave = NULL;

	if ( ! pFnSpawnSubWave )
		pFnSpawnSubWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.SpawnSubWave" );

	AKFPawn_ZedFleshpoundKing_execSpawnSubWave_Parms SpawnSubWave_Parms;

	this->ProcessEvent ( pFnSpawnSubWave, &SpawnSubWave_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_RagePoundRightFinal
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ANIMNOTIFY_RagePoundRightFinal ( )
{
	static UFunction* pFnANIMNOTIFY_RagePoundRightFinal = NULL;

	if ( ! pFnANIMNOTIFY_RagePoundRightFinal )
		pFnANIMNOTIFY_RagePoundRightFinal = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_RagePoundRightFinal" );

	AKFPawn_ZedFleshpoundKing_execANIMNOTIFY_RagePoundRightFinal_Parms ANIMNOTIFY_RagePoundRightFinal_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_RagePoundRightFinal, &ANIMNOTIFY_RagePoundRightFinal_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_RagePoundRight
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ANIMNOTIFY_RagePoundRight ( )
{
	static UFunction* pFnANIMNOTIFY_RagePoundRight = NULL;

	if ( ! pFnANIMNOTIFY_RagePoundRight )
		pFnANIMNOTIFY_RagePoundRight = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_RagePoundRight" );

	AKFPawn_ZedFleshpoundKing_execANIMNOTIFY_RagePoundRight_Parms ANIMNOTIFY_RagePoundRight_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_RagePoundRight, &ANIMNOTIFY_RagePoundRight_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_RagePoundLeft
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ANIMNOTIFY_RagePoundLeft ( )
{
	static UFunction* pFnANIMNOTIFY_RagePoundLeft = NULL;

	if ( ! pFnANIMNOTIFY_RagePoundLeft )
		pFnANIMNOTIFY_RagePoundLeft = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_RagePoundLeft" );

	AKFPawn_ZedFleshpoundKing_execANIMNOTIFY_RagePoundLeft_Parms ANIMNOTIFY_RagePoundLeft_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_RagePoundLeft, &ANIMNOTIFY_RagePoundLeft_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.UpdateBattlePhaseLights
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::UpdateBattlePhaseLights ( )
{
	static UFunction* pFnUpdateBattlePhaseLights = NULL;

	if ( ! pFnUpdateBattlePhaseLights )
		pFnUpdateBattlePhaseLights = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.UpdateBattlePhaseLights" );

	AKFPawn_ZedFleshpoundKing_execUpdateBattlePhaseLights_Parms UpdateBattlePhaseLights_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseLights, &UpdateBattlePhaseLights_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.UpdateGameplayMICParams
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::UpdateGameplayMICParams ( )
{
	static UFunction* pFnUpdateGameplayMICParams = NULL;

	if ( ! pFnUpdateGameplayMICParams )
		pFnUpdateGameplayMICParams = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.UpdateGameplayMICParams" );

	AKFPawn_ZedFleshpoundKing_execUpdateGameplayMICParams_Parms UpdateGameplayMICParams_Parms;

	this->ProcessEvent ( pFnUpdateGameplayMICParams, &UpdateGameplayMICParams_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ToggleSMBeam
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ToggleSMBeam ( )
{
	static UFunction* pFnToggleSMBeam = NULL;

	if ( ! pFnToggleSMBeam )
		pFnToggleSMBeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ToggleSMBeam" );

	AKFPawn_ZedFleshpoundKing_execToggleSMBeam_Parms ToggleSMBeam_Parms;

	this->ProcessEvent ( pFnToggleSMBeam, &ToggleSMBeam_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_ChestBeamEnd
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ANIMNOTIFY_ChestBeamEnd ( )
{
	static UFunction* pFnANIMNOTIFY_ChestBeamEnd = NULL;

	if ( ! pFnANIMNOTIFY_ChestBeamEnd )
		pFnANIMNOTIFY_ChestBeamEnd = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_ChestBeamEnd" );

	AKFPawn_ZedFleshpoundKing_execANIMNOTIFY_ChestBeamEnd_Parms ANIMNOTIFY_ChestBeamEnd_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_ChestBeamEnd, &ANIMNOTIFY_ChestBeamEnd_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_ChestBeamStart
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ANIMNOTIFY_ChestBeamStart ( )
{
	static UFunction* pFnANIMNOTIFY_ChestBeamStart = NULL;

	if ( ! pFnANIMNOTIFY_ChestBeamStart )
		pFnANIMNOTIFY_ChestBeamStart = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ANIMNOTIFY_ChestBeamStart" );

	AKFPawn_ZedFleshpoundKing_execANIMNOTIFY_ChestBeamStart_Parms ANIMNOTIFY_ChestBeamStart_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_ChestBeamStart, &ANIMNOTIFY_ChestBeamStart_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ApplyHeadChunkGore
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::ApplyHeadChunkGore ( )
{
	static UFunction* pFnApplyHeadChunkGore = NULL;

	if ( ! pFnApplyHeadChunkGore )
		pFnApplyHeadChunkGore = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ApplyHeadChunkGore" );

	AKFPawn_ZedFleshpoundKing_execApplyHeadChunkGore_Parms ApplyHeadChunkGore_Parms;

	this->ProcessEvent ( pFnApplyHeadChunkGore, &ApplyHeadChunkGore_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.PlayHeadAsplode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::PlayHeadAsplode ( )
{
	static UFunction* pFnPlayHeadAsplode = NULL;

	if ( ! pFnPlayHeadAsplode )
		pFnPlayHeadAsplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.PlayHeadAsplode" );

	AKFPawn_ZedFleshpoundKing_execPlayHeadAsplode_Parms PlayHeadAsplode_Parms;

	this->ProcessEvent ( pFnPlayHeadAsplode, &PlayHeadAsplode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.PlayDismemberment
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::PlayDismemberment ( )
{
	static UFunction* pFnPlayDismemberment = NULL;

	if ( ! pFnPlayDismemberment )
		pFnPlayDismemberment = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.PlayDismemberment" );

	AKFPawn_ZedFleshpoundKing_execPlayDismemberment_Parms PlayDismemberment_Parms;

	this->ProcessEvent ( pFnPlayDismemberment, &PlayDismemberment_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.CauseHeadTrauma" );

	AKFPawn_ZedFleshpoundKing_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.PlayBossMusic
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::PlayBossMusic ( )
{
	static UFunction* pFnPlayBossMusic = NULL;

	if ( ! pFnPlayBossMusic )
		pFnPlayBossMusic = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.PlayBossMusic" );

	AKFPawn_ZedFleshpoundKing_execPlayBossMusic_Parms PlayBossMusic_Parms;

	this->ProcessEvent ( pFnPlayBossMusic, &PlayBossMusic_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.PossessedBy" );

	AKFPawn_ZedFleshpoundKing_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.ReplicatedEvent" );

	AKFPawn_ZedFleshpoundKing_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetNumMinionsToSpawn
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::GetNumMinionsToSpawn ( )
{
	static UFunction* pFnGetNumMinionsToSpawn = NULL;

	if ( ! pFnGetNumMinionsToSpawn )
		pFnGetNumMinionsToSpawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetNumMinionsToSpawn" );

	AKFPawn_ZedFleshpoundKing_execGetNumMinionsToSpawn_Parms GetNumMinionsToSpawn_Parms;

	this->ProcessEvent ( pFnGetNumMinionsToSpawn, &GetNumMinionsToSpawn_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetWaveInfo
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::GetWaveInfo ( )
{
	static UFunction* pFnGetWaveInfo = NULL;

	if ( ! pFnGetWaveInfo )
		pFnGetWaveInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetWaveInfo" );

	AKFPawn_ZedFleshpoundKing_execGetWaveInfo_Parms GetWaveInfo_Parms;

	this->ProcessEvent ( pFnGetWaveInfo, &GetWaveInfo_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.OnZedDied
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::OnZedDied ( )
{
	static UFunction* pFnOnZedDied = NULL;

	if ( ! pFnOnZedDied )
		pFnOnZedDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.OnZedDied" );

	AKFPawn_ZedFleshpoundKing_execOnZedDied_Parms OnZedDied_Parms;

	this->ProcessEvent ( pFnOnZedDied, &OnZedDied_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetBossCameraOffset
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::GetBossCameraOffset ( )
{
	static UFunction* pFnGetBossCameraOffset = NULL;

	if ( ! pFnGetBossCameraOffset )
		pFnGetBossCameraOffset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetBossCameraOffset" );

	AKFPawn_ZedFleshpoundKing_execGetBossCameraOffset_Parms GetBossCameraOffset_Parms;

	this->ProcessEvent ( pFnGetBossCameraOffset, &GetBossCameraOffset_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetBossCameraSocket
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::GetBossCameraSocket ( )
{
	static UFunction* pFnGetBossCameraSocket = NULL;

	if ( ! pFnGetBossCameraSocket )
		pFnGetBossCameraSocket = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetBossCameraSocket" );

	AKFPawn_ZedFleshpoundKing_execGetBossCameraSocket_Parms GetBossCameraSocket_Parms;

	this->ProcessEvent ( pFnGetBossCameraSocket, &GetBossCameraSocket_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.UseAnimatedBossCamera
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::UseAnimatedBossCamera ( )
{
	static UFunction* pFnUseAnimatedBossCamera = NULL;

	if ( ! pFnUseAnimatedBossCamera )
		pFnUseAnimatedBossCamera = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.UseAnimatedBossCamera" );

	AKFPawn_ZedFleshpoundKing_execUseAnimatedBossCamera_Parms UseAnimatedBossCamera_Parms;

	this->ProcessEvent ( pFnUseAnimatedBossCamera, &UseAnimatedBossCamera_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.SetAnimatedBossCamera
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::SetAnimatedBossCamera ( )
{
	static UFunction* pFnSetAnimatedBossCamera = NULL;

	if ( ! pFnSetAnimatedBossCamera )
		pFnSetAnimatedBossCamera = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.SetAnimatedBossCamera" );

	AKFPawn_ZedFleshpoundKing_execSetAnimatedBossCamera_Parms SetAnimatedBossCamera_Parms;

	this->ProcessEvent ( pFnSetAnimatedBossCamera, &SetAnimatedBossCamera_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetHealthPercent
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::GetHealthPercent ( )
{
	static UFunction* pFnGetHealthPercent = NULL;

	if ( ! pFnGetHealthPercent )
		pFnGetHealthPercent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetHealthPercent" );

	AKFPawn_ZedFleshpoundKing_execGetHealthPercent_Parms GetHealthPercent_Parms;

	this->ProcessEvent ( pFnGetHealthPercent, &GetHealthPercent_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.IsABoss
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::eventIsABoss ( )
{
	static UFunction* pFnIsABoss = NULL;

	if ( ! pFnIsABoss )
		pFnIsABoss = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.IsABoss" );

	AKFPawn_ZedFleshpoundKing_eventIsABoss_Parms IsABoss_Parms;

	this->ProcessEvent ( pFnIsABoss, &IsABoss_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetRandomBossCaption
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::GetRandomBossCaption ( )
{
	static UFunction* pFnGetRandomBossCaption = NULL;

	if ( ! pFnGetRandomBossCaption )
		pFnGetRandomBossCaption = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetRandomBossCaption" );

	AKFPawn_ZedFleshpoundKing_execGetRandomBossCaption_Parms GetRandomBossCaption_Parms;

	this->ProcessEvent ( pFnGetRandomBossCaption, &GetRandomBossCaption_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetMonsterPawn
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpoundKing::GetMonsterPawn ( )
{
	static UFunction* pFnGetMonsterPawn = NULL;

	if ( ! pFnGetMonsterPawn )
		pFnGetMonsterPawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundKing.GetMonsterPawn" );

	AKFPawn_ZedFleshpoundKing_execGetMonsterPawn_Parms GetMonsterPawn_Parms;

	this->ProcessEvent ( pFnGetMonsterPawn, &GetMonsterPawn_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedFleshpound::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.GetTraderAdviceID" );

	AKFPawn_ZedFleshpound_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpound::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.GetSpotterDialogID" );

	AKFPawn_ZedFleshpound_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.GetOverheadDebugText
// [0x00C20102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::GetOverheadDebugText ( )
{
	static UFunction* pFnGetOverheadDebugText = NULL;

	if ( ! pFnGetOverheadDebugText )
		pFnGetOverheadDebugText = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.GetOverheadDebugText" );

	AKFPawn_ZedFleshpound_execGetOverheadDebugText_Parms GetOverheadDebugText_Parms;

	this->ProcessEvent ( pFnGetOverheadDebugText, &GetOverheadDebugText_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpound::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.Tick" );

	AKFPawn_ZedFleshpound_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.AdjustAffliction
// [0x00420102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::AdjustAffliction ( )
{
	static UFunction* pFnAdjustAffliction = NULL;

	if ( ! pFnAdjustAffliction )
		pFnAdjustAffliction = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.AdjustAffliction" );

	AKFPawn_ZedFleshpound_execAdjustAffliction_Parms AdjustAffliction_Parms;

	this->ProcessEvent ( pFnAdjustAffliction, &AdjustAffliction_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.GetBumpAttackDamageType
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpound::GetBumpAttackDamageType ( )
{
	static UFunction* pFnGetBumpAttackDamageType = NULL;

	if ( ! pFnGetBumpAttackDamageType )
		pFnGetBumpAttackDamageType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.GetBumpAttackDamageType" );

	AKFPawn_ZedFleshpound_execGetBumpAttackDamageType_Parms GetBumpAttackDamageType_Parms;

	this->ProcessEvent ( pFnGetBumpAttackDamageType, &GetBumpAttackDamageType_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.PlayDying" );

	AKFPawn_ZedFleshpound_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.StopRageSound
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::StopRageSound ( )
{
	static UFunction* pFnStopRageSound = NULL;

	if ( ! pFnStopRageSound )
		pFnStopRageSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.StopRageSound" );

	AKFPawn_ZedFleshpound_execStopRageSound_Parms StopRageSound_Parms;

	this->ProcessEvent ( pFnStopRageSound, &StopRageSound_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.SetGlowColors
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::SetGlowColors ( )
{
	static UFunction* pFnSetGlowColors = NULL;

	if ( ! pFnSetGlowColors )
		pFnSetGlowColors = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.SetGlowColors" );

	AKFPawn_ZedFleshpound_execSetGlowColors_Parms SetGlowColors_Parms;

	this->ProcessEvent ( pFnSetGlowColors, &SetGlowColors_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.UpdateGameplayMICParams
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::UpdateGameplayMICParams ( )
{
	static UFunction* pFnUpdateGameplayMICParams = NULL;

	if ( ! pFnUpdateGameplayMICParams )
		pFnUpdateGameplayMICParams = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.UpdateGameplayMICParams" );

	AKFPawn_ZedFleshpound_execUpdateGameplayMICParams_Parms UpdateGameplayMICParams_Parms;

	this->ProcessEvent ( pFnUpdateGameplayMICParams, &UpdateGameplayMICParams_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.SetEnraged
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::SetEnraged ( )
{
	static UFunction* pFnSetEnraged = NULL;

	if ( ! pFnSetEnraged )
		pFnSetEnraged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.SetEnraged" );

	AKFPawn_ZedFleshpound_execSetEnraged_Parms SetEnraged_Parms;

	this->ProcessEvent ( pFnSetEnraged, &SetEnraged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.IsEnraged
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpound::eventIsEnraged ( )
{
	static UFunction* pFnIsEnraged = NULL;

	if ( ! pFnIsEnraged )
		pFnIsEnraged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.IsEnraged" );

	AKFPawn_ZedFleshpound_eventIsEnraged_Parms IsEnraged_Parms;

	this->ProcessEvent ( pFnIsEnraged, &IsEnraged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.ShouldPlaySpecialMeleeAnims
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpound::ShouldPlaySpecialMeleeAnims ( )
{
	static UFunction* pFnShouldPlaySpecialMeleeAnims = NULL;

	if ( ! pFnShouldPlaySpecialMeleeAnims )
		pFnShouldPlaySpecialMeleeAnims = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.ShouldPlaySpecialMeleeAnims" );

	AKFPawn_ZedFleshpound_execShouldPlaySpecialMeleeAnims_Parms ShouldPlaySpecialMeleeAnims_Parms;

	this->ProcessEvent ( pFnShouldPlaySpecialMeleeAnims, &ShouldPlaySpecialMeleeAnims_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.UpdateBattlePhaseLights
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::UpdateBattlePhaseLights ( )
{
	static UFunction* pFnUpdateBattlePhaseLights = NULL;

	if ( ! pFnUpdateBattlePhaseLights )
		pFnUpdateBattlePhaseLights = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.UpdateBattlePhaseLights" );

	AKFPawn_ZedFleshpound_execUpdateBattlePhaseLights_Parms UpdateBattlePhaseLights_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseLights, &UpdateBattlePhaseLights_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshpound::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.TerminateEffectsOnDeath" );

	AKFPawn_ZedFleshpound_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.CanBlock
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpound::CanBlock ( )
{
	static UFunction* pFnCanBlock = NULL;

	if ( ! pFnCanBlock )
		pFnCanBlock = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.CanBlock" );

	AKFPawn_ZedFleshpound_execCanBlock_Parms CanBlock_Parms;

	this->ProcessEvent ( pFnCanBlock, &CanBlock_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedFleshpound::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.CauseHeadTrauma" );

	AKFPawn_ZedFleshpound_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.PlayFootStepSound
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpound::eventPlayFootStepSound ( )
{
	static UFunction* pFnPlayFootStepSound = NULL;

	if ( ! pFnPlayFootStepSound )
		pFnPlayFootStepSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.PlayFootStepSound" );

	AKFPawn_ZedFleshpound_eventPlayFootStepSound_Parms PlayFootStepSound_Parms;

	this->ProcessEvent ( pFnPlayFootStepSound, &PlayFootStepSound_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpound::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.SetSprinting" );

	AKFPawn_ZedFleshpound_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.StartSteering
// [0x00020100] 
// Parameters infos:

void AKFPawn_ZedFleshpound::StartSteering ( )
{
	static UFunction* pFnStartSteering = NULL;

	if ( ! pFnStartSteering )
		pFnStartSteering = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.StartSteering" );

	AKFPawn_ZedFleshpound_execStartSteering_Parms StartSteering_Parms;

	this->ProcessEvent ( pFnStartSteering, &StartSteering_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.OnStackingAfflictionChanged
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshpound::OnStackingAfflictionChanged ( )
{
	static UFunction* pFnOnStackingAfflictionChanged = NULL;

	if ( ! pFnOnStackingAfflictionChanged )
		pFnOnStackingAfflictionChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.OnStackingAfflictionChanged" );

	AKFPawn_ZedFleshpound_execOnStackingAfflictionChanged_Parms OnStackingAfflictionChanged_Parms;

	this->ProcessEvent ( pFnOnStackingAfflictionChanged, &OnStackingAfflictionChanged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpound::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.ReplicatedEvent" );

	AKFPawn_ZedFleshpound_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpound::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound.PreBeginPlay" );

	AKFPawn_ZedFleshpound_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.SpecialMoveEnded" );

	UKFSM_FleshpoundKing_ChestBeam_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.Timer_TickDamage
// [0x00820002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::Timer_TickDamage ( )
{
	static UFunction* pFnTimer_TickDamage = NULL;

	if ( ! pFnTimer_TickDamage )
		pFnTimer_TickDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.Timer_TickDamage" );

	UKFSM_FleshpoundKing_ChestBeam_execTimer_TickDamage_Parms Timer_TickDamage_Parms;

	this->ProcessEvent ( pFnTimer_TickDamage, &Timer_TickDamage_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.Timer_AttemptTargetChange
// [0x00820002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::Timer_AttemptTargetChange ( )
{
	static UFunction* pFnTimer_AttemptTargetChange = NULL;

	if ( ! pFnTimer_AttemptTargetChange )
		pFnTimer_AttemptTargetChange = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.Timer_AttemptTargetChange" );

	UKFSM_FleshpoundKing_ChestBeam_execTimer_AttemptTargetChange_Parms Timer_AttemptTargetChange_Parms;

	this->ProcessEvent ( pFnTimer_AttemptTargetChange, &Timer_AttemptTargetChange_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.DisableBeamFX
// [0x00020002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::DisableBeamFX ( )
{
	static UFunction* pFnDisableBeamFX = NULL;

	if ( ! pFnDisableBeamFX )
		pFnDisableBeamFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.DisableBeamFX" );

	UKFSM_FleshpoundKing_ChestBeam_execDisableBeamFX_Parms DisableBeamFX_Parms;

	this->ProcessEvent ( pFnDisableBeamFX, &DisableBeamFX_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.ToggleBeam
// [0x00820002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::ToggleBeam ( )
{
	static UFunction* pFnToggleBeam = NULL;

	if ( ! pFnToggleBeam )
		pFnToggleBeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.ToggleBeam" );

	UKFSM_FleshpoundKing_ChestBeam_execToggleBeam_Parms ToggleBeam_Parms;

	this->ProcessEvent ( pFnToggleBeam, &ToggleBeam_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.SetBeamTarget
// [0x00820002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::SetBeamTarget ( )
{
	static UFunction* pFnSetBeamTarget = NULL;

	if ( ! pFnSetBeamTarget )
		pFnSetBeamTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.SetBeamTarget" );

	UKFSM_FleshpoundKing_ChestBeam_execSetBeamTarget_Parms SetBeamTarget_Parms;

	this->ProcessEvent ( pFnSetBeamTarget, &SetBeamTarget_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.IsValidBeamTarget
// [0x00020002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::IsValidBeamTarget ( )
{
	static UFunction* pFnIsValidBeamTarget = NULL;

	if ( ! pFnIsValidBeamTarget )
		pFnIsValidBeamTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.IsValidBeamTarget" );

	UKFSM_FleshpoundKing_ChestBeam_execIsValidBeamTarget_Parms IsValidBeamTarget_Parms;

	this->ProcessEvent ( pFnIsValidBeamTarget, &IsValidBeamTarget_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.Tick
// [0x00020002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.Tick" );

	UKFSM_FleshpoundKing_ChestBeam_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_FleshpoundKing_ChestBeam::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_FleshpoundKing_ChestBeam.SpecialMoveStarted" );

	UKFSM_FleshpoundKing_ChestBeam_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedGorefast.IsFrustrated
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedGorefast::IsFrustrated ( )
{
	static UFunction* pFnIsFrustrated = NULL;

	if ( ! pFnIsFrustrated )
		pFnIsFrustrated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedGorefast.IsFrustrated" );

	AKFAIController_ZedGorefast_execIsFrustrated_Parms IsFrustrated_Parms;

	this->ProcessEvent ( pFnIsFrustrated, &IsFrustrated_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedGorefast.UpdateSprintFrustration
// [0x00024002] 
// Parameters infos:

void AKFAIController_ZedGorefast::UpdateSprintFrustration ( )
{
	static UFunction* pFnUpdateSprintFrustration = NULL;

	if ( ! pFnUpdateSprintFrustration )
		pFnUpdateSprintFrustration = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedGorefast.UpdateSprintFrustration" );

	AKFAIController_ZedGorefast_execUpdateSprintFrustration_Parms UpdateSprintFrustration_Parms;

	this->ProcessEvent ( pFnUpdateSprintFrustration, &UpdateSprintFrustration_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedGorefast.EnemyNotVisible
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFAIController_ZedGorefast::eventEnemyNotVisible ( )
{
	static UFunction* pFnEnemyNotVisible = NULL;

	if ( ! pFnEnemyNotVisible )
		pFnEnemyNotVisible = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedGorefast.EnemyNotVisible" );

	AKFAIController_ZedGorefast_eventEnemyNotVisible_Parms EnemyNotVisible_Parms;

	this->ProcessEvent ( pFnEnemyNotVisible, &EnemyNotVisible_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedGorefast.CanSetSprinting
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedGorefast::CanSetSprinting ( )
{
	static UFunction* pFnCanSetSprinting = NULL;

	if ( ! pFnCanSetSprinting )
		pFnCanSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedGorefast.CanSetSprinting" );

	AKFAIController_ZedGorefast_execCanSetSprinting_Parms CanSetSprinting_Parms;

	this->ProcessEvent ( pFnCanSetSprinting, &CanSetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedGorefast.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedGorefast::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedGorefast.ShouldSprint" );

	AKFAIController_ZedGorefast_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_Heal.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Heal::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_Heal.SpecialMoveEnded" );

	UKFSM_Patriarch_Heal_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_Heal.DoHeal
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Heal::DoHeal ( )
{
	static UFunction* pFnDoHeal = NULL;

	if ( ! pFnDoHeal )
		pFnDoHeal = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_Heal.DoHeal" );

	UKFSM_Patriarch_Heal_execDoHeal_Parms DoHeal_Parms;

	this->ProcessEvent ( pFnDoHeal, &DoHeal_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_Heal.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_Heal::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_Heal.SpecialMoveStarted" );

	UKFSM_Patriarch_Heal_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_Heal.PackSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Patriarch_Heal::PackSMFlags ( )
{
	static UFunction* pFnPackSMFlags = NULL;

	if ( ! pFnPackSMFlags )
		pFnPackSMFlags = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_Heal.PackSMFlags" );

	UKFSM_Patriarch_Heal_execPackSMFlags_Parms PackSMFlags_Parms;

	this->ProcessEvent ( pFnPackSMFlags, &PackSMFlags_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_Taunt.PackSMFlags
// [0x00022002] 
// Parameters infos:

void UKFSM_Patriarch_Taunt::PackSMFlags ( )
{
	static UFunction* pFnPackSMFlags = NULL;

	if ( ! pFnPackSMFlags )
		pFnPackSMFlags = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_Taunt.PackSMFlags" );

	UKFSM_Patriarch_Taunt_execPackSMFlags_Parms PackSMFlags_Parms;

	this->ProcessEvent ( pFnPackSMFlags, &PackSMFlags_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedScrake.CanAttackDestructibles
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedScrake::CanAttackDestructibles ( )
{
	static UFunction* pFnCanAttackDestructibles = NULL;

	if ( ! pFnCanAttackDestructibles )
		pFnCanAttackDestructibles = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedScrake.CanAttackDestructibles" );

	AKFAIController_ZedScrake_execCanAttackDestructibles_Parms CanAttackDestructibles_Parms;

	this->ProcessEvent ( pFnCanAttackDestructibles, &CanAttackDestructibles_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedScrake.CanEvadeGrenade
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedScrake::CanEvadeGrenade ( )
{
	static UFunction* pFnCanEvadeGrenade = NULL;

	if ( ! pFnCanEvadeGrenade )
		pFnCanEvadeGrenade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedScrake.CanEvadeGrenade" );

	AKFAIController_ZedScrake_execCanEvadeGrenade_Parms CanEvadeGrenade_Parms;

	this->ProcessEvent ( pFnCanEvadeGrenade, &CanEvadeGrenade_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedScrake.UpdateSprintFrustration
// [0x00024000] 
// Parameters infos:

void AKFAIController_ZedScrake::UpdateSprintFrustration ( )
{
	static UFunction* pFnUpdateSprintFrustration = NULL;

	if ( ! pFnUpdateSprintFrustration )
		pFnUpdateSprintFrustration = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedScrake.UpdateSprintFrustration" );

	AKFAIController_ZedScrake_execUpdateSprintFrustration_Parms UpdateSprintFrustration_Parms;

	this->ProcessEvent ( pFnUpdateSprintFrustration, &UpdateSprintFrustration_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedScrake.CanSetSprinting
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedScrake::CanSetSprinting ( )
{
	static UFunction* pFnCanSetSprinting = NULL;

	if ( ! pFnCanSetSprinting )
		pFnCanSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedScrake.CanSetSprinting" );

	AKFAIController_ZedScrake_execCanSetSprinting_Parms CanSetSprinting_Parms;

	this->ProcessEvent ( pFnCanSetSprinting, &CanSetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedScrake.ShouldSprint
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedScrake::ShouldSprint ( )
{
	static UFunction* pFnShouldSprint = NULL;

	if ( ! pFnShouldSprint )
		pFnShouldSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedScrake.ShouldSprint" );

	AKFAIController_ZedScrake_execShouldSprint_Parms ShouldSprint_Parms;

	this->ProcessEvent ( pFnShouldSprint, &ShouldSprint_Parms, NULL );
};

// Function kfgamecontent.KFAIController_ZedScrake.AmIAllowedToSuicideWhenStuck
// [0x00020002] 
// Parameters infos:

void AKFAIController_ZedScrake::AmIAllowedToSuicideWhenStuck ( )
{
	static UFunction* pFnAmIAllowedToSuicideWhenStuck = NULL;

	if ( ! pFnAmIAllowedToSuicideWhenStuck )
		pFnAmIAllowedToSuicideWhenStuck = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAIController_ZedScrake.AmIAllowedToSuicideWhenStuck" );

	AKFAIController_ZedScrake_execAmIAllowedToSuicideWhenStuck_Parms AmIAllowedToSuicideWhenStuck_Parms;

	this->ProcessEvent ( pFnAmIAllowedToSuicideWhenStuck, &AmIAllowedToSuicideWhenStuck_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Endless.OnBossDied
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Endless::OnBossDied ( )
{
	static UFunction* pFnOnBossDied = NULL;

	if ( ! pFnOnBossDied )
		pFnOnBossDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Endless.OnBossDied" );

	UKFAISpawnManager_Endless_execOnBossDied_Parms OnBossDied_Parms;

	this->ProcessEvent ( pFnOnBossDied, &OnBossDied_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Endless.OnDifficultyUpdated
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Endless::OnDifficultyUpdated ( )
{
	static UFunction* pFnOnDifficultyUpdated = NULL;

	if ( ! pFnOnDifficultyUpdated )
		pFnOnDifficultyUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Endless.OnDifficultyUpdated" );

	UKFAISpawnManager_Endless_execOnDifficultyUpdated_Parms OnDifficultyUpdated_Parms;

	this->ProcessEvent ( pFnOnDifficultyUpdated, &OnDifficultyUpdated_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Endless.GetWaveSettings
// [0x00420002] 
// Parameters infos:

void UKFAISpawnManager_Endless::GetWaveSettings ( )
{
	static UFunction* pFnGetWaveSettings = NULL;

	if ( ! pFnGetWaveSettings )
		pFnGetWaveSettings = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Endless.GetWaveSettings" );

	UKFAISpawnManager_Endless_execGetWaveSettings_Parms GetWaveSettings_Parms;

	this->ProcessEvent ( pFnGetWaveSettings, &GetWaveSettings_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Endless.GetAvailableSquads
// [0x00024002] 
// Parameters infos:

void UKFAISpawnManager_Endless::GetAvailableSquads ( )
{
	static UFunction* pFnGetAvailableSquads = NULL;

	if ( ! pFnGetAvailableSquads )
		pFnGetAvailableSquads = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Endless.GetAvailableSquads" );

	UKFAISpawnManager_Endless_execGetAvailableSquads_Parms GetAvailableSquads_Parms;

	this->ProcessEvent ( pFnGetAvailableSquads, &GetAvailableSquads_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Endless.SetupNextWave
// [0x00024002] 
// Parameters infos:

void UKFAISpawnManager_Endless::SetupNextWave ( )
{
	static UFunction* pFnSetupNextWave = NULL;

	if ( ! pFnSetupNextWave )
		pFnSetupNextWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Endless.SetupNextWave" );

	UKFAISpawnManager_Endless_execSetupNextWave_Parms SetupNextWave_Parms;

	this->ProcessEvent ( pFnSetupNextWave, &SetupNextWave_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.SetMonsterDefaults
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::SetMonsterDefaults ( )
{
	static UFunction* pFnSetMonsterDefaults = NULL;

	if ( ! pFnSetMonsterDefaults )
		pFnSetMonsterDefaults = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.SetMonsterDefaults" );

	AKFGameInfo_Endless_execSetMonsterDefaults_Parms SetMonsterDefaults_Parms;

	this->ProcessEvent ( pFnSetMonsterDefaults, &SetMonsterDefaults_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.HasCustomTraderVoiceGroup
// [0x00022002] 
// Parameters infos:

void AKFGameInfo_Endless::HasCustomTraderVoiceGroup ( )
{
	static UFunction* pFnHasCustomTraderVoiceGroup = NULL;

	if ( ! pFnHasCustomTraderVoiceGroup )
		pFnHasCustomTraderVoiceGroup = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.HasCustomTraderVoiceGroup" );

	AKFGameInfo_Endless_execHasCustomTraderVoiceGroup_Parms HasCustomTraderVoiceGroup_Parms;

	this->ProcessEvent ( pFnHasCustomTraderVoiceGroup, &HasCustomTraderVoiceGroup_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.GetTotalWaveCountScale
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::GetTotalWaveCountScale ( )
{
	static UFunction* pFnGetTotalWaveCountScale = NULL;

	if ( ! pFnGetTotalWaveCountScale )
		pFnGetTotalWaveCountScale = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.GetTotalWaveCountScale" );

	AKFGameInfo_Endless_execGetTotalWaveCountScale_Parms GetTotalWaveCountScale_Parms;

	this->ProcessEvent ( pFnGetTotalWaveCountScale, &GetTotalWaveCountScale_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.CalculateMinimumRespawnDosh
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::CalculateMinimumRespawnDosh ( )
{
	static UFunction* pFnCalculateMinimumRespawnDosh = NULL;

	if ( ! pFnCalculateMinimumRespawnDosh )
		pFnCalculateMinimumRespawnDosh = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.CalculateMinimumRespawnDosh" );

	AKFGameInfo_Endless_execCalculateMinimumRespawnDosh_Parms CalculateMinimumRespawnDosh_Parms;

	this->ProcessEvent ( pFnCalculateMinimumRespawnDosh, &CalculateMinimumRespawnDosh_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.SetWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo_Endless::SetWave ( )
{
	static UFunction* pFnSetWave = NULL;

	if ( ! pFnSetWave )
		pFnSetWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.SetWave" );

	AKFGameInfo_Endless_execSetWave_Parms SetWave_Parms;

	this->ProcessEvent ( pFnSetWave, &SetWave_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.ShouldOverrideDoshOnKill
// [0x00C20002] 
// Parameters infos:

void AKFGameInfo_Endless::ShouldOverrideDoshOnKill ( )
{
	static UFunction* pFnShouldOverrideDoshOnKill = NULL;

	if ( ! pFnShouldOverrideDoshOnKill )
		pFnShouldOverrideDoshOnKill = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.ShouldOverrideDoshOnKill" );

	AKFGameInfo_Endless_execShouldOverrideDoshOnKill_Parms ShouldOverrideDoshOnKill_Parms;

	this->ProcessEvent ( pFnShouldOverrideDoshOnKill, &ShouldOverrideDoshOnKill_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.DoDeathExplosion
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::DoDeathExplosion ( )
{
	static UFunction* pFnDoDeathExplosion = NULL;

	if ( ! pFnDoDeathExplosion )
		pFnDoDeathExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.DoDeathExplosion" );

	AKFGameInfo_Endless_execDoDeathExplosion_Parms DoDeathExplosion_Parms;

	this->ProcessEvent ( pFnDoDeathExplosion, &DoDeathExplosion_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.Tick
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.Tick" );

	AKFGameInfo_Endless_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.EndOutbreakRound
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::EndOutbreakRound ( )
{
	static UFunction* pFnEndOutbreakRound = NULL;

	if ( ! pFnEndOutbreakRound )
		pFnEndOutbreakRound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.EndOutbreakRound" );

	AKFGameInfo_Endless_execEndOutbreakRound_Parms EndOutbreakRound_Parms;

	this->ProcessEvent ( pFnEndOutbreakRound, &EndOutbreakRound_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.StartOutbreakRound
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::StartOutbreakRound ( )
{
	static UFunction* pFnStartOutbreakRound = NULL;

	if ( ! pFnStartOutbreakRound )
		pFnStartOutbreakRound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.StartOutbreakRound" );

	AKFGameInfo_Endless_execStartOutbreakRound_Parms StartOutbreakRound_Parms;

	this->ProcessEvent ( pFnStartOutbreakRound, &StartOutbreakRound_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.ReduceDamage
// [0x00C20002] 
// Parameters infos:

void AKFGameInfo_Endless::ReduceDamage ( )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.ReduceDamage" );

	AKFGameInfo_Endless_execReduceDamage_Parms ReduceDamage_Parms;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.RestartPlayer
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.RestartPlayer" );

	AKFGameInfo_Endless_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.GetGameInfoSpawnRateMod
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::GetGameInfoSpawnRateMod ( )
{
	static UFunction* pFnGetGameInfoSpawnRateMod = NULL;

	if ( ! pFnGetGameInfoSpawnRateMod )
		pFnGetGameInfoSpawnRateMod = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.GetGameInfoSpawnRateMod" );

	AKFGameInfo_Endless_execGetGameInfoSpawnRateMod_Parms GetGameInfoSpawnRateMod_Parms;

	this->ProcessEvent ( pFnGetGameInfoSpawnRateMod, &GetGameInfoSpawnRateMod_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.StartHoePlus
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::StartHoePlus ( )
{
	static UFunction* pFnStartHoePlus = NULL;

	if ( ! pFnStartHoePlus )
		pFnStartHoePlus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.StartHoePlus" );

	AKFGameInfo_Endless_execStartHoePlus_Parms StartHoePlus_Parms;

	this->ProcessEvent ( pFnStartHoePlus, &StartHoePlus_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.GetFullyUpgradedAIType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::GetFullyUpgradedAIType ( )
{
	static UFunction* pFnGetFullyUpgradedAIType = NULL;

	if ( ! pFnGetFullyUpgradedAIType )
		pFnGetFullyUpgradedAIType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.GetFullyUpgradedAIType" );

	AKFGameInfo_Endless_execGetFullyUpgradedAIType_Parms GetFullyUpgradedAIType_Parms;

	this->ProcessEvent ( pFnGetFullyUpgradedAIType, &GetFullyUpgradedAIType_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.GetUpgradedAIType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::GetUpgradedAIType ( )
{
	static UFunction* pFnGetUpgradedAIType = NULL;

	if ( ! pFnGetUpgradedAIType )
		pFnGetUpgradedAIType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.GetUpgradedAIType" );

	AKFGameInfo_Endless_execGetUpgradedAIType_Parms GetUpgradedAIType_Parms;

	this->ProcessEvent ( pFnGetUpgradedAIType, &GetUpgradedAIType_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.ShouldFullyUpgradeAIType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::ShouldFullyUpgradeAIType ( )
{
	static UFunction* pFnShouldFullyUpgradeAIType = NULL;

	if ( ! pFnShouldFullyUpgradeAIType )
		pFnShouldFullyUpgradeAIType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.ShouldFullyUpgradeAIType" );

	AKFGameInfo_Endless_execShouldFullyUpgradeAIType_Parms ShouldFullyUpgradeAIType_Parms;

	this->ProcessEvent ( pFnShouldFullyUpgradeAIType, &ShouldFullyUpgradeAIType_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.ShouldUpgradeAIType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::ShouldUpgradeAIType ( )
{
	static UFunction* pFnShouldUpgradeAIType = NULL;

	if ( ! pFnShouldUpgradeAIType )
		pFnShouldUpgradeAIType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.ShouldUpgradeAIType" );

	AKFGameInfo_Endless_execShouldUpgradeAIType_Parms ShouldUpgradeAIType_Parms;

	this->ProcessEvent ( pFnShouldUpgradeAIType, &ShouldUpgradeAIType_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.GetAISpawnType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::GetAISpawnType ( )
{
	static UFunction* pFnGetAISpawnType = NULL;

	if ( ! pFnGetAISpawnType )
		pFnGetAISpawnType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.GetAISpawnType" );

	AKFGameInfo_Endless_execGetAISpawnType_Parms GetAISpawnType_Parms;

	this->ProcessEvent ( pFnGetAISpawnType, &GetAISpawnType_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.IncrementDifficulty
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::IncrementDifficulty ( )
{
	static UFunction* pFnIncrementDifficulty = NULL;

	if ( ! pFnIncrementDifficulty )
		pFnIncrementDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.IncrementDifficulty" );

	AKFGameInfo_Endless_execIncrementDifficulty_Parms IncrementDifficulty_Parms;

	this->ProcessEvent ( pFnIncrementDifficulty, &IncrementDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.SetBossIndex
// [0x00820002] 
// Parameters infos:

void AKFGameInfo_Endless::SetBossIndex ( )
{
	static UFunction* pFnSetBossIndex = NULL;

	if ( ! pFnSetBossIndex )
		pFnSetBossIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.SetBossIndex" );

	AKFGameInfo_Endless_execSetBossIndex_Parms SetBossIndex_Parms;

	this->ProcessEvent ( pFnSetBossIndex, &SetBossIndex_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.BossDied
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_Endless::BossDied ( )
{
	static UFunction* pFnBossDied = NULL;

	if ( ! pFnBossDied )
		pFnBossDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.BossDied" );

	AKFGameInfo_Endless_execBossDied_Parms BossDied_Parms;

	this->ProcessEvent ( pFnBossDied, &BossDied_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.HellOnEarthPlusRoundIncrement
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::HellOnEarthPlusRoundIncrement ( )
{
	static UFunction* pFnHellOnEarthPlusRoundIncrement = NULL;

	if ( ! pFnHellOnEarthPlusRoundIncrement )
		pFnHellOnEarthPlusRoundIncrement = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.HellOnEarthPlusRoundIncrement" );

	AKFGameInfo_Endless_execHellOnEarthPlusRoundIncrement_Parms HellOnEarthPlusRoundIncrement_Parms;

	this->ProcessEvent ( pFnHellOnEarthPlusRoundIncrement, &HellOnEarthPlusRoundIncrement_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.WaveEnded
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::WaveEnded ( )
{
	static UFunction* pFnWaveEnded = NULL;

	if ( ! pFnWaveEnded )
		pFnWaveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.WaveEnded" );

	AKFGameInfo_Endless_execWaveEnded_Parms WaveEnded_Parms;

	this->ProcessEvent ( pFnWaveEnded, &WaveEnded_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.TrySetNextWaveSpecial
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::TrySetNextWaveSpecial ( )
{
	static UFunction* pFnTrySetNextWaveSpecial = NULL;

	if ( ! pFnTrySetNextWaveSpecial )
		pFnTrySetNextWaveSpecial = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.TrySetNextWaveSpecial" );

	AKFGameInfo_Endless_execTrySetNextWaveSpecial_Parms TrySetNextWaveSpecial_Parms;

	this->ProcessEvent ( pFnTrySetNextWaveSpecial, &TrySetNextWaveSpecial_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.PlayWaveStartDialog
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Endless::PlayWaveStartDialog ( )
{
	static UFunction* pFnPlayWaveStartDialog = NULL;

	if ( ! pFnPlayWaveStartDialog )
		pFnPlayWaveStartDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.PlayWaveStartDialog" );

	AKFGameInfo_Endless_execPlayWaveStartDialog_Parms PlayWaveStartDialog_Parms;

	this->ProcessEvent ( pFnPlayWaveStartDialog, &PlayWaveStartDialog_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.GetWaveStartMessage
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::GetWaveStartMessage ( )
{
	static UFunction* pFnGetWaveStartMessage = NULL;

	if ( ! pFnGetWaveStartMessage )
		pFnGetWaveStartMessage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.GetWaveStartMessage" );

	AKFGameInfo_Endless_execGetWaveStartMessage_Parms GetWaveStartMessage_Parms;

	this->ProcessEvent ( pFnGetWaveStartMessage, &GetWaveStartMessage_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.WaveStarted
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::WaveStarted ( )
{
	static UFunction* pFnWaveStarted = NULL;

	if ( ! pFnWaveStarted )
		pFnWaveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.WaveStarted" );

	AKFGameInfo_Endless_execWaveStarted_Parms WaveStarted_Parms;

	this->ProcessEvent ( pFnWaveStarted, &WaveStarted_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.GetShouldShowLength
// [0x00022002] 
// Parameters infos:

void AKFGameInfo_Endless::GetShouldShowLength ( )
{
	static UFunction* pFnGetShouldShowLength = NULL;

	if ( ! pFnGetShouldShowLength )
		pFnGetShouldShowLength = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.GetShouldShowLength" );

	AKFGameInfo_Endless_execGetShouldShowLength_Parms GetShouldShowLength_Parms;

	this->ProcessEvent ( pFnGetShouldShowLength, &GetShouldShowLength_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.ResetDifficulty
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::ResetDifficulty ( )
{
	static UFunction* pFnResetDifficulty = NULL;

	if ( ! pFnResetDifficulty )
		pFnResetDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.ResetDifficulty" );

	AKFGameInfo_Endless_execResetDifficulty_Parms ResetDifficulty_Parms;

	this->ProcessEvent ( pFnResetDifficulty, &ResetDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.InitSpawnManager
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Endless::InitSpawnManager ( )
{
	static UFunction* pFnInitSpawnManager = NULL;

	if ( ! pFnInitSpawnManager )
		pFnInitSpawnManager = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.InitSpawnManager" );

	AKFGameInfo_Endless_execInitSpawnManager_Parms InitSpawnManager_Parms;

	this->ProcessEvent ( pFnInitSpawnManager, &InitSpawnManager_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Endless::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.PostBeginPlay" );

	AKFGameInfo_Endless_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Endless.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Endless::eventInitGame ( )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Endless.InitGame" );

	AKFGameInfo_Endless_eventInitGame_Parms InitGame_Parms;

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.DebugKillZeds
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::DebugKillZeds ( )
{
	static UFunction* pFnDebugKillZeds = NULL;

	if ( ! pFnDebugKillZeds )
		pFnDebugKillZeds = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.DebugKillZeds" );

	AKFGameInfo_Survival_execDebugKillZeds_Parms DebugKillZeds_Parms;

	this->ProcessEvent ( pFnDebugKillZeds, &DebugKillZeds_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.TryRestartGame
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::TryRestartGame ( )
{
	static UFunction* pFnTryRestartGame = NULL;

	if ( ! pFnTryRestartGame )
		pFnTryRestartGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.TryRestartGame" );

	AKFGameInfo_Survival_execTryRestartGame_Parms TryRestartGame_Parms;

	this->ProcessEvent ( pFnTryRestartGame, &TryRestartGame_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.UpdateCurrentMapVoteTime
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_Survival::UpdateCurrentMapVoteTime ( )
{
	static UFunction* pFnUpdateCurrentMapVoteTime = NULL;

	if ( ! pFnUpdateCurrentMapVoteTime )
		pFnUpdateCurrentMapVoteTime = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.UpdateCurrentMapVoteTime" );

	AKFGameInfo_Survival_execUpdateCurrentMapVoteTime_Parms UpdateCurrentMapVoteTime_Parms;

	this->ProcessEvent ( pFnUpdateCurrentMapVoteTime, &UpdateCurrentMapVoteTime_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ProcessAwards
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::ProcessAwards ( )
{
	static UFunction* pFnProcessAwards = NULL;

	if ( ! pFnProcessAwards )
		pFnProcessAwards = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ProcessAwards" );

	AKFGameInfo_Survival_execProcessAwards_Parms ProcessAwards_Parms;

	this->ProcessEvent ( pFnProcessAwards, &ProcessAwards_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.GetEndOfMatchTime
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::GetEndOfMatchTime ( )
{
	static UFunction* pFnGetEndOfMatchTime = NULL;

	if ( ! pFnGetEndOfMatchTime )
		pFnGetEndOfMatchTime = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.GetEndOfMatchTime" );

	AKFGameInfo_Survival_execGetEndOfMatchTime_Parms GetEndOfMatchTime_Parms;

	this->ProcessEvent ( pFnGetEndOfMatchTime, &GetEndOfMatchTime_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ShowPostGameMenu
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::ShowPostGameMenu ( )
{
	static UFunction* pFnShowPostGameMenu = NULL;

	if ( ! pFnShowPostGameMenu )
		pFnShowPostGameMenu = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ShowPostGameMenu" );

	AKFGameInfo_Survival_execShowPostGameMenu_Parms ShowPostGameMenu_Parms;

	this->ProcessEvent ( pFnShowPostGameMenu, &ShowPostGameMenu_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.SetZedsToVictoryState
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::SetZedsToVictoryState ( )
{
	static UFunction* pFnSetZedsToVictoryState = NULL;

	if ( ! pFnSetZedsToVictoryState )
		pFnSetZedsToVictoryState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.SetZedsToVictoryState" );

	AKFGameInfo_Survival_execSetZedsToVictoryState_Parms SetZedsToVictoryState_Parms;

	this->ProcessEvent ( pFnSetZedsToVictoryState, &SetZedsToVictoryState_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.SetWonGameCamera
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::SetWonGameCamera ( )
{
	static UFunction* pFnSetWonGameCamera = NULL;

	if ( ! pFnSetWonGameCamera )
		pFnSetWonGameCamera = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.SetWonGameCamera" );

	AKFGameInfo_Survival_execSetWonGameCamera_Parms SetWonGameCamera_Parms;

	this->ProcessEvent ( pFnSetWonGameCamera, &SetWonGameCamera_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.GetNextMap
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::GetNextMap ( )
{
	static UFunction* pFnGetNextMap = NULL;

	if ( ! pFnGetNextMap )
		pFnGetNextMap = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.GetNextMap" );

	AKFGameInfo_Survival_execGetNextMap_Parms GetNextMap_Parms;

	this->ProcessEvent ( pFnGetNextMap, &GetNextMap_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.EndOfMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::EndOfMatch ( )
{
	static UFunction* pFnEndOfMatch = NULL;

	if ( ! pFnEndOfMatch )
		pFnEndOfMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.EndOfMatch" );

	AKFGameInfo_Survival_execEndOfMatch_Parms EndOfMatch_Parms;

	this->ProcessEvent ( pFnEndOfMatch, &EndOfMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.RestartGame
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::RestartGame ( )
{
	static UFunction* pFnRestartGame = NULL;

	if ( ! pFnRestartGame )
		pFnRestartGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.RestartGame" );

	AKFGameInfo_Survival_execRestartGame_Parms RestartGame_Parms;

	this->ProcessEvent ( pFnRestartGame, &RestartGame_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.NotifyTraderOpened
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::NotifyTraderOpened ( )
{
	static UFunction* pFnNotifyTraderOpened = NULL;

	if ( ! pFnNotifyTraderOpened )
		pFnNotifyTraderOpened = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.NotifyTraderOpened" );

	AKFGameInfo_Survival_execNotifyTraderOpened_Parms NotifyTraderOpened_Parms;

	this->ProcessEvent ( pFnNotifyTraderOpened, &NotifyTraderOpened_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.OpenTrader
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::OpenTrader ( )
{
	static UFunction* pFnOpenTrader = NULL;

	if ( ! pFnOpenTrader )
		pFnOpenTrader = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.OpenTrader" );

	AKFGameInfo_Survival_execOpenTrader_Parms OpenTrader_Parms;

	this->ProcessEvent ( pFnOpenTrader, &OpenTrader_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.DoTraderTimeCleanup
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Survival::DoTraderTimeCleanup ( )
{
	static UFunction* pFnDoTraderTimeCleanup = NULL;

	if ( ! pFnDoTraderTimeCleanup )
		pFnDoTraderTimeCleanup = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.DoTraderTimeCleanup" );

	AKFGameInfo_Survival_execDoTraderTimeCleanup_Parms DoTraderTimeCleanup_Parms;

	this->ProcessEvent ( pFnDoTraderTimeCleanup, &DoTraderTimeCleanup_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.SkipTrader
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::SkipTrader ( )
{
	static UFunction* pFnSkipTrader = NULL;

	if ( ! pFnSkipTrader )
		pFnSkipTrader = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.SkipTrader" );

	AKFGameInfo_Survival_execSkipTrader_Parms SkipTrader_Parms;

	this->ProcessEvent ( pFnSkipTrader, &SkipTrader_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.CloseTraderTimer
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Survival::CloseTraderTimer ( )
{
	static UFunction* pFnCloseTraderTimer = NULL;

	if ( ! pFnCloseTraderTimer )
		pFnCloseTraderTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.CloseTraderTimer" );

	AKFGameInfo_Survival_execCloseTraderTimer_Parms CloseTraderTimer_Parms;

	this->ProcessEvent ( pFnCloseTraderTimer, &CloseTraderTimer_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.LogWaveEndAnalyticsFor
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::LogWaveEndAnalyticsFor ( )
{
	static UFunction* pFnLogWaveEndAnalyticsFor = NULL;

	if ( ! pFnLogWaveEndAnalyticsFor )
		pFnLogWaveEndAnalyticsFor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.LogWaveEndAnalyticsFor" );

	AKFGameInfo_Survival_execLogWaveEndAnalyticsFor_Parms LogWaveEndAnalyticsFor_Parms;

	this->ProcessEvent ( pFnLogWaveEndAnalyticsFor, &LogWaveEndAnalyticsFor_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.Timer_FinalizeEndOfWaveStats
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::Timer_FinalizeEndOfWaveStats ( )
{
	static UFunction* pFnTimer_FinalizeEndOfWaveStats = NULL;

	if ( ! pFnTimer_FinalizeEndOfWaveStats )
		pFnTimer_FinalizeEndOfWaveStats = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.Timer_FinalizeEndOfWaveStats" );

	AKFGameInfo_Survival_execTimer_FinalizeEndOfWaveStats_Parms Timer_FinalizeEndOfWaveStats_Parms;

	this->ProcessEvent ( pFnTimer_FinalizeEndOfWaveStats, &Timer_FinalizeEndOfWaveStats_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.WaveEnded
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::WaveEnded ( )
{
	static UFunction* pFnWaveEnded = NULL;

	if ( ! pFnWaveEnded )
		pFnWaveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.WaveEnded" );

	AKFGameInfo_Survival_execWaveEnded_Parms WaveEnded_Parms;

	this->ProcessEvent ( pFnWaveEnded, &WaveEnded_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ObjectiveFailed
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::ObjectiveFailed ( )
{
	static UFunction* pFnObjectiveFailed = NULL;

	if ( ! pFnObjectiveFailed )
		pFnObjectiveFailed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ObjectiveFailed" );

	AKFGameInfo_Survival_execObjectiveFailed_Parms ObjectiveFailed_Parms;

	this->ProcessEvent ( pFnObjectiveFailed, &ObjectiveFailed_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.CheckWaveEnd
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_Survival::CheckWaveEnd ( )
{
	static UFunction* pFnCheckWaveEnd = NULL;

	if ( ! pFnCheckWaveEnd )
		pFnCheckWaveEnd = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.CheckWaveEnd" );

	AKFGameInfo_Survival_execCheckWaveEnd_Parms CheckWaveEnd_Parms;

	this->ProcessEvent ( pFnCheckWaveEnd, &CheckWaveEnd_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.WaveStarted
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::WaveStarted ( )
{
	static UFunction* pFnWaveStarted = NULL;

	if ( ! pFnWaveStarted )
		pFnWaveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.WaveStarted" );

	AKFGameInfo_Survival_execWaveStarted_Parms WaveStarted_Parms;

	this->ProcessEvent ( pFnWaveStarted, &WaveStarted_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.DetermineNextTraderIndex
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::DetermineNextTraderIndex ( )
{
	static UFunction* pFnDetermineNextTraderIndex = NULL;

	if ( ! pFnDetermineNextTraderIndex )
		pFnDetermineNextTraderIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.DetermineNextTraderIndex" );

	AKFGameInfo_Survival_execDetermineNextTraderIndex_Parms DetermineNextTraderIndex_Parms;

	this->ProcessEvent ( pFnDetermineNextTraderIndex, &DetermineNextTraderIndex_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.SetupNextTrader
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::SetupNextTrader ( )
{
	static UFunction* pFnSetupNextTrader = NULL;

	if ( ! pFnSetupNextTrader )
		pFnSetupNextTrader = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.SetupNextTrader" );

	AKFGameInfo_Survival_execSetupNextTrader_Parms SetupNextTrader_Parms;

	this->ProcessEvent ( pFnSetupNextTrader, &SetupNextTrader_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ResetPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::ResetPickups ( )
{
	static UFunction* pFnResetPickups = NULL;

	if ( ! pFnResetPickups )
		pFnResetPickups = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ResetPickups" );

	AKFGameInfo_Survival_execResetPickups_Parms ResetPickups_Parms;

	this->ProcessEvent ( pFnResetPickups, &ResetPickups_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ResetAllPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::ResetAllPickups ( )
{
	static UFunction* pFnResetAllPickups = NULL;

	if ( ! pFnResetAllPickups )
		pFnResetAllPickups = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ResetAllPickups" );

	AKFGameInfo_Survival_execResetAllPickups_Parms ResetAllPickups_Parms;

	this->ProcessEvent ( pFnResetAllPickups, &ResetAllPickups_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.GetWaveStartMessage
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::GetWaveStartMessage ( )
{
	static UFunction* pFnGetWaveStartMessage = NULL;

	if ( ! pFnGetWaveStartMessage )
		pFnGetWaveStartMessage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.GetWaveStartMessage" );

	AKFGameInfo_Survival_execGetWaveStartMessage_Parms GetWaveStartMessage_Parms;

	this->ProcessEvent ( pFnGetWaveStartMessage, &GetWaveStartMessage_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.IsMapObjectiveEnabled
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::IsMapObjectiveEnabled ( )
{
	static UFunction* pFnIsMapObjectiveEnabled = NULL;

	if ( ! pFnIsMapObjectiveEnabled )
		pFnIsMapObjectiveEnabled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.IsMapObjectiveEnabled" );

	AKFGameInfo_Survival_execIsMapObjectiveEnabled_Parms IsMapObjectiveEnabled_Parms;

	this->ProcessEvent ( pFnIsMapObjectiveEnabled, &IsMapObjectiveEnabled_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.StartWave
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::StartWave ( )
{
	static UFunction* pFnStartWave = NULL;

	if ( ! pFnStartWave )
		pFnStartWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.StartWave" );

	AKFGameInfo_Survival_execStartWave_Parms StartWave_Parms;

	this->ProcessEvent ( pFnStartWave, &StartWave_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.IsWaveActive
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Survival::IsWaveActive ( )
{
	static UFunction* pFnIsWaveActive = NULL;

	if ( ! pFnIsWaveActive )
		pFnIsWaveActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.IsWaveActive" );

	AKFGameInfo_Survival_execIsWaveActive_Parms IsWaveActive_Parms;

	this->ProcessEvent ( pFnIsWaveActive, &IsWaveActive_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.WinMatch
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo_Survival::WinMatch ( )
{
	static UFunction* pFnWinMatch = NULL;

	if ( ! pFnWinMatch )
		pFnWinMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.WinMatch" );

	AKFGameInfo_Survival_execWinMatch_Parms WinMatch_Parms;

	this->ProcessEvent ( pFnWinMatch, &WinMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.SetWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo_Survival::SetWave ( )
{
	static UFunction* pFnSetWave = NULL;

	if ( ! pFnSetWave )
		pFnSetWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.SetWave" );

	AKFGameInfo_Survival_execSetWave_Parms SetWave_Parms;

	this->ProcessEvent ( pFnSetWave, &SetWave_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.EndCurrentWave
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo_Survival::EndCurrentWave ( )
{
	static UFunction* pFnEndCurrentWave = NULL;

	if ( ! pFnEndCurrentWave )
		pFnEndCurrentWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.EndCurrentWave" );

	AKFGameInfo_Survival_execEndCurrentWave_Parms EndCurrentWave_Parms;

	this->ProcessEvent ( pFnEndCurrentWave, &EndCurrentWave_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ToggleSpawning
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFGameInfo_Survival::ToggleSpawning ( )
{
	static UFunction* pFnToggleSpawning = NULL;

	if ( ! pFnToggleSpawning )
		pFnToggleSpawning = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ToggleSpawning" );

	AKFGameInfo_Survival_execToggleSpawning_Parms ToggleSpawning_Parms;

	this->ProcessEvent ( pFnToggleSpawning, &ToggleSpawning_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.FindCollectibles
// [0x00020000] 
// Parameters infos:

void AKFGameInfo_Survival::FindCollectibles ( )
{
	static UFunction* pFnFindCollectibles = NULL;

	if ( ! pFnFindCollectibles )
		pFnFindCollectibles = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.FindCollectibles" );

	AKFGameInfo_Survival_execFindCollectibles_Parms FindCollectibles_Parms;

	this->ProcessEvent ( pFnFindCollectibles, &FindCollectibles_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.AllowWaveCheats
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::AllowWaveCheats ( )
{
	static UFunction* pFnAllowWaveCheats = NULL;

	if ( ! pFnAllowWaveCheats )
		pFnAllowWaveCheats = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.AllowWaveCheats" );

	AKFGameInfo_Survival_execAllowWaveCheats_Parms AllowWaveCheats_Parms;

	this->ProcessEvent ( pFnAllowWaveCheats, &AllowWaveCheats_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.CalculateLateJoinerStartingDosh
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::CalculateLateJoinerStartingDosh ( )
{
	static UFunction* pFnCalculateLateJoinerStartingDosh = NULL;

	if ( ! pFnCalculateLateJoinerStartingDosh )
		pFnCalculateLateJoinerStartingDosh = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.CalculateLateJoinerStartingDosh" );

	AKFGameInfo_Survival_execCalculateLateJoinerStartingDosh_Parms CalculateLateJoinerStartingDosh_Parms;

	this->ProcessEvent ( pFnCalculateLateJoinerStartingDosh, &CalculateLateJoinerStartingDosh_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.GetAdjustedDeathPenalty
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_Survival::GetAdjustedDeathPenalty ( )
{
	static UFunction* pFnGetAdjustedDeathPenalty = NULL;

	if ( ! pFnGetAdjustedDeathPenalty )
		pFnGetAdjustedDeathPenalty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.GetAdjustedDeathPenalty" );

	AKFGameInfo_Survival_execGetAdjustedDeathPenalty_Parms GetAdjustedDeathPenalty_Parms;

	this->ProcessEvent ( pFnGetAdjustedDeathPenalty, &GetAdjustedDeathPenalty_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.CalculateMinimumRespawnDosh
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::CalculateMinimumRespawnDosh ( )
{
	static UFunction* pFnCalculateMinimumRespawnDosh = NULL;

	if ( ! pFnCalculateMinimumRespawnDosh )
		pFnCalculateMinimumRespawnDosh = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.CalculateMinimumRespawnDosh" );

	AKFGameInfo_Survival_execCalculateMinimumRespawnDosh_Parms CalculateMinimumRespawnDosh_Parms;

	this->ProcessEvent ( pFnCalculateMinimumRespawnDosh, &CalculateMinimumRespawnDosh_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.RewardSurvivingPlayers
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::RewardSurvivingPlayers ( )
{
	static UFunction* pFnRewardSurvivingPlayers = NULL;

	if ( ! pFnRewardSurvivingPlayers )
		pFnRewardSurvivingPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.RewardSurvivingPlayers" );

	AKFGameInfo_Survival_execRewardSurvivingPlayers_Parms RewardSurvivingPlayers_Parms;

	this->ProcessEvent ( pFnRewardSurvivingPlayers, &RewardSurvivingPlayers_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.UpdateWaveEndDialogInfo
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::UpdateWaveEndDialogInfo ( )
{
	static UFunction* pFnUpdateWaveEndDialogInfo = NULL;

	if ( ! pFnUpdateWaveEndDialogInfo )
		pFnUpdateWaveEndDialogInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.UpdateWaveEndDialogInfo" );

	AKFGameInfo_Survival_execUpdateWaveEndDialogInfo_Parms UpdateWaveEndDialogInfo_Parms;

	this->ProcessEvent ( pFnUpdateWaveEndDialogInfo, &UpdateWaveEndDialogInfo_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.IsMultiplayerGame
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::IsMultiplayerGame ( )
{
	static UFunction* pFnIsMultiplayerGame = NULL;

	if ( ! pFnIsMultiplayerGame )
		pFnIsMultiplayerGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.IsMultiplayerGame" );

	AKFGameInfo_Survival_execIsMultiplayerGame_Parms IsMultiplayerGame_Parms;

	this->ProcessEvent ( pFnIsMultiplayerGame, &IsMultiplayerGame_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.Timer
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Survival::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.Timer" );

	AKFGameInfo_Survival_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.CanSpectate
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::CanSpectate ( )
{
	static UFunction* pFnCanSpectate = NULL;

	if ( ! pFnCanSpectate )
		pFnCanSpectate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.CanSpectate" );

	AKFGameInfo_Survival_execCanSpectate_Parms CanSpectate_Parms;

	this->ProcessEvent ( pFnCanSpectate, &CanSpectate_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.OnServerTitleDataRead
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::OnServerTitleDataRead ( )
{
	static UFunction* pFnOnServerTitleDataRead = NULL;

	if ( ! pFnOnServerTitleDataRead )
		pFnOnServerTitleDataRead = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.OnServerTitleDataRead" );

	AKFGameInfo_Survival_execOnServerTitleDataRead_Parms OnServerTitleDataRead_Parms;

	this->ProcessEvent ( pFnOnServerTitleDataRead, &OnServerTitleDataRead_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.UpdateGameSettings
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::UpdateGameSettings ( )
{
	static UFunction* pFnUpdateGameSettings = NULL;

	if ( ! pFnUpdateGameSettings )
		pFnUpdateGameSettings = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.UpdateGameSettings" );

	AKFGameInfo_Survival_execUpdateGameSettings_Parms UpdateGameSettings_Parms;

	this->ProcessEvent ( pFnUpdateGameSettings, &UpdateGameSettings_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.BossDied
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_Survival::BossDied ( )
{
	static UFunction* pFnBossDied = NULL;

	if ( ! pFnBossDied )
		pFnBossDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.BossDied" );

	AKFGameInfo_Survival_execBossDied_Parms BossDied_Parms;

	this->ProcessEvent ( pFnBossDied, &BossDied_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ReduceDamage
// [0x00420002] 
// Parameters infos:

void AKFGameInfo_Survival::ReduceDamage ( )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ReduceDamage" );

	AKFGameInfo_Survival_execReduceDamage_Parms ReduceDamage_Parms;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.Killed
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::Killed ( )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.Killed" );

	AKFGameInfo_Survival_execKilled_Parms Killed_Parms;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.RestartPlayer
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.RestartPlayer" );

	AKFGameInfo_Survival_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.PlayerCanRestart
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::PlayerCanRestart ( )
{
	static UFunction* pFnPlayerCanRestart = NULL;

	if ( ! pFnPlayerCanRestart )
		pFnPlayerCanRestart = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.PlayerCanRestart" );

	AKFGameInfo_Survival_execPlayerCanRestart_Parms PlayerCanRestart_Parms;

	this->ProcessEvent ( pFnPlayerCanRestart, &PlayerCanRestart_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.IsPlayerReady
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::IsPlayerReady ( )
{
	static UFunction* pFnIsPlayerReady = NULL;

	if ( ! pFnIsPlayerReady )
		pFnIsPlayerReady = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.IsPlayerReady" );

	AKFGameInfo_Survival_execIsPlayerReady_Parms IsPlayerReady_Parms;

	this->ProcessEvent ( pFnIsPlayerReady, &IsPlayerReady_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.GetGameIntensityForMusic
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::GetGameIntensityForMusic ( )
{
	static UFunction* pFnGetGameIntensityForMusic = NULL;

	if ( ! pFnGetGameIntensityForMusic )
		pFnGetGameIntensityForMusic = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.GetGameIntensityForMusic" );

	AKFGameInfo_Survival_execGetGameIntensityForMusic_Parms GetGameIntensityForMusic_Parms;

	this->ProcessEvent ( pFnGetGameIntensityForMusic, &GetGameIntensityForMusic_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.PlayWaveStartDialog
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::PlayWaveStartDialog ( )
{
	static UFunction* pFnPlayWaveStartDialog = NULL;

	if ( ! pFnPlayWaveStartDialog )
		pFnPlayWaveStartDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.PlayWaveStartDialog" );

	AKFGameInfo_Survival_execPlayWaveStartDialog_Parms PlayWaveStartDialog_Parms;

	this->ProcessEvent ( pFnPlayWaveStartDialog, &PlayWaveStartDialog_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.StartMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.StartMatch" );

	AKFGameInfo_Survival_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.InitSpawnManager
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Survival::InitSpawnManager ( )
{
	static UFunction* pFnInitSpawnManager = NULL;

	if ( ! pFnInitSpawnManager )
		pFnInitSpawnManager = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.InitSpawnManager" );

	AKFGameInfo_Survival_execInitSpawnManager_Parms InitSpawnManager_Parms;

	this->ProcessEvent ( pFnInitSpawnManager, &InitSpawnManager_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Survival::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.PostBeginPlay" );

	AKFGameInfo_Survival_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Survival::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.PreBeginPlay" );

	AKFGameInfo_Survival_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ShouldPlayActionMusicTrack
// [0x00022002] 
// Parameters infos:

void AKFGameInfo_Survival::ShouldPlayActionMusicTrack ( )
{
	static UFunction* pFnShouldPlayActionMusicTrack = NULL;

	if ( ! pFnShouldPlayActionMusicTrack )
		pFnShouldPlayActionMusicTrack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ShouldPlayActionMusicTrack" );

	AKFGameInfo_Survival_execShouldPlayActionMusicTrack_Parms ShouldPlayActionMusicTrack_Parms;

	this->ProcessEvent ( pFnShouldPlayActionMusicTrack, &ShouldPlayActionMusicTrack_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Survival.ShouldPlayMusicAtStart
// [0x00022002] 
// Parameters infos:

void AKFGameInfo_Survival::ShouldPlayMusicAtStart ( )
{
	static UFunction* pFnShouldPlayMusicAtStart = NULL;

	if ( ! pFnShouldPlayMusicAtStart )
		pFnShouldPlayMusicAtStart = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Survival.ShouldPlayMusicAtStart" );

	AKFGameInfo_Survival_execShouldPlayMusicAtStart_Parms ShouldPlayMusicAtStart_Parms;

	this->ProcessEvent ( pFnShouldPlayMusicAtStart, &ShouldPlayMusicAtStart_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.ShouldSpawnEnraged
// [0x00820002] 
// Parameters infos:

void UKFGameDifficulty_Endless::ShouldSpawnEnraged ( )
{
	static UFunction* pFnShouldSpawnEnraged = NULL;

	if ( ! pFnShouldSpawnEnraged )
		pFnShouldSpawnEnraged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.ShouldSpawnEnraged" );

	UKFGameDifficulty_Endless_execShouldSpawnEnraged_Parms ShouldSpawnEnraged_Parms;

	this->ProcessEvent ( pFnShouldSpawnEnraged, &ShouldSpawnEnraged_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetCurrentDifficultyIndex
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetCurrentDifficultyIndex ( )
{
	static UFunction* pFnGetCurrentDifficultyIndex = NULL;

	if ( ! pFnGetCurrentDifficultyIndex )
		pFnGetCurrentDifficultyIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetCurrentDifficultyIndex" );

	UKFGameDifficulty_Endless_execGetCurrentDifficultyIndex_Parms GetCurrentDifficultyIndex_Parms;

	this->ProcessEvent ( pFnGetCurrentDifficultyIndex, &GetCurrentDifficultyIndex_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetCharSprintWhenDamagedChanceByDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetCharSprintWhenDamagedChanceByDifficulty ( )
{
	static UFunction* pFnGetCharSprintWhenDamagedChanceByDifficulty = NULL;

	if ( ! pFnGetCharSprintWhenDamagedChanceByDifficulty )
		pFnGetCharSprintWhenDamagedChanceByDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetCharSprintWhenDamagedChanceByDifficulty" );

	UKFGameDifficulty_Endless_execGetCharSprintWhenDamagedChanceByDifficulty_Parms GetCharSprintWhenDamagedChanceByDifficulty_Parms;

	this->ProcessEvent ( pFnGetCharSprintWhenDamagedChanceByDifficulty, &GetCharSprintWhenDamagedChanceByDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetCharSprintChanceByDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetCharSprintChanceByDifficulty ( )
{
	static UFunction* pFnGetCharSprintChanceByDifficulty = NULL;

	if ( ! pFnGetCharSprintChanceByDifficulty )
		pFnGetCharSprintChanceByDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetCharSprintChanceByDifficulty" );

	UKFGameDifficulty_Endless_execGetCharSprintChanceByDifficulty_Parms GetCharSprintChanceByDifficulty_Parms;

	this->ProcessEvent ( pFnGetCharSprintChanceByDifficulty, &GetCharSprintChanceByDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetCharHeadHealthModDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetCharHeadHealthModDifficulty ( )
{
	static UFunction* pFnGetCharHeadHealthModDifficulty = NULL;

	if ( ! pFnGetCharHeadHealthModDifficulty )
		pFnGetCharHeadHealthModDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetCharHeadHealthModDifficulty" );

	UKFGameDifficulty_Endless_execGetCharHeadHealthModDifficulty_Parms GetCharHeadHealthModDifficulty_Parms;

	this->ProcessEvent ( pFnGetCharHeadHealthModDifficulty, &GetCharHeadHealthModDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetCharHealthModDifficulty
// [0x00820002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetCharHealthModDifficulty ( )
{
	static UFunction* pFnGetCharHealthModDifficulty = NULL;

	if ( ! pFnGetCharHealthModDifficulty )
		pFnGetCharHealthModDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetCharHealthModDifficulty" );

	UKFGameDifficulty_Endless_execGetCharHealthModDifficulty_Parms GetCharHealthModDifficulty_Parms;

	this->ProcessEvent ( pFnGetCharHealthModDifficulty, &GetCharHealthModDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetAIHealthModifier
// [0x00C24002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetAIHealthModifier ( )
{
	static UFunction* pFnGetAIHealthModifier = NULL;

	if ( ! pFnGetAIHealthModifier )
		pFnGetAIHealthModifier = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetAIHealthModifier" );

	UKFGameDifficulty_Endless_execGetAIHealthModifier_Parms GetAIHealthModifier_Parms;

	this->ProcessEvent ( pFnGetAIHealthModifier, &GetAIHealthModifier_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetAIDamageModifier
// [0x00820002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetAIDamageModifier ( )
{
	static UFunction* pFnGetAIDamageModifier = NULL;

	if ( ! pFnGetAIDamageModifier )
		pFnGetAIDamageModifier = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetAIDamageModifier" );

	UKFGameDifficulty_Endless_execGetAIDamageModifier_Parms GetAIDamageModifier_Parms;

	this->ProcessEvent ( pFnGetAIDamageModifier, &GetAIDamageModifier_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetSpecialWaveSpawnRateMod
// [0x00820002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetSpecialWaveSpawnRateMod ( )
{
	static UFunction* pFnGetSpecialWaveSpawnRateMod = NULL;

	if ( ! pFnGetSpecialWaveSpawnRateMod )
		pFnGetSpecialWaveSpawnRateMod = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetSpecialWaveSpawnRateMod" );

	UKFGameDifficulty_Endless_execGetSpecialWaveSpawnRateMod_Parms GetSpecialWaveSpawnRateMod_Parms;

	this->ProcessEvent ( pFnGetSpecialWaveSpawnRateMod, &GetSpecialWaveSpawnRateMod_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetSpecialWaveScale
// [0x00820002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetSpecialWaveScale ( )
{
	static UFunction* pFnGetSpecialWaveScale = NULL;

	if ( ! pFnGetSpecialWaveScale )
		pFnGetSpecialWaveScale = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetSpecialWaveScale" );

	UKFGameDifficulty_Endless_execGetSpecialWaveScale_Parms GetSpecialWaveScale_Parms;

	this->ProcessEvent ( pFnGetSpecialWaveScale, &GetSpecialWaveScale_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetSpecialWaveModifiers
// [0x00C20002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetSpecialWaveModifiers ( )
{
	static UFunction* pFnGetSpecialWaveModifiers = NULL;

	if ( ! pFnGetSpecialWaveModifiers )
		pFnGetSpecialWaveModifiers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetSpecialWaveModifiers" );

	UKFGameDifficulty_Endless_execGetSpecialWaveModifiers_Parms GetSpecialWaveModifiers_Parms;

	this->ProcessEvent ( pFnGetSpecialWaveModifiers, &GetSpecialWaveModifiers_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetSpecialWaveType
// [0x00820002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetSpecialWaveType ( )
{
	static UFunction* pFnGetSpecialWaveType = NULL;

	if ( ! pFnGetSpecialWaveType )
		pFnGetSpecialWaveType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetSpecialWaveType" );

	UKFGameDifficulty_Endless_execGetSpecialWaveType_Parms GetSpecialWaveType_Parms;

	this->ProcessEvent ( pFnGetSpecialWaveType, &GetSpecialWaveType_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetSpeicalWavePctChance
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetSpeicalWavePctChance ( )
{
	static UFunction* pFnGetSpeicalWavePctChance = NULL;

	if ( ! pFnGetSpeicalWavePctChance )
		pFnGetSpeicalWavePctChance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetSpeicalWavePctChance" );

	UKFGameDifficulty_Endless_execGetSpeicalWavePctChance_Parms GetSpeicalWavePctChance_Parms;

	this->ProcessEvent ( pFnGetSpeicalWavePctChance, &GetSpeicalWavePctChance_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetOutbreakPctChance
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetOutbreakPctChance ( )
{
	static UFunction* pFnGetOutbreakPctChance = NULL;

	if ( ! pFnGetOutbreakPctChance )
		pFnGetOutbreakPctChance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetOutbreakPctChance" );

	UKFGameDifficulty_Endless_execGetOutbreakPctChance_Parms GetOutbreakPctChance_Parms;

	this->ProcessEvent ( pFnGetOutbreakPctChance, &GetOutbreakPctChance_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetZedsOverride
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetZedsOverride ( )
{
	static UFunction* pFnGetZedsOverride = NULL;

	if ( ! pFnGetZedsOverride )
		pFnGetZedsOverride = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetZedsOverride" );

	UKFGameDifficulty_Endless_execGetZedsOverride_Parms GetZedsOverride_Parms;

	this->ProcessEvent ( pFnGetZedsOverride, &GetZedsOverride_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetZedsToAdjust
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetZedsToAdjust ( )
{
	static UFunction* pFnGetZedsToAdjust = NULL;

	if ( ! pFnGetZedsToAdjust )
		pFnGetZedsToAdjust = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetZedsToAdjust" );

	UKFGameDifficulty_Endless_execGetZedsToAdjust_Parms GetZedsToAdjust_Parms;

	this->ProcessEvent ( pFnGetZedsToAdjust, &GetZedsToAdjust_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.ShouldStartHoePlus
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::ShouldStartHoePlus ( )
{
	static UFunction* pFnShouldStartHoePlus = NULL;

	if ( ! pFnShouldStartHoePlus )
		pFnShouldStartHoePlus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.ShouldStartHoePlus" );

	UKFGameDifficulty_Endless_execShouldStartHoePlus_Parms ShouldStartHoePlus_Parms;

	this->ProcessEvent ( pFnShouldStartHoePlus, &ShouldStartHoePlus_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.SetZedFullUpgradeToBase
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::SetZedFullUpgradeToBase ( )
{
	static UFunction* pFnSetZedFullUpgradeToBase = NULL;

	if ( ! pFnSetZedFullUpgradeToBase )
		pFnSetZedFullUpgradeToBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.SetZedFullUpgradeToBase" );

	UKFGameDifficulty_Endless_execSetZedFullUpgradeToBase_Parms SetZedFullUpgradeToBase_Parms;

	this->ProcessEvent ( pFnSetZedFullUpgradeToBase, &SetZedFullUpgradeToBase_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.SetZedUpgradeToBase
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::SetZedUpgradeToBase ( )
{
	static UFunction* pFnSetZedUpgradeToBase = NULL;

	if ( ! pFnSetZedUpgradeToBase )
		pFnSetZedUpgradeToBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.SetZedUpgradeToBase" );

	UKFGameDifficulty_Endless_execSetZedUpgradeToBase_Parms SetZedUpgradeToBase_Parms;

	this->ProcessEvent ( pFnSetZedUpgradeToBase, &SetZedUpgradeToBase_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.IncreaseZedFullUpgradePct
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::IncreaseZedFullUpgradePct ( )
{
	static UFunction* pFnIncreaseZedFullUpgradePct = NULL;

	if ( ! pFnIncreaseZedFullUpgradePct )
		pFnIncreaseZedFullUpgradePct = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.IncreaseZedFullUpgradePct" );

	UKFGameDifficulty_Endless_execIncreaseZedFullUpgradePct_Parms IncreaseZedFullUpgradePct_Parms;

	this->ProcessEvent ( pFnIncreaseZedFullUpgradePct, &IncreaseZedFullUpgradePct_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.IncreaseZedUpgradePct
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::IncreaseZedUpgradePct ( )
{
	static UFunction* pFnIncreaseZedUpgradePct = NULL;

	if ( ! pFnIncreaseZedUpgradePct )
		pFnIncreaseZedUpgradePct = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.IncreaseZedUpgradePct" );

	UKFGameDifficulty_Endless_execIncreaseZedUpgradePct_Parms IncreaseZedUpgradePct_Parms;

	this->ProcessEvent ( pFnIncreaseZedUpgradePct, &IncreaseZedUpgradePct_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetZedFullUpgradePctChance
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetZedFullUpgradePctChance ( )
{
	static UFunction* pFnGetZedFullUpgradePctChance = NULL;

	if ( ! pFnGetZedFullUpgradePctChance )
		pFnGetZedFullUpgradePctChance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetZedFullUpgradePctChance" );

	UKFGameDifficulty_Endless_execGetZedFullUpgradePctChance_Parms GetZedFullUpgradePctChance_Parms;

	this->ProcessEvent ( pFnGetZedFullUpgradePctChance, &GetZedFullUpgradePctChance_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.GetZedUpgradePctChance
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::GetZedUpgradePctChance ( )
{
	static UFunction* pFnGetZedUpgradePctChance = NULL;

	if ( ! pFnGetZedUpgradePctChance )
		pFnGetZedUpgradePctChance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.GetZedUpgradePctChance" );

	UKFGameDifficulty_Endless_execGetZedUpgradePctChance_Parms GetZedUpgradePctChance_Parms;

	this->ProcessEvent ( pFnGetZedUpgradePctChance, &GetZedUpgradePctChance_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.SetDifficultyScaling
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::SetDifficultyScaling ( )
{
	static UFunction* pFnSetDifficultyScaling = NULL;

	if ( ! pFnSetDifficultyScaling )
		pFnSetDifficultyScaling = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.SetDifficultyScaling" );

	UKFGameDifficulty_Endless_execSetDifficultyScaling_Parms SetDifficultyScaling_Parms;

	this->ProcessEvent ( pFnSetDifficultyScaling, &SetDifficultyScaling_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.SetDifficultySettings
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::SetDifficultySettings ( )
{
	static UFunction* pFnSetDifficultySettings = NULL;

	if ( ! pFnSetDifficultySettings )
		pFnSetDifficultySettings = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.SetDifficultySettings" );

	UKFGameDifficulty_Endless_execSetDifficultySettings_Parms SetDifficultySettings_Parms;

	this->ProcessEvent ( pFnSetDifficultySettings, &SetDifficultySettings_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.IncrementDifficulty
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::IncrementDifficulty ( )
{
	static UFunction* pFnIncrementDifficulty = NULL;

	if ( ! pFnIncrementDifficulty )
		pFnIncrementDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.IncrementDifficulty" );

	UKFGameDifficulty_Endless_execIncrementDifficulty_Parms IncrementDifficulty_Parms;

	this->ProcessEvent ( pFnIncrementDifficulty, &IncrementDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.AdjustZedStats
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::AdjustZedStats ( )
{
	static UFunction* pFnAdjustZedStats = NULL;

	if ( ! pFnAdjustZedStats )
		pFnAdjustZedStats = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.AdjustZedStats" );

	UKFGameDifficulty_Endless_execAdjustZedStats_Parms AdjustZedStats_Parms;

	this->ProcessEvent ( pFnAdjustZedStats, &AdjustZedStats_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.AdjustDifficulties
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::AdjustDifficulties ( )
{
	static UFunction* pFnAdjustDifficulties = NULL;

	if ( ! pFnAdjustDifficulties )
		pFnAdjustDifficulties = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.AdjustDifficulties" );

	UKFGameDifficulty_Endless_execAdjustDifficulties_Parms AdjustDifficulties_Parms;

	this->ProcessEvent ( pFnAdjustDifficulties, &AdjustDifficulties_Parms, NULL );
};

// Function kfgamecontent.KFGameDifficulty_Endless.IncrementHoePlus
// [0x00020002] 
// Parameters infos:

void UKFGameDifficulty_Endless::IncrementHoePlus ( )
{
	static UFunction* pFnIncrementHoePlus = NULL;

	if ( ! pFnIncrementHoePlus )
		pFnIncrementHoePlus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameDifficulty_Endless.IncrementHoePlus" );

	UKFGameDifficulty_Endless_execIncrementHoePlus_Parms IncrementHoePlus_Parms;

	this->ProcessEvent ( pFnIncrementHoePlus, &IncrementHoePlus_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.ResetSpawnManager
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::ResetSpawnManager ( )
{
	static UFunction* pFnResetSpawnManager = NULL;

	if ( ! pFnResetSpawnManager )
		pFnResetSpawnManager = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.ResetSpawnManager" );

	UKFAISpawnManager_Versus_execResetSpawnManager_Parms ResetSpawnManager_Parms;

	this->ProcessEvent ( pFnResetSpawnManager, &ResetSpawnManager_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.CanSpawnPlayerBoss
// [0x00080002] 
// Parameters infos:

void UKFAISpawnManager_Versus::CanSpawnPlayerBoss ( )
{
	static UFunction* pFnCanSpawnPlayerBoss = NULL;

	if ( ! pFnCanSpawnPlayerBoss )
		pFnCanSpawnPlayerBoss = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.CanSpawnPlayerBoss" );

	UKFAISpawnManager_Versus_execCanSpawnPlayerBoss_Parms CanSpawnPlayerBoss_Parms;

	this->ProcessEvent ( pFnCanSpawnPlayerBoss, &CanSpawnPlayerBoss_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.GetNumActiveZedsOfClass
// [0x00080002] 
// Parameters infos:

void UKFAISpawnManager_Versus::GetNumActiveZedsOfClass ( )
{
	static UFunction* pFnGetNumActiveZedsOfClass = NULL;

	if ( ! pFnGetNumActiveZedsOfClass )
		pFnGetNumActiveZedsOfClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.GetNumActiveZedsOfClass" );

	UKFAISpawnManager_Versus_execGetNumActiveZedsOfClass_Parms GetNumActiveZedsOfClass_Parms;

	this->ProcessEvent ( pFnGetNumActiveZedsOfClass, &GetNumActiveZedsOfClass_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.GetNumWaitingZedPlayers
// [0x00080002] 
// Parameters infos:

void UKFAISpawnManager_Versus::GetNumWaitingZedPlayers ( )
{
	static UFunction* pFnGetNumWaitingZedPlayers = NULL;

	if ( ! pFnGetNumWaitingZedPlayers )
		pFnGetNumWaitingZedPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.GetNumWaitingZedPlayers" );

	UKFAISpawnManager_Versus_execGetNumWaitingZedPlayers_Parms GetNumWaitingZedPlayers_Parms;

	this->ProcessEvent ( pFnGetNumWaitingZedPlayers, &GetNumWaitingZedPlayers_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.HaveZedPlayers
// [0x00080002] 
// Parameters infos:

void UKFAISpawnManager_Versus::HaveZedPlayers ( )
{
	static UFunction* pFnHaveZedPlayers = NULL;

	if ( ! pFnHaveZedPlayers )
		pFnHaveZedPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.HaveZedPlayers" );

	UKFAISpawnManager_Versus_execHaveZedPlayers_Parms HaveZedPlayers_Parms;

	this->ProcessEvent ( pFnHaveZedPlayers, &HaveZedPlayers_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.IsPlayerZedSpawnAllowed
// [0x00080002] 
// Parameters infos:

void UKFAISpawnManager_Versus::IsPlayerZedSpawnAllowed ( )
{
	static UFunction* pFnIsPlayerZedSpawnAllowed = NULL;

	if ( ! pFnIsPlayerZedSpawnAllowed )
		pFnIsPlayerZedSpawnAllowed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.IsPlayerZedSpawnAllowed" );

	UKFAISpawnManager_Versus_execIsPlayerZedSpawnAllowed_Parms IsPlayerZedSpawnAllowed_Parms;

	this->ProcessEvent ( pFnIsPlayerZedSpawnAllowed, &IsPlayerZedSpawnAllowed_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.RestartPlayerZed
// [0x00820002] 
// Parameters infos:

void UKFAISpawnManager_Versus::RestartPlayerZed ( )
{
	static UFunction* pFnRestartPlayerZed = NULL;

	if ( ! pFnRestartPlayerZed )
		pFnRestartPlayerZed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.RestartPlayerZed" );

	UKFAISpawnManager_Versus_execRestartPlayerZed_Parms RestartPlayerZed_Parms;

	this->ProcessEvent ( pFnRestartPlayerZed, &RestartPlayerZed_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.RecyclePendingZedPawnClass
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::RecyclePendingZedPawnClass ( )
{
	static UFunction* pFnRecyclePendingZedPawnClass = NULL;

	if ( ! pFnRecyclePendingZedPawnClass )
		pFnRecyclePendingZedPawnClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.RecyclePendingZedPawnClass" );

	UKFAISpawnManager_Versus_execRecyclePendingZedPawnClass_Parms RecyclePendingZedPawnClass_Parms;

	this->ProcessEvent ( pFnRecyclePendingZedPawnClass, &RecyclePendingZedPawnClass_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.Timer_SpawnBossPlayerZeds
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::Timer_SpawnBossPlayerZeds ( )
{
	static UFunction* pFnTimer_SpawnBossPlayerZeds = NULL;

	if ( ! pFnTimer_SpawnBossPlayerZeds )
		pFnTimer_SpawnBossPlayerZeds = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.Timer_SpawnBossPlayerZeds" );

	UKFAISpawnManager_Versus_execTimer_SpawnBossPlayerZeds_Parms Timer_SpawnBossPlayerZeds_Parms;

	this->ProcessEvent ( pFnTimer_SpawnBossPlayerZeds, &Timer_SpawnBossPlayerZeds_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.FindTakeoverZed
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::FindTakeoverZed ( )
{
	static UFunction* pFnFindTakeoverZed = NULL;

	if ( ! pFnFindTakeoverZed )
		pFnFindTakeoverZed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.FindTakeoverZed" );

	UKFAISpawnManager_Versus_execFindTakeoverZed_Parms FindTakeoverZed_Parms;

	this->ProcessEvent ( pFnFindTakeoverZed, &FindTakeoverZed_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.SpawnRemainingReservedZeds
// [0x00024002] 
// Parameters infos:

void UKFAISpawnManager_Versus::SpawnRemainingReservedZeds ( )
{
	static UFunction* pFnSpawnRemainingReservedZeds = NULL;

	if ( ! pFnSpawnRemainingReservedZeds )
		pFnSpawnRemainingReservedZeds = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.SpawnRemainingReservedZeds" );

	UKFAISpawnManager_Versus_execSpawnRemainingReservedZeds_Parms SpawnRemainingReservedZeds_Parms;

	this->ProcessEvent ( pFnSpawnRemainingReservedZeds, &SpawnRemainingReservedZeds_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.NeedPlayerSpawnVolume
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::NeedPlayerSpawnVolume ( )
{
	static UFunction* pFnNeedPlayerSpawnVolume = NULL;

	if ( ! pFnNeedPlayerSpawnVolume )
		pFnNeedPlayerSpawnVolume = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.NeedPlayerSpawnVolume" );

	UKFAISpawnManager_Versus_execNeedPlayerSpawnVolume_Parms NeedPlayerSpawnVolume_Parms;

	this->ProcessEvent ( pFnNeedPlayerSpawnVolume, &NeedPlayerSpawnVolume_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.Timer_CheckForZedTakeovers
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::Timer_CheckForZedTakeovers ( )
{
	static UFunction* pFnTimer_CheckForZedTakeovers = NULL;

	if ( ! pFnTimer_CheckForZedTakeovers )
		pFnTimer_CheckForZedTakeovers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.Timer_CheckForZedTakeovers" );

	UKFAISpawnManager_Versus_execTimer_CheckForZedTakeovers_Parms Timer_CheckForZedTakeovers_Parms;

	this->ProcessEvent ( pFnTimer_CheckForZedTakeovers, &Timer_CheckForZedTakeovers_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.CheckForTakeoverTimer
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::CheckForTakeoverTimer ( )
{
	static UFunction* pFnCheckForTakeoverTimer = NULL;

	if ( ! pFnCheckForTakeoverTimer )
		pFnCheckForTakeoverTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.CheckForTakeoverTimer" );

	UKFAISpawnManager_Versus_execCheckForTakeoverTimer_Parms CheckForTakeoverTimer_Parms;

	this->ProcessEvent ( pFnCheckForTakeoverTimer, &CheckForTakeoverTimer_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.RespawnZedHumanPlayers
// [0x00884002] 
// Parameters infos:

void UKFAISpawnManager_Versus::RespawnZedHumanPlayers ( )
{
	static UFunction* pFnRespawnZedHumanPlayers = NULL;

	if ( ! pFnRespawnZedHumanPlayers )
		pFnRespawnZedHumanPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.RespawnZedHumanPlayers" );

	UKFAISpawnManager_Versus_execRespawnZedHumanPlayers_Parms RespawnZedHumanPlayers_Parms;

	this->ProcessEvent ( pFnRespawnZedHumanPlayers, &RespawnZedHumanPlayers_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.GetSpawnLocation
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::GetSpawnLocation ( )
{
	static UFunction* pFnGetSpawnLocation = NULL;

	if ( ! pFnGetSpawnLocation )
		pFnGetSpawnLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.GetSpawnLocation" );

	UKFAISpawnManager_Versus_execGetSpawnLocation_Parms GetSpawnLocation_Parms;

	this->ProcessEvent ( pFnGetSpawnLocation, &GetSpawnLocation_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.ReserveStrongZedsForPlayers
// [0x00420002] 
// Parameters infos:

void UKFAISpawnManager_Versus::ReserveStrongZedsForPlayers ( )
{
	static UFunction* pFnReserveStrongZedsForPlayers = NULL;

	if ( ! pFnReserveStrongZedsForPlayers )
		pFnReserveStrongZedsForPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.ReserveStrongZedsForPlayers" );

	UKFAISpawnManager_Versus_execReserveStrongZedsForPlayers_Parms ReserveStrongZedsForPlayers_Parms;

	this->ProcessEvent ( pFnReserveStrongZedsForPlayers, &ReserveStrongZedsForPlayers_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.GiveAvailableZedClass
// [0x00424002] 
// Parameters infos:

void UKFAISpawnManager_Versus::GiveAvailableZedClass ( )
{
	static UFunction* pFnGiveAvailableZedClass = NULL;

	if ( ! pFnGiveAvailableZedClass )
		pFnGiveAvailableZedClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.GiveAvailableZedClass" );

	UKFAISpawnManager_Versus_execGiveAvailableZedClass_Parms GiveAvailableZedClass_Parms;

	this->ProcessEvent ( pFnGiveAvailableZedClass, &GiveAvailableZedClass_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.AssignZedsToPlayers
// [0x00420002] 
// Parameters infos:

void UKFAISpawnManager_Versus::AssignZedsToPlayers ( )
{
	static UFunction* pFnAssignZedsToPlayers = NULL;

	if ( ! pFnAssignZedsToPlayers )
		pFnAssignZedsToPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.AssignZedsToPlayers" );

	UKFAISpawnManager_Versus_execAssignZedsToPlayers_Parms AssignZedsToPlayers_Parms;

	this->ProcessEvent ( pFnAssignZedsToPlayers, &AssignZedsToPlayers_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.GetSpecialSquad
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::GetSpecialSquad ( )
{
	static UFunction* pFnGetSpecialSquad = NULL;

	if ( ! pFnGetSpecialSquad )
		pFnGetSpecialSquad = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.GetSpecialSquad" );

	UKFAISpawnManager_Versus_execGetSpecialSquad_Parms GetSpecialSquad_Parms;

	this->ProcessEvent ( pFnGetSpecialSquad, &GetSpecialSquad_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.CheckForSpecialSquadSpawn
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::CheckForSpecialSquadSpawn ( )
{
	static UFunction* pFnCheckForSpecialSquadSpawn = NULL;

	if ( ! pFnCheckForSpecialSquadSpawn )
		pFnCheckForSpecialSquadSpawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.CheckForSpecialSquadSpawn" );

	UKFAISpawnManager_Versus_execCheckForSpecialSquadSpawn_Parms CheckForSpecialSquadSpawn_Parms;

	this->ProcessEvent ( pFnCheckForSpecialSquadSpawn, &CheckForSpecialSquadSpawn_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.Timer_SpawnPlayerZeds
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::Timer_SpawnPlayerZeds ( )
{
	static UFunction* pFnTimer_SpawnPlayerZeds = NULL;

	if ( ! pFnTimer_SpawnPlayerZeds )
		pFnTimer_SpawnPlayerZeds = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.Timer_SpawnPlayerZeds" );

	UKFAISpawnManager_Versus_execTimer_SpawnPlayerZeds_Parms Timer_SpawnPlayerZeds_Parms;

	this->ProcessEvent ( pFnTimer_SpawnPlayerZeds, &Timer_SpawnPlayerZeds_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.SpawnSquad
// [0x00424002] 
// Parameters infos:

void UKFAISpawnManager_Versus::SpawnSquad ( )
{
	static UFunction* pFnSpawnSquad = NULL;

	if ( ! pFnSpawnSquad )
		pFnSpawnSquad = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.SpawnSquad" );

	UKFAISpawnManager_Versus_execSpawnSquad_Parms SpawnSquad_Parms;

	this->ProcessEvent ( pFnSpawnSquad, &SpawnSquad_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.SetupNextWave
// [0x00024002] 
// Parameters infos:

void UKFAISpawnManager_Versus::SetupNextWave ( )
{
	static UFunction* pFnSetupNextWave = NULL;

	if ( ! pFnSetupNextWave )
		pFnSetupNextWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.SetupNextWave" );

	UKFAISpawnManager_Versus_execSetupNextWave_Parms SetupNextWave_Parms;

	this->ProcessEvent ( pFnSetupNextWave, &SetupNextWave_Parms, NULL );
};

// Function kfgamecontent.KFAISpawnManager_Versus.GetAIAliveCount
// [0x00020002] 
// Parameters infos:

void UKFAISpawnManager_Versus::GetAIAliveCount ( )
{
	static UFunction* pFnGetAIAliveCount = NULL;

	if ( ! pFnGetAIAliveCount )
		pFnGetAIAliveCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFAISpawnManager_Versus.GetAIAliveCount" );

	UKFAISpawnManager_Versus_execGetAIAliveCount_Parms GetAIAliveCount_Parms;

	this->ProcessEvent ( pFnGetAIAliveCount, &GetAIAliveCount_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.GetPawnBasedMixerScene
// [0x00020103] ( FUNC_Final )
// Parameters infos:

void AKFPlayerControllerVersus::GetPawnBasedMixerScene ( )
{
	static UFunction* pFnGetPawnBasedMixerScene = NULL;

	if ( ! pFnGetPawnBasedMixerScene )
		pFnGetPawnBasedMixerScene = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.GetPawnBasedMixerScene" );

	AKFPlayerControllerVersus_execGetPawnBasedMixerScene_Parms GetPawnBasedMixerScene_Parms;

	this->ProcessEvent ( pFnGetPawnBasedMixerScene, &GetPawnBasedMixerScene_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.MixerStartupComplete
// [0x00080102] 
// Parameters infos:

void AKFPlayerControllerVersus::MixerStartupComplete ( )
{
	static UFunction* pFnMixerStartupComplete = NULL;

	if ( ! pFnMixerStartupComplete )
		pFnMixerStartupComplete = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.MixerStartupComplete" );

	AKFPlayerControllerVersus_execMixerStartupComplete_Parms MixerStartupComplete_Parms;

	this->ProcessEvent ( pFnMixerStartupComplete, &MixerStartupComplete_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.GivePawn
// [0x010201C2] 
// Parameters infos:

void AKFPlayerControllerVersus::GivePawn ( )
{
	static UFunction* pFnGivePawn = NULL;

	if ( ! pFnGivePawn )
		pFnGivePawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.GivePawn" );

	AKFPlayerControllerVersus_execGivePawn_Parms GivePawn_Parms;

	this->ProcessEvent ( pFnGivePawn, &GivePawn_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.ClientMatchStarted
// [0x010201C0] 
// Parameters infos:

void AKFPlayerControllerVersus::ClientMatchStarted ( )
{
	static UFunction* pFnClientMatchStarted = NULL;

	if ( ! pFnClientMatchStarted )
		pFnClientMatchStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.ClientMatchStarted" );

	AKFPlayerControllerVersus_execClientMatchStarted_Parms ClientMatchStarted_Parms;

	this->ProcessEvent ( pFnClientMatchStarted, &ClientMatchStarted_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.SetHaveUpdatePerk
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerControllerVersus::eventSetHaveUpdatePerk ( )
{
	static UFunction* pFnSetHaveUpdatePerk = NULL;

	if ( ! pFnSetHaveUpdatePerk )
		pFnSetHaveUpdatePerk = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.SetHaveUpdatePerk" );

	AKFPlayerControllerVersus_eventSetHaveUpdatePerk_Parms SetHaveUpdatePerk_Parms;

	this->ProcessEvent ( pFnSetHaveUpdatePerk, &SetHaveUpdatePerk_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.InitInputSystem
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPlayerControllerVersus::eventInitInputSystem ( )
{
	static UFunction* pFnInitInputSystem = NULL;

	if ( ! pFnInitInputSystem )
		pFnInitInputSystem = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.InitInputSystem" );

	AKFPlayerControllerVersus_eventInitInputSystem_Parms InitInputSystem_Parms;

	this->ProcessEvent ( pFnInitInputSystem, &InitInputSystem_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.ClientReset
// [0x010201C2] 
// Parameters infos:

void AKFPlayerControllerVersus::ClientReset ( )
{
	static UFunction* pFnClientReset = NULL;

	if ( ! pFnClientReset )
		pFnClientReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.ClientReset" );

	AKFPlayerControllerVersus_execClientReset_Parms ClientReset_Parms;

	this->ProcessEvent ( pFnClientReset, &ClientReset_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.Reset
// [0x00020002] 
// Parameters infos:

void AKFPlayerControllerVersus::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.Reset" );

	AKFPlayerControllerVersus_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.NotifyChangeSpectateViewTarget
// [0x00020002] 
// Parameters infos:

void AKFPlayerControllerVersus::NotifyChangeSpectateViewTarget ( )
{
	static UFunction* pFnNotifyChangeSpectateViewTarget = NULL;

	if ( ! pFnNotifyChangeSpectateViewTarget )
		pFnNotifyChangeSpectateViewTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.NotifyChangeSpectateViewTarget" );

	AKFPlayerControllerVersus_execNotifyChangeSpectateViewTarget_Parms NotifyChangeSpectateViewTarget_Parms;

	this->ProcessEvent ( pFnNotifyChangeSpectateViewTarget, &NotifyChangeSpectateViewTarget_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.ClientRecieveNewTeam
// [0x00020002] 
// Parameters infos:

void AKFPlayerControllerVersus::ClientRecieveNewTeam ( )
{
	static UFunction* pFnClientRecieveNewTeam = NULL;

	if ( ! pFnClientRecieveNewTeam )
		pFnClientRecieveNewTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.ClientRecieveNewTeam" );

	AKFPlayerControllerVersus_execClientRecieveNewTeam_Parms ClientRecieveNewTeam_Parms;

	this->ProcessEvent ( pFnClientRecieveNewTeam, &ClientRecieveNewTeam_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.ServerNotifyTeamChanged
// [0x00020002] 
// Parameters infos:

void AKFPlayerControllerVersus::ServerNotifyTeamChanged ( )
{
	static UFunction* pFnServerNotifyTeamChanged = NULL;

	if ( ! pFnServerNotifyTeamChanged )
		pFnServerNotifyTeamChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.ServerNotifyTeamChanged" );

	AKFPlayerControllerVersus_execServerNotifyTeamChanged_Parms ServerNotifyTeamChanged_Parms;

	this->ProcessEvent ( pFnServerNotifyTeamChanged, &ServerNotifyTeamChanged_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.RequestSwitchTeam
// [0x00020202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerControllerVersus::RequestSwitchTeam ( )
{
	static UFunction* pFnRequestSwitchTeam = NULL;

	if ( ! pFnRequestSwitchTeam )
		pFnRequestSwitchTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.RequestSwitchTeam" );

	AKFPlayerControllerVersus_execRequestSwitchTeam_Parms RequestSwitchTeam_Parms;

	this->ProcessEvent ( pFnRequestSwitchTeam, &RequestSwitchTeam_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.ChangeTeam
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerControllerVersus::ChangeTeam ( )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.ChangeTeam" );

	AKFPlayerControllerVersus_execChangeTeam_Parms ChangeTeam_Parms;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.NotifyOfAutoBalance
// [0x01020142] 
// Parameters infos:

void AKFPlayerControllerVersus::NotifyOfAutoBalance ( )
{
	static UFunction* pFnNotifyOfAutoBalance = NULL;

	if ( ! pFnNotifyOfAutoBalance )
		pFnNotifyOfAutoBalance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.NotifyOfAutoBalance" );

	AKFPlayerControllerVersus_execNotifyOfAutoBalance_Parms NotifyOfAutoBalance_Parms;

	this->ProcessEvent ( pFnNotifyOfAutoBalance, &NotifyOfAutoBalance_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.RecieveChatMessage
// [0x00024002] 
// Parameters infos:

void AKFPlayerControllerVersus::RecieveChatMessage ( )
{
	static UFunction* pFnRecieveChatMessage = NULL;

	if ( ! pFnRecieveChatMessage )
		pFnRecieveChatMessage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.RecieveChatMessage" );

	AKFPlayerControllerVersus_execRecieveChatMessage_Parms RecieveChatMessage_Parms;

	this->ProcessEvent ( pFnRecieveChatMessage, &RecieveChatMessage_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.ShouldDisplayGameplayPostProcessFX
// [0x00020002] 
// Parameters infos:

void AKFPlayerControllerVersus::ShouldDisplayGameplayPostProcessFX ( )
{
	static UFunction* pFnShouldDisplayGameplayPostProcessFX = NULL;

	if ( ! pFnShouldDisplayGameplayPostProcessFX )
		pFnShouldDisplayGameplayPostProcessFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.ShouldDisplayGameplayPostProcessFX" );

	AKFPlayerControllerVersus_execShouldDisplayGameplayPostProcessFX_Parms ShouldDisplayGameplayPostProcessFX_Parms;

	this->ProcessEvent ( pFnShouldDisplayGameplayPostProcessFX, &ShouldDisplayGameplayPostProcessFX_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.AddTrackedDamage
// [0x00020002] 
// Parameters infos:

void AKFPlayerControllerVersus::AddTrackedDamage ( )
{
	static UFunction* pFnAddTrackedDamage = NULL;

	if ( ! pFnAddTrackedDamage )
		pFnAddTrackedDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.AddTrackedDamage" );

	AKFPlayerControllerVersus_execAddTrackedDamage_Parms AddTrackedDamage_Parms;

	this->ProcessEvent ( pFnAddTrackedDamage, &AddTrackedDamage_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.AwardZedDamage
// [0x00020002] 
// Parameters infos:

void AKFPlayerControllerVersus::AwardZedDamage ( )
{
	static UFunction* pFnAwardZedDamage = NULL;

	if ( ! pFnAwardZedDamage )
		pFnAwardZedDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.AwardZedDamage" );

	AKFPlayerControllerVersus_execAwardZedDamage_Parms AwardZedDamage_Parms;

	this->ProcessEvent ( pFnAwardZedDamage, &AwardZedDamage_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.StopAltFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerControllerVersus::StopAltFire ( )
{
	static UFunction* pFnStopAltFire = NULL;

	if ( ! pFnStopAltFire )
		pFnStopAltFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.StopAltFire" );

	AKFPlayerControllerVersus_execStopAltFire_Parms StopAltFire_Parms;

	this->ProcessEvent ( pFnStopAltFire, &StopAltFire_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.StartAltFire
// [0x00024202] ( FUNC_Exec )
// Parameters infos:

void AKFPlayerControllerVersus::StartAltFire ( )
{
	static UFunction* pFnStartAltFire = NULL;

	if ( ! pFnStartAltFire )
		pFnStartAltFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.StartAltFire" );

	AKFPlayerControllerVersus_execStartAltFire_Parms StartAltFire_Parms;

	this->ProcessEvent ( pFnStartAltFire, &StartAltFire_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.ClientRestart
// [0x010201C2] 
// Parameters infos:

void AKFPlayerControllerVersus::ClientRestart ( )
{
	static UFunction* pFnClientRestart = NULL;

	if ( ! pFnClientRestart )
		pFnClientRestart = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.ClientRestart" );

	AKFPlayerControllerVersus_execClientRestart_Parms ClientRestart_Parms;

	this->ProcessEvent ( pFnClientRestart, &ClientRestart_Parms, NULL );
};

// Function kfgamecontent.KFPlayerControllerVersus.Restart
// [0x00020002] 
// Parameters infos:

void AKFPlayerControllerVersus::Restart ( )
{
	static UFunction* pFnRestart = NULL;

	if ( ! pFnRestart )
		pFnRestart = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerControllerVersus.Restart" );

	AKFPlayerControllerVersus_execRestart_Parms Restart_Parms;

	this->ProcessEvent ( pFnRestart, &Restart_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.IsMapObjectiveEnabled
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::IsMapObjectiveEnabled ( )
{
	static UFunction* pFnIsMapObjectiveEnabled = NULL;

	if ( ! pFnIsMapObjectiveEnabled )
		pFnIsMapObjectiveEnabled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.IsMapObjectiveEnabled" );

	AKFGameInfo_VersusSurvival_execIsMapObjectiveEnabled_Parms IsMapObjectiveEnabled_Parms;

	this->ProcessEvent ( pFnIsMapObjectiveEnabled, &IsMapObjectiveEnabled_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.GetEndOfMatchTime
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::GetEndOfMatchTime ( )
{
	static UFunction* pFnGetEndOfMatchTime = NULL;

	if ( ! pFnGetEndOfMatchTime )
		pFnGetEndOfMatchTime = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.GetEndOfMatchTime" );

	AKFGameInfo_VersusSurvival_execGetEndOfMatchTime_Parms GetEndOfMatchTime_Parms;

	this->ProcessEvent ( pFnGetEndOfMatchTime, &GetEndOfMatchTime_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.ShowPostGameMenu
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::ShowPostGameMenu ( )
{
	static UFunction* pFnShowPostGameMenu = NULL;

	if ( ! pFnShowPostGameMenu )
		pFnShowPostGameMenu = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.ShowPostGameMenu" );

	AKFGameInfo_VersusSurvival_execShowPostGameMenu_Parms ShowPostGameMenu_Parms;

	this->ProcessEvent ( pFnShowPostGameMenu, &ShowPostGameMenu_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.TryRestartGame
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::TryRestartGame ( )
{
	static UFunction* pFnTryRestartGame = NULL;

	if ( ! pFnTryRestartGame )
		pFnTryRestartGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.TryRestartGame" );

	AKFGameInfo_VersusSurvival_execTryRestartGame_Parms TryRestartGame_Parms;

	this->ProcessEvent ( pFnTryRestartGame, &TryRestartGame_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.CheckRoundEndAchievements
// [0x00080002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::CheckRoundEndAchievements ( )
{
	static UFunction* pFnCheckRoundEndAchievements = NULL;

	if ( ! pFnCheckRoundEndAchievements )
		pFnCheckRoundEndAchievements = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.CheckRoundEndAchievements" );

	AKFGameInfo_VersusSurvival_execCheckRoundEndAchievements_Parms CheckRoundEndAchievements_Parms;

	this->ProcessEvent ( pFnCheckRoundEndAchievements, &CheckRoundEndAchievements_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.SwitchOnePlayerToTeam
// [0x00080002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::SwitchOnePlayerToTeam ( )
{
	static UFunction* pFnSwitchOnePlayerToTeam = NULL;

	if ( ! pFnSwitchOnePlayerToTeam )
		pFnSwitchOnePlayerToTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.SwitchOnePlayerToTeam" );

	AKFGameInfo_VersusSurvival_execSwitchOnePlayerToTeam_Parms SwitchOnePlayerToTeam_Parms;

	this->ProcessEvent ( pFnSwitchOnePlayerToTeam, &SwitchOnePlayerToTeam_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.StartSpawning
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::StartSpawning ( )
{
	static UFunction* pFnStartSpawning = NULL;

	if ( ! pFnStartSpawning )
		pFnStartSpawning = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.StartSpawning" );

	AKFGameInfo_VersusSurvival_execStartSpawning_Parms StartSpawning_Parms;

	this->ProcessEvent ( pFnStartSpawning, &StartSpawning_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.PreSelectPlayerStarts
// [0x00080002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::PreSelectPlayerStarts ( )
{
	static UFunction* pFnPreSelectPlayerStarts = NULL;

	if ( ! pFnPreSelectPlayerStarts )
		pFnPreSelectPlayerStarts = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.PreSelectPlayerStarts" );

	AKFGameInfo_VersusSurvival_execPreSelectPlayerStarts_Parms PreSelectPlayerStarts_Parms;

	this->ProcessEvent ( pFnPreSelectPlayerStarts, &PreSelectPlayerStarts_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.IsInitialSpawnPointSelection
// [0x00022002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::IsInitialSpawnPointSelection ( )
{
	static UFunction* pFnIsInitialSpawnPointSelection = NULL;

	if ( ! pFnIsInitialSpawnPointSelection )
		pFnIsInitialSpawnPointSelection = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.IsInitialSpawnPointSelection" );

	AKFGameInfo_VersusSurvival_execIsInitialSpawnPointSelection_Parms IsInitialSpawnPointSelection_Parms;

	this->ProcessEvent ( pFnIsInitialSpawnPointSelection, &IsInitialSpawnPointSelection_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.BeginNextRound
// [0x00080002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::BeginNextRound ( )
{
	static UFunction* pFnBeginNextRound = NULL;

	if ( ! pFnBeginNextRound )
		pFnBeginNextRound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.BeginNextRound" );

	AKFGameInfo_VersusSurvival_execBeginNextRound_Parms BeginNextRound_Parms;

	this->ProcessEvent ( pFnBeginNextRound, &BeginNextRound_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.CheckTeamNumbers
// [0x00080002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::CheckTeamNumbers ( )
{
	static UFunction* pFnCheckTeamNumbers = NULL;

	if ( ! pFnCheckTeamNumbers )
		pFnCheckTeamNumbers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.CheckTeamNumbers" );

	AKFGameInfo_VersusSurvival_execCheckTeamNumbers_Parms CheckTeamNumbers_Parms;

	this->ProcessEvent ( pFnCheckTeamNumbers, &CheckTeamNumbers_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.Timer_AnnounceNextRound
// [0x00080002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::Timer_AnnounceNextRound ( )
{
	static UFunction* pFnTimer_AnnounceNextRound = NULL;

	if ( ! pFnTimer_AnnounceNextRound )
		pFnTimer_AnnounceNextRound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.Timer_AnnounceNextRound" );

	AKFGameInfo_VersusSurvival_execTimer_AnnounceNextRound_Parms Timer_AnnounceNextRound_Parms;

	this->ProcessEvent ( pFnTimer_AnnounceNextRound, &Timer_AnnounceNextRound_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.ClosePostRoundMenu
// [0x00084002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::ClosePostRoundMenu ( )
{
	static UFunction* pFnClosePostRoundMenu = NULL;

	if ( ! pFnClosePostRoundMenu )
		pFnClosePostRoundMenu = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.ClosePostRoundMenu" );

	AKFGameInfo_VersusSurvival_execClosePostRoundMenu_Parms ClosePostRoundMenu_Parms;

	this->ProcessEvent ( pFnClosePostRoundMenu, &ClosePostRoundMenu_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.Reset
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.Reset" );

	AKFGameInfo_VersusSurvival_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.UpdateSecondRoundTeamScore
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::UpdateSecondRoundTeamScore ( )
{
	static UFunction* pFnUpdateSecondRoundTeamScore = NULL;

	if ( ! pFnUpdateSecondRoundTeamScore )
		pFnUpdateSecondRoundTeamScore = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.UpdateSecondRoundTeamScore" );

	AKFGameInfo_VersusSurvival_execUpdateSecondRoundTeamScore_Parms UpdateSecondRoundTeamScore_Parms;

	this->ProcessEvent ( pFnUpdateSecondRoundTeamScore, &UpdateSecondRoundTeamScore_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.UpdateFirstRoundTeamScore
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::UpdateFirstRoundTeamScore ( )
{
	static UFunction* pFnUpdateFirstRoundTeamScore = NULL;

	if ( ! pFnUpdateFirstRoundTeamScore )
		pFnUpdateFirstRoundTeamScore = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.UpdateFirstRoundTeamScore" );

	AKFGameInfo_VersusSurvival_execUpdateFirstRoundTeamScore_Parms UpdateFirstRoundTeamScore_Parms;

	this->ProcessEvent ( pFnUpdateFirstRoundTeamScore, &UpdateFirstRoundTeamScore_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.OpenPostRoundMenu
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::OpenPostRoundMenu ( )
{
	static UFunction* pFnOpenPostRoundMenu = NULL;

	if ( ! pFnOpenPostRoundMenu )
		pFnOpenPostRoundMenu = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.OpenPostRoundMenu" );

	AKFGameInfo_VersusSurvival_execOpenPostRoundMenu_Parms OpenPostRoundMenu_Parms;

	this->ProcessEvent ( pFnOpenPostRoundMenu, &OpenPostRoundMenu_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.ResetAllPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::ResetAllPickups ( )
{
	static UFunction* pFnResetAllPickups = NULL;

	if ( ! pFnResetAllPickups )
		pFnResetAllPickups = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.ResetAllPickups" );

	AKFGameInfo_VersusSurvival_execResetAllPickups_Parms ResetAllPickups_Parms;

	this->ProcessEvent ( pFnResetAllPickups, &ResetAllPickups_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.CheckPawnsForGriefing
// [0x00084002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::CheckPawnsForGriefing ( )
{
	static UFunction* pFnCheckPawnsForGriefing = NULL;

	if ( ! pFnCheckPawnsForGriefing )
		pFnCheckPawnsForGriefing = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.CheckPawnsForGriefing" );

	AKFGameInfo_VersusSurvival_execCheckPawnsForGriefing_Parms CheckPawnsForGriefing_Parms;

	this->ProcessEvent ( pFnCheckPawnsForGriefing, &CheckPawnsForGriefing_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.BossDied
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::BossDied ( )
{
	static UFunction* pFnBossDied = NULL;

	if ( ! pFnBossDied )
		pFnBossDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.BossDied" );

	AKFGameInfo_VersusSurvival_execBossDied_Parms BossDied_Parms;

	this->ProcessEvent ( pFnBossDied, &BossDied_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.WaveEnded
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::WaveEnded ( )
{
	static UFunction* pFnWaveEnded = NULL;

	if ( ! pFnWaveEnded )
		pFnWaveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.WaveEnded" );

	AKFGameInfo_VersusSurvival_execWaveEnded_Parms WaveEnded_Parms;

	this->ProcessEvent ( pFnWaveEnded, &WaveEnded_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.Killed
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::Killed ( )
{
	static UFunction* pFnKilled = NULL;

	if ( ! pFnKilled )
		pFnKilled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.Killed" );

	AKFGameInfo_VersusSurvival_execKilled_Parms Killed_Parms;

	this->ProcessEvent ( pFnKilled, &Killed_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.EndOfMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::EndOfMatch ( )
{
	static UFunction* pFnEndOfMatch = NULL;

	if ( ! pFnEndOfMatch )
		pFnEndOfMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.EndOfMatch" );

	AKFGameInfo_VersusSurvival_execEndOfMatch_Parms EndOfMatch_Parms;

	this->ProcessEvent ( pFnEndOfMatch, &EndOfMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.ScoreKill
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::ScoreKill ( )
{
	static UFunction* pFnScoreKill = NULL;

	if ( ! pFnScoreKill )
		pFnScoreKill = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.ScoreKill" );

	AKFGameInfo_VersusSurvival_execScoreKill_Parms ScoreKill_Parms;

	this->ProcessEvent ( pFnScoreKill, &ScoreKill_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.ScoreDamage
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::ScoreDamage ( )
{
	static UFunction* pFnScoreDamage = NULL;

	if ( ! pFnScoreDamage )
		pFnScoreDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.ScoreDamage" );

	AKFGameInfo_VersusSurvival_execScoreDamage_Parms ScoreDamage_Parms;

	this->ProcessEvent ( pFnScoreDamage, &ScoreDamage_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.ReduceDamage
// [0x00420002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::ReduceDamage ( )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.ReduceDamage" );

	AKFGameInfo_VersusSurvival_execReduceDamage_Parms ReduceDamage_Parms;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.GetLivingPlayerCount
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::GetLivingPlayerCount ( )
{
	static UFunction* pFnGetLivingPlayerCount = NULL;

	if ( ! pFnGetLivingPlayerCount )
		pFnGetLivingPlayerCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.GetLivingPlayerCount" );

	AKFGameInfo_VersusSurvival_execGetLivingPlayerCount_Parms GetLivingPlayerCount_Parms;

	this->ProcessEvent ( pFnGetLivingPlayerCount, &GetLivingPlayerCount_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.GetDefaultPlayerClass
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::GetDefaultPlayerClass ( )
{
	static UFunction* pFnGetDefaultPlayerClass = NULL;

	if ( ! pFnGetDefaultPlayerClass )
		pFnGetDefaultPlayerClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.GetDefaultPlayerClass" );

	AKFGameInfo_VersusSurvival_execGetDefaultPlayerClass_Parms GetDefaultPlayerClass_Parms;

	this->ProcessEvent ( pFnGetDefaultPlayerClass, &GetDefaultPlayerClass_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.GetAIControlledMonsterAliveCount
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::GetAIControlledMonsterAliveCount ( )
{
	static UFunction* pFnGetAIControlledMonsterAliveCount = NULL;

	if ( ! pFnGetAIControlledMonsterAliveCount )
		pFnGetAIControlledMonsterAliveCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.GetAIControlledMonsterAliveCount" );

	AKFGameInfo_VersusSurvival_execGetAIControlledMonsterAliveCount_Parms GetAIControlledMonsterAliveCount_Parms;

	this->ProcessEvent ( pFnGetAIControlledMonsterAliveCount, &GetAIControlledMonsterAliveCount_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.SetPlayerDefaults
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::SetPlayerDefaults ( )
{
	static UFunction* pFnSetPlayerDefaults = NULL;

	if ( ! pFnSetPlayerDefaults )
		pFnSetPlayerDefaults = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.SetPlayerDefaults" );

	AKFGameInfo_VersusSurvival_execSetPlayerDefaults_Parms SetPlayerDefaults_Parms;

	this->ProcessEvent ( pFnSetPlayerDefaults, &SetPlayerDefaults_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.RestartPlayer
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.RestartPlayer" );

	AKFGameInfo_VersusSurvival_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.Logout
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::Logout ( )
{
	static UFunction* pFnLogout = NULL;

	if ( ! pFnLogout )
		pFnLogout = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.Logout" );

	AKFGameInfo_VersusSurvival_execLogout_Parms Logout_Parms;

	this->ProcessEvent ( pFnLogout, &Logout_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.OnWaitingPlayerTeamSwapped
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::OnWaitingPlayerTeamSwapped ( )
{
	static UFunction* pFnOnWaitingPlayerTeamSwapped = NULL;

	if ( ! pFnOnWaitingPlayerTeamSwapped )
		pFnOnWaitingPlayerTeamSwapped = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.OnWaitingPlayerTeamSwapped" );

	AKFGameInfo_VersusSurvival_execOnWaitingPlayerTeamSwapped_Parms OnWaitingPlayerTeamSwapped_Parms;

	this->ProcessEvent ( pFnOnWaitingPlayerTeamSwapped, &OnWaitingPlayerTeamSwapped_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_VersusSurvival::eventPostLogin ( )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.PostLogin" );

	AKFGameInfo_VersusSurvival_eventPostLogin_Parms PostLogin_Parms;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.SetTeam
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::SetTeam ( )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.SetTeam" );

	AKFGameInfo_VersusSurvival_execSetTeam_Parms SetTeam_Parms;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.ChangeTeam
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::ChangeTeam ( )
{
	static UFunction* pFnChangeTeam = NULL;

	if ( ! pFnChangeTeam )
		pFnChangeTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.ChangeTeam" );

	AKFGameInfo_VersusSurvival_execChangeTeam_Parms ChangeTeam_Parms;

	this->ProcessEvent ( pFnChangeTeam, &ChangeTeam_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.PickTeam
// [0x00420002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::PickTeam ( )
{
	static UFunction* pFnPickTeam = NULL;

	if ( ! pFnPickTeam )
		pFnPickTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.PickTeam" );

	AKFGameInfo_VersusSurvival_execPickTeam_Parms PickTeam_Parms;

	this->ProcessEvent ( pFnPickTeam, &PickTeam_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.GetReservedTotals
// [0x00C20002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::GetReservedTotals ( )
{
	static UFunction* pFnGetReservedTotals = NULL;

	if ( ! pFnGetReservedTotals )
		pFnGetReservedTotals = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.GetReservedTotals" );

	AKFGameInfo_VersusSurvival_execGetReservedTotals_Parms GetReservedTotals_Parms;

	this->ProcessEvent ( pFnGetReservedTotals, &GetReservedTotals_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.GetPRIById
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::GetPRIById ( )
{
	static UFunction* pFnGetPRIById = NULL;

	if ( ! pFnGetPRIById )
		pFnGetPRIById = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.GetPRIById" );

	AKFGameInfo_VersusSurvival_execGetPRIById_Parms GetPRIById_Parms;

	this->ProcessEvent ( pFnGetPRIById, &GetPRIById_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.PickGroupTeam
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::PickGroupTeam ( )
{
	static UFunction* pFnPickGroupTeam = NULL;

	if ( ! pFnPickGroupTeam )
		pFnPickGroupTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.PickGroupTeam" );

	AKFGameInfo_VersusSurvival_execPickGroupTeam_Parms PickGroupTeam_Parms;

	this->ProcessEvent ( pFnPickGroupTeam, &PickGroupTeam_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.GetPlayerGroup
// [0x00C24002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::GetPlayerGroup ( )
{
	static UFunction* pFnGetPlayerGroup = NULL;

	if ( ! pFnGetPlayerGroup )
		pFnGetPlayerGroup = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.GetPlayerGroup" );

	AKFGameInfo_VersusSurvival_execGetPlayerGroup_Parms GetPlayerGroup_Parms;

	this->ProcessEvent ( pFnGetPlayerGroup, &GetPlayerGroup_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.CreateTeam
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::CreateTeam ( )
{
	static UFunction* pFnCreateTeam = NULL;

	if ( ! pFnCreateTeam )
		pFnCreateTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.CreateTeam" );

	AKFGameInfo_VersusSurvival_execCreateTeam_Parms CreateTeam_Parms;

	this->ProcessEvent ( pFnCreateTeam, &CreateTeam_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.SwapTeamFor
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::SwapTeamFor ( )
{
	static UFunction* pFnSwapTeamFor = NULL;

	if ( ! pFnSwapTeamFor )
		pFnSwapTeamFor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.SwapTeamFor" );

	AKFGameInfo_VersusSurvival_execSwapTeamFor_Parms SwapTeamFor_Parms;

	this->ProcessEvent ( pFnSwapTeamFor, &SwapTeamFor_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.BalanceTeamsOld
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::BalanceTeamsOld ( )
{
	static UFunction* pFnBalanceTeamsOld = NULL;

	if ( ! pFnBalanceTeamsOld )
		pFnBalanceTeamsOld = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.BalanceTeamsOld" );

	AKFGameInfo_VersusSurvival_execBalanceTeamsOld_Parms BalanceTeamsOld_Parms;

	this->ProcessEvent ( pFnBalanceTeamsOld, &BalanceTeamsOld_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.BalanceTeams
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::BalanceTeams ( )
{
	static UFunction* pFnBalanceTeams = NULL;

	if ( ! pFnBalanceTeams )
		pFnBalanceTeams = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.BalanceTeams" );

	AKFGameInfo_VersusSurvival_execBalanceTeams_Parms BalanceTeams_Parms;

	this->ProcessEvent ( pFnBalanceTeams, &BalanceTeams_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.BalanceSingles
// [0x00424002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::BalanceSingles ( )
{
	static UFunction* pFnBalanceSingles = NULL;

	if ( ! pFnBalanceSingles )
		pFnBalanceSingles = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.BalanceSingles" );

	AKFGameInfo_VersusSurvival_execBalanceSingles_Parms BalanceSingles_Parms;

	this->ProcessEvent ( pFnBalanceSingles, &BalanceSingles_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.IsLegal
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::IsLegal ( )
{
	static UFunction* pFnIsLegal = NULL;

	if ( ! pFnIsLegal )
		pFnIsLegal = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.IsLegal" );

	AKFGameInfo_VersusSurvival_execIsLegal_Parms IsLegal_Parms;

	this->ProcessEvent ( pFnIsLegal, &IsLegal_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.IsBalanceable
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::IsBalanceable ( )
{
	static UFunction* pFnIsBalanceable = NULL;

	if ( ! pFnIsBalanceable )
		pFnIsBalanceable = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.IsBalanceable" );

	AKFGameInfo_VersusSurvival_execIsBalanceable_Parms IsBalanceable_Parms;

	this->ProcessEvent ( pFnIsBalanceable, &IsBalanceable_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.GetDelta
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::GetDelta ( )
{
	static UFunction* pFnGetDelta = NULL;

	if ( ! pFnGetDelta )
		pFnGetDelta = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.GetDelta" );

	AKFGameInfo_VersusSurvival_execGetDelta_Parms GetDelta_Parms;

	this->ProcessEvent ( pFnGetDelta, &GetDelta_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.SplitGroups
// [0x00820002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::SplitGroups ( )
{
	static UFunction* pFnSplitGroups = NULL;

	if ( ! pFnSplitGroups )
		pFnSplitGroups = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.SplitGroups" );

	AKFGameInfo_VersusSurvival_execSplitGroups_Parms SplitGroups_Parms;

	this->ProcessEvent ( pFnSplitGroups, &SplitGroups_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.SplitArrayByTeam
// [0x00C20002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::SplitArrayByTeam ( )
{
	static UFunction* pFnSplitArrayByTeam = NULL;

	if ( ! pFnSplitArrayByTeam )
		pFnSplitArrayByTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.SplitArrayByTeam" );

	AKFGameInfo_VersusSurvival_execSplitArrayByTeam_Parms SplitArrayByTeam_Parms;

	this->ProcessEvent ( pFnSplitArrayByTeam, &SplitArrayByTeam_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.StripAbsentPlayers
// [0x00820002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::StripAbsentPlayers ( )
{
	static UFunction* pFnStripAbsentPlayers = NULL;

	if ( ! pFnStripAbsentPlayers )
		pFnStripAbsentPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.StripAbsentPlayers" );

	AKFGameInfo_VersusSurvival_execStripAbsentPlayers_Parms StripAbsentPlayers_Parms;

	this->ProcessEvent ( pFnStripAbsentPlayers, &StripAbsentPlayers_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.ShouldStartMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::ShouldStartMatch ( )
{
	static UFunction* pFnShouldStartMatch = NULL;

	if ( ! pFnShouldStartMatch )
		pFnShouldStartMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.ShouldStartMatch" );

	AKFGameInfo_VersusSurvival_execShouldStartMatch_Parms ShouldStartMatch_Parms;

	this->ProcessEvent ( pFnShouldStartMatch, &ShouldStartMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.StartMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.StartMatch" );

	AKFGameInfo_VersusSurvival_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.IsPlayerReady
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::IsPlayerReady ( )
{
	static UFunction* pFnIsPlayerReady = NULL;

	if ( ! pFnIsPlayerReady )
		pFnIsPlayerReady = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.IsPlayerReady" );

	AKFGameInfo_VersusSurvival_execIsPlayerReady_Parms IsPlayerReady_Parms;

	this->ProcessEvent ( pFnIsPlayerReady, &IsPlayerReady_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.InitGRIVariables
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_VersusSurvival::InitGRIVariables ( )
{
	static UFunction* pFnInitGRIVariables = NULL;

	if ( ! pFnInitGRIVariables )
		pFnInitGRIVariables = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.InitGRIVariables" );

	AKFGameInfo_VersusSurvival_execInitGRIVariables_Parms InitGRIVariables_Parms;

	this->ProcessEvent ( pFnInitGRIVariables, &InitGRIVariables_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_VersusSurvival.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_VersusSurvival::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_VersusSurvival.PreBeginPlay" );

	AKFGameInfo_VersusSurvival_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.OnStackingAfflictionChanged
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedScrake::OnStackingAfflictionChanged ( )
{
	static UFunction* pFnOnStackingAfflictionChanged = NULL;

	if ( ! pFnOnStackingAfflictionChanged )
		pFnOnStackingAfflictionChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.OnStackingAfflictionChanged" );

	AKFPawn_ZedScrake_execOnStackingAfflictionChanged_Parms OnStackingAfflictionChanged_Parms;

	this->ProcessEvent ( pFnOnStackingAfflictionChanged, &OnStackingAfflictionChanged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedScrake::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.SetSprinting" );

	AKFPawn_ZedScrake_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedScrake::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.GetTraderAdviceID" );

	AKFPawn_ZedScrake_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedScrake::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.GetSpotterDialogID" );

	AKFPawn_ZedScrake_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.CleanupChainsaw
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedScrake::CleanupChainsaw ( )
{
	static UFunction* pFnCleanupChainsaw = NULL;

	if ( ! pFnCleanupChainsaw )
		pFnCleanupChainsaw = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.CleanupChainsaw" );

	AKFPawn_ZedScrake_execCleanupChainsaw_Parms CleanupChainsaw_Parms;

	this->ProcessEvent ( pFnCleanupChainsaw, &CleanupChainsaw_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedScrake::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.TerminateEffectsOnDeath" );

	AKFPawn_ZedScrake_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.NotifyGoreMeshActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedScrake::eventNotifyGoreMeshActive ( )
{
	static UFunction* pFnNotifyGoreMeshActive = NULL;

	if ( ! pFnNotifyGoreMeshActive )
		pFnNotifyGoreMeshActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.NotifyGoreMeshActive" );

	AKFPawn_ZedScrake_eventNotifyGoreMeshActive_Parms NotifyGoreMeshActive_Parms;

	this->ProcessEvent ( pFnNotifyGoreMeshActive, &NotifyGoreMeshActive_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedScrake::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.CauseHeadTrauma" );

	AKFPawn_ZedScrake_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.CanBlock
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedScrake::CanBlock ( )
{
	static UFunction* pFnCanBlock = NULL;

	if ( ! pFnCanBlock )
		pFnCanBlock = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.CanBlock" );

	AKFPawn_ZedScrake_execCanBlock_Parms CanBlock_Parms;

	this->ProcessEvent ( pFnCanBlock, &CanBlock_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedScrake::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.TakeDamage" );

	AKFPawn_ZedScrake_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.CreateExhaustFx
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedScrake::CreateExhaustFx ( )
{
	static UFunction* pFnCreateExhaustFx = NULL;

	if ( ! pFnCreateExhaustFx )
		pFnCreateExhaustFx = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.CreateExhaustFx" );

	AKFPawn_ZedScrake_execCreateExhaustFx_Parms CreateExhaustFx_Parms;

	this->ProcessEvent ( pFnCreateExhaustFx, &CreateExhaustFx_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedScrake::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.PossessedBy" );

	AKFPawn_ZedScrake_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.SetCharacterArch
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedScrake::SetCharacterArch ( )
{
	static UFunction* pFnSetCharacterArch = NULL;

	if ( ! pFnSetCharacterArch )
		pFnSetCharacterArch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.SetCharacterArch" );

	AKFPawn_ZedScrake_execSetCharacterArch_Parms SetCharacterArch_Parms;

	this->ProcessEvent ( pFnSetCharacterArch, &SetCharacterArch_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedScrake::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake.PostBeginPlay" );

	AKFPawn_ZedScrake_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFBloodRainVolume.Timer_SetActive
// [0x00080102] 
// Parameters infos:

void AKFBloodRainVolume::Timer_SetActive ( )
{
	static UFunction* pFnTimer_SetActive = NULL;

	if ( ! pFnTimer_SetActive )
		pFnTimer_SetActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFBloodRainVolume.Timer_SetActive" );

	AKFBloodRainVolume_execTimer_SetActive_Parms Timer_SetActive_Parms;

	this->ProcessEvent ( pFnTimer_SetActive, &Timer_SetActive_Parms, NULL );
};

// Function kfgamecontent.KFBloodRainVolume.SetActive
// [0x00020102] 
// Parameters infos:

void AKFBloodRainVolume::SetActive ( )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFBloodRainVolume.SetActive" );

	AKFBloodRainVolume_execSetActive_Parms SetActive_Parms;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );
};

// Function kfgamecontent.KFBloodRainVolume.AddSplatter
// [0x00820102] 
// Parameters infos:

void AKFBloodRainVolume::AddSplatter ( )
{
	static UFunction* pFnAddSplatter = NULL;

	if ( ! pFnAddSplatter )
		pFnAddSplatter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFBloodRainVolume.AddSplatter" );

	AKFBloodRainVolume_execAddSplatter_Parms AddSplatter_Parms;

	this->ProcessEvent ( pFnAddSplatter, &AddSplatter_Parms, NULL );
};

// Function kfgamecontent.KFBloodRainVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFBloodRainVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFBloodRainVolume.PostBeginPlay" );

	AKFBloodRainVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFCollectibleActor.Reset
// [0x00020100] 
// Parameters infos:

void AKFCollectibleActor::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFCollectibleActor.Reset" );

	AKFCollectibleActor_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFCollectibleActor.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFCollectibleActor::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFCollectibleActor.AdjustDamage" );

	AKFCollectibleActor_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function kfgamecontent.KFCollectibleActor.TriggerDestroyedEvent
// [0x00080802] ( FUNC_Event )
// Parameters infos:

void AKFCollectibleActor::eventTriggerDestroyedEvent ( )
{
	static UFunction* pFnTriggerDestroyedEvent = NULL;

	if ( ! pFnTriggerDestroyedEvent )
		pFnTriggerDestroyedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFCollectibleActor.TriggerDestroyedEvent" );

	AKFCollectibleActor_eventTriggerDestroyedEvent_Parms TriggerDestroyedEvent_Parms;

	this->ProcessEvent ( pFnTriggerDestroyedEvent, &TriggerDestroyedEvent_Parms, NULL );
};

// Function kfgamecontent.KFDifficulty_Bloat.GetPukeMinesToSpawnOnDeath
// [0x00022002] 
// Parameters infos:

void UKFDifficulty_Bloat::GetPukeMinesToSpawnOnDeath ( )
{
	static UFunction* pFnGetPukeMinesToSpawnOnDeath = NULL;

	if ( ! pFnGetPukeMinesToSpawnOnDeath )
		pFnGetPukeMinesToSpawnOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDifficulty_Bloat.GetPukeMinesToSpawnOnDeath" );

	UKFDifficulty_Bloat_execGetPukeMinesToSpawnOnDeath_Parms GetPukeMinesToSpawnOnDeath_Parms;

	this->ProcessEvent ( pFnGetPukeMinesToSpawnOnDeath, &GetPukeMinesToSpawnOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFDifficulty_Husk.GetFireballSettings
// [0x00822002] 
// Parameters infos:

void UKFDifficulty_Husk::GetFireballSettings ( )
{
	static UFunction* pFnGetFireballSettings = NULL;

	if ( ! pFnGetFireballSettings )
		pFnGetFireballSettings = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDifficulty_Husk.GetFireballSettings" );

	UKFDifficulty_Husk_execGetFireballSettings_Parms GetFireballSettings_Parms;

	this->ProcessEvent ( pFnGetFireballSettings, &GetFireballSettings_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_AA12Shotgun.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_AA12Shotgun::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_AA12Shotgun.CanDismemberHitZone" );

	UKFDT_Ballistic_AA12Shotgun_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_AF2011.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_AF2011::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_AF2011.CanDismemberHitZone" );

	UKFDT_Ballistic_AF2011_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_AK12.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_AK12::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_AK12.CanDismemberHitZone" );

	UKFDT_Ballistic_AK12_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Assault_Medic.GetMedicToxicDmgType
// [0x00426002] 
// Parameters infos:

void UKFDT_Ballistic_Assault_Medic::GetMedicToxicDmgType ( )
{
	static UFunction* pFnGetMedicToxicDmgType = NULL;

	if ( ! pFnGetMedicToxicDmgType )
		pFnGetMedicToxicDmgType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Assault_Medic.GetMedicToxicDmgType" );

	UKFDT_Ballistic_Assault_Medic_execGetMedicToxicDmgType_Parms GetMedicToxicDmgType_Parms;

	this->ProcessEvent ( pFnGetMedicToxicDmgType, &GetMedicToxicDmgType_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Assault_Medic.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Ballistic_Assault_Medic::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Assault_Medic.ApplySecondaryDamage" );

	UKFDT_Ballistic_Assault_Medic_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Assault_Medic.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_Assault_Medic::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Assault_Medic.CanDismemberHitZone" );

	UKFDT_Ballistic_Assault_Medic_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_CenterfireMB464.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_CenterfireMB464::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_CenterfireMB464.CanDismemberHitZone" );

	UKFDT_Ballistic_CenterfireMB464_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_DBShotgun.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_DBShotgun::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_DBShotgun.CanDismemberHitZone" );

	UKFDT_Ballistic_DBShotgun_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Deagle.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_Deagle::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Deagle.CanDismemberHitZone" );

	UKFDT_Ballistic_Deagle_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_DragonsBreath.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Ballistic_DragonsBreath::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_DragonsBreath.ApplySecondaryDamage" );

	UKFDT_Ballistic_DragonsBreath_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_DragonsBreath.PlayImpactHitEffects
// [0x00026002] 
// Parameters infos:

void UKFDT_Ballistic_DragonsBreath::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_DragonsBreath.PlayImpactHitEffects" );

	UKFDT_Ballistic_DragonsBreath_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_DragonsBreath.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_DragonsBreath::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_DragonsBreath.CanDismemberHitZone" );

	UKFDT_Ballistic_DragonsBreath_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_DragonsBreathDoT.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_DragonsBreathDoT::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_DragonsBreathDoT.GetDamageeDialogID" );

	UKFDT_Fire_DragonsBreathDoT_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_DragonsBreathDoT.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_DragonsBreathDoT::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_DragonsBreathDoT.GetDamagerDialogID" );

	UKFDT_Fire_DragonsBreathDoT_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_DragonsBreathDoT.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_DragonsBreathDoT::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_DragonsBreathDoT.GetKillerDialogID" );

	UKFDT_Fire_DragonsBreathDoT_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_ElephantGun.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_ElephantGun::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_ElephantGun.CanDismemberHitZone" );

	UKFDT_Ballistic_ElephantGun_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_FNFal.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_FNFal::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_FNFal.CanDismemberHitZone" );

	UKFDT_Ballistic_FNFal_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_HansAK12.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Ballistic_HansAK12::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_HansAK12.GetKillerDialogID" );

	UKFDT_Ballistic_HansAK12_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Hemogoblin.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Ballistic_Hemogoblin::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Hemogoblin.ApplySecondaryDamage" );

	UKFDT_Ballistic_Hemogoblin_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Hemogoblin.PlayImpactHitEffects
// [0x00826002] 
// Parameters infos:

void UKFDT_Ballistic_Hemogoblin::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Hemogoblin.PlayImpactHitEffects" );

	UKFDT_Ballistic_Hemogoblin_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Hemogoblin.CanDismemberHitZoneWhileAlive
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_Hemogoblin::CanDismemberHitZoneWhileAlive ( )
{
	static UFunction* pFnCanDismemberHitZoneWhileAlive = NULL;

	if ( ! pFnCanDismemberHitZoneWhileAlive )
		pFnCanDismemberHitZoneWhileAlive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Hemogoblin.CanDismemberHitZoneWhileAlive" );

	UKFDT_Ballistic_Hemogoblin_execCanDismemberHitZoneWhileAlive_Parms CanDismemberHitZoneWhileAlive_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZoneWhileAlive, &CanDismemberHitZoneWhileAlive_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Hemogoblin.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_Hemogoblin::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Hemogoblin.CanDismemberHitZone" );

	UKFDT_Ballistic_Hemogoblin_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFWeapActor_Hemogoblin_Tube.Tick
// [0x00820802] ( FUNC_Event )
// Parameters infos:

void AKFWeapActor_Hemogoblin_Tube::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapActor_Hemogoblin_Tube.Tick" );

	AKFWeapActor_Hemogoblin_Tube_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFWeapActor_Hemogoblin_Tube.ActualDestroy
// [0x00020002] 
// Parameters infos:

void AKFWeapActor_Hemogoblin_Tube::ActualDestroy ( )
{
	static UFunction* pFnActualDestroy = NULL;

	if ( ! pFnActualDestroy )
		pFnActualDestroy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapActor_Hemogoblin_Tube.ActualDestroy" );

	AKFWeapActor_Hemogoblin_Tube_execActualDestroy_Parms ActualDestroy_Parms;

	this->ProcessEvent ( pFnActualDestroy, &ActualDestroy_Parms, NULL );
};

// Function kfgamecontent.KFWeapActor_Hemogoblin_Tube.TearDown
// [0x00020002] 
// Parameters infos:

void AKFWeapActor_Hemogoblin_Tube::TearDown ( )
{
	static UFunction* pFnTearDown = NULL;

	if ( ! pFnTearDown )
		pFnTearDown = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapActor_Hemogoblin_Tube.TearDown" );

	AKFWeapActor_Hemogoblin_Tube_execTearDown_Parms TearDown_Parms;

	this->ProcessEvent ( pFnTearDown, &TearDown_Parms, NULL );
};

// Function kfgamecontent.KFWeapActor_Hemogoblin_Tube.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWeapActor_Hemogoblin_Tube::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapActor_Hemogoblin_Tube.PostBeginPlay" );

	AKFWeapActor_Hemogoblin_Tube_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_HX25SubmunitionImpact.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_HX25SubmunitionImpact::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_HX25SubmunitionImpact.CanDismemberHitZone" );

	UKFDT_Ballistic_HX25SubmunitionImpact_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_HZ12.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_HZ12::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_HZ12.CanDismemberHitZone" );

	UKFDT_Ballistic_HZ12_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_M14EBR.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_M14EBR::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_M14EBR.CanDismemberHitZone" );

	UKFDT_Ballistic_M14EBR_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_M4Shotgun.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_M4Shotgun::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_M4Shotgun.CanDismemberHitZone" );

	UKFDT_Ballistic_M4Shotgun_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_M99.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_M99::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_M99.CanDismemberHitZone" );

	UKFDT_Ballistic_M99_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_MB500.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_MB500::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_MB500.CanDismemberHitZone" );

	UKFDT_Ballistic_MB500_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_MedicRifleGrenadeLauncher.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Ballistic_MedicRifleGrenadeLauncher::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_MedicRifleGrenadeLauncher.ApplySecondaryDamage" );

	UKFDT_Ballistic_MedicRifleGrenadeLauncher_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_MKB42.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_MKB42::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_MKB42.CanDismemberHitZone" );

	UKFDT_Ballistic_MKB42_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_NailShotgun.GetPinProjectileClass
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_NailShotgun::GetPinProjectileClass ( )
{
	static UFunction* pFnGetPinProjectileClass = NULL;

	if ( ! pFnGetPinProjectileClass )
		pFnGetPinProjectileClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_NailShotgun.GetPinProjectileClass" );

	UKFDT_Ballistic_NailShotgun_execGetPinProjectileClass_Parms GetPinProjectileClass_Parms;

	this->ProcessEvent ( pFnGetPinProjectileClass, &GetPinProjectileClass_Parms, NULL );
};

// Function kfgamecontent.KFProj_Nail_Nailgun.Landed
// [0x00020102] 
// Parameters infos:

void AKFProj_Nail_Nailgun::Landed ( )
{
	static UFunction* pFnLanded = NULL;

	if ( ! pFnLanded )
		pFnLanded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Nail_Nailgun.Landed" );

	AKFProj_Nail_Nailgun_execLanded_Parms Landed_Parms;

	this->ProcessEvent ( pFnLanded, &Landed_Parms, NULL );
};

// Function kfgamecontent.KFProj_Nail_Nailgun.Tick
// [0x00020102] 
// Parameters infos:

void AKFProj_Nail_Nailgun::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Nail_Nailgun.Tick" );

	AKFProj_Nail_Nailgun_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFProj_Nail_Nailgun.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_Nail_Nailgun::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Nail_Nailgun.ProcessTouch" );

	AKFProj_Nail_Nailgun_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_Nail_Nailgun.HitWall
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Nail_Nailgun::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Nail_Nailgun.HitWall" );

	AKFProj_Nail_Nailgun_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_PatMinigun.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Ballistic_PatMinigun::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_PatMinigun.GetKillerDialogID" );

	UKFDT_Ballistic_PatMinigun_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Pistol_Medic.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Ballistic_Pistol_Medic::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Pistol_Medic.ApplySecondaryDamage" );

	UKFDT_Ballistic_Pistol_Medic_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_RailGun.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_RailGun::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_RailGun.CanDismemberHitZone" );

	UKFDT_Ballistic_RailGun_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_RailGun.GetBoneToDismember
// [0x00422102] 
// Parameters infos:

void UKFDT_Ballistic_RailGun::GetBoneToDismember ( )
{
	static UFunction* pFnGetBoneToDismember = NULL;

	if ( ! pFnGetBoneToDismember )
		pFnGetBoneToDismember = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_RailGun.GetBoneToDismember" );

	UKFDT_Ballistic_RailGun_execGetBoneToDismember_Parms GetBoneToDismember_Parms;

	this->ProcessEvent ( pFnGetBoneToDismember, &GetBoneToDismember_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_SCAR.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_SCAR::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_SCAR.CanDismemberHitZone" );

	UKFDT_Ballistic_SCAR_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Shotgun_Medic.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Ballistic_Shotgun_Medic::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Shotgun_Medic.ApplySecondaryDamage" );

	UKFDT_Ballistic_Shotgun_Medic_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Shotgun_Medic.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_Shotgun_Medic::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Shotgun_Medic.CanDismemberHitZone" );

	UKFDT_Ballistic_Shotgun_Medic_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_SMG_Medic.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Ballistic_SMG_Medic::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_SMG_Medic.ApplySecondaryDamage" );

	UKFDT_Ballistic_SMG_Medic_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_SW500.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_SW500::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_SW500.CanDismemberHitZone" );

	UKFDT_Ballistic_SW500_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Ballistic_Winchester.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Ballistic_Winchester::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Ballistic_Winchester.CanDismemberHitZone" );

	UKFDT_Ballistic_Winchester_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_SwingMinigame.PlayImpactHitEffects
// [0x00026002] 
// Parameters infos:

void UKFDT_SwingMinigame::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_SwingMinigame.PlayImpactHitEffects" );

	UKFDT_SwingMinigame_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFDT_Bludgeon_BloatKing.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Bludgeon_BloatKing::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Bludgeon_BloatKing.GetKillerDialogID" );

	UKFDT_Bludgeon_BloatKing_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Bludgeon_BloatKingGorge.PlayImpactHitEffects
// [0x00026002] 
// Parameters infos:

void UKFDT_Bludgeon_BloatKingGorge::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Bludgeon_BloatKingGorge.PlayImpactHitEffects" );

	UKFDT_Bludgeon_BloatKingGorge_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFDT_Bludgeon_Patriarch.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Bludgeon_Patriarch::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Bludgeon_Patriarch.GetKillerDialogID" );

	UKFDT_Bludgeon_Patriarch_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Bludgeon_PatriarchKick.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Bludgeon_PatriarchKick::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Bludgeon_PatriarchKick.GetKillerDialogID" );

	UKFDT_Bludgeon_PatriarchKick_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Bludgeon_PatriarchMetal.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Bludgeon_PatriarchMetal::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Bludgeon_PatriarchMetal.GetKillerDialogID" );

	UKFDT_Bludgeon_PatriarchMetal_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Explosive_CrawlerSuicide.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Explosive_CrawlerSuicide::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Explosive_CrawlerSuicide.CanDismemberHitZone" );

	UKFDT_Explosive_CrawlerSuicide_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Explosive_HansHEGrenade.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Explosive_HansHEGrenade::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Explosive_HansHEGrenade.GetKillerDialogID" );

	UKFDT_Explosive_HansHEGrenade_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Explosive_HuskCannon.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Explosive_HuskCannon::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Explosive_HuskCannon.ApplySecondaryDamage" );

	UKFDT_Explosive_HuskCannon_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Explosive_HuskSuicide.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Explosive_HuskSuicide::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Explosive_HuskSuicide.CanDismemberHitZone" );

	UKFDT_Explosive_HuskSuicide_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Explosive_PatMissile.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Explosive_PatMissile::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Explosive_PatMissile.GetKillerDialogID" );

	UKFDT_Explosive_PatMissile_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Explosive_PatMortar.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Explosive_PatMortar::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Explosive_PatMortar.GetKillerDialogID" );

	UKFDT_Explosive_PatMortar_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_CaulkBurn.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_CaulkBurn::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_CaulkBurn.GetDamageeDialogID" );

	UKFDT_Fire_CaulkBurn_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_CaulkBurn.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_CaulkBurn::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_CaulkBurn.GetDamagerDialogID" );

	UKFDT_Fire_CaulkBurn_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_CaulkBurn.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_CaulkBurn::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_CaulkBurn.GetKillerDialogID" );

	UKFDT_Fire_CaulkBurn_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_FlameThrower.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_FlameThrower::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_FlameThrower.GetDamageeDialogID" );

	UKFDT_Fire_FlameThrower_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_FlameThrower.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_FlameThrower::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_FlameThrower.GetDamagerDialogID" );

	UKFDT_Fire_FlameThrower_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_FlameThrower.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_FlameThrower::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_FlameThrower.GetKillerDialogID" );

	UKFDT_Fire_FlameThrower_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_FlareGun.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Fire_FlareGun::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_FlareGun.ApplySecondaryDamage" );

	UKFDT_Fire_FlareGun_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_FlareGunDoT.GetDamageeDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_FlareGunDoT::GetDamageeDialogID ( )
{
	static UFunction* pFnGetDamageeDialogID = NULL;

	if ( ! pFnGetDamageeDialogID )
		pFnGetDamageeDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_FlareGunDoT.GetDamageeDialogID" );

	UKFDT_Fire_FlareGunDoT_execGetDamageeDialogID_Parms GetDamageeDialogID_Parms;

	this->ProcessEvent ( pFnGetDamageeDialogID, &GetDamageeDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_FlareGunDoT.GetDamagerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_FlareGunDoT::GetDamagerDialogID ( )
{
	static UFunction* pFnGetDamagerDialogID = NULL;

	if ( ! pFnGetDamagerDialogID )
		pFnGetDamagerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_FlareGunDoT.GetDamagerDialogID" );

	UKFDT_Fire_FlareGunDoT_execGetDamagerDialogID_Parms GetDamagerDialogID_Parms;

	this->ProcessEvent ( pFnGetDamagerDialogID, &GetDamagerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_FlareGunDoT.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Fire_FlareGunDoT::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_FlareGunDoT.GetKillerDialogID" );

	UKFDT_Fire_FlareGunDoT_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_Mac10.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Fire_Mac10::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_Mac10.ApplySecondaryDamage" );

	UKFDT_Fire_Mac10_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_Mac10.PlayImpactHitEffects
// [0x00026002] 
// Parameters infos:

void UKFDT_Fire_Mac10::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_Mac10.PlayImpactHitEffects" );

	UKFDT_Fire_Mac10_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFDT_Fire_Mac10.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Fire_Mac10::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Fire_Mac10.CanDismemberHitZone" );

	UKFDT_Fire_Mac10_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Freeze_FreezeGrenade.PlayImpactHitEffects
// [0x00026002] 
// Parameters infos:

void UKFDT_Freeze_FreezeGrenade::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Freeze_FreezeGrenade.PlayImpactHitEffects" );

	UKFDT_Freeze_FreezeGrenade_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFDT_Freeze_FreezeThrower.PlayImpactHitEffects
// [0x00026002] 
// Parameters infos:

void UKFDT_Freeze_FreezeThrower::PlayImpactHitEffects ( )
{
	static UFunction* pFnPlayImpactHitEffects = NULL;

	if ( ! pFnPlayImpactHitEffects )
		pFnPlayImpactHitEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Freeze_FreezeThrower.PlayImpactHitEffects" );

	UKFDT_Freeze_FreezeThrower_execPlayImpactHitEffects_Parms PlayImpactHitEffects_Parms;

	this->ProcessEvent ( pFnPlayImpactHitEffects, &PlayImpactHitEffects_Parms, NULL );
};

// Function kfgamecontent.KFDT_Krampus_ChipperPit.ApplyKillResults
// [0x00022002] 
// Parameters infos:

void UKFDT_Krampus_ChipperPit::ApplyKillResults ( )
{
	static UFunction* pFnApplyKillResults = NULL;

	if ( ! pFnApplyKillResults )
		pFnApplyKillResults = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Krampus_ChipperPit.ApplyKillResults" );

	UKFDT_Krampus_ChipperPit_execApplyKillResults_Parms ApplyKillResults_Parms;

	this->ProcessEvent ( pFnApplyKillResults, &ApplyKillResults_Parms, NULL );
};

// Function kfgamecontent.KFDT_Microwave_Beam.CheckObliterate
// [0x00022002] 
// Parameters infos:

void UKFDT_Microwave_Beam::CheckObliterate ( )
{
	static UFunction* pFnCheckObliterate = NULL;

	if ( ! pFnCheckObliterate )
		pFnCheckObliterate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Microwave_Beam.CheckObliterate" );

	UKFDT_Microwave_Beam_execCheckObliterate_Parms CheckObliterate_Parms;

	this->ProcessEvent ( pFnCheckObliterate, &CheckObliterate_Parms, NULL );
};

// Function kfgamecontent.KFDT_Piercing_KnifeStab_FieldMedic.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Piercing_KnifeStab_FieldMedic::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Piercing_KnifeStab_FieldMedic.ApplySecondaryDamage" );

	UKFDT_Piercing_KnifeStab_FieldMedic_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Piercing_NadeFragment.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Piercing_NadeFragment::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Piercing_NadeFragment.CanDismemberHitZone" );

	UKFDT_Piercing_NadeFragment_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Piercing_NailFragment.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Piercing_NailFragment::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Piercing_NailFragment.CanDismemberHitZone" );

	UKFDT_Piercing_NailFragment_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Eviscerator.ModifyDismembermentHitImpulse
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_Eviscerator::ModifyDismembermentHitImpulse ( )
{
	static UFunction* pFnModifyDismembermentHitImpulse = NULL;

	if ( ! pFnModifyDismembermentHitImpulse )
		pFnModifyDismembermentHitImpulse = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Eviscerator.ModifyDismembermentHitImpulse" );

	UKFDT_Slashing_Eviscerator_execModifyDismembermentHitImpulse_Parms ModifyDismembermentHitImpulse_Parms;

	this->ProcessEvent ( pFnModifyDismembermentHitImpulse, &ModifyDismembermentHitImpulse_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Eviscerator.GetBoneToDismember
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_Eviscerator::GetBoneToDismember ( )
{
	static UFunction* pFnGetBoneToDismember = NULL;

	if ( ! pFnGetBoneToDismember )
		pFnGetBoneToDismember = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Eviscerator.GetBoneToDismember" );

	UKFDT_Slashing_Eviscerator_execGetBoneToDismember_Parms GetBoneToDismember_Parms;

	this->ProcessEvent ( pFnGetBoneToDismember, &GetBoneToDismember_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Eviscerator.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing_Eviscerator::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Eviscerator.CanDismemberHitZone" );

	UKFDT_Slashing_Eviscerator_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_EvisceratorProj.GetBoneToDismember
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_EvisceratorProj::GetBoneToDismember ( )
{
	static UFunction* pFnGetBoneToDismember = NULL;

	if ( ! pFnGetBoneToDismember )
		pFnGetBoneToDismember = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_EvisceratorProj.GetBoneToDismember" );

	UKFDT_Slashing_EvisceratorProj_execGetBoneToDismember_Parms GetBoneToDismember_Parms;

	this->ProcessEvent ( pFnGetBoneToDismember, &GetBoneToDismember_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_EvisceratorProj.GetLastSlashDirection
// [0x00822102] 
// Parameters infos:

void UKFDT_Slashing_EvisceratorProj::GetLastSlashDirection ( )
{
	static UFunction* pFnGetLastSlashDirection = NULL;

	if ( ! pFnGetLastSlashDirection )
		pFnGetLastSlashDirection = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_EvisceratorProj.GetLastSlashDirection" );

	UKFDT_Slashing_EvisceratorProj_execGetLastSlashDirection_Parms GetLastSlashDirection_Parms;

	this->ProcessEvent ( pFnGetLastSlashDirection, &GetLastSlashDirection_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_EvisceratorProj.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing_EvisceratorProj::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_EvisceratorProj.CanDismemberHitZone" );

	UKFDT_Slashing_EvisceratorProj_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Katana.ModifyDismembermentHitImpulse
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_Katana::ModifyDismembermentHitImpulse ( )
{
	static UFunction* pFnModifyDismembermentHitImpulse = NULL;

	if ( ! pFnModifyDismembermentHitImpulse )
		pFnModifyDismembermentHitImpulse = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Katana.ModifyDismembermentHitImpulse" );

	UKFDT_Slashing_Katana_execModifyDismembermentHitImpulse_Parms ModifyDismembermentHitImpulse_Parms;

	this->ProcessEvent ( pFnModifyDismembermentHitImpulse, &ModifyDismembermentHitImpulse_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Katana.GetBoneToDismember
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_Katana::GetBoneToDismember ( )
{
	static UFunction* pFnGetBoneToDismember = NULL;

	if ( ! pFnGetBoneToDismember )
		pFnGetBoneToDismember = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Katana.GetBoneToDismember" );

	UKFDT_Slashing_Katana_execGetBoneToDismember_Parms GetBoneToDismember_Parms;

	this->ProcessEvent ( pFnGetBoneToDismember, &GetBoneToDismember_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Katana.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing_Katana::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Katana.CanDismemberHitZone" );

	UKFDT_Slashing_Katana_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_KatanaHeavy.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing_KatanaHeavy::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_KatanaHeavy.CanDismemberHitZone" );

	UKFDT_Slashing_KatanaHeavy_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Knife.ModifyDismembermentHitImpulse
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_Knife::ModifyDismembermentHitImpulse ( )
{
	static UFunction* pFnModifyDismembermentHitImpulse = NULL;

	if ( ! pFnModifyDismembermentHitImpulse )
		pFnModifyDismembermentHitImpulse = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Knife.ModifyDismembermentHitImpulse" );

	UKFDT_Slashing_Knife_execModifyDismembermentHitImpulse_Parms ModifyDismembermentHitImpulse_Parms;

	this->ProcessEvent ( pFnModifyDismembermentHitImpulse, &ModifyDismembermentHitImpulse_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Knife.GetBoneToDismember
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_Knife::GetBoneToDismember ( )
{
	static UFunction* pFnGetBoneToDismember = NULL;

	if ( ! pFnGetBoneToDismember )
		pFnGetBoneToDismember = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Knife.GetBoneToDismember" );

	UKFDT_Slashing_Knife_execGetBoneToDismember_Parms GetBoneToDismember_Parms;

	this->ProcessEvent ( pFnGetBoneToDismember, &GetBoneToDismember_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Knife.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing_Knife::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Knife.CanDismemberHitZone" );

	UKFDT_Slashing_Knife_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Knife_Medic.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Slashing_Knife_Medic::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Knife_Medic.ApplySecondaryDamage" );

	UKFDT_Slashing_Knife_Medic_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_KnifeHeavy.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing_KnifeHeavy::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_KnifeHeavy.CanDismemberHitZone" );

	UKFDT_Slashing_KnifeHeavy_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_KnifeHeavy_Medic.ApplySecondaryDamage
// [0x00026002] 
// Parameters infos:

void UKFDT_Slashing_KnifeHeavy_Medic::ApplySecondaryDamage ( )
{
	static UFunction* pFnApplySecondaryDamage = NULL;

	if ( ! pFnApplySecondaryDamage )
		pFnApplySecondaryDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_KnifeHeavy_Medic.ApplySecondaryDamage" );

	UKFDT_Slashing_KnifeHeavy_Medic_execApplySecondaryDamage_Parms ApplySecondaryDamage_Parms;

	this->ProcessEvent ( pFnApplySecondaryDamage, &ApplySecondaryDamage_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Patriarch.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Slashing_Patriarch::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Patriarch.GetKillerDialogID" );

	UKFDT_Slashing_Patriarch_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_PatTentacle.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Slashing_PatTentacle::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_PatTentacle.GetKillerDialogID" );

	UKFDT_Slashing_PatTentacle_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Zweihander.ModifyDismembermentHitImpulse
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_Zweihander::ModifyDismembermentHitImpulse ( )
{
	static UFunction* pFnModifyDismembermentHitImpulse = NULL;

	if ( ! pFnModifyDismembermentHitImpulse )
		pFnModifyDismembermentHitImpulse = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Zweihander.ModifyDismembermentHitImpulse" );

	UKFDT_Slashing_Zweihander_execModifyDismembermentHitImpulse_Parms ModifyDismembermentHitImpulse_Parms;

	this->ProcessEvent ( pFnModifyDismembermentHitImpulse, &ModifyDismembermentHitImpulse_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Zweihander.GetBoneToDismember
// [0x00422102] 
// Parameters infos:

void UKFDT_Slashing_Zweihander::GetBoneToDismember ( )
{
	static UFunction* pFnGetBoneToDismember = NULL;

	if ( ! pFnGetBoneToDismember )
		pFnGetBoneToDismember = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Zweihander.GetBoneToDismember" );

	UKFDT_Slashing_Zweihander_execGetBoneToDismember_Parms GetBoneToDismember_Parms;

	this->ProcessEvent ( pFnGetBoneToDismember, &GetBoneToDismember_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_Zweihander.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing_Zweihander::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_Zweihander.CanDismemberHitZone" );

	UKFDT_Slashing_Zweihander_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Slashing_ZweihanderHeavy.CanDismemberHitZone
// [0x00022102] 
// Parameters infos:

void UKFDT_Slashing_ZweihanderHeavy::CanDismemberHitZone ( )
{
	static UFunction* pFnCanDismemberHitZone = NULL;

	if ( ! pFnCanDismemberHitZone )
		pFnCanDismemberHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Slashing_ZweihanderHeavy.CanDismemberHitZone" );

	UKFDT_Slashing_ZweihanderHeavy_execCanDismemberHitZone_Parms CanDismemberHitZone_Parms;

	this->ProcessEvent ( pFnCanDismemberHitZone, &CanDismemberHitZone_Parms, NULL );
};

// Function kfgamecontent.KFDT_Toxic_HansGrenade.GetKillerDialogID
// [0x00022002] 
// Parameters infos:

void UKFDT_Toxic_HansGrenade::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDT_Toxic_HansGrenade.GetKillerDialogID" );

	UKFDT_Toxic_HansGrenade_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPhysicsVolume.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPhysicsVolume::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPhysicsVolume.Tick" );

	AKFPhysicsVolume_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFPhysicsVolume.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPhysicsVolume::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPhysicsVolume.UnTouch" );

	AKFPhysicsVolume_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function kfgamecontent.KFPhysicsVolume.CausePainTo
// [0x00020002] 
// Parameters infos:

void AKFPhysicsVolume::CausePainTo ( )
{
	static UFunction* pFnCausePainTo = NULL;

	if ( ! pFnCausePainTo )
		pFnCausePainTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPhysicsVolume.CausePainTo" );

	AKFPhysicsVolume_execCausePainTo_Parms CausePainTo_Parms;

	this->ProcessEvent ( pFnCausePainTo, &CausePainTo_Parms, NULL );
};

// Function kfgamecontent.KFDynamicPhysicsVolume.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFDynamicPhysicsVolume::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFDynamicPhysicsVolume.PostBeginPlay" );

	AKFDynamicPhysicsVolume_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_GroundFire.SpawnExplosionParticleSystem
// [0x00020102] 
// Parameters infos:

void AKFExplosion_GroundFire::SpawnExplosionParticleSystem ( )
{
	static UFunction* pFnSpawnExplosionParticleSystem = NULL;

	if ( ! pFnSpawnExplosionParticleSystem )
		pFnSpawnExplosionParticleSystem = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_GroundFire.SpawnExplosionParticleSystem" );

	AKFExplosion_GroundFire_execSpawnExplosionParticleSystem_Parms SpawnExplosionParticleSystem_Parms;

	this->ProcessEvent ( pFnSpawnExplosionParticleSystem, &SpawnExplosionParticleSystem_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_GroundIce.SpawnExplosionParticleSystem
// [0x00020102] 
// Parameters infos:

void AKFExplosion_GroundIce::SpawnExplosionParticleSystem ( )
{
	static UFunction* pFnSpawnExplosionParticleSystem = NULL;

	if ( ! pFnSpawnExplosionParticleSystem )
		pFnSpawnExplosionParticleSystem = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_GroundIce.SpawnExplosionParticleSystem" );

	AKFExplosion_GroundIce_execSpawnExplosionParticleSystem_Parms SpawnExplosionParticleSystem_Parms;

	this->ProcessEvent ( pFnSpawnExplosionParticleSystem, &SpawnExplosionParticleSystem_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_HansSmokeGrenade.GetEffectCheckRadius
// [0x00020002] 
// Parameters infos:

void AKFExplosion_HansSmokeGrenade::GetEffectCheckRadius ( )
{
	static UFunction* pFnGetEffectCheckRadius = NULL;

	if ( ! pFnGetEffectCheckRadius )
		pFnGetEffectCheckRadius = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_HansSmokeGrenade.GetEffectCheckRadius" );

	AKFExplosion_HansSmokeGrenade_execGetEffectCheckRadius_Parms GetEffectCheckRadius_Parms;

	this->ProcessEvent ( pFnGetEffectCheckRadius, &GetEffectCheckRadius_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_HansSmokeGrenade.DoExplosionDamage
// [0x00080102] 
// Parameters infos:

void AKFExplosion_HansSmokeGrenade::DoExplosionDamage ( )
{
	static UFunction* pFnDoExplosionDamage = NULL;

	if ( ! pFnDoExplosionDamage )
		pFnDoExplosionDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_HansSmokeGrenade.DoExplosionDamage" );

	AKFExplosion_HansSmokeGrenade_execDoExplosionDamage_Parms DoExplosionDamage_Parms;

	this->ProcessEvent ( pFnDoExplosionDamage, &DoExplosionDamage_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_HansSmokeGrenade.Destroyed
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFExplosion_HansSmokeGrenade::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_HansSmokeGrenade.Destroyed" );

	AKFExplosion_HansSmokeGrenade_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_HansSmokeGrenade.Explode
// [0x00024102] 
// Parameters infos:

void AKFExplosion_HansSmokeGrenade::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_HansSmokeGrenade.Explode" );

	AKFExplosion_HansSmokeGrenade_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_HuskCannonFireballGroundFire.Timer_DelayExplosion
// [0x00020102] 
// Parameters infos:

void AKFExplosion_HuskCannonFireballGroundFire::Timer_DelayExplosion ( )
{
	static UFunction* pFnTimer_DelayExplosion = NULL;

	if ( ! pFnTimer_DelayExplosion )
		pFnTimer_DelayExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_HuskCannonFireballGroundFire.Timer_DelayExplosion" );

	AKFExplosion_HuskCannonFireballGroundFire_execTimer_DelayExplosion_Parms Timer_DelayExplosion_Parms;

	this->ProcessEvent ( pFnTimer_DelayExplosion, &Timer_DelayExplosion_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_HuskCannonFireballGroundFire.Explode
// [0x00024102] 
// Parameters infos:

void AKFExplosion_HuskCannonFireballGroundFire::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_HuskCannonFireballGroundFire.Explode" );

	AKFExplosion_HuskCannonFireballGroundFire_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_MedicGrenade.SpawnExplosionParticleSystem
// [0x00020102] 
// Parameters infos:

void AKFExplosion_MedicGrenade::SpawnExplosionParticleSystem ( )
{
	static UFunction* pFnSpawnExplosionParticleSystem = NULL;

	if ( ! pFnSpawnExplosionParticleSystem )
		pFnSpawnExplosionParticleSystem = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_MedicGrenade.SpawnExplosionParticleSystem" );

	AKFExplosion_MedicGrenade_execSpawnExplosionParticleSystem_Parms SpawnExplosionParticleSystem_Parms;

	this->ProcessEvent ( pFnSpawnExplosionParticleSystem, &SpawnExplosionParticleSystem_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_MedicGrenade.AffectsPawn
// [0x00080102] 
// Parameters infos:

void AKFExplosion_MedicGrenade::AffectsPawn ( )
{
	static UFunction* pFnAffectsPawn = NULL;

	if ( ! pFnAffectsPawn )
		pFnAffectsPawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_MedicGrenade.AffectsPawn" );

	AKFExplosion_MedicGrenade_execAffectsPawn_Parms AffectsPawn_Parms;

	this->ProcessEvent ( pFnAffectsPawn, &AffectsPawn_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_MedicGrenade.Explode
// [0x00024102] 
// Parameters infos:

void AKFExplosion_MedicGrenade::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_MedicGrenade.Explode" );

	AKFExplosion_MedicGrenade_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function kfgamecontent.KFProj_MedicGrenade.StopFlightEffects
// [0x00080100] 
// Parameters infos:

void AKFProj_MedicGrenade::StopFlightEffects ( )
{
	static UFunction* pFnStopFlightEffects = NULL;

	if ( ! pFnStopFlightEffects )
		pFnStopFlightEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MedicGrenade.StopFlightEffects" );

	AKFProj_MedicGrenade_execStopFlightEffects_Parms StopFlightEffects_Parms;

	this->ProcessEvent ( pFnStopFlightEffects, &StopFlightEffects_Parms, NULL );
};

// Function kfgamecontent.KFProj_MedicGrenade.Destroyed
// [0x00020102] 
// Parameters infos:

void AKFProj_MedicGrenade::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MedicGrenade.Destroyed" );

	AKFProj_MedicGrenade_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFProj_MedicGrenade.GrenadeIsAtRest
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_MedicGrenade::eventGrenadeIsAtRest ( )
{
	static UFunction* pFnGrenadeIsAtRest = NULL;

	if ( ! pFnGrenadeIsAtRest )
		pFnGrenadeIsAtRest = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MedicGrenade.GrenadeIsAtRest" );

	AKFProj_MedicGrenade_eventGrenadeIsAtRest_Parms GrenadeIsAtRest_Parms;

	this->ProcessEvent ( pFnGrenadeIsAtRest, &GrenadeIsAtRest_Parms, NULL );
};

// Function kfgamecontent.KFProj_MedicGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_MedicGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MedicGrenade.PostBeginPlay" );

	AKFProj_MedicGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_PlayerBloatPukeMine.SpawnExplosionParticleSystem
// [0x00020102] 
// Parameters infos:

void AKFExplosion_PlayerBloatPukeMine::SpawnExplosionParticleSystem ( )
{
	static UFunction* pFnSpawnExplosionParticleSystem = NULL;

	if ( ! pFnSpawnExplosionParticleSystem )
		pFnSpawnExplosionParticleSystem = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_PlayerBloatPukeMine.SpawnExplosionParticleSystem" );

	AKFExplosion_PlayerBloatPukeMine_execSpawnExplosionParticleSystem_Parms SpawnExplosionParticleSystem_Parms;

	this->ProcessEvent ( pFnSpawnExplosionParticleSystem, &SpawnExplosionParticleSystem_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_SirenScream.HandleIgnoredVictim
// [0x00020002] 
// Parameters infos:

void AKFExplosion_SirenScream::HandleIgnoredVictim ( )
{
	static UFunction* pFnHandleIgnoredVictim = NULL;

	if ( ! pFnHandleIgnoredVictim )
		pFnHandleIgnoredVictim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_SirenScream.HandleIgnoredVictim" );

	AKFExplosion_SirenScream_execHandleIgnoredVictim_Parms HandleIgnoredVictim_Parms;

	this->ProcessEvent ( pFnHandleIgnoredVictim, &HandleIgnoredVictim_Parms, NULL );
};

// Function kfgamecontent.KFExplosion_SirenScream.SpecialCringeEffectsFor
// [0x00080002] 
// Parameters infos:

void AKFExplosion_SirenScream::SpecialCringeEffectsFor ( )
{
	static UFunction* pFnSpecialCringeEffectsFor = NULL;

	if ( ! pFnSpecialCringeEffectsFor )
		pFnSpecialCringeEffectsFor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosion_SirenScream.SpecialCringeEffectsFor" );

	AKFExplosion_SirenScream_execSpecialCringeEffectsFor_Parms SpecialCringeEffectsFor_Parms;

	this->ProcessEvent ( pFnSpecialCringeEffectsFor, &SpecialCringeEffectsFor_Parms, NULL );
};

// Function kfgamecontent.KFExplosionActor_HuskCannon.GetDamageFor
// [0x00020102] 
// Parameters infos:

void AKFExplosionActor_HuskCannon::GetDamageFor ( )
{
	static UFunction* pFnGetDamageFor = NULL;

	if ( ! pFnGetDamageFor )
		pFnGetDamageFor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosionActor_HuskCannon.GetDamageFor" );

	AKFExplosionActor_HuskCannon_execGetDamageFor_Parms GetDamageFor_Parms;

	this->ProcessEvent ( pFnGetDamageFor, &GetDamageFor_Parms, NULL );
};

// Function kfgamecontent.KFExplosionActorC4.GetDamageFor
// [0x00020102] 
// Parameters infos:

void AKFExplosionActorC4::GetDamageFor ( )
{
	static UFunction* pFnGetDamageFor = NULL;

	if ( ! pFnGetDamageFor )
		pFnGetDamageFor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFExplosionActorC4.GetDamageFor" );

	AKFExplosionActorC4_execGetDamageFor_Parms GetDamageFor_Parms;

	this->ProcessEvent ( pFnGetDamageFor, &GetDamageFor_Parms, NULL );
};

// Function kfgamecontent.KFGameConductorVersus.UpdateOverallStatus
// [0x00020002] 
// Parameters infos:

void UKFGameConductorVersus::UpdateOverallStatus ( )
{
	static UFunction* pFnUpdateOverallStatus = NULL;

	if ( ! pFnUpdateOverallStatus )
		pFnUpdateOverallStatus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameConductorVersus.UpdateOverallStatus" );

	UKFGameConductorVersus_execUpdateOverallStatus_Parms UpdateOverallStatus_Parms;

	this->ProcessEvent ( pFnUpdateOverallStatus, &UpdateOverallStatus_Parms, NULL );
};

// Function kfgamecontent.KFGameConductorVersus.TimerUpdate
// [0x00020002] 
// Parameters infos:

void UKFGameConductorVersus::TimerUpdate ( )
{
	static UFunction* pFnTimerUpdate = NULL;

	if ( ! pFnTimerUpdate )
		pFnTimerUpdate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameConductorVersus.TimerUpdate" );

	UKFGameConductorVersus_execTimerUpdate_Parms TimerUpdate_Parms;

	this->ProcessEvent ( pFnTimerUpdate, &TimerUpdate_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.GetHitZoneSkinTypeEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::GetHitZoneSkinTypeEffects ( )
{
	static UFunction* pFnGetHitZoneSkinTypeEffects = NULL;

	if ( ! pFnGetHitZoneSkinTypeEffects )
		pFnGetHitZoneSkinTypeEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.GetHitZoneSkinTypeEffects" );

	AKFPawn_ZedHans_execGetHitZoneSkinTypeEffects_Parms GetHitZoneSkinTypeEffects_Parms;

	this->ProcessEvent ( pFnGetHitZoneSkinTypeEffects, &GetHitZoneSkinTypeEffects_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.UpdateBattlePhaseParticles
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::UpdateBattlePhaseParticles ( )
{
	static UFunction* pFnUpdateBattlePhaseParticles = NULL;

	if ( ! pFnUpdateBattlePhaseParticles )
		pFnUpdateBattlePhaseParticles = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.UpdateBattlePhaseParticles" );

	AKFPawn_ZedHans_execUpdateBattlePhaseParticles_Parms UpdateBattlePhaseParticles_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseParticles, &UpdateBattlePhaseParticles_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.UpdateBattlePhaseMaterials
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::UpdateBattlePhaseMaterials ( )
{
	static UFunction* pFnUpdateBattlePhaseMaterials = NULL;

	if ( ! pFnUpdateBattlePhaseMaterials )
		pFnUpdateBattlePhaseMaterials = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.UpdateBattlePhaseMaterials" );

	AKFPawn_ZedHans_execUpdateBattlePhaseMaterials_Parms UpdateBattlePhaseMaterials_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseMaterials, &UpdateBattlePhaseMaterials_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.UpdateBattlePhaseLights
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::UpdateBattlePhaseLights ( )
{
	static UFunction* pFnUpdateBattlePhaseLights = NULL;

	if ( ! pFnUpdateBattlePhaseLights )
		pFnUpdateBattlePhaseLights = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.UpdateBattlePhaseLights" );

	AKFPawn_ZedHans_execUpdateBattlePhaseLights_Parms UpdateBattlePhaseLights_Parms;

	this->ProcessEvent ( pFnUpdateBattlePhaseLights, &UpdateBattlePhaseLights_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.OnBattlePhaseChanged
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::OnBattlePhaseChanged ( )
{
	static UFunction* pFnOnBattlePhaseChanged = NULL;

	if ( ! pFnOnBattlePhaseChanged )
		pFnOnBattlePhaseChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.OnBattlePhaseChanged" );

	AKFPawn_ZedHans_execOnBattlePhaseChanged_Parms OnBattlePhaseChanged_Parms;

	this->ProcessEvent ( pFnOnBattlePhaseChanged, &OnBattlePhaseChanged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.IncrementBattlePhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::IncrementBattlePhase ( )
{
	static UFunction* pFnIncrementBattlePhase = NULL;

	if ( ! pFnIncrementBattlePhase )
		pFnIncrementBattlePhase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.IncrementBattlePhase" );

	AKFPawn_ZedHans_execIncrementBattlePhase_Parms IncrementBattlePhase_Parms;

	this->ProcessEvent ( pFnIncrementBattlePhase, &IncrementBattlePhase_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.TerminateEffectsOnDeath" );

	AKFPawn_ZedHans_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.DetachShieldFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::DetachShieldFX ( )
{
	static UFunction* pFnDetachShieldFX = NULL;

	if ( ! pFnDetachShieldFX )
		pFnDetachShieldFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.DetachShieldFX" );

	AKFPawn_ZedHans_execDetachShieldFX_Parms DetachShieldFX_Parms;

	this->ProcessEvent ( pFnDetachShieldFX, &DetachShieldFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.StopHuntAndHealModeFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::StopHuntAndHealModeFX ( )
{
	static UFunction* pFnStopHuntAndHealModeFX = NULL;

	if ( ! pFnStopHuntAndHealModeFX )
		pFnStopHuntAndHealModeFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.StopHuntAndHealModeFX" );

	AKFPawn_ZedHans_execStopHuntAndHealModeFX_Parms StopHuntAndHealModeFX_Parms;

	this->ProcessEvent ( pFnStopHuntAndHealModeFX, &StopHuntAndHealModeFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.BreakShield
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::BreakShield ( )
{
	static UFunction* pFnBreakShield = NULL;

	if ( ! pFnBreakShield )
		pFnBreakShield = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.BreakShield" );

	AKFPawn_ZedHans_execBreakShield_Parms BreakShield_Parms;

	this->ProcessEvent ( pFnBreakShield, &BreakShield_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.MakeVectorFromColor
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedHans::MakeVectorFromColor ( )
{
	static UFunction* pFnMakeVectorFromColor = NULL;

	if ( ! pFnMakeVectorFromColor )
		pFnMakeVectorFromColor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.MakeVectorFromColor" );

	AKFPawn_ZedHans_execMakeVectorFromColor_Parms MakeVectorFromColor_Parms;

	this->ProcessEvent ( pFnMakeVectorFromColor, &MakeVectorFromColor_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.UpdateShieldUIOnLocalController
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::UpdateShieldUIOnLocalController ( )
{
	static UFunction* pFnUpdateShieldUIOnLocalController = NULL;

	if ( ! pFnUpdateShieldUIOnLocalController )
		pFnUpdateShieldUIOnLocalController = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.UpdateShieldUIOnLocalController" );

	AKFPawn_ZedHans_execUpdateShieldUIOnLocalController_Parms UpdateShieldUIOnLocalController_Parms;

	this->ProcessEvent ( pFnUpdateShieldUIOnLocalController, &UpdateShieldUIOnLocalController_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.UpdateShieldColor
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::UpdateShieldColor ( )
{
	static UFunction* pFnUpdateShieldColor = NULL;

	if ( ! pFnUpdateShieldColor )
		pFnUpdateShieldColor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.UpdateShieldColor" );

	AKFPawn_ZedHans_execUpdateShieldColor_Parms UpdateShieldColor_Parms;

	this->ProcessEvent ( pFnUpdateShieldColor, &UpdateShieldColor_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.PlayHuntAndHealModeFX
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::PlayHuntAndHealModeFX ( )
{
	static UFunction* pFnPlayHuntAndHealModeFX = NULL;

	if ( ! pFnPlayHuntAndHealModeFX )
		pFnPlayHuntAndHealModeFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.PlayHuntAndHealModeFX" );

	AKFPawn_ZedHans_execPlayHuntAndHealModeFX_Parms PlayHuntAndHealModeFX_Parms;

	this->ProcessEvent ( pFnPlayHuntAndHealModeFX, &PlayHuntAndHealModeFX_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.SetHuntAndHealMode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::SetHuntAndHealMode ( )
{
	static UFunction* pFnSetHuntAndHealMode = NULL;

	if ( ! pFnSetHuntAndHealMode )
		pFnSetHuntAndHealMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.SetHuntAndHealMode" );

	AKFPawn_ZedHans_execSetHuntAndHealMode_Parms SetHuntAndHealMode_Parms;

	this->ProcessEvent ( pFnSetHuntAndHealMode, &SetHuntAndHealMode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.GetBumpAttackDamageType
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::GetBumpAttackDamageType ( )
{
	static UFunction* pFnGetBumpAttackDamageType = NULL;

	if ( ! pFnGetBumpAttackDamageType )
		pFnGetBumpAttackDamageType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.GetBumpAttackDamageType" );

	AKFPawn_ZedHans_execGetBumpAttackDamageType_Parms GetBumpAttackDamageType_Parms;

	this->ProcessEvent ( pFnGetBumpAttackDamageType, &GetBumpAttackDamageType_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.CanInjureHitZone
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::CanInjureHitZone ( )
{
	static UFunction* pFnCanInjureHitZone = NULL;

	if ( ! pFnCanInjureHitZone )
		pFnCanInjureHitZone = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.CanInjureHitZone" );

	AKFPawn_ZedHans_execCanInjureHitZone_Parms CanInjureHitZone_Parms;

	this->ProcessEvent ( pFnCanInjureHitZone, &CanInjureHitZone_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.TakeHitZoneDamage
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::TakeHitZoneDamage ( )
{
	static UFunction* pFnTakeHitZoneDamage = NULL;

	if ( ! pFnTakeHitZoneDamage )
		pFnTakeHitZoneDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.TakeHitZoneDamage" );

	AKFPawn_ZedHans_execTakeHitZoneDamage_Parms TakeHitZoneDamage_Parms;

	this->ProcessEvent ( pFnTakeHitZoneDamage, &TakeHitZoneDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.HealDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHans::eventHealDamage ( )
{
	static UFunction* pFnHealDamage = NULL;

	if ( ! pFnHealDamage )
		pFnHealDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.HealDamage" );

	AKFPawn_ZedHans_eventHealDamage_Parms HealDamage_Parms;

	this->ProcessEvent ( pFnHealDamage, &HealDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.TakeDamage
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHans::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.TakeDamage" );

	AKFPawn_ZedHans_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.PlayBossMusic
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::PlayBossMusic ( )
{
	static UFunction* pFnPlayBossMusic = NULL;

	if ( ! pFnPlayBossMusic )
		pFnPlayBossMusic = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.PlayBossMusic" );

	AKFPawn_ZedHans_execPlayBossMusic_Parms PlayBossMusic_Parms;

	this->ProcessEvent ( pFnPlayBossMusic, &PlayBossMusic_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.Timer_TickHansDialog
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::Timer_TickHansDialog ( )
{
	static UFunction* pFnTimer_TickHansDialog = NULL;

	if ( ! pFnTimer_TickHansDialog )
		pFnTimer_TickHansDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.Timer_TickHansDialog" );

	AKFPawn_ZedHans_execTimer_TickHansDialog_Parms Timer_TickHansDialog_Parms;

	this->ProcessEvent ( pFnTimer_TickHansDialog, &Timer_TickHansDialog_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedHans::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.GetTraderAdviceID" );

	AKFPawn_ZedHans_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.GetSpotterDialogID" );

	AKFPawn_ZedHans_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.GetKillerDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.GetKillerDialogID" );

	AKFPawn_ZedHans_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.DrawDebugOverheadText
// [0x00C20002] 
// Parameters infos:

void AKFPawn_ZedHans::DrawDebugOverheadText ( )
{
	static UFunction* pFnDrawDebugOverheadText = NULL;

	if ( ! pFnDrawDebugOverheadText )
		pFnDrawDebugOverheadText = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.DrawDebugOverheadText" );

	AKFPawn_ZedHans_execDrawDebugOverheadText_Parms DrawDebugOverheadText_Parms;

	this->ProcessEvent ( pFnDrawDebugOverheadText, &DrawDebugOverheadText_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.IsThrowingGrenade
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::IsThrowingGrenade ( )
{
	static UFunction* pFnIsThrowingGrenade = NULL;

	if ( ! pFnIsThrowingGrenade )
		pFnIsThrowingGrenade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.IsThrowingGrenade" );

	AKFPawn_ZedHans_execIsThrowingGrenade_Parms IsThrowingGrenade_Parms;

	this->ProcessEvent ( pFnIsThrowingGrenade, &IsThrowingGrenade_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.AddGrenadeSpread
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedHans::AddGrenadeSpread ( )
{
	static UFunction* pFnAddGrenadeSpread = NULL;

	if ( ! pFnAddGrenadeSpread )
		pFnAddGrenadeSpread = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.AddGrenadeSpread" );

	AKFPawn_ZedHans_execAddGrenadeSpread_Parms AddGrenadeSpread_Parms;

	this->ProcessEvent ( pFnAddGrenadeSpread, &AddGrenadeSpread_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.ThrowGrenade
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedHans::ThrowGrenade ( )
{
	static UFunction* pFnThrowGrenade = NULL;

	if ( ! pFnThrowGrenade )
		pFnThrowGrenade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.ThrowGrenade" );

	AKFPawn_ZedHans_execThrowGrenade_Parms ThrowGrenade_Parms;

	this->ProcessEvent ( pFnThrowGrenade, &ThrowGrenade_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.StartThrowingGrenade
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedHans::StartThrowingGrenade ( )
{
	static UFunction* pFnStartThrowingGrenade = NULL;

	if ( ! pFnStartThrowingGrenade )
		pFnStartThrowingGrenade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.StartThrowingGrenade" );

	AKFPawn_ZedHans_execStartThrowingGrenade_Parms StartThrowingGrenade_Parms;

	this->ProcessEvent ( pFnStartThrowingGrenade, &StartThrowingGrenade_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.CacheGrenadeThrowLocation
// [0x00824002] 
// Parameters infos:

void AKFPawn_ZedHans::CacheGrenadeThrowLocation ( )
{
	static UFunction* pFnCacheGrenadeThrowLocation = NULL;

	if ( ! pFnCacheGrenadeThrowLocation )
		pFnCacheGrenadeThrowLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.CacheGrenadeThrowLocation" );

	AKFPawn_ZedHans_execCacheGrenadeThrowLocation_Parms CacheGrenadeThrowLocation_Parms;

	this->ProcessEvent ( pFnCacheGrenadeThrowLocation, &CacheGrenadeThrowLocation_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.ANIMNOTIFY_AoENerveGas
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::ANIMNOTIFY_AoENerveGas ( )
{
	static UFunction* pFnANIMNOTIFY_AoENerveGas = NULL;

	if ( ! pFnANIMNOTIFY_AoENerveGas )
		pFnANIMNOTIFY_AoENerveGas = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.ANIMNOTIFY_AoENerveGas" );

	AKFPawn_ZedHans_execANIMNOTIFY_AoENerveGas_Parms ANIMNOTIFY_AoENerveGas_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_AoENerveGas, &ANIMNOTIFY_AoENerveGas_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.ANIMNOTIFY_AoEBlast
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::ANIMNOTIFY_AoEBlast ( )
{
	static UFunction* pFnANIMNOTIFY_AoEBlast = NULL;

	if ( ! pFnANIMNOTIFY_AoEBlast )
		pFnANIMNOTIFY_AoEBlast = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.ANIMNOTIFY_AoEBlast" );

	AKFPawn_ZedHans_execANIMNOTIFY_AoEBlast_Parms ANIMNOTIFY_AoEBlast_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_AoEBlast, &ANIMNOTIFY_AoEBlast_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.ANIMNOTIFY_TossGrenade_LeftHand
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::ANIMNOTIFY_TossGrenade_LeftHand ( )
{
	static UFunction* pFnANIMNOTIFY_TossGrenade_LeftHand = NULL;

	if ( ! pFnANIMNOTIFY_TossGrenade_LeftHand )
		pFnANIMNOTIFY_TossGrenade_LeftHand = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.ANIMNOTIFY_TossGrenade_LeftHand" );

	AKFPawn_ZedHans_execANIMNOTIFY_TossGrenade_LeftHand_Parms ANIMNOTIFY_TossGrenade_LeftHand_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_TossGrenade_LeftHand, &ANIMNOTIFY_TossGrenade_LeftHand_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.ANIMNOTIFY_TossGrenade_RightHand
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::ANIMNOTIFY_TossGrenade_RightHand ( )
{
	static UFunction* pFnANIMNOTIFY_TossGrenade_RightHand = NULL;

	if ( ! pFnANIMNOTIFY_TossGrenade_RightHand )
		pFnANIMNOTIFY_TossGrenade_RightHand = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.ANIMNOTIFY_TossGrenade_RightHand" );

	AKFPawn_ZedHans_execANIMNOTIFY_TossGrenade_RightHand_Parms ANIMNOTIFY_TossGrenade_RightHand_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_TossGrenade_RightHand, &ANIMNOTIFY_TossGrenade_RightHand_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.ShouldPlaySpecialMeleeAnims
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::ShouldPlaySpecialMeleeAnims ( )
{
	static UFunction* pFnShouldPlaySpecialMeleeAnims = NULL;

	if ( ! pFnShouldPlaySpecialMeleeAnims )
		pFnShouldPlaySpecialMeleeAnims = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.ShouldPlaySpecialMeleeAnims" );

	AKFPawn_ZedHans_execShouldPlaySpecialMeleeAnims_Parms ShouldPlaySpecialMeleeAnims_Parms;

	this->ProcessEvent ( pFnShouldPlaySpecialMeleeAnims, &ShouldPlaySpecialMeleeAnims_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.SetSprinting" );

	AKFPawn_ZedHans_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.SetWeaponStance
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedHans::SetWeaponStance ( )
{
	static UFunction* pFnSetWeaponStance = NULL;

	if ( ! pFnSetWeaponStance )
		pFnSetWeaponStance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.SetWeaponStance" );

	AKFPawn_ZedHans_execSetWeaponStance_Parms SetWeaponStance_Parms;

	this->ProcessEvent ( pFnSetWeaponStance, &SetWeaponStance_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.SetCharacterAnimationInfo
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans::SetCharacterAnimationInfo ( )
{
	static UFunction* pFnSetCharacterAnimationInfo = NULL;

	if ( ! pFnSetCharacterAnimationInfo )
		pFnSetCharacterAnimationInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.SetCharacterAnimationInfo" );

	AKFPawn_ZedHans_execSetCharacterAnimationInfo_Parms SetCharacterAnimationInfo_Parms;

	this->ProcessEvent ( pFnSetCharacterAnimationInfo, &SetCharacterAnimationInfo_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHans::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.PostInitAnimTree" );

	AKFPawn_ZedHans_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHans::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.PostBeginPlay" );

	AKFPawn_ZedHans_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedHans::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans.ReplicatedEvent" );

	AKFPawn_ZedHans_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_Cyst.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedClot_Cyst::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_Cyst.GetTraderAdviceID" );

	AKFPawn_ZedClot_Cyst_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedClot::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot.GetSpotterDialogID" );

	AKFPawn_ZedClot_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedClot::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot.PostInitAnimTree" );

	AKFPawn_ZedClot_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_Alpha.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedClot_Alpha::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_Alpha.GetTraderAdviceID" );

	AKFPawn_ZedClot_Alpha_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.SetSprinting" );

	AKFPawn_ZedClot_AlphaKing_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.SetEnraged
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::SetEnraged ( )
{
	static UFunction* pFnSetEnraged = NULL;

	if ( ! pFnSetEnraged )
		pFnSetEnraged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.SetEnraged" );

	AKFPawn_ZedClot_AlphaKing_execSetEnraged_Parms SetEnraged_Parms;

	this->ProcessEvent ( pFnSetEnraged, &SetEnraged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.ZedExplodeArmor
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::ZedExplodeArmor ( )
{
	static UFunction* pFnZedExplodeArmor = NULL;

	if ( ! pFnZedExplodeArmor )
		pFnZedExplodeArmor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.ZedExplodeArmor" );

	AKFPawn_ZedClot_AlphaKing_execZedExplodeArmor_Parms ZedExplodeArmor_Parms;

	this->ProcessEvent ( pFnZedExplodeArmor, &ZedExplodeArmor_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.GetHitZoneSkinTypeEffects
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::GetHitZoneSkinTypeEffects ( )
{
	static UFunction* pFnGetHitZoneSkinTypeEffects = NULL;

	if ( ! pFnGetHitZoneSkinTypeEffects )
		pFnGetHitZoneSkinTypeEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.GetHitZoneSkinTypeEffects" );

	AKFPawn_ZedClot_AlphaKing_execGetHitZoneSkinTypeEffects_Parms GetHitZoneSkinTypeEffects_Parms;

	this->ProcessEvent ( pFnGetHitZoneSkinTypeEffects, &GetHitZoneSkinTypeEffects_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.GetHitZoneIndex
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::GetHitZoneIndex ( )
{
	static UFunction* pFnGetHitZoneIndex = NULL;

	if ( ! pFnGetHitZoneIndex )
		pFnGetHitZoneIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.GetHitZoneIndex" );

	AKFPawn_ZedClot_AlphaKing_execGetHitZoneIndex_Parms GetHitZoneIndex_Parms;

	this->ProcessEvent ( pFnGetHitZoneIndex, &GetHitZoneIndex_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.PlayHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::PlayHit ( )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.PlayHit" );

	AKFPawn_ZedClot_AlphaKing_execPlayHit_Parms PlayHit_Parms;

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.GetRallyBoostResistance
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::GetRallyBoostResistance ( )
{
	static UFunction* pFnGetRallyBoostResistance = NULL;

	if ( ! pFnGetRallyBoostResistance )
		pFnGetRallyBoostResistance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.GetRallyBoostResistance" );

	AKFPawn_ZedClot_AlphaKing_execGetRallyBoostResistance_Parms GetRallyBoostResistance_Parms;

	this->ProcessEvent ( pFnGetRallyBoostResistance, &GetRallyBoostResistance_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.GetRallyBoostDamage
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::GetRallyBoostDamage ( )
{
	static UFunction* pFnGetRallyBoostDamage = NULL;

	if ( ! pFnGetRallyBoostDamage )
		pFnGetRallyBoostDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.GetRallyBoostDamage" );

	AKFPawn_ZedClot_AlphaKing_execGetRallyBoostDamage_Parms GetRallyBoostDamage_Parms;

	this->ProcessEvent ( pFnGetRallyBoostDamage, &GetRallyBoostDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.Rally
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::Rally ( )
{
	static UFunction* pFnRally = NULL;

	if ( ! pFnRally )
		pFnRally = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.Rally" );

	AKFPawn_ZedClot_AlphaKing_execRally_Parms Rally_Parms;

	this->ProcessEvent ( pFnRally, &Rally_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.PossessedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::eventPossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.PossessedBy" );

	AKFPawn_ZedClot_AlphaKing_eventPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_AlphaKing.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedClot_AlphaKing::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_AlphaKing.PostBeginPlay" );

	AKFPawn_ZedClot_AlphaKing_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_Slasher.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedClot_Slasher::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_Slasher.GetTraderAdviceID" );

	AKFPawn_ZedClot_Slasher_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedSiren.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedSiren::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedSiren.GetTraderAdviceID" );

	AKFPawn_ZedSiren_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedSiren.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedSiren::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedSiren.GetSpotterDialogID" );

	AKFPawn_ZedSiren_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedSiren.GetKillerDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedSiren::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedSiren.GetKillerDialogID" );

	AKFPawn_ZedSiren_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedSiren.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedSiren::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedSiren.TerminateEffectsOnDeath" );

	AKFPawn_ZedSiren_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedSiren.EnableScreamFlicker
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedSiren::EnableScreamFlicker ( )
{
	static UFunction* pFnEnableScreamFlicker = NULL;

	if ( ! pFnEnableScreamFlicker )
		pFnEnableScreamFlicker = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedSiren.EnableScreamFlicker" );

	AKFPawn_ZedSiren_execEnableScreamFlicker_Parms EnableScreamFlicker_Parms;

	this->ProcessEvent ( pFnEnableScreamFlicker, &EnableScreamFlicker_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedSiren.ANIMNOTIFY_SirenScream
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedSiren::ANIMNOTIFY_SirenScream ( )
{
	static UFunction* pFnANIMNOTIFY_SirenScream = NULL;

	if ( ! pFnANIMNOTIFY_SirenScream )
		pFnANIMNOTIFY_SirenScream = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedSiren.ANIMNOTIFY_SirenScream" );

	AKFPawn_ZedSiren_execANIMNOTIFY_SirenScream_Parms ANIMNOTIFY_SirenScream_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_SirenScream, &ANIMNOTIFY_SirenScream_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedSiren.SetCharacterArch
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedSiren::SetCharacterArch ( )
{
	static UFunction* pFnSetCharacterArch = NULL;

	if ( ! pFnSetCharacterArch )
		pFnSetCharacterArch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedSiren.SetCharacterArch" );

	AKFPawn_ZedSiren_execSetCharacterArch_Parms SetCharacterArch_Parms;

	this->ProcessEvent ( pFnSetCharacterArch, &SetCharacterArch_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedStalker::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.GetTraderAdviceID" );

	AKFPawn_ZedStalker_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedStalker::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.GetSpotterDialogID" );

	AKFPawn_ZedStalker_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.GetKillerDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedStalker::GetKillerDialogID ( )
{
	static UFunction* pFnGetKillerDialogID = NULL;

	if ( ! pFnGetKillerDialogID )
		pFnGetKillerDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.GetKillerDialogID" );

	AKFPawn_ZedStalker_execGetKillerDialogID_Parms GetKillerDialogID_Parms;

	this->ProcessEvent ( pFnGetKillerDialogID, &GetKillerDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.IsStalkerPawn
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedStalker::IsStalkerPawn ( )
{
	static UFunction* pFnIsStalkerPawn = NULL;

	if ( ! pFnIsStalkerPawn )
		pFnIsStalkerPawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.IsStalkerPawn" );

	AKFPawn_ZedStalker_execIsStalkerPawn_Parms IsStalkerPawn_Parms;

	this->ProcessEvent ( pFnIsStalkerPawn, &IsStalkerPawn_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.ReCloakTimer
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedStalker::ReCloakTimer ( )
{
	static UFunction* pFnReCloakTimer = NULL;

	if ( ! pFnReCloakTimer )
		pFnReCloakTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.ReCloakTimer" );

	AKFPawn_ZedStalker_execReCloakTimer_Parms ReCloakTimer_Parms;

	this->ProcessEvent ( pFnReCloakTimer, &ReCloakTimer_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.PlayHeadAsplode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedStalker::PlayHeadAsplode ( )
{
	static UFunction* pFnPlayHeadAsplode = NULL;

	if ( ! pFnPlayHeadAsplode )
		pFnPlayHeadAsplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.PlayHeadAsplode" );

	AKFPawn_ZedStalker_execPlayHeadAsplode_Parms PlayHeadAsplode_Parms;

	this->ProcessEvent ( pFnPlayHeadAsplode, &PlayHeadAsplode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.PlayHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedStalker::PlayHit ( )
{
	static UFunction* pFnPlayHit = NULL;

	if ( ! pFnPlayHit )
		pFnPlayHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.PlayHit" );

	AKFPawn_ZedStalker_execPlayHit_Parms PlayHit_Parms;

	this->ProcessEvent ( pFnPlayHit, &PlayHit_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.OnStackingAfflictionChanged
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedStalker::OnStackingAfflictionChanged ( )
{
	static UFunction* pFnOnStackingAfflictionChanged = NULL;

	if ( ! pFnOnStackingAfflictionChanged )
		pFnOnStackingAfflictionChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.OnStackingAfflictionChanged" );

	AKFPawn_ZedStalker_execOnStackingAfflictionChanged_Parms OnStackingAfflictionChanged_Parms;

	this->ProcessEvent ( pFnOnStackingAfflictionChanged, &OnStackingAfflictionChanged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedStalker::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.CauseHeadTrauma" );

	AKFPawn_ZedStalker_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedStalker::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.PlayDying" );

	AKFPawn_ZedStalker_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.Rally
// [0x00024102] 
// Parameters infos:

void AKFPawn_ZedStalker::Rally ( )
{
	static UFunction* pFnRally = NULL;

	if ( ! pFnRally )
		pFnRally = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.Rally" );

	AKFPawn_ZedStalker_execRally_Parms Rally_Parms;

	this->ProcessEvent ( pFnRally, &Rally_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.CallOutCloakingExpired
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedStalker::CallOutCloakingExpired ( )
{
	static UFunction* pFnCallOutCloakingExpired = NULL;

	if ( ! pFnCallOutCloakingExpired )
		pFnCallOutCloakingExpired = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.CallOutCloakingExpired" );

	AKFPawn_ZedStalker_execCallOutCloakingExpired_Parms CallOutCloakingExpired_Parms;

	this->ProcessEvent ( pFnCallOutCloakingExpired, &CallOutCloakingExpired_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.CallOutCloaking
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedStalker::CallOutCloaking ( )
{
	static UFunction* pFnCallOutCloaking = NULL;

	if ( ! pFnCallOutCloaking )
		pFnCallOutCloaking = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.CallOutCloaking" );

	AKFPawn_ZedStalker_execCallOutCloaking_Parms CallOutCloaking_Parms;

	this->ProcessEvent ( pFnCallOutCloaking, &CallOutCloaking_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.UpdateSpottedStatus
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedStalker::eventUpdateSpottedStatus ( )
{
	static UFunction* pFnUpdateSpottedStatus = NULL;

	if ( ! pFnUpdateSpottedStatus )
		pFnUpdateSpottedStatus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.UpdateSpottedStatus" );

	AKFPawn_ZedStalker_eventUpdateSpottedStatus_Parms UpdateSpottedStatus_Parms;

	this->ProcessEvent ( pFnUpdateSpottedStatus, &UpdateSpottedStatus_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.GetMinCloakPct
// [0x00080102] 
// Parameters infos:

void AKFPawn_ZedStalker::GetMinCloakPct ( )
{
	static UFunction* pFnGetMinCloakPct = NULL;

	if ( ! pFnGetMinCloakPct )
		pFnGetMinCloakPct = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.GetMinCloakPct" );

	AKFPawn_ZedStalker_execGetMinCloakPct_Parms GetMinCloakPct_Parms;

	this->ProcessEvent ( pFnGetMinCloakPct, &GetMinCloakPct_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedStalker::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.Tick" );

	AKFPawn_ZedStalker_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.PlayStealthSoundLoopEnd
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedStalker::PlayStealthSoundLoopEnd ( )
{
	static UFunction* pFnPlayStealthSoundLoopEnd = NULL;

	if ( ! pFnPlayStealthSoundLoopEnd )
		pFnPlayStealthSoundLoopEnd = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.PlayStealthSoundLoopEnd" );

	AKFPawn_ZedStalker_execPlayStealthSoundLoopEnd_Parms PlayStealthSoundLoopEnd_Parms;

	this->ProcessEvent ( pFnPlayStealthSoundLoopEnd, &PlayStealthSoundLoopEnd_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.PlayStealthSoundLoop
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedStalker::PlayStealthSoundLoop ( )
{
	static UFunction* pFnPlayStealthSoundLoop = NULL;

	if ( ! pFnPlayStealthSoundLoop )
		pFnPlayStealthSoundLoop = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.PlayStealthSoundLoop" );

	AKFPawn_ZedStalker_execPlayStealthSoundLoop_Parms PlayStealthSoundLoop_Parms;

	this->ProcessEvent ( pFnPlayStealthSoundLoop, &PlayStealthSoundLoop_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.TerminateEffectsOnDeath
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedStalker::TerminateEffectsOnDeath ( )
{
	static UFunction* pFnTerminateEffectsOnDeath = NULL;

	if ( ! pFnTerminateEffectsOnDeath )
		pFnTerminateEffectsOnDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.TerminateEffectsOnDeath" );

	AKFPawn_ZedStalker_execTerminateEffectsOnDeath_Parms TerminateEffectsOnDeath_Parms;

	this->ProcessEvent ( pFnTerminateEffectsOnDeath, &TerminateEffectsOnDeath_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.NotifyGoreMeshActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedStalker::eventNotifyGoreMeshActive ( )
{
	static UFunction* pFnNotifyGoreMeshActive = NULL;

	if ( ! pFnNotifyGoreMeshActive )
		pFnNotifyGoreMeshActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.NotifyGoreMeshActive" );

	AKFPawn_ZedStalker_eventNotifyGoreMeshActive_Parms NotifyGoreMeshActive_Parms;

	this->ProcessEvent ( pFnNotifyGoreMeshActive, &NotifyGoreMeshActive_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.UpdateGameplayMICParams
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedStalker::UpdateGameplayMICParams ( )
{
	static UFunction* pFnUpdateGameplayMICParams = NULL;

	if ( ! pFnUpdateGameplayMICParams )
		pFnUpdateGameplayMICParams = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.UpdateGameplayMICParams" );

	AKFPawn_ZedStalker_execUpdateGameplayMICParams_Parms UpdateGameplayMICParams_Parms;

	this->ProcessEvent ( pFnUpdateGameplayMICParams, &UpdateGameplayMICParams_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.ClientCloakingStateUpdated
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedStalker::ClientCloakingStateUpdated ( )
{
	static UFunction* pFnClientCloakingStateUpdated = NULL;

	if ( ! pFnClientCloakingStateUpdated )
		pFnClientCloakingStateUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.ClientCloakingStateUpdated" );

	AKFPawn_ZedStalker_execClientCloakingStateUpdated_Parms ClientCloakingStateUpdated_Parms;

	this->ProcessEvent ( pFnClientCloakingStateUpdated, &ClientCloakingStateUpdated_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.SetCloaked
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedStalker::SetCloaked ( )
{
	static UFunction* pFnSetCloaked = NULL;

	if ( ! pFnSetCloaked )
		pFnSetCloaked = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.SetCloaked" );

	AKFPawn_ZedStalker_execSetCloaked_Parms SetCloaked_Parms;

	this->ProcessEvent ( pFnSetCloaked, &SetCloaked_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedStalker::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.ReplicatedEvent" );

	AKFPawn_ZedStalker_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedStalker::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker.PostBeginPlay" );

	AKFPawn_ZedStalker_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawler.GetSpotterDialogID
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedCrawler::GetSpotterDialogID ( )
{
	static UFunction* pFnGetSpotterDialogID = NULL;

	if ( ! pFnGetSpotterDialogID )
		pFnGetSpotterDialogID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawler.GetSpotterDialogID" );

	AKFPawn_ZedCrawler_execGetSpotterDialogID_Parms GetSpotterDialogID_Parms;

	this->ProcessEvent ( pFnGetSpotterDialogID, &GetSpotterDialogID_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawler.Tick
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedCrawler::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawler.Tick" );

	AKFPawn_ZedCrawler_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawler.DrawDebugRotation
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedCrawler::DrawDebugRotation ( )
{
	static UFunction* pFnDrawDebugRotation = NULL;

	if ( ! pFnDrawDebugRotation )
		pFnDrawDebugRotation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawler.DrawDebugRotation" );

	AKFPawn_ZedCrawler_execDrawDebugRotation_Parms DrawDebugRotation_Parms;

	this->ProcessEvent ( pFnDrawDebugRotation, &DrawDebugRotation_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawler.GetOverheadDebugText
// [0x00420102] 
// Parameters infos:

void AKFPawn_ZedCrawler::GetOverheadDebugText ( )
{
	static UFunction* pFnGetOverheadDebugText = NULL;

	if ( ! pFnGetOverheadDebugText )
		pFnGetOverheadDebugText = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawler.GetOverheadDebugText" );

	AKFPawn_ZedCrawler_execGetOverheadDebugText_Parms GetOverheadDebugText_Parms;

	this->ProcessEvent ( pFnGetOverheadDebugText, &GetOverheadDebugText_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawler.SpiderBumpLevel
// [0x00024802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedCrawler::eventSpiderBumpLevel ( )
{
	static UFunction* pFnSpiderBumpLevel = NULL;

	if ( ! pFnSpiderBumpLevel )
		pFnSpiderBumpLevel = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawler.SpiderBumpLevel" );

	AKFPawn_ZedCrawler_eventSpiderBumpLevel_Parms SpiderBumpLevel_Parms;

	this->ProcessEvent ( pFnSpiderBumpLevel, &SpiderBumpLevel_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawler.SpecialMoveTo_Leap
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedCrawler::SpecialMoveTo_Leap ( )
{
	static UFunction* pFnSpecialMoveTo_Leap = NULL;

	if ( ! pFnSpecialMoveTo_Leap )
		pFnSpecialMoveTo_Leap = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawler.SpecialMoveTo_Leap" );

	AKFPawn_ZedCrawler_execSpecialMoveTo_Leap_Parms SpecialMoveTo_Leap_Parms;

	this->ProcessEvent ( pFnSpecialMoveTo_Leap, &SpecialMoveTo_Leap_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawler.PossessedBy
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedCrawler::eventPossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawler.PossessedBy" );

	AKFPawn_ZedCrawler_eventPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawlerKing.Timer_CheckForExplode
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedCrawlerKing::Timer_CheckForExplode ( )
{
	static UFunction* pFnTimer_CheckForExplode = NULL;

	if ( ! pFnTimer_CheckForExplode )
		pFnTimer_CheckForExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawlerKing.Timer_CheckForExplode" );

	AKFPawn_ZedCrawlerKing_execTimer_CheckForExplode_Parms Timer_CheckForExplode_Parms;

	this->ProcessEvent ( pFnTimer_CheckForExplode, &Timer_CheckForExplode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawlerKing.CancelExplosion
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedCrawlerKing::CancelExplosion ( )
{
	static UFunction* pFnCancelExplosion = NULL;

	if ( ! pFnCancelExplosion )
		pFnCancelExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawlerKing.CancelExplosion" );

	AKFPawn_ZedCrawlerKing_execCancelExplosion_Parms CancelExplosion_Parms;

	this->ProcessEvent ( pFnCancelExplosion, &CancelExplosion_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawlerKing.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedCrawlerKing::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawlerKing.PlayDying" );

	AKFPawn_ZedCrawlerKing_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawlerKing.Died
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedCrawlerKing::Died ( )
{
	static UFunction* pFnDied = NULL;

	if ( ! pFnDied )
		pFnDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawlerKing.Died" );

	AKFPawn_ZedCrawlerKing_execDied_Parms Died_Parms;

	this->ProcessEvent ( pFnDied, &Died_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawlerKing.PlayHeadAsplode
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedCrawlerKing::PlayHeadAsplode ( )
{
	static UFunction* pFnPlayHeadAsplode = NULL;

	if ( ! pFnPlayHeadAsplode )
		pFnPlayHeadAsplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawlerKing.PlayHeadAsplode" );

	AKFPawn_ZedCrawlerKing_execPlayHeadAsplode_Parms PlayHeadAsplode_Parms;

	this->ProcessEvent ( pFnPlayHeadAsplode, &PlayHeadAsplode_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawlerKing.CauseHeadTrauma
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedCrawlerKing::CauseHeadTrauma ( )
{
	static UFunction* pFnCauseHeadTrauma = NULL;

	if ( ! pFnCauseHeadTrauma )
		pFnCauseHeadTrauma = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawlerKing.CauseHeadTrauma" );

	AKFPawn_ZedCrawlerKing_execCauseHeadTrauma_Parms CauseHeadTrauma_Parms;

	this->ProcessEvent ( pFnCauseHeadTrauma, &CauseHeadTrauma_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedGorefast.GetTraderAdviceID
// [0x00022002] 
// Parameters infos:

void AKFPawn_ZedGorefast::GetTraderAdviceID ( )
{
	static UFunction* pFnGetTraderAdviceID = NULL;

	if ( ! pFnGetTraderAdviceID )
		pFnGetTraderAdviceID = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedGorefast.GetTraderAdviceID" );

	AKFPawn_ZedGorefast_execGetTraderAdviceID_Parms GetTraderAdviceID_Parms;

	this->ProcessEvent ( pFnGetTraderAdviceID, &GetTraderAdviceID_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.OnInstigatorControllerLeft
// [0x00020102] 
// Parameters infos:

void AKFProj_BloatPukeMine::OnInstigatorControllerLeft ( )
{
	static UFunction* pFnOnInstigatorControllerLeft = NULL;

	if ( ! pFnOnInstigatorControllerLeft )
		pFnOnInstigatorControllerLeft = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.OnInstigatorControllerLeft" );

	AKFProj_BloatPukeMine_execOnInstigatorControllerLeft_Parms OnInstigatorControllerLeft_Parms;

	this->ProcessEvent ( pFnOnInstigatorControllerLeft, &OnInstigatorControllerLeft_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Destroyed" );

	AKFProj_BloatPukeMine_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.SpawnBurstEffect
// [0x00020102] 
// Parameters infos:

void AKFProj_BloatPukeMine::SpawnBurstEffect ( )
{
	static UFunction* pFnSpawnBurstEffect = NULL;

	if ( ! pFnSpawnBurstEffect )
		pFnSpawnBurstEffect = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.SpawnBurstEffect" );

	AKFProj_BloatPukeMine_execSpawnBurstEffect_Parms SpawnBurstEffect_Parms;

	this->ProcessEvent ( pFnSpawnBurstEffect, &SpawnBurstEffect_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.FadeOut
// [0x00020102] 
// Parameters infos:

void AKFProj_BloatPukeMine::FadeOut ( )
{
	static UFunction* pFnFadeOut = NULL;

	if ( ! pFnFadeOut )
		pFnFadeOut = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.FadeOut" );

	AKFProj_BloatPukeMine_execFadeOut_Parms FadeOut_Parms;

	this->ProcessEvent ( pFnFadeOut, &FadeOut_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.TornOff
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventTornOff ( )
{
	static UFunction* pFnTornOff = NULL;

	if ( ! pFnTornOff )
		pFnTornOff = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.TornOff" );

	AKFProj_BloatPukeMine_eventTornOff_Parms TornOff_Parms;

	this->ProcessEvent ( pFnTornOff, &TornOff_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Tick" );

	AKFProj_BloatPukeMine_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.TriggerExplosion
// [0x00020102] 
// Parameters infos:

void AKFProj_BloatPukeMine::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.TriggerExplosion" );

	AKFProj_BloatPukeMine_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Timer_Explode
// [0x00020002] 
// Parameters infos:

void AKFProj_BloatPukeMine::Timer_Explode ( )
{
	static UFunction* pFnTimer_Explode = NULL;

	if ( ! pFnTimer_Explode )
		pFnTimer_Explode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Timer_Explode" );

	AKFProj_BloatPukeMine_execTimer_Explode_Parms Timer_Explode_Parms;

	this->ProcessEvent ( pFnTimer_Explode, &Timer_Explode_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Detonate
// [0x00020002] 
// Parameters infos:

void AKFProj_BloatPukeMine::Detonate ( )
{
	static UFunction* pFnDetonate = NULL;

	if ( ! pFnDetonate )
		pFnDetonate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Detonate" );

	AKFProj_BloatPukeMine_execDetonate_Parms Detonate_Parms;

	this->ProcessEvent ( pFnDetonate, &Detonate_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.TakeDamage
// [0x00024822] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.TakeDamage" );

	AKFProj_BloatPukeMine_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Touch" );

	AKFProj_BloatPukeMine_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.ValidTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_BloatPukeMine::ValidTouch ( )
{
	static UFunction* pFnValidTouch = NULL;

	if ( ! pFnValidTouch )
		pFnValidTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.ValidTouch" );

	AKFProj_BloatPukeMine_execValidTouch_Parms ValidTouch_Parms;

	this->ProcessEvent ( pFnValidTouch, &ValidTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.SpawnImpactDecal
// [0x00020102] 
// Parameters infos:

void AKFProj_BloatPukeMine::SpawnImpactDecal ( )
{
	static UFunction* pFnSpawnImpactDecal = NULL;

	if ( ! pFnSpawnImpactDecal )
		pFnSpawnImpactDecal = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.SpawnImpactDecal" );

	AKFProj_BloatPukeMine_execSpawnImpactDecal_Parms SpawnImpactDecal_Parms;

	this->ProcessEvent ( pFnSpawnImpactDecal, &SpawnImpactDecal_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.PlayImpactSound
// [0x00024102] 
// Parameters infos:

void AKFProj_BloatPukeMine::PlayImpactSound ( )
{
	static UFunction* pFnPlayImpactSound = NULL;

	if ( ! pFnPlayImpactSound )
		pFnPlayImpactSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.PlayImpactSound" );

	AKFProj_BloatPukeMine_execPlayImpactSound_Parms PlayImpactSound_Parms;

	this->ProcessEvent ( pFnPlayImpactSound, &PlayImpactSound_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.SwapToGroundFX
// [0x00020102] 
// Parameters infos:

void AKFProj_BloatPukeMine::SwapToGroundFX ( )
{
	static UFunction* pFnSwapToGroundFX = NULL;

	if ( ! pFnSwapToGroundFX )
		pFnSwapToGroundFX = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.SwapToGroundFX" );

	AKFProj_BloatPukeMine_execSwapToGroundFX_Parms SwapToGroundFX_Parms;

	this->ProcessEvent ( pFnSwapToGroundFX, &SwapToGroundFX_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Stick
// [0x00820102] 
// Parameters infos:

void AKFProj_BloatPukeMine::Stick ( )
{
	static UFunction* pFnStick = NULL;

	if ( ! pFnStick )
		pFnStick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Stick" );

	AKFProj_BloatPukeMine_execStick_Parms Stick_Parms;

	this->ProcessEvent ( pFnStick, &Stick_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Bounce
// [0x00820102] 
// Parameters infos:

void AKFProj_BloatPukeMine::Bounce ( )
{
	static UFunction* pFnBounce = NULL;

	if ( ! pFnBounce )
		pFnBounce = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Bounce" );

	AKFProj_BloatPukeMine_execBounce_Parms Bounce_Parms;

	this->ProcessEvent ( pFnBounce, &Bounce_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Bump
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventBump ( )
{
	static UFunction* pFnBump = NULL;

	if ( ! pFnBump )
		pFnBump = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Bump" );

	AKFProj_BloatPukeMine_eventBump_Parms Bump_Parms;

	this->ProcessEvent ( pFnBump, &Bump_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.CanStick
// [0x00480102] 
// Parameters infos:

void AKFProj_BloatPukeMine::CanStick ( )
{
	static UFunction* pFnCanStick = NULL;

	if ( ! pFnCanStick )
		pFnCanStick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.CanStick" );

	AKFProj_BloatPukeMine_execCanStick_Parms CanStick_Parms;

	this->ProcessEvent ( pFnCanStick, &CanStick_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.HitWall" );

	AKFProj_BloatPukeMine_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.Explode
// [0x00020100] 
// Parameters infos:

void AKFProj_BloatPukeMine::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.Explode" );

	AKFProj_BloatPukeMine_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.StopSimulating
// [0x00080100] 
// Parameters infos:

void AKFProj_BloatPukeMine::StopSimulating ( )
{
	static UFunction* pFnStopSimulating = NULL;

	if ( ! pFnStopSimulating )
		pFnStopSimulating = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.StopSimulating" );

	AKFProj_BloatPukeMine_execStopSimulating_Parms StopSimulating_Parms;

	this->ProcessEvent ( pFnStopSimulating, &StopSimulating_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.ShutDown
// [0x00020100] 
// Parameters infos:

void AKFProj_BloatPukeMine::ShutDown ( )
{
	static UFunction* pFnShutDown = NULL;

	if ( ! pFnShutDown )
		pFnShutDown = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.ShutDown" );

	AKFProj_BloatPukeMine_execShutDown_Parms ShutDown_Parms;

	this->ProcessEvent ( pFnShutDown, &ShutDown_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.PostBeginPlay
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.PostBeginPlay" );

	AKFProj_BloatPukeMine_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_BloatPukeMine.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_BloatPukeMine::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_BloatPukeMine.ReplicatedEvent" );

	AKFProj_BloatPukeMine_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFPickupFactory_Ammo.CurrentPickupIsAmmo
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Ammo::CurrentPickupIsAmmo ( )
{
	static UFunction* pFnCurrentPickupIsAmmo = NULL;

	if ( ! pFnCurrentPickupIsAmmo )
		pFnCurrentPickupIsAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPickupFactory_Ammo.CurrentPickupIsAmmo" );

	AKFPickupFactory_Ammo_execCurrentPickupIsAmmo_Parms CurrentPickupIsAmmo_Parms;

	this->ProcessEvent ( pFnCurrentPickupIsAmmo, &CurrentPickupIsAmmo_Parms, NULL );
};

// Function kfgamecontent.KFPickupFactory_Ammo.PickedUpBy
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Ammo::PickedUpBy ( )
{
	static UFunction* pFnPickedUpBy = NULL;

	if ( ! pFnPickedUpBy )
		pFnPickedUpBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPickupFactory_Ammo.PickedUpBy" );

	AKFPickupFactory_Ammo_execPickedUpBy_Parms PickedUpBy_Parms;

	this->ProcessEvent ( pFnPickedUpBy, &PickedUpBy_Parms, NULL );
};

// Function kfgamecontent.KFPickupFactory_Ammo.GiveTo
// [0x00020002] 
// Parameters infos:

void AKFPickupFactory_Ammo::GiveTo ( )
{
	static UFunction* pFnGiveTo = NULL;

	if ( ! pFnGiveTo )
		pFnGiveTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPickupFactory_Ammo.GiveTo" );

	AKFPickupFactory_Ammo_execGiveTo_Parms GiveTo_Parms;

	this->ProcessEvent ( pFnGiveTo, &GiveTo_Parms, NULL );
};

// Function kfgamecontent.KFPickupFactory_Ammo.SetInitialState
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPickupFactory_Ammo::eventSetInitialState ( )
{
	static UFunction* pFnSetInitialState = NULL;

	if ( ! pFnSetInitialState )
		pFnSetInitialState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPickupFactory_Ammo.SetInitialState" );

	AKFPickupFactory_Ammo_eventSetInitialState_Parms SetInitialState_Parms;

	this->ProcessEvent ( pFnSetInitialState, &SetInitialState_Parms, NULL );
};

// Function kfgamecontent.KFPickupFactory_Ammo.InitializePickup
// [0x00020102] 
// Parameters infos:

void AKFPickupFactory_Ammo::InitializePickup ( )
{
	static UFunction* pFnInitializePickup = NULL;

	if ( ! pFnInitializePickup )
		pFnInitializePickup = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPickupFactory_Ammo.InitializePickup" );

	AKFPickupFactory_Ammo_execInitializePickup_Parms InitializePickup_Parms;

	this->ProcessEvent ( pFnInitializePickup, &InitializePickup_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfo_Endless.WaveStarted
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo_Endless::WaveStarted ( )
{
	static UFunction* pFnWaveStarted = NULL;

	if ( ! pFnWaveStarted )
		pFnWaveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfo_Endless.WaveStarted" );

	AKFGameReplicationInfo_Endless_execWaveStarted_Parms WaveStarted_Parms;

	this->ProcessEvent ( pFnWaveStarted, &WaveStarted_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfo_Endless.IsWeeklyWave
// [0x00420102] 
// Parameters infos:

void AKFGameReplicationInfo_Endless::IsWeeklyWave ( )
{
	static UFunction* pFnIsWeeklyWave = NULL;

	if ( ! pFnIsWeeklyWave )
		pFnIsWeeklyWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfo_Endless.IsWeeklyWave" );

	AKFGameReplicationInfo_Endless_execIsWeeklyWave_Parms IsWeeklyWave_Parms;

	this->ProcessEvent ( pFnIsWeeklyWave, &IsWeeklyWave_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfo_Endless.IsSpecialWave
// [0x00420102] 
// Parameters infos:

void AKFGameReplicationInfo_Endless::IsSpecialWave ( )
{
	static UFunction* pFnIsSpecialWave = NULL;

	if ( ! pFnIsSpecialWave )
		pFnIsSpecialWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfo_Endless.IsSpecialWave" );

	AKFGameReplicationInfo_Endless_execIsSpecialWave_Parms IsSpecialWave_Parms;

	this->ProcessEvent ( pFnIsSpecialWave, &IsSpecialWave_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfo_Endless.IsBossWaveNext
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo_Endless::IsBossWaveNext ( )
{
	static UFunction* pFnIsBossWaveNext = NULL;

	if ( ! pFnIsBossWaveNext )
		pFnIsBossWaveNext = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfo_Endless.IsBossWaveNext" );

	AKFGameReplicationInfo_Endless_execIsBossWaveNext_Parms IsBossWaveNext_Parms;

	this->ProcessEvent ( pFnIsBossWaveNext, &IsBossWaveNext_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfo_Endless.IsBossWave
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo_Endless::IsBossWave ( )
{
	static UFunction* pFnIsBossWave = NULL;

	if ( ! pFnIsBossWave )
		pFnIsBossWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfo_Endless.IsBossWave" );

	AKFGameReplicationInfo_Endless_execIsBossWave_Parms IsBossWave_Parms;

	this->ProcessEvent ( pFnIsBossWave, &IsBossWave_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfo_Endless.IsFinalWave
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfo_Endless::IsFinalWave ( )
{
	static UFunction* pFnIsFinalWave = NULL;

	if ( ! pFnIsFinalWave )
		pFnIsFinalWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfo_Endless.IsFinalWave" );

	AKFGameReplicationInfo_Endless_execIsFinalWave_Parms IsFinalWave_Parms;

	this->ProcessEvent ( pFnIsFinalWave, &IsFinalWave_Parms, NULL );
};

// Function kfgamecontent.KFOutbreakEvent_Endless.GetOutbreakId
// [0x00022002] 
// Parameters infos:

void UKFOutbreakEvent_Endless::GetOutbreakId ( )
{
	static UFunction* pFnGetOutbreakId = NULL;

	if ( ! pFnGetOutbreakId )
		pFnGetOutbreakId = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFOutbreakEvent_Endless.GetOutbreakId" );

	UKFOutbreakEvent_Endless_execGetOutbreakId_Parms GetOutbreakId_Parms;

	this->ProcessEvent ( pFnGetOutbreakId, &GetOutbreakId_Parms, NULL );
};

// Function kfgamecontent.KFOutbreakEvent_Endless.AdjustScoreDamage
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent_Endless::AdjustScoreDamage ( )
{
	static UFunction* pFnAdjustScoreDamage = NULL;

	if ( ! pFnAdjustScoreDamage )
		pFnAdjustScoreDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFOutbreakEvent_Endless.AdjustScoreDamage" );

	UKFOutbreakEvent_Endless_execAdjustScoreDamage_Parms AdjustScoreDamage_Parms;

	this->ProcessEvent ( pFnAdjustScoreDamage, &AdjustScoreDamage_Parms, NULL );
};

// Function kfgamecontent.KFOutbreakEvent_Endless.AdjustMonsterDefaults
// [0x00C20002] 
// Parameters infos:

void UKFOutbreakEvent_Endless::AdjustMonsterDefaults ( )
{
	static UFunction* pFnAdjustMonsterDefaults = NULL;

	if ( ! pFnAdjustMonsterDefaults )
		pFnAdjustMonsterDefaults = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFOutbreakEvent_Endless.AdjustMonsterDefaults" );

	UKFOutbreakEvent_Endless_execAdjustMonsterDefaults_Parms AdjustMonsterDefaults_Parms;

	this->ProcessEvent ( pFnAdjustMonsterDefaults, &AdjustMonsterDefaults_Parms, NULL );
};

// Function kfgamecontent.KFOutbreakEvent_Endless.OnScoreKill
// [0x00820002] 
// Parameters infos:

void UKFOutbreakEvent_Endless::OnScoreKill ( )
{
	static UFunction* pFnOnScoreKill = NULL;

	if ( ! pFnOnScoreKill )
		pFnOnScoreKill = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFOutbreakEvent_Endless.OnScoreKill" );

	UKFOutbreakEvent_Endless_execOnScoreKill_Parms OnScoreKill_Parms;

	this->ProcessEvent ( pFnOnScoreKill, &OnScoreKill_Parms, NULL );
};

// Function kfgamecontent.KFTutorialSectionInfo.OpenDelayTimer
// [0x00020002] 
// Parameters infos:

void UKFTutorialSectionInfo::OpenDelayTimer ( )
{
	static UFunction* pFnOpenDelayTimer = NULL;

	if ( ! pFnOpenDelayTimer )
		pFnOpenDelayTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTutorialSectionInfo.OpenDelayTimer" );

	UKFTutorialSectionInfo_execOpenDelayTimer_Parms OpenDelayTimer_Parms;

	this->ProcessEvent ( pFnOpenDelayTimer, &OpenDelayTimer_Parms, NULL );
};

// Function kfgamecontent.KFTutorialSectionInfo.GetSlides
// [0x00820002] 
// Parameters infos:

void UKFTutorialSectionInfo::GetSlides ( )
{
	static UFunction* pFnGetSlides = NULL;

	if ( ! pFnGetSlides )
		pFnGetSlides = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTutorialSectionInfo.GetSlides" );

	UKFTutorialSectionInfo_execGetSlides_Parms GetSlides_Parms;

	this->ProcessEvent ( pFnGetSlides, &GetSlides_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.IsMapObjectiveEnabled
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::IsMapObjectiveEnabled ( )
{
	static UFunction* pFnIsMapObjectiveEnabled = NULL;

	if ( ! pFnIsMapObjectiveEnabled )
		pFnIsMapObjectiveEnabled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.IsMapObjectiveEnabled" );

	AKFGameInfo_Tutorial_execIsMapObjectiveEnabled_Parms IsMapObjectiveEnabled_Parms;

	this->ProcessEvent ( pFnIsMapObjectiveEnabled, &IsMapObjectiveEnabled_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.OnTraderMenuClosed
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::OnTraderMenuClosed ( )
{
	static UFunction* pFnOnTraderMenuClosed = NULL;

	if ( ! pFnOnTraderMenuClosed )
		pFnOnTraderMenuClosed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.OnTraderMenuClosed" );

	AKFGameInfo_Tutorial_execOnTraderMenuClosed_Parms OnTraderMenuClosed_Parms;

	this->ProcessEvent ( pFnOnTraderMenuClosed, &OnTraderMenuClosed_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.CheckPlayerAction
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::CheckPlayerAction ( )
{
	static UFunction* pFnCheckPlayerAction = NULL;

	if ( ! pFnCheckPlayerAction )
		pFnCheckPlayerAction = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.CheckPlayerAction" );

	AKFGameInfo_Tutorial_execCheckPlayerAction_Parms CheckPlayerAction_Parms;

	this->ProcessEvent ( pFnCheckPlayerAction, &CheckPlayerAction_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.Tick
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.Tick" );

	AKFGameInfo_Tutorial_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.NotifyControllerReconnected
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::NotifyControllerReconnected ( )
{
	static UFunction* pFnNotifyControllerReconnected = NULL;

	if ( ! pFnNotifyControllerReconnected )
		pFnNotifyControllerReconnected = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.NotifyControllerReconnected" );

	AKFGameInfo_Tutorial_execNotifyControllerReconnected_Parms NotifyControllerReconnected_Parms;

	this->ProcessEvent ( pFnNotifyControllerReconnected, &NotifyControllerReconnected_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.NotifyControllerDisconnected
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::NotifyControllerDisconnected ( )
{
	static UFunction* pFnNotifyControllerDisconnected = NULL;

	if ( ! pFnNotifyControllerDisconnected )
		pFnNotifyControllerDisconnected = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.NotifyControllerDisconnected" );

	AKFGameInfo_Tutorial_execNotifyControllerDisconnected_Parms NotifyControllerDisconnected_Parms;

	this->ProcessEvent ( pFnNotifyControllerDisconnected, &NotifyControllerDisconnected_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.RemoveTutorialHud
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::RemoveTutorialHud ( )
{
	static UFunction* pFnRemoveTutorialHud = NULL;

	if ( ! pFnRemoveTutorialHud )
		pFnRemoveTutorialHud = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.RemoveTutorialHud" );

	AKFGameInfo_Tutorial_execRemoveTutorialHud_Parms RemoveTutorialHud_Parms;

	this->ProcessEvent ( pFnRemoveTutorialHud, &RemoveTutorialHud_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.CreateTutorialHUD
// [0x00024002] 
// Parameters infos:

void AKFGameInfo_Tutorial::CreateTutorialHUD ( )
{
	static UFunction* pFnCreateTutorialHUD = NULL;

	if ( ! pFnCreateTutorialHUD )
		pFnCreateTutorialHUD = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.CreateTutorialHUD" );

	AKFGameInfo_Tutorial_execCreateTutorialHUD_Parms CreateTutorialHUD_Parms;

	this->ProcessEvent ( pFnCreateTutorialHUD, &CreateTutorialHUD_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.AllowUnpause
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::AllowUnpause ( )
{
	static UFunction* pFnAllowUnpause = NULL;

	if ( ! pFnAllowUnpause )
		pFnAllowUnpause = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.AllowUnpause" );

	AKFGameInfo_Tutorial_execAllowUnpause_Parms AllowUnpause_Parms;

	this->ProcessEvent ( pFnAllowUnpause, &AllowUnpause_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.NotifyMenuOpened
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::NotifyMenuOpened ( )
{
	static UFunction* pFnNotifyMenuOpened = NULL;

	if ( ! pFnNotifyMenuOpened )
		pFnNotifyMenuOpened = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.NotifyMenuOpened" );

	AKFGameInfo_Tutorial_execNotifyMenuOpened_Parms NotifyMenuOpened_Parms;

	this->ProcessEvent ( pFnNotifyMenuOpened, &NotifyMenuOpened_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.SetZedTimeDilation
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::SetZedTimeDilation ( )
{
	static UFunction* pFnSetZedTimeDilation = NULL;

	if ( ! pFnSetZedTimeDilation )
		pFnSetZedTimeDilation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.SetZedTimeDilation" );

	AKFGameInfo_Tutorial_execSetZedTimeDilation_Parms SetZedTimeDilation_Parms;

	this->ProcessEvent ( pFnSetZedTimeDilation, &SetZedTimeDilation_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.ResetPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::ResetPickups ( )
{
	static UFunction* pFnResetPickups = NULL;

	if ( ! pFnResetPickups )
		pFnResetPickups = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.ResetPickups" );

	AKFGameInfo_Tutorial_execResetPickups_Parms ResetPickups_Parms;

	this->ProcessEvent ( pFnResetPickups, &ResetPickups_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.DetermineNextTraderIndex
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::DetermineNextTraderIndex ( )
{
	static UFunction* pFnDetermineNextTraderIndex = NULL;

	if ( ! pFnDetermineNextTraderIndex )
		pFnDetermineNextTraderIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.DetermineNextTraderIndex" );

	AKFGameInfo_Tutorial_execDetermineNextTraderIndex_Parms DetermineNextTraderIndex_Parms;

	this->ProcessEvent ( pFnDetermineNextTraderIndex, &DetermineNextTraderIndex_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.ShowPostGameMenu
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::ShowPostGameMenu ( )
{
	static UFunction* pFnShowPostGameMenu = NULL;

	if ( ! pFnShowPostGameMenu )
		pFnShowPostGameMenu = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.ShowPostGameMenu" );

	AKFGameInfo_Tutorial_execShowPostGameMenu_Parms ShowPostGameMenu_Parms;

	this->ProcessEvent ( pFnShowPostGameMenu, &ShowPostGameMenu_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.OnTutorialRewardsComplete
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::OnTutorialRewardsComplete ( )
{
	static UFunction* pFnOnTutorialRewardsComplete = NULL;

	if ( ! pFnOnTutorialRewardsComplete )
		pFnOnTutorialRewardsComplete = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.OnTutorialRewardsComplete" );

	AKFGameInfo_Tutorial_execOnTutorialRewardsComplete_Parms OnTutorialRewardsComplete_Parms;

	this->ProcessEvent ( pFnOnTutorialRewardsComplete, &OnTutorialRewardsComplete_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.EndOfMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::EndOfMatch ( )
{
	static UFunction* pFnEndOfMatch = NULL;

	if ( ! pFnEndOfMatch )
		pFnEndOfMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.EndOfMatch" );

	AKFGameInfo_Tutorial_execEndOfMatch_Parms EndOfMatch_Parms;

	this->ProcessEvent ( pFnEndOfMatch, &EndOfMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.WaveEnded
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::WaveEnded ( )
{
	static UFunction* pFnWaveEnded = NULL;

	if ( ! pFnWaveEnded )
		pFnWaveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.WaveEnded" );

	AKFGameInfo_Tutorial_execWaveEnded_Parms WaveEnded_Parms;

	this->ProcessEvent ( pFnWaveEnded, &WaveEnded_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.PreventDeath
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::PreventDeath ( )
{
	static UFunction* pFnPreventDeath = NULL;

	if ( ! pFnPreventDeath )
		pFnPreventDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.PreventDeath" );

	AKFGameInfo_Tutorial_execPreventDeath_Parms PreventDeath_Parms;

	this->ProcessEvent ( pFnPreventDeath, &PreventDeath_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.ReduceDamage
// [0x00420002] 
// Parameters infos:

void AKFGameInfo_Tutorial::ReduceDamage ( )
{
	static UFunction* pFnReduceDamage = NULL;

	if ( ! pFnReduceDamage )
		pFnReduceDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.ReduceDamage" );

	AKFGameInfo_Tutorial_execReduceDamage_Parms ReduceDamage_Parms;

	this->ProcessEvent ( pFnReduceDamage, &ReduceDamage_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.RestartPlayer
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_Tutorial::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.RestartPlayer" );

	AKFGameInfo_Tutorial_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Tutorial::eventPostLogin ( )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.PostLogin" );

	AKFGameInfo_Tutorial_eventPostLogin_Parms PostLogin_Parms;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Tutorial::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.PostBeginPlay" );

	AKFGameInfo_Tutorial_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_Tutorial.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_Tutorial::eventInitGame ( )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_Tutorial.InitGame" );

	AKFGameInfo_Tutorial_eventInitGame_Parms InitGame_Parms;

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Tutorial.Callback_Skip
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Tutorial::Callback_Skip ( )
{
	static UFunction* pFnCallback_Skip = NULL;

	if ( ! pFnCallback_Skip )
		pFnCallback_Skip = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Tutorial.Callback_Skip" );

	UKFGFxMoviePlayer_Tutorial_execCallback_Skip_Parms Callback_Skip_Parms;

	this->ProcessEvent ( pFnCallback_Skip, &Callback_Skip_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Tutorial.Callback_Done
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Tutorial::Callback_Done ( )
{
	static UFunction* pFnCallback_Done = NULL;

	if ( ! pFnCallback_Done )
		pFnCallback_Done = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Tutorial.Callback_Done" );

	UKFGFxMoviePlayer_Tutorial_execCallback_Done_Parms Callback_Done_Parms;

	this->ProcessEvent ( pFnCallback_Done, &Callback_Done_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Tutorial.GetUsingGamepad
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Tutorial::GetUsingGamepad ( )
{
	static UFunction* pFnGetUsingGamepad = NULL;

	if ( ! pFnGetUsingGamepad )
		pFnGetUsingGamepad = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Tutorial.GetUsingGamepad" );

	UKFGFxMoviePlayer_Tutorial_execGetUsingGamepad_Parms GetUsingGamepad_Parms;

	this->ProcessEvent ( pFnGetUsingGamepad, &GetUsingGamepad_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Tutorial.OnInputTypeChanged
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Tutorial::OnInputTypeChanged ( )
{
	static UFunction* pFnOnInputTypeChanged = NULL;

	if ( ! pFnOnInputTypeChanged )
		pFnOnInputTypeChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Tutorial.OnInputTypeChanged" );

	UKFGFxMoviePlayer_Tutorial_execOnInputTypeChanged_Parms OnInputTypeChanged_Parms;

	this->ProcessEvent ( pFnOnInputTypeChanged, &OnInputTypeChanged_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Tutorial.CheckIfUsingGamepad
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_Tutorial::CheckIfUsingGamepad ( )
{
	static UFunction* pFnCheckIfUsingGamepad = NULL;

	if ( ! pFnCheckIfUsingGamepad )
		pFnCheckIfUsingGamepad = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Tutorial.CheckIfUsingGamepad" );

	UKFGFxMoviePlayer_Tutorial_execCheckIfUsingGamepad_Parms CheckIfUsingGamepad_Parms;

	this->ProcessEvent ( pFnCheckIfUsingGamepad, &CheckIfUsingGamepad_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Tutorial.FilterButtonInput
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Tutorial::eventFilterButtonInput ( )
{
	static UFunction* pFnFilterButtonInput = NULL;

	if ( ! pFnFilterButtonInput )
		pFnFilterButtonInput = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Tutorial.FilterButtonInput" );

	UKFGFxMoviePlayer_Tutorial_eventFilterButtonInput_Parms FilterButtonInput_Parms;

	this->ProcessEvent ( pFnFilterButtonInput, &FilterButtonInput_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Tutorial.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_Tutorial::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Tutorial.WidgetInitialized" );

	UKFGFxMoviePlayer_Tutorial_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Tutorial.Init
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_Tutorial::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Tutorial.Init" );

	UKFGFxMoviePlayer_Tutorial_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_Manager_Tutorial.OpenMenu
// [0x00024002] 
// Parameters infos:

void UKFGFxMoviePlayer_Manager_Tutorial::OpenMenu ( )
{
	static UFunction* pFnOpenMenu = NULL;

	if ( ! pFnOpenMenu )
		pFnOpenMenu = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_Manager_Tutorial.OpenMenu" );

	UKFGFxMoviePlayer_Manager_Tutorial_execOpenMenu_Parms OpenMenu_Parms;

	this->ProcessEvent ( pFnOpenMenu, &OpenMenu_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.Reset
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfoVersus::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.Reset" );

	AKFGameReplicationInfoVersus_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.OnRoundIncremented
// [0x00020100] 
// Parameters infos:

void AKFGameReplicationInfoVersus::OnRoundIncremented ( )
{
	static UFunction* pFnOnRoundIncremented = NULL;

	if ( ! pFnOnRoundIncremented )
		pFnOnRoundIncremented = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.OnRoundIncremented" );

	AKFGameReplicationInfoVersus_execOnRoundIncremented_Parms OnRoundIncremented_Parms;

	this->ProcessEvent ( pFnOnRoundIncremented, &OnRoundIncremented_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.ServerStartVoteKick
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfoVersus::ServerStartVoteKick ( )
{
	static UFunction* pFnServerStartVoteKick = NULL;

	if ( ! pFnServerStartVoteKick )
		pFnServerStartVoteKick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.ServerStartVoteKick" );

	AKFGameReplicationInfoVersus_execServerStartVoteKick_Parms ServerStartVoteKick_Parms;

	this->ProcessEvent ( pFnServerStartVoteKick, &ServerStartVoteKick_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.CanChangePerks
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfoVersus::eventCanChangePerks ( )
{
	static UFunction* pFnCanChangePerks = NULL;

	if ( ! pFnCanChangePerks )
		pFnCanChangePerks = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.CanChangePerks" );

	AKFGameReplicationInfoVersus_eventCanChangePerks_Parms CanChangePerks_Parms;

	this->ProcessEvent ( pFnCanChangePerks, &CanChangePerks_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.GetCurrentRoundNumber
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfoVersus::GetCurrentRoundNumber ( )
{
	static UFunction* pFnGetCurrentRoundNumber = NULL;

	if ( ! pFnGetCurrentRoundNumber )
		pFnGetCurrentRoundNumber = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.GetCurrentRoundNumber" );

	AKFGameReplicationInfoVersus_execGetCurrentRoundNumber_Parms GetCurrentRoundNumber_Parms;

	this->ProcessEvent ( pFnGetCurrentRoundNumber, &GetCurrentRoundNumber_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.AreTeamsOutOfBalanced
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfoVersus::AreTeamsOutOfBalanced ( )
{
	static UFunction* pFnAreTeamsOutOfBalanced = NULL;

	if ( ! pFnAreTeamsOutOfBalanced )
		pFnAreTeamsOutOfBalanced = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.AreTeamsOutOfBalanced" );

	AKFGameReplicationInfoVersus_execAreTeamsOutOfBalanced_Parms AreTeamsOutOfBalanced_Parms;

	this->ProcessEvent ( pFnAreTeamsOutOfBalanced, &AreTeamsOutOfBalanced_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.Timer
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfoVersus::eventTimer ( )
{
	static UFunction* pFnTimer = NULL;

	if ( ! pFnTimer )
		pFnTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.Timer" );

	AKFGameReplicationInfoVersus_eventTimer_Parms Timer_Parms;

	this->ProcessEvent ( pFnTimer, &Timer_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.SetTeam
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfoVersus::SetTeam ( )
{
	static UFunction* pFnSetTeam = NULL;

	if ( ! pFnSetTeam )
		pFnSetTeam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.SetTeam" );

	AKFGameReplicationInfoVersus_execSetTeam_Parms SetTeam_Parms;

	this->ProcessEvent ( pFnSetTeam, &SetTeam_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.Timer_TickDownSpawnTimer
// [0x00020102] 
// Parameters infos:

void AKFGameReplicationInfoVersus::Timer_TickDownSpawnTimer ( )
{
	static UFunction* pFnTimer_TickDownSpawnTimer = NULL;

	if ( ! pFnTimer_TickDownSpawnTimer )
		pFnTimer_TickDownSpawnTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.Timer_TickDownSpawnTimer" );

	AKFGameReplicationInfoVersus_execTimer_TickDownSpawnTimer_Parms Timer_TickDownSpawnTimer_Parms;

	this->ProcessEvent ( pFnTimer_TickDownSpawnTimer, &Timer_TickDownSpawnTimer_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.SetPlayerZedSpawnTime
// [0x00020002] 
// Parameters infos:

void AKFGameReplicationInfoVersus::SetPlayerZedSpawnTime ( )
{
	static UFunction* pFnSetPlayerZedSpawnTime = NULL;

	if ( ! pFnSetPlayerZedSpawnTime )
		pFnSetPlayerZedSpawnTime = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.SetPlayerZedSpawnTime" );

	AKFGameReplicationInfoVersus_execSetPlayerZedSpawnTime_Parms SetPlayerZedSpawnTime_Parms;

	this->ProcessEvent ( pFnSetPlayerZedSpawnTime, &SetPlayerZedSpawnTime_Parms, NULL );
};

// Function kfgamecontent.KFGameReplicationInfoVersus.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFGameReplicationInfoVersus::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameReplicationInfoVersus.ReplicatedEvent" );

	AKFGameReplicationInfoVersus_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFTeamInfo_Zeds.GetHumanReadableName
// [0x00020102] 
// Parameters infos:

void AKFTeamInfo_Zeds::GetHumanReadableName ( )
{
	static UFunction* pFnGetHumanReadableName = NULL;

	if ( ! pFnGetHumanReadableName )
		pFnGetHumanReadableName = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTeamInfo_Zeds.GetHumanReadableName" );

	AKFTeamInfo_Zeds_execGetHumanReadableName_Parms GetHumanReadableName_Parms;

	this->ProcessEvent ( pFnGetHumanReadableName, &GetHumanReadableName_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_Slasher_Versus.GetDirectionalJumpScale
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedClot_Slasher_Versus::GetDirectionalJumpScale ( )
{
	static UFunction* pFnGetDirectionalJumpScale = NULL;

	if ( ! pFnGetDirectionalJumpScale )
		pFnGetDirectionalJumpScale = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_Slasher_Versus.GetDirectionalJumpScale" );

	AKFPawn_ZedClot_Slasher_Versus_execGetDirectionalJumpScale_Parms GetDirectionalJumpScale_Parms;

	this->ProcessEvent ( pFnGetDirectionalJumpScale, &GetDirectionalJumpScale_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_Slasher_Versus.GetJumpZ
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedClot_Slasher_Versus::GetJumpZ ( )
{
	static UFunction* pFnGetJumpZ = NULL;

	if ( ! pFnGetJumpZ )
		pFnGetJumpZ = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_Slasher_Versus.GetJumpZ" );

	AKFPawn_ZedClot_Slasher_Versus_execGetJumpZ_Parms GetJumpZ_Parms;

	this->ProcessEvent ( pFnGetJumpZ, &GetJumpZ_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedClot_Slasher_Versus.GetSprintJumpVelocity
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedClot_Slasher_Versus::GetSprintJumpVelocity ( )
{
	static UFunction* pFnGetSprintJumpVelocity = NULL;

	if ( ! pFnGetSprintJumpVelocity )
		pFnGetSprintJumpVelocity = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedClot_Slasher_Versus.GetSprintJumpVelocity" );

	AKFPawn_ZedClot_Slasher_Versus_execGetSprintJumpVelocity_Parms GetSprintJumpVelocity_Parms;

	this->ProcessEvent ( pFnGetSprintJumpVelocity, &GetSprintJumpVelocity_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedCrawler_Versus.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedCrawler_Versus::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedCrawler_Versus.PlayDying" );

	AKFPawn_ZedCrawler_Versus_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker_Versus.CallOutCloaking
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedStalker_Versus::CallOutCloaking ( )
{
	static UFunction* pFnCallOutCloaking = NULL;

	if ( ! pFnCallOutCloaking )
		pFnCallOutCloaking = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker_Versus.CallOutCloaking" );

	AKFPawn_ZedStalker_Versus_execCallOutCloaking_Parms CallOutCloaking_Parms;

	this->ProcessEvent ( pFnCallOutCloaking, &CallOutCloaking_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedStalker_Versus.UpdateSpottedStatus
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedStalker_Versus::eventUpdateSpottedStatus ( )
{
	static UFunction* pFnUpdateSpottedStatus = NULL;

	if ( ! pFnUpdateSpottedStatus )
		pFnUpdateSpottedStatus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedStalker_Versus.UpdateSpottedStatus" );

	AKFPawn_ZedStalker_Versus_eventUpdateSpottedStatus_Parms UpdateSpottedStatus_Parms;

	this->ProcessEvent ( pFnUpdateSpottedStatus, &UpdateSpottedStatus_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake_Versus.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedScrake_Versus::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake_Versus.PlayDying" );

	AKFPawn_ZedScrake_Versus_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake_Versus.Timer_RageBump
// [0x00080102] 
// Parameters infos:

void AKFPawn_ZedScrake_Versus::Timer_RageBump ( )
{
	static UFunction* pFnTimer_RageBump = NULL;

	if ( ! pFnTimer_RageBump )
		pFnTimer_RageBump = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake_Versus.Timer_RageBump" );

	AKFPawn_ZedScrake_Versus_execTimer_RageBump_Parms Timer_RageBump_Parms;

	this->ProcessEvent ( pFnTimer_RageBump, &Timer_RageBump_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake_Versus.SetEnraged
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedScrake_Versus::SetEnraged ( )
{
	static UFunction* pFnSetEnraged = NULL;

	if ( ! pFnSetEnraged )
		pFnSetEnraged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake_Versus.SetEnraged" );

	AKFPawn_ZedScrake_Versus_execSetEnraged_Parms SetEnraged_Parms;

	this->ProcessEvent ( pFnSetEnraged, &SetEnraged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake_Versus.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedScrake_Versus::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake_Versus.SetSprinting" );

	AKFPawn_ZedScrake_Versus_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshPound_Versus.PlayDying
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshPound_Versus::PlayDying ( )
{
	static UFunction* pFnPlayDying = NULL;

	if ( ! pFnPlayDying )
		pFnPlayDying = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshPound_Versus.PlayDying" );

	AKFPawn_ZedFleshPound_Versus_execPlayDying_Parms PlayDying_Parms;

	this->ProcessEvent ( pFnPlayDying, &PlayDying_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshPound_Versus.EndRage
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshPound_Versus::EndRage ( )
{
	static UFunction* pFnEndRage = NULL;

	if ( ! pFnEndRage )
		pFnEndRage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshPound_Versus.EndRage" );

	AKFPawn_ZedFleshPound_Versus_execEndRage_Parms EndRage_Parms;

	this->ProcessEvent ( pFnEndRage, &EndRage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshPound_Versus.NotifyMeleeDamageDealt
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshPound_Versus::NotifyMeleeDamageDealt ( )
{
	static UFunction* pFnNotifyMeleeDamageDealt = NULL;

	if ( ! pFnNotifyMeleeDamageDealt )
		pFnNotifyMeleeDamageDealt = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshPound_Versus.NotifyMeleeDamageDealt" );

	AKFPawn_ZedFleshPound_Versus_execNotifyMeleeDamageDealt_Parms NotifyMeleeDamageDealt_Parms;

	this->ProcessEvent ( pFnNotifyMeleeDamageDealt, &NotifyMeleeDamageDealt_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshPound_Versus.Timer_RageBump
// [0x00080102] 
// Parameters infos:

void AKFPawn_ZedFleshPound_Versus::Timer_RageBump ( )
{
	static UFunction* pFnTimer_RageBump = NULL;

	if ( ! pFnTimer_RageBump )
		pFnTimer_RageBump = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshPound_Versus.Timer_RageBump" );

	AKFPawn_ZedFleshPound_Versus_execTimer_RageBump_Parms Timer_RageBump_Parms;

	this->ProcessEvent ( pFnTimer_RageBump, &Timer_RageBump_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshPound_Versus.SetEnraged
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedFleshPound_Versus::SetEnraged ( )
{
	static UFunction* pFnSetEnraged = NULL;

	if ( ! pFnSetEnraged )
		pFnSetEnraged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshPound_Versus.SetEnraged" );

	AKFPawn_ZedFleshPound_Versus_execSetEnraged_Parms SetEnraged_Parms;

	this->ProcessEvent ( pFnSetEnraged, &SetEnraged_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshPound_Versus.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshPound_Versus::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshPound_Versus.SetSprinting" );

	AKFPawn_ZedFleshPound_Versus_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshPound_Versus.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedFleshPound_Versus::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshPound_Versus.PossessedBy" );

	AKFPawn_ZedFleshPound_Versus_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedBloat_Versus.ANIMNOTIFY_PukeMineAttack
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedBloat_Versus::ANIMNOTIFY_PukeMineAttack ( )
{
	static UFunction* pFnANIMNOTIFY_PukeMineAttack = NULL;

	if ( ! pFnANIMNOTIFY_PukeMineAttack )
		pFnANIMNOTIFY_PukeMineAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedBloat_Versus.ANIMNOTIFY_PukeMineAttack" );

	AKFPawn_ZedBloat_Versus_execANIMNOTIFY_PukeMineAttack_Parms ANIMNOTIFY_PukeMineAttack_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_PukeMineAttack, &ANIMNOTIFY_PukeMineAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedSiren_Versus.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedSiren_Versus::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedSiren_Versus.SetSprinting" );

	AKFPawn_ZedSiren_Versus_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk_Versus.GetFireballStrengthPerSecond
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk_Versus::GetFireballStrengthPerSecond ( )
{
	static UFunction* pFnGetFireballStrengthPerSecond = NULL;

	if ( ! pFnGetFireballStrengthPerSecond )
		pFnGetFireballStrengthPerSecond = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk_Versus.GetFireballStrengthPerSecond" );

	AKFPawn_ZedHusk_Versus_execGetFireballStrengthPerSecond_Parms GetFireballStrengthPerSecond_Parms;

	this->ProcessEvent ( pFnGetFireballStrengthPerSecond, &GetFireballStrengthPerSecond_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk_Versus.GetFireballStrengthRange
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk_Versus::GetFireballStrengthRange ( )
{
	static UFunction* pFnGetFireballStrengthRange = NULL;

	if ( ! pFnGetFireballStrengthRange )
		pFnGetFireballStrengthRange = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk_Versus.GetFireballStrengthRange" );

	AKFPawn_ZedHusk_Versus_execGetFireballStrengthRange_Parms GetFireballStrengthRange_Parms;

	this->ProcessEvent ( pFnGetFireballStrengthRange, &GetFireballStrengthRange_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk_Versus.UseAdjustedControllerSensitivity
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk_Versus::UseAdjustedControllerSensitivity ( )
{
	static UFunction* pFnUseAdjustedControllerSensitivity = NULL;

	if ( ! pFnUseAdjustedControllerSensitivity )
		pFnUseAdjustedControllerSensitivity = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk_Versus.UseAdjustedControllerSensitivity" );

	AKFPawn_ZedHusk_Versus_execUseAdjustedControllerSensitivity_Parms UseAdjustedControllerSensitivity_Parms;

	this->ProcessEvent ( pFnUseAdjustedControllerSensitivity, &UseAdjustedControllerSensitivity_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk_Versus.GetSuicideSM
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk_Versus::GetSuicideSM ( )
{
	static UFunction* pFnGetSuicideSM = NULL;

	if ( ! pFnGetSuicideSM )
		pFnGetSuicideSM = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk_Versus.GetSuicideSM" );

	AKFPawn_ZedHusk_Versus_execGetSuicideSM_Parms GetSuicideSM_Parms;

	this->ProcessEvent ( pFnGetSuicideSM, &GetSuicideSM_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk_Versus.OnExploded
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk_Versus::OnExploded ( )
{
	static UFunction* pFnOnExploded = NULL;

	if ( ! pFnOnExploded )
		pFnOnExploded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk_Versus.OnExploded" );

	AKFPawn_ZedHusk_Versus_execOnExploded_Parms OnExploded_Parms;

	this->ProcessEvent ( pFnOnExploded, &OnExploded_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk_Versus.ShootFireball
// [0x00820002] 
// Parameters infos:

void AKFPawn_ZedHusk_Versus::ShootFireball ( )
{
	static UFunction* pFnShootFireball = NULL;

	if ( ! pFnShootFireball )
		pFnShootFireball = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk_Versus.ShootFireball" );

	AKFPawn_ZedHusk_Versus_execShootFireball_Parms ShootFireball_Parms;

	this->ProcessEvent ( pFnShootFireball, &ShootFireball_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk_Versus.ANIMNOTIFY_HuskFireballAttack
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk_Versus::ANIMNOTIFY_HuskFireballAttack ( )
{
	static UFunction* pFnANIMNOTIFY_HuskFireballAttack = NULL;

	if ( ! pFnANIMNOTIFY_HuskFireballAttack )
		pFnANIMNOTIFY_HuskFireballAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk_Versus.ANIMNOTIFY_HuskFireballAttack" );

	AKFPawn_ZedHusk_Versus_execANIMNOTIFY_HuskFireballAttack_Parms ANIMNOTIFY_HuskFireballAttack_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_HuskFireballAttack, &ANIMNOTIFY_HuskFireballAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHusk_Versus.ANIMNOTIFY_FlameThrowerOn
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHusk_Versus::ANIMNOTIFY_FlameThrowerOn ( )
{
	static UFunction* pFnANIMNOTIFY_FlameThrowerOn = NULL;

	if ( ! pFnANIMNOTIFY_FlameThrowerOn )
		pFnANIMNOTIFY_FlameThrowerOn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHusk_Versus.ANIMNOTIFY_FlameThrowerOn" );

	AKFPawn_ZedHusk_Versus_execANIMNOTIFY_FlameThrowerOn_Parms ANIMNOTIFY_FlameThrowerOn_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_FlameThrowerOn, &ANIMNOTIFY_FlameThrowerOn_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.Timer_StopSummoningChildren
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::Timer_StopSummoningChildren ( )
{
	static UFunction* pFnTimer_StopSummoningChildren = NULL;

	if ( ! pFnTimer_StopSummoningChildren )
		pFnTimer_StopSummoningChildren = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.Timer_StopSummoningChildren" );

	AKFPawn_ZedPatriarch_Versus_execTimer_StopSummoningChildren_Parms Timer_StopSummoningChildren_Parms;

	this->ProcessEvent ( pFnTimer_StopSummoningChildren, &Timer_StopSummoningChildren_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.SummonChildren
// [0x00020022] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::SummonChildren ( )
{
	static UFunction* pFnSummonChildren = NULL;

	if ( ! pFnSummonChildren )
		pFnSummonChildren = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.SummonChildren" );

	AKFPawn_ZedPatriarch_Versus_execSummonChildren_Parms SummonChildren_Parms;

	this->ProcessEvent ( pFnSummonChildren, &SummonChildren_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UseAdjustedControllerSensitivity
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::UseAdjustedControllerSensitivity ( )
{
	static UFunction* pFnUseAdjustedControllerSensitivity = NULL;

	if ( ! pFnUseAdjustedControllerSensitivity )
		pFnUseAdjustedControllerSensitivity = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UseAdjustedControllerSensitivity" );

	AKFPawn_ZedPatriarch_Versus_execUseAdjustedControllerSensitivity_Parms UseAdjustedControllerSensitivity_Parms;

	this->ProcessEvent ( pFnUseAdjustedControllerSensitivity, &UseAdjustedControllerSensitivity_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.ShouldDrawBossIcon
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::ShouldDrawBossIcon ( )
{
	static UFunction* pFnShouldDrawBossIcon = NULL;

	if ( ! pFnShouldDrawBossIcon )
		pFnShouldDrawBossIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.ShouldDrawBossIcon" );

	AKFPawn_ZedPatriarch_Versus_execShouldDrawBossIcon_Parms ShouldDrawBossIcon_Parms;

	this->ProcessEvent ( pFnShouldDrawBossIcon, &ShouldDrawBossIcon_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.NotifyHealed
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::NotifyHealed ( )
{
	static UFunction* pFnNotifyHealed = NULL;

	if ( ! pFnNotifyHealed )
		pFnNotifyHealed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.NotifyHealed" );

	AKFPawn_ZedPatriarch_Versus_execNotifyHealed_Parms NotifyHealed_Parms;

	this->ProcessEvent ( pFnNotifyHealed, &NotifyHealed_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.NotifyTakeHit
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::NotifyTakeHit ( )
{
	static UFunction* pFnNotifyTakeHit = NULL;

	if ( ! pFnNotifyTakeHit )
		pFnNotifyTakeHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.NotifyTakeHit" );

	AKFPawn_ZedPatriarch_Versus_execNotifyTakeHit_Parms NotifyTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyTakeHit, &NotifyTakeHit_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.NotifySpecialMoveEnded
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::NotifySpecialMoveEnded ( )
{
	static UFunction* pFnNotifySpecialMoveEnded = NULL;

	if ( ! pFnNotifySpecialMoveEnded )
		pFnNotifySpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.NotifySpecialMoveEnded" );

	AKFPawn_ZedPatriarch_Versus_execNotifySpecialMoveEnded_Parms NotifySpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnNotifySpecialMoveEnded, &NotifySpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.CheckHealth
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::CheckHealth ( )
{
	static UFunction* pFnCheckHealth = NULL;

	if ( ! pFnCheckHealth )
		pFnCheckHealth = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.CheckHealth" );

	AKFPawn_ZedPatriarch_Versus_execCheckHealth_Parms CheckHealth_Parms;

	this->ProcessEvent ( pFnCheckHealth, &CheckHealth_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.IncrementBattlePhase
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::IncrementBattlePhase ( )
{
	static UFunction* pFnIncrementBattlePhase = NULL;

	if ( ! pFnIncrementBattlePhase )
		pFnIncrementBattlePhase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.IncrementBattlePhase" );

	AKFPawn_ZedPatriarch_Versus_execIncrementBattlePhase_Parms IncrementBattlePhase_Parms;

	this->ProcessEvent ( pFnIncrementBattlePhase, &IncrementBattlePhase_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.ClearMortarTargets
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::ClearMortarTargets ( )
{
	static UFunction* pFnClearMortarTargets = NULL;

	if ( ! pFnClearMortarTargets )
		pFnClearMortarTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.ClearMortarTargets" );

	AKFPawn_ZedPatriarch_Versus_execClearMortarTargets_Parms ClearMortarTargets_Parms;

	this->ProcessEvent ( pFnClearMortarTargets, &ClearMortarTargets_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.CollectMortarTargets
// [0x00824002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::CollectMortarTargets ( )
{
	static UFunction* pFnCollectMortarTargets = NULL;

	if ( ! pFnCollectMortarTargets )
		pFnCollectMortarTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.CollectMortarTargets" );

	AKFPawn_ZedPatriarch_Versus_execCollectMortarTargets_Parms CollectMortarTargets_Parms;

	this->ProcessEvent ( pFnCollectMortarTargets, &CollectMortarTargets_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.PreMortarAttack
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::PreMortarAttack ( )
{
	static UFunction* pFnPreMortarAttack = NULL;

	if ( ! pFnPreMortarAttack )
		pFnPreMortarAttack = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.PreMortarAttack" );

	AKFPawn_ZedPatriarch_Versus_execPreMortarAttack_Parms PreMortarAttack_Parms;

	this->ProcessEvent ( pFnPreMortarAttack, &PreMortarAttack_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.GetMortarAimDirAndTargetLoc
// [0x00C20002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::GetMortarAimDirAndTargetLoc ( )
{
	static UFunction* pFnGetMortarAimDirAndTargetLoc = NULL;

	if ( ! pFnGetMortarAimDirAndTargetLoc )
		pFnGetMortarAimDirAndTargetLoc = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.GetMortarAimDirAndTargetLoc" );

	AKFPawn_ZedPatriarch_Versus_execGetMortarAimDirAndTargetLoc_Parms GetMortarAimDirAndTargetLoc_Parms;

	this->ProcessEvent ( pFnGetMortarAimDirAndTargetLoc, &GetMortarAimDirAndTargetLoc_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.GetMissileAimDirAndTargetLoc
// [0x00C20002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::GetMissileAimDirAndTargetLoc ( )
{
	static UFunction* pFnGetMissileAimDirAndTargetLoc = NULL;

	if ( ! pFnGetMissileAimDirAndTargetLoc )
		pFnGetMissileAimDirAndTargetLoc = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.GetMissileAimDirAndTargetLoc" );

	AKFPawn_ZedPatriarch_Versus_execGetMissileAimDirAndTargetLoc_Parms GetMissileAimDirAndTargetLoc_Parms;

	this->ProcessEvent ( pFnGetMissileAimDirAndTargetLoc, &GetMissileAimDirAndTargetLoc_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.IsHealAllowed
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::IsHealAllowed ( )
{
	static UFunction* pFnIsHealAllowed = NULL;

	if ( ! pFnIsHealAllowed )
		pFnIsHealAllowed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.IsHealAllowed" );

	AKFPawn_ZedPatriarch_Versus_execIsHealAllowed_Parms IsHealAllowed_Parms;

	this->ProcessEvent ( pFnIsHealAllowed, &IsHealAllowed_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateCloakIconState
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::UpdateCloakIconState ( )
{
	static UFunction* pFnUpdateCloakIconState = NULL;

	if ( ! pFnUpdateCloakIconState )
		pFnUpdateCloakIconState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateCloakIconState" );

	AKFPawn_ZedPatriarch_Versus_execUpdateCloakIconState_Parms UpdateCloakIconState_Parms;

	this->ProcessEvent ( pFnUpdateCloakIconState, &UpdateCloakIconState_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateHealAvailable
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::UpdateHealAvailable ( )
{
	static UFunction* pFnUpdateHealAvailable = NULL;

	if ( ! pFnUpdateHealAvailable )
		pFnUpdateHealAvailable = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateHealAvailable" );

	AKFPawn_ZedPatriarch_Versus_execUpdateHealAvailable_Parms UpdateHealAvailable_Parms;

	this->ProcessEvent ( pFnUpdateHealAvailable, &UpdateHealAvailable_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.GetMinCloakPct
// [0x00080102] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::GetMinCloakPct ( )
{
	static UFunction* pFnGetMinCloakPct = NULL;

	if ( ! pFnGetMinCloakPct )
		pFnGetMinCloakPct = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.GetMinCloakPct" );

	AKFPawn_ZedPatriarch_Versus_execGetMinCloakPct_Parms GetMinCloakPct_Parms;

	this->ProcessEvent ( pFnGetMinCloakPct, &GetMinCloakPct_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateGunTrackingSkelCtrl
// [0x00820102] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::UpdateGunTrackingSkelCtrl ( )
{
	static UFunction* pFnUpdateGunTrackingSkelCtrl = NULL;

	if ( ! pFnUpdateGunTrackingSkelCtrl )
		pFnUpdateGunTrackingSkelCtrl = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateGunTrackingSkelCtrl" );

	AKFPawn_ZedPatriarch_Versus_execUpdateGunTrackingSkelCtrl_Parms UpdateGunTrackingSkelCtrl_Parms;

	this->ProcessEvent ( pFnUpdateGunTrackingSkelCtrl, &UpdateGunTrackingSkelCtrl_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.Tick" );

	AKFPawn_ZedPatriarch_Versus_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.Timer_EnableCloak
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::Timer_EnableCloak ( )
{
	static UFunction* pFnTimer_EnableCloak = NULL;

	if ( ! pFnTimer_EnableCloak )
		pFnTimer_EnableCloak = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.Timer_EnableCloak" );

	AKFPawn_ZedPatriarch_Versus_execTimer_EnableCloak_Parms Timer_EnableCloak_Parms;

	this->ProcessEvent ( pFnTimer_EnableCloak, &Timer_EnableCloak_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateCloakCharges
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::UpdateCloakCharges ( )
{
	static UFunction* pFnUpdateCloakCharges = NULL;

	if ( ! pFnUpdateCloakCharges )
		pFnUpdateCloakCharges = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateCloakCharges" );

	AKFPawn_ZedPatriarch_Versus_execUpdateCloakCharges_Parms UpdateCloakCharges_Parms;

	this->ProcessEvent ( pFnUpdateCloakCharges, &UpdateCloakCharges_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.Timer_UpdateCloakCharge
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::Timer_UpdateCloakCharge ( )
{
	static UFunction* pFnTimer_UpdateCloakCharge = NULL;

	if ( ! pFnTimer_UpdateCloakCharge )
		pFnTimer_UpdateCloakCharge = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.Timer_UpdateCloakCharge" );

	AKFPawn_ZedPatriarch_Versus_execTimer_UpdateCloakCharge_Parms Timer_UpdateCloakCharge_Parms;

	this->ProcessEvent ( pFnTimer_UpdateCloakCharge, &Timer_UpdateCloakCharge_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateCloakedTimer
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::UpdateCloakedTimer ( )
{
	static UFunction* pFnUpdateCloakedTimer = NULL;

	if ( ! pFnUpdateCloakedTimer )
		pFnUpdateCloakedTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.UpdateCloakedTimer" );

	AKFPawn_ZedPatriarch_Versus_execUpdateCloakedTimer_Parms UpdateCloakedTimer_Parms;

	this->ProcessEvent ( pFnUpdateCloakedTimer, &UpdateCloakedTimer_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.SetCloaked
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::SetCloaked ( )
{
	static UFunction* pFnSetCloaked = NULL;

	if ( ! pFnSetCloaked )
		pFnSetCloaked = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.SetCloaked" );

	AKFPawn_ZedPatriarch_Versus_execSetCloaked_Parms SetCloaked_Parms;

	this->ProcessEvent ( pFnSetCloaked, &SetCloaked_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.PossessedBy" );

	AKFPawn_ZedPatriarch_Versus_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedPatriarch_Versus.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedPatriarch_Versus::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedPatriarch_Versus.ReplicatedEvent" );

	AKFPawn_ZedPatriarch_Versus_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFPawn_Human_Versus.NotifyLocalPlayerTeamReceived
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human_Versus::NotifyLocalPlayerTeamReceived ( )
{
	static UFunction* pFnNotifyLocalPlayerTeamReceived = NULL;

	if ( ! pFnNotifyLocalPlayerTeamReceived )
		pFnNotifyLocalPlayerTeamReceived = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_Human_Versus.NotifyLocalPlayerTeamReceived" );

	AKFPawn_Human_Versus_execNotifyLocalPlayerTeamReceived_Parms NotifyLocalPlayerTeamReceived_Parms;

	this->ProcessEvent ( pFnNotifyLocalPlayerTeamReceived, &NotifyLocalPlayerTeamReceived_Parms, NULL );
};

// Function kfgamecontent.KFPawn_Human_Versus.UpdateGameplayMICParams
// [0x00020102] 
// Parameters infos:

void AKFPawn_Human_Versus::UpdateGameplayMICParams ( )
{
	static UFunction* pFnUpdateGameplayMICParams = NULL;

	if ( ! pFnUpdateGameplayMICParams )
		pFnUpdateGameplayMICParams = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_Human_Versus.UpdateGameplayMICParams" );

	AKFPawn_Human_Versus_execUpdateGameplayMICParams_Parms UpdateGameplayMICParams_Parms;

	this->ProcessEvent ( pFnUpdateGameplayMICParams, &UpdateGameplayMICParams_Parms, NULL );
};

// Function kfgamecontent.KFPawn_Human_Versus.SetCharacterArch
// [0x00024102] 
// Parameters infos:

void AKFPawn_Human_Versus::SetCharacterArch ( )
{
	static UFunction* pFnSetCharacterArch = NULL;

	if ( ! pFnSetCharacterArch )
		pFnSetCharacterArch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_Human_Versus.SetCharacterArch" );

	AKFPawn_Human_Versus_execSetCharacterArch_Parms SetCharacterArch_Parms;

	this->ProcessEvent ( pFnSetCharacterArch, &SetCharacterArch_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.DrawRemainingTimeUntilSpawn
// [0x00820002] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::DrawRemainingTimeUntilSpawn ( )
{
	static UFunction* pFnDrawRemainingTimeUntilSpawn = NULL;

	if ( ! pFnDrawRemainingTimeUntilSpawn )
		pFnDrawRemainingTimeUntilSpawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.DrawRemainingTimeUntilSpawn" );

	AKFGFXHudWrapper_Versus_execDrawRemainingTimeUntilSpawn_Parms DrawRemainingTimeUntilSpawn_Parms;

	this->ProcessEvent ( pFnDrawRemainingTimeUntilSpawn, &DrawRemainingTimeUntilSpawn_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.DrawBossPawnIcon
// [0x00820002] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::DrawBossPawnIcon ( )
{
	static UFunction* pFnDrawBossPawnIcon = NULL;

	if ( ! pFnDrawBossPawnIcon )
		pFnDrawBossPawnIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.DrawBossPawnIcon" );

	AKFGFXHudWrapper_Versus_execDrawBossPawnIcon_Parms DrawBossPawnIcon_Parms;

	this->ProcessEvent ( pFnDrawBossPawnIcon, &DrawBossPawnIcon_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.DrawPreciseHumanPlayerInfo
// [0x00820002] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::DrawPreciseHumanPlayerInfo ( )
{
	static UFunction* pFnDrawPreciseHumanPlayerInfo = NULL;

	if ( ! pFnDrawPreciseHumanPlayerInfo )
		pFnDrawPreciseHumanPlayerInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.DrawPreciseHumanPlayerInfo" );

	AKFGFXHudWrapper_Versus_execDrawPreciseHumanPlayerInfo_Parms DrawPreciseHumanPlayerInfo_Parms;

	this->ProcessEvent ( pFnDrawPreciseHumanPlayerInfo, &DrawPreciseHumanPlayerInfo_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.DrawFriendlyZedPawnIcon
// [0x00820102] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::DrawFriendlyZedPawnIcon ( )
{
	static UFunction* pFnDrawFriendlyZedPawnIcon = NULL;

	if ( ! pFnDrawFriendlyZedPawnIcon )
		pFnDrawFriendlyZedPawnIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.DrawFriendlyZedPawnIcon" );

	AKFGFXHudWrapper_Versus_execDrawFriendlyZedPawnIcon_Parms DrawFriendlyZedPawnIcon_Parms;

	this->ProcessEvent ( pFnDrawFriendlyZedPawnIcon, &DrawFriendlyZedPawnIcon_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.CheckAndDrawBossPawnIcon
// [0x00820102] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::CheckAndDrawBossPawnIcon ( )
{
	static UFunction* pFnCheckAndDrawBossPawnIcon = NULL;

	if ( ! pFnCheckAndDrawBossPawnIcon )
		pFnCheckAndDrawBossPawnIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.CheckAndDrawBossPawnIcon" );

	AKFGFXHudWrapper_Versus_execCheckAndDrawBossPawnIcon_Parms CheckAndDrawBossPawnIcon_Parms;

	this->ProcessEvent ( pFnCheckAndDrawBossPawnIcon, &CheckAndDrawBossPawnIcon_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.DrawHUD
// [0x00820002] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.DrawHUD" );

	AKFGFXHudWrapper_Versus_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.GetHUDClass
// [0x00020002] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::GetHUDClass ( )
{
	static UFunction* pFnGetHUDClass = NULL;

	if ( ! pFnGetHUDClass )
		pFnGetHUDClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.GetHUDClass" );

	AKFGFXHudWrapper_Versus_execGetHUDClass_Parms GetHUDClass_Parms;

	this->ProcessEvent ( pFnGetHUDClass, &GetHUDClass_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.CreateHUDMovie
// [0x00024002] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::CreateHUDMovie ( )
{
	static UFunction* pFnCreateHUDMovie = NULL;

	if ( ! pFnCreateHUDMovie )
		pFnCreateHUDMovie = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.CreateHUDMovie" );

	AKFGFXHudWrapper_Versus_execCreateHUDMovie_Parms CreateHUDMovie_Parms;

	this->ProcessEvent ( pFnCreateHUDMovie, &CreateHUDMovie_Parms, NULL );
};

// Function kfgamecontent.KFGFXHudWrapper_Versus.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFGFXHudWrapper_Versus::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFXHudWrapper_Versus.PostBeginPlay" );

	AKFGFXHudWrapper_Versus_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.DoDeathExplosion
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::DoDeathExplosion ( )
{
	static UFunction* pFnDoDeathExplosion = NULL;

	if ( ! pFnDoDeathExplosion )
		pFnDoDeathExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.DoDeathExplosion" );

	AKFGameInfo_WeeklySurvival_execDoDeathExplosion_Parms DoDeathExplosion_Parms;

	this->ProcessEvent ( pFnDoDeathExplosion, &DoDeathExplosion_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.RestartPlayer
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::RestartPlayer ( )
{
	static UFunction* pFnRestartPlayer = NULL;

	if ( ! pFnRestartPlayer )
		pFnRestartPlayer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.RestartPlayer" );

	AKFGameInfo_WeeklySurvival_execRestartPlayer_Parms RestartPlayer_Parms;

	this->ProcessEvent ( pFnRestartPlayer, &RestartPlayer_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.AdjustStartingGrenadeCount
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::AdjustStartingGrenadeCount ( )
{
	static UFunction* pFnAdjustStartingGrenadeCount = NULL;

	if ( ! pFnAdjustStartingGrenadeCount )
		pFnAdjustStartingGrenadeCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.AdjustStartingGrenadeCount" );

	AKFGameInfo_WeeklySurvival_execAdjustStartingGrenadeCount_Parms AdjustStartingGrenadeCount_Parms;

	this->ProcessEvent ( pFnAdjustStartingGrenadeCount, &AdjustStartingGrenadeCount_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.AllowPrimaryWeapon
// [0x00820002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::AllowPrimaryWeapon ( )
{
	static UFunction* pFnAllowPrimaryWeapon = NULL;

	if ( ! pFnAllowPrimaryWeapon )
		pFnAllowPrimaryWeapon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.AllowPrimaryWeapon" );

	AKFGameInfo_WeeklySurvival_execAllowPrimaryWeapon_Parms AllowPrimaryWeapon_Parms;

	this->ProcessEvent ( pFnAllowPrimaryWeapon, &AllowPrimaryWeapon_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.GetAISpawnType
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::GetAISpawnType ( )
{
	static UFunction* pFnGetAISpawnType = NULL;

	if ( ! pFnGetAISpawnType )
		pFnGetAISpawnType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.GetAISpawnType" );

	AKFGameInfo_WeeklySurvival_execGetAISpawnType_Parms GetAISpawnType_Parms;

	this->ProcessEvent ( pFnGetAISpawnType, &GetAISpawnType_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.ResetPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::ResetPickups ( )
{
	static UFunction* pFnResetPickups = NULL;

	if ( ! pFnResetPickups )
		pFnResetPickups = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.ResetPickups" );

	AKFGameInfo_WeeklySurvival_execResetPickups_Parms ResetPickups_Parms;

	this->ProcessEvent ( pFnResetPickups, &ResetPickups_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.ResetAllPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::ResetAllPickups ( )
{
	static UFunction* pFnResetAllPickups = NULL;

	if ( ! pFnResetAllPickups )
		pFnResetAllPickups = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.ResetAllPickups" );

	AKFGameInfo_WeeklySurvival_execResetAllPickups_Parms ResetAllPickups_Parms;

	this->ProcessEvent ( pFnResetAllPickups, &ResetAllPickups_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.InitAllPickups
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::InitAllPickups ( )
{
	static UFunction* pFnInitAllPickups = NULL;

	if ( ! pFnInitAllPickups )
		pFnInitAllPickups = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.InitAllPickups" );

	AKFGameInfo_WeeklySurvival_execInitAllPickups_Parms InitAllPickups_Parms;

	this->ProcessEvent ( pFnInitAllPickups, &InitAllPickups_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetupNextTrader
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SetupNextTrader ( )
{
	static UFunction* pFnSetupNextTrader = NULL;

	if ( ! pFnSetupNextTrader )
		pFnSetupNextTrader = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetupNextTrader" );

	AKFGameInfo_WeeklySurvival_execSetupNextTrader_Parms SetupNextTrader_Parms;

	this->ProcessEvent ( pFnSetupNextTrader, &SetupNextTrader_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.OpenTrader
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::OpenTrader ( )
{
	static UFunction* pFnOpenTrader = NULL;

	if ( ! pFnOpenTrader )
		pFnOpenTrader = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.OpenTrader" );

	AKFGameInfo_WeeklySurvival_execOpenTrader_Parms OpenTrader_Parms;

	this->ProcessEvent ( pFnOpenTrader, &OpenTrader_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.GetAdditionalBossSpawns
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::GetAdditionalBossSpawns ( )
{
	static UFunction* pFnGetAdditionalBossSpawns = NULL;

	if ( ! pFnGetAdditionalBossSpawns )
		pFnGetAdditionalBossSpawns = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.GetAdditionalBossSpawns" );

	AKFGameInfo_WeeklySurvival_execGetAdditionalBossSpawns_Parms GetAdditionalBossSpawns_Parms;

	this->ProcessEvent ( pFnGetAdditionalBossSpawns, &GetAdditionalBossSpawns_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.PauseAdditionalBossWaves
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::PauseAdditionalBossWaves ( )
{
	static UFunction* pFnPauseAdditionalBossWaves = NULL;

	if ( ! pFnPauseAdditionalBossWaves )
		pFnPauseAdditionalBossWaves = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.PauseAdditionalBossWaves" );

	AKFGameInfo_WeeklySurvival_execPauseAdditionalBossWaves_Parms PauseAdditionalBossWaves_Parms;

	this->ProcessEvent ( pFnPauseAdditionalBossWaves, &PauseAdditionalBossWaves_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SpawnBossWave
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SpawnBossWave ( )
{
	static UFunction* pFnSpawnBossWave = NULL;

	if ( ! pFnSpawnBossWave )
		pFnSpawnBossWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SpawnBossWave" );

	AKFGameInfo_WeeklySurvival_execSpawnBossWave_Parms SpawnBossWave_Parms;

	this->ProcessEvent ( pFnSpawnBossWave, &SpawnBossWave_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.BossCameraZedTimeRecheck
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::BossCameraZedTimeRecheck ( )
{
	static UFunction* pFnBossCameraZedTimeRecheck = NULL;

	if ( ! pFnBossCameraZedTimeRecheck )
		pFnBossCameraZedTimeRecheck = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.BossCameraZedTimeRecheck" );

	AKFGameInfo_WeeklySurvival_execBossCameraZedTimeRecheck_Parms BossCameraZedTimeRecheck_Parms;

	this->ProcessEvent ( pFnBossCameraZedTimeRecheck, &BossCameraZedTimeRecheck_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.StartWave
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::StartWave ( )
{
	static UFunction* pFnStartWave = NULL;

	if ( ! pFnStartWave )
		pFnStartWave = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.StartWave" );

	AKFGameInfo_WeeklySurvival_execStartWave_Parms StartWave_Parms;

	this->ProcessEvent ( pFnStartWave, &StartWave_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.EndOfMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::EndOfMatch ( )
{
	static UFunction* pFnEndOfMatch = NULL;

	if ( ! pFnEndOfMatch )
		pFnEndOfMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.EndOfMatch" );

	AKFGameInfo_WeeklySurvival_execEndOfMatch_Parms EndOfMatch_Parms;

	this->ProcessEvent ( pFnEndOfMatch, &EndOfMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.ClearZedTimePCTimers
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::ClearZedTimePCTimers ( )
{
	static UFunction* pFnClearZedTimePCTimers = NULL;

	if ( ! pFnClearZedTimePCTimers )
		pFnClearZedTimePCTimers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.ClearZedTimePCTimers" );

	AKFGameInfo_WeeklySurvival_execClearZedTimePCTimers_Parms ClearZedTimePCTimers_Parms;

	this->ProcessEvent ( pFnClearZedTimePCTimers, &ClearZedTimePCTimers_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.WaveEnded
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::WaveEnded ( )
{
	static UFunction* pFnWaveEnded = NULL;

	if ( ! pFnWaveEnded )
		pFnWaveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.WaveEnded" );

	AKFGameInfo_WeeklySurvival_execWaveEnded_Parms WaveEnded_Parms;

	this->ProcessEvent ( pFnWaveEnded, &WaveEnded_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.TickZedTime
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::TickZedTime ( )
{
	static UFunction* pFnTickZedTime = NULL;

	if ( ! pFnTickZedTime )
		pFnTickZedTime = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.TickZedTime" );

	AKFGameInfo_WeeklySurvival_execTickZedTime_Parms TickZedTime_Parms;

	this->ProcessEvent ( pFnTickZedTime, &TickZedTime_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.Tick
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.Tick" );

	AKFGameInfo_WeeklySurvival_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetBossIndex
// [0x00820002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SetBossIndex ( )
{
	static UFunction* pFnSetBossIndex = NULL;

	if ( ! pFnSetBossIndex )
		pFnSetBossIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetBossIndex" );

	AKFGameInfo_WeeklySurvival_execSetBossIndex_Parms SetBossIndex_Parms;

	this->ProcessEvent ( pFnSetBossIndex, &SetBossIndex_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.PostLogin
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_WeeklySurvival::eventPostLogin ( )
{
	static UFunction* pFnPostLogin = NULL;

	if ( ! pFnPostLogin )
		pFnPostLogin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.PostLogin" );

	AKFGameInfo_WeeklySurvival_eventPostLogin_Parms PostLogin_Parms;

	this->ProcessEvent ( pFnPostLogin, &PostLogin_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.CreateDifficultyInfo
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::CreateDifficultyInfo ( )
{
	static UFunction* pFnCreateDifficultyInfo = NULL;

	if ( ! pFnCreateDifficultyInfo )
		pFnCreateDifficultyInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.CreateDifficultyInfo" );

	AKFGameInfo_WeeklySurvival_execCreateDifficultyInfo_Parms CreateDifficultyInfo_Parms;

	this->ProcessEvent ( pFnCreateDifficultyInfo, &CreateDifficultyInfo_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.StartMatch
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::StartMatch ( )
{
	static UFunction* pFnStartMatch = NULL;

	if ( ! pFnStartMatch )
		pFnStartMatch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.StartMatch" );

	AKFGameInfo_WeeklySurvival_execStartMatch_Parms StartMatch_Parms;

	this->ProcessEvent ( pFnStartMatch, &StartMatch_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.ResetPermanentZed
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::ResetPermanentZed ( )
{
	static UFunction* pFnResetPermanentZed = NULL;

	if ( ! pFnResetPermanentZed )
		pFnResetPermanentZed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.ResetPermanentZed" );

	AKFGameInfo_WeeklySurvival_execResetPermanentZed_Parms ResetPermanentZed_Parms;

	this->ProcessEvent ( pFnResetPermanentZed, &ResetPermanentZed_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetPermanentZedTime
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SetPermanentZedTime ( )
{
	static UFunction* pFnSetPermanentZedTime = NULL;

	if ( ! pFnSetPermanentZedTime )
		pFnSetPermanentZedTime = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetPermanentZedTime" );

	AKFGameInfo_WeeklySurvival_execSetPermanentZedTime_Parms SetPermanentZedTime_Parms;

	this->ProcessEvent ( pFnSetPermanentZedTime, &SetPermanentZedTime_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetSpawnPointOverrides
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SetSpawnPointOverrides ( )
{
	static UFunction* pFnSetSpawnPointOverrides = NULL;

	if ( ! pFnSetSpawnPointOverrides )
		pFnSetSpawnPointOverrides = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetSpawnPointOverrides" );

	AKFGameInfo_WeeklySurvival_execSetSpawnPointOverrides_Parms SetSpawnPointOverrides_Parms;

	this->ProcessEvent ( pFnSetSpawnPointOverrides, &SetSpawnPointOverrides_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetZedTimeOverrides
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SetZedTimeOverrides ( )
{
	static UFunction* pFnSetZedTimeOverrides = NULL;

	if ( ! pFnSetZedTimeOverrides )
		pFnSetZedTimeOverrides = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetZedTimeOverrides" );

	AKFGameInfo_WeeklySurvival_execSetZedTimeOverrides_Parms SetZedTimeOverrides_Parms;

	this->ProcessEvent ( pFnSetZedTimeOverrides, &SetZedTimeOverrides_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetPickupItemList
// [0x00820002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SetPickupItemList ( )
{
	static UFunction* pFnSetPickupItemList = NULL;

	if ( ! pFnSetPickupItemList )
		pFnSetPickupItemList = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetPickupItemList" );

	AKFGameInfo_WeeklySurvival_execSetPickupItemList_Parms SetPickupItemList_Parms;

	this->ProcessEvent ( pFnSetPickupItemList, &SetPickupItemList_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetModifiedGameLength
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SetModifiedGameLength ( )
{
	static UFunction* pFnSetModifiedGameLength = NULL;

	if ( ! pFnSetModifiedGameLength )
		pFnSetModifiedGameLength = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetModifiedGameLength" );

	AKFGameInfo_WeeklySurvival_execSetModifiedGameLength_Parms SetModifiedGameLength_Parms;

	this->ProcessEvent ( pFnSetModifiedGameLength, &SetModifiedGameLength_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.UsesModifiedLength
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::UsesModifiedLength ( )
{
	static UFunction* pFnUsesModifiedLength = NULL;

	if ( ! pFnUsesModifiedLength )
		pFnUsesModifiedLength = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.UsesModifiedLength" );

	AKFGameInfo_WeeklySurvival_execUsesModifiedLength_Parms UsesModifiedLength_Parms;

	this->ProcessEvent ( pFnUsesModifiedLength, &UsesModifiedLength_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetModifiedGameDifficulty
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::SetModifiedGameDifficulty ( )
{
	static UFunction* pFnSetModifiedGameDifficulty = NULL;

	if ( ! pFnSetModifiedGameDifficulty )
		pFnSetModifiedGameDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetModifiedGameDifficulty" );

	AKFGameInfo_WeeklySurvival_execSetModifiedGameDifficulty_Parms SetModifiedGameDifficulty_Parms;

	this->ProcessEvent ( pFnSetModifiedGameDifficulty, &SetModifiedGameDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.UsesModifiedDifficulty
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::UsesModifiedDifficulty ( )
{
	static UFunction* pFnUsesModifiedDifficulty = NULL;

	if ( ! pFnUsesModifiedDifficulty )
		pFnUsesModifiedDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.UsesModifiedDifficulty" );

	AKFGameInfo_WeeklySurvival_execUsesModifiedDifficulty_Parms UsesModifiedDifficulty_Parms;

	this->ProcessEvent ( pFnUsesModifiedDifficulty, &UsesModifiedDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.CreateOutbreakEvent
// [0x00020002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::CreateOutbreakEvent ( )
{
	static UFunction* pFnCreateOutbreakEvent = NULL;

	if ( ! pFnCreateOutbreakEvent )
		pFnCreateOutbreakEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.CreateOutbreakEvent" );

	AKFGameInfo_WeeklySurvival_execCreateOutbreakEvent_Parms CreateOutbreakEvent_Parms;

	this->ProcessEvent ( pFnCreateOutbreakEvent, &CreateOutbreakEvent_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_WeeklySurvival::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.PreBeginPlay" );

	AKFGameInfo_WeeklySurvival_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.InitGame
// [0x00420802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_WeeklySurvival::eventInitGame ( )
{
	static UFunction* pFnInitGame = NULL;

	if ( ! pFnInitGame )
		pFnInitGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.InitGame" );

	AKFGameInfo_WeeklySurvival_eventInitGame_Parms InitGame_Parms;

	this->ProcessEvent ( pFnInitGame, &InitGame_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.GametypeChecksWaveLength
// [0x00022002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::GametypeChecksWaveLength ( )
{
	static UFunction* pFnGametypeChecksWaveLength = NULL;

	if ( ! pFnGametypeChecksWaveLength )
		pFnGametypeChecksWaveLength = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.GametypeChecksWaveLength" );

	AKFGameInfo_WeeklySurvival_execGametypeChecksWaveLength_Parms GametypeChecksWaveLength_Parms;

	this->ProcessEvent ( pFnGametypeChecksWaveLength, &GametypeChecksWaveLength_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.GametypeChecksDifficulty
// [0x00022002] 
// Parameters infos:

void AKFGameInfo_WeeklySurvival::GametypeChecksDifficulty ( )
{
	static UFunction* pFnGametypeChecksDifficulty = NULL;

	if ( ! pFnGametypeChecksDifficulty )
		pFnGametypeChecksDifficulty = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.GametypeChecksDifficulty" );

	AKFGameInfo_WeeklySurvival_execGametypeChecksDifficulty_Parms GametypeChecksDifficulty_Parms;

	this->ProcessEvent ( pFnGametypeChecksDifficulty, &GametypeChecksDifficulty_Parms, NULL );
};

// Function kfgamecontent.KFGameInfo_WeeklySurvival.SetGameType
// [0x00022802] ( FUNC_Event )
// Parameters infos:

void AKFGameInfo_WeeklySurvival::eventSetGameType ( )
{
	static UFunction* pFnSetGameType = NULL;

	if ( ! pFnSetGameType )
		pFnSetGameType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGameInfo_WeeklySurvival.SetGameType" );

	AKFGameInfo_WeeklySurvival_eventSetGameType_Parms SetGameType_Parms;

	this->ProcessEvent ( pFnSetGameType, &SetGameType_Parms, NULL );
};

// Function kfgamecontent.KFOutbreakEvent_Weekly.GetOutbreakId
// [0x00022002] 
// Parameters infos:

void UKFOutbreakEvent_Weekly::GetOutbreakId ( )
{
	static UFunction* pFnGetOutbreakId = NULL;

	if ( ! pFnGetOutbreakId )
		pFnGetOutbreakId = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFOutbreakEvent_Weekly.GetOutbreakId" );

	UKFOutbreakEvent_Weekly_execGetOutbreakId_Parms GetOutbreakId_Parms;

	this->ProcessEvent ( pFnGetOutbreakId, &GetOutbreakId_Parms, NULL );
};

// Function kfgamecontent.KFOutbreakEvent_Weekly.AdjustScoreDamage
// [0x00020002] 
// Parameters infos:

void UKFOutbreakEvent_Weekly::AdjustScoreDamage ( )
{
	static UFunction* pFnAdjustScoreDamage = NULL;

	if ( ! pFnAdjustScoreDamage )
		pFnAdjustScoreDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFOutbreakEvent_Weekly.AdjustScoreDamage" );

	UKFOutbreakEvent_Weekly_execAdjustScoreDamage_Parms AdjustScoreDamage_Parms;

	this->ProcessEvent ( pFnAdjustScoreDamage, &AdjustScoreDamage_Parms, NULL );
};

// Function kfgamecontent.KFOutbreakEvent_Weekly.OnScoreKill
// [0x00820002] 
// Parameters infos:

void UKFOutbreakEvent_Weekly::OnScoreKill ( )
{
	static UFunction* pFnOnScoreKill = NULL;

	if ( ! pFnOnScoreKill )
		pFnOnScoreKill = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFOutbreakEvent_Weekly.OnScoreKill" );

	UKFOutbreakEvent_Weekly_execOnScoreKill_Parms OnScoreKill_Parms;

	this->ProcessEvent ( pFnOnScoreKill, &OnScoreKill_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.ClearBuffIcons
// [0x00020000] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::ClearBuffIcons ( )
{
	static UFunction* pFnClearBuffIcons = NULL;

	if ( ! pFnClearBuffIcons )
		pFnClearBuffIcons = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.ClearBuffIcons" );

	UKFGFxHUD_PlayerStatusVersus_execClearBuffIcons_Parms ClearBuffIcons_Parms;

	this->ProcessEvent ( pFnClearBuffIcons, &ClearBuffIcons_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.ShowActiveIndicators
// [0x00020000] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::ShowActiveIndicators ( )
{
	static UFunction* pFnShowActiveIndicators = NULL;

	if ( ! pFnShowActiveIndicators )
		pFnShowActiveIndicators = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.ShowActiveIndicators" );

	UKFGFxHUD_PlayerStatusVersus_execShowActiveIndicators_Parms ShowActiveIndicators_Parms;

	this->ProcessEvent ( pFnShowActiveIndicators, &ShowActiveIndicators_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateHealer
// [0x00020000] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::UpdateHealer ( )
{
	static UFunction* pFnUpdateHealer = NULL;

	if ( ! pFnUpdateHealer )
		pFnUpdateHealer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateHealer" );

	UKFGFxHUD_PlayerStatusVersus_execUpdateHealer_Parms UpdateHealer_Parms;

	this->ProcessEvent ( pFnUpdateHealer, &UpdateHealer_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdatePerk
// [0x00020000] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::UpdatePerk ( )
{
	static UFunction* pFnUpdatePerk = NULL;

	if ( ! pFnUpdatePerk )
		pFnUpdatePerk = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdatePerk" );

	UKFGFxHUD_PlayerStatusVersus_execUpdatePerk_Parms UpdatePerk_Parms;

	this->ProcessEvent ( pFnUpdatePerk, &UpdatePerk_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateArmor
// [0x00020000] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::UpdateArmor ( )
{
	static UFunction* pFnUpdateArmor = NULL;

	if ( ! pFnUpdateArmor )
		pFnUpdateArmor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateArmor" );

	UKFGFxHUD_PlayerStatusVersus_execUpdateArmor_Parms UpdateArmor_Parms;

	this->ProcessEvent ( pFnUpdateArmor, &UpdateArmor_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateXP
// [0x00020000] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::UpdateXP ( )
{
	static UFunction* pFnUpdateXP = NULL;

	if ( ! pFnUpdateXP )
		pFnUpdateXP = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateXP" );

	UKFGFxHUD_PlayerStatusVersus_execUpdateXP_Parms UpdateXP_Parms;

	this->ProcessEvent ( pFnUpdateXP, &UpdateXP_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateHealth
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::UpdateHealth ( )
{
	static UFunction* pFnUpdateHealth = NULL;

	if ( ! pFnUpdateHealth )
		pFnUpdateHealth = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateHealth" );

	UKFGFxHUD_PlayerStatusVersus_execUpdateHealth_Parms UpdateHealth_Parms;

	this->ProcessEvent ( pFnUpdateHealth, &UpdateHealth_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateCharacterName
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::UpdateCharacterName ( )
{
	static UFunction* pFnUpdateCharacterName = NULL;

	if ( ! pFnUpdateCharacterName )
		pFnUpdateCharacterName = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.UpdateCharacterName" );

	UKFGFxHUD_PlayerStatusVersus_execUpdateCharacterName_Parms UpdateCharacterName_Parms;

	this->ProcessEvent ( pFnUpdateCharacterName, &UpdateCharacterName_Parms, NULL );
};

// Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxHUD_PlayerStatusVersus::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxHUD_PlayerStatusVersus.TickHud" );

	UKFGFxHUD_PlayerStatusVersus_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_HUD_Versus.PawnDied
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD_Versus::PawnDied ( )
{
	static UFunction* pFnPawnDied = NULL;

	if ( ! pFnPawnDied )
		pFnPawnDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_HUD_Versus.PawnDied" );

	UKFGFxMoviePlayer_HUD_Versus_execPawnDied_Parms PawnDied_Parms;

	this->ProcessEvent ( pFnPawnDied, &PawnDied_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_HUD_Versus.ReceivePawn
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD_Versus::ReceivePawn ( )
{
	static UFunction* pFnReceivePawn = NULL;

	if ( ! pFnReceivePawn )
		pFnReceivePawn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_HUD_Versus.ReceivePawn" );

	UKFGFxMoviePlayer_HUD_Versus_execReceivePawn_Parms ReceivePawn_Parms;

	this->ProcessEvent ( pFnReceivePawn, &ReceivePawn_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_HUD_Versus.WidgetInitialized
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFGFxMoviePlayer_HUD_Versus::eventWidgetInitialized ( )
{
	static UFunction* pFnWidgetInitialized = NULL;

	if ( ! pFnWidgetInitialized )
		pFnWidgetInitialized = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_HUD_Versus.WidgetInitialized" );

	UKFGFxMoviePlayer_HUD_Versus_eventWidgetInitialized_Parms WidgetInitialized_Parms;

	this->ProcessEvent ( pFnWidgetInitialized, &WidgetInitialized_Parms, NULL );
};

// Function kfgamecontent.KFGFxMoviePlayer_HUD_Versus.TickHud
// [0x00020002] 
// Parameters infos:

void UKFGFxMoviePlayer_HUD_Versus::TickHud ( )
{
	static UFunction* pFnTickHud = NULL;

	if ( ! pFnTickHud )
		pFnTickHud = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxMoviePlayer_HUD_Versus.TickHud" );

	UKFGFxMoviePlayer_HUD_Versus_execTickHud_Parms TickHud_Parms;

	this->ProcessEvent ( pFnTickHud, &TickHud_Parms, NULL );
};

// Function kfgamecontent.KFGFxTutorialContainer.ReplaceTextArray
// [0x00422002] 
// Parameters infos:

void UKFGFxTutorialContainer::ReplaceTextArray ( )
{
	static UFunction* pFnReplaceTextArray = NULL;

	if ( ! pFnReplaceTextArray )
		pFnReplaceTextArray = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxTutorialContainer.ReplaceTextArray" );

	UKFGFxTutorialContainer_execReplaceTextArray_Parms ReplaceTextArray_Parms;

	this->ProcessEvent ( pFnReplaceTextArray, &ReplaceTextArray_Parms, NULL );
};

// Function kfgamecontent.KFGFxTutorialContainer.SetPopUpData
// [0x00C20002] 
// Parameters infos:

void UKFGFxTutorialContainer::SetPopUpData ( )
{
	static UFunction* pFnSetPopUpData = NULL;

	if ( ! pFnSetPopUpData )
		pFnSetPopUpData = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxTutorialContainer.SetPopUpData" );

	UKFGFxTutorialContainer_execSetPopUpData_Parms SetPopUpData_Parms;

	this->ProcessEvent ( pFnSetPopUpData, &SetPopUpData_Parms, NULL );
};

// Function kfgamecontent.KFGFxTutorialContainer.LocalizeText
// [0x00020002] 
// Parameters infos:

void UKFGFxTutorialContainer::LocalizeText ( )
{
	static UFunction* pFnLocalizeText = NULL;

	if ( ! pFnLocalizeText )
		pFnLocalizeText = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxTutorialContainer.LocalizeText" );

	UKFGFxTutorialContainer_execLocalizeText_Parms LocalizeText_Parms;

	this->ProcessEvent ( pFnLocalizeText, &LocalizeText_Parms, NULL );
};

// Function kfgamecontent.KFGFxTutorialContainer.UpdateUsingGamePad
// [0x00020002] 
// Parameters infos:

void UKFGFxTutorialContainer::UpdateUsingGamePad ( )
{
	static UFunction* pFnUpdateUsingGamePad = NULL;

	if ( ! pFnUpdateUsingGamePad )
		pFnUpdateUsingGamePad = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxTutorialContainer.UpdateUsingGamePad" );

	UKFGFxTutorialContainer_execUpdateUsingGamePad_Parms UpdateUsingGamePad_Parms;

	this->ProcessEvent ( pFnUpdateUsingGamePad, &UpdateUsingGamePad_Parms, NULL );
};

// Function kfgamecontent.KFGFxTutorialContainer.InitMenu
// [0x00020002] 
// Parameters infos:

void UKFGFxTutorialContainer::InitMenu ( )
{
	static UFunction* pFnInitMenu = NULL;

	if ( ! pFnInitMenu )
		pFnInitMenu = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFGFxTutorialContainer.InitMenu" );

	UKFGFxTutorialContainer_execInitMenu_Parms InitMenu_Parms;

	this->ProcessEvent ( pFnInitMenu, &InitMenu_Parms, NULL );
};

// Function kfgamecontent.KFInventory_Money.DenyPickupQuery
// [0x00020002] 
// Parameters infos:

void AKFInventory_Money::DenyPickupQuery ( )
{
	static UFunction* pFnDenyPickupQuery = NULL;

	if ( ! pFnDenyPickupQuery )
		pFnDenyPickupQuery = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFInventory_Money.DenyPickupQuery" );

	AKFInventory_Money_execDenyPickupQuery_Parms DenyPickupQuery_Parms;

	this->ProcessEvent ( pFnDenyPickupQuery, &DenyPickupQuery_Parms, NULL );
};

// Function kfgamecontent.KFInventory_Money.DropFrom
// [0x00020002] 
// Parameters infos:

void AKFInventory_Money::DropFrom ( )
{
	static UFunction* pFnDropFrom = NULL;

	if ( ! pFnDropFrom )
		pFnDropFrom = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFInventory_Money.DropFrom" );

	AKFInventory_Money_execDropFrom_Parms DropFrom_Parms;

	this->ProcessEvent ( pFnDropFrom, &DropFrom_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetActorCount
// [0x00020100] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetActorCount ( )
{
	static UFunction* pFnGetActorCount = NULL;

	if ( ! pFnGetActorCount )
		pFnGetActorCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetActorCount" );

	AKFMapObjective_AreaDefense_execGetActorCount_Parms GetActorCount_Parms;

	this->ProcessEvent ( pFnGetActorCount, &GetActorCount_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetLocalizedRequirements
// [0x00020100] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetLocalizedRequirements ( )
{
	static UFunction* pFnGetLocalizedRequirements = NULL;

	if ( ! pFnGetLocalizedRequirements )
		pFnGetLocalizedRequirements = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetLocalizedRequirements" );

	AKFMapObjective_AreaDefense_execGetLocalizedRequirements_Parms GetLocalizedRequirements_Parms;

	this->ProcessEvent ( pFnGetLocalizedRequirements, &GetLocalizedRequirements_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.UsesMultipleActors
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::UsesMultipleActors ( )
{
	static UFunction* pFnUsesMultipleActors = NULL;

	if ( ! pFnUsesMultipleActors )
		pFnUsesMultipleActors = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.UsesMultipleActors" );

	AKFMapObjective_AreaDefense_execUsesMultipleActors_Parms UsesMultipleActors_Parms;

	this->ProcessEvent ( pFnUsesMultipleActors, &UsesMultipleActors_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetLocalizedDescription
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetLocalizedDescription ( )
{
	static UFunction* pFnGetLocalizedDescription = NULL;

	if ( ! pFnGetLocalizedDescription )
		pFnGetLocalizedDescription = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetLocalizedDescription" );

	AKFMapObjective_AreaDefense_execGetLocalizedDescription_Parms GetLocalizedDescription_Parms;

	this->ProcessEvent ( pFnGetLocalizedDescription, &GetLocalizedDescription_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetLocalizedName
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetLocalizedName ( )
{
	static UFunction* pFnGetLocalizedName = NULL;

	if ( ! pFnGetLocalizedName )
		pFnGetLocalizedName = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetLocalizedName" );

	AKFMapObjective_AreaDefense_execGetLocalizedName_Parms GetLocalizedName_Parms;

	this->ProcessEvent ( pFnGetLocalizedName, &GetLocalizedName_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetIcon
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetIcon ( )
{
	static UFunction* pFnGetIcon = NULL;

	if ( ! pFnGetIcon )
		pFnGetIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetIcon" );

	AKFMapObjective_AreaDefense_execGetIcon_Parms GetIcon_Parms;

	this->ProcessEvent ( pFnGetIcon, &GetIcon_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetIconLocation
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetIconLocation ( )
{
	static UFunction* pFnGetIconLocation = NULL;

	if ( ! pFnGetIconLocation )
		pFnGetIconLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetIconLocation" );

	AKFMapObjective_AreaDefense_execGetIconLocation_Parms GetIconLocation_Parms;

	this->ProcessEvent ( pFnGetIconLocation, &GetIconLocation_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.ShouldDrawIcon
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::ShouldDrawIcon ( )
{
	static UFunction* pFnShouldDrawIcon = NULL;

	if ( ! pFnShouldDrawIcon )
		pFnShouldDrawIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.ShouldDrawIcon" );

	AKFMapObjective_AreaDefense_execShouldDrawIcon_Parms ShouldDrawIcon_Parms;

	this->ProcessEvent ( pFnShouldDrawIcon, &ShouldDrawIcon_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetMaxXPReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetMaxXPReward ( )
{
	static UFunction* pFnGetMaxXPReward = NULL;

	if ( ! pFnGetMaxXPReward )
		pFnGetMaxXPReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetMaxXPReward" );

	AKFMapObjective_AreaDefense_execGetMaxXPReward_Parms GetMaxXPReward_Parms;

	this->ProcessEvent ( pFnGetMaxXPReward, &GetMaxXPReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetXPReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetXPReward ( )
{
	static UFunction* pFnGetXPReward = NULL;

	if ( ! pFnGetXPReward )
		pFnGetXPReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetXPReward" );

	AKFMapObjective_AreaDefense_execGetXPReward_Parms GetXPReward_Parms;

	this->ProcessEvent ( pFnGetXPReward, &GetXPReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetMaxVoshReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetMaxVoshReward ( )
{
	static UFunction* pFnGetMaxVoshReward = NULL;

	if ( ! pFnGetMaxVoshReward )
		pFnGetMaxVoshReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetMaxVoshReward" );

	AKFMapObjective_AreaDefense_execGetMaxVoshReward_Parms GetMaxVoshReward_Parms;

	this->ProcessEvent ( pFnGetMaxVoshReward, &GetMaxVoshReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetVoshReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetVoshReward ( )
{
	static UFunction* pFnGetVoshReward = NULL;

	if ( ! pFnGetVoshReward )
		pFnGetVoshReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetVoshReward" );

	AKFMapObjective_AreaDefense_execGetVoshReward_Parms GetVoshReward_Parms;

	this->ProcessEvent ( pFnGetVoshReward, &GetVoshReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetMaxDoshReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetMaxDoshReward ( )
{
	static UFunction* pFnGetMaxDoshReward = NULL;

	if ( ! pFnGetMaxDoshReward )
		pFnGetMaxDoshReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetMaxDoshReward" );

	AKFMapObjective_AreaDefense_execGetMaxDoshReward_Parms GetMaxDoshReward_Parms;

	this->ProcessEvent ( pFnGetMaxDoshReward, &GetMaxDoshReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetDoshReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetDoshReward ( )
{
	static UFunction* pFnGetDoshReward = NULL;

	if ( ! pFnGetDoshReward )
		pFnGetDoshReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetDoshReward" );

	AKFMapObjective_AreaDefense_execGetDoshReward_Parms GetDoshReward_Parms;

	this->ProcessEvent ( pFnGetDoshReward, &GetDoshReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.HasFailedObjective
// [0x00020100] 
// Parameters infos:

void AKFMapObjective_AreaDefense::HasFailedObjective ( )
{
	static UFunction* pFnHasFailedObjective = NULL;

	if ( ! pFnHasFailedObjective )
		pFnHasFailedObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.HasFailedObjective" );

	AKFMapObjective_AreaDefense_execHasFailedObjective_Parms HasFailedObjective_Parms;

	this->ProcessEvent ( pFnHasFailedObjective, &HasFailedObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetSpawnRateMod
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetSpawnRateMod ( )
{
	static UFunction* pFnGetSpawnRateMod = NULL;

	if ( ! pFnGetSpawnRateMod )
		pFnGetSpawnRateMod = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetSpawnRateMod" );

	AKFMapObjective_AreaDefense_execGetSpawnRateMod_Parms GetSpawnRateMod_Parms;

	this->ProcessEvent ( pFnGetSpawnRateMod, &GetSpawnRateMod_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetPlayersInObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetPlayersInObjective ( )
{
	static UFunction* pFnGetPlayersInObjective = NULL;

	if ( ! pFnGetPlayersInObjective )
		pFnGetPlayersInObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetPlayersInObjective" );

	AKFMapObjective_AreaDefense_execGetPlayersInObjective_Parms GetPlayersInObjective_Parms;

	this->ProcessEvent ( pFnGetPlayersInObjective, &GetPlayersInObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.IsBonus
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_AreaDefense::IsBonus ( )
{
	static UFunction* pFnIsBonus = NULL;

	if ( ! pFnIsBonus )
		pFnIsBonus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.IsBonus" );

	AKFMapObjective_AreaDefense_execIsBonus_Parms IsBonus_Parms;

	this->ProcessEvent ( pFnIsBonus, &IsBonus_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetActivationPctChance
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetActivationPctChance ( )
{
	static UFunction* pFnGetActivationPctChance = NULL;

	if ( ! pFnGetActivationPctChance )
		pFnGetActivationPctChance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetActivationPctChance" );

	AKFMapObjective_AreaDefense_execGetActivationPctChance_Parms GetActivationPctChance_Parms;

	this->ProcessEvent ( pFnGetActivationPctChance, &GetActivationPctChance_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GetProgress
// [0x00020100] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GetProgress ( )
{
	static UFunction* pFnGetProgress = NULL;

	if ( ! pFnGetProgress )
		pFnGetProgress = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GetProgress" );

	AKFMapObjective_AreaDefense_execGetProgress_Parms GetProgress_Parms;

	this->ProcessEvent ( pFnGetProgress, &GetProgress_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.UsesProgress
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::UsesProgress ( )
{
	static UFunction* pFnUsesProgress = NULL;

	if ( ! pFnUsesProgress )
		pFnUsesProgress = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.UsesProgress" );

	AKFMapObjective_AreaDefense_execUsesProgress_Parms UsesProgress_Parms;

	this->ProcessEvent ( pFnUsesProgress, &UsesProgress_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.IsCurrentGameModeBlacklisted
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_AreaDefense::IsCurrentGameModeBlacklisted ( )
{
	static UFunction* pFnIsCurrentGameModeBlacklisted = NULL;

	if ( ! pFnIsCurrentGameModeBlacklisted )
		pFnIsCurrentGameModeBlacklisted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.IsCurrentGameModeBlacklisted" );

	AKFMapObjective_AreaDefense_execIsCurrentGameModeBlacklisted_Parms IsCurrentGameModeBlacklisted_Parms;

	this->ProcessEvent ( pFnIsCurrentGameModeBlacklisted, &IsCurrentGameModeBlacklisted_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.CanActivateObjective
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_AreaDefense::CanActivateObjective ( )
{
	static UFunction* pFnCanActivateObjective = NULL;

	if ( ! pFnCanActivateObjective )
		pFnCanActivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.CanActivateObjective" );

	AKFMapObjective_AreaDefense_execCanActivateObjective_Parms CanActivateObjective_Parms;

	this->ProcessEvent ( pFnCanActivateObjective, &CanActivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.IsActive
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::IsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.IsActive" );

	AKFMapObjective_AreaDefense_execIsActive_Parms IsActive_Parms;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.GrantReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::GrantReward ( )
{
	static UFunction* pFnGrantReward = NULL;

	if ( ! pFnGrantReward )
		pFnGrantReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.GrantReward" );

	AKFMapObjective_AreaDefense_execGrantReward_Parms GrantReward_Parms;

	this->ProcessEvent ( pFnGrantReward, &GrantReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.DeactivateObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::DeactivateObjective ( )
{
	static UFunction* pFnDeactivateObjective = NULL;

	if ( ! pFnDeactivateObjective )
		pFnDeactivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.DeactivateObjective" );

	AKFMapObjective_AreaDefense_execDeactivateObjective_Parms DeactivateObjective_Parms;

	this->ProcessEvent ( pFnDeactivateObjective, &DeactivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.SetTrailActorType
// [0x00020100] 
// Parameters infos:

void AKFMapObjective_AreaDefense::SetTrailActorType ( )
{
	static UFunction* pFnSetTrailActorType = NULL;

	if ( ! pFnSetTrailActorType )
		pFnSetTrailActorType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.SetTrailActorType" );

	AKFMapObjective_AreaDefense_execSetTrailActorType_Parms SetTrailActorType_Parms;

	this->ProcessEvent ( pFnSetTrailActorType, &SetTrailActorType_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.ActivateObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.ActivateObjective" );

	AKFMapObjective_AreaDefense_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.IsValidZed
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_AreaDefense::IsValidZed ( )
{
	static UFunction* pFnIsValidZed = NULL;

	if ( ! pFnIsValidZed )
		pFnIsValidZed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.IsValidZed" );

	AKFMapObjective_AreaDefense_execIsValidZed_Parms IsValidZed_Parms;

	this->ProcessEvent ( pFnIsValidZed, &IsValidZed_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.UpdateMeshArrayState
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_AreaDefense::UpdateMeshArrayState ( )
{
	static UFunction* pFnUpdateMeshArrayState = NULL;

	if ( ! pFnUpdateMeshArrayState )
		pFnUpdateMeshArrayState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.UpdateMeshArrayState" );

	AKFMapObjective_AreaDefense_execUpdateMeshArrayState_Parms UpdateMeshArrayState_Parms;

	this->ProcessEvent ( pFnUpdateMeshArrayState, &UpdateMeshArrayState_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_AreaDefense::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.UnTouch" );

	AKFMapObjective_AreaDefense_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_AreaDefense::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.Touch" );

	AKFMapObjective_AreaDefense_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_AreaDefense::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.PostBeginPlay" );

	AKFMapObjective_AreaDefense_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_AreaDefense.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_AreaDefense::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_AreaDefense.ReplicatedEvent" );

	AKFMapObjective_AreaDefense_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFReplicatedShowPathObjective.GetPathClass
// [0x00020102] 
// Parameters infos:

void AKFReplicatedShowPathObjective::GetPathClass ( )
{
	static UFunction* pFnGetPathClass = NULL;

	if ( ! pFnGetPathClass )
		pFnGetPathClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFReplicatedShowPathObjective.GetPathClass" );

	AKFReplicatedShowPathObjective_execGetPathClass_Parms GetPathClass_Parms;

	this->ProcessEvent ( pFnGetPathClass, &GetPathClass_Parms, NULL );
};

// Function kfgamecontent.KFReplicatedShowPathObjective.SetObjeciveType
// [0x00020102] 
// Parameters infos:

void AKFReplicatedShowPathObjective::SetObjeciveType ( )
{
	static UFunction* pFnSetObjeciveType = NULL;

	if ( ! pFnSetObjeciveType )
		pFnSetObjeciveType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFReplicatedShowPathObjective.SetObjeciveType" );

	AKFReplicatedShowPathObjective_execSetObjeciveType_Parms SetObjeciveType_Parms;

	this->ProcessEvent ( pFnSetObjeciveType, &SetObjeciveType_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.GetActorCount
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::GetActorCount ( )
{
	static UFunction* pFnGetActorCount = NULL;

	if ( ! pFnGetActorCount )
		pFnGetActorCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.GetActorCount" );

	AKFMapObjective_ActivateTrigger_execGetActorCount_Parms GetActorCount_Parms;

	this->ProcessEvent ( pFnGetActorCount, &GetActorCount_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.UsesMultipleActors
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::UsesMultipleActors ( )
{
	static UFunction* pFnUsesMultipleActors = NULL;

	if ( ! pFnUsesMultipleActors )
		pFnUsesMultipleActors = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.UsesMultipleActors" );

	AKFMapObjective_ActivateTrigger_execUsesMultipleActors_Parms UsesMultipleActors_Parms;

	this->ProcessEvent ( pFnUsesMultipleActors, &UsesMultipleActors_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.HasFailedObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::HasFailedObjective ( )
{
	static UFunction* pFnHasFailedObjective = NULL;

	if ( ! pFnHasFailedObjective )
		pFnHasFailedObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.HasFailedObjective" );

	AKFMapObjective_ActivateTrigger_execHasFailedObjective_Parms HasFailedObjective_Parms;

	this->ProcessEvent ( pFnHasFailedObjective, &HasFailedObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.GetLocalizedRequirements
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::GetLocalizedRequirements ( )
{
	static UFunction* pFnGetLocalizedRequirements = NULL;

	if ( ! pFnGetLocalizedRequirements )
		pFnGetLocalizedRequirements = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.GetLocalizedRequirements" );

	AKFMapObjective_ActivateTrigger_execGetLocalizedRequirements_Parms GetLocalizedRequirements_Parms;

	this->ProcessEvent ( pFnGetLocalizedRequirements, &GetLocalizedRequirements_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.GetProgress
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::GetProgress ( )
{
	static UFunction* pFnGetProgress = NULL;

	if ( ! pFnGetProgress )
		pFnGetProgress = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.GetProgress" );

	AKFMapObjective_ActivateTrigger_execGetProgress_Parms GetProgress_Parms;

	this->ProcessEvent ( pFnGetProgress, &GetProgress_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.CheckTriggerActivation
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::CheckTriggerActivation ( )
{
	static UFunction* pFnCheckTriggerActivation = NULL;

	if ( ! pFnCheckTriggerActivation )
		pFnCheckTriggerActivation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.CheckTriggerActivation" );

	AKFMapObjective_ActivateTrigger_execCheckTriggerActivation_Parms CheckTriggerActivation_Parms;

	this->ProcessEvent ( pFnCheckTriggerActivation, &CheckTriggerActivation_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.OnTriggerReactivated
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::OnTriggerReactivated ( )
{
	static UFunction* pFnOnTriggerReactivated = NULL;

	if ( ! pFnOnTriggerReactivated )
		pFnOnTriggerReactivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.OnTriggerReactivated" );

	AKFMapObjective_ActivateTrigger_execOnTriggerReactivated_Parms OnTriggerReactivated_Parms;

	this->ProcessEvent ( pFnOnTriggerReactivated, &OnTriggerReactivated_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.OnTriggerActivated
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::OnTriggerActivated ( )
{
	static UFunction* pFnOnTriggerActivated = NULL;

	if ( ! pFnOnTriggerActivated )
		pFnOnTriggerActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.OnTriggerActivated" );

	AKFMapObjective_ActivateTrigger_execOnTriggerActivated_Parms OnTriggerActivated_Parms;

	this->ProcessEvent ( pFnOnTriggerActivated, &OnTriggerActivated_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.Timer_AllowRemindPlayers
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::Timer_AllowRemindPlayers ( )
{
	static UFunction* pFnTimer_AllowRemindPlayers = NULL;

	if ( ! pFnTimer_AllowRemindPlayers )
		pFnTimer_AllowRemindPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.Timer_AllowRemindPlayers" );

	AKFMapObjective_ActivateTrigger_execTimer_AllowRemindPlayers_Parms Timer_AllowRemindPlayers_Parms;

	this->ProcessEvent ( pFnTimer_AllowRemindPlayers, &Timer_AllowRemindPlayers_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.Timer_CheckObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::Timer_CheckObjective ( )
{
	static UFunction* pFnTimer_CheckObjective = NULL;

	if ( ! pFnTimer_CheckObjective )
		pFnTimer_CheckObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.Timer_CheckObjective" );

	AKFMapObjective_ActivateTrigger_execTimer_CheckObjective_Parms Timer_CheckObjective_Parms;

	this->ProcessEvent ( pFnTimer_CheckObjective, &Timer_CheckObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_ActivateTrigger::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.UnTouch" );

	AKFMapObjective_ActivateTrigger_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_ActivateTrigger::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.Touch" );

	AKFMapObjective_ActivateTrigger_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.ActivateTrigger
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::ActivateTrigger ( )
{
	static UFunction* pFnActivateTrigger = NULL;

	if ( ! pFnActivateTrigger )
		pFnActivateTrigger = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.ActivateTrigger" );

	AKFMapObjective_ActivateTrigger_execActivateTrigger_Parms ActivateTrigger_Parms;

	this->ProcessEvent ( pFnActivateTrigger, &ActivateTrigger_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.PlayDeactivationDialog
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::PlayDeactivationDialog ( )
{
	static UFunction* pFnPlayDeactivationDialog = NULL;

	if ( ! pFnPlayDeactivationDialog )
		pFnPlayDeactivationDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.PlayDeactivationDialog" );

	AKFMapObjective_ActivateTrigger_execPlayDeactivationDialog_Parms PlayDeactivationDialog_Parms;

	this->ProcessEvent ( pFnPlayDeactivationDialog, &PlayDeactivationDialog_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.DeactivateObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::DeactivateObjective ( )
{
	static UFunction* pFnDeactivateObjective = NULL;

	if ( ! pFnDeactivateObjective )
		pFnDeactivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.DeactivateObjective" );

	AKFMapObjective_ActivateTrigger_execDeactivateObjective_Parms DeactivateObjective_Parms;

	this->ProcessEvent ( pFnDeactivateObjective, &DeactivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.SetTrailActorType
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::SetTrailActorType ( )
{
	static UFunction* pFnSetTrailActorType = NULL;

	if ( ! pFnSetTrailActorType )
		pFnSetTrailActorType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.SetTrailActorType" );

	AKFMapObjective_ActivateTrigger_execSetTrailActorType_Parms SetTrailActorType_Parms;

	this->ProcessEvent ( pFnSetTrailActorType, &SetTrailActorType_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.ActivateObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_ActivateTrigger::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.ActivateObjective" );

	AKFMapObjective_ActivateTrigger_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_ActivateTrigger.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_ActivateTrigger::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_ActivateTrigger.ReplicatedEvent" );

	AKFMapObjective_ActivateTrigger_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_ObjectiveLever.AllowReactivation
// [0x00020002] 
// Parameters infos:

void AKFTrigger_ObjectiveLever::AllowReactivation ( )
{
	static UFunction* pFnAllowReactivation = NULL;

	if ( ! pFnAllowReactivation )
		pFnAllowReactivation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_ObjectiveLever.AllowReactivation" );

	AKFTrigger_ObjectiveLever_execAllowReactivation_Parms AllowReactivation_Parms;

	this->ProcessEvent ( pFnAllowReactivation, &AllowReactivation_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_ObjectiveLever.ActivateGame
// [0x00020002] 
// Parameters infos:

void AKFTrigger_ObjectiveLever::ActivateGame ( )
{
	static UFunction* pFnActivateGame = NULL;

	if ( ! pFnActivateGame )
		pFnActivateGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_ObjectiveLever.ActivateGame" );

	AKFTrigger_ObjectiveLever_execActivateGame_Parms ActivateGame_Parms;

	this->ProcessEvent ( pFnActivateGame, &ActivateGame_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_ObjectiveLever.ReadyToActivate
// [0x00020102] 
// Parameters infos:

void AKFTrigger_ObjectiveLever::ReadyToActivate ( )
{
	static UFunction* pFnReadyToActivate = NULL;

	if ( ! pFnReadyToActivate )
		pFnReadyToActivate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_ObjectiveLever.ReadyToActivate" );

	AKFTrigger_ObjectiveLever_execReadyToActivate_Parms ReadyToActivate_Parms;

	this->ProcessEvent ( pFnReadyToActivate, &ReadyToActivate_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.HasFailedObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_DoshHold::HasFailedObjective ( )
{
	static UFunction* pFnHasFailedObjective = NULL;

	if ( ! pFnHasFailedObjective )
		pFnHasFailedObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.HasFailedObjective" );

	AKFMapObjective_DoshHold_execHasFailedObjective_Parms HasFailedObjective_Parms;

	this->ProcessEvent ( pFnHasFailedObjective, &HasFailedObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.GetLocalizedRequirements
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_DoshHold::GetLocalizedRequirements ( )
{
	static UFunction* pFnGetLocalizedRequirements = NULL;

	if ( ! pFnGetLocalizedRequirements )
		pFnGetLocalizedRequirements = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.GetLocalizedRequirements" );

	AKFMapObjective_DoshHold_execGetLocalizedRequirements_Parms GetLocalizedRequirements_Parms;

	this->ProcessEvent ( pFnGetLocalizedRequirements, &GetLocalizedRequirements_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.GetActivationPctChance
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_DoshHold::GetActivationPctChance ( )
{
	static UFunction* pFnGetActivationPctChance = NULL;

	if ( ! pFnGetActivationPctChance )
		pFnGetActivationPctChance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.GetActivationPctChance" );

	AKFMapObjective_DoshHold_execGetActivationPctChance_Parms GetActivationPctChance_Parms;

	this->ProcessEvent ( pFnGetActivationPctChance, &GetActivationPctChance_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.GetProgress
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_DoshHold::GetProgress ( )
{
	static UFunction* pFnGetProgress = NULL;

	if ( ! pFnGetProgress )
		pFnGetProgress = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.GetProgress" );

	AKFMapObjective_DoshHold_execGetProgress_Parms GetProgress_Parms;

	this->ProcessEvent ( pFnGetProgress, &GetProgress_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.PlayDeactivationDialog
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_DoshHold::PlayDeactivationDialog ( )
{
	static UFunction* pFnPlayDeactivationDialog = NULL;

	if ( ! pFnPlayDeactivationDialog )
		pFnPlayDeactivationDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.PlayDeactivationDialog" );

	AKFMapObjective_DoshHold_execPlayDeactivationDialog_Parms PlayDeactivationDialog_Parms;

	this->ProcessEvent ( pFnPlayDeactivationDialog, &PlayDeactivationDialog_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.DeactivateObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_DoshHold::DeactivateObjective ( )
{
	static UFunction* pFnDeactivateObjective = NULL;

	if ( ! pFnDeactivateObjective )
		pFnDeactivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.DeactivateObjective" );

	AKFMapObjective_DoshHold_execDeactivateObjective_Parms DeactivateObjective_Parms;

	this->ProcessEvent ( pFnDeactivateObjective, &DeactivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.Timer_CheckWaveProgress
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_DoshHold::Timer_CheckWaveProgress ( )
{
	static UFunction* pFnTimer_CheckWaveProgress = NULL;

	if ( ! pFnTimer_CheckWaveProgress )
		pFnTimer_CheckWaveProgress = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.Timer_CheckWaveProgress" );

	AKFMapObjective_DoshHold_execTimer_CheckWaveProgress_Parms Timer_CheckWaveProgress_Parms;

	this->ProcessEvent ( pFnTimer_CheckWaveProgress, &Timer_CheckWaveProgress_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.ActivateObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_DoshHold::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.ActivateObjective" );

	AKFMapObjective_DoshHold_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.ActivationVO
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_DoshHold::ActivationVO ( )
{
	static UFunction* pFnActivationVO = NULL;

	if ( ! pFnActivationVO )
		pFnActivationVO = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.ActivationVO" );

	AKFMapObjective_DoshHold_execActivationVO_Parms ActivationVO_Parms;

	this->ProcessEvent ( pFnActivationVO, &ActivationVO_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.StartPenaltyCheck
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_DoshHold::StartPenaltyCheck ( )
{
	static UFunction* pFnStartPenaltyCheck = NULL;

	if ( ! pFnStartPenaltyCheck )
		pFnStartPenaltyCheck = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.StartPenaltyCheck" );

	AKFMapObjective_DoshHold_execStartPenaltyCheck_Parms StartPenaltyCheck_Parms;

	this->ProcessEvent ( pFnStartPenaltyCheck, &StartPenaltyCheck_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.Timer_AllowRemindPlayers
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_DoshHold::Timer_AllowRemindPlayers ( )
{
	static UFunction* pFnTimer_AllowRemindPlayers = NULL;

	if ( ! pFnTimer_AllowRemindPlayers )
		pFnTimer_AllowRemindPlayers = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.Timer_AllowRemindPlayers" );

	AKFMapObjective_DoshHold_execTimer_AllowRemindPlayers_Parms Timer_AllowRemindPlayers_Parms;

	this->ProcessEvent ( pFnTimer_AllowRemindPlayers, &Timer_AllowRemindPlayers_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.CheckBonusState
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_DoshHold::CheckBonusState ( )
{
	static UFunction* pFnCheckBonusState = NULL;

	if ( ! pFnCheckBonusState )
		pFnCheckBonusState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.CheckBonusState" );

	AKFMapObjective_DoshHold_execCheckBonusState_Parms CheckBonusState_Parms;

	this->ProcessEvent ( pFnCheckBonusState, &CheckBonusState_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_DoshHold.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_DoshHold::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_DoshHold.Touch" );

	AKFMapObjective_DoshHold_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetActorCount
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetActorCount ( )
{
	static UFunction* pFnGetActorCount = NULL;

	if ( ! pFnGetActorCount )
		pFnGetActorCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetActorCount" );

	AKFMapObjective_RepairActors_execGetActorCount_Parms GetActorCount_Parms;

	this->ProcessEvent ( pFnGetActorCount, &GetActorCount_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.UsesMultipleActors
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::UsesMultipleActors ( )
{
	static UFunction* pFnUsesMultipleActors = NULL;

	if ( ! pFnUsesMultipleActors )
		pFnUsesMultipleActors = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.UsesMultipleActors" );

	AKFMapObjective_RepairActors_execUsesMultipleActors_Parms UsesMultipleActors_Parms;

	this->ProcessEvent ( pFnUsesMultipleActors, &UsesMultipleActors_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetLivingPlayerCount
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetLivingPlayerCount ( )
{
	static UFunction* pFnGetLivingPlayerCount = NULL;

	if ( ! pFnGetLivingPlayerCount )
		pFnGetLivingPlayerCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetLivingPlayerCount" );

	AKFMapObjective_RepairActors_execGetLivingPlayerCount_Parms GetLivingPlayerCount_Parms;

	this->ProcessEvent ( pFnGetLivingPlayerCount, &GetLivingPlayerCount_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.HasFailedObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::HasFailedObjective ( )
{
	static UFunction* pFnHasFailedObjective = NULL;

	if ( ! pFnHasFailedObjective )
		pFnHasFailedObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.HasFailedObjective" );

	AKFMapObjective_RepairActors_execHasFailedObjective_Parms HasFailedObjective_Parms;

	this->ProcessEvent ( pFnHasFailedObjective, &HasFailedObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetSpawnRateMod
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetSpawnRateMod ( )
{
	static UFunction* pFnGetSpawnRateMod = NULL;

	if ( ! pFnGetSpawnRateMod )
		pFnGetSpawnRateMod = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetSpawnRateMod" );

	AKFMapObjective_RepairActors_execGetSpawnRateMod_Parms GetSpawnRateMod_Parms;

	this->ProcessEvent ( pFnGetSpawnRateMod, &GetSpawnRateMod_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetMaxXPReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetMaxXPReward ( )
{
	static UFunction* pFnGetMaxXPReward = NULL;

	if ( ! pFnGetMaxXPReward )
		pFnGetMaxXPReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetMaxXPReward" );

	AKFMapObjective_RepairActors_execGetMaxXPReward_Parms GetMaxXPReward_Parms;

	this->ProcessEvent ( pFnGetMaxXPReward, &GetMaxXPReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetXPReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetXPReward ( )
{
	static UFunction* pFnGetXPReward = NULL;

	if ( ! pFnGetXPReward )
		pFnGetXPReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetXPReward" );

	AKFMapObjective_RepairActors_execGetXPReward_Parms GetXPReward_Parms;

	this->ProcessEvent ( pFnGetXPReward, &GetXPReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetMaxVoshReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetMaxVoshReward ( )
{
	static UFunction* pFnGetMaxVoshReward = NULL;

	if ( ! pFnGetMaxVoshReward )
		pFnGetMaxVoshReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetMaxVoshReward" );

	AKFMapObjective_RepairActors_execGetMaxVoshReward_Parms GetMaxVoshReward_Parms;

	this->ProcessEvent ( pFnGetMaxVoshReward, &GetMaxVoshReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetVoshReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetVoshReward ( )
{
	static UFunction* pFnGetVoshReward = NULL;

	if ( ! pFnGetVoshReward )
		pFnGetVoshReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetVoshReward" );

	AKFMapObjective_RepairActors_execGetVoshReward_Parms GetVoshReward_Parms;

	this->ProcessEvent ( pFnGetVoshReward, &GetVoshReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetMaxDoshReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetMaxDoshReward ( )
{
	static UFunction* pFnGetMaxDoshReward = NULL;

	if ( ! pFnGetMaxDoshReward )
		pFnGetMaxDoshReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetMaxDoshReward" );

	AKFMapObjective_RepairActors_execGetMaxDoshReward_Parms GetMaxDoshReward_Parms;

	this->ProcessEvent ( pFnGetMaxDoshReward, &GetMaxDoshReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetDoshReward
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetDoshReward ( )
{
	static UFunction* pFnGetDoshReward = NULL;

	if ( ! pFnGetDoshReward )
		pFnGetDoshReward = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetDoshReward" );

	AKFMapObjective_RepairActors_execGetDoshReward_Parms GetDoshReward_Parms;

	this->ProcessEvent ( pFnGetDoshReward, &GetDoshReward_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetIcon
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetIcon ( )
{
	static UFunction* pFnGetIcon = NULL;

	if ( ! pFnGetIcon )
		pFnGetIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetIcon" );

	AKFMapObjective_RepairActors_execGetIcon_Parms GetIcon_Parms;

	this->ProcessEvent ( pFnGetIcon, &GetIcon_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetIconLocation
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetIconLocation ( )
{
	static UFunction* pFnGetIconLocation = NULL;

	if ( ! pFnGetIconLocation )
		pFnGetIconLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetIconLocation" );

	AKFMapObjective_RepairActors_execGetIconLocation_Parms GetIconLocation_Parms;

	this->ProcessEvent ( pFnGetIconLocation, &GetIconLocation_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.ShouldDrawIcon
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::ShouldDrawIcon ( )
{
	static UFunction* pFnShouldDrawIcon = NULL;

	if ( ! pFnShouldDrawIcon )
		pFnShouldDrawIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.ShouldDrawIcon" );

	AKFMapObjective_RepairActors_execShouldDrawIcon_Parms ShouldDrawIcon_Parms;

	this->ProcessEvent ( pFnShouldDrawIcon, &ShouldDrawIcon_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetLocalizedName
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetLocalizedName ( )
{
	static UFunction* pFnGetLocalizedName = NULL;

	if ( ! pFnGetLocalizedName )
		pFnGetLocalizedName = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetLocalizedName" );

	AKFMapObjective_RepairActors_execGetLocalizedName_Parms GetLocalizedName_Parms;

	this->ProcessEvent ( pFnGetLocalizedName, &GetLocalizedName_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetLocalizedRequirements
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetLocalizedRequirements ( )
{
	static UFunction* pFnGetLocalizedRequirements = NULL;

	if ( ! pFnGetLocalizedRequirements )
		pFnGetLocalizedRequirements = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetLocalizedRequirements" );

	AKFMapObjective_RepairActors_execGetLocalizedRequirements_Parms GetLocalizedRequirements_Parms;

	this->ProcessEvent ( pFnGetLocalizedRequirements, &GetLocalizedRequirements_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetLocalizedDescription
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetLocalizedDescription ( )
{
	static UFunction* pFnGetLocalizedDescription = NULL;

	if ( ! pFnGetLocalizedDescription )
		pFnGetLocalizedDescription = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetLocalizedDescription" );

	AKFMapObjective_RepairActors_execGetLocalizedDescription_Parms GetLocalizedDescription_Parms;

	this->ProcessEvent ( pFnGetLocalizedDescription, &GetLocalizedDescription_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetActivationPctChance
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetActivationPctChance ( )
{
	static UFunction* pFnGetActivationPctChance = NULL;

	if ( ! pFnGetActivationPctChance )
		pFnGetActivationPctChance = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetActivationPctChance" );

	AKFMapObjective_RepairActors_execGetActivationPctChance_Parms GetActivationPctChance_Parms;

	this->ProcessEvent ( pFnGetActivationPctChance, &GetActivationPctChance_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetTotalProgress
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetTotalProgress ( )
{
	static UFunction* pFnGetTotalProgress = NULL;

	if ( ! pFnGetTotalProgress )
		pFnGetTotalProgress = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetTotalProgress" );

	AKFMapObjective_RepairActors_execGetTotalProgress_Parms GetTotalProgress_Parms;

	this->ProcessEvent ( pFnGetTotalProgress, &GetTotalProgress_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.GetProgress
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::GetProgress ( )
{
	static UFunction* pFnGetProgress = NULL;

	if ( ! pFnGetProgress )
		pFnGetProgress = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.GetProgress" );

	AKFMapObjective_RepairActors_execGetProgress_Parms GetProgress_Parms;

	this->ProcessEvent ( pFnGetProgress, &GetProgress_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.UsesProgress
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::UsesProgress ( )
{
	static UFunction* pFnUsesProgress = NULL;

	if ( ! pFnUsesProgress )
		pFnUsesProgress = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.UsesProgress" );

	AKFMapObjective_RepairActors_execUsesProgress_Parms UsesProgress_Parms;

	this->ProcessEvent ( pFnUsesProgress, &UsesProgress_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.IsCurrentGameModeBlacklisted
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_RepairActors::IsCurrentGameModeBlacklisted ( )
{
	static UFunction* pFnIsCurrentGameModeBlacklisted = NULL;

	if ( ! pFnIsCurrentGameModeBlacklisted )
		pFnIsCurrentGameModeBlacklisted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.IsCurrentGameModeBlacklisted" );

	AKFMapObjective_RepairActors_execIsCurrentGameModeBlacklisted_Parms IsCurrentGameModeBlacklisted_Parms;

	this->ProcessEvent ( pFnIsCurrentGameModeBlacklisted, &IsCurrentGameModeBlacklisted_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.CanActivateObjective
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_RepairActors::CanActivateObjective ( )
{
	static UFunction* pFnCanActivateObjective = NULL;

	if ( ! pFnCanActivateObjective )
		pFnCanActivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.CanActivateObjective" );

	AKFMapObjective_RepairActors_execCanActivateObjective_Parms CanActivateObjective_Parms;

	this->ProcessEvent ( pFnCanActivateObjective, &CanActivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.IsBonus
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::IsBonus ( )
{
	static UFunction* pFnIsBonus = NULL;

	if ( ! pFnIsBonus )
		pFnIsBonus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.IsBonus" );

	AKFMapObjective_RepairActors_execIsBonus_Parms IsBonus_Parms;

	this->ProcessEvent ( pFnIsBonus, &IsBonus_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.IsActive
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::IsActive ( )
{
	static UFunction* pFnIsActive = NULL;

	if ( ! pFnIsActive )
		pFnIsActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.IsActive" );

	AKFMapObjective_RepairActors_execIsActive_Parms IsActive_Parms;

	this->ProcessEvent ( pFnIsActive, &IsActive_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.OnActorRepaired
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_RepairActors::OnActorRepaired ( )
{
	static UFunction* pFnOnActorRepaired = NULL;

	if ( ! pFnOnActorRepaired )
		pFnOnActorRepaired = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.OnActorRepaired" );

	AKFMapObjective_RepairActors_execOnActorRepaired_Parms OnActorRepaired_Parms;

	this->ProcessEvent ( pFnOnActorRepaired, &OnActorRepaired_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.ChooseNextActorToRepair
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_RepairActors::ChooseNextActorToRepair ( )
{
	static UFunction* pFnChooseNextActorToRepair = NULL;

	if ( ! pFnChooseNextActorToRepair )
		pFnChooseNextActorToRepair = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.ChooseNextActorToRepair" );

	AKFMapObjective_RepairActors_execChooseNextActorToRepair_Parms ChooseNextActorToRepair_Parms;

	this->ProcessEvent ( pFnChooseNextActorToRepair, &ChooseNextActorToRepair_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.UpdateTrailActor
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::UpdateTrailActor ( )
{
	static UFunction* pFnUpdateTrailActor = NULL;

	if ( ! pFnUpdateTrailActor )
		pFnUpdateTrailActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.UpdateTrailActor" );

	AKFMapObjective_RepairActors_execUpdateTrailActor_Parms UpdateTrailActor_Parms;

	this->ProcessEvent ( pFnUpdateTrailActor, &UpdateTrailActor_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.ActivateNextRepairableActor
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_RepairActors::ActivateNextRepairableActor ( )
{
	static UFunction* pFnActivateNextRepairableActor = NULL;

	if ( ! pFnActivateNextRepairableActor )
		pFnActivateNextRepairableActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.ActivateNextRepairableActor" );

	AKFMapObjective_RepairActors_execActivateNextRepairableActor_Parms ActivateNextRepairableActor_Parms;

	this->ProcessEvent ( pFnActivateNextRepairableActor, &ActivateNextRepairableActor_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.PlayDeactivationDialog
// [0x00020002] 
// Parameters infos:

void AKFMapObjective_RepairActors::PlayDeactivationDialog ( )
{
	static UFunction* pFnPlayDeactivationDialog = NULL;

	if ( ! pFnPlayDeactivationDialog )
		pFnPlayDeactivationDialog = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.PlayDeactivationDialog" );

	AKFMapObjective_RepairActors_execPlayDeactivationDialog_Parms PlayDeactivationDialog_Parms;

	this->ProcessEvent ( pFnPlayDeactivationDialog, &PlayDeactivationDialog_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.DeactivateObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::DeactivateObjective ( )
{
	static UFunction* pFnDeactivateObjective = NULL;

	if ( ! pFnDeactivateObjective )
		pFnDeactivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.DeactivateObjective" );

	AKFMapObjective_RepairActors_execDeactivateObjective_Parms DeactivateObjective_Parms;

	this->ProcessEvent ( pFnDeactivateObjective, &DeactivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.ActivateObjective
// [0x00020102] 
// Parameters infos:

void AKFMapObjective_RepairActors::ActivateObjective ( )
{
	static UFunction* pFnActivateObjective = NULL;

	if ( ! pFnActivateObjective )
		pFnActivateObjective = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.ActivateObjective" );

	AKFMapObjective_RepairActors_execActivateObjective_Parms ActivateObjective_Parms;

	this->ProcessEvent ( pFnActivateObjective, &ActivateObjective_Parms, NULL );
};

// Function kfgamecontent.KFMapObjective_RepairActors.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMapObjective_RepairActors::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMapObjective_RepairActors.ReplicatedEvent" );

	AKFMapObjective_RepairActors_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.NotifyWinners
// [0x00040003] ( FUNC_Final )
// Parameters infos:

void AKFMG_TargetGame::NotifyWinners ( )
{
	static UFunction* pFnNotifyWinners = NULL;

	if ( ! pFnNotifyWinners )
		pFnNotifyWinners = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.NotifyWinners" );

	AKFMG_TargetGame_execNotifyWinners_Parms NotifyWinners_Parms;

	this->ProcessEvent ( pFnNotifyWinners, &NotifyWinners_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.MinigameComplete
// [0x00020002] 
// Parameters infos:

void AKFMG_TargetGame::MinigameComplete ( )
{
	static UFunction* pFnMinigameComplete = NULL;

	if ( ! pFnMinigameComplete )
		pFnMinigameComplete = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.MinigameComplete" );

	AKFMG_TargetGame_execMinigameComplete_Parms MinigameComplete_Parms;

	this->ProcessEvent ( pFnMinigameComplete, &MinigameComplete_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.ResetGame
// [0x00020002] 
// Parameters infos:

void AKFMG_TargetGame::ResetGame ( )
{
	static UFunction* pFnResetGame = NULL;

	if ( ! pFnResetGame )
		pFnResetGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.ResetGame" );

	AKFMG_TargetGame_execResetGame_Parms ResetGame_Parms;

	this->ProcessEvent ( pFnResetGame, &ResetGame_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.FinalizeGame
// [0x00020102] 
// Parameters infos:

void AKFMG_TargetGame::FinalizeGame ( )
{
	static UFunction* pFnFinalizeGame = NULL;

	if ( ! pFnFinalizeGame )
		pFnFinalizeGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.FinalizeGame" );

	AKFMG_TargetGame_execFinalizeGame_Parms FinalizeGame_Parms;

	this->ProcessEvent ( pFnFinalizeGame, &FinalizeGame_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.TargetHit
// [0x00020002] 
// Parameters infos:

void AKFMG_TargetGame::TargetHit ( )
{
	static UFunction* pFnTargetHit = NULL;

	if ( ! pFnTargetHit )
		pFnTargetHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.TargetHit" );

	AKFMG_TargetGame_execTargetHit_Parms TargetHit_Parms;

	this->ProcessEvent ( pFnTargetHit, &TargetHit_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.CanPlayAkEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMG_TargetGame::eventCanPlayAkEvent ( )
{
	static UFunction* pFnCanPlayAkEvent = NULL;

	if ( ! pFnCanPlayAkEvent )
		pFnCanPlayAkEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.CanPlayAkEvent" );

	AKFMG_TargetGame_eventCanPlayAkEvent_Parms CanPlayAkEvent_Parms;

	this->ProcessEvent ( pFnCanPlayAkEvent, &CanPlayAkEvent_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.UpdateBase
// [0x00020100] 
// Parameters infos:

void AKFMG_TargetGame::UpdateBase ( )
{
	static UFunction* pFnUpdateBase = NULL;

	if ( ! pFnUpdateBase )
		pFnUpdateBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.UpdateBase" );

	AKFMG_TargetGame_execUpdateBase_Parms UpdateBase_Parms;

	this->ProcessEvent ( pFnUpdateBase, &UpdateBase_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.CanBeActivated
// [0x00020002] 
// Parameters infos:

void AKFMG_TargetGame::CanBeActivated ( )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.CanBeActivated" );

	AKFMG_TargetGame_execCanBeActivated_Parms CanBeActivated_Parms;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.Deactivated
// [0x00020002] 
// Parameters infos:

void AKFMG_TargetGame::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.Deactivated" );

	AKFMG_TargetGame_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function kfgamecontent.KFMG_TargetGame.Activated
// [0x00020002] 
// Parameters infos:

void AKFMG_TargetGame::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_TargetGame.Activated" );

	AKFMG_TargetGame_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFSeqEvent_MinigameEndCondition.AllLevelsComplete
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MinigameEndCondition::AllLevelsComplete ( )
{
	static UFunction* pFnAllLevelsComplete = NULL;

	if ( ! pFnAllLevelsComplete )
		pFnAllLevelsComplete = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSeqEvent_MinigameEndCondition.AllLevelsComplete" );

	UKFSeqEvent_MinigameEndCondition_execAllLevelsComplete_Parms AllLevelsComplete_Parms;

	this->ProcessEvent ( pFnAllLevelsComplete, &AllLevelsComplete_Parms, NULL );
};

// Function kfgamecontent.KFSeqEvent_MinigameEndCondition.MinigameComplete
// [0x00024002] 
// Parameters infos:

void UKFSeqEvent_MinigameEndCondition::MinigameComplete ( )
{
	static UFunction* pFnMinigameComplete = NULL;

	if ( ! pFnMinigameComplete )
		pFnMinigameComplete = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSeqEvent_MinigameEndCondition.MinigameComplete" );

	UKFSeqEvent_MinigameEndCondition_execMinigameComplete_Parms MinigameComplete_Parms;

	this->ProcessEvent ( pFnMinigameComplete, &MinigameComplete_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.IsAlive
// [0x00020102] 
// Parameters infos:

void AKFMGA_Target::IsAlive ( )
{
	static UFunction* pFnIsAlive = NULL;

	if ( ! pFnIsAlive )
		pFnIsAlive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.IsAlive" );

	AKFMGA_Target_execIsAlive_Parms IsAlive_Parms;

	this->ProcessEvent ( pFnIsAlive, &IsAlive_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.PlayDeath
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target::eventPlayDeath ( )
{
	static UFunction* pFnPlayDeath = NULL;

	if ( ! pFnPlayDeath )
		pFnPlayDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.PlayDeath" );

	AKFMGA_Target_eventPlayDeath_Parms PlayDeath_Parms;

	this->ProcessEvent ( pFnPlayDeath, &PlayDeath_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.Finalize
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target::eventFinalize ( )
{
	static UFunction* pFnFinalize = NULL;

	if ( ! pFnFinalize )
		pFnFinalize = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.Finalize" );

	AKFMGA_Target_eventFinalize_Parms Finalize_Parms;

	this->ProcessEvent ( pFnFinalize, &Finalize_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.SetInactive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target::eventSetInactive ( )
{
	static UFunction* pFnSetInactive = NULL;

	if ( ! pFnSetInactive )
		pFnSetInactive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.SetInactive" );

	AKFMGA_Target_eventSetInactive_Parms SetInactive_Parms;

	this->ProcessEvent ( pFnSetInactive, &SetInactive_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.SetActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target::eventSetActive ( )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.SetActive" );

	AKFMGA_Target_eventSetActive_Parms SetActive_Parms;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.Reset
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.Reset" );

	AKFMGA_Target_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.InvalidHit
// [0x00020102] 
// Parameters infos:

void AKFMGA_Target::InvalidHit ( )
{
	static UFunction* pFnInvalidHit = NULL;

	if ( ! pFnInvalidHit )
		pFnInvalidHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.InvalidHit" );

	AKFMGA_Target_execInvalidHit_Parms InvalidHit_Parms;

	this->ProcessEvent ( pFnInvalidHit, &InvalidHit_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.ValidHit
// [0x00020002] 
// Parameters infos:

void AKFMGA_Target::ValidHit ( )
{
	static UFunction* pFnValidHit = NULL;

	if ( ! pFnValidHit )
		pFnValidHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.ValidHit" );

	AKFMGA_Target_execValidHit_Parms ValidHit_Parms;

	this->ProcessEvent ( pFnValidHit, &ValidHit_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.TakeDamage
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.TakeDamage" );

	AKFMGA_Target_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.TakeRadiusDamage
// [0x00024102] 
// Parameters infos:

void AKFMGA_Target::TakeRadiusDamage ( )
{
	static UFunction* pFnTakeRadiusDamage = NULL;

	if ( ! pFnTakeRadiusDamage )
		pFnTakeRadiusDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.TakeRadiusDamage" );

	AKFMGA_Target_execTakeRadiusDamage_Parms TakeRadiusDamage_Parms;

	this->ProcessEvent ( pFnTakeRadiusDamage, &TakeRadiusDamage_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.AddToOwnerArray
// [0x00020102] 
// Parameters infos:

void AKFMGA_Target::AddToOwnerArray ( )
{
	static UFunction* pFnAddToOwnerArray = NULL;

	if ( ! pFnAddToOwnerArray )
		pFnAddToOwnerArray = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.AddToOwnerArray" );

	AKFMGA_Target_execAddToOwnerArray_Parms AddToOwnerArray_Parms;

	this->ProcessEvent ( pFnAddToOwnerArray, &AddToOwnerArray_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target.ReplicatedEvent" );

	AKFMGA_Target_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.FinalizeVictory
// [0x00020102] 
// Parameters infos:

void AKFMG_BloatDunk::FinalizeVictory ( )
{
	static UFunction* pFnFinalizeVictory = NULL;

	if ( ! pFnFinalizeVictory )
		pFnFinalizeVictory = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.FinalizeVictory" );

	AKFMG_BloatDunk_execFinalizeVictory_Parms FinalizeVictory_Parms;

	this->ProcessEvent ( pFnFinalizeVictory, &FinalizeVictory_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.SetBloatRagdoll
// [0x00020102] 
// Parameters infos:

void AKFMG_BloatDunk::SetBloatRagdoll ( )
{
	static UFunction* pFnSetBloatRagdoll = NULL;

	if ( ! pFnSetBloatRagdoll )
		pFnSetBloatRagdoll = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.SetBloatRagdoll" );

	AKFMG_BloatDunk_execSetBloatRagdoll_Parms SetBloatRagdoll_Parms;

	this->ProcessEvent ( pFnSetBloatRagdoll, &SetBloatRagdoll_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.HandleDelayedShutdown
// [0x00020102] 
// Parameters infos:

void AKFMG_BloatDunk::HandleDelayedShutdown ( )
{
	static UFunction* pFnHandleDelayedShutdown = NULL;

	if ( ! pFnHandleDelayedShutdown )
		pFnHandleDelayedShutdown = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.HandleDelayedShutdown" );

	AKFMG_BloatDunk_execHandleDelayedShutdown_Parms HandleDelayedShutdown_Parms;

	this->ProcessEvent ( pFnHandleDelayedShutdown, &HandleDelayedShutdown_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.FinalizeGame
// [0x00020102] 
// Parameters infos:

void AKFMG_BloatDunk::FinalizeGame ( )
{
	static UFunction* pFnFinalizeGame = NULL;

	if ( ! pFnFinalizeGame )
		pFnFinalizeGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.FinalizeGame" );

	AKFMG_BloatDunk_execFinalizeGame_Parms FinalizeGame_Parms;

	this->ProcessEvent ( pFnFinalizeGame, &FinalizeGame_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.MinigameComplete
// [0x00020002] 
// Parameters infos:

void AKFMG_BloatDunk::MinigameComplete ( )
{
	static UFunction* pFnMinigameComplete = NULL;

	if ( ! pFnMinigameComplete )
		pFnMinigameComplete = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.MinigameComplete" );

	AKFMG_BloatDunk_execMinigameComplete_Parms MinigameComplete_Parms;

	this->ProcessEvent ( pFnMinigameComplete, &MinigameComplete_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.UpdateBase
// [0x00020102] 
// Parameters infos:

void AKFMG_BloatDunk::UpdateBase ( )
{
	static UFunction* pFnUpdateBase = NULL;

	if ( ! pFnUpdateBase )
		pFnUpdateBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.UpdateBase" );

	AKFMG_BloatDunk_execUpdateBase_Parms UpdateBase_Parms;

	this->ProcessEvent ( pFnUpdateBase, &UpdateBase_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.TargetHit
// [0x00020002] 
// Parameters infos:

void AKFMG_BloatDunk::TargetHit ( )
{
	static UFunction* pFnTargetHit = NULL;

	if ( ! pFnTargetHit )
		pFnTargetHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.TargetHit" );

	AKFMG_BloatDunk_execTargetHit_Parms TargetHit_Parms;

	this->ProcessEvent ( pFnTargetHit, &TargetHit_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.ActivateTargets
// [0x00020002] 
// Parameters infos:

void AKFMG_BloatDunk::ActivateTargets ( )
{
	static UFunction* pFnActivateTargets = NULL;

	if ( ! pFnActivateTargets )
		pFnActivateTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.ActivateTargets" );

	AKFMG_BloatDunk_execActivateTargets_Parms ActivateTargets_Parms;

	this->ProcessEvent ( pFnActivateTargets, &ActivateTargets_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.StartupGame
// [0x00020102] 
// Parameters infos:

void AKFMG_BloatDunk::StartupGame ( )
{
	static UFunction* pFnStartupGame = NULL;

	if ( ! pFnStartupGame )
		pFnStartupGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.StartupGame" );

	AKFMG_BloatDunk_execStartupGame_Parms StartupGame_Parms;

	this->ProcessEvent ( pFnStartupGame, &StartupGame_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.HandleDelayedStartup
// [0x00820102] 
// Parameters infos:

void AKFMG_BloatDunk::HandleDelayedStartup ( )
{
	static UFunction* pFnHandleDelayedStartup = NULL;

	if ( ! pFnHandleDelayedStartup )
		pFnHandleDelayedStartup = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.HandleDelayedStartup" );

	AKFMG_BloatDunk_execHandleDelayedStartup_Parms HandleDelayedStartup_Parms;

	this->ProcessEvent ( pFnHandleDelayedStartup, &HandleDelayedStartup_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.Reset
// [0x00020102] 
// Parameters infos:

void AKFMG_BloatDunk::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.Reset" );

	AKFMG_BloatDunk_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.Activated
// [0x00020002] 
// Parameters infos:

void AKFMG_BloatDunk::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.Activated" );

	AKFMG_BloatDunk_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.SpawnTarget
// [0x00020002] 
// Parameters infos:

void AKFMG_BloatDunk::SpawnTarget ( )
{
	static UFunction* pFnSpawnTarget = NULL;

	if ( ! pFnSpawnTarget )
		pFnSpawnTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.SpawnTarget" );

	AKFMG_BloatDunk_execSpawnTarget_Parms SpawnTarget_Parms;

	this->ProcessEvent ( pFnSpawnTarget, &SpawnTarget_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMG_BloatDunk::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.PostBeginPlay" );

	AKFMG_BloatDunk_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFMG_BloatDunk::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.Tick" );

	AKFMG_BloatDunk_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFMG_BloatDunk.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMG_BloatDunk::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_BloatDunk.ReplicatedEvent" );

	AKFMG_BloatDunk_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFMGA_TargetGame.CanPlayAkEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_TargetGame::eventCanPlayAkEvent ( )
{
	static UFunction* pFnCanPlayAkEvent = NULL;

	if ( ! pFnCanPlayAkEvent )
		pFnCanPlayAkEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_TargetGame.CanPlayAkEvent" );

	AKFMGA_TargetGame_eventCanPlayAkEvent_Parms CanPlayAkEvent_Parms;

	this->ProcessEvent ( pFnCanPlayAkEvent, &CanPlayAkEvent_Parms, NULL );
};

// Function kfgamecontent.KFMGA_TargetGame.Deactivated
// [0x00020000] 
// Parameters infos:

void AKFMGA_TargetGame::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_TargetGame.Deactivated" );

	AKFMGA_TargetGame_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function kfgamecontent.KFMGA_TargetGame.Activated
// [0x00020000] 
// Parameters infos:

void AKFMGA_TargetGame::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_TargetGame.Activated" );

	AKFMGA_TargetGame_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFMGA_TargetGame.CanBeActivated
// [0x00020000] 
// Parameters infos:

void AKFMGA_TargetGame::CanBeActivated ( )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_TargetGame.CanBeActivated" );

	AKFMGA_TargetGame_execCanBeActivated_Parms CanBeActivated_Parms;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.Finalize
// [0x00020102] 
// Parameters infos:

void AKFMG_RiggedTargetGame::Finalize ( )
{
	static UFunction* pFnFinalize = NULL;

	if ( ! pFnFinalize )
		pFnFinalize = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.Finalize" );

	AKFMG_RiggedTargetGame_execFinalize_Parms Finalize_Parms;

	this->ProcessEvent ( pFnFinalize, &Finalize_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.HandleDelayedShutdown
// [0x00020102] 
// Parameters infos:

void AKFMG_RiggedTargetGame::HandleDelayedShutdown ( )
{
	static UFunction* pFnHandleDelayedShutdown = NULL;

	if ( ! pFnHandleDelayedShutdown )
		pFnHandleDelayedShutdown = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.HandleDelayedShutdown" );

	AKFMG_RiggedTargetGame_execHandleDelayedShutdown_Parms HandleDelayedShutdown_Parms;

	this->ProcessEvent ( pFnHandleDelayedShutdown, &HandleDelayedShutdown_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.FinalizeGame
// [0x00020102] 
// Parameters infos:

void AKFMG_RiggedTargetGame::FinalizeGame ( )
{
	static UFunction* pFnFinalizeGame = NULL;

	if ( ! pFnFinalizeGame )
		pFnFinalizeGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.FinalizeGame" );

	AKFMG_RiggedTargetGame_execFinalizeGame_Parms FinalizeGame_Parms;

	this->ProcessEvent ( pFnFinalizeGame, &FinalizeGame_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.MinigameComplete
// [0x00020002] 
// Parameters infos:

void AKFMG_RiggedTargetGame::MinigameComplete ( )
{
	static UFunction* pFnMinigameComplete = NULL;

	if ( ! pFnMinigameComplete )
		pFnMinigameComplete = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.MinigameComplete" );

	AKFMG_RiggedTargetGame_execMinigameComplete_Parms MinigameComplete_Parms;

	this->ProcessEvent ( pFnMinigameComplete, &MinigameComplete_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.CanPlayAkEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMG_RiggedTargetGame::eventCanPlayAkEvent ( )
{
	static UFunction* pFnCanPlayAkEvent = NULL;

	if ( ! pFnCanPlayAkEvent )
		pFnCanPlayAkEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.CanPlayAkEvent" );

	AKFMG_RiggedTargetGame_eventCanPlayAkEvent_Parms CanPlayAkEvent_Parms;

	this->ProcessEvent ( pFnCanPlayAkEvent, &CanPlayAkEvent_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.UpdateBase
// [0x00020102] 
// Parameters infos:

void AKFMG_RiggedTargetGame::UpdateBase ( )
{
	static UFunction* pFnUpdateBase = NULL;

	if ( ! pFnUpdateBase )
		pFnUpdateBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.UpdateBase" );

	AKFMG_RiggedTargetGame_execUpdateBase_Parms UpdateBase_Parms;

	this->ProcessEvent ( pFnUpdateBase, &UpdateBase_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.TargetHit
// [0x00020002] 
// Parameters infos:

void AKFMG_RiggedTargetGame::TargetHit ( )
{
	static UFunction* pFnTargetHit = NULL;

	if ( ! pFnTargetHit )
		pFnTargetHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.TargetHit" );

	AKFMG_RiggedTargetGame_execTargetHit_Parms TargetHit_Parms;

	this->ProcessEvent ( pFnTargetHit, &TargetHit_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.DelayedStart
// [0x00020102] 
// Parameters infos:

void AKFMG_RiggedTargetGame::DelayedStart ( )
{
	static UFunction* pFnDelayedStart = NULL;

	if ( ! pFnDelayedStart )
		pFnDelayedStart = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.DelayedStart" );

	AKFMG_RiggedTargetGame_execDelayedStart_Parms DelayedStart_Parms;

	this->ProcessEvent ( pFnDelayedStart, &DelayedStart_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.StartupGame
// [0x00020102] 
// Parameters infos:

void AKFMG_RiggedTargetGame::StartupGame ( )
{
	static UFunction* pFnStartupGame = NULL;

	if ( ! pFnStartupGame )
		pFnStartupGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.StartupGame" );

	AKFMG_RiggedTargetGame_execStartupGame_Parms StartupGame_Parms;

	this->ProcessEvent ( pFnStartupGame, &StartupGame_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.SwitchAnim
// [0x00020102] 
// Parameters infos:

void AKFMG_RiggedTargetGame::SwitchAnim ( )
{
	static UFunction* pFnSwitchAnim = NULL;

	if ( ! pFnSwitchAnim )
		pFnSwitchAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.SwitchAnim" );

	AKFMG_RiggedTargetGame_execSwitchAnim_Parms SwitchAnim_Parms;

	this->ProcessEvent ( pFnSwitchAnim, &SwitchAnim_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.Activated
// [0x00020002] 
// Parameters infos:

void AKFMG_RiggedTargetGame::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.Activated" );

	AKFMG_RiggedTargetGame_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.Reset
// [0x00020102] 
// Parameters infos:

void AKFMG_RiggedTargetGame::Reset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.Reset" );

	AKFMG_RiggedTargetGame_execReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMG_RiggedTargetGame::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.PostBeginPlay" );

	AKFMG_RiggedTargetGame_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFMG_RiggedTargetGame.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMG_RiggedTargetGame::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_RiggedTargetGame.ReplicatedEvent" );

	AKFMG_RiggedTargetGame_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFMG_MultilevelTargetGame.ResetGame
// [0x00020002] 
// Parameters infos:

void AKFMG_MultilevelTargetGame::ResetGame ( )
{
	static UFunction* pFnResetGame = NULL;

	if ( ! pFnResetGame )
		pFnResetGame = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_MultilevelTargetGame.ResetGame" );

	AKFMG_MultilevelTargetGame_execResetGame_Parms ResetGame_Parms;

	this->ProcessEvent ( pFnResetGame, &ResetGame_Parms, NULL );
};

// Function kfgamecontent.KFMG_MultilevelTargetGame.CheckFullCompletion
// [0x00020002] 
// Parameters infos:

void AKFMG_MultilevelTargetGame::CheckFullCompletion ( )
{
	static UFunction* pFnCheckFullCompletion = NULL;

	if ( ! pFnCheckFullCompletion )
		pFnCheckFullCompletion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_MultilevelTargetGame.CheckFullCompletion" );

	AKFMG_MultilevelTargetGame_execCheckFullCompletion_Parms CheckFullCompletion_Parms;

	this->ProcessEvent ( pFnCheckFullCompletion, &CheckFullCompletion_Parms, NULL );
};

// Function kfgamecontent.KFMG_MultilevelTargetGame.MinigameComplete
// [0x00020002] 
// Parameters infos:

void AKFMG_MultilevelTargetGame::MinigameComplete ( )
{
	static UFunction* pFnMinigameComplete = NULL;

	if ( ! pFnMinigameComplete )
		pFnMinigameComplete = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_MultilevelTargetGame.MinigameComplete" );

	AKFMG_MultilevelTargetGame_execMinigameComplete_Parms MinigameComplete_Parms;

	this->ProcessEvent ( pFnMinigameComplete, &MinigameComplete_Parms, NULL );
};

// Function kfgamecontent.KFMG_MultilevelTargetGame.Deactivated
// [0x00020002] 
// Parameters infos:

void AKFMG_MultilevelTargetGame::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_MultilevelTargetGame.Deactivated" );

	AKFMG_MultilevelTargetGame_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function kfgamecontent.KFMG_MultilevelTargetGame.Activated
// [0x00020002] 
// Parameters infos:

void AKFMG_MultilevelTargetGame::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_MultilevelTargetGame.Activated" );

	AKFMG_MultilevelTargetGame_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFMG_MultilevelTargetGame.CanBeActivated
// [0x00020002] 
// Parameters infos:

void AKFMG_MultilevelTargetGame::CanBeActivated ( )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_MultilevelTargetGame.CanBeActivated" );

	AKFMG_MultilevelTargetGame_execCanBeActivated_Parms CanBeActivated_Parms;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );
};

// Function kfgamecontent.KFMG_MultilevelTargetGame.PostBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMG_MultilevelTargetGame::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_MultilevelTargetGame.PostBeginPlay" );

	AKFMG_MultilevelTargetGame_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFMG_SwingRide.RideStopped
// [0x00020000] 
// Parameters infos:

void AKFMG_SwingRide::RideStopped ( )
{
	static UFunction* pFnRideStopped = NULL;

	if ( ! pFnRideStopped )
		pFnRideStopped = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_SwingRide.RideStopped" );

	AKFMG_SwingRide_execRideStopped_Parms RideStopped_Parms;

	this->ProcessEvent ( pFnRideStopped, &RideStopped_Parms, NULL );
};

// Function kfgamecontent.KFMG_SwingRide.Deactivated
// [0x00020102] 
// Parameters infos:

void AKFMG_SwingRide::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_SwingRide.Deactivated" );

	AKFMG_SwingRide_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function kfgamecontent.KFMG_SwingRide.Activated
// [0x00020102] 
// Parameters infos:

void AKFMG_SwingRide::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_SwingRide.Activated" );

	AKFMG_SwingRide_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFMG_SwingRide.SetSpinDownCurve
// [0x00020102] 
// Parameters infos:

void AKFMG_SwingRide::SetSpinDownCurve ( )
{
	static UFunction* pFnSetSpinDownCurve = NULL;

	if ( ! pFnSetSpinDownCurve )
		pFnSetSpinDownCurve = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_SwingRide.SetSpinDownCurve" );

	AKFMG_SwingRide_execSetSpinDownCurve_Parms SetSpinDownCurve_Parms;

	this->ProcessEvent ( pFnSetSpinDownCurve, &SetSpinDownCurve_Parms, NULL );
};

// Function kfgamecontent.KFMG_SwingRide.SetSpinUpCurve
// [0x00020102] 
// Parameters infos:

void AKFMG_SwingRide::SetSpinUpCurve ( )
{
	static UFunction* pFnSetSpinUpCurve = NULL;

	if ( ! pFnSetSpinUpCurve )
		pFnSetSpinUpCurve = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_SwingRide.SetSpinUpCurve" );

	AKFMG_SwingRide_execSetSpinUpCurve_Parms SetSpinUpCurve_Parms;

	this->ProcessEvent ( pFnSetSpinUpCurve, &SetSpinUpCurve_Parms, NULL );
};

// Function kfgamecontent.KFMG_SwingRide.CanPlayAkEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMG_SwingRide::eventCanPlayAkEvent ( )
{
	static UFunction* pFnCanPlayAkEvent = NULL;

	if ( ! pFnCanPlayAkEvent )
		pFnCanPlayAkEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_SwingRide.CanPlayAkEvent" );

	AKFMG_SwingRide_eventCanPlayAkEvent_Parms CanPlayAkEvent_Parms;

	this->ProcessEvent ( pFnCanPlayAkEvent, &CanPlayAkEvent_Parms, NULL );
};

// Function kfgamecontent.KFMG_SwingRide.CanBeActivated
// [0x00020002] 
// Parameters infos:

void AKFMG_SwingRide::CanBeActivated ( )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_SwingRide.CanBeActivated" );

	AKFMG_SwingRide_execCanBeActivated_Parms CanBeActivated_Parms;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );
};

// Function kfgamecontent.KFMG_SwingRide.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMG_SwingRide::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMG_SwingRide.ReplicatedEvent" );

	AKFMG_SwingRide_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.EndMovement
// [0x00020100] 
// Parameters infos:

void AKFMGA_AnimatedTrap::EndMovement ( )
{
	static UFunction* pFnEndMovement = NULL;

	if ( ! pFnEndMovement )
		pFnEndMovement = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.EndMovement" );

	AKFMGA_AnimatedTrap_execEndMovement_Parms EndMovement_Parms;

	this->ProcessEvent ( pFnEndMovement, &EndMovement_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.CanBeActivated
// [0x00020002] 
// Parameters infos:

void AKFMGA_AnimatedTrap::CanBeActivated ( )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.CanBeActivated" );

	AKFMGA_AnimatedTrap_execCanBeActivated_Parms CanBeActivated_Parms;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.SetMoveDeactivationCurve
// [0x00020102] 
// Parameters infos:

void AKFMGA_AnimatedTrap::SetMoveDeactivationCurve ( )
{
	static UFunction* pFnSetMoveDeactivationCurve = NULL;

	if ( ! pFnSetMoveDeactivationCurve )
		pFnSetMoveDeactivationCurve = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.SetMoveDeactivationCurve" );

	AKFMGA_AnimatedTrap_execSetMoveDeactivationCurve_Parms SetMoveDeactivationCurve_Parms;

	this->ProcessEvent ( pFnSetMoveDeactivationCurve, &SetMoveDeactivationCurve_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.SetMoveActivationCurve
// [0x00020102] 
// Parameters infos:

void AKFMGA_AnimatedTrap::SetMoveActivationCurve ( )
{
	static UFunction* pFnSetMoveActivationCurve = NULL;

	if ( ! pFnSetMoveActivationCurve )
		pFnSetMoveActivationCurve = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.SetMoveActivationCurve" );

	AKFMGA_AnimatedTrap_execSetMoveActivationCurve_Parms SetMoveActivationCurve_Parms;

	this->ProcessEvent ( pFnSetMoveActivationCurve, &SetMoveActivationCurve_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.PlayDeactivationIdle
// [0x00020102] 
// Parameters infos:

void AKFMGA_AnimatedTrap::PlayDeactivationIdle ( )
{
	static UFunction* pFnPlayDeactivationIdle = NULL;

	if ( ! pFnPlayDeactivationIdle )
		pFnPlayDeactivationIdle = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.PlayDeactivationIdle" );

	AKFMGA_AnimatedTrap_execPlayDeactivationIdle_Parms PlayDeactivationIdle_Parms;

	this->ProcessEvent ( pFnPlayDeactivationIdle, &PlayDeactivationIdle_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.PlayDeactivation
// [0x00020102] 
// Parameters infos:

void AKFMGA_AnimatedTrap::PlayDeactivation ( )
{
	static UFunction* pFnPlayDeactivation = NULL;

	if ( ! pFnPlayDeactivation )
		pFnPlayDeactivation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.PlayDeactivation" );

	AKFMGA_AnimatedTrap_execPlayDeactivation_Parms PlayDeactivation_Parms;

	this->ProcessEvent ( pFnPlayDeactivation, &PlayDeactivation_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.PlayActivationIdle
// [0x00020102] 
// Parameters infos:

void AKFMGA_AnimatedTrap::PlayActivationIdle ( )
{
	static UFunction* pFnPlayActivationIdle = NULL;

	if ( ! pFnPlayActivationIdle )
		pFnPlayActivationIdle = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.PlayActivationIdle" );

	AKFMGA_AnimatedTrap_execPlayActivationIdle_Parms PlayActivationIdle_Parms;

	this->ProcessEvent ( pFnPlayActivationIdle, &PlayActivationIdle_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.PlayActivation
// [0x00020102] 
// Parameters infos:

void AKFMGA_AnimatedTrap::PlayActivation ( )
{
	static UFunction* pFnPlayActivation = NULL;

	if ( ! pFnPlayActivation )
		pFnPlayActivation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.PlayActivation" );

	AKFMGA_AnimatedTrap_execPlayActivation_Parms PlayActivation_Parms;

	this->ProcessEvent ( pFnPlayActivation, &PlayActivation_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.Deactivated
// [0x00020002] 
// Parameters infos:

void AKFMGA_AnimatedTrap::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.Deactivated" );

	AKFMGA_AnimatedTrap_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.Activated
// [0x00020002] 
// Parameters infos:

void AKFMGA_AnimatedTrap::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.Activated" );

	AKFMGA_AnimatedTrap_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.CanPlayAkEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_AnimatedTrap::eventCanPlayAkEvent ( )
{
	static UFunction* pFnCanPlayAkEvent = NULL;

	if ( ! pFnCanPlayAkEvent )
		pFnCanPlayAkEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.CanPlayAkEvent" );

	AKFMGA_AnimatedTrap_eventCanPlayAkEvent_Parms CanPlayAkEvent_Parms;

	this->ProcessEvent ( pFnCanPlayAkEvent, &CanPlayAkEvent_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_AnimatedTrap::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.PostBeginPlay" );

	AKFMGA_AnimatedTrap_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFMGA_AnimatedTrap.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_AnimatedTrap::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_AnimatedTrap.ReplicatedEvent" );

	AKFMGA_AnimatedTrap_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.Finalize
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_DoshTossPit::eventFinalize ( )
{
	static UFunction* pFnFinalize = NULL;

	if ( ! pFnFinalize )
		pFnFinalize = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.Finalize" );

	AKFMGA_DoshTossPit_eventFinalize_Parms Finalize_Parms;

	this->ProcessEvent ( pFnFinalize, &Finalize_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.SetInactive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_DoshTossPit::eventSetInactive ( )
{
	static UFunction* pFnSetInactive = NULL;

	if ( ! pFnSetInactive )
		pFnSetInactive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.SetInactive" );

	AKFMGA_DoshTossPit_eventSetInactive_Parms SetInactive_Parms;

	this->ProcessEvent ( pFnSetInactive, &SetInactive_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.SetActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_DoshTossPit::eventSetActive ( )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.SetActive" );

	AKFMGA_DoshTossPit_eventSetActive_Parms SetActive_Parms;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.PlayDeath
// [0x00020102] 
// Parameters infos:

void AKFMGA_DoshTossPit::PlayDeath ( )
{
	static UFunction* pFnPlayDeath = NULL;

	if ( ! pFnPlayDeath )
		pFnPlayDeath = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.PlayDeath" );

	AKFMGA_DoshTossPit_execPlayDeath_Parms PlayDeath_Parms;

	this->ProcessEvent ( pFnPlayDeath, &PlayDeath_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.SetBucketLidState
// [0x00020102] 
// Parameters infos:

void AKFMGA_DoshTossPit::SetBucketLidState ( )
{
	static UFunction* pFnSetBucketLidState = NULL;

	if ( ! pFnSetBucketLidState )
		pFnSetBucketLidState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.SetBucketLidState" );

	AKFMGA_DoshTossPit_execSetBucketLidState_Parms SetBucketLidState_Parms;

	this->ProcessEvent ( pFnSetBucketLidState, &SetBucketLidState_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.Reset
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_DoshTossPit::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.Reset" );

	AKFMGA_DoshTossPit_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.DoshHit
// [0x00020002] 
// Parameters infos:

void AKFMGA_DoshTossPit::DoshHit ( )
{
	static UFunction* pFnDoshHit = NULL;

	if ( ! pFnDoshHit )
		pFnDoshHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.DoshHit" );

	AKFMGA_DoshTossPit_execDoshHit_Parms DoshHit_Parms;

	this->ProcessEvent ( pFnDoshHit, &DoshHit_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.ValidHit
// [0x00020002] 
// Parameters infos:

void AKFMGA_DoshTossPit::ValidHit ( )
{
	static UFunction* pFnValidHit = NULL;

	if ( ! pFnValidHit )
		pFnValidHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.ValidHit" );

	AKFMGA_DoshTossPit_execValidHit_Parms ValidHit_Parms;

	this->ProcessEvent ( pFnValidHit, &ValidHit_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_DoshTossPit::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.Touch" );

	AKFMGA_DoshTossPit_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_DoshTossPit::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.Tick" );

	AKFMGA_DoshTossPit_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFMGA_DoshTossPit.TakeDamage
// [0x00024900] ( FUNC_Event )
// Parameters infos:

void AKFMGA_DoshTossPit::eventTakeDamage ( )
{
	static UFunction* pFnTakeDamage = NULL;

	if ( ! pFnTakeDamage )
		pFnTakeDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_DoshTossPit.TakeDamage" );

	AKFMGA_DoshTossPit_eventTakeDamage_Parms TakeDamage_Parms;

	this->ProcessEvent ( pFnTakeDamage, &TakeDamage_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Rollercoaster.SetMoveActivationCurve
// [0x00020102] 
// Parameters infos:

void AKFMGA_Rollercoaster::SetMoveActivationCurve ( )
{
	static UFunction* pFnSetMoveActivationCurve = NULL;

	if ( ! pFnSetMoveActivationCurve )
		pFnSetMoveActivationCurve = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Rollercoaster.SetMoveActivationCurve" );

	AKFMGA_Rollercoaster_execSetMoveActivationCurve_Parms SetMoveActivationCurve_Parms;

	this->ProcessEvent ( pFnSetMoveActivationCurve, &SetMoveActivationCurve_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Rollercoaster.PlayDeactivation
// [0x00020102] 
// Parameters infos:

void AKFMGA_Rollercoaster::PlayDeactivation ( )
{
	static UFunction* pFnPlayDeactivation = NULL;

	if ( ! pFnPlayDeactivation )
		pFnPlayDeactivation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Rollercoaster.PlayDeactivation" );

	AKFMGA_Rollercoaster_execPlayDeactivation_Parms PlayDeactivation_Parms;

	this->ProcessEvent ( pFnPlayDeactivation, &PlayDeactivation_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Rollercoaster.PlayActivationIdle
// [0x00020102] 
// Parameters infos:

void AKFMGA_Rollercoaster::PlayActivationIdle ( )
{
	static UFunction* pFnPlayActivationIdle = NULL;

	if ( ! pFnPlayActivationIdle )
		pFnPlayActivationIdle = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Rollercoaster.PlayActivationIdle" );

	AKFMGA_Rollercoaster_execPlayActivationIdle_Parms PlayActivationIdle_Parms;

	this->ProcessEvent ( pFnPlayActivationIdle, &PlayActivationIdle_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Rollercoaster.Deactivated
// [0x00020002] 
// Parameters infos:

void AKFMGA_Rollercoaster::Deactivated ( )
{
	static UFunction* pFnDeactivated = NULL;

	if ( ! pFnDeactivated )
		pFnDeactivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Rollercoaster.Deactivated" );

	AKFMGA_Rollercoaster_execDeactivated_Parms Deactivated_Parms;

	this->ProcessEvent ( pFnDeactivated, &Deactivated_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Rollercoaster.Activated
// [0x00020002] 
// Parameters infos:

void AKFMGA_Rollercoaster::Activated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Rollercoaster.Activated" );

	AKFMGA_Rollercoaster_execActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Rollercoaster.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Rollercoaster::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Rollercoaster.ReplicatedEvent" );

	AKFMGA_Rollercoaster_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Rollercoaster.CanBeActivated
// [0x00020002] 
// Parameters infos:

void AKFMGA_Rollercoaster::CanBeActivated ( )
{
	static UFunction* pFnCanBeActivated = NULL;

	if ( ! pFnCanBeActivated )
		pFnCanBeActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Rollercoaster.CanBeActivated" );

	AKFMGA_Rollercoaster_execCanBeActivated_Parms CanBeActivated_Parms;

	this->ProcessEvent ( pFnCanBeActivated, &CanBeActivated_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Rollercoaster.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Rollercoaster::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Rollercoaster.PostBeginPlay" );

	AKFMGA_Rollercoaster_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target_BloatDunk.SetInactive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target_BloatDunk::eventSetInactive ( )
{
	static UFunction* pFnSetInactive = NULL;

	if ( ! pFnSetInactive )
		pFnSetInactive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target_BloatDunk.SetInactive" );

	AKFMGA_Target_BloatDunk_eventSetInactive_Parms SetInactive_Parms;

	this->ProcessEvent ( pFnSetInactive, &SetInactive_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target_BloatDunk.SetActive
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target_BloatDunk::eventSetActive ( )
{
	static UFunction* pFnSetActive = NULL;

	if ( ! pFnSetActive )
		pFnSetActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target_BloatDunk.SetActive" );

	AKFMGA_Target_BloatDunk_eventSetActive_Parms SetActive_Parms;

	this->ProcessEvent ( pFnSetActive, &SetActive_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target_BloatDunk.Reset
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFMGA_Target_BloatDunk::eventReset ( )
{
	static UFunction* pFnReset = NULL;

	if ( ! pFnReset )
		pFnReset = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target_BloatDunk.Reset" );

	AKFMGA_Target_BloatDunk_eventReset_Parms Reset_Parms;

	this->ProcessEvent ( pFnReset, &Reset_Parms, NULL );
};

// Function kfgamecontent.KFMGA_Target_BloatDunk.ValidHit
// [0x00020002] 
// Parameters infos:

void AKFMGA_Target_BloatDunk::ValidHit ( )
{
	static UFunction* pFnValidHit = NULL;

	if ( ! pFnValidHit )
		pFnValidHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGA_Target_BloatDunk.ValidHit" );

	AKFMGA_Target_BloatDunk_execValidHit_Parms ValidHit_Parms;

	this->ProcessEvent ( pFnValidHit, &ValidHit_Parms, NULL );
};

// Function kfgamecontent.KFMGVolume_DoshToss.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFMGVolume_DoshToss::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFMGVolume_DoshToss.Touch" );

	AKFMGVolume_DoshToss_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFvolume_RagdollThrow.IsActorExcluded
// [0x00020102] 
// Parameters infos:

void AKFvolume_RagdollThrow::IsActorExcluded ( )
{
	static UFunction* pFnIsActorExcluded = NULL;

	if ( ! pFnIsActorExcluded )
		pFnIsActorExcluded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFvolume_RagdollThrow.IsActorExcluded" );

	AKFvolume_RagdollThrow_execIsActorExcluded_Parms IsActorExcluded_Parms;

	this->ProcessEvent ( pFnIsActorExcluded, &IsActorExcluded_Parms, NULL );
};

// Function kfgamecontent.KFvolume_RagdollThrow.CausePainTo
// [0x00020102] 
// Parameters infos:

void AKFvolume_RagdollThrow::CausePainTo ( )
{
	static UFunction* pFnCausePainTo = NULL;

	if ( ! pFnCausePainTo )
		pFnCausePainTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFvolume_RagdollThrow.CausePainTo" );

	AKFvolume_RagdollThrow_execCausePainTo_Parms CausePainTo_Parms;

	this->ProcessEvent ( pFnCausePainTo, &CausePainTo_Parms, NULL );
};

// Function kfgamecontent.KFvolume_RagdollThrow.Touch
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFvolume_RagdollThrow::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFvolume_RagdollThrow.Touch" );

	AKFvolume_RagdollThrow_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_EMP.OnZedDied
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedDAR_EMP::OnZedDied ( )
{
	static UFunction* pFnOnZedDied = NULL;

	if ( ! pFnOnZedDied )
		pFnOnZedDied = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_EMP.OnZedDied" );

	AKFPawn_ZedDAR_EMP_execOnZedDied_Parms OnZedDied_Parms;

	this->ProcessEvent ( pFnOnZedDied, &OnZedDied_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_EMP.GetWeaponStartTraceLocation
// [0x00824902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedDAR_EMP::eventGetWeaponStartTraceLocation ( )
{
	static UFunction* pFnGetWeaponStartTraceLocation = NULL;

	if ( ! pFnGetWeaponStartTraceLocation )
		pFnGetWeaponStartTraceLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_EMP.GetWeaponStartTraceLocation" );

	AKFPawn_ZedDAR_EMP_eventGetWeaponStartTraceLocation_Parms GetWeaponStartTraceLocation_Parms;

	this->ProcessEvent ( pFnGetWeaponStartTraceLocation, &GetWeaponStartTraceLocation_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_EMP.ToggleEMPBurst
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR_EMP::ToggleEMPBurst ( )
{
	static UFunction* pFnToggleEMPBurst = NULL;

	if ( ! pFnToggleEMPBurst )
		pFnToggleEMPBurst = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_EMP.ToggleEMPBurst" );

	AKFPawn_ZedDAR_EMP_execToggleEMPBurst_Parms ToggleEMPBurst_Parms;

	this->ProcessEvent ( pFnToggleEMPBurst, &ToggleEMPBurst_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_EMP.ANIMNOTIFY_EMPEnd
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR_EMP::ANIMNOTIFY_EMPEnd ( )
{
	static UFunction* pFnANIMNOTIFY_EMPEnd = NULL;

	if ( ! pFnANIMNOTIFY_EMPEnd )
		pFnANIMNOTIFY_EMPEnd = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_EMP.ANIMNOTIFY_EMPEnd" );

	AKFPawn_ZedDAR_EMP_execANIMNOTIFY_EMPEnd_Parms ANIMNOTIFY_EMPEnd_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_EMPEnd, &ANIMNOTIFY_EMPEnd_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_EMP.ANIMNOTIFY_EMPStart
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR_EMP::ANIMNOTIFY_EMPStart ( )
{
	static UFunction* pFnANIMNOTIFY_EMPStart = NULL;

	if ( ! pFnANIMNOTIFY_EMPStart )
		pFnANIMNOTIFY_EMPStart = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_EMP.ANIMNOTIFY_EMPStart" );

	AKFPawn_ZedDAR_EMP_execANIMNOTIFY_EMPStart_Parms ANIMNOTIFY_EMPStart_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_EMPStart, &ANIMNOTIFY_EMPStart_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_Laser.ANIMNOTIFY_FireLaser_R
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR_Laser::ANIMNOTIFY_FireLaser_R ( )
{
	static UFunction* pFnANIMNOTIFY_FireLaser_R = NULL;

	if ( ! pFnANIMNOTIFY_FireLaser_R )
		pFnANIMNOTIFY_FireLaser_R = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_Laser.ANIMNOTIFY_FireLaser_R" );

	AKFPawn_ZedDAR_Laser_execANIMNOTIFY_FireLaser_R_Parms ANIMNOTIFY_FireLaser_R_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_FireLaser_R, &ANIMNOTIFY_FireLaser_R_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_Laser.ANIMNOTIFY_FireLaser_L
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR_Laser::ANIMNOTIFY_FireLaser_L ( )
{
	static UFunction* pFnANIMNOTIFY_FireLaser_L = NULL;

	if ( ! pFnANIMNOTIFY_FireLaser_L )
		pFnANIMNOTIFY_FireLaser_L = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_Laser.ANIMNOTIFY_FireLaser_L" );

	AKFPawn_ZedDAR_Laser_execANIMNOTIFY_FireLaser_L_Parms ANIMNOTIFY_FireLaser_L_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_FireLaser_L, &ANIMNOTIFY_FireLaser_L_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_Rocket.ANIMNOTIFY_FireRocket_R
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR_Rocket::ANIMNOTIFY_FireRocket_R ( )
{
	static UFunction* pFnANIMNOTIFY_FireRocket_R = NULL;

	if ( ! pFnANIMNOTIFY_FireRocket_R )
		pFnANIMNOTIFY_FireRocket_R = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_Rocket.ANIMNOTIFY_FireRocket_R" );

	AKFPawn_ZedDAR_Rocket_execANIMNOTIFY_FireRocket_R_Parms ANIMNOTIFY_FireRocket_R_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_FireRocket_R, &ANIMNOTIFY_FireRocket_R_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedDAR_Rocket.ANIMNOTIFY_FireRocket_L
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedDAR_Rocket::ANIMNOTIFY_FireRocket_L ( )
{
	static UFunction* pFnANIMNOTIFY_FireRocket_L = NULL;

	if ( ! pFnANIMNOTIFY_FireRocket_L )
		pFnANIMNOTIFY_FireRocket_L = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedDAR_Rocket.ANIMNOTIFY_FireRocket_L" );

	AKFPawn_ZedDAR_Rocket_execANIMNOTIFY_FireRocket_L_Parms ANIMNOTIFY_FireRocket_L_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_FireRocket_L, &ANIMNOTIFY_FireRocket_L_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_BloatKingGorge.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_BloatKingGorge::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_BloatKingGorge.Touch" );

	AKFTrigger_BloatKingGorge_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_BloatKingGorge.BaseChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_BloatKingGorge::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_BloatKingGorge.BaseChange" );

	AKFTrigger_BloatKingGorge_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_BloatKing.UpdateArmorPieces
// [0x00820102] 
// Parameters infos:

void UKFZedArmorInfo_BloatKing::UpdateArmorPieces ( )
{
	static UFunction* pFnUpdateArmorPieces = NULL;

	if ( ! pFnUpdateArmorPieces )
		pFnUpdateArmorPieces = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_BloatKing.UpdateArmorPieces" );

	UKFZedArmorInfo_BloatKing_execUpdateArmorPieces_Parms UpdateArmorPieces_Parms;

	this->ProcessEvent ( pFnUpdateArmorPieces, &UpdateArmorPieces_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_BloatKing.UpdateArmorUI
// [0x00820102] 
// Parameters infos:

void UKFZedArmorInfo_BloatKing::UpdateArmorUI ( )
{
	static UFunction* pFnUpdateArmorUI = NULL;

	if ( ! pFnUpdateArmorUI )
		pFnUpdateArmorUI = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_BloatKing.UpdateArmorUI" );

	UKFZedArmorInfo_BloatKing_execUpdateArmorUI_Parms UpdateArmorUI_Parms;

	this->ProcessEvent ( pFnUpdateArmorUI, &UpdateArmorUI_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_BloatKing.ExplodeArmor
// [0x00020002] 
// Parameters infos:

void UKFZedArmorInfo_BloatKing::ExplodeArmor ( )
{
	static UFunction* pFnExplodeArmor = NULL;

	if ( ! pFnExplodeArmor )
		pFnExplodeArmor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_BloatKing.ExplodeArmor" );

	UKFZedArmorInfo_BloatKing_execExplodeArmor_Parms ExplodeArmor_Parms;

	this->ProcessEvent ( pFnExplodeArmor, &ExplodeArmor_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_BloatKing.GetKFPC
// [0x00020102] 
// Parameters infos:

void UKFZedArmorInfo_BloatKing::GetKFPC ( )
{
	static UFunction* pFnGetKFPC = NULL;

	if ( ! pFnGetKFPC )
		pFnGetKFPC = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_BloatKing.GetKFPC" );

	UKFZedArmorInfo_BloatKing_execGetKFPC_Parms GetKFPC_Parms;

	this->ProcessEvent ( pFnGetKFPC, &GetKFPC_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_ClotKing.UpdateArmorPieces
// [0x00820102] 
// Parameters infos:

void UKFZedArmorInfo_ClotKing::UpdateArmorPieces ( )
{
	static UFunction* pFnUpdateArmorPieces = NULL;

	if ( ! pFnUpdateArmorPieces )
		pFnUpdateArmorPieces = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_ClotKing.UpdateArmorPieces" );

	UKFZedArmorInfo_ClotKing_execUpdateArmorPieces_Parms UpdateArmorPieces_Parms;

	this->ProcessEvent ( pFnUpdateArmorPieces, &UpdateArmorPieces_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_ClotKing.ExplodeArmor
// [0x00020002] 
// Parameters infos:

void UKFZedArmorInfo_ClotKing::ExplodeArmor ( )
{
	static UFunction* pFnExplodeArmor = NULL;

	if ( ! pFnExplodeArmor )
		pFnExplodeArmor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_ClotKing.ExplodeArmor" );

	UKFZedArmorInfo_ClotKing_execExplodeArmor_Parms ExplodeArmor_Parms;

	this->ProcessEvent ( pFnExplodeArmor, &ExplodeArmor_Parms, NULL );
};

// Function kfgamecontent.KFSM_Emerge_Crawler.PushOverlappingHumans
// [0x00020000] 
// Parameters infos:

void UKFSM_Emerge_Crawler::PushOverlappingHumans ( )
{
	static UFunction* pFnPushOverlappingHumans = NULL;

	if ( ! pFnPushOverlappingHumans )
		pFnPushOverlappingHumans = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Emerge_Crawler.PushOverlappingHumans" );

	UKFSM_Emerge_Crawler_execPushOverlappingHumans_Parms PushOverlappingHumans_Parms;

	this->ProcessEvent ( pFnPushOverlappingHumans, &PushOverlappingHumans_Parms, NULL );
};

// Function kfgamecontent.KFSM_Emerge_Crawler.GetEmergeAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge_Crawler::GetEmergeAnim ( )
{
	static UFunction* pFnGetEmergeAnim = NULL;

	if ( ! pFnGetEmergeAnim )
		pFnGetEmergeAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Emerge_Crawler.GetEmergeAnim" );

	UKFSM_Emerge_Crawler_execGetEmergeAnim_Parms GetEmergeAnim_Parms;

	this->ProcessEvent ( pFnGetEmergeAnim, &GetEmergeAnim_Parms, NULL );
};

// Function kfgamecontent.KFSM_Emerge_Crawler.SetCrawlerPostEmergeFlags
// [0x00020000] 
// Parameters infos:

void UKFSM_Emerge_Crawler::SetCrawlerPostEmergeFlags ( )
{
	static UFunction* pFnSetCrawlerPostEmergeFlags = NULL;

	if ( ! pFnSetCrawlerPostEmergeFlags )
		pFnSetCrawlerPostEmergeFlags = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Emerge_Crawler.SetCrawlerPostEmergeFlags" );

	UKFSM_Emerge_Crawler_execSetCrawlerPostEmergeFlags_Parms SetCrawlerPostEmergeFlags_Parms;

	this->ProcessEvent ( pFnSetCrawlerPostEmergeFlags, &SetCrawlerPostEmergeFlags_Parms, NULL );
};

// Function kfgamecontent.KFSM_Emerge_Crawler.PlayEmerge
// [0x00020002] 
// Parameters infos:

void UKFSM_Emerge_Crawler::PlayEmerge ( )
{
	static UFunction* pFnPlayEmerge = NULL;

	if ( ! pFnPlayEmerge )
		pFnPlayEmerge = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Emerge_Crawler.PlayEmerge" );

	UKFSM_Emerge_Crawler_execPlayEmerge_Parms PlayEmerge_Parms;

	this->ProcessEvent ( pFnPlayEmerge, &PlayEmerge_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerCrawler_Suicide.TriggerExplosion
// [0x00026002] 
// Parameters infos:

void UKFSM_PlayerCrawler_Suicide::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerCrawler_Suicide.TriggerExplosion" );

	UKFSM_PlayerCrawler_Suicide_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerCrawler_Suicide.SpecialMoveEnded
// [0x00020102] 
// Parameters infos:

void UKFSM_PlayerCrawler_Suicide::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerCrawler_Suicide.SpecialMoveEnded" );

	UKFSM_PlayerCrawler_Suicide_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerCrawler_Suicide.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerCrawler_Suicide::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerCrawler_Suicide.InternalCanDoSpecialMove" );

	UKFSM_PlayerCrawler_Suicide_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFPlayerCamera_Versus.FindBestCameraType
// [0x00080002] 
// Parameters infos:

void AKFPlayerCamera_Versus::FindBestCameraType ( )
{
	static UFunction* pFnFindBestCameraType = NULL;

	if ( ! pFnFindBestCameraType )
		pFnFindBestCameraType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerCamera_Versus.FindBestCameraType" );

	AKFPlayerCamera_Versus_execFindBestCameraType_Parms FindBestCameraType_Parms;

	this->ProcessEvent ( pFnFindBestCameraType, &FindBestCameraType_Parms, NULL );
};

// Function kfgamecontent.KFPlayerCamera_Versus.SwapToZedSuicideCam
// [0x00020002] 
// Parameters infos:

void AKFPlayerCamera_Versus::SwapToZedSuicideCam ( )
{
	static UFunction* pFnSwapToZedSuicideCam = NULL;

	if ( ! pFnSwapToZedSuicideCam )
		pFnSwapToZedSuicideCam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerCamera_Versus.SwapToZedSuicideCam" );

	AKFPlayerCamera_Versus_execSwapToZedSuicideCam_Parms SwapToZedSuicideCam_Parms;

	this->ProcessEvent ( pFnSwapToZedSuicideCam, &SwapToZedSuicideCam_Parms, NULL );
};

// Function kfgamecontent.KFPlayerCamera_Versus.PostBeginPlay
// [0x00020002] 
// Parameters infos:

void AKFPlayerCamera_Versus::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerCamera_Versus.PostBeginPlay" );

	AKFPlayerCamera_Versus_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_EvilDAR.UpdateArmorPieces
// [0x00820102] 
// Parameters infos:

void UKFZedArmorInfo_EvilDAR::UpdateArmorPieces ( )
{
	static UFunction* pFnUpdateArmorPieces = NULL;

	if ( ! pFnUpdateArmorPieces )
		pFnUpdateArmorPieces = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_EvilDAR.UpdateArmorPieces" );

	UKFZedArmorInfo_EvilDAR_execUpdateArmorPieces_Parms UpdateArmorPieces_Parms;

	this->ProcessEvent ( pFnUpdateArmorPieces, &UpdateArmorPieces_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_EvilDAR.ExplodeArmor
// [0x00020002] 
// Parameters infos:

void UKFZedArmorInfo_EvilDAR::ExplodeArmor ( )
{
	static UFunction* pFnExplodeArmor = NULL;

	if ( ! pFnExplodeArmor )
		pFnExplodeArmor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_EvilDAR.ExplodeArmor" );

	UKFZedArmorInfo_EvilDAR_execExplodeArmor_Parms ExplodeArmor_Parms;

	this->ProcessEvent ( pFnExplodeArmor, &ExplodeArmor_Parms, NULL );
};

// Function kfgamecontent.KFZedArmorInfo_EvilDAR.AdjustBoneDamage
// [0x00420002] 
// Parameters infos:

void UKFZedArmorInfo_EvilDAR::AdjustBoneDamage ( )
{
	static UFunction* pFnAdjustBoneDamage = NULL;

	if ( ! pFnAdjustBoneDamage )
		pFnAdjustBoneDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFZedArmorInfo_EvilDAR.AdjustBoneDamage" );

	UKFZedArmorInfo_EvilDAR_execAdjustBoneDamage_Parms AdjustBoneDamage_Parms;

	this->ProcessEvent ( pFnAdjustBoneDamage, &AdjustBoneDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpound_Mixer.UsePlayerControlledZedSkin
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpound_Mixer::eventUsePlayerControlledZedSkin ( )
{
	static UFunction* pFnUsePlayerControlledZedSkin = NULL;

	if ( ! pFnUsePlayerControlledZedSkin )
		pFnUsePlayerControlledZedSkin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpound_Mixer.UsePlayerControlledZedSkin" );

	AKFPawn_ZedFleshpound_Mixer_eventUsePlayerControlledZedSkin_Parms UsePlayerControlledZedSkin_Parms;

	this->ProcessEvent ( pFnUsePlayerControlledZedSkin, &UsePlayerControlledZedSkin_Parms, NULL );
};

// Function kfgamecontent.KFSkinTypeEffects_HansShield.AttachEffectToHitLocation
// [0x00020102] 
// Parameters infos:

void UKFSkinTypeEffects_HansShield::AttachEffectToHitLocation ( )
{
	static UFunction* pFnAttachEffectToHitLocation = NULL;

	if ( ! pFnAttachEffectToHitLocation )
		pFnAttachEffectToHitLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSkinTypeEffects_HansShield.AttachEffectToHitLocation" );

	UKFSkinTypeEffects_HansShield_execAttachEffectToHitLocation_Parms AttachEffectToHitLocation_Parms;

	this->ProcessEvent ( pFnAttachEffectToHitLocation, &AttachEffectToHitLocation_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedFleshpoundMini_Mixer.UsePlayerControlledZedSkin
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedFleshpoundMini_Mixer::eventUsePlayerControlledZedSkin ( )
{
	static UFunction* pFnUsePlayerControlledZedSkin = NULL;

	if ( ! pFnUsePlayerControlledZedSkin )
		pFnUsePlayerControlledZedSkin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedFleshpoundMini_Mixer.UsePlayerControlledZedSkin" );

	AKFPawn_ZedFleshpoundMini_Mixer_eventUsePlayerControlledZedSkin_Parms UsePlayerControlledZedSkin_Parms;

	this->ProcessEvent ( pFnUsePlayerControlledZedSkin, &UsePlayerControlledZedSkin_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansHEGrenade.SpecialRandSpin
// [0x00020102] 
// Parameters infos:

void AKFProj_HansHEGrenade::SpecialRandSpin ( )
{
	static UFunction* pFnSpecialRandSpin = NULL;

	if ( ! pFnSpecialRandSpin )
		pFnSpecialRandSpin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansHEGrenade.SpecialRandSpin" );

	AKFProj_HansHEGrenade_execSpecialRandSpin_Parms SpecialRandSpin_Parms;

	this->ProcessEvent ( pFnSpecialRandSpin, &SpecialRandSpin_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansHEGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_HansHEGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansHEGrenade.PostBeginPlay" );

	AKFProj_HansHEGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansNerveGasGrenade.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_HansNerveGasGrenade::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansNerveGasGrenade.PrepareExplosionTemplate" );

	AKFProj_HansNerveGasGrenade_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansNerveGasGrenade.StopFlightEffects
// [0x00080100] 
// Parameters infos:

void AKFProj_HansNerveGasGrenade::StopFlightEffects ( )
{
	static UFunction* pFnStopFlightEffects = NULL;

	if ( ! pFnStopFlightEffects )
		pFnStopFlightEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansNerveGasGrenade.StopFlightEffects" );

	AKFProj_HansNerveGasGrenade_execStopFlightEffects_Parms StopFlightEffects_Parms;

	this->ProcessEvent ( pFnStopFlightEffects, &StopFlightEffects_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansNerveGasGrenade.GrenadeIsAtRest
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_HansNerveGasGrenade::eventGrenadeIsAtRest ( )
{
	static UFunction* pFnGrenadeIsAtRest = NULL;

	if ( ! pFnGrenadeIsAtRest )
		pFnGrenadeIsAtRest = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansNerveGasGrenade.GrenadeIsAtRest" );

	AKFProj_HansNerveGasGrenade_eventGrenadeIsAtRest_Parms GrenadeIsAtRest_Parms;

	this->ProcessEvent ( pFnGrenadeIsAtRest, &GrenadeIsAtRest_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansNerveGasGrenade.SpecialRandSpin
// [0x00020102] 
// Parameters infos:

void AKFProj_HansNerveGasGrenade::SpecialRandSpin ( )
{
	static UFunction* pFnSpecialRandSpin = NULL;

	if ( ! pFnSpecialRandSpin )
		pFnSpecialRandSpin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansNerveGasGrenade.SpecialRandSpin" );

	AKFProj_HansNerveGasGrenade_execSpecialRandSpin_Parms SpecialRandSpin_Parms;

	this->ProcessEvent ( pFnSpecialRandSpin, &SpecialRandSpin_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansNerveGasGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_HansNerveGasGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansNerveGasGrenade.PostBeginPlay" );

	AKFProj_HansNerveGasGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansSmokeGrenade.StopFlightEffects
// [0x00080100] 
// Parameters infos:

void AKFProj_HansSmokeGrenade::StopFlightEffects ( )
{
	static UFunction* pFnStopFlightEffects = NULL;

	if ( ! pFnStopFlightEffects )
		pFnStopFlightEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansSmokeGrenade.StopFlightEffects" );

	AKFProj_HansSmokeGrenade_execStopFlightEffects_Parms StopFlightEffects_Parms;

	this->ProcessEvent ( pFnStopFlightEffects, &StopFlightEffects_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansSmokeGrenade.GrenadeIsAtRest
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_HansSmokeGrenade::eventGrenadeIsAtRest ( )
{
	static UFunction* pFnGrenadeIsAtRest = NULL;

	if ( ! pFnGrenadeIsAtRest )
		pFnGrenadeIsAtRest = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansSmokeGrenade.GrenadeIsAtRest" );

	AKFProj_HansSmokeGrenade_eventGrenadeIsAtRest_Parms GrenadeIsAtRest_Parms;

	this->ProcessEvent ( pFnGrenadeIsAtRest, &GrenadeIsAtRest_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansSmokeGrenade.SpecialRandSpin
// [0x00020102] 
// Parameters infos:

void AKFProj_HansSmokeGrenade::SpecialRandSpin ( )
{
	static UFunction* pFnSpecialRandSpin = NULL;

	if ( ! pFnSpecialRandSpin )
		pFnSpecialRandSpin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansSmokeGrenade.SpecialRandSpin" );

	AKFProj_HansSmokeGrenade_execSpecialRandSpin_Parms SpecialRandSpin_Parms;

	this->ProcessEvent ( pFnSpecialRandSpin, &SpecialRandSpin_Parms, NULL );
};

// Function kfgamecontent.KFProj_HansSmokeGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_HansSmokeGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HansSmokeGrenade.PostBeginPlay" );

	AKFProj_HansSmokeGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_DualMKb42_Hans.ConsumeAmmo
// [0x00020100] 
// Parameters infos:

void AKFWeap_AssaultRifle_DualMKb42_Hans::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_DualMKb42_Hans.ConsumeAmmo" );

	AKFWeap_AssaultRifle_DualMKb42_Hans_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_DualMKb42_Hans.SpawnProjectile
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_DualMKb42_Hans::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_DualMKb42_Hans.SpawnProjectile" );

	AKFWeap_AssaultRifle_DualMKb42_Hans_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.NotifyOwnerTakeHit
// [0x00020000] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::NotifyOwnerTakeHit ( )
{
	static UFunction* pFnNotifyOwnerTakeHit = NULL;

	if ( ! pFnNotifyOwnerTakeHit )
		pFnNotifyOwnerTakeHit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.NotifyOwnerTakeHit" );

	UKFSM_GrappleAttack_Hans_execNotifyOwnerTakeHit_Parms NotifyOwnerTakeHit_Parms;

	this->ProcessEvent ( pFnNotifyOwnerTakeHit, &NotifyOwnerTakeHit_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.OnFollowerLeavingSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::OnFollowerLeavingSpecialMove ( )
{
	static UFunction* pFnOnFollowerLeavingSpecialMove = NULL;

	if ( ! pFnOnFollowerLeavingSpecialMove )
		pFnOnFollowerLeavingSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.OnFollowerLeavingSpecialMove" );

	UKFSM_GrappleAttack_Hans_execOnFollowerLeavingSpecialMove_Parms OnFollowerLeavingSpecialMove_Parms;

	this->ProcessEvent ( pFnOnFollowerLeavingSpecialMove, &OnFollowerLeavingSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.AnimEndNotify" );

	UKFSM_GrappleAttack_Hans_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.Timer_DetachFollower
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::Timer_DetachFollower ( )
{
	static UFunction* pFnTimer_DetachFollower = NULL;

	if ( ! pFnTimer_DetachFollower )
		pFnTimer_DetachFollower = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.Timer_DetachFollower" );

	UKFSM_GrappleAttack_Hans_execTimer_DetachFollower_Parms Timer_DetachFollower_Parms;

	this->ProcessEvent ( pFnTimer_DetachFollower, &Timer_DetachFollower_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.Timer_DrainHealth
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::Timer_DrainHealth ( )
{
	static UFunction* pFnTimer_DrainHealth = NULL;

	if ( ! pFnTimer_DrainHealth )
		pFnTimer_DrainHealth = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.Timer_DrainHealth" );

	UKFSM_GrappleAttack_Hans_execTimer_DrainHealth_Parms Timer_DrainHealth_Parms;

	this->ProcessEvent ( pFnTimer_DrainHealth, &Timer_DrainHealth_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.SpecialMoveEnded" );

	UKFSM_GrappleAttack_Hans_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.SpecialMoveFlagsUpdated" );

	UKFSM_GrappleAttack_Hans_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.BeginGrapple
// [0x00024002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::BeginGrapple ( )
{
	static UFunction* pFnBeginGrapple = NULL;

	if ( ! pFnBeginGrapple )
		pFnBeginGrapple = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.BeginGrapple" );

	UKFSM_GrappleAttack_Hans_execBeginGrapple_Parms BeginGrapple_Parms;

	this->ProcessEvent ( pFnBeginGrapple, &BeginGrapple_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.PlayGrappleLoopAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::PlayGrappleLoopAnim ( )
{
	static UFunction* pFnPlayGrappleLoopAnim = NULL;

	if ( ! pFnPlayGrappleLoopAnim )
		pFnPlayGrappleLoopAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.PlayGrappleLoopAnim" );

	UKFSM_GrappleAttack_Hans_execPlayGrappleLoopAnim_Parms PlayGrappleLoopAnim_Parms;

	this->ProcessEvent ( pFnPlayGrappleLoopAnim, &PlayGrappleLoopAnim_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.PlayGrabAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::PlayGrabAnim ( )
{
	static UFunction* pFnPlayGrabAnim = NULL;

	if ( ! pFnPlayGrabAnim )
		pFnPlayGrabAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.PlayGrabAnim" );

	UKFSM_GrappleAttack_Hans_execPlayGrabAnim_Parms PlayGrabAnim_Parms;

	this->ProcessEvent ( pFnPlayGrabAnim, &PlayGrabAnim_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.SpecialMoveStarted" );

	UKFSM_GrappleAttack_Hans_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_GrappleAttack_Hans.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_GrappleAttack_Hans::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_GrappleAttack_Hans.PackFlagsBase" );

	UKFSM_GrappleAttack_Hans_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function kfgamecontent.KFSM_Hans_WeaponSwitch.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Hans_WeaponSwitch::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Hans_WeaponSwitch.SpecialMoveEnded" );

	UKFSM_Hans_WeaponSwitch_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Hans_WeaponSwitch.PlayAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Hans_WeaponSwitch::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Hans_WeaponSwitch.PlayAnimation" );

	UKFSM_Hans_WeaponSwitch_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_Hans_ThrowGrenade.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_Hans_ThrowGrenade::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Hans_ThrowGrenade.InternalCanDoSpecialMove" );

	UKFSM_Hans_ThrowGrenade_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_Hans_ThrowGrenade.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Hans_ThrowGrenade::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Hans_ThrowGrenade.SpecialMoveEnded" );

	UKFSM_Hans_ThrowGrenade_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Hans_ThrowGrenade.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Hans_ThrowGrenade::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Hans_ThrowGrenade.SpecialMoveStarted" );

	UKFSM_Hans_ThrowGrenade_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Hans_GrenadeHalfBarrage.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Hans_GrenadeHalfBarrage::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Hans_GrenadeHalfBarrage.SpecialMoveStarted" );

	UKFSM_Hans_GrenadeHalfBarrage_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Hans_GrenadeBarrage.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Hans_GrenadeBarrage::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Hans_GrenadeBarrage.SpecialMoveStarted" );

	UKFSM_Hans_GrenadeBarrage_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans_Versus.ServerToggleShield
// [0x002200C2] 
// Parameters infos:

void AKFPawn_ZedHans_Versus::ServerToggleShield ( )
{
	static UFunction* pFnServerToggleShield = NULL;

	if ( ! pFnServerToggleShield )
		pFnServerToggleShield = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans_Versus.ServerToggleShield" );

	AKFPawn_ZedHans_Versus_execServerToggleShield_Parms ServerToggleShield_Parms;

	this->ProcessEvent ( pFnServerToggleShield, &ServerToggleShield_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans_Versus.ToggleEquipment
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans_Versus::ToggleEquipment ( )
{
	static UFunction* pFnToggleEquipment = NULL;

	if ( ! pFnToggleEquipment )
		pFnToggleEquipment = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans_Versus.ToggleEquipment" );

	AKFPawn_ZedHans_Versus_execToggleEquipment_Parms ToggleEquipment_Parms;

	this->ProcessEvent ( pFnToggleEquipment, &ToggleEquipment_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans_Versus.SetSprinting
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans_Versus::SetSprinting ( )
{
	static UFunction* pFnSetSprinting = NULL;

	if ( ! pFnSetSprinting )
		pFnSetSprinting = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans_Versus.SetSprinting" );

	AKFPawn_ZedHans_Versus_execSetSprinting_Parms SetSprinting_Parms;

	this->ProcessEvent ( pFnSetSprinting, &SetSprinting_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans_Versus.ThrowGrenade
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans_Versus::ThrowGrenade ( )
{
	static UFunction* pFnThrowGrenade = NULL;

	if ( ! pFnThrowGrenade )
		pFnThrowGrenade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans_Versus.ThrowGrenade" );

	AKFPawn_ZedHans_Versus_execThrowGrenade_Parms ThrowGrenade_Parms;

	this->ProcessEvent ( pFnThrowGrenade, &ThrowGrenade_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans_Versus.ToggleAim
// [0x002200C2] 
// Parameters infos:

void AKFPawn_ZedHans_Versus::ToggleAim ( )
{
	static UFunction* pFnToggleAim = NULL;

	if ( ! pFnToggleAim )
		pFnToggleAim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans_Versus.ToggleAim" );

	AKFPawn_ZedHans_Versus_execToggleAim_Parms ToggleAim_Parms;

	this->ProcessEvent ( pFnToggleAim, &ToggleAim_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans_Versus.PlayWeaponSwitch
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans_Versus::PlayWeaponSwitch ( )
{
	static UFunction* pFnPlayWeaponSwitch = NULL;

	if ( ! pFnPlayWeaponSwitch )
		pFnPlayWeaponSwitch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans_Versus.PlayWeaponSwitch" );

	AKFPawn_ZedHans_Versus_execPlayWeaponSwitch_Parms PlayWeaponSwitch_Parms;

	this->ProcessEvent ( pFnPlayWeaponSwitch, &PlayWeaponSwitch_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans_Versus.StartFire
// [0x00020102] 
// Parameters infos:

void AKFPawn_ZedHans_Versus::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans_Versus.StartFire" );

	AKFPawn_ZedHans_Versus_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHans_Versus.PossessedBy
// [0x00020002] 
// Parameters infos:

void AKFPawn_ZedHans_Versus::PossessedBy ( )
{
	static UFunction* pFnPossessedBy = NULL;

	if ( ! pFnPossessedBy )
		pFnPossessedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHans_Versus.PossessedBy" );

	AKFPawn_ZedHans_Versus_execPossessedBy_Parms PossessedBy_Parms;

	this->ProcessEvent ( pFnPossessedBy, &PossessedBy_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHansFriendlyTest.CanBeGrabbed
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedHansFriendlyTest::CanBeGrabbed ( )
{
	static UFunction* pFnCanBeGrabbed = NULL;

	if ( ! pFnCanBeGrabbed )
		pFnCanBeGrabbed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHansFriendlyTest.CanBeGrabbed" );

	AKFPawn_ZedHansFriendlyTest_execCanBeGrabbed_Parms CanBeGrabbed_Parms;

	this->ProcessEvent ( pFnCanBeGrabbed, &CanBeGrabbed_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.CanOverrideMoveWith
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_FlameThrowerAttack::CanOverrideMoveWith ( )
{
	static UFunction* pFnCanOverrideMoveWith = NULL;

	if ( ! pFnCanOverrideMoveWith )
		pFnCanOverrideMoveWith = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.CanOverrideMoveWith" );

	UKFSM_Husk_FlameThrowerAttack_execCanOverrideMoveWith_Parms CanOverrideMoveWith_Parms;

	this->ProcessEvent ( pFnCanOverrideMoveWith, &CanOverrideMoveWith_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.TurnOffFlamethrower
// [0x00020102] 
// Parameters infos:

void UKFSM_Husk_FlameThrowerAttack::TurnOffFlamethrower ( )
{
	static UFunction* pFnTurnOffFlamethrower = NULL;

	if ( ! pFnTurnOffFlamethrower )
		pFnTurnOffFlamethrower = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.TurnOffFlamethrower" );

	UKFSM_Husk_FlameThrowerAttack_execTurnOffFlamethrower_Parms TurnOffFlamethrower_Parms;

	this->ProcessEvent ( pFnTurnOffFlamethrower, &TurnOffFlamethrower_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_FlameThrowerAttack::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.SpecialMoveEnded" );

	UKFSM_Husk_FlameThrowerAttack_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.TurnOnFlamethrower
// [0x00020102] 
// Parameters infos:

void UKFSM_Husk_FlameThrowerAttack::TurnOnFlamethrower ( )
{
	static UFunction* pFnTurnOnFlamethrower = NULL;

	if ( ! pFnTurnOnFlamethrower )
		pFnTurnOnFlamethrower = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.TurnOnFlamethrower" );

	UKFSM_Husk_FlameThrowerAttack_execTurnOnFlamethrower_Parms TurnOnFlamethrower_Parms;

	this->ProcessEvent ( pFnTurnOnFlamethrower, &TurnOnFlamethrower_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_FlameThrowerAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.SpecialMoveStarted" );

	UKFSM_Husk_FlameThrowerAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.InternalCanDoSpecialMove
// [0x00880002] 
// Parameters infos:

void UKFSM_Husk_FlameThrowerAttack::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_FlameThrowerAttack.InternalCanDoSpecialMove" );

	UKFSM_Husk_FlameThrowerAttack_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_Suicide.SpecialMoveEnded
// [0x00020102] 
// Parameters infos:

void UKFSM_Husk_Suicide::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_Suicide.SpecialMoveEnded" );

	UKFSM_Husk_Suicide_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_Suicide.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_Suicide::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_Suicide.AnimEndNotify" );

	UKFSM_Husk_Suicide_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_Suicide.OnAnimNotifyParticleSystemSpawned
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_Suicide::OnAnimNotifyParticleSystemSpawned ( )
{
	static UFunction* pFnOnAnimNotifyParticleSystemSpawned = NULL;

	if ( ! pFnOnAnimNotifyParticleSystemSpawned )
		pFnOnAnimNotifyParticleSystemSpawned = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_Suicide.OnAnimNotifyParticleSystemSpawned" );

	UKFSM_Husk_Suicide_execOnAnimNotifyParticleSystemSpawned_Parms OnAnimNotifyParticleSystemSpawned_Parms;

	this->ProcessEvent ( pFnOnAnimNotifyParticleSystemSpawned, &OnAnimNotifyParticleSystemSpawned_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_Suicide.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Husk_Suicide::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_Suicide.SpecialMoveStarted" );

	UKFSM_Husk_Suicide_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Husk_Suicide.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_Husk_Suicide::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Husk_Suicide.InternalCanDoSpecialMove" );

	UKFSM_Husk_Suicide_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveButtonReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveButtonReleased" );

	UKFSM_PlayerHusk_FireBallAttack_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveButtonRetriggered
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveButtonRetriggered" );

	UKFSM_PlayerHusk_FireBallAttack_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveFlagsUpdated" );

	UKFSM_PlayerHusk_FireBallAttack_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveEnded" );

	UKFSM_PlayerHusk_FireBallAttack_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.Tick
// [0x00820102] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.Tick" );

	UKFSM_PlayerHusk_FireBallAttack_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.AnimEndNotify" );

	UKFSM_PlayerHusk_FireBallAttack_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.PlayFireAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::PlayFireAnimation ( )
{
	static UFunction* pFnPlayFireAnimation = NULL;

	if ( ! pFnPlayFireAnimation )
		pFnPlayFireAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.PlayFireAnimation" );

	UKFSM_PlayerHusk_FireBallAttack_execPlayFireAnimation_Parms PlayFireAnimation_Parms;

	this->ProcessEvent ( pFnPlayFireAnimation, &PlayFireAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.PlayFireHeldAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::PlayFireHeldAnimation ( )
{
	static UFunction* pFnPlayFireHeldAnimation = NULL;

	if ( ! pFnPlayFireHeldAnimation )
		pFnPlayFireHeldAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.PlayFireHeldAnimation" );

	UKFSM_PlayerHusk_FireBallAttack_execPlayFireHeldAnimation_Parms PlayFireHeldAnimation_Parms;

	this->ProcessEvent ( pFnPlayFireHeldAnimation, &PlayFireHeldAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.PlayWindUpAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::PlayWindUpAnimation ( )
{
	static UFunction* pFnPlayWindUpAnimation = NULL;

	if ( ! pFnPlayWindUpAnimation )
		pFnPlayWindUpAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.PlayWindUpAnimation" );

	UKFSM_PlayerHusk_FireBallAttack_execPlayWindUpAnimation_Parms PlayWindUpAnimation_Parms;

	this->ProcessEvent ( pFnPlayWindUpAnimation, &PlayWindUpAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.PlayAnimation
// [0x00020000] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.PlayAnimation" );

	UKFSM_PlayerHusk_FireBallAttack_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FireBallAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FireBallAttack.SpecialMoveStarted" );

	UKFSM_PlayerHusk_FireBallAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHuskFriendlyTest.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFPawn_ZedHuskFriendlyTest::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHuskFriendlyTest.AdjustDamage" );

	AKFPawn_ZedHuskFriendlyTest_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedHuskFriendlyTest.CanBeGrabbed
// [0x00024002] 
// Parameters infos:

void AKFPawn_ZedHuskFriendlyTest::CanBeGrabbed ( )
{
	static UFunction* pFnCanBeGrabbed = NULL;

	if ( ! pFnCanBeGrabbed )
		pFnCanBeGrabbed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedHuskFriendlyTest.CanBeGrabbed" );

	AKFPawn_ZedHuskFriendlyTest_execCanBeGrabbed_Parms CanBeGrabbed_Parms;

	this->ProcessEvent ( pFnCanBeGrabbed, &CanBeGrabbed_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.Destroyed
// [0x00020102] 
// Parameters infos:

void AKFProj_Missile_Patriarch::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.Destroyed" );

	AKFProj_Missile_Patriarch_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.StopSimulating
// [0x00080102] 
// Parameters infos:

void AKFProj_Missile_Patriarch::StopSimulating ( )
{
	static UFunction* pFnStopSimulating = NULL;

	if ( ! pFnStopSimulating )
		pFnStopSimulating = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.StopSimulating" );

	AKFProj_Missile_Patriarch_execStopSimulating_Parms StopSimulating_Parms;

	this->ProcessEvent ( pFnStopSimulating, &StopSimulating_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.TraceProjHitZones
// [0x00420102] 
// Parameters infos:

void AKFProj_Missile_Patriarch::TraceProjHitZones ( )
{
	static UFunction* pFnTraceProjHitZones = NULL;

	if ( ! pFnTraceProjHitZones )
		pFnTraceProjHitZones = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.TraceProjHitZones" );

	AKFProj_Missile_Patriarch_execTraceProjHitZones_Parms TraceProjHitZones_Parms;

	this->ProcessEvent ( pFnTraceProjHitZones, &TraceProjHitZones_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.DoFlocking
// [0x00820102] 
// Parameters infos:

void AKFProj_Missile_Patriarch::DoFlocking ( )
{
	static UFunction* pFnDoFlocking = NULL;

	if ( ! pFnDoFlocking )
		pFnDoFlocking = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.DoFlocking" );

	AKFProj_Missile_Patriarch_execDoFlocking_Parms DoFlocking_Parms;

	this->ProcessEvent ( pFnDoFlocking, &DoFlocking_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.CurlTimer
// [0x00820102] 
// Parameters infos:

void AKFProj_Missile_Patriarch::CurlTimer ( )
{
	static UFunction* pFnCurlTimer = NULL;

	if ( ! pFnCurlTimer )
		pFnCurlTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.CurlTimer" );

	AKFProj_Missile_Patriarch_execCurlTimer_Parms CurlTimer_Parms;

	this->ProcessEvent ( pFnCurlTimer, &CurlTimer_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Missile_Patriarch::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.Tick" );

	AKFProj_Missile_Patriarch_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Missile_Patriarch::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.ReplicatedEvent" );

	AKFProj_Missile_Patriarch_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.StartCurlTimer
// [0x00020102] 
// Parameters infos:

void AKFProj_Missile_Patriarch::StartCurlTimer ( )
{
	static UFunction* pFnStartCurlTimer = NULL;

	if ( ! pFnStartCurlTimer )
		pFnStartCurlTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.StartCurlTimer" );

	AKFProj_Missile_Patriarch_execStartCurlTimer_Parms StartCurlTimer_Parms;

	this->ProcessEvent ( pFnStartCurlTimer, &StartCurlTimer_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.InitEx
// [0x00020002] 
// Parameters infos:

void AKFProj_Missile_Patriarch::InitEx ( )
{
	static UFunction* pFnInitEx = NULL;

	if ( ! pFnInitEx )
		pFnInitEx = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.InitEx" );

	AKFProj_Missile_Patriarch_execInitEx_Parms InitEx_Parms;

	this->ProcessEvent ( pFnInitEx, &InitEx_Parms, NULL );
};

// Function kfgamecontent.KFProj_Missile_Patriarch.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_Missile_Patriarch::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Missile_Patriarch.PrepareExplosionTemplate" );

	AKFProj_Missile_Patriarch_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_Mortar_Patriarch.InitEx
// [0x00020002] 
// Parameters infos:

void AKFProj_Mortar_Patriarch::InitEx ( )
{
	static UFunction* pFnInitEx = NULL;

	if ( ! pFnInitEx )
		pFnInitEx = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Mortar_Patriarch.InitEx" );

	AKFProj_Mortar_Patriarch_execInitEx_Parms InitEx_Parms;

	this->ProcessEvent ( pFnInitEx, &InitEx_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Minigun_Patriarch.AddSpread
// [0x00820102] 
// Parameters infos:

void AKFWeap_Minigun_Patriarch::AddSpread ( )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Minigun_Patriarch.AddSpread" );

	AKFWeap_Minigun_Patriarch_execAddSpread_Parms AddSpread_Parms;

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Minigun_Patriarch.StopPawnSprint
// [0x00020100] 
// Parameters infos:

void AKFWeap_Minigun_Patriarch::StopPawnSprint ( )
{
	static UFunction* pFnStopPawnSprint = NULL;

	if ( ! pFnStopPawnSprint )
		pFnStopPawnSprint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Minigun_Patriarch.StopPawnSprint" );

	AKFWeap_Minigun_Patriarch_execStopPawnSprint_Parms StopPawnSprint_Parms;

	this->ProcessEvent ( pFnStopPawnSprint, &StopPawnSprint_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Minigun_Patriarch.ConsumeAmmo
// [0x00020100] 
// Parameters infos:

void AKFWeap_Minigun_Patriarch::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Minigun_Patriarch.ConsumeAmmo" );

	AKFWeap_Minigun_Patriarch_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Minigun_Patriarch.SpawnProjectile
// [0x00020102] 
// Parameters infos:

void AKFWeap_Minigun_Patriarch::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Minigun_Patriarch.SpawnProjectile" );

	AKFWeap_Minigun_Patriarch_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MortarAttack.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MortarAttack::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MortarAttack.SpecialMoveEnded" );

	UKFSM_Patriarch_MortarAttack_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MortarAttack.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MortarAttack::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MortarAttack.AnimEndNotify" );

	UKFSM_Patriarch_MortarAttack_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MortarAttack.Timer_FireBarrage
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MortarAttack::Timer_FireBarrage ( )
{
	static UFunction* pFnTimer_FireBarrage = NULL;

	if ( ! pFnTimer_FireBarrage )
		pFnTimer_FireBarrage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MortarAttack.Timer_FireBarrage" );

	UKFSM_Patriarch_MortarAttack_execTimer_FireBarrage_Parms Timer_FireBarrage_Parms;

	this->ProcessEvent ( pFnTimer_FireBarrage, &Timer_FireBarrage_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MortarAttack.FireMissiles
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MortarAttack::FireMissiles ( )
{
	static UFunction* pFnFireMissiles = NULL;

	if ( ! pFnFireMissiles )
		pFnFireMissiles = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MortarAttack.FireMissiles" );

	UKFSM_Patriarch_MortarAttack_execFireMissiles_Parms FireMissiles_Parms;

	this->ProcessEvent ( pFnFireMissiles, &FireMissiles_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MortarAttack.PlayFireAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MortarAttack::PlayFireAnimation ( )
{
	static UFunction* pFnPlayFireAnimation = NULL;

	if ( ! pFnPlayFireAnimation )
		pFnPlayFireAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MortarAttack.PlayFireAnimation" );

	UKFSM_Patriarch_MortarAttack_execPlayFireAnimation_Parms PlayFireAnimation_Parms;

	this->ProcessEvent ( pFnPlayFireAnimation, &PlayFireAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MortarAttack.GetAimDirAndTargetLoc
// [0x00420002] 
// Parameters infos:

void UKFSM_Patriarch_MortarAttack::GetAimDirAndTargetLoc ( )
{
	static UFunction* pFnGetAimDirAndTargetLoc = NULL;

	if ( ! pFnGetAimDirAndTargetLoc )
		pFnGetAimDirAndTargetLoc = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MortarAttack.GetAimDirAndTargetLoc" );

	UKFSM_Patriarch_MortarAttack_execGetAimDirAndTargetLoc_Parms GetAimDirAndTargetLoc_Parms;

	this->ProcessEvent ( pFnGetAimDirAndTargetLoc, &GetAimDirAndTargetLoc_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MortarAttack.GetProjectileClass
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MortarAttack::GetProjectileClass ( )
{
	static UFunction* pFnGetProjectileClass = NULL;

	if ( ! pFnGetProjectileClass )
		pFnGetProjectileClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MortarAttack.GetProjectileClass" );

	UKFSM_Patriarch_MortarAttack_execGetProjectileClass_Parms GetProjectileClass_Parms;

	this->ProcessEvent ( pFnGetProjectileClass, &GetProjectileClass_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MortarAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MortarAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MortarAttack.SpecialMoveStarted" );

	UKFSM_Patriarch_MortarAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.SpecialMoveEnded" );

	UKFSM_Patriarch_MissileAttack_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.AnimEndNotify" );

	UKFSM_Patriarch_MissileAttack_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.PlayWindDownAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::PlayWindDownAnimation ( )
{
	static UFunction* pFnPlayWindDownAnimation = NULL;

	if ( ! pFnPlayWindDownAnimation )
		pFnPlayWindDownAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.PlayWindDownAnimation" );

	UKFSM_Patriarch_MissileAttack_execPlayWindDownAnimation_Parms PlayWindDownAnimation_Parms;

	this->ProcessEvent ( pFnPlayWindDownAnimation, &PlayWindDownAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.FireMissiles
// [0x00820002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::FireMissiles ( )
{
	static UFunction* pFnFireMissiles = NULL;

	if ( ! pFnFireMissiles )
		pFnFireMissiles = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.FireMissiles" );

	UKFSM_Patriarch_MissileAttack_execFireMissiles_Parms FireMissiles_Parms;

	this->ProcessEvent ( pFnFireMissiles, &FireMissiles_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.Tick
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.Tick" );

	UKFSM_Patriarch_MissileAttack_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.GetAimDirAndTargetLoc
// [0x00420002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::GetAimDirAndTargetLoc ( )
{
	static UFunction* pFnGetAimDirAndTargetLoc = NULL;

	if ( ! pFnGetAimDirAndTargetLoc )
		pFnGetAimDirAndTargetLoc = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.GetAimDirAndTargetLoc" );

	UKFSM_Patriarch_MissileAttack_execGetAimDirAndTargetLoc_Parms GetAimDirAndTargetLoc_Parms;

	this->ProcessEvent ( pFnGetAimDirAndTargetLoc, &GetAimDirAndTargetLoc_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.PlayFireAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::PlayFireAnimation ( )
{
	static UFunction* pFnPlayFireAnimation = NULL;

	if ( ! pFnPlayFireAnimation )
		pFnPlayFireAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.PlayFireAnimation" );

	UKFSM_Patriarch_MissileAttack_execPlayFireAnimation_Parms PlayFireAnimation_Parms;

	this->ProcessEvent ( pFnPlayFireAnimation, &PlayFireAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.StartGunTracking
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::StartGunTracking ( )
{
	static UFunction* pFnStartGunTracking = NULL;

	if ( ! pFnStartGunTracking )
		pFnStartGunTracking = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.StartGunTracking" );

	UKFSM_Patriarch_MissileAttack_execStartGunTracking_Parms StartGunTracking_Parms;

	this->ProcessEvent ( pFnStartGunTracking, &StartGunTracking_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.PlayLoadAnimation
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::PlayLoadAnimation ( )
{
	static UFunction* pFnPlayLoadAnimation = NULL;

	if ( ! pFnPlayLoadAnimation )
		pFnPlayLoadAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.PlayLoadAnimation" );

	UKFSM_Patriarch_MissileAttack_execPlayLoadAnimation_Parms PlayLoadAnimation_Parms;

	this->ProcessEvent ( pFnPlayLoadAnimation, &PlayLoadAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.PlayAnimation
// [0x00020000] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::PlayAnimation ( )
{
	static UFunction* pFnPlayAnimation = NULL;

	if ( ! pFnPlayAnimation )
		pFnPlayAnimation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.PlayAnimation" );

	UKFSM_Patriarch_MissileAttack_execPlayAnimation_Parms PlayAnimation_Parms;

	this->ProcessEvent ( pFnPlayAnimation, &PlayAnimation_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.GetProjectileClass
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::GetProjectileClass ( )
{
	static UFunction* pFnGetProjectileClass = NULL;

	if ( ! pFnGetProjectileClass )
		pFnGetProjectileClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.GetProjectileClass" );

	UKFSM_Patriarch_MissileAttack_execGetProjectileClass_Parms GetProjectileClass_Parms;

	this->ProcessEvent ( pFnGetProjectileClass, &GetProjectileClass_Parms, NULL );
};

// Function kfgamecontent.KFSM_Patriarch_MissileAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Patriarch_MissileAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Patriarch_MissileAttack.SpecialMoveStarted" );

	UKFSM_Patriarch_MissileAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Minigun_Patriarch_Versus.ShouldWeaponIgnoreStartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Minigun_Patriarch_Versus::ShouldWeaponIgnoreStartFire ( )
{
	static UFunction* pFnShouldWeaponIgnoreStartFire = NULL;

	if ( ! pFnShouldWeaponIgnoreStartFire )
		pFnShouldWeaponIgnoreStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Minigun_Patriarch_Versus.ShouldWeaponIgnoreStartFire" );

	AKFWeap_Minigun_Patriarch_Versus_execShouldWeaponIgnoreStartFire_Parms ShouldWeaponIgnoreStartFire_Parms;

	this->ProcessEvent ( pFnShouldWeaponIgnoreStartFire, &ShouldWeaponIgnoreStartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Minigun_Patriarch_Versus.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFWeap_Minigun_Patriarch_Versus::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Minigun_Patriarch_Versus.PostBeginPlay" );

	AKFWeap_Minigun_Patriarch_Versus_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFPawn_ZedScrake_Mixer.UsePlayerControlledZedSkin
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFPawn_ZedScrake_Mixer::eventUsePlayerControlledZedSkin ( )
{
	static UFunction* pFnUsePlayerControlledZedSkin = NULL;

	if ( ! pFnUsePlayerControlledZedSkin )
		pFnUsePlayerControlledZedSkin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPawn_ZedScrake_Mixer.UsePlayerControlledZedSkin" );

	AKFPawn_ZedScrake_Mixer_eventUsePlayerControlledZedSkin_Parms UsePlayerControlledZedSkin_Parms;

	this->ProcessEvent ( pFnUsePlayerControlledZedSkin, &UsePlayerControlledZedSkin_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.SpecialMoveEnded" );

	UKFSM_Siren_Scream_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.CheckIfScreamWasInterrupted
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::CheckIfScreamWasInterrupted ( )
{
	static UFunction* pFnCheckIfScreamWasInterrupted = NULL;

	if ( ! pFnCheckIfScreamWasInterrupted )
		pFnCheckIfScreamWasInterrupted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.CheckIfScreamWasInterrupted" );

	UKFSM_Siren_Scream_execCheckIfScreamWasInterrupted_Parms CheckIfScreamWasInterrupted_Parms;

	this->ProcessEvent ( pFnCheckIfScreamWasInterrupted, &CheckIfScreamWasInterrupted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.ScreamExplosion
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::ScreamExplosion ( )
{
	static UFunction* pFnScreamExplosion = NULL;

	if ( ! pFnScreamExplosion )
		pFnScreamExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.ScreamExplosion" );

	UKFSM_Siren_Scream_execScreamExplosion_Parms ScreamExplosion_Parms;

	this->ProcessEvent ( pFnScreamExplosion, &ScreamExplosion_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.InitializeSirenExplosion
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::InitializeSirenExplosion ( )
{
	static UFunction* pFnInitializeSirenExplosion = NULL;

	if ( ! pFnInitializeSirenExplosion )
		pFnInitializeSirenExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.InitializeSirenExplosion" );

	UKFSM_Siren_Scream_execInitializeSirenExplosion_Parms InitializeSirenExplosion_Parms;

	this->ProcessEvent ( pFnInitializeSirenExplosion, &InitializeSirenExplosion_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.DestroyProjectileShield
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::DestroyProjectileShield ( )
{
	static UFunction* pFnDestroyProjectileShield = NULL;

	if ( ! pFnDestroyProjectileShield )
		pFnDestroyProjectileShield = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.DestroyProjectileShield" );

	UKFSM_Siren_Scream_execDestroyProjectileShield_Parms DestroyProjectileShield_Parms;

	this->ProcessEvent ( pFnDestroyProjectileShield, &DestroyProjectileShield_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.Timer_DestroyProjectileShield
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::Timer_DestroyProjectileShield ( )
{
	static UFunction* pFnTimer_DestroyProjectileShield = NULL;

	if ( ! pFnTimer_DestroyProjectileShield )
		pFnTimer_DestroyProjectileShield = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.Timer_DestroyProjectileShield" );

	UKFSM_Siren_Scream_execTimer_DestroyProjectileShield_Parms Timer_DestroyProjectileShield_Parms;

	this->ProcessEvent ( pFnTimer_DestroyProjectileShield, &Timer_DestroyProjectileShield_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.SpawnProjectileShield
// [0x00820002] 
// Parameters infos:

void UKFSM_Siren_Scream::SpawnProjectileShield ( )
{
	static UFunction* pFnSpawnProjectileShield = NULL;

	if ( ! pFnSpawnProjectileShield )
		pFnSpawnProjectileShield = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.SpawnProjectileShield" );

	UKFSM_Siren_Scream_execSpawnProjectileShield_Parms SpawnProjectileShield_Parms;

	this->ProcessEvent ( pFnSpawnProjectileShield, &SpawnProjectileShield_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.ScreamBegan
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::ScreamBegan ( )
{
	static UFunction* pFnScreamBegan = NULL;

	if ( ! pFnScreamBegan )
		pFnScreamBegan = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.ScreamBegan" );

	UKFSM_Siren_Scream_execScreamBegan_Parms ScreamBegan_Parms;

	this->ProcessEvent ( pFnScreamBegan, &ScreamBegan_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.SpecialMoveStarted" );

	UKFSM_Siren_Scream_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.CanChainMove
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::CanChainMove ( )
{
	static UFunction* pFnCanChainMove = NULL;

	if ( ! pFnCanChainMove )
		pFnCanChainMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.CanChainMove" );

	UKFSM_Siren_Scream_execCanChainMove_Parms CanChainMove_Parms;

	this->ProcessEvent ( pFnCanChainMove, &CanChainMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_Siren_Scream.CanOverrideMoveWith
// [0x00020002] 
// Parameters infos:

void UKFSM_Siren_Scream::CanOverrideMoveWith ( )
{
	static UFunction* pFnCanOverrideMoveWith = NULL;

	if ( ! pFnCanOverrideMoveWith )
		pFnCanOverrideMoveWith = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_Siren_Scream.CanOverrideMoveWith" );

	UKFSM_Siren_Scream_execCanOverrideMoveWith_Parms CanOverrideMoveWith_Parms;

	this->ProcessEvent ( pFnCanOverrideMoveWith, &CanOverrideMoveWith_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Pistol_Medic.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Pistol_Medic::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Pistol_Medic.GetTraderFilter" );

	AKFWeap_Pistol_Medic_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.GetSecondaryAmmoForHUD
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::GetSecondaryAmmoForHUD ( )
{
	static UFunction* pFnGetSecondaryAmmoForHUD = NULL;

	if ( ! pFnGetSecondaryAmmoForHUD )
		pFnGetSecondaryAmmoForHUD = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.GetSecondaryAmmoForHUD" );

	AKFWeap_MedicBase_execGetSecondaryAmmoForHUD_Parms GetSecondaryAmmoForHUD_Parms;

	this->ProcessEvent ( pFnGetSecondaryAmmoForHUD, &GetSecondaryAmmoForHUD_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.SetTraderWeaponStats
// [0x00422902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_MedicBase::eventSetTraderWeaponStats ( )
{
	static UFunction* pFnSetTraderWeaponStats = NULL;

	if ( ! pFnSetTraderWeaponStats )
		pFnSetTraderWeaponStats = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.SetTraderWeaponStats" );

	AKFWeap_MedicBase_eventSetTraderWeaponStats_Parms SetTraderWeaponStats_Parms;

	this->ProcessEvent ( pFnSetTraderWeaponStats, &SetTraderWeaponStats_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.UpdateOpticsUI
// [0x00024102] 
// Parameters infos:

void AKFWeap_MedicBase::UpdateOpticsUI ( )
{
	static UFunction* pFnUpdateOpticsUI = NULL;

	if ( ! pFnUpdateOpticsUI )
		pFnUpdateOpticsUI = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.UpdateOpticsUI" );

	AKFWeap_MedicBase_execUpdateOpticsUI_Parms UpdateOpticsUI_Parms;

	this->ProcessEvent ( pFnUpdateOpticsUI, &UpdateOpticsUI_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.DetachWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.DetachWeapon" );

	AKFWeap_MedicBase_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.AttachWeaponTo
// [0x00024102] 
// Parameters infos:

void AKFWeap_MedicBase::AttachWeaponTo ( )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.AttachWeaponTo" );

	AKFWeap_MedicBase_execAttachWeaponTo_Parms AttachWeaponTo_Parms;

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.ItemRemovedFromInvManager
// [0x00020002] 
// Parameters infos:

void AKFWeap_MedicBase::ItemRemovedFromInvManager ( )
{
	static UFunction* pFnItemRemovedFromInvManager = NULL;

	if ( ! pFnItemRemovedFromInvManager )
		pFnItemRemovedFromInvManager = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.ItemRemovedFromInvManager" );

	AKFWeap_MedicBase_execItemRemovedFromInvManager_Parms ItemRemovedFromInvManager_Parms;

	this->ProcessEvent ( pFnItemRemovedFromInvManager, &ItemRemovedFromInvManager_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.ClientWeaponSet
// [0x010241C2] 
// Parameters infos:

void AKFWeap_MedicBase::ClientWeaponSet ( )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.ClientWeaponSet" );

	AKFWeap_MedicBase_execClientWeaponSet_Parms ClientWeaponSet_Parms;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.GetWeaponFireAnim" );

	AKFWeap_MedicBase_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.PlayFiringSound
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::PlayFiringSound ( )
{
	static UFunction* pFnPlayFiringSound = NULL;

	if ( ! pFnPlayFiringSound )
		pFnPlayFiringSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.PlayFiringSound" );

	AKFWeap_MedicBase_execPlayFiringSound_Parms PlayFiringSound_Parms;

	this->ProcessEvent ( pFnPlayFiringSound, &PlayFiringSound_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.ClientPlayTargetingSound
// [0x01020142] 
// Parameters infos:

void AKFWeap_MedicBase::ClientPlayTargetingSound ( )
{
	static UFunction* pFnClientPlayTargetingSound = NULL;

	if ( ! pFnClientPlayTargetingSound )
		pFnClientPlayTargetingSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.ClientPlayTargetingSound" );

	AKFWeap_MedicBase_execClientPlayTargetingSound_Parms ClientPlayTargetingSound_Parms;

	this->ProcessEvent ( pFnClientPlayTargetingSound, &ClientPlayTargetingSound_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.CheckTargetLock
// [0x00820002] 
// Parameters infos:

void AKFWeap_MedicBase::CheckTargetLock ( )
{
	static UFunction* pFnCheckTargetLock = NULL;

	if ( ! pFnCheckTargetLock )
		pFnCheckTargetLock = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.CheckTargetLock" );

	AKFWeap_MedicBase_execCheckTargetLock_Parms CheckTargetLock_Parms;

	this->ProcessEvent ( pFnCheckTargetLock, &CheckTargetLock_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.AllowTargetLockOn
// [0x00020002] 
// Parameters infos:

void AKFWeap_MedicBase::AllowTargetLockOn ( )
{
	static UFunction* pFnAllowTargetLockOn = NULL;

	if ( ! pFnAllowTargetLockOn )
		pFnAllowTargetLockOn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.AllowTargetLockOn" );

	AKFWeap_MedicBase_execAllowTargetLockOn_Parms AllowTargetLockOn_Parms;

	this->ProcessEvent ( pFnAllowTargetLockOn, &AllowTargetLockOn_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.CanLockOnTo
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::CanLockOnTo ( )
{
	static UFunction* pFnCanLockOnTo = NULL;

	if ( ! pFnCanLockOnTo )
		pFnCanLockOnTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.CanLockOnTo" );

	AKFWeap_MedicBase_execCanLockOnTo_Parms CanLockOnTo_Parms;

	this->ProcessEvent ( pFnCanLockOnTo, &CanLockOnTo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.AdjustLockTarget
// [0x00020002] 
// Parameters infos:

void AKFWeap_MedicBase::AdjustLockTarget ( )
{
	static UFunction* pFnAdjustLockTarget = NULL;

	if ( ! pFnAdjustLockTarget )
		pFnAdjustLockTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.AdjustLockTarget" );

	AKFWeap_MedicBase_execAdjustLockTarget_Parms AdjustLockTarget_Parms;

	this->ProcessEvent ( pFnAdjustLockTarget, &AdjustLockTarget_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.HasAnyAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.HasAnyAmmo" );

	AKFWeap_MedicBase_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.HealAmmoRegeneration
// [0x00020002] 
// Parameters infos:

void AKFWeap_MedicBase::HealAmmoRegeneration ( )
{
	static UFunction* pFnHealAmmoRegeneration = NULL;

	if ( ! pFnHealAmmoRegeneration )
		pFnHealAmmoRegeneration = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.HealAmmoRegeneration" );

	AKFWeap_MedicBase_execHealAmmoRegeneration_Parms HealAmmoRegeneration_Parms;

	this->ProcessEvent ( pFnHealAmmoRegeneration, &HealAmmoRegeneration_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.StartHealRecharge
// [0x00020002] 
// Parameters infos:

void AKFWeap_MedicBase::StartHealRecharge ( )
{
	static UFunction* pFnStartHealRecharge = NULL;

	if ( ! pFnStartHealRecharge )
		pFnStartHealRecharge = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.StartHealRecharge" );

	AKFWeap_MedicBase_execStartHealRecharge_Parms StartHealRecharge_Parms;

	this->ProcessEvent ( pFnStartHealRecharge, &StartHealRecharge_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.GivenTo
// [0x00024002] 
// Parameters infos:

void AKFWeap_MedicBase::GivenTo ( )
{
	static UFunction* pFnGivenTo = NULL;

	if ( ! pFnGivenTo )
		pFnGivenTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.GivenTo" );

	AKFWeap_MedicBase_execGivenTo_Parms GivenTo_Parms;

	this->ProcessEvent ( pFnGivenTo, &GivenTo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.StartFire" );

	AKFWeap_MedicBase_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.ShakeView
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::ShakeView ( )
{
	static UFunction* pFnShakeView = NULL;

	if ( ! pFnShakeView )
		pFnShakeView = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.ShakeView" );

	AKFWeap_MedicBase_execShakeView_Parms ShakeView_Parms;

	this->ProcessEvent ( pFnShakeView, &ShakeView_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.HandleRecoil
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_MedicBase::eventHandleRecoil ( )
{
	static UFunction* pFnHandleRecoil = NULL;

	if ( ! pFnHandleRecoil )
		pFnHandleRecoil = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.HandleRecoil" );

	AKFWeap_MedicBase_eventHandleRecoil_Parms HandleRecoil_Parms;

	this->ProcessEvent ( pFnHandleRecoil, &HandleRecoil_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.SpawnProjectile
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.SpawnProjectile" );

	AKFWeap_MedicBase_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.ProcessInstantHitEx
// [0x00424102] 
// Parameters infos:

void AKFWeap_MedicBase::ProcessInstantHitEx ( )
{
	static UFunction* pFnProcessInstantHitEx = NULL;

	if ( ! pFnProcessInstantHitEx )
		pFnProcessInstantHitEx = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.ProcessInstantHitEx" );

	AKFWeap_MedicBase_execProcessInstantHitEx_Parms ProcessInstantHitEx_Parms;

	this->ProcessEvent ( pFnProcessInstantHitEx, &ProcessInstantHitEx_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.ConsumeAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.ConsumeAmmo" );

	AKFWeap_MedicBase_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_MedicBase::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.AltFireMode" );

	AKFWeap_MedicBase_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_MedicBase::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.Tick" );

	AKFWeap_MedicBase_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFWeap_MedicBase.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_MedicBase::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_MedicBase.ReplicatedEvent" );

	AKFWeap_MedicBase_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedSuicideCamera.OnBecomeInActive
// [0x00020002] 
// Parameters infos:

void UKFPlayerZedSuicideCamera::OnBecomeInActive ( )
{
	static UFunction* pFnOnBecomeInActive = NULL;

	if ( ! pFnOnBecomeInActive )
		pFnOnBecomeInActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedSuicideCamera.OnBecomeInActive" );

	UKFPlayerZedSuicideCamera_execOnBecomeInActive_Parms OnBecomeInActive_Parms;

	this->ProcessEvent ( pFnOnBecomeInActive, &OnBecomeInActive_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedSuicideCamera.UpdateCamera
// [0x00420102] 
// Parameters infos:

void UKFPlayerZedSuicideCamera::UpdateCamera ( )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedSuicideCamera.UpdateCamera" );

	UKFPlayerZedSuicideCamera_execUpdateCamera_Parms UpdateCamera_Parms;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedSuicideCamera.UpdateCameraFocalPoint
// [0x00820002] 
// Parameters infos:

void UKFPlayerZedSuicideCamera::UpdateCameraFocalPoint ( )
{
	static UFunction* pFnUpdateCameraFocalPoint = NULL;

	if ( ! pFnUpdateCameraFocalPoint )
		pFnUpdateCameraFocalPoint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedSuicideCamera.UpdateCameraFocalPoint" );

	UKFPlayerZedSuicideCamera_execUpdateCameraFocalPoint_Parms UpdateCameraFocalPoint_Parms;

	this->ProcessEvent ( pFnUpdateCameraFocalPoint, &UpdateCameraFocalPoint_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedSuicideCamera.InitSuicideCam
// [0x00020002] 
// Parameters infos:

void UKFPlayerZedSuicideCamera::InitSuicideCam ( )
{
	static UFunction* pFnInitSuicideCam = NULL;

	if ( ! pFnInitSuicideCam )
		pFnInitSuicideCam = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedSuicideCamera.InitSuicideCam" );

	UKFPlayerZedSuicideCamera_execInitSuicideCam_Parms InitSuicideCam_Parms;

	this->ProcessEvent ( pFnInitSuicideCam, &InitSuicideCam_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedSuicideCamera.OnBecomeActive
// [0x00020002] 
// Parameters infos:

void UKFPlayerZedSuicideCamera::OnBecomeActive ( )
{
	static UFunction* pFnOnBecomeActive = NULL;

	if ( ! pFnOnBecomeActive )
		pFnOnBecomeActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedSuicideCamera.OnBecomeActive" );

	UKFPlayerZedSuicideCamera_execOnBecomeActive_Parms OnBecomeActive_Parms;

	this->ProcessEvent ( pFnOnBecomeActive, &OnBecomeActive_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedWaitingCamera.OnBecomeInActive
// [0x00020002] 
// Parameters infos:

void UKFPlayerZedWaitingCamera::OnBecomeInActive ( )
{
	static UFunction* pFnOnBecomeInActive = NULL;

	if ( ! pFnOnBecomeInActive )
		pFnOnBecomeInActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedWaitingCamera.OnBecomeInActive" );

	UKFPlayerZedWaitingCamera_execOnBecomeInActive_Parms OnBecomeInActive_Parms;

	this->ProcessEvent ( pFnOnBecomeInActive, &OnBecomeInActive_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedWaitingCamera.PlayExitFade
// [0x00020002] 
// Parameters infos:

void UKFPlayerZedWaitingCamera::PlayExitFade ( )
{
	static UFunction* pFnPlayExitFade = NULL;

	if ( ! pFnPlayExitFade )
		pFnPlayExitFade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedWaitingCamera.PlayExitFade" );

	UKFPlayerZedWaitingCamera_execPlayExitFade_Parms PlayExitFade_Parms;

	this->ProcessEvent ( pFnPlayExitFade, &PlayExitFade_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedWaitingCamera.UpdateCamera
// [0x00420102] 
// Parameters infos:

void UKFPlayerZedWaitingCamera::UpdateCamera ( )
{
	static UFunction* pFnUpdateCamera = NULL;

	if ( ! pFnUpdateCamera )
		pFnUpdateCamera = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedWaitingCamera.UpdateCamera" );

	UKFPlayerZedWaitingCamera_execUpdateCamera_Parms UpdateCamera_Parms;

	this->ProcessEvent ( pFnUpdateCamera, &UpdateCamera_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedWaitingCamera.UpdateCameraFocalPoint
// [0x00820002] 
// Parameters infos:

void UKFPlayerZedWaitingCamera::UpdateCameraFocalPoint ( )
{
	static UFunction* pFnUpdateCameraFocalPoint = NULL;

	if ( ! pFnUpdateCameraFocalPoint )
		pFnUpdateCameraFocalPoint = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedWaitingCamera.UpdateCameraFocalPoint" );

	UKFPlayerZedWaitingCamera_execUpdateCameraFocalPoint_Parms UpdateCameraFocalPoint_Parms;

	this->ProcessEvent ( pFnUpdateCameraFocalPoint, &UpdateCameraFocalPoint_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedWaitingCamera.PopulateFocalPoints
// [0x00020002] 
// Parameters infos:

void UKFPlayerZedWaitingCamera::PopulateFocalPoints ( )
{
	static UFunction* pFnPopulateFocalPoints = NULL;

	if ( ! pFnPopulateFocalPoints )
		pFnPopulateFocalPoints = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedWaitingCamera.PopulateFocalPoints" );

	UKFPlayerZedWaitingCamera_execPopulateFocalPoints_Parms PopulateFocalPoints_Parms;

	this->ProcessEvent ( pFnPopulateFocalPoints, &PopulateFocalPoints_Parms, NULL );
};

// Function kfgamecontent.KFPlayerZedWaitingCamera.OnBecomeActive
// [0x00020002] 
// Parameters infos:

void UKFPlayerZedWaitingCamera::OnBecomeActive ( )
{
	static UFunction* pFnOnBecomeActive = NULL;

	if ( ! pFnOnBecomeActive )
		pFnOnBecomeActive = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFPlayerZedWaitingCamera.OnBecomeActive" );

	UKFPlayerZedWaitingCamera_execOnBecomeActive_Parms OnBecomeActive_Parms;

	this->ProcessEvent ( pFnOnBecomeActive, &OnBecomeActive_Parms, NULL );
};

// Function kfgamecontent.KFProj_Blade_Eviscerator.ShouldProcessBulletTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_Blade_Eviscerator::ShouldProcessBulletTouch ( )
{
	static UFunction* pFnShouldProcessBulletTouch = NULL;

	if ( ! pFnShouldProcessBulletTouch )
		pFnShouldProcessBulletTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Blade_Eviscerator.ShouldProcessBulletTouch" );

	AKFProj_Blade_Eviscerator_execShouldProcessBulletTouch_Parms ShouldProcessBulletTouch_Parms;

	this->ProcessEvent ( pFnShouldProcessBulletTouch, &ShouldProcessBulletTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_Blade_Eviscerator.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Blade_Eviscerator::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Blade_Eviscerator.PostBeginPlay" );

	AKFProj_Blade_Eviscerator_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_Bolt_Crossbow.SyncOriginalLocation
// [0x00020102] 
// Parameters infos:

void AKFProj_Bolt_Crossbow::SyncOriginalLocation ( )
{
	static UFunction* pFnSyncOriginalLocation = NULL;

	if ( ! pFnSyncOriginalLocation )
		pFnSyncOriginalLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Bolt_Crossbow.SyncOriginalLocation" );

	AKFProj_Bolt_Crossbow_execSyncOriginalLocation_Parms SyncOriginalLocation_Parms;

	this->ProcessEvent ( pFnSyncOriginalLocation, &SyncOriginalLocation_Parms, NULL );
};

// Function kfgamecontent.KFProj_Bullet_DragonsBreath.StopSimulating
// [0x00880102] 
// Parameters infos:

void AKFProj_Bullet_DragonsBreath::StopSimulating ( )
{
	static UFunction* pFnStopSimulating = NULL;

	if ( ! pFnStopSimulating )
		pFnStopSimulating = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Bullet_DragonsBreath.StopSimulating" );

	AKFProj_Bullet_DragonsBreath_execStopSimulating_Parms StopSimulating_Parms;

	this->ProcessEvent ( pFnStopSimulating, &StopSimulating_Parms, NULL );
};

// Function kfgamecontent.KFProj_Bullet_DragonsBreath.TriggerExplosion
// [0x00020102] 
// Parameters infos:

void AKFProj_Bullet_DragonsBreath::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Bullet_DragonsBreath.TriggerExplosion" );

	AKFProj_Bullet_DragonsBreath_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFProj_Bullet_DragonsBreath.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_Bullet_DragonsBreath::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Bullet_DragonsBreath.ProcessTouch" );

	AKFProj_Bullet_DragonsBreath_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovSplash.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_MolotovSplash::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovSplash.PrepareExplosionTemplate" );

	AKFProj_MolotovSplash_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovSplash.PrepareExplosionActor
// [0x00880102] 
// Parameters infos:

void AKFProj_MolotovSplash::PrepareExplosionActor ( )
{
	static UFunction* pFnPrepareExplosionActor = NULL;

	if ( ! pFnPrepareExplosionActor )
		pFnPrepareExplosionActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovSplash.PrepareExplosionActor" );

	AKFProj_MolotovSplash_execPrepareExplosionActor_Parms PrepareExplosionActor_Parms;

	this->ProcessEvent ( pFnPrepareExplosionActor, &PrepareExplosionActor_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovSplash.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_MolotovSplash::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovSplash.ProcessTouch" );

	AKFProj_MolotovSplash_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovSplash.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_MolotovSplash::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovSplash.HitWall" );

	AKFProj_MolotovSplash_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFProj_Bullet_Pellet.ShouldWarnAIWhenFired
// [0x00020002] 
// Parameters infos:

void AKFProj_Bullet_Pellet::ShouldWarnAIWhenFired ( )
{
	static UFunction* pFnShouldWarnAIWhenFired = NULL;

	if ( ! pFnShouldWarnAIWhenFired )
		pFnShouldWarnAIWhenFired = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Bullet_Pellet.ShouldWarnAIWhenFired" );

	AKFProj_Bullet_Pellet_execShouldWarnAIWhenFired_Parms ShouldWarnAIWhenFired_Parms;

	this->ProcessEvent ( pFnShouldWarnAIWhenFired, &ShouldWarnAIWhenFired_Parms, NULL );
};

// Function kfgamecontent.KFProj_Bullet_Pellet.Init
// [0x00020002] 
// Parameters infos:

void AKFProj_Bullet_Pellet::Init ( )
{
	static UFunction* pFnInit = NULL;

	if ( ! pFnInit )
		pFnInit = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Bullet_Pellet.Init" );

	AKFProj_Bullet_Pellet_execInit_Parms Init_Parms;

	this->ProcessEvent ( pFnInit, &Init_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundFire.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_GroundFire::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundFire.PrepareExplosionTemplate" );

	AKFProj_GroundFire_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundFire.PrepareExplosionActor
// [0x00080102] 
// Parameters infos:

void AKFProj_GroundFire::PrepareExplosionActor ( )
{
	static UFunction* pFnPrepareExplosionActor = NULL;

	if ( ! pFnPrepareExplosionActor )
		pFnPrepareExplosionActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundFire.PrepareExplosionActor" );

	AKFProj_GroundFire_execPrepareExplosionActor_Parms PrepareExplosionActor_Parms;

	this->ProcessEvent ( pFnPrepareExplosionActor, &PrepareExplosionActor_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundFire.Touch
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AKFProj_GroundFire::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundFire.Touch" );

	AKFProj_GroundFire_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundFire.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_GroundFire::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundFire.PostBeginPlay" );

	AKFProj_GroundFire_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundFire.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_GroundFire::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundFire.ReplicatedEvent" );

	AKFProj_GroundFire_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundFire.WarnAI
// [0x00820002] 
// Parameters infos:

void AKFProj_GroundFire::WarnAI ( )
{
	static UFunction* pFnWarnAI = NULL;

	if ( ! pFnWarnAI )
		pFnWarnAI = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundFire.WarnAI" );

	AKFProj_GroundFire_execWarnAI_Parms WarnAI_Parms;

	this->ProcessEvent ( pFnWarnAI, &WarnAI_Parms, NULL );
};

// Function kfgamecontent.KFProj_DynamiteGrenade.SetExplosionActorClass
// [0x00080102] 
// Parameters infos:

void AKFProj_DynamiteGrenade::SetExplosionActorClass ( )
{
	static UFunction* pFnSetExplosionActorClass = NULL;

	if ( ! pFnSetExplosionActorClass )
		pFnSetExplosionActorClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_DynamiteGrenade.SetExplosionActorClass" );

	AKFProj_DynamiteGrenade_execSetExplosionActorClass_Parms SetExplosionActorClass_Parms;

	this->ProcessEvent ( pFnSetExplosionActorClass, &SetExplosionActorClass_Parms, NULL );
};

// Function kfgamecontent.KFProj_DynamiteGrenade.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_DynamiteGrenade::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_DynamiteGrenade.PrepareExplosionTemplate" );

	AKFProj_DynamiteGrenade_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_DynamiteGrenade.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_DynamiteGrenade::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_DynamiteGrenade.ProcessTouch" );

	AKFProj_DynamiteGrenade_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_DynamiteGrenade.TriggerExplosion
// [0x00020102] 
// Parameters infos:

void AKFProj_DynamiteGrenade::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_DynamiteGrenade.TriggerExplosion" );

	AKFProj_DynamiteGrenade_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFProj_DynamiteGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_DynamiteGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_DynamiteGrenade.PostBeginPlay" );

	AKFProj_DynamiteGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_EMPGrenade.GrenadeIsAtRest
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_EMPGrenade::eventGrenadeIsAtRest ( )
{
	static UFunction* pFnGrenadeIsAtRest = NULL;

	if ( ! pFnGrenadeIsAtRest )
		pFnGrenadeIsAtRest = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_EMPGrenade.GrenadeIsAtRest" );

	AKFProj_EMPGrenade_eventGrenadeIsAtRest_Parms GrenadeIsAtRest_Parms;

	this->ProcessEvent ( pFnGrenadeIsAtRest, &GrenadeIsAtRest_Parms, NULL );
};

// Function kfgamecontent.KFProj_EMPGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_EMPGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_EMPGrenade.PostBeginPlay" );

	AKFProj_EMPGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_EMPGrenade_Mini.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_EMPGrenade_Mini::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_EMPGrenade_Mini.ProcessTouch" );

	AKFProj_EMPGrenade_Mini_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlareGun.StopSimulating
// [0x00880102] 
// Parameters infos:

void AKFProj_FlareGun::StopSimulating ( )
{
	static UFunction* pFnStopSimulating = NULL;

	if ( ! pFnStopSimulating )
		pFnStopSimulating = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlareGun.StopSimulating" );

	AKFProj_FlareGun_execStopSimulating_Parms StopSimulating_Parms;

	this->ProcessEvent ( pFnStopSimulating, &StopSimulating_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlareGun.TriggerExplosion
// [0x00020102] 
// Parameters infos:

void AKFProj_FlareGun::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlareGun.TriggerExplosion" );

	AKFProj_FlareGun_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlareGun.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_FlareGun::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlareGun.ProcessTouch" );

	AKFProj_FlareGun_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlareGun.StopFlightEffects
// [0x00080102] 
// Parameters infos:

void AKFProj_FlareGun::StopFlightEffects ( )
{
	static UFunction* pFnStopFlightEffects = NULL;

	if ( ! pFnStopFlightEffects )
		pFnStopFlightEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlareGun.StopFlightEffects" );

	AKFProj_FlareGun_execStopFlightEffects_Parms StopFlightEffects_Parms;

	this->ProcessEvent ( pFnStopFlightEffects, &StopFlightEffects_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlareGun.MidFlightFXTimer
// [0x00020102] 
// Parameters infos:

void AKFProj_FlareGun::MidFlightFXTimer ( )
{
	static UFunction* pFnMidFlightFXTimer = NULL;

	if ( ! pFnMidFlightFXTimer )
		pFnMidFlightFXTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlareGun.MidFlightFXTimer" );

	AKFProj_FlareGun_execMidFlightFXTimer_Parms MidFlightFXTimer_Parms;

	this->ProcessEvent ( pFnMidFlightFXTimer, &MidFlightFXTimer_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlareGun.SpawnFlightEffects
// [0x00020102] 
// Parameters infos:

void AKFProj_FlareGun::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlareGun.SpawnFlightEffects" );

	AKFProj_FlareGun_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlashBangGrenade.GrenadeIsAtRest
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_FlashBangGrenade::eventGrenadeIsAtRest ( )
{
	static UFunction* pFnGrenadeIsAtRest = NULL;

	if ( ! pFnGrenadeIsAtRest )
		pFnGrenadeIsAtRest = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlashBangGrenade.GrenadeIsAtRest" );

	AKFProj_FlashBangGrenade_eventGrenadeIsAtRest_Parms GrenadeIsAtRest_Parms;

	this->ProcessEvent ( pFnGrenadeIsAtRest, &GrenadeIsAtRest_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlashBangGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_FlashBangGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlashBangGrenade.PostBeginPlay" );

	AKFProj_FlashBangGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_FlashBangGrenade_Mini.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_FlashBangGrenade_Mini::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FlashBangGrenade_Mini.ProcessTouch" );

	AKFProj_FlashBangGrenade_Mini_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_FragGrenade_Mini.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_FragGrenade_Mini::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FragGrenade_Mini.ProcessTouch" );

	AKFProj_FragGrenade_Mini_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_FreezeGrenade.GrenadeIsAtRest
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_FreezeGrenade::eventGrenadeIsAtRest ( )
{
	static UFunction* pFnGrenadeIsAtRest = NULL;

	if ( ! pFnGrenadeIsAtRest )
		pFnGrenadeIsAtRest = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FreezeGrenade.GrenadeIsAtRest" );

	AKFProj_FreezeGrenade_eventGrenadeIsAtRest_Parms GrenadeIsAtRest_Parms;

	this->ProcessEvent ( pFnGrenadeIsAtRest, &GrenadeIsAtRest_Parms, NULL );
};

// Function kfgamecontent.KFProj_FreezeGrenade.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_FreezeGrenade::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FreezeGrenade.PostBeginPlay" );

	AKFProj_FreezeGrenade_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_FreezeGrenade_Mini.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_FreezeGrenade_Mini::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_FreezeGrenade_Mini.ProcessTouch" );

	AKFProj_FreezeGrenade_Mini_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundIce.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_GroundIce::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundIce.PrepareExplosionTemplate" );

	AKFProj_GroundIce_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundIce.PrepareExplosionActor
// [0x00080102] 
// Parameters infos:

void AKFProj_GroundIce::PrepareExplosionActor ( )
{
	static UFunction* pFnPrepareExplosionActor = NULL;

	if ( ! pFnPrepareExplosionActor )
		pFnPrepareExplosionActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundIce.PrepareExplosionActor" );

	AKFProj_GroundIce_execPrepareExplosionActor_Parms PrepareExplosionActor_Parms;

	this->ProcessEvent ( pFnPrepareExplosionActor, &PrepareExplosionActor_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundIce.Touch
// [0x00020900] ( FUNC_Event )
// Parameters infos:

void AKFProj_GroundIce::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundIce.Touch" );

	AKFProj_GroundIce_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundIce.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_GroundIce::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundIce.PostBeginPlay" );

	AKFProj_GroundIce_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundIce.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_GroundIce::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundIce.ReplicatedEvent" );

	AKFProj_GroundIce_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFProj_GroundIce.WarnAI
// [0x00820002] 
// Parameters infos:

void AKFProj_GroundIce::WarnAI ( )
{
	static UFunction* pFnWarnAI = NULL;

	if ( ! pFnWarnAI )
		pFnWarnAI = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GroundIce.WarnAI" );

	AKFProj_GroundIce_execWarnAI_Parms WarnAI_Parms;

	this->ProcessEvent ( pFnWarnAI, &WarnAI_Parms, NULL );
};

// Function kfgamecontent.KFProj_GrenadeShard.Tick
// [0x00020102] 
// Parameters infos:

void AKFProj_GrenadeShard::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GrenadeShard.Tick" );

	AKFProj_GrenadeShard_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFProj_GrenadeShard.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_GrenadeShard::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GrenadeShard.ProcessTouch" );

	AKFProj_GrenadeShard_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_GrenadeShard.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_GrenadeShard::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_GrenadeShard.HitWall" );

	AKFProj_GrenadeShard_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFProj_HealingDart.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_HealingDart::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HealingDart.HitWall" );

	AKFProj_HealingDart_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFProj_HealingDart.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProj_HealingDart::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HealingDart.Tick" );

	AKFProj_HealingDart_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFProj_HealingDart.InitializeSeek
// [0x00020102] 
// Parameters infos:

void AKFProj_HealingDart::InitializeSeek ( )
{
	static UFunction* pFnInitializeSeek = NULL;

	if ( ! pFnInitializeSeek )
		pFnInitializeSeek = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HealingDart.InitializeSeek" );

	AKFProj_HealingDart_execInitializeSeek_Parms InitializeSeek_Parms;

	this->ProcessEvent ( pFnInitializeSeek, &InitializeSeek_Parms, NULL );
};

// Function kfgamecontent.KFProj_HEGrenade_Mini.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_HEGrenade_Mini::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HEGrenade_Mini.ProcessTouch" );

	AKFProj_HEGrenade_Mini_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.SpawnFlightEffects
// [0x00020102] 
// Parameters infos:

void AKFProj_HuskCannon_Fireball::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.SpawnFlightEffects" );

	AKFProj_HuskCannon_Fireball_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.GetIncapMod
// [0x00020002] 
// Parameters infos:

void AKFProj_HuskCannon_Fireball::GetIncapMod ( )
{
	static UFunction* pFnGetIncapMod = NULL;

	if ( ! pFnGetIncapMod )
		pFnGetIncapMod = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.GetIncapMod" );

	AKFProj_HuskCannon_Fireball_execGetIncapMod_Parms GetIncapMod_Parms;

	this->ProcessEvent ( pFnGetIncapMod, &GetIncapMod_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.SetExplosionActorClass
// [0x00080102] 
// Parameters infos:

void AKFProj_HuskCannon_Fireball::SetExplosionActorClass ( )
{
	static UFunction* pFnSetExplosionActorClass = NULL;

	if ( ! pFnSetExplosionActorClass )
		pFnSetExplosionActorClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.SetExplosionActorClass" );

	AKFProj_HuskCannon_Fireball_execSetExplosionActorClass_Parms SetExplosionActorClass_Parms;

	this->ProcessEvent ( pFnSetExplosionActorClass, &SetExplosionActorClass_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_HuskCannon_Fireball::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.PrepareExplosionTemplate" );

	AKFProj_HuskCannon_Fireball_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_HuskCannon_Fireball::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.ProcessTouch" );

	AKFProj_HuskCannon_Fireball_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.TriggerExplosion
// [0x00820102] 
// Parameters infos:

void AKFProj_HuskCannon_Fireball::TriggerExplosion ( )
{
	static UFunction* pFnTriggerExplosion = NULL;

	if ( ! pFnTriggerExplosion )
		pFnTriggerExplosion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.TriggerExplosion" );

	AKFProj_HuskCannon_Fireball_execTriggerExplosion_Parms TriggerExplosion_Parms;

	this->ProcessEvent ( pFnTriggerExplosion, &TriggerExplosion_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.PrepareExplosionActor
// [0x00080102] 
// Parameters infos:

void AKFProj_HuskCannon_Fireball::PrepareExplosionActor ( )
{
	static UFunction* pFnPrepareExplosionActor = NULL;

	if ( ! pFnPrepareExplosionActor )
		pFnPrepareExplosionActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.PrepareExplosionActor" );

	AKFProj_HuskCannon_Fireball_execPrepareExplosionActor_Parms PrepareExplosionActor_Parms;

	this->ProcessEvent ( pFnPrepareExplosionActor, &PrepareExplosionActor_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_HuskCannon_Fireball::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.PostBeginPlay" );

	AKFProj_HuskCannon_Fireball_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_HuskCannon_Fireball.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_HuskCannon_Fireball::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_HuskCannon_Fireball.ReplicatedEvent" );

	AKFProj_HuskCannon_Fireball_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.AdjustDamage
// [0x00420002] 
// Parameters infos:

void AKFWeap_HuskCannon::AdjustDamage ( )
{
	static UFunction* pFnAdjustDamage = NULL;

	if ( ! pFnAdjustDamage )
		pFnAdjustDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.AdjustDamage" );

	AKFWeap_HuskCannon_execAdjustDamage_Parms AdjustDamage_Parms;

	this->ProcessEvent ( pFnAdjustDamage, &AdjustDamage_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.GetChargeFXLevel
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::GetChargeFXLevel ( )
{
	static UFunction* pFnGetChargeFXLevel = NULL;

	if ( ! pFnGetChargeFXLevel )
		pFnGetChargeFXLevel = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.GetChargeFXLevel" );

	AKFWeap_HuskCannon_execGetChargeFXLevel_Parms GetChargeFXLevel_Parms;

	this->ProcessEvent ( pFnGetChargeFXLevel, &GetChargeFXLevel_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.GetChargeLevel
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::GetChargeLevel ( )
{
	static UFunction* pFnGetChargeLevel = NULL;

	if ( ! pFnGetChargeLevel )
		pFnGetChargeLevel = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.GetChargeLevel" );

	AKFWeap_HuskCannon_execGetChargeLevel_Parms GetChargeLevel_Parms;

	this->ProcessEvent ( pFnGetChargeLevel, &GetChargeLevel_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.CauseMuzzleFlash" );

	AKFWeap_HuskCannon_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.SpawnProjectile
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.SpawnProjectile" );

	AKFWeap_HuskCannon_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.Timer_StopFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::Timer_StopFireEffects ( )
{
	static UFunction* pFnTimer_StopFireEffects = NULL;

	if ( ! pFnTimer_StopFireEffects )
		pFnTimer_StopFireEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.Timer_StopFireEffects" );

	AKFWeap_HuskCannon_execTimer_StopFireEffects_Parms Timer_StopFireEffects_Parms;

	this->ProcessEvent ( pFnTimer_StopFireEffects, &Timer_StopFireEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.FireAmmunition
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::FireAmmunition ( )
{
	static UFunction* pFnFireAmmunition = NULL;

	if ( ! pFnFireAmmunition )
		pFnFireAmmunition = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.FireAmmunition" );

	AKFWeap_HuskCannon_execFireAmmunition_Parms FireAmmunition_Parms;

	this->ProcessEvent ( pFnFireAmmunition, &FireAmmunition_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.OnStartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::OnStartFire ( )
{
	static UFunction* pFnOnStartFire = NULL;

	if ( ! pFnOnStartFire )
		pFnOnStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.OnStartFire" );

	AKFWeap_HuskCannon_execOnStartFire_Parms OnStartFire_Parms;

	this->ProcessEvent ( pFnOnStartFire, &OnStartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.StartFire" );

	AKFWeap_HuskCannon_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.ConsumeAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_HuskCannon::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.ConsumeAmmo" );

	AKFWeap_HuskCannon_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_HuskCannon::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.CalculateTraderWeaponStatDamage" );

	AKFWeap_HuskCannon_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function kfgamecontent.KFWeap_HuskCannon.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_HuskCannon::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_HuskCannon.GetTraderFilter" );

	AKFWeap_HuskCannon_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFProj_MedicGrenade_Mini.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_MedicGrenade_Mini::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MedicGrenade_Mini.ProcessTouch" );

	AKFProj_MedicGrenade_Mini_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_MedicGrenade_Mini.Bounce
// [0x00020102] 
// Parameters infos:

void AKFProj_MedicGrenade_Mini::Bounce ( )
{
	static UFunction* pFnBounce = NULL;

	if ( ! pFnBounce )
		pFnBounce = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MedicGrenade_Mini.Bounce" );

	AKFProj_MedicGrenade_Mini_execBounce_Parms Bounce_Parms;

	this->ProcessEvent ( pFnBounce, &Bounce_Parms, NULL );
};

// Function kfgamecontent.KFProj_MedicGrenade_Mini.HitWall
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProj_MedicGrenade_Mini::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MedicGrenade_Mini.HitWall" );

	AKFProj_MedicGrenade_Mini_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFProj_MicrowaveImpact.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_MicrowaveImpact::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MicrowaveImpact.PrepareExplosionTemplate" );

	AKFProj_MicrowaveImpact_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_MicrowaveImpact.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_MicrowaveImpact::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MicrowaveImpact.Touch" );

	AKFProj_MicrowaveImpact_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFProj_MicrowaveImpact.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_MicrowaveImpact::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MicrowaveImpact.PostBeginPlay" );

	AKFProj_MicrowaveImpact_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovFlare.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_MolotovFlare::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovFlare.Tick" );

	AKFProj_MolotovFlare_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovFlare.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_MolotovFlare::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovFlare.PostBeginPlay" );

	AKFProj_MolotovFlare_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovGrenade.SpawnResidualFlames
// [0x00820002] 
// Parameters infos:

void AKFProj_MolotovGrenade::SpawnResidualFlames ( )
{
	static UFunction* pFnSpawnResidualFlames = NULL;

	if ( ! pFnSpawnResidualFlames )
		pFnSpawnResidualFlames = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovGrenade.SpawnResidualFlames" );

	AKFProj_MolotovGrenade_execSpawnResidualFlames_Parms SpawnResidualFlames_Parms;

	this->ProcessEvent ( pFnSpawnResidualFlames, &SpawnResidualFlames_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovGrenade.Explode
// [0x00820102] 
// Parameters infos:

void AKFProj_MolotovGrenade::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovGrenade.Explode" );

	AKFProj_MolotovGrenade_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovGrenade.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_MolotovGrenade::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovGrenade.ProcessTouch" );

	AKFProj_MolotovGrenade_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovGrenade.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_MolotovGrenade::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovGrenade.HitWall" );

	AKFProj_MolotovGrenade_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovGrenade.SpawnFlightEffects
// [0x00020102] 
// Parameters infos:

void AKFProj_MolotovGrenade::SpawnFlightEffects ( )
{
	static UFunction* pFnSpawnFlightEffects = NULL;

	if ( ! pFnSpawnFlightEffects )
		pFnSpawnFlightEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovGrenade.SpawnFlightEffects" );

	AKFProj_MolotovGrenade_execSpawnFlightEffects_Parms SpawnFlightEffects_Parms;

	this->ProcessEvent ( pFnSpawnFlightEffects, &SpawnFlightEffects_Parms, NULL );
};

// Function kfgamecontent.KFProj_MolotovGrenade_Mini.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_MolotovGrenade_Mini::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_MolotovGrenade_Mini.HitWall" );

	AKFProj_MolotovGrenade_Mini_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFProj_NailBombGrenade_Mini.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_NailBombGrenade_Mini::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_NailBombGrenade_Mini.ProcessTouch" );

	AKFProj_NailBombGrenade_Mini_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_Rocket_Seeker6.Tick
// [0x00820902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Rocket_Seeker6::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Rocket_Seeker6.Tick" );

	AKFProj_Rocket_Seeker6_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFProj_Rocket_Seeker6.SetLockedTarget
// [0x00020002] 
// Parameters infos:

void AKFProj_Rocket_Seeker6::SetLockedTarget ( )
{
	static UFunction* pFnSetLockedTarget = NULL;

	if ( ! pFnSetLockedTarget )
		pFnSetLockedTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Rocket_Seeker6.SetLockedTarget" );

	AKFProj_Rocket_Seeker6_execSetLockedTarget_Parms SetLockedTarget_Parms;

	this->ProcessEvent ( pFnSetLockedTarget, &SetLockedTarget_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.DrawTargetingIcon
// [0x00820102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::DrawTargetingIcon ( )
{
	static UFunction* pFnDrawTargetingIcon = NULL;

	if ( ! pFnDrawTargetingIcon )
		pFnDrawTargetingIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.DrawTargetingIcon" );

	AKFWeap_RocketLauncher_Seeker6_execDrawTargetingIcon_Parms DrawTargetingIcon_Parms;

	this->ProcessEvent ( pFnDrawTargetingIcon, &DrawTargetingIcon_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.DrawHUD
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::DrawHUD ( )
{
	static UFunction* pFnDrawHUD = NULL;

	if ( ! pFnDrawHUD )
		pFnDrawHUD = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.DrawHUD" );

	AKFWeap_RocketLauncher_Seeker6_execDrawHUD_Parms DrawHUD_Parms;

	this->ProcessEvent ( pFnDrawHUD, &DrawHUD_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.SpawnProjectile
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.SpawnProjectile" );

	AKFWeap_RocketLauncher_Seeker6_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.PlayTargetLostEffects
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::PlayTargetLostEffects ( )
{
	static UFunction* pFnPlayTargetLostEffects = NULL;

	if ( ! pFnPlayTargetLostEffects )
		pFnPlayTargetLostEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.PlayTargetLostEffects" );

	AKFWeap_RocketLauncher_Seeker6_execPlayTargetLostEffects_Parms PlayTargetLostEffects_Parms;

	this->ProcessEvent ( pFnPlayTargetLostEffects, &PlayTargetLostEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.PlayTargetLockOnEffects
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::PlayTargetLockOnEffects ( )
{
	static UFunction* pFnPlayTargetLockOnEffects = NULL;

	if ( ! pFnPlayTargetLockOnEffects )
		pFnPlayTargetLockOnEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.PlayTargetLockOnEffects" );

	AKFWeap_RocketLauncher_Seeker6_execPlayTargetLockOnEffects_Parms PlayTargetLockOnEffects_Parms;

	this->ProcessEvent ( pFnPlayTargetLockOnEffects, &PlayTargetLockOnEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.ZoomOut
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::ZoomOut ( )
{
	static UFunction* pFnZoomOut = NULL;

	if ( ! pFnZoomOut )
		pFnZoomOut = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.ZoomOut" );

	AKFWeap_RocketLauncher_Seeker6_execZoomOut_Parms ZoomOut_Parms;

	this->ProcessEvent ( pFnZoomOut, &ZoomOut_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.ZoomIn
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::ZoomIn ( )
{
	static UFunction* pFnZoomIn = NULL;

	if ( ! pFnZoomIn )
		pFnZoomIn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.ZoomIn" );

	AKFWeap_RocketLauncher_Seeker6_execZoomIn_Parms ZoomIn_Parms;

	this->ProcessEvent ( pFnZoomIn, &ZoomIn_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.GetLockedTargetLoc
// [0x00022102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::GetLockedTargetLoc ( )
{
	static UFunction* pFnGetLockedTargetLoc = NULL;

	if ( ! pFnGetLockedTargetLoc )
		pFnGetLockedTargetLoc = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.GetLockedTargetLoc" );

	AKFWeap_RocketLauncher_Seeker6_execGetLockedTargetLoc_Parms GetLockedTargetLoc_Parms;

	this->ProcessEvent ( pFnGetLockedTargetLoc, &GetLockedTargetLoc_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.ServerSyncLockedTargets
// [0x002200C2] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::ServerSyncLockedTargets ( )
{
	static UFunction* pFnServerSyncLockedTargets = NULL;

	if ( ! pFnServerSyncLockedTargets )
		pFnServerSyncLockedTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.ServerSyncLockedTargets" );

	AKFWeap_RocketLauncher_Seeker6_execServerSyncLockedTargets_Parms ServerSyncLockedTargets_Parms;

	this->ProcessEvent ( pFnServerSyncLockedTargets, &ServerSyncLockedTargets_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.ValidateTargets
// [0x00824102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::ValidateTargets ( )
{
	static UFunction* pFnValidateTargets = NULL;

	if ( ! pFnValidateTargets )
		pFnValidateTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.ValidateTargets" );

	AKFWeap_RocketLauncher_Seeker6_execValidateTargets_Parms ValidateTargets_Parms;

	this->ProcessEvent ( pFnValidateTargets, &ValidateTargets_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.FindTargets
// [0x00C20102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::FindTargets ( )
{
	static UFunction* pFnFindTargets = NULL;

	if ( ! pFnFindTargets )
		pFnFindTargets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.FindTargets" );

	AKFWeap_RocketLauncher_Seeker6_execFindTargets_Parms FindTargets_Parms;

	this->ProcessEvent ( pFnFindTargets, &FindTargets_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.CanLockOnTo
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::CanLockOnTo ( )
{
	static UFunction* pFnCanLockOnTo = NULL;

	if ( ! pFnCanLockOnTo )
		pFnCanLockOnTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.CanLockOnTo" );

	AKFWeap_RocketLauncher_Seeker6_execCanLockOnTo_Parms CanLockOnTo_Parms;

	this->ProcessEvent ( pFnCanLockOnTo, &CanLockOnTo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.Tick" );

	AKFWeap_RocketLauncher_Seeker6_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_Seeker6::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_Seeker6.AltFireMode" );

	AKFWeap_RocketLauncher_Seeker6_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.SetWeaponSkin
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::SetWeaponSkin ( )
{
	static UFunction* pFnSetWeaponSkin = NULL;

	if ( ! pFnSetWeaponSkin )
		pFnSetWeaponSkin = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.SetWeaponSkin" );

	AKFProj_Thrown_C4_execSetWeaponSkin_Parms SetWeaponSkin_Parms;

	this->ProcessEvent ( pFnSetWeaponSkin, &SetWeaponSkin_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.OnInstigatorControllerLeft
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::OnInstigatorControllerLeft ( )
{
	static UFunction* pFnOnInstigatorControllerLeft = NULL;

	if ( ! pFnOnInstigatorControllerLeft )
		pFnOnInstigatorControllerLeft = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.OnInstigatorControllerLeft" );

	AKFProj_Thrown_C4_execOnInstigatorControllerLeft_Parms OnInstigatorControllerLeft_Parms;

	this->ProcessEvent ( pFnOnInstigatorControllerLeft, &OnInstigatorControllerLeft_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Thrown_C4::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.Destroyed" );

	AKFProj_Thrown_C4_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.Timer_Explode
// [0x00020002] 
// Parameters infos:

void AKFProj_Thrown_C4::Timer_Explode ( )
{
	static UFunction* pFnTimer_Explode = NULL;

	if ( ! pFnTimer_Explode )
		pFnTimer_Explode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.Timer_Explode" );

	AKFProj_Thrown_C4_execTimer_Explode_Parms Timer_Explode_Parms;

	this->ProcessEvent ( pFnTimer_Explode, &Timer_Explode_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.SetExplosionActorClass
// [0x00080102] 
// Parameters infos:

void AKFProj_Thrown_C4::SetExplosionActorClass ( )
{
	static UFunction* pFnSetExplosionActorClass = NULL;

	if ( ! pFnSetExplosionActorClass )
		pFnSetExplosionActorClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.SetExplosionActorClass" );

	AKFProj_Thrown_C4_execSetExplosionActorClass_Parms SetExplosionActorClass_Parms;

	this->ProcessEvent ( pFnSetExplosionActorClass, &SetExplosionActorClass_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFProj_Thrown_C4::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.PrepareExplosionTemplate" );

	AKFProj_Thrown_C4_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.Disintegrate
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::Disintegrate ( )
{
	static UFunction* pFnDisintegrate = NULL;

	if ( ! pFnDisintegrate )
		pFnDisintegrate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.Disintegrate" );

	AKFProj_Thrown_C4_execDisintegrate_Parms Disintegrate_Parms;

	this->ProcessEvent ( pFnDisintegrate, &Disintegrate_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.Explode
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::Explode ( )
{
	static UFunction* pFnExplode = NULL;

	if ( ! pFnExplode )
		pFnExplode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.Explode" );

	AKFProj_Thrown_C4_execExplode_Parms Explode_Parms;

	this->ProcessEvent ( pFnExplode, &Explode_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.Detonate
// [0x00820002] 
// Parameters infos:

void AKFProj_Thrown_C4::Detonate ( )
{
	static UFunction* pFnDetonate = NULL;

	if ( ! pFnDetonate )
		pFnDetonate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.Detonate" );

	AKFProj_Thrown_C4_execDetonate_Parms Detonate_Parms;

	this->ProcessEvent ( pFnDetonate, &Detonate_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.RestartMovement
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::RestartMovement ( )
{
	static UFunction* pFnRestartMovement = NULL;

	if ( ! pFnRestartMovement )
		pFnRestartMovement = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.RestartMovement" );

	AKFProj_Thrown_C4_execRestartMovement_Parms RestartMovement_Parms;

	this->ProcessEvent ( pFnRestartMovement, &RestartMovement_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.StopMovement
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::StopMovement ( )
{
	static UFunction* pFnStopMovement = NULL;

	if ( ! pFnStopMovement )
		pFnStopMovement = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.StopMovement" );

	AKFProj_Thrown_C4_execStopMovement_Parms StopMovement_Parms;

	this->ProcessEvent ( pFnStopMovement, &StopMovement_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.GetBoneLocationFromActor
// [0x00420102] 
// Parameters infos:

void AKFProj_Thrown_C4::GetBoneLocationFromActor ( )
{
	static UFunction* pFnGetBoneLocationFromActor = NULL;

	if ( ! pFnGetBoneLocationFromActor )
		pFnGetBoneLocationFromActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.GetBoneLocationFromActor" );

	AKFProj_Thrown_C4_execGetBoneLocationFromActor_Parms GetBoneLocationFromActor_Parms;

	this->ProcessEvent ( pFnGetBoneLocationFromActor, &GetBoneLocationFromActor_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.GetBoneIndexFromActor
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::GetBoneIndexFromActor ( )
{
	static UFunction* pFnGetBoneIndexFromActor = NULL;

	if ( ! pFnGetBoneIndexFromActor )
		pFnGetBoneIndexFromActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.GetBoneIndexFromActor" );

	AKFProj_Thrown_C4_execGetBoneIndexFromActor_Parms GetBoneIndexFromActor_Parms;

	this->ProcessEvent ( pFnGetBoneIndexFromActor, &GetBoneIndexFromActor_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.ReplicatedStick
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::ReplicatedStick ( )
{
	static UFunction* pFnReplicatedStick = NULL;

	if ( ! pFnReplicatedStick )
		pFnReplicatedStick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.ReplicatedStick" );

	AKFProj_Thrown_C4_execReplicatedStick_Parms ReplicatedStick_Parms;

	this->ProcessEvent ( pFnReplicatedStick, &ReplicatedStick_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.ServerStick
// [0x002200C2] 
// Parameters infos:

void AKFProj_Thrown_C4::ServerStick ( )
{
	static UFunction* pFnServerStick = NULL;

	if ( ! pFnServerStick )
		pFnServerStick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.ServerStick" );

	AKFProj_Thrown_C4_execServerStick_Parms ServerStick_Parms;

	this->ProcessEvent ( pFnServerStick, &ServerStick_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.GetActorSkeletalMesh
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::GetActorSkeletalMesh ( )
{
	static UFunction* pFnGetActorSkeletalMesh = NULL;

	if ( ! pFnGetActorSkeletalMesh )
		pFnGetActorSkeletalMesh = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.GetActorSkeletalMesh" );

	AKFProj_Thrown_C4_execGetActorSkeletalMesh_Parms GetActorSkeletalMesh_Parms;

	this->ProcessEvent ( pFnGetActorSkeletalMesh, &GetActorSkeletalMesh_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.StickToActor
// [0x00024102] 
// Parameters infos:

void AKFProj_Thrown_C4::StickToActor ( )
{
	static UFunction* pFnStickToActor = NULL;

	if ( ! pFnStickToActor )
		pFnStickToActor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.StickToActor" );

	AKFProj_Thrown_C4_execStickToActor_Parms StickToActor_Parms;

	this->ProcessEvent ( pFnStickToActor, &StickToActor_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.GetImpactInfo
// [0x00C20102] 
// Parameters infos:

void AKFProj_Thrown_C4::GetImpactInfo ( )
{
	static UFunction* pFnGetImpactInfo = NULL;

	if ( ! pFnGetImpactInfo )
		pFnGetImpactInfo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.GetImpactInfo" );

	AKFProj_Thrown_C4_execGetImpactInfo_Parms GetImpactInfo_Parms;

	this->ProcessEvent ( pFnGetImpactInfo, &GetImpactInfo_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.Stick
// [0x00C20102] 
// Parameters infos:

void AKFProj_Thrown_C4::Stick ( )
{
	static UFunction* pFnStick = NULL;

	if ( ! pFnStick )
		pFnStick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.Stick" );

	AKFProj_Thrown_C4_execStick_Parms Stick_Parms;

	this->ProcessEvent ( pFnStick, &Stick_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.GetImpactResult
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::GetImpactResult ( )
{
	static UFunction* pFnGetImpactResult = NULL;

	if ( ! pFnGetImpactResult )
		pFnGetImpactResult = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.GetImpactResult" );

	AKFProj_Thrown_C4_execGetImpactResult_Parms GetImpactResult_Parms;

	this->ProcessEvent ( pFnGetImpactResult, &GetImpactResult_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.TryStick
// [0x00824102] 
// Parameters infos:

void AKFProj_Thrown_C4::TryStick ( )
{
	static UFunction* pFnTryStick = NULL;

	if ( ! pFnTryStick )
		pFnTryStick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.TryStick" );

	AKFProj_Thrown_C4_execTryStick_Parms TryStick_Parms;

	this->ProcessEvent ( pFnTryStick, &TryStick_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.HitWall
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Thrown_C4::eventHitWall ( )
{
	static UFunction* pFnHitWall = NULL;

	if ( ! pFnHitWall )
		pFnHitWall = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.HitWall" );

	AKFProj_Thrown_C4_eventHitWall_Parms HitWall_Parms;

	this->ProcessEvent ( pFnHitWall, &HitWall_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.ProcessTouch
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::ProcessTouch ( )
{
	static UFunction* pFnProcessTouch = NULL;

	if ( ! pFnProcessTouch )
		pFnProcessTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.ProcessTouch" );

	AKFProj_Thrown_C4_execProcessTouch_Parms ProcessTouch_Parms;

	this->ProcessEvent ( pFnProcessTouch, &ProcessTouch_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.BlinkOff
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::BlinkOff ( )
{
	static UFunction* pFnBlinkOff = NULL;

	if ( ! pFnBlinkOff )
		pFnBlinkOff = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.BlinkOff" );

	AKFProj_Thrown_C4_execBlinkOff_Parms BlinkOff_Parms;

	this->ProcessEvent ( pFnBlinkOff, &BlinkOff_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.BlinkOn
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::BlinkOn ( )
{
	static UFunction* pFnBlinkOn = NULL;

	if ( ! pFnBlinkOn )
		pFnBlinkOn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.BlinkOn" );

	AKFProj_Thrown_C4_execBlinkOn_Parms BlinkOn_Parms;

	this->ProcessEvent ( pFnBlinkOn, &BlinkOn_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.UpdateAlert
// [0x00820102] 
// Parameters infos:

void AKFProj_Thrown_C4::UpdateAlert ( )
{
	static UFunction* pFnUpdateAlert = NULL;

	if ( ! pFnUpdateAlert )
		pFnUpdateAlert = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.UpdateAlert" );

	AKFProj_Thrown_C4_execUpdateAlert_Parms UpdateAlert_Parms;

	this->ProcessEvent ( pFnUpdateAlert, &UpdateAlert_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Thrown_C4::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.Tick" );

	AKFProj_Thrown_C4_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFProj_Thrown_C4::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.PostBeginPlay" );

	AKFProj_Thrown_C4_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFProj_Thrown_C4.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFProj_Thrown_C4::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFProj_Thrown_C4.ReplicatedEvent" );

	AKFProj_Thrown_C4_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Thrown_C4::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.GetTraderFilter" );

	AKFWeap_Thrown_C4_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.GotoActiveState
// [0x00020100] 
// Parameters infos:

void AKFWeap_Thrown_C4::GotoActiveState ( )
{
	static UFunction* pFnGotoActiveState = NULL;

	if ( ! pFnGotoActiveState )
		pFnGotoActiveState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.GotoActiveState" );

	AKFWeap_Thrown_C4_execGotoActiveState_Parms GotoActiveState_Parms;

	this->ProcessEvent ( pFnGotoActiveState, &GotoActiveState_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.HasAlwaysOnZedTimeResist
// [0x00020102] 
// Parameters infos:

void AKFWeap_Thrown_C4::HasAlwaysOnZedTimeResist ( )
{
	static UFunction* pFnHasAlwaysOnZedTimeResist = NULL;

	if ( ! pFnHasAlwaysOnZedTimeResist )
		pFnHasAlwaysOnZedTimeResist = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.HasAlwaysOnZedTimeResist" );

	AKFWeap_Thrown_C4_execHasAlwaysOnZedTimeResist_Parms HasAlwaysOnZedTimeResist_Parms;

	this->ProcessEvent ( pFnHasAlwaysOnZedTimeResist, &HasAlwaysOnZedTimeResist_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.AltFireMode
// [0x00020100] 
// Parameters infos:

void AKFWeap_Thrown_C4::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.AltFireMode" );

	AKFWeap_Thrown_C4_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.PrepareAndDetonate
// [0x00020102] 
// Parameters infos:

void AKFWeap_Thrown_C4::PrepareAndDetonate ( )
{
	static UFunction* pFnPrepareAndDetonate = NULL;

	if ( ! pFnPrepareAndDetonate )
		pFnPrepareAndDetonate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.PrepareAndDetonate" );

	AKFWeap_Thrown_C4_execPrepareAndDetonate_Parms PrepareAndDetonate_Parms;

	this->ProcessEvent ( pFnPrepareAndDetonate, &PrepareAndDetonate_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.BeginFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Thrown_C4::BeginFire ( )
{
	static UFunction* pFnBeginFire = NULL;

	if ( ! pFnBeginFire )
		pFnBeginFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.BeginFire" );

	AKFWeap_Thrown_C4_execBeginFire_Parms BeginFire_Parms;

	this->ProcessEvent ( pFnBeginFire, &BeginFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.HasAmmo
// [0x00024102] 
// Parameters infos:

void AKFWeap_Thrown_C4::HasAmmo ( )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.HasAmmo" );

	AKFWeap_Thrown_C4_execHasAmmo_Parms HasAmmo_Parms;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.UsesAmmo
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Thrown_C4::eventUsesAmmo ( )
{
	static UFunction* pFnUsesAmmo = NULL;

	if ( ! pFnUsesAmmo )
		pFnUsesAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.UsesAmmo" );

	AKFWeap_Thrown_C4_eventUsesAmmo_Parms UsesAmmo_Parms;

	this->ProcessEvent ( pFnUsesAmmo, &UsesAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.SetOriginalValuesFromPickup
// [0x00020002] 
// Parameters infos:

void AKFWeap_Thrown_C4::SetOriginalValuesFromPickup ( )
{
	static UFunction* pFnSetOriginalValuesFromPickup = NULL;

	if ( ! pFnSetOriginalValuesFromPickup )
		pFnSetOriginalValuesFromPickup = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.SetOriginalValuesFromPickup" );

	AKFWeap_Thrown_C4_execSetOriginalValuesFromPickup_Parms SetOriginalValuesFromPickup_Parms;

	this->ProcessEvent ( pFnSetOriginalValuesFromPickup, &SetOriginalValuesFromPickup_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.RemoveDeployedCharge
// [0x00024002] 
// Parameters infos:

void AKFWeap_Thrown_C4::RemoveDeployedCharge ( )
{
	static UFunction* pFnRemoveDeployedCharge = NULL;

	if ( ! pFnRemoveDeployedCharge )
		pFnRemoveDeployedCharge = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.RemoveDeployedCharge" );

	AKFWeap_Thrown_C4_execRemoveDeployedCharge_Parms RemoveDeployedCharge_Parms;

	this->ProcessEvent ( pFnRemoveDeployedCharge, &RemoveDeployedCharge_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.Detonate
// [0x00020102] 
// Parameters infos:

void AKFWeap_Thrown_C4::Detonate ( )
{
	static UFunction* pFnDetonate = NULL;

	if ( ! pFnDetonate )
		pFnDetonate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.Detonate" );

	AKFWeap_Thrown_C4_execDetonate_Parms Detonate_Parms;

	this->ProcessEvent ( pFnDetonate, &Detonate_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.ProjectileFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Thrown_C4::ProjectileFire ( )
{
	static UFunction* pFnProjectileFire = NULL;

	if ( ! pFnProjectileFire )
		pFnProjectileFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.ProjectileFire" );

	AKFWeap_Thrown_C4_execProjectileFire_Parms ProjectileFire_Parms;

	this->ProcessEvent ( pFnProjectileFire, &ProjectileFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.UpdateScreenUI
// [0x00020102] 
// Parameters infos:

void AKFWeap_Thrown_C4::UpdateScreenUI ( )
{
	static UFunction* pFnUpdateScreenUI = NULL;

	if ( ! pFnUpdateScreenUI )
		pFnUpdateScreenUI = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.UpdateScreenUI" );

	AKFWeap_Thrown_C4_execUpdateScreenUI_Parms UpdateScreenUI_Parms;

	this->ProcessEvent ( pFnUpdateScreenUI, &UpdateScreenUI_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Thrown_C4::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.Tick" );

	AKFWeap_Thrown_C4_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Thrown_C4::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.Destroyed" );

	AKFWeap_Thrown_C4_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.DetachWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeap_Thrown_C4::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.DetachWeapon" );

	AKFWeap_Thrown_C4_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.AttachWeaponTo
// [0x00024102] 
// Parameters infos:

void AKFWeap_Thrown_C4::AttachWeaponTo ( )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.AttachWeaponTo" );

	AKFWeap_Thrown_C4_execAttachWeaponTo_Parms AttachWeaponTo_Parms;

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Thrown_C4.SetIronSights
// [0x00020102] 
// Parameters infos:

void AKFWeap_Thrown_C4::SetIronSights ( )
{
	static UFunction* pFnSetIronSights = NULL;

	if ( ! pFnSetIronSights )
		pFnSetIronSights = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Thrown_C4.SetIronSights" );

	AKFWeap_Thrown_C4_execSetIronSights_Parms SetIronSights_Parms;

	this->ProcessEvent ( pFnSetIronSights, &SetIronSights_Parms, NULL );
};

// Function kfgamecontent.KFSeqAct_BloodRain.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAct_BloodRain::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSeqAct_BloodRain.Activated" );

	UKFSeqAct_BloodRain_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFSeqAct_MinigameActivateGenerator.Activated
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void UKFSeqAct_MinigameActivateGenerator::eventActivated ( )
{
	static UFunction* pFnActivated = NULL;

	if ( ! pFnActivated )
		pFnActivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSeqAct_MinigameActivateGenerator.Activated" );

	UKFSeqAct_MinigameActivateGenerator_eventActivated_Parms Activated_Parms;

	this->ProcessEvent ( pFnActivated, &Activated_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.UpdateGeneratorState
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::UpdateGeneratorState ( )
{
	static UFunction* pFnUpdateGeneratorState = NULL;

	if ( ! pFnUpdateGeneratorState )
		pFnUpdateGeneratorState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.UpdateGeneratorState" );

	AKFTrigger_MinigameGenerator_execUpdateGeneratorState_Parms UpdateGeneratorState_Parms;

	this->ProcessEvent ( pFnUpdateGeneratorState, &UpdateGeneratorState_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.GeneratorReactivated
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::GeneratorReactivated ( )
{
	static UFunction* pFnGeneratorReactivated = NULL;

	if ( ! pFnGeneratorReactivated )
		pFnGeneratorReactivated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.GeneratorReactivated" );

	AKFTrigger_MinigameGenerator_execGeneratorReactivated_Parms GeneratorReactivated_Parms;

	this->ProcessEvent ( pFnGeneratorReactivated, &GeneratorReactivated_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.DeactivateMinigames
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::DeactivateMinigames ( )
{
	static UFunction* pFnDeactivateMinigames = NULL;

	if ( ! pFnDeactivateMinigames )
		pFnDeactivateMinigames = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.DeactivateMinigames" );

	AKFTrigger_MinigameGenerator_execDeactivateMinigames_Parms DeactivateMinigames_Parms;

	this->ProcessEvent ( pFnDeactivateMinigames, &DeactivateMinigames_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.ActivateMinigames
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::ActivateMinigames ( )
{
	static UFunction* pFnActivateMinigames = NULL;

	if ( ! pFnActivateMinigames )
		pFnActivateMinigames = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.ActivateMinigames" );

	AKFTrigger_MinigameGenerator_execActivateMinigames_Parms ActivateMinigames_Parms;

	this->ProcessEvent ( pFnActivateMinigames, &ActivateMinigames_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.AllowActivation
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::AllowActivation ( )
{
	static UFunction* pFnAllowActivation = NULL;

	if ( ! pFnAllowActivation )
		pFnAllowActivation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.AllowActivation" );

	AKFTrigger_MinigameGenerator_execAllowActivation_Parms AllowActivation_Parms;

	this->ProcessEvent ( pFnAllowActivation, &AllowActivation_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.TriggerObjectiveCompletion
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::TriggerObjectiveCompletion ( )
{
	static UFunction* pFnTriggerObjectiveCompletion = NULL;

	if ( ! pFnTriggerObjectiveCompletion )
		pFnTriggerObjectiveCompletion = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.TriggerObjectiveCompletion" );

	AKFTrigger_MinigameGenerator_execTriggerObjectiveCompletion_Parms TriggerObjectiveCompletion_Parms;

	this->ProcessEvent ( pFnTriggerObjectiveCompletion, &TriggerObjectiveCompletion_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.UsedBy
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::UsedBy ( )
{
	static UFunction* pFnUsedBy = NULL;

	if ( ! pFnUsedBy )
		pFnUsedBy = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.UsedBy" );

	AKFTrigger_MinigameGenerator_execUsedBy_Parms UsedBy_Parms;

	this->ProcessEvent ( pFnUsedBy, &UsedBy_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.PostBeginPlay
// [0x00020102] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::PostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.PostBeginPlay" );

	AKFTrigger_MinigameGenerator_execPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_MinigameGenerator::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.UnTouch" );

	AKFTrigger_MinigameGenerator_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_MinigameGenerator::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.Touch" );

	AKFTrigger_MinigameGenerator_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.GetInteractionIndex
// [0x00020102] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::GetInteractionIndex ( )
{
	static UFunction* pFnGetInteractionIndex = NULL;

	if ( ! pFnGetInteractionIndex )
		pFnGetInteractionIndex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.GetInteractionIndex" );

	AKFTrigger_MinigameGenerator_execGetInteractionIndex_Parms GetInteractionIndex_Parms;

	this->ProcessEvent ( pFnGetInteractionIndex, &GetInteractionIndex_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.GetIsUsable
// [0x00020102] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::GetIsUsable ( )
{
	static UFunction* pFnGetIsUsable = NULL;

	if ( ! pFnGetIsUsable )
		pFnGetIsUsable = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.GetIsUsable" );

	AKFTrigger_MinigameGenerator_execGetIsUsable_Parms GetIsUsable_Parms;

	this->ProcessEvent ( pFnGetIsUsable, &GetIsUsable_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.InitEmissiveActors
// [0x00820102] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::InitEmissiveActors ( )
{
	static UFunction* pFnInitEmissiveActors = NULL;

	if ( ! pFnInitEmissiveActors )
		pFnInitEmissiveActors = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.InitEmissiveActors" );

	AKFTrigger_MinigameGenerator_execInitEmissiveActors_Parms InitEmissiveActors_Parms;

	this->ProcessEvent ( pFnInitEmissiveActors, &InitEmissiveActors_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.DisableEmissiveActors
// [0x00820102] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::DisableEmissiveActors ( )
{
	static UFunction* pFnDisableEmissiveActors = NULL;

	if ( ! pFnDisableEmissiveActors )
		pFnDisableEmissiveActors = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.DisableEmissiveActors" );

	AKFTrigger_MinigameGenerator_execDisableEmissiveActors_Parms DisableEmissiveActors_Parms;

	this->ProcessEvent ( pFnDisableEmissiveActors, &DisableEmissiveActors_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.EnableNextEmissiveList
// [0x00820102] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::EnableNextEmissiveList ( )
{
	static UFunction* pFnEnableNextEmissiveList = NULL;

	if ( ! pFnEnableNextEmissiveList )
		pFnEnableNextEmissiveList = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.EnableNextEmissiveList" );

	AKFTrigger_MinigameGenerator_execEnableNextEmissiveList_Parms EnableNextEmissiveList_Parms;

	this->ProcessEvent ( pFnEnableNextEmissiveList, &EnableNextEmissiveList_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.EnableEmissiveActors
// [0x00020102] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::EnableEmissiveActors ( )
{
	static UFunction* pFnEnableEmissiveActors = NULL;

	if ( ! pFnEnableEmissiveActors )
		pFnEnableEmissiveActors = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.EnableEmissiveActors" );

	AKFTrigger_MinigameGenerator_execEnableEmissiveActors_Parms EnableEmissiveActors_Parms;

	this->ProcessEvent ( pFnEnableEmissiveActors, &EnableEmissiveActors_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.UpdateGeneratorStatus
// [0x00820102] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::UpdateGeneratorStatus ( )
{
	static UFunction* pFnUpdateGeneratorStatus = NULL;

	if ( ! pFnUpdateGeneratorStatus )
		pFnUpdateGeneratorStatus = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.UpdateGeneratorStatus" );

	AKFTrigger_MinigameGenerator_execUpdateGeneratorStatus_Parms UpdateGeneratorStatus_Parms;

	this->ProcessEvent ( pFnUpdateGeneratorStatus, &UpdateGeneratorStatus_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.Tick
// [0x00020002] 
// Parameters infos:

void AKFTrigger_MinigameGenerator::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.Tick" );

	AKFTrigger_MinigameGenerator_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_MinigameGenerator.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_MinigameGenerator::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_MinigameGenerator.ReplicatedEvent" );

	AKFTrigger_MinigameGenerator_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFSeqEvent_MinigameGeneratorStateChanged.StateChanged
// [0x00020002] 
// Parameters infos:

void UKFSeqEvent_MinigameGeneratorStateChanged::StateChanged ( )
{
	static UFunction* pFnStateChanged = NULL;

	if ( ! pFnStateChanged )
		pFnStateChanged = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSeqEvent_MinigameGeneratorStateChanged.StateChanged" );

	UKFSeqEvent_MinigameGeneratorStateChanged_execStateChanged_Parms StateChanged_Parms;

	this->ProcessEvent ( pFnStateChanged, &StateChanged_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKingSubspawn_Explode.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKingSubspawn_Explode::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKingSubspawn_Explode.SpecialMoveEnded" );

	UKFSM_BloatKingSubspawn_Explode_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKingSubspawn_Explode.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKingSubspawn_Explode::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKingSubspawn_Explode.SpecialMoveStarted" );

	UKFSM_BloatKingSubspawn_Explode_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_BloatKingSubspawn_Explode.Tick
// [0x00020002] 
// Parameters infos:

void UKFSM_BloatKingSubspawn_Explode::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_BloatKingSubspawn_Explode.Tick" );

	UKFSM_BloatKingSubspawn_Explode_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.SprayActor_Flame.SetSprayLength
// [0x00020102] 
// Parameters infos:

void ASprayActor_Flame::SetSprayLength ( )
{
	static UFunction* pFnSetSprayLength = NULL;

	if ( ! pFnSetSprayLength )
		pFnSetSprayLength = UObject::FindObject< UFunction > ( "Function kfgamecontent.SprayActor_Flame.SetSprayLength" );

	ASprayActor_Flame_execSetSprayLength_Parms SetSprayLength_Parms;

	this->ProcessEvent ( pFnSetSprayLength, &SetSprayLength_Parms, NULL );
};

// Function kfgamecontent.SprayActor_Flame.BeginSpray
// [0x00020102] 
// Parameters infos:

void ASprayActor_Flame::BeginSpray ( )
{
	static UFunction* pFnBeginSpray = NULL;

	if ( ! pFnBeginSpray )
		pFnBeginSpray = UObject::FindObject< UFunction > ( "Function kfgamecontent.SprayActor_Flame.BeginSpray" );

	ASprayActor_Flame_execBeginSpray_Parms BeginSpray_Parms;

	this->ProcessEvent ( pFnBeginSpray, &BeginSpray_Parms, NULL );
};

// Function kfgamecontent.SprayActor_Flame.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void ASprayActor_Flame::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.SprayActor_Flame.Tick" );

	ASprayActor_Flame_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.SprayActor_Flame.SetBoneChainComponents
// [0x00020102] 
// Parameters infos:

void ASprayActor_Flame::SetBoneChainComponents ( )
{
	static UFunction* pFnSetBoneChainComponents = NULL;

	if ( ! pFnSetBoneChainComponents )
		pFnSetBoneChainComponents = UObject::FindObject< UFunction > ( "Function kfgamecontent.SprayActor_Flame.SetBoneChainComponents" );

	ASprayActor_Flame_execSetBoneChainComponents_Parms SetBoneChainComponents_Parms;

	this->ProcessEvent ( pFnSetBoneChainComponents, &SetBoneChainComponents_Parms, NULL );
};

// Function kfgamecontent.SprayActor_Flame.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void ASprayActor_Flame::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.SprayActor_Flame.PreBeginPlay" );

	ASprayActor_Flame_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerAlpha_Grab.ProcessViewRotation
// [0x00420002] 
// Parameters infos:

void UKFSM_PlayerAlpha_Grab::ProcessViewRotation ( )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerAlpha_Grab.ProcessViewRotation" );

	UKFSM_PlayerAlpha_Grab_execProcessViewRotation_Parms ProcessViewRotation_Parms;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerAlpha_Grab.Tick
// [0x00820002] 
// Parameters infos:

void UKFSM_PlayerAlpha_Grab::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerAlpha_Grab.Tick" );

	UKFSM_PlayerAlpha_Grab_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerAlpha_Grab.StartInteraction
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerAlpha_Grab::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerAlpha_Grab.StartInteraction" );

	UKFSM_PlayerAlpha_Grab_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerAlpha_Rally.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_PlayerAlpha_Rally::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerAlpha_Rally.PackFlagsBase" );

	UKFSM_PlayerAlpha_Rally_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerAlpha_Rally.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerAlpha_Rally::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerAlpha_Rally.InternalCanDoSpecialMove" );

	UKFSM_PlayerAlpha_Rally_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerZedBlockBase.SpecialMoveButtonReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerZedBlockBase::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerZedBlockBase.SpecialMoveButtonReleased" );

	UKFSM_PlayerZedBlockBase_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerZedBlockBase.SpecialMoveButtonRetriggered
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerZedBlockBase::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerZedBlockBase.SpecialMoveButtonRetriggered" );

	UKFSM_PlayerZedBlockBase_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerZedBlockBase.Timer_CheckIfBlockReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerZedBlockBase::Timer_CheckIfBlockReleased ( )
{
	static UFunction* pFnTimer_CheckIfBlockReleased = NULL;

	if ( ! pFnTimer_CheckIfBlockReleased )
		pFnTimer_CheckIfBlockReleased = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerZedBlockBase.Timer_CheckIfBlockReleased" );

	UKFSM_PlayerZedBlockBase_execTimer_CheckIfBlockReleased_Parms Timer_CheckIfBlockReleased_Parms;

	this->ProcessEvent ( pFnTimer_CheckIfBlockReleased, &Timer_CheckIfBlockReleased_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerZedBlockBase.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerZedBlockBase::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerZedBlockBase.SpecialMoveEnded" );

	UKFSM_PlayerZedBlockBase_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerZedBlockBase.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerZedBlockBase::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerZedBlockBase.SpecialMoveStarted" );

	UKFSM_PlayerZedBlockBase_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerBloat_PukeMineAttack.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerBloat_PukeMineAttack::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerBloat_PukeMineAttack.InternalCanDoSpecialMove" );

	UKFSM_PlayerBloat_PukeMineAttack_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerFleshpound_Melee.IsInSpecialMode
// [0x00022002] 
// Parameters infos:

void UKFSM_PlayerFleshpound_Melee::IsInSpecialMode ( )
{
	static UFunction* pFnIsInSpecialMode = NULL;

	if ( ! pFnIsInSpecialMode )
		pFnIsInSpecialMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerFleshpound_Melee.IsInSpecialMode" );

	UKFSM_PlayerFleshpound_Melee_execIsInSpecialMode_Parms IsInSpecialMode_Parms;

	this->ProcessEvent ( pFnIsInSpecialMode, &IsInSpecialMode_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerFleshpound_Rage.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerFleshpound_Rage::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerFleshpound_Rage.SpecialMoveStarted" );

	UKFSM_PlayerFleshpound_Rage_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerFleshpound_Rage.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_PlayerFleshpound_Rage::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerFleshpound_Rage.PackFlagsBase" );

	UKFSM_PlayerFleshpound_Rage_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerFleshpound_Rage.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerFleshpound_Rage::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerFleshpound_Rage.InternalCanDoSpecialMove" );

	UKFSM_PlayerFleshpound_Rage_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.SpecialMoveButtonReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FlameThrowerAttack::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.SpecialMoveButtonReleased" );

	UKFSM_PlayerHusk_FlameThrowerAttack_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.SpecialMoveButtonRetriggered
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FlameThrowerAttack::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.SpecialMoveButtonRetriggered" );

	UKFSM_PlayerHusk_FlameThrowerAttack_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FlameThrowerAttack::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.SpecialMoveFlagsUpdated" );

	UKFSM_PlayerHusk_FlameThrowerAttack_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.Timer_AnimInterrupt
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FlameThrowerAttack::Timer_AnimInterrupt ( )
{
	static UFunction* pFnTimer_AnimInterrupt = NULL;

	if ( ! pFnTimer_AnimInterrupt )
		pFnTimer_AnimInterrupt = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.Timer_AnimInterrupt" );

	UKFSM_PlayerHusk_FlameThrowerAttack_execTimer_AnimInterrupt_Parms Timer_AnimInterrupt_Parms;

	this->ProcessEvent ( pFnTimer_AnimInterrupt, &Timer_AnimInterrupt_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_FlameThrowerAttack::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_FlameThrowerAttack.SpecialMoveStarted" );

	UKFSM_PlayerHusk_FlameThrowerAttack_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_Suicide.SpecialMoveButtonReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_Suicide::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_Suicide.SpecialMoveButtonReleased" );

	UKFSM_PlayerHusk_Suicide_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_Suicide.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerHusk_Suicide::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_Suicide.SpecialMoveFlagsUpdated" );

	UKFSM_PlayerHusk_Suicide_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerHusk_Suicide.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerHusk_Suicide::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerHusk_Suicide.InternalCanDoSpecialMove" );

	UKFSM_PlayerHusk_Suicide_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_Heal.OnEMPDisrupted
// [0x00020000] 
// Parameters infos:

void UKFSM_PlayerPatriarch_Heal::OnEMPDisrupted ( )
{
	static UFunction* pFnOnEMPDisrupted = NULL;

	if ( ! pFnOnEMPDisrupted )
		pFnOnEMPDisrupted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_Heal.OnEMPDisrupted" );

	UKFSM_PlayerPatriarch_Heal_execOnEMPDisrupted_Parms OnEMPDisrupted_Parms;

	this->ProcessEvent ( pFnOnEMPDisrupted, &OnEMPDisrupted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_Heal.DoHeal
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_Heal::DoHeal ( )
{
	static UFunction* pFnDoHeal = NULL;

	if ( ! pFnDoHeal )
		pFnDoHeal = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_Heal.DoHeal" );

	UKFSM_PlayerPatriarch_Heal_execDoHeal_Parms DoHeal_Parms;

	this->ProcessEvent ( pFnDoHeal, &DoHeal_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_Heal.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_Heal::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_Heal.SpecialMoveStarted" );

	UKFSM_PlayerPatriarch_Heal_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_Heal.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_Heal::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_Heal.InternalCanDoSpecialMove" );

	UKFSM_PlayerPatriarch_Heal_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveButtonReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MinigunBarrage::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveButtonReleased" );

	UKFSM_PlayerPatriarch_MinigunBarrage_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveButtonRetriggered
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MinigunBarrage::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveButtonRetriggered" );

	UKFSM_PlayerPatriarch_MinigunBarrage_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MinigunBarrage::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveFlagsUpdated" );

	UKFSM_PlayerPatriarch_MinigunBarrage_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MinigunBarrage::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveEnded" );

	UKFSM_PlayerPatriarch_MinigunBarrage_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.Timer_AnimInterrupt
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MinigunBarrage::Timer_AnimInterrupt ( )
{
	static UFunction* pFnTimer_AnimInterrupt = NULL;

	if ( ! pFnTimer_AnimInterrupt )
		pFnTimer_AnimInterrupt = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.Timer_AnimInterrupt" );

	UKFSM_PlayerPatriarch_MinigunBarrage_execTimer_AnimInterrupt_Parms Timer_AnimInterrupt_Parms;

	this->ProcessEvent ( pFnTimer_AnimInterrupt, &Timer_AnimInterrupt_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.PlayWindDownAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MinigunBarrage::PlayWindDownAnim ( )
{
	static UFunction* pFnPlayWindDownAnim = NULL;

	if ( ! pFnPlayWindDownAnim )
		pFnPlayWindDownAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.PlayWindDownAnim" );

	UKFSM_PlayerPatriarch_MinigunBarrage_execPlayWindDownAnim_Parms PlayWindDownAnim_Parms;

	this->ProcessEvent ( pFnPlayWindDownAnim, &PlayWindDownAnim_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.PlayFireAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MinigunBarrage::PlayFireAnim ( )
{
	static UFunction* pFnPlayFireAnim = NULL;

	if ( ! pFnPlayFireAnim )
		pFnPlayFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.PlayFireAnim" );

	UKFSM_PlayerPatriarch_MinigunBarrage_execPlayFireAnim_Parms PlayFireAnim_Parms;

	this->ProcessEvent ( pFnPlayFireAnim, &PlayFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MinigunBarrage::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MinigunBarrage.SpecialMoveStarted" );

	UKFSM_PlayerPatriarch_MinigunBarrage_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_MortarAttack.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_MortarAttack::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_MortarAttack.InternalCanDoSpecialMove" );

	UKFSM_PlayerPatriarch_MortarAttack_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.ProcessViewRotation
// [0x00420002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_TentacleGrab::ProcessViewRotation ( )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.ProcessViewRotation" );

	UKFSM_PlayerPatriarch_TentacleGrab_execProcessViewRotation_Parms ProcessViewRotation_Parms;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.Tick
// [0x00820002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_TentacleGrab::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.Tick" );

	UKFSM_PlayerPatriarch_TentacleGrab_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.StartInteraction
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_TentacleGrab::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.StartInteraction" );

	UKFSM_PlayerPatriarch_TentacleGrab_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_TentacleGrab::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.SpecialMoveStarted" );

	UKFSM_PlayerPatriarch_TentacleGrab_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.InternalCanDoSpecialMove
// [0x00880002] 
// Parameters infos:

void UKFSM_PlayerPatriarch_TentacleGrab::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerPatriarch_TentacleGrab.InternalCanDoSpecialMove" );

	UKFSM_PlayerPatriarch_TentacleGrab_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerScrake_Melee.IsInSpecialMode
// [0x00022002] 
// Parameters infos:

void UKFSM_PlayerScrake_Melee::IsInSpecialMode ( )
{
	static UFunction* pFnIsInSpecialMode = NULL;

	if ( ! pFnIsInSpecialMode )
		pFnIsInSpecialMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerScrake_Melee.IsInSpecialMode" );

	UKFSM_PlayerScrake_Melee_execIsInSpecialMode_Parms IsInSpecialMode_Parms;

	this->ProcessEvent ( pFnIsInSpecialMode, &IsInSpecialMode_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_SirenProjectileShield.StopsProjectile
// [0x00020102] 
// Parameters infos:

void AKFTrigger_SirenProjectileShield::StopsProjectile ( )
{
	static UFunction* pFnStopsProjectile = NULL;

	if ( ! pFnStopsProjectile )
		pFnStopsProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_SirenProjectileShield.StopsProjectile" );

	AKFTrigger_SirenProjectileShield_execStopsProjectile_Parms StopsProjectile_Parms;

	this->ProcessEvent ( pFnStopsProjectile, &StopsProjectile_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_SirenProjectileShield.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_SirenProjectileShield::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_SirenProjectileShield.Touch" );

	AKFTrigger_SirenProjectileShield_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFTrigger_SirenProjectileShield.BaseChange
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFTrigger_SirenProjectileShield::eventBaseChange ( )
{
	static UFunction* pFnBaseChange = NULL;

	if ( ! pFnBaseChange )
		pFnBaseChange = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFTrigger_SirenProjectileShield.BaseChange" );

	AKFTrigger_SirenProjectileShield_eventBaseChange_Parms BaseChange_Parms;

	this->ProcessEvent ( pFnBaseChange, &BaseChange_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_NormalScream.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_NormalScream::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_NormalScream.SpecialMoveStarted" );

	UKFSM_PlayerSiren_NormalScream_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_NormalScream.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerSiren_NormalScream::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_NormalScream.InternalCanDoSpecialMove" );

	UKFSM_PlayerSiren_NormalScream_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveButtonReleased
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::SpecialMoveButtonReleased ( )
{
	static UFunction* pFnSpecialMoveButtonReleased = NULL;

	if ( ! pFnSpecialMoveButtonReleased )
		pFnSpecialMoveButtonReleased = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveButtonReleased" );

	UKFSM_PlayerSiren_VortexScream_execSpecialMoveButtonReleased_Parms SpecialMoveButtonReleased_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonReleased, &SpecialMoveButtonReleased_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveButtonRetriggered
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::SpecialMoveButtonRetriggered ( )
{
	static UFunction* pFnSpecialMoveButtonRetriggered = NULL;

	if ( ! pFnSpecialMoveButtonRetriggered )
		pFnSpecialMoveButtonRetriggered = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveButtonRetriggered" );

	UKFSM_PlayerSiren_VortexScream_execSpecialMoveButtonRetriggered_Parms SpecialMoveButtonRetriggered_Parms;

	this->ProcessEvent ( pFnSpecialMoveButtonRetriggered, &SpecialMoveButtonRetriggered_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.Timer_VortexInterrupt
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::Timer_VortexInterrupt ( )
{
	static UFunction* pFnTimer_VortexInterrupt = NULL;

	if ( ! pFnTimer_VortexInterrupt )
		pFnTimer_VortexInterrupt = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.Timer_VortexInterrupt" );

	UKFSM_PlayerSiren_VortexScream_execTimer_VortexInterrupt_Parms Timer_VortexInterrupt_Parms;

	this->ProcessEvent ( pFnTimer_VortexInterrupt, &Timer_VortexInterrupt_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveEnded" );

	UKFSM_PlayerSiren_VortexScream_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.ResetFollowerPhysics
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::ResetFollowerPhysics ( )
{
	static UFunction* pFnResetFollowerPhysics = NULL;

	if ( ! pFnResetFollowerPhysics )
		pFnResetFollowerPhysics = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.ResetFollowerPhysics" );

	UKFSM_PlayerSiren_VortexScream_execResetFollowerPhysics_Parms ResetFollowerPhysics_Parms;

	this->ProcessEvent ( pFnResetFollowerPhysics, &ResetFollowerPhysics_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.OnFollowerLeavingSpecialMove
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::OnFollowerLeavingSpecialMove ( )
{
	static UFunction* pFnOnFollowerLeavingSpecialMove = NULL;

	if ( ! pFnOnFollowerLeavingSpecialMove )
		pFnOnFollowerLeavingSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.OnFollowerLeavingSpecialMove" );

	UKFSM_PlayerSiren_VortexScream_execOnFollowerLeavingSpecialMove_Parms OnFollowerLeavingSpecialMove_Parms;

	this->ProcessEvent ( pFnOnFollowerLeavingSpecialMove, &OnFollowerLeavingSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.AnimEndNotify
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::AnimEndNotify ( )
{
	static UFunction* pFnAnimEndNotify = NULL;

	if ( ! pFnAnimEndNotify )
		pFnAnimEndNotify = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.AnimEndNotify" );

	UKFSM_PlayerSiren_VortexScream_execAnimEndNotify_Parms AnimEndNotify_Parms;

	this->ProcessEvent ( pFnAnimEndNotify, &AnimEndNotify_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveFlagsUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::SpecialMoveFlagsUpdated ( )
{
	static UFunction* pFnSpecialMoveFlagsUpdated = NULL;

	if ( ! pFnSpecialMoveFlagsUpdated )
		pFnSpecialMoveFlagsUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveFlagsUpdated" );

	UKFSM_PlayerSiren_VortexScream_execSpecialMoveFlagsUpdated_Parms SpecialMoveFlagsUpdated_Parms;

	this->ProcessEvent ( pFnSpecialMoveFlagsUpdated, &SpecialMoveFlagsUpdated_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.Timer_DamageFollower
// [0x00820002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::Timer_DamageFollower ( )
{
	static UFunction* pFnTimer_DamageFollower = NULL;

	if ( ! pFnTimer_DamageFollower )
		pFnTimer_DamageFollower = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.Timer_DamageFollower" );

	UKFSM_PlayerSiren_VortexScream_execTimer_DamageFollower_Parms Timer_DamageFollower_Parms;

	this->ProcessEvent ( pFnTimer_DamageFollower, &Timer_DamageFollower_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.StartInteraction
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::StartInteraction ( )
{
	static UFunction* pFnStartInteraction = NULL;

	if ( ! pFnStartInteraction )
		pFnStartInteraction = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.StartInteraction" );

	UKFSM_PlayerSiren_VortexScream_execStartInteraction_Parms StartInteraction_Parms;

	this->ProcessEvent ( pFnStartInteraction, &StartInteraction_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.InteractionPawnUpdated
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::InteractionPawnUpdated ( )
{
	static UFunction* pFnInteractionPawnUpdated = NULL;

	if ( ! pFnInteractionPawnUpdated )
		pFnInteractionPawnUpdated = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.InteractionPawnUpdated" );

	UKFSM_PlayerSiren_VortexScream_execInteractionPawnUpdated_Parms InteractionPawnUpdated_Parms;

	this->ProcessEvent ( pFnInteractionPawnUpdated, &InteractionPawnUpdated_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.Timer_CheckVortex
// [0x00820002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::Timer_CheckVortex ( )
{
	static UFunction* pFnTimer_CheckVortex = NULL;

	if ( ! pFnTimer_CheckVortex )
		pFnTimer_CheckVortex = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.Timer_CheckVortex" );

	UKFSM_PlayerSiren_VortexScream_execTimer_CheckVortex_Parms Timer_CheckVortex_Parms;

	this->ProcessEvent ( pFnTimer_CheckVortex, &Timer_CheckVortex_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.ProcessViewRotation
// [0x00420002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::ProcessViewRotation ( )
{
	static UFunction* pFnProcessViewRotation = NULL;

	if ( ! pFnProcessViewRotation )
		pFnProcessViewRotation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.ProcessViewRotation" );

	UKFSM_PlayerSiren_VortexScream_execProcessViewRotation_Parms ProcessViewRotation_Parms;

	this->ProcessEvent ( pFnProcessViewRotation, &ProcessViewRotation_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.GetUncompressedViewPitch
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::GetUncompressedViewPitch ( )
{
	static UFunction* pFnGetUncompressedViewPitch = NULL;

	if ( ! pFnGetUncompressedViewPitch )
		pFnGetUncompressedViewPitch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.GetUncompressedViewPitch" );

	UKFSM_PlayerSiren_VortexScream_execGetUncompressedViewPitch_Parms GetUncompressedViewPitch_Parms;

	this->ProcessEvent ( pFnGetUncompressedViewPitch, &GetUncompressedViewPitch_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.Tick
// [0x00820002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.Tick" );

	UKFSM_PlayerSiren_VortexScream_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.PlayGrabAnim
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::PlayGrabAnim ( )
{
	static UFunction* pFnPlayGrabAnim = NULL;

	if ( ! pFnPlayGrabAnim )
		pFnPlayGrabAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.PlayGrabAnim" );

	UKFSM_PlayerSiren_VortexScream_execPlayGrabAnim_Parms PlayGrabAnim_Parms;

	this->ProcessEvent ( pFnPlayGrabAnim, &PlayGrabAnim_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.SpecialMoveStarted" );

	UKFSM_PlayerSiren_VortexScream_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexScream.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexScream::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexScream.InternalCanDoSpecialMove" );

	UKFSM_PlayerSiren_VortexScream_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexVictim.SetGrabEffect
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexVictim::SetGrabEffect ( )
{
	static UFunction* pFnSetGrabEffect = NULL;

	if ( ! pFnSetGrabEffect )
		pFnSetGrabEffect = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexVictim.SetGrabEffect" );

	UKFSM_PlayerSiren_VortexVictim_execSetGrabEffect_Parms SetGrabEffect_Parms;

	this->ProcessEvent ( pFnSetGrabEffect, &SetGrabEffect_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexVictim.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexVictim::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexVictim.SpecialMoveEnded" );

	UKFSM_PlayerSiren_VortexVictim_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSiren_VortexVictim.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSiren_VortexVictim::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSiren_VortexVictim.SpecialMoveStarted" );

	UKFSM_PlayerSiren_VortexVictim_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSlasher_Roll.Tick
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSlasher_Roll::Tick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSlasher_Roll.Tick" );

	UKFSM_PlayerSlasher_Roll_execTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSlasher_Roll.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_PlayerSlasher_Roll::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSlasher_Roll.PackFlagsBase" );

	UKFSM_PlayerSlasher_Roll_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSlasher_Roll.InternalCanDoSpecialMove
// [0x00080002] 
// Parameters infos:

void UKFSM_PlayerSlasher_Roll::InternalCanDoSpecialMove ( )
{
	static UFunction* pFnInternalCanDoSpecialMove = NULL;

	if ( ! pFnInternalCanDoSpecialMove )
		pFnInternalCanDoSpecialMove = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSlasher_Roll.InternalCanDoSpecialMove" );

	UKFSM_PlayerSlasher_Roll_execInternalCanDoSpecialMove_Parms InternalCanDoSpecialMove_Parms;

	this->ProcessEvent ( pFnInternalCanDoSpecialMove, &InternalCanDoSpecialMove_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerSlasher_Roll.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerSlasher_Roll::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerSlasher_Roll.SpecialMoveStarted" );

	UKFSM_PlayerSlasher_Roll_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerStalker_Roll.SpecialMoveEnded
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerStalker_Roll::SpecialMoveEnded ( )
{
	static UFunction* pFnSpecialMoveEnded = NULL;

	if ( ! pFnSpecialMoveEnded )
		pFnSpecialMoveEnded = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerStalker_Roll.SpecialMoveEnded" );

	UKFSM_PlayerStalker_Roll_execSpecialMoveEnded_Parms SpecialMoveEnded_Parms;

	this->ProcessEvent ( pFnSpecialMoveEnded, &SpecialMoveEnded_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerStalker_Roll.SpecialMoveStarted
// [0x00020002] 
// Parameters infos:

void UKFSM_PlayerStalker_Roll::SpecialMoveStarted ( )
{
	static UFunction* pFnSpecialMoveStarted = NULL;

	if ( ! pFnSpecialMoveStarted )
		pFnSpecialMoveStarted = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerStalker_Roll.SpecialMoveStarted" );

	UKFSM_PlayerStalker_Roll_execSpecialMoveStarted_Parms SpecialMoveStarted_Parms;

	this->ProcessEvent ( pFnSpecialMoveStarted, &SpecialMoveStarted_Parms, NULL );
};

// Function kfgamecontent.KFSM_PlayerStalker_Roll.PackFlagsBase
// [0x00022002] 
// Parameters infos:

void UKFSM_PlayerStalker_Roll::PackFlagsBase ( )
{
	static UFunction* pFnPackFlagsBase = NULL;

	if ( ! pFnPackFlagsBase )
		pFnPackFlagsBase = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFSM_PlayerStalker_Roll.PackFlagsBase" );

	UKFSM_PlayerStalker_Roll_execPackFlagsBase_Parms PackFlagsBase_Parms;

	this->ProcessEvent ( pFnPackFlagsBase, &PackFlagsBase_Parms, NULL );
};

// Function kfgamecontent.KFStaticMeshActor_TrackLocalPC.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFStaticMeshActor_TrackLocalPC::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFStaticMeshActor_TrackLocalPC.Tick" );

	AKFStaticMeshActor_TrackLocalPC_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFVolume_CameraFade.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFVolume_CameraFade::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFVolume_CameraFade.Touch" );

	AKFVolume_CameraFade_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFVolume_DamageAdjust.UnTouch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFVolume_DamageAdjust::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFVolume_DamageAdjust.UnTouch" );

	AKFVolume_DamageAdjust_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function kfgamecontent.KFVolume_DamageAdjust.Touch
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFVolume_DamageAdjust::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFVolume_DamageAdjust.Touch" );

	AKFVolume_DamageAdjust_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFVolume_DisableZedJump.UnTouch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFVolume_DisableZedJump::eventUnTouch ( )
{
	static UFunction* pFnUnTouch = NULL;

	if ( ! pFnUnTouch )
		pFnUnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFVolume_DisableZedJump.UnTouch" );

	AKFVolume_DisableZedJump_eventUnTouch_Parms UnTouch_Parms;

	this->ProcessEvent ( pFnUnTouch, &UnTouch_Parms, NULL );
};

// Function kfgamecontent.KFVolume_DisableZedJump.Touch
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFVolume_DisableZedJump::eventTouch ( )
{
	static UFunction* pFnTouch = NULL;

	if ( ! pFnTouch )
		pFnTouch = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFVolume_DisableZedJump.Touch" );

	AKFVolume_DisableZedJump_eventTouch_Parms Touch_Parms;

	this->ProcessEvent ( pFnTouch, &Touch_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.TryToAltReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::TryToAltReload ( )
{
	static UFunction* pFnTryToAltReload = NULL;

	if ( ! pFnTryToAltReload )
		pFnTryToAltReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.TryToAltReload" );

	AKFWeap_AssaultRifle_M16M203_execTryToAltReload_Parms TryToAltReload_Parms;

	this->ProcessEvent ( pFnTryToAltReload, &TryToAltReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.CanAltAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::CanAltAutoReload ( )
{
	static UFunction* pFnCanAltAutoReload = NULL;

	if ( ! pFnCanAltAutoReload )
		pFnCanAltAutoReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.CanAltAutoReload" );

	AKFWeap_AssaultRifle_M16M203_execCanAltAutoReload_Parms CanAltAutoReload_Parms;

	this->ProcessEvent ( pFnCanAltAutoReload, &CanAltAutoReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.CanOverrideMagReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::CanOverrideMagReload ( )
{
	static UFunction* pFnCanOverrideMagReload = NULL;

	if ( ! pFnCanOverrideMagReload )
		pFnCanOverrideMagReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.CanOverrideMagReload" );

	AKFWeap_AssaultRifle_M16M203_execCanOverrideMagReload_Parms CanOverrideMagReload_Parms;

	this->ProcessEvent ( pFnCanOverrideMagReload, &CanOverrideMagReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ServerSetAltAmmoCount
// [0x002200C2] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::ServerSetAltAmmoCount ( )
{
	static UFunction* pFnServerSetAltAmmoCount = NULL;

	if ( ! pFnServerSetAltAmmoCount )
		pFnServerSetAltAmmoCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ServerSetAltAmmoCount" );

	AKFWeap_AssaultRifle_M16M203_execServerSetAltAmmoCount_Parms ServerSetAltAmmoCount_Parms;

	this->ProcessEvent ( pFnServerSetAltAmmoCount, &ServerSetAltAmmoCount_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ServerSendToAltReload
// [0x002200C2] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::ServerSendToAltReload ( )
{
	static UFunction* pFnServerSendToAltReload = NULL;

	if ( ! pFnServerSendToAltReload )
		pFnServerSendToAltReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ServerSendToAltReload" );

	AKFWeap_AssaultRifle_M16M203_execServerSendToAltReload_Parms ServerSendToAltReload_Parms;

	this->ProcessEvent ( pFnServerSendToAltReload, &ServerSendToAltReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.SendToAltReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::SendToAltReload ( )
{
	static UFunction* pFnSendToAltReload = NULL;

	if ( ! pFnSendToAltReload )
		pFnSendToAltReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.SendToAltReload" );

	AKFWeap_AssaultRifle_M16M203_execSendToAltReload_Parms SendToAltReload_Parms;

	this->ProcessEvent ( pFnSendToAltReload, &SendToAltReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ShouldAutoReload" );

	AKFWeap_AssaultRifle_M16M203_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.CauseMuzzleFlash" );

	AKFWeap_AssaultRifle_M16M203_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.SetOriginalValuesFromPickup
// [0x00020002] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::SetOriginalValuesFromPickup ( )
{
	static UFunction* pFnSetOriginalValuesFromPickup = NULL;

	if ( ! pFnSetOriginalValuesFromPickup )
		pFnSetOriginalValuesFromPickup = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.SetOriginalValuesFromPickup" );

	AKFWeap_AssaultRifle_M16M203_execSetOriginalValuesFromPickup_Parms SetOriginalValuesFromPickup_Parms;

	this->ProcessEvent ( pFnSetOriginalValuesFromPickup, &SetOriginalValuesFromPickup_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ClientGiveSecondaryAmmo
// [0x010201C2] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::ClientGiveSecondaryAmmo ( )
{
	static UFunction* pFnClientGiveSecondaryAmmo = NULL;

	if ( ! pFnClientGiveSecondaryAmmo )
		pFnClientGiveSecondaryAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ClientGiveSecondaryAmmo" );

	AKFWeap_AssaultRifle_M16M203_execClientGiveSecondaryAmmo_Parms ClientGiveSecondaryAmmo_Parms;

	this->ProcessEvent ( pFnClientGiveSecondaryAmmo, &ClientGiveSecondaryAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.AddSecondaryAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::AddSecondaryAmmo ( )
{
	static UFunction* pFnAddSecondaryAmmo = NULL;

	if ( ! pFnAddSecondaryAmmo )
		pFnAddSecondaryAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.AddSecondaryAmmo" );

	AKFWeap_AssaultRifle_M16M203_execAddSecondaryAmmo_Parms AddSecondaryAmmo_Parms;

	this->ProcessEvent ( pFnAddSecondaryAmmo, &AddSecondaryAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.HasAmmo
// [0x00024902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::eventHasAmmo ( )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.HasAmmo" );

	AKFWeap_AssaultRifle_M16M203_eventHasAmmo_Parms HasAmmo_Parms;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ConsumeAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.ConsumeAmmo" );

	AKFWeap_AssaultRifle_M16M203_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.InitializeAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::InitializeAmmo ( )
{
	static UFunction* pFnInitializeAmmo = NULL;

	if ( ! pFnInitializeAmmo )
		pFnInitializeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.InitializeAmmo" );

	AKFWeap_AssaultRifle_M16M203_execInitializeAmmo_Parms InitializeAmmo_Parms;

	this->ProcessEvent ( pFnInitializeAmmo, &InitializeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.AltFireMode" );

	AKFWeap_AssaultRifle_M16M203_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_M16M203.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_AssaultRifle_M16M203::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_M16M203.GetAltTraderFilter" );

	AKFWeap_AssaultRifle_M16M203_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_Medic.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_AssaultRifle_Medic::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_Medic.GetTraderFilter" );

	AKFWeap_AssaultRifle_Medic_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.UpdateOpticsUI
// [0x00024102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::UpdateOpticsUI ( )
{
	static UFunction* pFnUpdateOpticsUI = NULL;

	if ( ! pFnUpdateOpticsUI )
		pFnUpdateOpticsUI = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.UpdateOpticsUI" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execUpdateOpticsUI_Parms UpdateOpticsUI_Parms;

	this->ProcessEvent ( pFnUpdateOpticsUI, &UpdateOpticsUI_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.TryToAltReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::TryToAltReload ( )
{
	static UFunction* pFnTryToAltReload = NULL;

	if ( ! pFnTryToAltReload )
		pFnTryToAltReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.TryToAltReload" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execTryToAltReload_Parms TryToAltReload_Parms;

	this->ProcessEvent ( pFnTryToAltReload, &TryToAltReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.CanAltAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::CanAltAutoReload ( )
{
	static UFunction* pFnCanAltAutoReload = NULL;

	if ( ! pFnCanAltAutoReload )
		pFnCanAltAutoReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.CanAltAutoReload" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execCanAltAutoReload_Parms CanAltAutoReload_Parms;

	this->ProcessEvent ( pFnCanAltAutoReload, &CanAltAutoReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.CanOverrideMagReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::CanOverrideMagReload ( )
{
	static UFunction* pFnCanOverrideMagReload = NULL;

	if ( ! pFnCanOverrideMagReload )
		pFnCanOverrideMagReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.CanOverrideMagReload" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execCanOverrideMagReload_Parms CanOverrideMagReload_Parms;

	this->ProcessEvent ( pFnCanOverrideMagReload, &CanOverrideMagReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.ServerSetAltAmmoCount
// [0x002200C2] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::ServerSetAltAmmoCount ( )
{
	static UFunction* pFnServerSetAltAmmoCount = NULL;

	if ( ! pFnServerSetAltAmmoCount )
		pFnServerSetAltAmmoCount = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.ServerSetAltAmmoCount" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execServerSetAltAmmoCount_Parms ServerSetAltAmmoCount_Parms;

	this->ProcessEvent ( pFnServerSetAltAmmoCount, &ServerSetAltAmmoCount_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.ServerSendToAltReload
// [0x002200C2] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::ServerSendToAltReload ( )
{
	static UFunction* pFnServerSendToAltReload = NULL;

	if ( ! pFnServerSendToAltReload )
		pFnServerSendToAltReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.ServerSendToAltReload" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execServerSendToAltReload_Parms ServerSendToAltReload_Parms;

	this->ProcessEvent ( pFnServerSendToAltReload, &ServerSendToAltReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.SendToAltReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::SendToAltReload ( )
{
	static UFunction* pFnSendToAltReload = NULL;

	if ( ! pFnSendToAltReload )
		pFnSendToAltReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.SendToAltReload" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execSendToAltReload_Parms SendToAltReload_Parms;

	this->ProcessEvent ( pFnSendToAltReload, &SendToAltReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.ShouldAutoReload" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.CauseMuzzleFlash" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.SetOriginalValuesFromPickup
// [0x00020002] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::SetOriginalValuesFromPickup ( )
{
	static UFunction* pFnSetOriginalValuesFromPickup = NULL;

	if ( ! pFnSetOriginalValuesFromPickup )
		pFnSetOriginalValuesFromPickup = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.SetOriginalValuesFromPickup" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execSetOriginalValuesFromPickup_Parms SetOriginalValuesFromPickup_Parms;

	this->ProcessEvent ( pFnSetOriginalValuesFromPickup, &SetOriginalValuesFromPickup_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.ClientGiveSecondaryAmmo
// [0x010201C2] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::ClientGiveSecondaryAmmo ( )
{
	static UFunction* pFnClientGiveSecondaryAmmo = NULL;

	if ( ! pFnClientGiveSecondaryAmmo )
		pFnClientGiveSecondaryAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.ClientGiveSecondaryAmmo" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execClientGiveSecondaryAmmo_Parms ClientGiveSecondaryAmmo_Parms;

	this->ProcessEvent ( pFnClientGiveSecondaryAmmo, &ClientGiveSecondaryAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.AddSecondaryAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::AddSecondaryAmmo ( )
{
	static UFunction* pFnAddSecondaryAmmo = NULL;

	if ( ! pFnAddSecondaryAmmo )
		pFnAddSecondaryAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.AddSecondaryAmmo" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execAddSecondaryAmmo_Parms AddSecondaryAmmo_Parms;

	this->ProcessEvent ( pFnAddSecondaryAmmo, &AddSecondaryAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.InitializeAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::InitializeAmmo ( )
{
	static UFunction* pFnInitializeAmmo = NULL;

	if ( ! pFnInitializeAmmo )
		pFnInitializeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.InitializeAmmo" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execInitializeAmmo_Parms InitializeAmmo_Parms;

	this->ProcessEvent ( pFnInitializeAmmo, &InitializeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.AltFireMode" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.GetAltTraderFilter" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.GetSecondaryAmmoForHUD
// [0x00020102] 
// Parameters infos:

void AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher::GetSecondaryAmmoForHUD ( )
{
	static UFunction* pFnGetSecondaryAmmoForHUD = NULL;

	if ( ! pFnGetSecondaryAmmoForHUD )
		pFnGetSecondaryAmmoForHUD = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_AssaultRifle_MedicRifleGrenadeLauncher.GetSecondaryAmmoForHUD" );

	AKFWeap_AssaultRifle_MedicRifleGrenadeLauncher_execGetSecondaryAmmoForHUD_Parms GetSecondaryAmmoForHUD_Parms;

	this->ProcessEvent ( pFnGetSecondaryAmmoForHUD, &GetSecondaryAmmoForHUD_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Beam_Microwave.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Beam_Microwave::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Beam_Microwave.GetTraderFilter" );

	AKFWeap_Beam_Microwave_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Beam_Microwave.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_Beam_Microwave::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Beam_Microwave.ShouldAutoReload" );

	AKFWeap_Beam_Microwave_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Beam_Microwave.CustomFire
// [0x00820102] 
// Parameters infos:

void AKFWeap_Beam_Microwave::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Beam_Microwave.CustomFire" );

	AKFWeap_Beam_Microwave_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Beam_Microwave.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_Beam_Microwave::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Beam_Microwave.AltFireMode" );

	AKFWeap_Beam_Microwave_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Beam_Microwave.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_Beam_Microwave::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Beam_Microwave.GetWeaponFireAnim" );

	AKFWeap_Beam_Microwave_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_MaceAndShield.SwapToShieldMeleeSettings
// [0x00020102] 
// Parameters infos:

void AKFWeap_Blunt_MaceAndShield::SwapToShieldMeleeSettings ( )
{
	static UFunction* pFnSwapToShieldMeleeSettings = NULL;

	if ( ! pFnSwapToShieldMeleeSettings )
		pFnSwapToShieldMeleeSettings = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_MaceAndShield.SwapToShieldMeleeSettings" );

	AKFWeap_Blunt_MaceAndShield_execSwapToShieldMeleeSettings_Parms SwapToShieldMeleeSettings_Parms;

	this->ProcessEvent ( pFnSwapToShieldMeleeSettings, &SwapToShieldMeleeSettings_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_MaceAndShield.SwapToMaceMeleeSettings
// [0x00020102] 
// Parameters infos:

void AKFWeap_Blunt_MaceAndShield::SwapToMaceMeleeSettings ( )
{
	static UFunction* pFnSwapToMaceMeleeSettings = NULL;

	if ( ! pFnSwapToMaceMeleeSettings )
		pFnSwapToMaceMeleeSettings = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_MaceAndShield.SwapToMaceMeleeSettings" );

	AKFWeap_Blunt_MaceAndShield_execSwapToMaceMeleeSettings_Parms SwapToMaceMeleeSettings_Parms;

	this->ProcessEvent ( pFnSwapToMaceMeleeSettings, &SwapToMaceMeleeSettings_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.CanReload
// [0x00024102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::CanReload ( )
{
	static UFunction* pFnCanReload = NULL;

	if ( ! pFnCanReload )
		pFnCanReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.CanReload" );

	AKFWeap_Blunt_Pulverizer_execCanReload_Parms CanReload_Parms;

	this->ProcessEvent ( pFnCanReload, &CanReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.SendToFiringState
// [0x00020102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::SendToFiringState ( )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.SendToFiringState" );

	AKFWeap_Blunt_Pulverizer_execSendToFiringState_Parms SendToFiringState_Parms;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.ShouldRefire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::ShouldRefire ( )
{
	static UFunction* pFnShouldRefire = NULL;

	if ( ! pFnShouldRefire )
		pFnShouldRefire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.ShouldRefire" );

	AKFWeap_Blunt_Pulverizer_execShouldRefire_Parms ShouldRefire_Parms;

	this->ProcessEvent ( pFnShouldRefire, &ShouldRefire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.BeginPulverizerFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::BeginPulverizerFire ( )
{
	static UFunction* pFnBeginPulverizerFire = NULL;

	if ( ! pFnBeginPulverizerFire )
		pFnBeginPulverizerFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.BeginPulverizerFire" );

	AKFWeap_Blunt_Pulverizer_execBeginPulverizerFire_Parms BeginPulverizerFire_Parms;

	this->ProcessEvent ( pFnBeginPulverizerFire, &BeginPulverizerFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.ServerBeginPulverizerFire
// [0x002440C3] ( FUNC_Final )
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::ServerBeginPulverizerFire ( )
{
	static UFunction* pFnServerBeginPulverizerFire = NULL;

	if ( ! pFnServerBeginPulverizerFire )
		pFnServerBeginPulverizerFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.ServerBeginPulverizerFire" );

	AKFWeap_Blunt_Pulverizer_execServerBeginPulverizerFire_Parms ServerBeginPulverizerFire_Parms;

	this->ProcessEvent ( pFnServerBeginPulverizerFire, &ServerBeginPulverizerFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.GetWeaponFireAnim" );

	AKFWeap_Blunt_Pulverizer_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.GetPulverizerAim
// [0x00820102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::GetPulverizerAim ( )
{
	static UFunction* pFnGetPulverizerAim = NULL;

	if ( ! pFnGetPulverizerAim )
		pFnGetPulverizerAim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.GetPulverizerAim" );

	AKFWeap_Blunt_Pulverizer_execGetPulverizerAim_Parms GetPulverizerAim_Parms;

	this->ProcessEvent ( pFnGetPulverizerAim, &GetPulverizerAim_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.SetExplosionActorClass
// [0x00080102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::SetExplosionActorClass ( )
{
	static UFunction* pFnSetExplosionActorClass = NULL;

	if ( ! pFnSetExplosionActorClass )
		pFnSetExplosionActorClass = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.SetExplosionActorClass" );

	AKFWeap_Blunt_Pulverizer_execSetExplosionActorClass_Parms SetExplosionActorClass_Parms;

	this->ProcessEvent ( pFnSetExplosionActorClass, &SetExplosionActorClass_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.PrepareExplosionTemplate
// [0x00080102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::PrepareExplosionTemplate ( )
{
	static UFunction* pFnPrepareExplosionTemplate = NULL;

	if ( ! pFnPrepareExplosionTemplate )
		pFnPrepareExplosionTemplate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.PrepareExplosionTemplate" );

	AKFWeap_Blunt_Pulverizer_execPrepareExplosionTemplate_Parms PrepareExplosionTemplate_Parms;

	this->ProcessEvent ( pFnPrepareExplosionTemplate, &PrepareExplosionTemplate_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.CustomFire
// [0x00820102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.CustomFire" );

	AKFWeap_Blunt_Pulverizer_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.CanOverrideMagReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::CanOverrideMagReload ( )
{
	static UFunction* pFnCanOverrideMagReload = NULL;

	if ( ! pFnCanOverrideMagReload )
		pFnCanOverrideMagReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.CanOverrideMagReload" );

	AKFWeap_Blunt_Pulverizer_execCanOverrideMagReload_Parms CanOverrideMagReload_Parms;

	this->ProcessEvent ( pFnCanOverrideMagReload, &CanOverrideMagReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Blunt_Pulverizer.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Blunt_Pulverizer::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Blunt_Pulverizer.PreBeginPlay" );

	AKFWeap_Blunt_Pulverizer_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Bow_Crossbow.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Bow_Crossbow::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Bow_Crossbow.GetTraderFilter" );

	AKFWeap_Bow_Crossbow_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Bow_Crossbow.GetReloadAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_Bow_Crossbow::GetReloadAnimName ( )
{
	static UFunction* pFnGetReloadAnimName = NULL;

	if ( ! pFnGetReloadAnimName )
		pFnGetReloadAnimName = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Bow_Crossbow.GetReloadAnimName" );

	AKFWeap_Bow_Crossbow_execGetReloadAnimName_Parms GetReloadAnimName_Parms;

	this->ProcessEvent ( pFnGetReloadAnimName, &GetReloadAnimName_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Bow_Crossbow.ShouldPlayFireLast
// [0x00020102] 
// Parameters infos:

void AKFWeap_Bow_Crossbow::ShouldPlayFireLast ( )
{
	static UFunction* pFnShouldPlayFireLast = NULL;

	if ( ! pFnShouldPlayFireLast )
		pFnShouldPlayFireLast = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Bow_Crossbow.ShouldPlayFireLast" );

	AKFWeap_Bow_Crossbow_execShouldPlayFireLast_Parms ShouldPlayFireLast_Parms;

	this->ProcessEvent ( pFnShouldPlayFireLast, &ShouldPlayFireLast_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Edged_Knife.AllowedForAllPerks
// [0x00022102] 
// Parameters infos:

void AKFWeap_Edged_Knife::AllowedForAllPerks ( )
{
	static UFunction* pFnAllowedForAllPerks = NULL;

	if ( ! pFnAllowedForAllPerks )
		pFnAllowedForAllPerks = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Edged_Knife.AllowedForAllPerks" );

	AKFWeap_Edged_Knife_execAllowedForAllPerks_Parms AllowedForAllPerks_Parms;

	this->ProcessEvent ( pFnAllowedForAllPerks, &AllowedForAllPerks_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.BlockInterruptTimer
// [0x00020100] 
// Parameters infos:

void AKFWeap_Eviscerator::BlockInterruptTimer ( )
{
	static UFunction* pFnBlockInterruptTimer = NULL;

	if ( ! pFnBlockInterruptTimer )
		pFnBlockInterruptTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.BlockInterruptTimer" );

	AKFWeap_Eviscerator_execBlockInterruptTimer_Parms BlockInterruptTimer_Parms;

	this->ProcessEvent ( pFnBlockInterruptTimer, &BlockInterruptTimer_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Eviscerator::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.GetAltTraderFilter" );

	AKFWeap_Eviscerator_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Eviscerator::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.GetTraderFilter" );

	AKFWeap_Eviscerator_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_Eviscerator::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.CalculateTraderWeaponStatDamage" );

	AKFWeap_Eviscerator_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.CanOverrideMagReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_Eviscerator::CanOverrideMagReload ( )
{
	static UFunction* pFnCanOverrideMagReload = NULL;

	if ( ! pFnCanOverrideMagReload )
		pFnCanOverrideMagReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.CanOverrideMagReload" );

	AKFWeap_Eviscerator_execCanOverrideMagReload_Parms CanOverrideMagReload_Parms;

	this->ProcessEvent ( pFnCanOverrideMagReload, &CanOverrideMagReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.StopIdleMotorSound
// [0x00020102] 
// Parameters infos:

void AKFWeap_Eviscerator::StopIdleMotorSound ( )
{
	static UFunction* pFnStopIdleMotorSound = NULL;

	if ( ! pFnStopIdleMotorSound )
		pFnStopIdleMotorSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.StopIdleMotorSound" );

	AKFWeap_Eviscerator_execStopIdleMotorSound_Parms StopIdleMotorSound_Parms;

	this->ProcessEvent ( pFnStopIdleMotorSound, &StopIdleMotorSound_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.PlayIdleMotorSound
// [0x00020102] 
// Parameters infos:

void AKFWeap_Eviscerator::PlayIdleMotorSound ( )
{
	static UFunction* pFnPlayIdleMotorSound = NULL;

	if ( ! pFnPlayIdleMotorSound )
		pFnPlayIdleMotorSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.PlayIdleMotorSound" );

	AKFWeap_Eviscerator_execPlayIdleMotorSound_Parms PlayIdleMotorSound_Parms;

	this->ProcessEvent ( pFnPlayIdleMotorSound, &PlayIdleMotorSound_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.UpdateOutOfAmmoEffects
// [0x00020102] 
// Parameters infos:

void AKFWeap_Eviscerator::UpdateOutOfAmmoEffects ( )
{
	static UFunction* pFnUpdateOutOfAmmoEffects = NULL;

	if ( ! pFnUpdateOutOfAmmoEffects )
		pFnUpdateOutOfAmmoEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.UpdateOutOfAmmoEffects" );

	AKFWeap_Eviscerator_execUpdateOutOfAmmoEffects_Parms UpdateOutOfAmmoEffects_Parms;

	this->ProcessEvent ( pFnUpdateOutOfAmmoEffects, &UpdateOutOfAmmoEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.UnHideBlade
// [0x00020100] 
// Parameters infos:

void AKFWeap_Eviscerator::UnHideBlade ( )
{
	static UFunction* pFnUnHideBlade = NULL;

	if ( ! pFnUnHideBlade )
		pFnUnHideBlade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.UnHideBlade" );

	AKFWeap_Eviscerator_execUnHideBlade_Parms UnHideBlade_Parms;

	this->ProcessEvent ( pFnUnHideBlade, &UnHideBlade_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.HideBlade
// [0x00020100] 
// Parameters infos:

void AKFWeap_Eviscerator::HideBlade ( )
{
	static UFunction* pFnHideBlade = NULL;

	if ( ! pFnHideBlade )
		pFnHideBlade = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.HideBlade" );

	AKFWeap_Eviscerator_execHideBlade_Parms HideBlade_Parms;

	this->ProcessEvent ( pFnHideBlade, &HideBlade_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.RecieveClientImpact
// [0x00424802] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Eviscerator::eventRecieveClientImpact ( )
{
	static UFunction* pFnRecieveClientImpact = NULL;

	if ( ! pFnRecieveClientImpact )
		pFnRecieveClientImpact = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.RecieveClientImpact" );

	AKFWeap_Eviscerator_eventRecieveClientImpact_Parms RecieveClientImpact_Parms;

	this->ProcessEvent ( pFnRecieveClientImpact, &RecieveClientImpact_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.GetAmmoType
// [0x00020102] 
// Parameters infos:

void AKFWeap_Eviscerator::GetAmmoType ( )
{
	static UFunction* pFnGetAmmoType = NULL;

	if ( ! pFnGetAmmoType )
		pFnGetAmmoType = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.GetAmmoType" );

	AKFWeap_Eviscerator_execGetAmmoType_Parms GetAmmoType_Parms;

	this->ProcessEvent ( pFnGetAmmoType, &GetAmmoType_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Eviscerator::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.StartFire" );

	AKFWeap_Eviscerator_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.PostInitAnimTree
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Eviscerator::eventPostInitAnimTree ( )
{
	static UFunction* pFnPostInitAnimTree = NULL;

	if ( ! pFnPostInitAnimTree )
		pFnPostInitAnimTree = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.PostInitAnimTree" );

	AKFWeap_Eviscerator_eventPostInitAnimTree_Parms PostInitAnimTree_Parms;

	this->ProcessEvent ( pFnPostInitAnimTree, &PostInitAnimTree_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Eviscerator.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Eviscerator::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Eviscerator.PreBeginPlay" );

	AKFWeap_Eviscerator_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Flame_CaulkBurn.SetFOV
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Flame_CaulkBurn::eventSetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Flame_CaulkBurn.SetFOV" );

	AKFWeap_Flame_CaulkBurn_eventSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Flame_CaulkBurn.TurnOffPilot
// [0x00080102] 
// Parameters infos:

void AKFWeap_Flame_CaulkBurn::TurnOffPilot ( )
{
	static UFunction* pFnTurnOffPilot = NULL;

	if ( ! pFnTurnOffPilot )
		pFnTurnOffPilot = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Flame_CaulkBurn.TurnOffPilot" );

	AKFWeap_Flame_CaulkBurn_execTurnOffPilot_Parms TurnOffPilot_Parms;

	this->ProcessEvent ( pFnTurnOffPilot, &TurnOffPilot_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Flame_CaulkBurn.TurnOnPilot
// [0x00080102] 
// Parameters infos:

void AKFWeap_Flame_CaulkBurn::TurnOnPilot ( )
{
	static UFunction* pFnTurnOnPilot = NULL;

	if ( ! pFnTurnOnPilot )
		pFnTurnOnPilot = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Flame_CaulkBurn.TurnOnPilot" );

	AKFWeap_Flame_CaulkBurn_execTurnOnPilot_Parms TurnOnPilot_Parms;

	this->ProcessEvent ( pFnTurnOnPilot, &TurnOnPilot_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Flame_Flamethrower.SetFOV
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Flame_Flamethrower::eventSetFOV ( )
{
	static UFunction* pFnSetFOV = NULL;

	if ( ! pFnSetFOV )
		pFnSetFOV = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Flame_Flamethrower.SetFOV" );

	AKFWeap_Flame_Flamethrower_eventSetFOV_Parms SetFOV_Parms;

	this->ProcessEvent ( pFnSetFOV, &SetFOV_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Flame_Flamethrower.TurnOffFireSpray
// [0x00080102] 
// Parameters infos:

void AKFWeap_Flame_Flamethrower::TurnOffFireSpray ( )
{
	static UFunction* pFnTurnOffFireSpray = NULL;

	if ( ! pFnTurnOffFireSpray )
		pFnTurnOffFireSpray = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Flame_Flamethrower.TurnOffFireSpray" );

	AKFWeap_Flame_Flamethrower_execTurnOffFireSpray_Parms TurnOffFireSpray_Parms;

	this->ProcessEvent ( pFnTurnOffFireSpray, &TurnOffFireSpray_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Flame_Flamethrower.TurnOnFireSpray
// [0x00080102] 
// Parameters infos:

void AKFWeap_Flame_Flamethrower::TurnOnFireSpray ( )
{
	static UFunction* pFnTurnOnFireSpray = NULL;

	if ( ! pFnTurnOnFireSpray )
		pFnTurnOnFireSpray = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Flame_Flamethrower.TurnOnFireSpray" );

	AKFWeap_Flame_Flamethrower_execTurnOnFireSpray_Parms TurnOnFireSpray_Parms;

	this->ProcessEvent ( pFnTurnOnFireSpray, &TurnOnFireSpray_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Flame_Flamethrower.TurnOffPilot
// [0x00080102] 
// Parameters infos:

void AKFWeap_Flame_Flamethrower::TurnOffPilot ( )
{
	static UFunction* pFnTurnOffPilot = NULL;

	if ( ! pFnTurnOffPilot )
		pFnTurnOffPilot = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Flame_Flamethrower.TurnOffPilot" );

	AKFWeap_Flame_Flamethrower_execTurnOffPilot_Parms TurnOffPilot_Parms;

	this->ProcessEvent ( pFnTurnOffPilot, &TurnOffPilot_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Flame_Flamethrower.TurnOnPilot
// [0x00080102] 
// Parameters infos:

void AKFWeap_Flame_Flamethrower::TurnOnPilot ( )
{
	static UFunction* pFnTurnOnPilot = NULL;

	if ( ! pFnTurnOnPilot )
		pFnTurnOnPilot = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Flame_Flamethrower.TurnOnPilot" );

	AKFWeap_Flame_Flamethrower_execTurnOnPilot_Parms TurnOnPilot_Parms;

	this->ProcessEvent ( pFnTurnOnPilot, &TurnOnPilot_Parms, NULL );
};

// Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_GrenadeLauncher_HX25::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.GetAltTraderFilter" );

	AKFWeap_GrenadeLauncher_HX25_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_HX25::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.CalculateTraderWeaponStatDamage" );

	AKFWeap_GrenadeLauncher_HX25_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.AddMultiShotSpread
// [0x00820102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_HX25::AddMultiShotSpread ( )
{
	static UFunction* pFnAddMultiShotSpread = NULL;

	if ( ! pFnAddMultiShotSpread )
		pFnAddMultiShotSpread = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.AddMultiShotSpread" );

	AKFWeap_GrenadeLauncher_HX25_execAddMultiShotSpread_Parms AddMultiShotSpread_Parms;

	this->ProcessEvent ( pFnAddMultiShotSpread, &AddMultiShotSpread_Parms, NULL );
};

// Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.AddSpread
// [0x00020102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_HX25::AddSpread ( )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.AddSpread" );

	AKFWeap_GrenadeLauncher_HX25_execAddSpread_Parms AddSpread_Parms;

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );
};

// Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.GetNumProjectilesToFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_HX25::GetNumProjectilesToFire ( )
{
	static UFunction* pFnGetNumProjectilesToFire = NULL;

	if ( ! pFnGetNumProjectilesToFire )
		pFnGetNumProjectilesToFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.GetNumProjectilesToFire" );

	AKFWeap_GrenadeLauncher_HX25_execGetNumProjectilesToFire_Parms GetNumProjectilesToFire_Parms;

	this->ProcessEvent ( pFnGetNumProjectilesToFire, &GetNumProjectilesToFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.HandleWeaponShotTaken
// [0x00020002] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_HX25::HandleWeaponShotTaken ( )
{
	static UFunction* pFnHandleWeaponShotTaken = NULL;

	if ( ! pFnHandleWeaponShotTaken )
		pFnHandleWeaponShotTaken = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.HandleWeaponShotTaken" );

	AKFWeap_GrenadeLauncher_HX25_execHandleWeaponShotTaken_Parms HandleWeaponShotTaken_Parms;

	this->ProcessEvent ( pFnHandleWeaponShotTaken, &HandleWeaponShotTaken_Parms, NULL );
};

// Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.SpawnProjectile
// [0x00820102] 
// Parameters infos:

void AKFWeap_GrenadeLauncher_HX25::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_GrenadeLauncher_HX25.SpawnProjectile" );

	AKFWeap_GrenadeLauncher_HX25_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Healer_Syringe.InitializeAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeap_Healer_Syringe::InitializeAmmo ( )
{
	static UFunction* pFnInitializeAmmo = NULL;

	if ( ! pFnInitializeAmmo )
		pFnInitializeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Healer_Syringe.InitializeAmmo" );

	AKFWeap_Healer_Syringe_execInitializeAmmo_Parms InitializeAmmo_Parms;

	this->ProcessEvent ( pFnInitializeAmmo, &InitializeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.GetTraderFilter" );

	AKFWeap_Ice_FreezeThrower_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.SetPilotDynamicLightEnabled
// [0x00020100] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::SetPilotDynamicLightEnabled ( )
{
	static UFunction* pFnSetPilotDynamicLightEnabled = NULL;

	if ( ! pFnSetPilotDynamicLightEnabled )
		pFnSetPilotDynamicLightEnabled = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.SetPilotDynamicLightEnabled" );

	AKFWeap_Ice_FreezeThrower_execSetPilotDynamicLightEnabled_Parms SetPilotDynamicLightEnabled_Parms;

	this->ProcessEvent ( pFnSetPilotDynamicLightEnabled, &SetPilotDynamicLightEnabled_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.IsHeavyWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::IsHeavyWeapon ( )
{
	static UFunction* pFnIsHeavyWeapon = NULL;

	if ( ! pFnIsHeavyWeapon )
		pFnIsHeavyWeapon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.IsHeavyWeapon" );

	AKFWeap_Ice_FreezeThrower_execIsHeavyWeapon_Parms IsHeavyWeapon_Parms;

	this->ProcessEvent ( pFnIsHeavyWeapon, &IsHeavyWeapon_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.ModifyRecoil
// [0x00420102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::ModifyRecoil ( )
{
	static UFunction* pFnModifyRecoil = NULL;

	if ( ! pFnModifyRecoil )
		pFnModifyRecoil = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.ModifyRecoil" );

	AKFWeap_Ice_FreezeThrower_execModifyRecoil_Parms ModifyRecoil_Parms;

	this->ProcessEvent ( pFnModifyRecoil, &ModifyRecoil_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.HandleWeaponShotTaken
// [0x00020002] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::HandleWeaponShotTaken ( )
{
	static UFunction* pFnHandleWeaponShotTaken = NULL;

	if ( ! pFnHandleWeaponShotTaken )
		pFnHandleWeaponShotTaken = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.HandleWeaponShotTaken" );

	AKFWeap_Ice_FreezeThrower_execHandleWeaponShotTaken_Parms HandleWeaponShotTaken_Parms;

	this->ProcessEvent ( pFnHandleWeaponShotTaken, &HandleWeaponShotTaken_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.ShouldAutoReload" );

	AKFWeap_Ice_FreezeThrower_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.AddMultiShotSpread
// [0x00820102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::AddMultiShotSpread ( )
{
	static UFunction* pFnAddMultiShotSpread = NULL;

	if ( ! pFnAddMultiShotSpread )
		pFnAddMultiShotSpread = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.AddMultiShotSpread" );

	AKFWeap_Ice_FreezeThrower_execAddMultiShotSpread_Parms AddMultiShotSpread_Parms;

	this->ProcessEvent ( pFnAddMultiShotSpread, &AddMultiShotSpread_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.AddSpread
// [0x00020102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::AddSpread ( )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.AddSpread" );

	AKFWeap_Ice_FreezeThrower_execAddSpread_Parms AddSpread_Parms;

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.GetNumProjectilesToFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::GetNumProjectilesToFire ( )
{
	static UFunction* pFnGetNumProjectilesToFire = NULL;

	if ( ! pFnGetNumProjectilesToFire )
		pFnGetNumProjectilesToFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.GetNumProjectilesToFire" );

	AKFWeap_Ice_FreezeThrower_execGetNumProjectilesToFire_Parms GetNumProjectilesToFire_Parms;

	this->ProcessEvent ( pFnGetNumProjectilesToFire, &GetNumProjectilesToFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.SpawnProjectile
// [0x00820102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.SpawnProjectile" );

	AKFWeap_Ice_FreezeThrower_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.AltFireMode" );

	AKFWeap_Ice_FreezeThrower_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Ice_FreezeThrower.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_Ice_FreezeThrower::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Ice_FreezeThrower.GetWeaponFireAnim" );

	AKFWeap_Ice_FreezeThrower_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeap_LMG_Stoner63A.GetReloadAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_LMG_Stoner63A::GetReloadAnimName ( )
{
	static UFunction* pFnGetReloadAnimName = NULL;

	if ( ! pFnGetReloadAnimName )
		pFnGetReloadAnimName = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_LMG_Stoner63A.GetReloadAnimName" );

	AKFWeap_LMG_Stoner63A_execGetReloadAnimName_Parms GetReloadAnimName_Parms;

	this->ProcessEvent ( pFnGetReloadAnimName, &GetReloadAnimName_Parms, NULL );
};

// Function kfgamecontent.KFWeap_LMG_Stoner63A.Timer_AttemptAmmoBeltUpdate
// [0x00020102] 
// Parameters infos:

void AKFWeap_LMG_Stoner63A::Timer_AttemptAmmoBeltUpdate ( )
{
	static UFunction* pFnTimer_AttemptAmmoBeltUpdate = NULL;

	if ( ! pFnTimer_AttemptAmmoBeltUpdate )
		pFnTimer_AttemptAmmoBeltUpdate = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_LMG_Stoner63A.Timer_AttemptAmmoBeltUpdate" );

	AKFWeap_LMG_Stoner63A_execTimer_AttemptAmmoBeltUpdate_Parms Timer_AttemptAmmoBeltUpdate_Parms;

	this->ProcessEvent ( pFnTimer_AttemptAmmoBeltUpdate, &Timer_AttemptAmmoBeltUpdate_Parms, NULL );
};

// Function kfgamecontent.KFWeap_LMG_Stoner63A.UpdateAmmoBeltBullets
// [0x00024102] 
// Parameters infos:

void AKFWeap_LMG_Stoner63A::UpdateAmmoBeltBullets ( )
{
	static UFunction* pFnUpdateAmmoBeltBullets = NULL;

	if ( ! pFnUpdateAmmoBeltBullets )
		pFnUpdateAmmoBeltBullets = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_LMG_Stoner63A.UpdateAmmoBeltBullets" );

	AKFWeap_LMG_Stoner63A_execUpdateAmmoBeltBullets_Parms UpdateAmmoBeltBullets_Parms;

	this->ProcessEvent ( pFnUpdateAmmoBeltBullets, &UpdateAmmoBeltBullets_Parms, NULL );
};

// Function kfgamecontent.KFWeap_LMG_Stoner63A.ANIMNOTIFY_RestoreAmmoBelt
// [0x00020102] 
// Parameters infos:

void AKFWeap_LMG_Stoner63A::ANIMNOTIFY_RestoreAmmoBelt ( )
{
	static UFunction* pFnANIMNOTIFY_RestoreAmmoBelt = NULL;

	if ( ! pFnANIMNOTIFY_RestoreAmmoBelt )
		pFnANIMNOTIFY_RestoreAmmoBelt = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_LMG_Stoner63A.ANIMNOTIFY_RestoreAmmoBelt" );

	AKFWeap_LMG_Stoner63A_execANIMNOTIFY_RestoreAmmoBelt_Parms ANIMNOTIFY_RestoreAmmoBelt_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_RestoreAmmoBelt, &ANIMNOTIFY_RestoreAmmoBelt_Parms, NULL );
};

// Function kfgamecontent.KFWeap_LMG_Stoner63A.PerformReload
// [0x00024102] 
// Parameters infos:

void AKFWeap_LMG_Stoner63A::PerformReload ( )
{
	static UFunction* pFnPerformReload = NULL;

	if ( ! pFnPerformReload )
		pFnPerformReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_LMG_Stoner63A.PerformReload" );

	AKFWeap_LMG_Stoner63A_execPerformReload_Parms PerformReload_Parms;

	this->ProcessEvent ( pFnPerformReload, &PerformReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_LMG_Stoner63A.ConsumeAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_LMG_Stoner63A::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_LMG_Stoner63A.ConsumeAmmo" );

	AKFWeap_LMG_Stoner63A_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_LMG_Stoner63A.PostBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_LMG_Stoner63A::eventPostBeginPlay ( )
{
	static UFunction* pFnPostBeginPlay = NULL;

	if ( ! pFnPostBeginPlay )
		pFnPostBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_LMG_Stoner63A.PostBeginPlay" );

	AKFWeap_LMG_Stoner63A_eventPostBeginPlay_Parms PostBeginPlay_Parms;

	this->ProcessEvent ( pFnPostBeginPlay, &PostBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFWeap_LMG_Stoner63A.ReplicatedEvent
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_LMG_Stoner63A::eventReplicatedEvent ( )
{
	static UFunction* pFnReplicatedEvent = NULL;

	if ( ! pFnReplicatedEvent )
		pFnReplicatedEvent = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_LMG_Stoner63A.ReplicatedEvent" );

	AKFWeap_LMG_Stoner63A_eventReplicatedEvent_Parms ReplicatedEvent_Parms;

	this->ProcessEvent ( pFnReplicatedEvent, &ReplicatedEvent_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Pistol_AF2011.SpawnProjectile
// [0x00020102] 
// Parameters infos:

void AKFWeap_Pistol_AF2011::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Pistol_AF2011.SpawnProjectile" );

	AKFWeap_Pistol_AF2011_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Pistol_DualAF2011.SpawnProjectile
// [0x00020102] 
// Parameters infos:

void AKFWeap_Pistol_DualAF2011::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Pistol_DualAF2011.SpawnProjectile" );

	AKFWeap_Pistol_DualAF2011_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Pistol_DualFlare.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Pistol_DualFlare::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Pistol_DualFlare.GetAltTraderFilter" );

	AKFWeap_Pistol_DualFlare_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Pistol_Flare.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Pistol_Flare::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Pistol_Flare.GetAltTraderFilter" );

	AKFWeap_Pistol_Flare_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_Hemogoblin.ProcessInstantHitEx
// [0x00424102] 
// Parameters infos:

void AKFWeap_Rifle_Hemogoblin::ProcessInstantHitEx ( )
{
	static UFunction* pFnProcessInstantHitEx = NULL;

	if ( ! pFnProcessInstantHitEx )
		pFnProcessInstantHitEx = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_Hemogoblin.ProcessInstantHitEx" );

	AKFWeap_Rifle_Hemogoblin_execProcessInstantHitEx_Parms ProcessInstantHitEx_Parms;

	this->ProcessEvent ( pFnProcessInstantHitEx, &ProcessInstantHitEx_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_Hemogoblin.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Rifle_Hemogoblin::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_Hemogoblin.GetTraderFilter" );

	AKFWeap_Rifle_Hemogoblin_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.WorldToCanvas
// [0x00820102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::WorldToCanvas ( )
{
	static UFunction* pFnWorldToCanvas = NULL;

	if ( ! pFnWorldToCanvas )
		pFnWorldToCanvas = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.WorldToCanvas" );

	AKFWeap_Rifle_RailGun_execWorldToCanvas_Parms WorldToCanvas_Parms;

	this->ProcessEvent ( pFnWorldToCanvas, &WorldToCanvas_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.DrawTargetingIcon
// [0x00820102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::DrawTargetingIcon ( )
{
	static UFunction* pFnDrawTargetingIcon = NULL;

	if ( ! pFnDrawTargetingIcon )
		pFnDrawTargetingIcon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.DrawTargetingIcon" );

	AKFWeap_Rifle_RailGun_execDrawTargetingIcon_Parms DrawTargetingIcon_Parms;

	this->ProcessEvent ( pFnDrawTargetingIcon, &DrawTargetingIcon_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.OnRender
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::OnRender ( )
{
	static UFunction* pFnOnRender = NULL;

	if ( ! pFnOnRender )
		pFnOnRender = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.OnRender" );

	AKFWeap_Rifle_RailGun_execOnRender_Parms OnRender_Parms;

	this->ProcessEvent ( pFnOnRender, &OnRender_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.InstantFireClient
// [0x00820102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::InstantFireClient ( )
{
	static UFunction* pFnInstantFireClient = NULL;

	if ( ! pFnInstantFireClient )
		pFnInstantFireClient = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.InstantFireClient" );

	AKFWeap_Rifle_RailGun_execInstantFireClient_Parms InstantFireClient_Parms;

	this->ProcessEvent ( pFnInstantFireClient, &InstantFireClient_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Rifle_RailGun::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.Destroyed" );

	AKFWeap_Rifle_RailGun_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.PlayTargetingBeepTimer
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::PlayTargetingBeepTimer ( )
{
	static UFunction* pFnPlayTargetingBeepTimer = NULL;

	if ( ! pFnPlayTargetingBeepTimer )
		pFnPlayTargetingBeepTimer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.PlayTargetingBeepTimer" );

	AKFWeap_Rifle_RailGun_execPlayTargetingBeepTimer_Parms PlayTargetingBeepTimer_Parms;

	this->ProcessEvent ( pFnPlayTargetingBeepTimer, &PlayTargetingBeepTimer_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.AddTargetingZones
// [0x00C20102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::AddTargetingZones ( )
{
	static UFunction* pFnAddTargetingZones = NULL;

	if ( ! pFnAddTargetingZones )
		pFnAddTargetingZones = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.AddTargetingZones" );

	AKFWeap_Rifle_RailGun_execAddTargetingZones_Parms AddTargetingZones_Parms;

	this->ProcessEvent ( pFnAddTargetingZones, &AddTargetingZones_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.ServerSetTargetingLocation
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeap_Rifle_RailGun::ServerSetTargetingLocation ( )
{
	static UFunction* pFnServerSetTargetingLocation = NULL;

	if ( ! pFnServerSetTargetingLocation )
		pFnServerSetTargetingLocation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.ServerSetTargetingLocation" );

	AKFWeap_Rifle_RailGun_execServerSetTargetingLocation_Parms ServerSetTargetingLocation_Parms;

	this->ProcessEvent ( pFnServerSetTargetingLocation, &ServerSetTargetingLocation_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.CheckTargetLock
// [0x00820102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::CheckTargetLock ( )
{
	static UFunction* pFnCheckTargetLock = NULL;

	if ( ! pFnCheckTargetLock )
		pFnCheckTargetLock = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.CheckTargetLock" );

	AKFWeap_Rifle_RailGun_execCheckTargetLock_Parms CheckTargetLock_Parms;

	this->ProcessEvent ( pFnCheckTargetLock, &CheckTargetLock_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.AllowTargetLockOn
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::AllowTargetLockOn ( )
{
	static UFunction* pFnAllowTargetLockOn = NULL;

	if ( ! pFnAllowTargetLockOn )
		pFnAllowTargetLockOn = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.AllowTargetLockOn" );

	AKFWeap_Rifle_RailGun_execAllowTargetLockOn_Parms AllowTargetLockOn_Parms;

	this->ProcessEvent ( pFnAllowTargetLockOn, &AllowTargetLockOn_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.AdjustLockTarget
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::AdjustLockTarget ( )
{
	static UFunction* pFnAdjustLockTarget = NULL;

	if ( ! pFnAdjustLockTarget )
		pFnAdjustLockTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.AdjustLockTarget" );

	AKFWeap_Rifle_RailGun_execAdjustLockTarget_Parms AdjustLockTarget_Parms;

	this->ProcessEvent ( pFnAdjustLockTarget, &AdjustLockTarget_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.CanLockOnTo
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::CanLockOnTo ( )
{
	static UFunction* pFnCanLockOnTo = NULL;

	if ( ! pFnCanLockOnTo )
		pFnCanLockOnTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.CanLockOnTo" );

	AKFWeap_Rifle_RailGun_execCanLockOnTo_Parms CanLockOnTo_Parms;

	this->ProcessEvent ( pFnCanLockOnTo, &CanLockOnTo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Rifle_RailGun::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.Tick" );

	AKFWeap_Rifle_RailGun_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.DetachWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.DetachWeapon" );

	AKFWeap_Rifle_RailGun_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.StopAmbientSound
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::StopAmbientSound ( )
{
	static UFunction* pFnStopAmbientSound = NULL;

	if ( ! pFnStopAmbientSound )
		pFnStopAmbientSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.StopAmbientSound" );

	AKFWeap_Rifle_RailGun_execStopAmbientSound_Parms StopAmbientSound_Parms;

	this->ProcessEvent ( pFnStopAmbientSound, &StopAmbientSound_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.StartAmbientSound
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::StartAmbientSound ( )
{
	static UFunction* pFnStartAmbientSound = NULL;

	if ( ! pFnStartAmbientSound )
		pFnStartAmbientSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.StartAmbientSound" );

	AKFWeap_Rifle_RailGun_execStartAmbientSound_Parms StartAmbientSound_Parms;

	this->ProcessEvent ( pFnStartAmbientSound, &StartAmbientSound_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.GetReloadAnimName
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::GetReloadAnimName ( )
{
	static UFunction* pFnGetReloadAnimName = NULL;

	if ( ! pFnGetReloadAnimName )
		pFnGetReloadAnimName = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.GetReloadAnimName" );

	AKFWeap_Rifle_RailGun_execGetReloadAnimName_Parms GetReloadAnimName_Parms;

	this->ProcessEvent ( pFnGetReloadAnimName, &GetReloadAnimName_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.ShouldPlayFireLast
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::ShouldPlayFireLast ( )
{
	static UFunction* pFnShouldPlayFireLast = NULL;

	if ( ! pFnShouldPlayFireLast )
		pFnShouldPlayFireLast = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.ShouldPlayFireLast" );

	AKFWeap_Rifle_RailGun_execShouldPlayFireLast_Parms ShouldPlayFireLast_Parms;

	this->ProcessEvent ( pFnShouldPlayFireLast, &ShouldPlayFireLast_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.StartFire" );

	AKFWeap_Rifle_RailGun_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.ClientWeaponSet
// [0x010241C2] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::ClientWeaponSet ( )
{
	static UFunction* pFnClientWeaponSet = NULL;

	if ( ! pFnClientWeaponSet )
		pFnClientWeaponSet = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.ClientWeaponSet" );

	AKFWeap_Rifle_RailGun_execClientWeaponSet_Parms ClientWeaponSet_Parms;

	this->ProcessEvent ( pFnClientWeaponSet, &ClientWeaponSet_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Rifle_RailGun.InitFOV
// [0x00020102] 
// Parameters infos:

void AKFWeap_Rifle_RailGun::InitFOV ( )
{
	static UFunction* pFnInitFOV = NULL;

	if ( ! pFnInitFOV )
		pFnInitFOV = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Rifle_RailGun.InitFOV" );

	AKFWeap_Rifle_RailGun_execInitFOV_Parms InitFOV_Parms;

	this->ProcessEvent ( pFnInitFOV, &InitFOV_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_RPG7.ANIMNOTIFY_LockBolt
// [0x00020102] 
// Parameters infos:

void AKFWeap_RocketLauncher_RPG7::ANIMNOTIFY_LockBolt ( )
{
	static UFunction* pFnANIMNOTIFY_LockBolt = NULL;

	if ( ! pFnANIMNOTIFY_LockBolt )
		pFnANIMNOTIFY_LockBolt = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_RPG7.ANIMNOTIFY_LockBolt" );

	AKFWeap_RocketLauncher_RPG7_execANIMNOTIFY_LockBolt_Parms ANIMNOTIFY_LockBolt_Parms;

	this->ProcessEvent ( pFnANIMNOTIFY_LockBolt, &ANIMNOTIFY_LockBolt_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_RPG7.GetBackBlastLocationAndRotation
// [0x00C20102] 
// Parameters infos:

void AKFWeap_RocketLauncher_RPG7::GetBackBlastLocationAndRotation ( )
{
	static UFunction* pFnGetBackBlastLocationAndRotation = NULL;

	if ( ! pFnGetBackBlastLocationAndRotation )
		pFnGetBackBlastLocationAndRotation = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_RPG7.GetBackBlastLocationAndRotation" );

	AKFWeap_RocketLauncher_RPG7_execGetBackBlastLocationAndRotation_Parms GetBackBlastLocationAndRotation_Parms;

	this->ProcessEvent ( pFnGetBackBlastLocationAndRotation, &GetBackBlastLocationAndRotation_Parms, NULL );
};

// Function kfgamecontent.KFWeap_RocketLauncher_RPG7.CustomFire
// [0x00820102] 
// Parameters infos:

void AKFWeap_RocketLauncher_RPG7::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_RocketLauncher_RPG7.CustomFire" );

	AKFWeap_RocketLauncher_RPG7_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_DoubleBarrel.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_DoubleBarrel::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_DoubleBarrel.CauseMuzzleFlash" );

	AKFWeap_Shotgun_DoubleBarrel_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_DoubleBarrel.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_DoubleBarrel::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_DoubleBarrel.GetWeaponFireAnim" );

	AKFWeap_Shotgun_DoubleBarrel_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_DoubleBarrel.SendToFiringState
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_DoubleBarrel::SendToFiringState ( )
{
	static UFunction* pFnSendToFiringState = NULL;

	if ( ! pFnSendToFiringState )
		pFnSendToFiringState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_DoubleBarrel.SendToFiringState" );

	AKFWeap_Shotgun_DoubleBarrel_execSendToFiringState_Parms SendToFiringState_Parms;

	this->ProcessEvent ( pFnSendToFiringState, &SendToFiringState_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_DoubleBarrel.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_DoubleBarrel::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_DoubleBarrel.AltFireMode" );

	AKFWeap_Shotgun_DoubleBarrel_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_DragonsBreath.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Shotgun_DragonsBreath::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_DragonsBreath.GetAltTraderFilter" );

	AKFWeap_Shotgun_DragonsBreath_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_ElephantGun.BeginState
// [0x00820102] 
// Parameters infos:

void AKFWeap_Shotgun_ElephantGun::BeginState ( )
{
	static UFunction* pFnBeginState = NULL;

	if ( ! pFnBeginState )
		pFnBeginState = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_ElephantGun.BeginState" );

	AKFWeap_Shotgun_ElephantGun_execBeginState_Parms BeginState_Parms;

	this->ProcessEvent ( pFnBeginState, &BeginState_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_ElephantGun.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_ElephantGun::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_ElephantGun.GetWeaponFireAnim" );

	AKFWeap_Shotgun_ElephantGun_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_ElephantGun.GetNumProjectilesToFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_ElephantGun::GetNumProjectilesToFire ( )
{
	static UFunction* pFnGetNumProjectilesToFire = NULL;

	if ( ! pFnGetNumProjectilesToFire )
		pFnGetNumProjectilesToFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_ElephantGun.GetNumProjectilesToFire" );

	AKFWeap_Shotgun_ElephantGun_execGetNumProjectilesToFire_Parms GetNumProjectilesToFire_Parms;

	this->ProcessEvent ( pFnGetNumProjectilesToFire, &GetNumProjectilesToFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_ElephantGun.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_ElephantGun::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_ElephantGun.AltFireMode" );

	AKFWeap_Shotgun_ElephantGun_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_HZ12.ShouldPlayFireLast
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_HZ12::ShouldPlayFireLast ( )
{
	static UFunction* pFnShouldPlayFireLast = NULL;

	if ( ! pFnShouldPlayFireLast )
		pFnShouldPlayFireLast = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_HZ12.ShouldPlayFireLast" );

	AKFWeap_Shotgun_HZ12_execShouldPlayFireLast_Parms ShouldPlayFireLast_Parms;

	this->ProcessEvent ( pFnShouldPlayFireLast, &ShouldPlayFireLast_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_HZ12.PerformReload
// [0x00024102] 
// Parameters infos:

void AKFWeap_Shotgun_HZ12::PerformReload ( )
{
	static UFunction* pFnPerformReload = NULL;

	if ( ! pFnPerformReload )
		pFnPerformReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_HZ12.PerformReload" );

	AKFWeap_Shotgun_HZ12_execPerformReload_Parms PerformReload_Parms;

	this->ProcessEvent ( pFnPerformReload, &PerformReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_HZ12.ConsumeAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_HZ12::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_HZ12.ConsumeAmmo" );

	AKFWeap_Shotgun_HZ12_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_HZ12.GetFireInterval
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_HZ12::GetFireInterval ( )
{
	static UFunction* pFnGetFireInterval = NULL;

	if ( ! pFnGetFireInterval )
		pFnGetFireInterval = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_HZ12.GetFireInterval" );

	AKFWeap_Shotgun_HZ12_execGetFireInterval_Parms GetFireInterval_Parms;

	this->ProcessEvent ( pFnGetFireInterval, &GetFireInterval_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_HZ12.IsPumpFire
// [0x00080102] 
// Parameters infos:

void AKFWeap_Shotgun_HZ12::IsPumpFire ( )
{
	static UFunction* pFnIsPumpFire = NULL;

	if ( ! pFnIsPumpFire )
		pFnIsPumpFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_HZ12.IsPumpFire" );

	AKFWeap_Shotgun_HZ12_execIsPumpFire_Parms IsPumpFire_Parms;

	this->ProcessEvent ( pFnIsPumpFire, &IsPumpFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_Medic.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Shotgun_Medic::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_Medic.GetTraderFilter" );

	AKFWeap_Shotgun_Medic_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_Medic.CalculateTraderWeaponStatDamage
// [0x00022102] 
// Parameters infos:

void AKFWeap_Shotgun_Medic::CalculateTraderWeaponStatDamage ( )
{
	static UFunction* pFnCalculateTraderWeaponStatDamage = NULL;

	if ( ! pFnCalculateTraderWeaponStatDamage )
		pFnCalculateTraderWeaponStatDamage = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_Medic.CalculateTraderWeaponStatDamage" );

	AKFWeap_Shotgun_Medic_execCalculateTraderWeaponStatDamage_Parms CalculateTraderWeaponStatDamage_Parms;

	this->ProcessEvent ( pFnCalculateTraderWeaponStatDamage, &CalculateTraderWeaponStatDamage_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_Medic.HandleWeaponShotTaken
// [0x00020002] 
// Parameters infos:

void AKFWeap_Shotgun_Medic::HandleWeaponShotTaken ( )
{
	static UFunction* pFnHandleWeaponShotTaken = NULL;

	if ( ! pFnHandleWeaponShotTaken )
		pFnHandleWeaponShotTaken = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_Medic.HandleWeaponShotTaken" );

	AKFWeap_Shotgun_Medic_execHandleWeaponShotTaken_Parms HandleWeaponShotTaken_Parms;

	this->ProcessEvent ( pFnHandleWeaponShotTaken, &HandleWeaponShotTaken_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_Medic.AddSpread
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_Medic::AddSpread ( )
{
	static UFunction* pFnAddSpread = NULL;

	if ( ! pFnAddSpread )
		pFnAddSpread = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_Medic.AddSpread" );

	AKFWeap_Shotgun_Medic_execAddSpread_Parms AddSpread_Parms;

	this->ProcessEvent ( pFnAddSpread, &AddSpread_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_Medic.SpawnProjectile
// [0x00820102] 
// Parameters infos:

void AKFWeap_Shotgun_Medic::SpawnProjectile ( )
{
	static UFunction* pFnSpawnProjectile = NULL;

	if ( ! pFnSpawnProjectile )
		pFnSpawnProjectile = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_Medic.SpawnProjectile" );

	AKFWeap_Shotgun_Medic_execSpawnProjectile_Parms SpawnProjectile_Parms;

	this->ProcessEvent ( pFnSpawnProjectile, &SpawnProjectile_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_Nailgun.GetWeaponFireAnim
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_Nailgun::GetWeaponFireAnim ( )
{
	static UFunction* pFnGetWeaponFireAnim = NULL;

	if ( ! pFnGetWeaponFireAnim )
		pFnGetWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_Nailgun.GetWeaponFireAnim" );

	AKFWeap_Shotgun_Nailgun_execGetWeaponFireAnim_Parms GetWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnGetWeaponFireAnim, &GetWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_Nailgun.GetNumProjectilesToFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_Nailgun::GetNumProjectilesToFire ( )
{
	static UFunction* pFnGetNumProjectilesToFire = NULL;

	if ( ! pFnGetNumProjectilesToFire )
		pFnGetNumProjectilesToFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_Nailgun.GetNumProjectilesToFire" );

	AKFWeap_Shotgun_Nailgun_execGetNumProjectilesToFire_Parms GetNumProjectilesToFire_Parms;

	this->ProcessEvent ( pFnGetNumProjectilesToFire, &GetNumProjectilesToFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Shotgun_Nailgun.ConsumeAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_Shotgun_Nailgun::ConsumeAmmo ( )
{
	static UFunction* pFnConsumeAmmo = NULL;

	if ( ! pFnConsumeAmmo )
		pFnConsumeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Shotgun_Nailgun.ConsumeAmmo" );

	AKFWeap_Shotgun_Nailgun_execConsumeAmmo_Parms ConsumeAmmo_Parms;

	this->ProcessEvent ( pFnConsumeAmmo, &ConsumeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_SMG_Mac10.GetAltTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_SMG_Mac10::eventGetAltTraderFilter ( )
{
	static UFunction* pFnGetAltTraderFilter = NULL;

	if ( ! pFnGetAltTraderFilter )
		pFnGetAltTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_SMG_Mac10.GetAltTraderFilter" );

	AKFWeap_SMG_Mac10_eventGetAltTraderFilter_Parms GetAltTraderFilter_Parms;

	this->ProcessEvent ( pFnGetAltTraderFilter, &GetAltTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_SMG_Medic.GetTraderFilter
// [0x00022902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_SMG_Medic::eventGetTraderFilter ( )
{
	static UFunction* pFnGetTraderFilter = NULL;

	if ( ! pFnGetTraderFilter )
		pFnGetTraderFilter = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_SMG_Medic.GetTraderFilter" );

	AKFWeap_SMG_Medic_eventGetTraderFilter_Parms GetTraderFilter_Parms;

	this->ProcessEvent ( pFnGetTraderFilter, &GetTraderFilter_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.TickAutoUnequip
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::TickAutoUnequip ( )
{
	static UFunction* pFnTickAutoUnequip = NULL;

	if ( ! pFnTickAutoUnequip )
		pFnTickAutoUnequip = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.TickAutoUnequip" );

	AKFWeap_Welder_execTickAutoUnequip_Parms TickAutoUnequip_Parms;

	this->ProcessEvent ( pFnTickAutoUnequip, &TickAutoUnequip_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.PlayReadyTransition
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::PlayReadyTransition ( )
{
	static UFunction* pFnPlayReadyTransition = NULL;

	if ( ! pFnPlayReadyTransition )
		pFnPlayReadyTransition = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.PlayReadyTransition" );

	AKFWeap_Welder_execPlayReadyTransition_Parms PlayReadyTransition_Parms;

	this->ProcessEvent ( pFnPlayReadyTransition, &PlayReadyTransition_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.ServerSetWeldTarget
// [0x002400C3] ( FUNC_Final )
// Parameters infos:

void AKFWeap_Welder::ServerSetWeldTarget ( )
{
	static UFunction* pFnServerSetWeldTarget = NULL;

	if ( ! pFnServerSetWeldTarget )
		pFnServerSetWeldTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.ServerSetWeldTarget" );

	AKFWeap_Welder_execServerSetWeldTarget_Parms ServerSetWeldTarget_Parms;

	this->ProcessEvent ( pFnServerSetWeldTarget, &ServerSetWeldTarget_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.FindRepairableDoor
// [0x00820102] 
// Parameters infos:

void AKFWeap_Welder::FindRepairableDoor ( )
{
	static UFunction* pFnFindRepairableDoor = NULL;

	if ( ! pFnFindRepairableDoor )
		pFnFindRepairableDoor = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.FindRepairableDoor" );

	AKFWeap_Welder_execFindRepairableDoor_Parms FindRepairableDoor_Parms;

	this->ProcessEvent ( pFnFindRepairableDoor, &FindRepairableDoor_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.TraceWeldables
// [0x00820102] 
// Parameters infos:

void AKFWeap_Welder::TraceWeldables ( )
{
	static UFunction* pFnTraceWeldables = NULL;

	if ( ! pFnTraceWeldables )
		pFnTraceWeldables = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.TraceWeldables" );

	AKFWeap_Welder_execTraceWeldables_Parms TraceWeldables_Parms;

	this->ProcessEvent ( pFnTraceWeldables, &TraceWeldables_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.TickWeldTarget
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::TickWeldTarget ( )
{
	static UFunction* pFnTickWeldTarget = NULL;

	if ( ! pFnTickWeldTarget )
		pFnTickWeldTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.TickWeldTarget" );

	AKFWeap_Welder_execTickWeldTarget_Parms TickWeldTarget_Parms;

	this->ProcessEvent ( pFnTickWeldTarget, &TickWeldTarget_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.CheckDelayedStartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::CheckDelayedStartFire ( )
{
	static UFunction* pFnCheckDelayedStartFire = NULL;

	if ( ! pFnCheckDelayedStartFire )
		pFnCheckDelayedStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.CheckDelayedStartFire" );

	AKFWeap_Welder_execCheckDelayedStartFire_Parms CheckDelayedStartFire_Parms;

	this->ProcessEvent ( pFnCheckDelayedStartFire, &CheckDelayedStartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.ClientRefire
// [0x010201C2] 
// Parameters infos:

void AKFWeap_Welder::ClientRefire ( )
{
	static UFunction* pFnClientRefire = NULL;

	if ( ! pFnClientRefire )
		pFnClientRefire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.ClientRefire" );

	AKFWeap_Welder_execClientRefire_Parms ClientRefire_Parms;

	this->ProcessEvent ( pFnClientRefire, &ClientRefire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.Refire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::Refire ( )
{
	static UFunction* pFnRefire = NULL;

	if ( ! pFnRefire )
		pFnRefire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.Refire" );

	AKFWeap_Welder_execRefire_Parms Refire_Parms;

	this->ProcessEvent ( pFnRefire, &Refire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.RechargeAmmo
// [0x00020002] 
// Parameters infos:

void AKFWeap_Welder::RechargeAmmo ( )
{
	static UFunction* pFnRechargeAmmo = NULL;

	if ( ! pFnRechargeAmmo )
		pFnRechargeAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.RechargeAmmo" );

	AKFWeap_Welder_execRechargeAmmo_Parms RechargeAmmo_Parms;

	this->ProcessEvent ( pFnRechargeAmmo, &RechargeAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.CanWeldTarget
// [0x00024102] 
// Parameters infos:

void AKFWeap_Welder::CanWeldTarget ( )
{
	static UFunction* pFnCanWeldTarget = NULL;

	if ( ! pFnCanWeldTarget )
		pFnCanWeldTarget = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.CanWeldTarget" );

	AKFWeap_Welder_execCanWeldTarget_Parms CanWeldTarget_Parms;

	this->ProcessEvent ( pFnCanWeldTarget, &CanWeldTarget_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.CustomFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::CustomFire ( )
{
	static UFunction* pFnCustomFire = NULL;

	if ( ! pFnCustomFire )
		pFnCustomFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.CustomFire" );

	AKFWeap_Welder_execCustomFire_Parms CustomFire_Parms;

	this->ProcessEvent ( pFnCustomFire, &CustomFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.StartFire" );

	AKFWeap_Welder_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.AltFireMode
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::AltFireMode ( )
{
	static UFunction* pFnAltFireMode = NULL;

	if ( ! pFnAltFireMode )
		pFnAltFireMode = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.AltFireMode" );

	AKFWeap_Welder_execAltFireMode_Parms AltFireMode_Parms;

	this->ProcessEvent ( pFnAltFireMode, &AltFireMode_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.SetIronSights
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::SetIronSights ( )
{
	static UFunction* pFnSetIronSights = NULL;

	if ( ! pFnSetIronSights )
		pFnSetIronSights = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.SetIronSights" );

	AKFWeap_Welder_execSetIronSights_Parms SetIronSights_Parms;

	this->ProcessEvent ( pFnSetIronSights, &SetIronSights_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.ShouldAutoReload
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::ShouldAutoReload ( )
{
	static UFunction* pFnShouldAutoReload = NULL;

	if ( ! pFnShouldAutoReload )
		pFnShouldAutoReload = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.ShouldAutoReload" );

	AKFWeap_Welder_execShouldAutoReload_Parms ShouldAutoReload_Parms;

	this->ProcessEvent ( pFnShouldAutoReload, &ShouldAutoReload_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.HasAmmo
// [0x00024102] 
// Parameters infos:

void AKFWeap_Welder::HasAmmo ( )
{
	static UFunction* pFnHasAmmo = NULL;

	if ( ! pFnHasAmmo )
		pFnHasAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.HasAmmo" );

	AKFWeap_Welder_execHasAmmo_Parms HasAmmo_Parms;

	this->ProcessEvent ( pFnHasAmmo, &HasAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.HasAnyAmmo
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::HasAnyAmmo ( )
{
	static UFunction* pFnHasAnyAmmo = NULL;

	if ( ! pFnHasAnyAmmo )
		pFnHasAnyAmmo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.HasAnyAmmo" );

	AKFWeap_Welder_execHasAnyAmmo_Parms HasAnyAmmo_Parms;

	this->ProcessEvent ( pFnHasAnyAmmo, &HasAnyAmmo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.UpdateScreenUI
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::UpdateScreenUI ( )
{
	static UFunction* pFnUpdateScreenUI = NULL;

	if ( ! pFnUpdateScreenUI )
		pFnUpdateScreenUI = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.UpdateScreenUI" );

	AKFWeap_Welder_execUpdateScreenUI_Parms UpdateScreenUI_Parms;

	this->ProcessEvent ( pFnUpdateScreenUI, &UpdateScreenUI_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.Destroyed
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Welder::eventDestroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.Destroyed" );

	AKFWeap_Welder_eventDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Welder::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.Tick" );

	AKFWeap_Welder_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.DetachWeapon
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::DetachWeapon ( )
{
	static UFunction* pFnDetachWeapon = NULL;

	if ( ! pFnDetachWeapon )
		pFnDetachWeapon = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.DetachWeapon" );

	AKFWeap_Welder_execDetachWeapon_Parms DetachWeapon_Parms;

	this->ProcessEvent ( pFnDetachWeapon, &DetachWeapon_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.AttachWeaponTo
// [0x00024102] 
// Parameters infos:

void AKFWeap_Welder::AttachWeaponTo ( )
{
	static UFunction* pFnAttachWeaponTo = NULL;

	if ( ! pFnAttachWeaponTo )
		pFnAttachWeaponTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.AttachWeaponTo" );

	AKFWeap_Welder_execAttachWeaponTo_Parms AttachWeaponTo_Parms;

	this->ProcessEvent ( pFnAttachWeaponTo, &AttachWeaponTo_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.SetShownInInventory
// [0x00020102] 
// Parameters infos:

void AKFWeap_Welder::SetShownInInventory ( )
{
	static UFunction* pFnSetShownInInventory = NULL;

	if ( ! pFnSetShownInInventory )
		pFnSetShownInInventory = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.SetShownInInventory" );

	AKFWeap_Welder_execSetShownInInventory_Parms SetShownInInventory_Parms;

	this->ProcessEvent ( pFnSetShownInInventory, &SetShownInInventory_Parms, NULL );
};

// Function kfgamecontent.KFWeap_Welder.PreBeginPlay
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeap_Welder::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeap_Welder.PreBeginPlay" );

	AKFWeap_Welder_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Dual_C4.UnHide
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Dual_C4::UnHide ( )
{
	static UFunction* pFnUnHide = NULL;

	if ( ! pFnUnHide )
		pFnUnHide = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Dual_C4.UnHide" );

	AKFWeapAttach_Dual_C4_execUnHide_Parms UnHide_Parms;

	this->ProcessEvent ( pFnUnHide, &UnHide_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Dual_C4.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Dual_C4::ThirdPersonFireEffects ( )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Dual_C4.ThirdPersonFireEffects" );

	AKFWeapAttach_Dual_C4_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Eviscerator.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Eviscerator::ThirdPersonFireEffects ( )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Eviscerator.ThirdPersonFireEffects" );

	AKFWeapAttach_Eviscerator_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Eviscerator.PreBeginPlay
// [0x00020802] ( FUNC_Event )
// Parameters infos:

void AKFWeapAttach_Eviscerator::eventPreBeginPlay ( )
{
	static UFunction* pFnPreBeginPlay = NULL;

	if ( ! pFnPreBeginPlay )
		pFnPreBeginPlay = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Eviscerator.PreBeginPlay" );

	AKFWeapAttach_Eviscerator_eventPreBeginPlay_Parms PreBeginPlay_Parms;

	this->ProcessEvent ( pFnPreBeginPlay, &PreBeginPlay_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Flamethrower.TurnOffFireSpray
// [0x00080102] 
// Parameters infos:

void AKFWeapAttach_Flamethrower::TurnOffFireSpray ( )
{
	static UFunction* pFnTurnOffFireSpray = NULL;

	if ( ! pFnTurnOffFireSpray )
		pFnTurnOffFireSpray = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Flamethrower.TurnOffFireSpray" );

	AKFWeapAttach_Flamethrower_execTurnOffFireSpray_Parms TurnOffFireSpray_Parms;

	this->ProcessEvent ( pFnTurnOffFireSpray, &TurnOffFireSpray_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Flamethrower.TurnOnFireSpray
// [0x00080102] 
// Parameters infos:

void AKFWeapAttach_Flamethrower::TurnOnFireSpray ( )
{
	static UFunction* pFnTurnOnFireSpray = NULL;

	if ( ! pFnTurnOnFireSpray )
		pFnTurnOnFireSpray = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Flamethrower.TurnOnFireSpray" );

	AKFWeapAttach_Flamethrower_execTurnOnFireSpray_Parms TurnOnFireSpray_Parms;

	this->ProcessEvent ( pFnTurnOnFireSpray, &TurnOnFireSpray_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Flamethrower.TurnOffPilot
// [0x00080102] 
// Parameters infos:

void AKFWeapAttach_Flamethrower::TurnOffPilot ( )
{
	static UFunction* pFnTurnOffPilot = NULL;

	if ( ! pFnTurnOffPilot )
		pFnTurnOffPilot = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Flamethrower.TurnOffPilot" );

	AKFWeapAttach_Flamethrower_execTurnOffPilot_Parms TurnOffPilot_Parms;

	this->ProcessEvent ( pFnTurnOffPilot, &TurnOffPilot_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Flamethrower.TurnOnPilot
// [0x00080102] 
// Parameters infos:

void AKFWeapAttach_Flamethrower::TurnOnPilot ( )
{
	static UFunction* pFnTurnOnPilot = NULL;

	if ( ! pFnTurnOnPilot )
		pFnTurnOnPilot = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Flamethrower.TurnOnPilot" );

	AKFWeapAttach_Flamethrower_execTurnOnPilot_Parms TurnOnPilot_Parms;

	this->ProcessEvent ( pFnTurnOnPilot, &TurnOnPilot_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_HuskCannon.GetChargeFXLevel
// [0x00020002] 
// Parameters infos:

void AKFWeapAttach_HuskCannon::GetChargeFXLevel ( )
{
	static UFunction* pFnGetChargeFXLevel = NULL;

	if ( ! pFnGetChargeFXLevel )
		pFnGetChargeFXLevel = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_HuskCannon.GetChargeFXLevel" );

	AKFWeapAttach_HuskCannon_execGetChargeFXLevel_Parms GetChargeFXLevel_Parms;

	this->ProcessEvent ( pFnGetChargeFXLevel, &GetChargeFXLevel_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_HuskCannon.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_HuskCannon::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_HuskCannon.CauseMuzzleFlash" );

	AKFWeapAttach_HuskCannon_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_HuskCannon.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_HuskCannon::ThirdPersonFireEffects ( )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_HuskCannon.ThirdPersonFireEffects" );

	AKFWeapAttach_HuskCannon_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_HuskCannon.FirstPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_HuskCannon::FirstPersonFireEffects ( )
{
	static UFunction* pFnFirstPersonFireEffects = NULL;

	if ( ! pFnFirstPersonFireEffects )
		pFnFirstPersonFireEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_HuskCannon.FirstPersonFireEffects" );

	AKFWeapAttach_HuskCannon_execFirstPersonFireEffects_Parms FirstPersonFireEffects_Parms;

	this->ProcessEvent ( pFnFirstPersonFireEffects, &FirstPersonFireEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_HuskCannon.Tick
// [0x00020902] ( FUNC_Event )
// Parameters infos:

void AKFWeapAttach_HuskCannon::eventTick ( )
{
	static UFunction* pFnTick = NULL;

	if ( ! pFnTick )
		pFnTick = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_HuskCannon.Tick" );

	AKFWeapAttach_HuskCannon_eventTick_Parms Tick_Parms;

	this->ProcessEvent ( pFnTick, &Tick_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_HuskCannon.StartFire
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_HuskCannon::StartFire ( )
{
	static UFunction* pFnStartFire = NULL;

	if ( ! pFnStartFire )
		pFnStartFire = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_HuskCannon.StartFire" );

	AKFWeapAttach_HuskCannon_execStartFire_Parms StartFire_Parms;

	this->ProcessEvent ( pFnStartFire, &StartFire_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_M99.SpawnTracer
// [0x00820102] 
// Parameters infos:

void AKFWeapAttach_M99::SpawnTracer ( )
{
	static UFunction* pFnSpawnTracer = NULL;

	if ( ! pFnSpawnTracer )
		pFnSpawnTracer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_M99.SpawnTracer" );

	AKFWeapAttach_M99_execSpawnTracer_Parms SpawnTracer_Parms;

	this->ProcessEvent ( pFnSpawnTracer, &SpawnTracer_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_MaceAndShield.PlayWeaponMeshAnim
// [0x00020100] 
// Parameters infos:

void AKFWeapAttach_MaceAndShield::PlayWeaponMeshAnim ( )
{
	static UFunction* pFnPlayWeaponMeshAnim = NULL;

	if ( ! pFnPlayWeaponMeshAnim )
		pFnPlayWeaponMeshAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_MaceAndShield.PlayWeaponMeshAnim" );

	AKFWeapAttach_MaceAndShield_execPlayWeaponMeshAnim_Parms PlayWeaponMeshAnim_Parms;

	this->ProcessEvent ( pFnPlayWeaponMeshAnim, &PlayWeaponMeshAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_MaceAndShield.PlayWeaponFireAnim
// [0x00020100] 
// Parameters infos:

void AKFWeapAttach_MaceAndShield::PlayWeaponFireAnim ( )
{
	static UFunction* pFnPlayWeaponFireAnim = NULL;

	if ( ! pFnPlayWeaponFireAnim )
		pFnPlayWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_MaceAndShield.PlayWeaponFireAnim" );

	AKFWeapAttach_MaceAndShield_execPlayWeaponFireAnim_Parms PlayWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnPlayWeaponFireAnim, &PlayWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_MultiAmmo.PlayReloadMagazineAnim
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_MultiAmmo::PlayReloadMagazineAnim ( )
{
	static UFunction* pFnPlayReloadMagazineAnim = NULL;

	if ( ! pFnPlayReloadMagazineAnim )
		pFnPlayReloadMagazineAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_MultiAmmo.PlayReloadMagazineAnim" );

	AKFWeapAttach_MultiAmmo_execPlayReloadMagazineAnim_Parms PlayReloadMagazineAnim_Parms;

	this->ProcessEvent ( pFnPlayReloadMagazineAnim, &PlayReloadMagazineAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_MultiAmmo.CauseMuzzleFlash
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_MultiAmmo::CauseMuzzleFlash ( )
{
	static UFunction* pFnCauseMuzzleFlash = NULL;

	if ( ! pFnCauseMuzzleFlash )
		pFnCauseMuzzleFlash = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_MultiAmmo.CauseMuzzleFlash" );

	AKFWeapAttach_MultiAmmo_execCauseMuzzleFlash_Parms CauseMuzzleFlash_Parms;

	this->ProcessEvent ( pFnCauseMuzzleFlash, &CauseMuzzleFlash_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_PowerGloves.PlayWeaponMeshAnim
// [0x00020100] 
// Parameters infos:

void AKFWeapAttach_PowerGloves::PlayWeaponMeshAnim ( )
{
	static UFunction* pFnPlayWeaponMeshAnim = NULL;

	if ( ! pFnPlayWeaponMeshAnim )
		pFnPlayWeaponMeshAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_PowerGloves.PlayWeaponMeshAnim" );

	AKFWeapAttach_PowerGloves_execPlayWeaponMeshAnim_Parms PlayWeaponMeshAnim_Parms;

	this->ProcessEvent ( pFnPlayWeaponMeshAnim, &PlayWeaponMeshAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_PowerGloves.PlayWeaponFireAnim
// [0x00020100] 
// Parameters infos:

void AKFWeapAttach_PowerGloves::PlayWeaponFireAnim ( )
{
	static UFunction* pFnPlayWeaponFireAnim = NULL;

	if ( ! pFnPlayWeaponFireAnim )
		pFnPlayWeaponFireAnim = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_PowerGloves.PlayWeaponFireAnim" );

	AKFWeapAttach_PowerGloves_execPlayWeaponFireAnim_Parms PlayWeaponFireAnim_Parms;

	this->ProcessEvent ( pFnPlayWeaponFireAnim, &PlayWeaponFireAnim_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Pulverizer.UpdateThirdPersonWeaponAction
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Pulverizer::UpdateThirdPersonWeaponAction ( )
{
	static UFunction* pFnUpdateThirdPersonWeaponAction = NULL;

	if ( ! pFnUpdateThirdPersonWeaponAction )
		pFnUpdateThirdPersonWeaponAction = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Pulverizer.UpdateThirdPersonWeaponAction" );

	AKFWeapAttach_Pulverizer_execUpdateThirdPersonWeaponAction_Parms UpdateThirdPersonWeaponAction_Parms;

	this->ProcessEvent ( pFnUpdateThirdPersonWeaponAction, &UpdateThirdPersonWeaponAction_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Pulverizer.PlayPulverizerShoot
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Pulverizer::PlayPulverizerShoot ( )
{
	static UFunction* pFnPlayPulverizerShoot = NULL;

	if ( ! pFnPlayPulverizerShoot )
		pFnPlayPulverizerShoot = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Pulverizer.PlayPulverizerShoot" );

	AKFWeapAttach_Pulverizer_execPlayPulverizerShoot_Parms PlayPulverizerShoot_Parms;

	this->ProcessEvent ( pFnPlayPulverizerShoot, &PlayPulverizerShoot_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Pulverizer.ThirdPersonFireEffects
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Pulverizer::ThirdPersonFireEffects ( )
{
	static UFunction* pFnThirdPersonFireEffects = NULL;

	if ( ! pFnThirdPersonFireEffects )
		pFnThirdPersonFireEffects = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Pulverizer.ThirdPersonFireEffects" );

	AKFWeapAttach_Pulverizer_execThirdPersonFireEffects_Parms ThirdPersonFireEffects_Parms;

	this->ProcessEvent ( pFnThirdPersonFireEffects, &ThirdPersonFireEffects_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Railgun.SpawnTracer
// [0x00820102] 
// Parameters infos:

void AKFWeapAttach_Railgun::SpawnTracer ( )
{
	static UFunction* pFnSpawnTracer = NULL;

	if ( ! pFnSpawnTracer )
		pFnSpawnTracer = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Railgun.SpawnTracer" );

	AKFWeapAttach_Railgun_execSpawnTracer_Parms SpawnTracer_Parms;

	this->ProcessEvent ( pFnSpawnTracer, &SpawnTracer_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Railgun.Destroyed
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Railgun::Destroyed ( )
{
	static UFunction* pFnDestroyed = NULL;

	if ( ! pFnDestroyed )
		pFnDestroyed = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Railgun.Destroyed" );

	AKFWeapAttach_Railgun_execDestroyed_Parms Destroyed_Parms;

	this->ProcessEvent ( pFnDestroyed, &Destroyed_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Railgun.DetachFrom
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Railgun::DetachFrom ( )
{
	static UFunction* pFnDetachFrom = NULL;

	if ( ! pFnDetachFrom )
		pFnDetachFrom = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Railgun.DetachFrom" );

	AKFWeapAttach_Railgun_execDetachFrom_Parms DetachFrom_Parms;

	this->ProcessEvent ( pFnDetachFrom, &DetachFrom_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Railgun.AttachTo
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Railgun::AttachTo ( )
{
	static UFunction* pFnAttachTo = NULL;

	if ( ! pFnAttachTo )
		pFnAttachTo = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Railgun.AttachTo" );

	AKFWeapAttach_Railgun_execAttachTo_Parms AttachTo_Parms;

	this->ProcessEvent ( pFnAttachTo, &AttachTo_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Railgun.StopAmbientSound
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Railgun::StopAmbientSound ( )
{
	static UFunction* pFnStopAmbientSound = NULL;

	if ( ! pFnStopAmbientSound )
		pFnStopAmbientSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Railgun.StopAmbientSound" );

	AKFWeapAttach_Railgun_execStopAmbientSound_Parms StopAmbientSound_Parms;

	this->ProcessEvent ( pFnStopAmbientSound, &StopAmbientSound_Parms, NULL );
};

// Function kfgamecontent.KFWeapAttach_Railgun.StartAmbientSound
// [0x00020102] 
// Parameters infos:

void AKFWeapAttach_Railgun::StartAmbientSound ( )
{
	static UFunction* pFnStartAmbientSound = NULL;

	if ( ! pFnStartAmbientSound )
		pFnStartAmbientSound = UObject::FindObject< UFunction > ( "Function kfgamecontent.KFWeapAttach_Railgun.StartAmbientSound" );

	AKFWeapAttach_Railgun_execStartAmbientSound_Parms StartAmbientSound_Parms;

	this->ProcessEvent ( pFnStartAmbientSound, &StartAmbientSound_Parms, NULL );
};


#ifdef _MSC_VER
	#pragma pack ( pop )
#endif